
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
		     size_t buf_len,
		     const struct sockaddr *dst,
		     socklen_t dst_len,
		     s32_t timeout,
		     void *user_data_send)
{
       0:	2000bed8 	.word	0x2000bed8
       4:	00005ba9 	.word	0x00005ba9
       8:	00005c0d 	.word	0x00005c0d
	struct net_pkt *pkt;
	struct net_buf *frag;
	size_t len, pos = 0;
	int ret;

	if (!ctx) {
       c:	00005a35 	.word	0x00005a35
      10:	00005a35 	.word	0x00005a35
		return -EINVAL;
	}

	if (!ctx->is_init) {
      14:	00005a35 	.word	0x00005a35
      18:	00005a35 	.word	0x00005a35
		return -ENOENT;
      1c:	00005a35 	.word	0x00005a35
		NET_DBG("Cannot send to peer (%d)", ret);
		net_pkt_unref(pkt);
	}

	return ret;
}
      20:	00005a35 	.word	0x00005a35
      24:	00005a35 	.word	0x00005a35
	if (!buf_len) {
      28:	00005a35 	.word	0x00005a35
	if (ctx->app_type == NET_APP_CLIENT) {
      2c:	00005665 	.word	0x00005665
      30:	00005a35 	.word	0x00005a35
		net_ctx = select_client_ctx(ctx, dst);
      34:	00005a35 	.word	0x00005a35
	if (!net_ctx) {
      38:	00005621 	.word	0x00005621
      3c:	00005a35 	.word	0x00005a35

00000040 <_irq_vector_table>:
	pkt = net_pkt_get_tx(net_ctx, timeout);
      40:	00005b6d 0001a08b 00005b6d 00005b6d     m[......m[..m[..
		frag = net_pkt_get_data(net_ctx, timeout);
      50:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
		return -ENOMEM;
      60:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
		len = net_buf_tailroom(frag);
      70:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
			net_buf_add_mem(frag, buf + pos, buf_len);
      80:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
      90:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
      a0:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
		net_pkt_unref(pkt);
      b0:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
		net_pkt_frag_add(pkt, frag);
      c0:	00005b6d 00005b6d 00005b6d 00005b6d     m[..m[..m[..m[..
		return -EMSGSIZE;
      d0:	00005b6d 00005b6d 00005b6d              m[..m[..m[..

000000dc <_sw_isr_table>:
#if defined(CONFIG_NET_IPV6)
		/* IPv6 address with port number */
		int end;

		ptr = strstr(peer_addr_str, "]:");
		if (!ptr) {
      dc:	00000000 0000539d 00000000 000059a1     .....S.......Y..
			return -EINVAL;
		}

		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
      ec:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
		memcpy(buf, peer_addr_str + 1, end);
		buf[end] = '\0';
      fc:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
		 */
		ret = get_port_number(peer_addr_str, base_addr_str,
				      sizeof(base_addr_str));
		if (ret > 0) {
			base_peer_addr = base_addr_str;
			peer_port = ret;
     10c:	00000000 0002ad45 2000d6e0 0002ab61     ....E...... a...
		} else {
			strncpy(base_addr_str, peer_addr_str,
				sizeof(base_addr_str) - 1);
		}

		addr_ok = net_ipaddr_parse(base_peer_addr,
     11c:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
			strncpy(base_addr_str, peer_addr_str,
     12c:	00000000 000059a1 00000000 0001a051     .....Y......Q...
				net_sin6(&addr)->sin6_port = local_port;
			} else {
				net_sin(&addr)->sin_port = local_port;
			}
		} else {
			memcpy(&addr, client_addr, sizeof(addr));
     13c:	00000000 000059a1 20002e08 0002b629     .....Y..... )...

			if (addr.sa_family != remote_addr.sa_family) {
     14c:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
#else
			return -EPROTONOSUPPORT;
#endif
		} else if (peer_addr->sa_family == AF_INET6) {
#if defined(CONFIG_NET_IPV6)
			memcpy(&ctx->ipv6.remote, peer_addr,
     15c:	00000000 000059a1 00000000 000054d9     .....Y.......T..
	}

	_net_app_print_info(ctx);

out:
	ctx->is_init = true;
     16c:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
	if (!peer_addr_str) {
     17c:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
		NET_ERR("Cannot know where to connect.");
     18c:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
     19c:	00000000 0001a085 00000000 000059a1     .............Y..
	if (ctx->ipv6.ctx) {
     1ac:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
		ctx->ipv6.ctx = NULL;
     1bc:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
		memcpy(&ctx->ipv6.remote, remote_addr,
     1cc:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
		if (ctx->default_ctx->remote.sa_family == AF_INET6) {
     1dc:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
     1ec:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
	_net_app_print_info(ctx);
     1fc:	00000000 000059a1 00000000 000059a1     .....Y.......Y..
	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
     20c:	00000000 000059a1                       .....Y..

00000214 <__aeabi_ldivmod>:
		NET_ERR("Unknown protocol family.");
     214:	b97b      	cbnz	r3, 236 <__aeabi_ldivmod+0x22>
     216:	b972      	cbnz	r2, 236 <__aeabi_ldivmod+0x22>
     218:	2900      	cmp	r1, #0
     21a:	bfbe      	ittt	lt
     21c:	2000      	movlt	r0, #0
     21e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     222:	e006      	blt.n	232 <__aeabi_ldivmod+0x1e>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     224:	bf08      	it	eq
     226:	2800      	cmpeq	r0, #0
     228:	bf1c      	itt	ne
     22a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     22e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     232:	f000 b9bd 	b.w	5b0 <__aeabi_idiv0>
     236:	f1ad 0c08 	sub.w	ip, sp, #8
     23a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
		return -EPFNOSUPPORT;
     23e:	2900      	cmp	r1, #0
     240:	db09      	blt.n	256 <__aeabi_ldivmod+0x42>
	int ret = 0;
     242:	2b00      	cmp	r3, #0
     244:	db1a      	blt.n	27c <__aeabi_ldivmod+0x68>
		return -EALREADY;
     246:	f000 f84d 	bl	2e4 <__udivmoddi4>
     24a:	f8dd e004 	ldr.w	lr, [sp, #4]
			return -EPROTONOSUPPORT;
     24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     252:	b004      	add	sp, #16
     254:	4770      	bx	lr
     256:	4240      	negs	r0, r0
     258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     25c:	2b00      	cmp	r3, #0
     25e:	db1b      	blt.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     260:	f000 f840 	bl	2e4 <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	4252      	negs	r2, r2
     276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     27a:	4770      	bx	lr
     27c:	4252      	negs	r2, r2
     27e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     282:	f000 f82f 	bl	2e4 <__udivmoddi4>
     286:	f8dd e004 	ldr.w	lr, [sp, #4]
     28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     28e:	b004      	add	sp, #16
     290:	4240      	negs	r0, r0
     292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     296:	4770      	bx	lr
     298:	4252      	negs	r2, r2
     29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29e:	f000 f821 	bl	2e4 <__udivmoddi4>
     2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2aa:	b004      	add	sp, #16
     2ac:	4252      	negs	r2, r2
     2ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b2:	4770      	bx	lr

000002b4 <__aeabi_uldivmod>:
     2b4:	b953      	cbnz	r3, 2cc <__aeabi_uldivmod+0x18>
     2b6:	b94a      	cbnz	r2, 2cc <__aeabi_uldivmod+0x18>
     2b8:	2900      	cmp	r1, #0
     2ba:	bf08      	it	eq
     2bc:	2800      	cmpeq	r0, #0
     2be:	bf1c      	itt	ne
     2c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2c8:	f000 b972 	b.w	5b0 <__aeabi_idiv0>
     2cc:	f1ad 0c08 	sub.w	ip, sp, #8
     2d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2d4:	f000 f806 	bl	2e4 <__udivmoddi4>
     2d8:	f8dd e004 	ldr.w	lr, [sp, #4]
     2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2e0:	b004      	add	sp, #16
     2e2:	4770      	bx	lr

000002e4 <__udivmoddi4>:
     2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2e8:	9e08      	ldr	r6, [sp, #32]
     2ea:	4604      	mov	r4, r0
     2ec:	4688      	mov	r8, r1
     2ee:	2b00      	cmp	r3, #0
     2f0:	d14b      	bne.n	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     2f2:	428a      	cmp	r2, r1
     2f4:	4615      	mov	r5, r2
     2f6:	d967      	bls.n	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
     2f8:	fab2 f282 	clz	r2, r2
     2fc:	b14a      	cbz	r2, 312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     2fe:	f1c2 0720 	rsb	r7, r2, #32
     302:	fa01 f302 	lsl.w	r3, r1, r2
     306:	fa20 f707 	lsr.w	r7, r0, r7
     30a:	4095      	lsls	r5, r2
     30c:	ea47 0803 	orr.w	r8, r7, r3
     310:	4094      	lsls	r4, r2
     312:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     316:	0c23      	lsrs	r3, r4, #16
     318:	fbb8 f7fe 	udiv	r7, r8, lr
     31c:	fa1f fc85 	uxth.w	ip, r5
     320:	fb0e 8817 	mls	r8, lr, r7, r8
     324:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     328:	fb07 f10c 	mul.w	r1, r7, ip
     32c:	4299      	cmp	r1, r3
     32e:	d909      	bls.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     330:	18eb      	adds	r3, r5, r3
     332:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     336:	f080 811b 	bcs.w	570 <CONFIG_NET_TX_STACK_SIZE+0xc0>
     33a:	4299      	cmp	r1, r3
     33c:	f240 8118 	bls.w	570 <CONFIG_NET_TX_STACK_SIZE+0xc0>
     340:	3f02      	subs	r7, #2
     342:	442b      	add	r3, r5
     344:	1a5b      	subs	r3, r3, r1
     346:	b2a4      	uxth	r4, r4
     348:	fbb3 f0fe 	udiv	r0, r3, lr
     34c:	fb0e 3310 	mls	r3, lr, r0, r3
     350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     354:	fb00 fc0c 	mul.w	ip, r0, ip
     358:	45a4      	cmp	ip, r4
     35a:	d909      	bls.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     35c:	192c      	adds	r4, r5, r4
     35e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     362:	f080 8107 	bcs.w	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     366:	45a4      	cmp	ip, r4
     368:	f240 8104 	bls.w	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     36c:	3802      	subs	r0, #2
     36e:	442c      	add	r4, r5
     370:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     374:	eba4 040c 	sub.w	r4, r4, ip
     378:	2700      	movs	r7, #0
     37a:	b11e      	cbz	r6, 384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     37c:	40d4      	lsrs	r4, r2
     37e:	2300      	movs	r3, #0
     380:	e9c6 4300 	strd	r4, r3, [r6]
     384:	4639      	mov	r1, r7
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	428b      	cmp	r3, r1
     38c:	d909      	bls.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     38e:	2e00      	cmp	r6, #0
     390:	f000 80eb 	beq.w	56a <CONFIG_NET_TX_STACK_SIZE+0xba>
     394:	2700      	movs	r7, #0
     396:	e9c6 0100 	strd	r0, r1, [r6]
     39a:	4638      	mov	r0, r7
     39c:	4639      	mov	r1, r7
     39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3a2:	fab3 f783 	clz	r7, r3
     3a6:	2f00      	cmp	r7, #0
     3a8:	d147      	bne.n	43a <CONFIG_BT_RX_STACK_SIZE+0x3a>
     3aa:	428b      	cmp	r3, r1
     3ac:	d302      	bcc.n	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     3ae:	4282      	cmp	r2, r0
     3b0:	f200 80fa 	bhi.w	5a8 <CONFIG_NET_TX_STACK_SIZE+0xf8>
     3b4:	1a84      	subs	r4, r0, r2
     3b6:	eb61 0303 	sbc.w	r3, r1, r3
     3ba:	2001      	movs	r0, #1
     3bc:	4698      	mov	r8, r3
     3be:	2e00      	cmp	r6, #0
     3c0:	d0e0      	beq.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c2:	e9c6 4800 	strd	r4, r8, [r6]
     3c6:	e7dd      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c8:	b902      	cbnz	r2, 3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     3ca:	deff      	udf	#255	; 0xff
     3cc:	fab2 f282 	clz	r2, r2
     3d0:	2a00      	cmp	r2, #0
     3d2:	f040 808f 	bne.w	4f4 <CONFIG_NET_TX_STACK_SIZE+0x44>
     3d6:	1b49      	subs	r1, r1, r5
     3d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3dc:	fa1f f885 	uxth.w	r8, r5
     3e0:	2701      	movs	r7, #1
     3e2:	fbb1 fcfe 	udiv	ip, r1, lr
     3e6:	0c23      	lsrs	r3, r4, #16
     3e8:	fb0e 111c 	mls	r1, lr, ip, r1
     3ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3f0:	fb08 f10c 	mul.w	r1, r8, ip
     3f4:	4299      	cmp	r1, r3
     3f6:	d907      	bls.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     3f8:	18eb      	adds	r3, r5, r3
     3fa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     3fe:	d202      	bcs.n	406 <CONFIG_BT_RX_STACK_SIZE+0x6>
     400:	4299      	cmp	r1, r3
     402:	f200 80cd 	bhi.w	5a0 <CONFIG_NET_TX_STACK_SIZE+0xf0>
     406:	4684      	mov	ip, r0
     408:	1a59      	subs	r1, r3, r1
     40a:	b2a3      	uxth	r3, r4
     40c:	fbb1 f0fe 	udiv	r0, r1, lr
     410:	fb0e 1410 	mls	r4, lr, r0, r1
     414:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     418:	fb08 f800 	mul.w	r8, r8, r0
     41c:	45a0      	cmp	r8, r4
     41e:	d907      	bls.n	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     420:	192c      	adds	r4, r5, r4
     422:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     426:	d202      	bcs.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     428:	45a0      	cmp	r8, r4
     42a:	f200 80b6 	bhi.w	59a <CONFIG_NET_TX_STACK_SIZE+0xea>
     42e:	4618      	mov	r0, r3
     430:	eba4 0408 	sub.w	r4, r4, r8
     434:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     438:	e79f      	b.n	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     43a:	f1c7 0c20 	rsb	ip, r7, #32
     43e:	40bb      	lsls	r3, r7
     440:	fa22 fe0c 	lsr.w	lr, r2, ip
     444:	ea4e 0e03 	orr.w	lr, lr, r3
     448:	fa01 f407 	lsl.w	r4, r1, r7
     44c:	fa20 f50c 	lsr.w	r5, r0, ip
     450:	fa21 f30c 	lsr.w	r3, r1, ip
     454:	ea4f 481e 	mov.w	r8, lr, lsr #16
     458:	4325      	orrs	r5, r4
     45a:	fbb3 f9f8 	udiv	r9, r3, r8
     45e:	0c2c      	lsrs	r4, r5, #16
     460:	fb08 3319 	mls	r3, r8, r9, r3
     464:	fa1f fa8e 	uxth.w	sl, lr
     468:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     46c:	fb09 f40a 	mul.w	r4, r9, sl
     470:	429c      	cmp	r4, r3
     472:	fa02 f207 	lsl.w	r2, r2, r7
     476:	fa00 f107 	lsl.w	r1, r0, r7
     47a:	d90b      	bls.n	494 <CONFIG_BT_RX_STACK_SIZE+0x94>
     47c:	eb1e 0303 	adds.w	r3, lr, r3
     480:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     484:	f080 8087 	bcs.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     488:	429c      	cmp	r4, r3
     48a:	f240 8084 	bls.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     48e:	f1a9 0902 	sub.w	r9, r9, #2
     492:	4473      	add	r3, lr
     494:	1b1b      	subs	r3, r3, r4
     496:	b2ad      	uxth	r5, r5
     498:	fbb3 f0f8 	udiv	r0, r3, r8
     49c:	fb08 3310 	mls	r3, r8, r0, r3
     4a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     4a4:	fb00 fa0a 	mul.w	sl, r0, sl
     4a8:	45a2      	cmp	sl, r4
     4aa:	d908      	bls.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     4ac:	eb1e 0404 	adds.w	r4, lr, r4
     4b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     4b4:	d26b      	bcs.n	58e <CONFIG_NET_TX_STACK_SIZE+0xde>
     4b6:	45a2      	cmp	sl, r4
     4b8:	d969      	bls.n	58e <CONFIG_NET_TX_STACK_SIZE+0xde>
     4ba:	3802      	subs	r0, #2
     4bc:	4474      	add	r4, lr
     4be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4c2:	fba0 8902 	umull	r8, r9, r0, r2
     4c6:	eba4 040a 	sub.w	r4, r4, sl
     4ca:	454c      	cmp	r4, r9
     4cc:	46c2      	mov	sl, r8
     4ce:	464b      	mov	r3, r9
     4d0:	d354      	bcc.n	57c <CONFIG_NET_TX_STACK_SIZE+0xcc>
     4d2:	d051      	beq.n	578 <CONFIG_NET_TX_STACK_SIZE+0xc8>
     4d4:	2e00      	cmp	r6, #0
     4d6:	d069      	beq.n	5ac <CONFIG_NET_TX_STACK_SIZE+0xfc>
     4d8:	ebb1 050a 	subs.w	r5, r1, sl
     4dc:	eb64 0403 	sbc.w	r4, r4, r3
     4e0:	fa04 fc0c 	lsl.w	ip, r4, ip
     4e4:	40fd      	lsrs	r5, r7
     4e6:	40fc      	lsrs	r4, r7
     4e8:	ea4c 0505 	orr.w	r5, ip, r5
     4ec:	e9c6 5400 	strd	r5, r4, [r6]
     4f0:	2700      	movs	r7, #0
     4f2:	e747      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     4f4:	f1c2 0320 	rsb	r3, r2, #32
     4f8:	fa20 f703 	lsr.w	r7, r0, r3
     4fc:	4095      	lsls	r5, r2
     4fe:	fa01 f002 	lsl.w	r0, r1, r2
     502:	fa21 f303 	lsr.w	r3, r1, r3
     506:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     50a:	4338      	orrs	r0, r7
     50c:	0c01      	lsrs	r1, r0, #16
     50e:	fbb3 f7fe 	udiv	r7, r3, lr
     512:	fa1f f885 	uxth.w	r8, r5
     516:	fb0e 3317 	mls	r3, lr, r7, r3
     51a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     51e:	fb07 f308 	mul.w	r3, r7, r8
     522:	428b      	cmp	r3, r1
     524:	fa04 f402 	lsl.w	r4, r4, r2
     528:	d907      	bls.n	53a <CONFIG_NET_TX_STACK_SIZE+0x8a>
     52a:	1869      	adds	r1, r5, r1
     52c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     530:	d22f      	bcs.n	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     532:	428b      	cmp	r3, r1
     534:	d92d      	bls.n	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     536:	3f02      	subs	r7, #2
     538:	4429      	add	r1, r5
     53a:	1acb      	subs	r3, r1, r3
     53c:	b281      	uxth	r1, r0
     53e:	fbb3 f0fe 	udiv	r0, r3, lr
     542:	fb0e 3310 	mls	r3, lr, r0, r3
     546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     54a:	fb00 f308 	mul.w	r3, r0, r8
     54e:	428b      	cmp	r3, r1
     550:	d907      	bls.n	562 <CONFIG_NET_TX_STACK_SIZE+0xb2>
     552:	1869      	adds	r1, r5, r1
     554:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     558:	d217      	bcs.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     55a:	428b      	cmp	r3, r1
     55c:	d915      	bls.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     55e:	3802      	subs	r0, #2
     560:	4429      	add	r1, r5
     562:	1ac9      	subs	r1, r1, r3
     564:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     568:	e73b      	b.n	3e2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe2>
     56a:	4637      	mov	r7, r6
     56c:	4630      	mov	r0, r6
     56e:	e709      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     570:	4607      	mov	r7, r0
     572:	e6e7      	b.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     574:	4618      	mov	r0, r3
     576:	e6fb      	b.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     578:	4541      	cmp	r1, r8
     57a:	d2ab      	bcs.n	4d4 <CONFIG_NET_TX_STACK_SIZE+0x24>
     57c:	ebb8 0a02 	subs.w	sl, r8, r2
     580:	eb69 020e 	sbc.w	r2, r9, lr
     584:	3801      	subs	r0, #1
     586:	4613      	mov	r3, r2
     588:	e7a4      	b.n	4d4 <CONFIG_NET_TX_STACK_SIZE+0x24>
     58a:	4660      	mov	r0, ip
     58c:	e7e9      	b.n	562 <CONFIG_NET_TX_STACK_SIZE+0xb2>
     58e:	4618      	mov	r0, r3
     590:	e795      	b.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     592:	4667      	mov	r7, ip
     594:	e7d1      	b.n	53a <CONFIG_NET_TX_STACK_SIZE+0x8a>
     596:	4681      	mov	r9, r0
     598:	e77c      	b.n	494 <CONFIG_BT_RX_STACK_SIZE+0x94>
     59a:	3802      	subs	r0, #2
     59c:	442c      	add	r4, r5
     59e:	e747      	b.n	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     5a0:	f1ac 0c02 	sub.w	ip, ip, #2
     5a4:	442b      	add	r3, r5
     5a6:	e72f      	b.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
     5a8:	4638      	mov	r0, r7
     5aa:	e708      	b.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     5ac:	4637      	mov	r7, r6
     5ae:	e6e9      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>

000005b0 <__aeabi_idiv0>:
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop

000005b4 <sample_sensor>:

	return adc_dev;
}

int sample_sensor (int channel_id)
{
     5b4:	b530      	push	{r4, r5, lr}
     5b6:	b087      	sub	sp, #28
     5b8:	4604      	mov	r4, r0
	int ret;

	const struct adc_sequence sequence = {
     5ba:	2214      	movs	r2, #20
     5bc:	2100      	movs	r1, #0
     5be:	a801      	add	r0, sp, #4
     5c0:	f005 fc8f 	bl	5ee2 <memset>
		.channels    = BIT(channel_id),
     5c4:	2001      	movs	r0, #1
     5c6:	40a0      	lsls	r0, r4
	const struct adc_sequence sequence = {
     5c8:	230c      	movs	r3, #12
     5ca:	9002      	str	r0, [sp, #8]
     5cc:	9304      	str	r3, [sp, #16]
     5ce:	4d1a      	ldr	r5, [pc, #104]	; (638 <CONFIG_BT_CTLR_COMPANY_ID+0x47>)
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     5d0:	481a      	ldr	r0, [pc, #104]	; (63c <CONFIG_BT_CTLR_COMPANY_ID+0x4b>)
	const struct adc_sequence sequence = {
     5d2:	9503      	str	r5, [sp, #12]
     5d4:	230a      	movs	r3, #10
     5d6:	f88d 3014 	strb.w	r3, [sp, #20]
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     5da:	f02b f873 	bl	2b6c4 <device_get_binding>
	if (!adc_dev) {
     5de:	4604      	mov	r4, r0
     5e0:	b980      	cbnz	r0, 604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>
		printf("Cannot get ADC device");
     5e2:	4817      	ldr	r0, [pc, #92]	; (640 <CONFIG_BT_CTLR_COMPANY_ID+0x4f>)
     5e4:	f006 f922 	bl	682c <printf>
static inline int adc_read(struct device *dev,
			   const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api = dev->driver_api;

	return api->read(dev, sequence);
     5e8:	6863      	ldr	r3, [r4, #4]
     5ea:	a901      	add	r1, sp, #4
     5ec:	685b      	ldr	r3, [r3, #4]
     5ee:	4620      	mov	r0, r4
     5f0:	4798      	blx	r3
		return -1;
	}

	ret = adc_read(adc_dev, &sequence);

	if (ret) {
     5f2:	4601      	mov	r1, r0
     5f4:	b110      	cbz	r0, 5fc <CONFIG_BT_CTLR_COMPANY_ID+0xb>
		printf("Failed to read ADC with code %d", ret);
     5f6:	4813      	ldr	r0, [pc, #76]	; (644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>)
     5f8:	f006 f918 	bl	682c <printf>
	}

	return m_sample_buffer[0];
     5fc:	f9b5 0000 	ldrsh.w	r0, [r5]
}
     600:	b007      	add	sp, #28
     602:	bd30      	pop	{r4, r5, pc}
	return api->channel_setup(dev, channel_cfg);
     604:	6843      	ldr	r3, [r0, #4]
     606:	4910      	ldr	r1, [pc, #64]	; (648 <CONFIG_BT_CTLR_COMPANY_ID+0x57>)
     608:	681b      	ldr	r3, [r3, #0]
     60a:	4798      	blx	r3
	if (ret) {
     60c:	4601      	mov	r1, r0
     60e:	b110      	cbz	r0, 616 <CONFIG_BT_CTLR_COMPANY_ID+0x25>
		printf("Setting up of the first channel failed with code %d", ret);
     610:	480e      	ldr	r0, [pc, #56]	; (64c <CONFIG_BT_CTLR_COMPANY_ID+0x5b>)
     612:	f006 f90b 	bl	682c <printf>
     616:	6863      	ldr	r3, [r4, #4]
     618:	490d      	ldr	r1, [pc, #52]	; (650 <CONFIG_BT_CTLR_COMPANY_ID+0x5f>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	4620      	mov	r0, r4
     61e:	4798      	blx	r3
	if (ret) {
     620:	4601      	mov	r1, r0
     622:	b110      	cbz	r0, 62a <CONFIG_BT_CTLR_COMPANY_ID+0x39>
		printf("Setting up of the second channel failed with code %d", ret);
     624:	480b      	ldr	r0, [pc, #44]	; (654 <CONFIG_BT_CTLR_COMPANY_ID+0x63>)
     626:	f006 f901 	bl	682c <printf>
	(void)memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
     62a:	220c      	movs	r2, #12
     62c:	2100      	movs	r1, #0
     62e:	4802      	ldr	r0, [pc, #8]	; (638 <CONFIG_BT_CTLR_COMPANY_ID+0x47>)
     630:	f005 fc57 	bl	5ee2 <memset>
     634:	e7d8      	b.n	5e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xc>
     636:	bf00      	nop
     638:	20000000 	.word	0x20000000
     63c:	0002d276 	.word	0x0002d276
     640:	0002d27c 	.word	0x0002d27c
     644:	0002d2fb 	.word	0x0002d2fb
     648:	0002d266 	.word	0x0002d266
     64c:	0002d292 	.word	0x0002d292
     650:	0002d26e 	.word	0x0002d26e
     654:	0002d2c6 	.word	0x0002d2c6

00000658 <sampling>:

int sampling()
{
     658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int sample;
	int bowlFill;
	for(int i = 0; i < 4; i++){
		k_sleep(500);
		printk("\nSampling ... ");
     65c:	4f20      	ldr	r7, [pc, #128]	; (6e0 <sampling+0x88>)
			bowlFill = 50;
		} else if(sample > 570 && sample <= 670){
			printf("Bowl is 3/4 fullish");
			bowlFill = 75;
		} else{
			printf("Bowl is fullish");
     65e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6f4 <sampling+0x9c>
			printf("Bowl is 3/4 fullish");
     662:	f8df 9094 	ldr.w	r9, [pc, #148]	; 6f8 <sampling+0xa0>
{
     666:	2604      	movs	r6, #4

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     66c:	f02b fe12 	bl	2c294 <_impl_k_sleep>
		printk("\nSampling ... ");
     670:	4638      	mov	r0, r7
     672:	f000 fd3d 	bl	10f0 <printk>
		sample = sample_sensor(ADC_1ST_CHANNEL_ID);
     676:	2000      	movs	r0, #0
     678:	f7ff ff9c 	bl	5b4 <sample_sensor>
		if(sample < 170){
     67c:	28a9      	cmp	r0, #169	; 0xa9
		sample = sample_sensor(ADC_1ST_CHANNEL_ID);
     67e:	4605      	mov	r5, r0
		if(sample < 170){
     680:	dc0c      	bgt.n	69c <sampling+0x44>
			printf("Bowl is emptyish");
     682:	4818      	ldr	r0, [pc, #96]	; (6e4 <sampling+0x8c>)
     684:	f006 f8d2 	bl	682c <printf>
			bowlFill = 0;
     688:	2400      	movs	r4, #0
			bowlFill = 100;
		}

		printk("%d \n", sample);
     68a:	4629      	mov	r1, r5
     68c:	4816      	ldr	r0, [pc, #88]	; (6e8 <sampling+0x90>)
     68e:	f000 fd2f 	bl	10f0 <printk>
	for(int i = 0; i < 4; i++){
     692:	3e01      	subs	r6, #1
     694:	d1e8      	bne.n	668 <sampling+0x10>
	}
	return bowlFill;
}
     696:	4620      	mov	r0, r4
     698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if(sample >= 170 && sample <= 430){
     69c:	f1a0 03aa 	sub.w	r3, r0, #170	; 0xaa
     6a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     6a4:	d804      	bhi.n	6b0 <sampling+0x58>
			printf("Bowl is 1/4 fullish");
     6a6:	4811      	ldr	r0, [pc, #68]	; (6ec <sampling+0x94>)
     6a8:	f006 f8c0 	bl	682c <printf>
			bowlFill = 25;
     6ac:	2419      	movs	r4, #25
     6ae:	e7ec      	b.n	68a <sampling+0x32>
		} else if(sample > 430 && sample <= 570){
     6b0:	f46f 73d7 	mvn.w	r3, #430	; 0x1ae
     6b4:	18c3      	adds	r3, r0, r3
     6b6:	2b8b      	cmp	r3, #139	; 0x8b
     6b8:	d804      	bhi.n	6c4 <sampling+0x6c>
			printf("Bowl is 1/2 fullish");
     6ba:	480d      	ldr	r0, [pc, #52]	; (6f0 <sampling+0x98>)
     6bc:	f006 f8b6 	bl	682c <printf>
			bowlFill = 50;
     6c0:	2432      	movs	r4, #50	; 0x32
     6c2:	e7e2      	b.n	68a <sampling+0x32>
		} else if(sample > 570 && sample <= 670){
     6c4:	f2a0 233b 	subw	r3, r0, #571	; 0x23b
     6c8:	2b63      	cmp	r3, #99	; 0x63
     6ca:	d804      	bhi.n	6d6 <sampling+0x7e>
			printf("Bowl is 3/4 fullish");
     6cc:	4648      	mov	r0, r9
     6ce:	f006 f8ad 	bl	682c <printf>
			bowlFill = 75;
     6d2:	244b      	movs	r4, #75	; 0x4b
     6d4:	e7d9      	b.n	68a <sampling+0x32>
			printf("Bowl is fullish");
     6d6:	4640      	mov	r0, r8
     6d8:	f006 f8a8 	bl	682c <printf>
			bowlFill = 100;
     6dc:	2464      	movs	r4, #100	; 0x64
     6de:	e7d4      	b.n	68a <sampling+0x32>
     6e0:	0002d31b 	.word	0x0002d31b
     6e4:	0002d32a 	.word	0x0002d32a
     6e8:	0002d387 	.word	0x0002d387
     6ec:	0002d33b 	.word	0x0002d33b
     6f0:	0002d34f 	.word	0x0002d34f
     6f4:	0002d377 	.word	0x0002d377
     6f8:	0002d363 	.word	0x0002d363

000006fc <main>:
#define PERIOD (USEC_PER_SEC / 50)
#define BUFFER_SIZE  6


void main(void)
{
     6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int a;
	printf("Preparing ADC\n");
     700:	482f      	ldr	r0, [pc, #188]	; (7c0 <main+0xc4>)
     702:	f006 f893 	bl	682c <printf>
	
	u32_t time_stamp;
	u32_t milliseconds_spent;
	

	btn_dev = device_get_binding(BTN_PORT);
     706:	482f      	ldr	r0, [pc, #188]	; (7c4 <main+0xc8>)
     708:	f02a ffdc 	bl	2b6c4 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     70c:	6843      	ldr	r3, [r0, #4]
     70e:	220d      	movs	r2, #13
     710:	2100      	movs	r1, #0
     712:	681c      	ldr	r4, [r3, #0]
     714:	f44f 7380 	mov.w	r3, #256	; 0x100
     718:	47a0      	blx	r4
	gpio_pin_configure(btn_dev, BTN, GPIO_DIR_IN | GPIO_PUD_PULL_UP);
	printk("PWM servo control 90degree clockwise -> 90degree anticlockwise\n");
     71a:	482b      	ldr	r0, [pc, #172]	; (7c8 <main+0xcc>)
     71c:	f000 fce8 	bl	10f0 <printk>
	pwm_dev = device_get_binding(PWM_DRIVER);
     720:	482a      	ldr	r0, [pc, #168]	; (7cc <main+0xd0>)
     722:	f02a ffcf 	bl	2b6c4 <device_get_binding>
	if (!pwm_dev) {
     726:	4606      	mov	r6, r0
     728:	b928      	cbnz	r0, 736 <main+0x3a>
		printk("Cannot find %s!\n", PWM_DRIVER);
     72a:	4928      	ldr	r1, [pc, #160]	; (7cc <main+0xd0>)
     72c:	4828      	ldr	r0, [pc, #160]	; (7d0 <main+0xd4>)
			k_sleep(MSEC_PER_SEC);
			time_stamp = k_uptime_get_32();
		}

	}
}
     72e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("Cannot find %s!\n", PWM_DRIVER);
     732:	f000 bcdd 	b.w	10f0 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer)

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)

K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
     736:	f02c f9a3 	bl	2ca80 <_impl_k_uptime_get_32>
	u32_t time_until = get_time_to(1501, 1502) + time_stamp;
     73a:	f240 51de 	movw	r1, #1502	; 0x5de
     73e:	4605      	mov	r5, r0
     740:	f240 50dd 	movw	r0, #1501	; 0x5dd
     744:	f000 f8f4 	bl	930 <get_time_to>
	time_until = time_until / 15;
     748:	230f      	movs	r3, #15
	u32_t time_until = get_time_to(1501, 1502) + time_stamp;
     74a:	4428      	add	r0, r5
	printf("%" PRIu32 "\n", time_stamp);
     74c:	4629      	mov	r1, r5
	time_until = time_until / 15;
     74e:	fbb0 f4f3 	udiv	r4, r0, r3
	printf("%" PRIu32 "\n", time_stamp);
     752:	4820      	ldr	r0, [pc, #128]	; (7d4 <main+0xd8>)
		printf("%d \n", b);
     754:	f8df a080 	ldr.w	sl, [pc, #128]	; 7d8 <main+0xdc>
			printf("%d sample \n", a);
     758:	f8df 9080 	ldr.w	r9, [pc, #128]	; 7dc <main+0xe0>
			printf("%" PRIu32 "\n", milliseconds_spent);
     75c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7d4 <main+0xd8>
	printf("%" PRIu32 "\n", time_stamp);
     760:	f006 f864 	bl	682c <printf>
	printf("%" PRIu32 "\n", time_until);
     764:	4621      	mov	r1, r4
     766:	481b      	ldr	r0, [pc, #108]	; (7d4 <main+0xd8>)
     768:	f006 f860 	bl	682c <printf>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     76c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     770:	f02b fd90 	bl	2c294 <_impl_k_sleep>
		int b = sample_sensor(ADC_1ST_CHANNEL_ID);
     774:	2000      	movs	r0, #0
     776:	f7ff ff1d 	bl	5b4 <sample_sensor>
		printf("%d \n", b);
     77a:	4601      	mov	r1, r0
     77c:	4650      	mov	r0, sl
     77e:	f006 f855 	bl	682c <printf>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
     782:	f02c f97d 	bl	2ca80 <_impl_k_uptime_get_32>
		if(milliseconds_spent >= (time_until) && milliseconds_spent <=(time_until+1000)){
     786:	4284      	cmp	r4, r0
     788:	4605      	mov	r5, r0
     78a:	d8ef      	bhi.n	76c <main+0x70>
     78c:	f504 737a 	add.w	r3, r4, #1000	; 0x3e8
     790:	4298      	cmp	r0, r3
     792:	d8eb      	bhi.n	76c <main+0x70>
			a = sampling();
     794:	f7ff ff60 	bl	658 <sampling>
     798:	4607      	mov	r7, r0
			printf("%d sample \n", a);
     79a:	4601      	mov	r1, r0
     79c:	4648      	mov	r0, r9
     79e:	f006 f845 	bl	682c <printf>
			printf("%" PRIu32 "\n", milliseconds_spent);
     7a2:	4629      	mov	r1, r5
     7a4:	4640      	mov	r0, r8
     7a6:	f006 f841 	bl	682c <printf>
			fill_up(pwm_dev, a);
     7aa:	4639      	mov	r1, r7
     7ac:	4630      	mov	r0, r6
     7ae:	f000 f8a3 	bl	8f8 <fill_up>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     7b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7b6:	f02b fd6d 	bl	2c294 <_impl_k_sleep>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
     7ba:	f02c f961 	bl	2ca80 <_impl_k_uptime_get_32>
     7be:	e7d5      	b.n	76c <main+0x70>
     7c0:	0002d38c 	.word	0x0002d38c
     7c4:	0002d39b 	.word	0x0002d39b
     7c8:	0002d3a2 	.word	0x0002d3a2
     7cc:	0002d3e2 	.word	0x0002d3e2
     7d0:	0002d3e8 	.word	0x0002d3e8
     7d4:	0002dda1 	.word	0x0002dda1
     7d8:	0002d387 	.word	0x0002d387
     7dc:	0002d3f9 	.word	0x0002d3f9

000007e0 <pwm_pin_set_usec.constprop.2>:
 * @param pulse Pulse width (in micro second) set to the PWM.
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->get_cycles_per_sec(dev, pwm, cycles);
     7e4:	6843      	ldr	r3, [r0, #4]
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     7e6:	460e      	mov	r6, r1
     7e8:	4692      	mov	sl, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
     7ea:	685b      	ldr	r3, [r3, #4]
     7ec:	466a      	mov	r2, sp
     7ee:	2116      	movs	r1, #22
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     7f0:	4604      	mov	r4, r0
	return api->get_cycles_per_sec(dev, pwm, cycles);
     7f2:	4798      	blx	r3
				   u32_t period, u32_t pulse)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     7f4:	bb40      	cbnz	r0, 848 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     7f6:	e9dd b500 	ldrd	fp, r5, [sp]
     7fa:	fba6 010b 	umull	r0, r1, r6, fp
     7fe:	fb06 1105 	mla	r1, r6, r5, r1
     802:	4a14      	ldr	r2, [pc, #80]	; (854 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x54>)
     804:	2300      	movs	r3, #0
     806:	f7ff fd55 	bl	2b4 <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
     80a:	f04f 0900 	mov.w	r9, #0
     80e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     812:	4589      	cmp	r9, r1
     814:	bf08      	it	eq
     816:	4580      	cmpeq	r8, r0
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     818:	4606      	mov	r6, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
     81a:	d318      	bcc.n	84e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     81c:	fbaa 010b 	umull	r0, r1, sl, fp
     820:	fb0a 1105 	mla	r1, sl, r5, r1
     824:	4a0b      	ldr	r2, [pc, #44]	; (854 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x54>)
     826:	2300      	movs	r3, #0
     828:	f7ff fd44 	bl	2b4 <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     82c:	4589      	cmp	r9, r1
     82e:	bf08      	it	eq
     830:	4580      	cmpeq	r8, r0
     832:	d30c      	bcc.n	84e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e>
	return api->pin_set(dev, pwm, period, pulse);
     834:	6863      	ldr	r3, [r4, #4]
     836:	4632      	mov	r2, r6
     838:	681d      	ldr	r5, [r3, #0]
     83a:	2116      	movs	r1, #22
     83c:	4603      	mov	r3, r0
     83e:	4620      	mov	r0, r4
     840:	47a8      	blx	r5
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
     842:	b003      	add	sp, #12
     844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     848:	f06f 0004 	mvn.w	r0, #4
     84c:	e7f9      	b.n	842 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42>
		return -ENOTSUP;
     84e:	f06f 0022 	mvn.w	r0, #34	; 0x22
     852:	e7f6      	b.n	842 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42>
     854:	000f4240 	.word	0x000f4240

00000858 <turn_clockwise>:

#define PERIOD (USEC_PER_SEC / 50)

void turn_clockwise (struct device *pwm_dev){
		u32_t pulse_width = PERIOD;
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     858:	f644 6220 	movw	r2, #20000	; 0x4e20
void turn_clockwise (struct device *pwm_dev){
     85c:	b510      	push	{r4, lr}
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     85e:	4611      	mov	r1, r2
void turn_clockwise (struct device *pwm_dev){
     860:	4604      	mov	r4, r0
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     862:	f7ff ffbd 	bl	7e0 <pwm_pin_set_usec.constprop.2>
     866:	b120      	cbz	r0, 872 <turn_clockwise+0x1a>
			printk("pwm pin set fails\n");
     868:	480e      	ldr	r0, [pc, #56]	; (8a4 <turn_clockwise+0x4c>)
		k_sleep(90);
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
			printk("pwm pin set fails\n");
			return;
		}
}
     86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printk("pwm pin set fails\n");
     86e:	f000 bc3f 	b.w	10f0 <printk>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     872:	205a      	movs	r0, #90	; 0x5a
     874:	f02b fd0e 	bl	2c294 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     878:	f644 5258 	movw	r2, #19800	; 0x4d58
     87c:	f644 6120 	movw	r1, #20000	; 0x4e20
     880:	4620      	mov	r0, r4
     882:	f7ff ffad 	bl	7e0 <pwm_pin_set_usec.constprop.2>
     886:	2800      	cmp	r0, #0
     888:	d1ee      	bne.n	868 <turn_clockwise+0x10>
     88a:	205a      	movs	r0, #90	; 0x5a
     88c:	f02b fd02 	bl	2c294 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     890:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
     894:	f644 6120 	movw	r1, #20000	; 0x4e20
     898:	4620      	mov	r0, r4
     89a:	f7ff ffa1 	bl	7e0 <pwm_pin_set_usec.constprop.2>
     89e:	2800      	cmp	r0, #0
     8a0:	d1e2      	bne.n	868 <turn_clockwise+0x10>
}
     8a2:	bd10      	pop	{r4, pc}
     8a4:	0002d405 	.word	0x0002d405

000008a8 <turn_anticlockwise>:

void turn_anticlockwise (struct device *pwm_dev){
     8a8:	b510      	push	{r4, lr}
		u32_t pulse_width = 0;
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     8aa:	2200      	movs	r2, #0
     8ac:	f644 6120 	movw	r1, #20000	; 0x4e20
void turn_anticlockwise (struct device *pwm_dev){
     8b0:	4604      	mov	r4, r0
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     8b2:	f7ff ff95 	bl	7e0 <pwm_pin_set_usec.constprop.2>
     8b6:	b120      	cbz	r0, 8c2 <turn_anticlockwise+0x1a>
			printk("pwm pin set fails\n");
     8b8:	480e      	ldr	r0, [pc, #56]	; (8f4 <turn_anticlockwise+0x4c>)
		k_sleep(90);
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
			printk("pwm pin set fails\n");
			return;
		}
}
     8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printk("pwm pin set fails\n");
     8be:	f000 bc17 	b.w	10f0 <printk>
     8c2:	205a      	movs	r0, #90	; 0x5a
     8c4:	f02b fce6 	bl	2c294 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     8c8:	22c8      	movs	r2, #200	; 0xc8
     8ca:	f644 6120 	movw	r1, #20000	; 0x4e20
     8ce:	4620      	mov	r0, r4
     8d0:	f7ff ff86 	bl	7e0 <pwm_pin_set_usec.constprop.2>
     8d4:	2800      	cmp	r0, #0
     8d6:	d1ef      	bne.n	8b8 <turn_anticlockwise+0x10>
     8d8:	205a      	movs	r0, #90	; 0x5a
     8da:	f02b fcdb 	bl	2c294 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     8de:	f44f 72c8 	mov.w	r2, #400	; 0x190
     8e2:	f644 6120 	movw	r1, #20000	; 0x4e20
     8e6:	4620      	mov	r0, r4
     8e8:	f7ff ff7a 	bl	7e0 <pwm_pin_set_usec.constprop.2>
     8ec:	2800      	cmp	r0, #0
     8ee:	d1e3      	bne.n	8b8 <turn_anticlockwise+0x10>
}
     8f0:	bd10      	pop	{r4, pc}
     8f2:	bf00      	nop
     8f4:	0002d405 	.word	0x0002d405

000008f8 <fill_up>:

void fill_up(struct device *pwm_dev, int sample){
     8f8:	b510      	push	{r4, lr}
     8fa:	4604      	mov	r4, r0
	while(sample < 100){
     8fc:	2963      	cmp	r1, #99	; 0x63
     8fe:	dd00      	ble.n	902 <fill_up+0xa>
		turn_anticlockwise(pwm_dev);
		pwm_pin_set_usec(pwm_dev, YOUR_PIN, 0, 0);
		sample = sampling();
		//k_sleep(MSEC_PER_SEC);
	}
}
     900:	bd10      	pop	{r4, pc}
		turn_clockwise(pwm_dev);
     902:	4620      	mov	r0, r4
     904:	f7ff ffa8 	bl	858 <turn_clockwise>
		pwm_pin_set_usec(pwm_dev, YOUR_PIN, 0, 0);
     908:	2200      	movs	r2, #0
     90a:	4611      	mov	r1, r2
     90c:	4620      	mov	r0, r4
     90e:	f7ff ff67 	bl	7e0 <pwm_pin_set_usec.constprop.2>
     912:	2032      	movs	r0, #50	; 0x32
     914:	f02b fcbe 	bl	2c294 <_impl_k_sleep>
		turn_anticlockwise(pwm_dev);
     918:	4620      	mov	r0, r4
     91a:	f7ff ffc5 	bl	8a8 <turn_anticlockwise>
		pwm_pin_set_usec(pwm_dev, YOUR_PIN, 0, 0);
     91e:	2200      	movs	r2, #0
     920:	4611      	mov	r1, r2
     922:	4620      	mov	r0, r4
     924:	f7ff ff5c 	bl	7e0 <pwm_pin_set_usec.constprop.2>
		sample = sampling();
     928:	f7ff fe96 	bl	658 <sampling>
     92c:	4601      	mov	r1, r0
     92e:	e7e5      	b.n	8fc <fill_up+0x4>

00000930 <get_time_to>:
//given the current time, calculate the length of time until the next feeding time.
//next feeding time must be the next 
u32_t get_time_to(u32_t start_time, u32_t end_time)
{
    u32_t time_diff_in_mins = 0;
    u32_t start_min = start_time % 100;
     930:	2364      	movs	r3, #100	; 0x64
    u32_t start_hour = start_time / 100;
    u32_t end_min = end_time % 100;
    u32_t end_hour = end_time / 100;

    if (end_time < start_time)
     932:	4288      	cmp	r0, r1
    u32_t start_min = start_time % 100;
     934:	fbb0 f2f3 	udiv	r2, r0, r3
{
     938:	b530      	push	{r4, r5, lr}
    u32_t end_min = end_time % 100;
     93a:	fbb1 f4f3 	udiv	r4, r1, r3
    u32_t start_min = start_time % 100;
     93e:	fb03 0512 	mls	r5, r3, r2, r0
    u32_t end_min = end_time % 100;
     942:	fb03 1314 	mls	r3, r3, r4, r1
    {
        end_hour += 12;
        time_diff_in_mins += 12*60;
     946:	bf8a      	itet	hi
     948:	f44f 7034 	movhi.w	r0, #720	; 0x2d0
    u32_t time_diff_in_mins = 0;
     94c:	2000      	movls	r0, #0
        end_hour += 12;
     94e:	340c      	addhi	r4, #12
    }
    if (end_min > start_min)
     950:	429d      	cmp	r5, r3
        time_diff_in_mins += end_min - start_min;
        time_diff_in_mins += 60*(end_hour - start_hour); 
    }
    else
    {
        time_diff_in_mins += 60 - start_min + end_min;
     952:	bf29      	itett	cs
     954:	333c      	addcs	r3, #60	; 0x3c
        time_diff_in_mins += end_min - start_min;
     956:	1b5b      	subcc	r3, r3, r5
        time_diff_in_mins += 60 - start_min + end_min;
     958:	1b5b      	subcs	r3, r3, r5
        start_hour += 1;
        time_diff_in_mins += 60*(end_hour - start_hour);
     95a:	43d2      	mvncs	r2, r2
        time_diff_in_mins += end_min - start_min;
     95c:	bf35      	itete	cc
     95e:	181b      	addcc	r3, r3, r0
        time_diff_in_mins += 60 - start_min + end_min;
     960:	181b      	addcs	r3, r3, r0
        time_diff_in_mins += 60*(end_hour - start_hour); 
     962:	1aa2      	subcc	r2, r4, r2
        time_diff_in_mins += 60*(end_hour - start_hour);
     964:	1912      	addcs	r2, r2, r4
     966:	203c      	movs	r0, #60	; 0x3c
     968:	fb00 3302 	mla	r3, r0, r2, r3
    }
    
    
    return time_diff_in_mins * 60000;
}
     96c:	f64e 2060 	movw	r0, #60000	; 0xea60
     970:	4358      	muls	r0, r3
     972:	bd30      	pop	{r4, r5, pc}

00000974 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     974:	b508      	push	{r3, lr}
     976:	4604      	mov	r4, r0
     978:	4608      	mov	r0, r1
     97a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     97c:	461a      	mov	r2, r3
     97e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     980:	f02b fcee 	bl	2c360 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     984:	f005 f8ce 	bl	5b24 <_impl_k_thread_abort>

00000988 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     988:	b570      	push	{r4, r5, r6, lr}
     98a:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
     98c:	f990 000b 	ldrsb.w	r0, [r0, #11]
     990:	250c      	movs	r5, #12
     992:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
     994:	4288      	cmp	r0, r1
     996:	eb06 0405 	add.w	r4, r6, r5
     99a:	bfb4      	ite	lt
     99c:	5971      	ldrlt	r1, [r6, r5]
     99e:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
     9a0:	2420      	movs	r4, #32
     9a2:	fb92 f4f4 	sdiv	r4, r2, r4
     9a6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     9aa:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     9ac:	f002 001f 	and.w	r0, r2, #31
     9b0:	bd70      	pop	{r4, r5, r6, pc}

000009b2 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     9b2:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     9b4:	ab01      	add	r3, sp, #4
     9b6:	f7ff ffe7 	bl	988 <get_bit_ptr>

	*word |= (1<<bit);
     9ba:	9a01      	ldr	r2, [sp, #4]
     9bc:	2301      	movs	r3, #1
     9be:	fa03 f000 	lsl.w	r0, r3, r0
     9c2:	6813      	ldr	r3, [r2, #0]
     9c4:	4303      	orrs	r3, r0
     9c6:	6013      	str	r3, [r2, #0]
}
     9c8:	b003      	add	sp, #12
     9ca:	f85d fb04 	ldr.w	pc, [sp], #4

000009ce <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     9ce:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     9d0:	ab01      	add	r3, sp, #4
     9d2:	f7ff ffd9 	bl	988 <get_bit_ptr>

	*word &= ~(1<<bit);
     9d6:	9a01      	ldr	r2, [sp, #4]
     9d8:	2301      	movs	r3, #1
     9da:	fa03 f000 	lsl.w	r0, r3, r0
     9de:	6813      	ldr	r3, [r2, #0]
     9e0:	ea23 0300 	bic.w	r3, r3, r0
     9e4:	6013      	str	r3, [r2, #0]
}
     9e6:	b003      	add	sp, #12
     9e8:	f85d fb04 	ldr.w	pc, [sp], #4

000009ec <_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     9f0:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     9f2:	6843      	ldr	r3, [r0, #4]
     9f4:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     9f6:	6800      	ldr	r0, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
     9f8:	f894 c00a 	ldrb.w	ip, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     9fc:	435d      	muls	r5, r3
	p->max_inline_level = -1;
     9fe:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     a00:	4428      	add	r0, r5
	p->max_inline_level = -1;
     a02:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
     a04:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     a06:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
     a0a:	458c      	cmp	ip, r1
     a0c:	dc05      	bgt.n	a1a <_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     a0e:	2500      	movs	r5, #0
     a10:	8923      	ldrh	r3, [r4, #8]
     a12:	42ab      	cmp	r3, r5
     a14:	dc22      	bgt.n	a5c <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
     a1a:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
     a1e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     a22:	fb0e f701 	mul.w	r7, lr, r1
		if (nblocks < 32) {
     a26:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     a28:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
     a2c:	bfc8      	it	gt
     a2e:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     a30:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     a34:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
     a38:	bfc8      	it	gt
     a3a:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
     a3c:	f103 0303 	add.w	r3, r3, #3
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
     a40:	e9c6 9901 	strd	r9, r9, [r6, #4]
     a44:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
     a48:	bfd4      	ite	le
     a4a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     a4c:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
     a50:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
     a54:	bfc8      	it	gt
     a56:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
     a5a:	e7d6      	b.n	a0a <_sys_mem_pool_base_init+0x1e>
	return (u8_t *)p->buf + lsz * block;
     a5c:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     a5e:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
     a60:	6820      	ldr	r0, [r4, #0]
     a62:	436a      	muls	r2, r5
     a64:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
     a66:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     a68:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
     a6a:	689a      	ldr	r2, [r3, #8]
     a6c:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     a6e:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     a70:	4620      	mov	r0, r4
     a72:	6011      	str	r1, [r2, #0]
	list->tail = node;
     a74:	6099      	str	r1, [r3, #8]
     a76:	462a      	mov	r2, r5
     a78:	2100      	movs	r1, #0
     a7a:	f7ff ff9a 	bl	9b2 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     a7e:	3501      	adds	r5, #1
     a80:	e7c6      	b.n	a10 <_sys_mem_pool_base_init+0x24>

00000a82 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     a82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a86:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     a88:	7a86      	ldrb	r6, [r0, #10]
{
     a8a:	af00      	add	r7, sp, #0
     a8c:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[p->n_levels];
     a90:	00b3      	lsls	r3, r6, #2
     a92:	330a      	adds	r3, #10
     a94:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     a98:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     a9c:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[p->n_levels];
     a9e:	46e9      	mov	r9, sp
{
     aa0:	4604      	mov	r4, r0
	lsizes[0] = _ALIGN4(p->max_sz);
     aa2:	3303      	adds	r3, #3
     aa4:	4648      	mov	r0, r9
     aa6:	f023 0303 	bic.w	r3, r3, #3
     aaa:	f840 3904 	str.w	r3, [r0], #-4
	int alloc_l = -1, free_l = -1;
     aae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     ab2:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     ab4:	f04f 0c0c 	mov.w	ip, #12
     ab8:	1e5a      	subs	r2, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     aba:	429e      	cmp	r6, r3
     abc:	627a      	str	r2, [r7, #36]	; 0x24
     abe:	dd0a      	ble.n	ad6 <_sys_mem_pool_block_alloc+0x54>
		if (i > 0) {
     ac0:	b12b      	cbz	r3, ace <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     ac2:	6802      	ldr	r2, [r0, #0]
     ac4:	0892      	lsrs	r2, r2, #2
     ac6:	3203      	adds	r2, #3
     ac8:	f022 0203 	bic.w	r2, r2, #3
     acc:	6042      	str	r2, [r0, #4]
		}

		if (lsizes[i] < size) {
     ace:	f850 2f04 	ldr.w	r2, [r0, #4]!
     ad2:	428a      	cmp	r2, r1
     ad4:	d20b      	bcs.n	aee <_sys_mem_pool_block_alloc+0x6c>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ad8:	3301      	adds	r3, #1
     ada:	d113      	bne.n	b04 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     ade:	2300      	movs	r3, #0
     ae0:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     ae2:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     ae6:	372c      	adds	r7, #44	; 0x2c
     ae8:	46bd      	mov	sp, r7
     aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     aee:	68e2      	ldr	r2, [r4, #12]
     af0:	fb0c 2203 	mla	r2, ip, r3, r2
     af4:	f102 0e04 	add.w	lr, r2, #4
		if (!level_empty(p, i)) {
     af8:	6852      	ldr	r2, [r2, #4]
     afa:	4572      	cmp	r2, lr
     afc:	bf18      	it	ne
     afe:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     b00:	3301      	adds	r3, #1
     b02:	e7d9      	b.n	ab8 <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     b04:	1c69      	adds	r1, r5, #1
     b06:	d0e9      	beq.n	adc <_sys_mem_pool_block_alloc+0x5a>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     b08:	f894 8010 	ldrb.w	r8, [r4, #16]
	data = block_alloc(p, free_l, lsizes[free_l]);
     b0c:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     b10:	f018 0801 	ands.w	r8, r8, #1
     b14:	d005      	beq.n	b22 <_sys_mem_pool_block_alloc+0xa0>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     b16:	f04f 0320 	mov.w	r3, #32
     b1a:	f3ef 8811 	mrs	r8, BASEPRI
     b1e:	f383 8811 	msr	BASEPRI, r3
	block = sys_dlist_get(&p->levels[l].free_list);
     b22:	68e2      	ldr	r2, [r4, #12]
	return list->head == list;
     b24:	230c      	movs	r3, #12
     b26:	fb03 2305 	mla	r3, r3, r5, r2
     b2a:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
     b2e:	429e      	cmp	r6, r3
     b30:	d030      	beq.n	b94 <_sys_mem_pool_block_alloc+0x112>
	node->prev->next = node->next;
     b32:	e9d6 2300 	ldrd	r2, r3, [r6]
     b36:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
     b38:	6832      	ldr	r2, [r6, #0]
     b3a:	6053      	str	r3, [r2, #4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     b3c:	6822      	ldr	r2, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     b3e:	4620      	mov	r0, r4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     b40:	1ab2      	subs	r2, r6, r2
		clear_free_bit(p, l, block_num(p, block, lsz));
     b42:	fb92 f2f1 	sdiv	r2, r2, r1
     b46:	4629      	mov	r1, r5
     b48:	f7ff ff41 	bl	9ce <clear_free_bit>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     b4c:	7c23      	ldrb	r3, [r4, #16]
     b4e:	07da      	lsls	r2, r3, #31
     b50:	d501      	bpl.n	b56 <_sys_mem_pool_block_alloc+0xd4>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     b52:	f388 8811 	msr	BASEPRI, r8
	if (data == NULL) {
     b56:	2e00      	cmp	r6, #0
     b58:	d06b      	beq.n	c32 <_sys_mem_pool_block_alloc+0x1b0>
     b5a:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     b5e:	f105 0b01 	add.w	fp, r5, #1
     b62:	613b      	str	r3, [r7, #16]
     b64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b6a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
     b6e:	429a      	cmp	r2, r3
     b70:	dc12      	bgt.n	b98 <_sys_mem_pool_block_alloc+0x116>
	*level_p = alloc_l;
     b72:	68fb      	ldr	r3, [r7, #12]
     b74:	461a      	mov	r2, r3
     b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b78:	6013      	str	r3, [r2, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     b7a:	6823      	ldr	r3, [r4, #0]
     b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b7e:	1af3      	subs	r3, r6, r3
     b80:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     b84:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     b88:	68ba      	ldr	r2, [r7, #8]
     b8a:	6013      	str	r3, [r2, #0]
	*data_p = data;
     b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     b8e:	2000      	movs	r0, #0
	*data_p = data;
     b90:	601e      	str	r6, [r3, #0]
	return 0;
     b92:	e7a8      	b.n	ae6 <_sys_mem_pool_block_alloc+0x64>
	sys_dnode_t *node = NULL;
     b94:	2600      	movs	r6, #0
     b96:	e7d9      	b.n	b4c <_sys_mem_pool_block_alloc+0xca>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     b98:	7c23      	ldrb	r3, [r4, #16]
     b9a:	f013 0301 	ands.w	r3, r3, #1
     b9e:	d005      	beq.n	bac <_sys_mem_pool_block_alloc+0x12a>
	__asm__ volatile(
     ba0:	f04f 0220 	mov.w	r2, #32
     ba4:	f3ef 8311 	mrs	r3, BASEPRI
     ba8:	f382 8811 	msr	BASEPRI, r2
		return 0;
     bac:	623b      	str	r3, [r7, #32]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     bae:	6823      	ldr	r3, [r4, #0]
	bn = block_num(p, block, lsizes[l]);
     bb0:	f855 2b04 	ldr.w	r2, [r5], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     bb4:	1af3      	subs	r3, r6, r3
     bb6:	fb93 f3f2 	sdiv	r3, r3, r2
     bba:	693a      	ldr	r2, [r7, #16]
		int lbn = 4*bn + i;
     bbc:	009b      	lsls	r3, r3, #2
     bbe:	61bb      	str	r3, [r7, #24]
     bc0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     bc4:	4413      	add	r3, r2
     bc6:	617b      	str	r3, [r7, #20]
	for (i = 1; i < 4; i++) {
     bc8:	f04f 0a01 	mov.w	sl, #1
		int lsz = lsizes[l + 1];
     bcc:	f8d5 8000 	ldr.w	r8, [r5]
		void *block2 = (lsz * i) + (char *)block;
     bd0:	fb0a f308 	mul.w	r3, sl, r8
     bd4:	61fb      	str	r3, [r7, #28]
     bd6:	18f3      	adds	r3, r6, r3
     bd8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     bda:	69bb      	ldr	r3, [r7, #24]
     bdc:	4659      	mov	r1, fp
     bde:	eb03 020a 	add.w	r2, r3, sl
     be2:	4620      	mov	r0, r4
     be4:	f7ff fee5 	bl	9b2 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     bec:	8921      	ldrh	r1, [r4, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     bee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf2:	4498      	add	r8, r3
     bf4:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf8:	6862      	ldr	r2, [r4, #4]
     bfa:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     bfc:	4590      	cmp	r8, r2
     bfe:	d20a      	bcs.n	c16 <_sys_mem_pool_block_alloc+0x194>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     c00:	68e2      	ldr	r2, [r4, #12]
     c02:	6979      	ldr	r1, [r7, #20]
	node->next = list;
     c04:	69f8      	ldr	r0, [r7, #28]
     c06:	440a      	add	r2, r1
     c08:	1d11      	adds	r1, r2, #4
     c0a:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     c0c:	6891      	ldr	r1, [r2, #8]
     c0e:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     c10:	6891      	ldr	r1, [r2, #8]
     c12:	600b      	str	r3, [r1, #0]
	list->tail = node;
     c14:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     c16:	f10a 0a01 	add.w	sl, sl, #1
     c1a:	f1ba 0f04 	cmp.w	sl, #4
     c1e:	d1d5      	bne.n	bcc <_sys_mem_pool_block_alloc+0x14a>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     c20:	7c23      	ldrb	r3, [r4, #16]
     c22:	07db      	lsls	r3, r3, #31
     c24:	d502      	bpl.n	c2c <_sys_mem_pool_block_alloc+0x1aa>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     c26:	6a3b      	ldr	r3, [r7, #32]
     c28:	f383 8811 	msr	BASEPRI, r3
     c2c:	f10b 0b01 	add.w	fp, fp, #1
     c30:	e79a      	b.n	b68 <_sys_mem_pool_block_alloc+0xe6>
		return -EAGAIN;
     c32:	f06f 000a 	mvn.w	r0, #10
     c36:	e756      	b.n	ae6 <_sys_mem_pool_block_alloc+0x64>

00000c38 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c3c:	b087      	sub	sp, #28
	size_t lsizes[p->n_levels];
     c3e:	7a83      	ldrb	r3, [r0, #10]
     c40:	009b      	lsls	r3, r3, #2
     c42:	330a      	adds	r3, #10
     c44:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
     c48:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     c4a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     c4e:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[p->n_levels];
     c50:	46eb      	mov	fp, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     c52:	3303      	adds	r3, #3
     c54:	f023 0303 	bic.w	r3, r3, #3
{
     c58:	4604      	mov	r4, r0
	lsizes[0] = _ALIGN4(p->max_sz);
     c5a:	f8cb 3000 	str.w	r3, [fp]
     c5e:	465d      	mov	r5, fp
	for (i = 1; i <= level; i++) {
     c60:	2001      	movs	r0, #1
     c62:	4281      	cmp	r1, r0
     c64:	d260      	bcs.n	d28 <_sys_mem_pool_block_free+0xf0>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     c66:	460d      	mov	r5, r1
     c68:	4616      	mov	r6, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     c6a:	f894 8010 	ldrb.w	r8, [r4, #16]
	int i, key, lsz = lsizes[level];
     c6e:	f85b 9025 	ldr.w	r9, [fp, r5, lsl #2]
	void *block = block_ptr(p, lsz, bn);
     c72:	f8d4 a000 	ldr.w	sl, [r4]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     c76:	f018 0801 	ands.w	r8, r8, #1
     c7a:	d005      	beq.n	c88 <_sys_mem_pool_block_free+0x50>
	__asm__ volatile(
     c7c:	f04f 0320 	mov.w	r3, #32
     c80:	f3ef 8811 	mrs	r8, BASEPRI
     c84:	f383 8811 	msr	BASEPRI, r3
	set_free_bit(p, level, bn);
     c88:	4632      	mov	r2, r6
     c8a:	4629      	mov	r1, r5
     c8c:	4620      	mov	r0, r4
     c8e:	f7ff fe90 	bl	9b2 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     c92:	2d00      	cmp	r5, #0
     c94:	d051      	beq.n	d3a <_sys_mem_pool_block_free+0x102>
	int bit = get_bit_ptr(p, level, bn, &word);
     c96:	f107 0314 	add.w	r3, r7, #20
     c9a:	4632      	mov	r2, r6
     c9c:	4629      	mov	r1, r5
     c9e:	4620      	mov	r0, r4
     ca0:	f7ff fe72 	bl	988 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     ca4:	697a      	ldr	r2, [r7, #20]
     ca6:	2304      	movs	r3, #4
     ca8:	fb90 f0f3 	sdiv	r0, r0, r3
     cac:	0083      	lsls	r3, r0, #2
     cae:	6810      	ldr	r0, [r2, #0]
     cb0:	40d8      	lsrs	r0, r3
     cb2:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     cb6:	280f      	cmp	r0, #15
     cb8:	d13f      	bne.n	d3a <_sys_mem_pool_block_free+0x102>
			int b = (bn & ~3) + i;
     cba:	f026 0203 	bic.w	r2, r6, #3
     cbe:	60fa      	str	r2, [r7, #12]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     cc0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
		for (i = 0; i < 4; i++) {
     cc4:	2300      	movs	r3, #0
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     cc6:	60ba      	str	r2, [r7, #8]
			int b = (bn & ~3) + i;
     cc8:	68fa      	ldr	r2, [r7, #12]
     cca:	607b      	str	r3, [r7, #4]
     ccc:	eb02 0a03 	add.w	sl, r2, r3
			clear_free_bit(p, level, b);
     cd0:	4652      	mov	r2, sl
     cd2:	4629      	mov	r1, r5
     cd4:	4620      	mov	r0, r4
     cd6:	f7ff fe7a 	bl	9ce <clear_free_bit>
			if (b != bn &&
     cda:	4556      	cmp	r6, sl
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	d016      	beq.n	d0e <_sys_mem_pool_block_free+0xd6>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     ce0:	68b9      	ldr	r1, [r7, #8]
	return p->n_max * p->max_sz;
     ce2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
			    block_fits(p, block_ptr(p, lsz, b), lsz)) {
     ce6:	6822      	ldr	r2, [r4, #0]
	return (u8_t *)p->buf + lsz * block;
     ce8:	fb09 fa0a 	mul.w	sl, r9, sl
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     cec:	eb0a 0001 	add.w	r0, sl, r1
	return p->n_max * p->max_sz;
     cf0:	6861      	ldr	r1, [r4, #4]
     cf2:	fb01 f10c 	mul.w	r1, r1, ip
			if (b != bn &&
     cf6:	4288      	cmp	r0, r1
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     cf8:	eb02 0e0a 	add.w	lr, r2, sl
			if (b != bn &&
     cfc:	d207      	bcs.n	d0e <_sys_mem_pool_block_free+0xd6>
	node->prev->next = node->next;
     cfe:	f8de 0004 	ldr.w	r0, [lr, #4]
     d02:	f852 100a 	ldr.w	r1, [r2, sl]
     d06:	6001      	str	r1, [r0, #0]
	node->next->prev = node->prev;
     d08:	f852 200a 	ldr.w	r2, [r2, sl]
     d0c:	6050      	str	r0, [r2, #4]
		for (i = 0; i < 4; i++) {
     d0e:	3301      	adds	r3, #1
     d10:	2b04      	cmp	r3, #4
     d12:	d1d9      	bne.n	cc8 <_sys_mem_pool_block_free+0x90>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     d14:	7c23      	ldrb	r3, [r4, #16]
     d16:	07da      	lsls	r2, r3, #31
     d18:	d501      	bpl.n	d1e <_sys_mem_pool_block_free+0xe6>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     d1a:	f388 8811 	msr	BASEPRI, r8
		block_free(p, level-1, lsizes, bn / 4);
     d1e:	2304      	movs	r3, #4
     d20:	3d01      	subs	r5, #1
     d22:	fb96 f6f3 	sdiv	r6, r6, r3
     d26:	e7a0      	b.n	c6a <_sys_mem_pool_block_free+0x32>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     d28:	682b      	ldr	r3, [r5, #0]
     d2a:	089b      	lsrs	r3, r3, #2
     d2c:	3303      	adds	r3, #3
     d2e:	f023 0303 	bic.w	r3, r3, #3
     d32:	f845 3f04 	str.w	r3, [r5, #4]!
	for (i = 1; i <= level; i++) {
     d36:	3001      	adds	r0, #1
     d38:	e793      	b.n	c62 <_sys_mem_pool_block_free+0x2a>
	return (u8_t *)p->buf + lsz * block;
     d3a:	fb09 f606 	mul.w	r6, r9, r6
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     d3e:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     d40:	6861      	ldr	r1, [r4, #4]
	return (u8_t *)p->buf + lsz * block;
     d42:	eb0a 0306 	add.w	r3, sl, r6
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     d46:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     d4a:	4499      	add	r9, r3
     d4c:	eba9 0902 	sub.w	r9, r9, r2
	return p->n_max * p->max_sz;
     d50:	8922      	ldrh	r2, [r4, #8]
     d52:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     d54:	4589      	cmp	r9, r1
     d56:	d20b      	bcs.n	d70 <_sys_mem_pool_block_free+0x138>
		sys_dlist_append(&p->levels[level].free_list, block);
     d58:	68e1      	ldr	r1, [r4, #12]
     d5a:	220c      	movs	r2, #12
     d5c:	fb02 1505 	mla	r5, r2, r5, r1
     d60:	1d2a      	adds	r2, r5, #4
	node->next = list;
     d62:	f84a 2006 	str.w	r2, [sl, r6]
	node->prev = list->tail;
     d66:	68aa      	ldr	r2, [r5, #8]
     d68:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     d6a:	68aa      	ldr	r2, [r5, #8]
     d6c:	6013      	str	r3, [r2, #0]
	list->tail = node;
     d6e:	60ab      	str	r3, [r5, #8]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     d70:	7c23      	ldrb	r3, [r4, #16]
     d72:	07db      	lsls	r3, r3, #31
     d74:	d501      	bpl.n	d7a <_sys_mem_pool_block_free+0x142>
     d76:	f388 8811 	msr	BASEPRI, r8
}
     d7a:	371c      	adds	r7, #28
     d7c:	46bd      	mov	sp, r7
     d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000d82 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     d82:	2000      	movs	r0, #0
     d84:	4770      	bx	lr
	...

00000d88 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     d88:	680b      	ldr	r3, [r1, #0]
     d8a:	3301      	adds	r3, #1
     d8c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     d8e:	4b01      	ldr	r3, [pc, #4]	; (d94 <char_out+0xc>)
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	4718      	bx	r3
     d94:	2000cc18 	.word	0x2000cc18

00000d98 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d9c:	b085      	sub	sp, #20
     d9e:	469b      	mov	fp, r3
     da0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     da2:	f8df a090 	ldr.w	sl, [pc, #144]	; e34 <_printk_dec_ulong+0x9c>
     da6:	2c01      	cmp	r4, #1
     da8:	bfb8      	it	lt
     daa:	2401      	movlt	r4, #1
     dac:	2b01      	cmp	r3, #1
     dae:	bf0c      	ite	eq
     db0:	2330      	moveq	r3, #48	; 0x30
     db2:	2320      	movne	r3, #32
     db4:	4615      	mov	r5, r2
     db6:	4680      	mov	r8, r0
     db8:	4689      	mov	r9, r1
     dba:	9401      	str	r4, [sp, #4]
     dbc:	9302      	str	r3, [sp, #8]
     dbe:	2601      	movs	r6, #1
     dc0:	270a      	movs	r7, #10
     dc2:	2200      	movs	r2, #0
     dc4:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     dc8:	b90a      	cbnz	r2, dce <_printk_dec_ulong+0x36>
     dca:	45aa      	cmp	sl, r5
     dcc:	d21f      	bcs.n	e0e <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     dce:	fbb5 f0f4 	udiv	r0, r5, r4
     dd2:	4649      	mov	r1, r9
     dd4:	3030      	adds	r0, #48	; 0x30
     dd6:	47c0      	blx	r8
			digits++;
     dd8:	3601      	adds	r6, #1
			found_largest_digit = 1;
     dda:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     ddc:	3f01      	subs	r7, #1
	while (pos >= 9) {
     dde:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     de0:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     de4:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     de8:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     dec:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     df0:	d1e8      	bne.n	dc4 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     df2:	4649      	mov	r1, r9
     df4:	f105 0030 	add.w	r0, r5, #48	; 0x30
     df8:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     dfa:	f1bb 0f03 	cmp.w	fp, #3
     dfe:	d103      	bne.n	e08 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     e00:	9b01      	ldr	r3, [sp, #4]
     e02:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     e04:	2c00      	cmp	r4, #0
     e06:	dc0f      	bgt.n	e28 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     e08:	b005      	add	sp, #20
     e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     e0e:	9b01      	ldr	r3, [sp, #4]
     e10:	42bb      	cmp	r3, r7
     e12:	dbe3      	blt.n	ddc <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     e14:	f1bb 0f02 	cmp.w	fp, #2
     e18:	d8e0      	bhi.n	ddc <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     e1a:	4649      	mov	r1, r9
     e1c:	9802      	ldr	r0, [sp, #8]
     e1e:	9203      	str	r2, [sp, #12]
			digits++;
     e20:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     e22:	47c0      	blx	r8
			digits++;
     e24:	9a03      	ldr	r2, [sp, #12]
     e26:	e7d9      	b.n	ddc <_printk_dec_ulong+0x44>
			out(' ', ctx);
     e28:	4649      	mov	r1, r9
     e2a:	2020      	movs	r0, #32
     e2c:	47c0      	blx	r8
     e2e:	3c01      	subs	r4, #1
     e30:	e7e8      	b.n	e04 <_printk_dec_ulong+0x6c>
     e32:	bf00      	nop
     e34:	3b9ac9ff 	.word	0x3b9ac9ff

00000e38 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
     e38:	b530      	push	{r4, r5, lr}
     e3a:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
     e3c:	680c      	ldr	r4, [r1, #0]
     e3e:	1c55      	adds	r5, r2, #1
     e40:	b114      	cbz	r4, e48 <str_out+0x10>
     e42:	684b      	ldr	r3, [r1, #4]
     e44:	4293      	cmp	r3, r2
     e46:	dc01      	bgt.n	e4c <str_out+0x14>
		ctx->count++;
     e48:	608d      	str	r5, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
     e4a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
     e4c:	3b01      	subs	r3, #1
     e4e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
     e50:	bf08      	it	eq
     e52:	2200      	moveq	r2, #0
     e54:	608d      	str	r5, [r1, #8]
     e56:	bf0c      	ite	eq
     e58:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
     e5a:	54a0      	strbne	r0, [r4, r2]
     e5c:	e7f5      	b.n	e4a <str_out+0x12>
	...

00000e60 <__printk_hook_install>:
	_char_out = fn;
     e60:	4b01      	ldr	r3, [pc, #4]	; (e68 <__printk_hook_install+0x8>)
     e62:	6018      	str	r0, [r3, #0]
}
     e64:	4770      	bx	lr
     e66:	bf00      	nop
     e68:	2000cc18 	.word	0x2000cc18

00000e6c <_vprintk>:
{
     e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e70:	b089      	sub	sp, #36	; 0x24
     e72:	461c      	mov	r4, r3
	int long_ctr = 0;
     e74:	f04f 0a00 	mov.w	sl, #0
     e78:	1e53      	subs	r3, r2, #1
{
     e7a:	4606      	mov	r6, r0
     e7c:	460f      	mov	r7, r1
     e7e:	9304      	str	r3, [sp, #16]
	int min_width = -1;
     e80:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     e84:	46d0      	mov	r8, sl
			might_format = 0;
     e86:	2500      	movs	r5, #0
				break;
     e88:	e005      	b.n	e96 <_vprintk+0x2a>
		if (!might_format) {
     e8a:	b96d      	cbnz	r5, ea8 <_vprintk+0x3c>
			if (*fmt != '%') {
     e8c:	2825      	cmp	r0, #37	; 0x25
     e8e:	f000 8112 	beq.w	10b6 <_vprintk+0x24a>
				out((int)*fmt, ctx);
     e92:	4639      	mov	r1, r7
     e94:	47b0      	blx	r6
	while (*fmt) {
     e96:	9b04      	ldr	r3, [sp, #16]
     e98:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     e9c:	9304      	str	r3, [sp, #16]
     e9e:	2800      	cmp	r0, #0
     ea0:	d1f3      	bne.n	e8a <_vprintk+0x1e>
}
     ea2:	b009      	add	sp, #36	; 0x24
     ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     ea8:	2864      	cmp	r0, #100	; 0x64
     eaa:	d061      	beq.n	f70 <_vprintk+0x104>
     eac:	d819      	bhi.n	ee2 <_vprintk+0x76>
     eae:	2839      	cmp	r0, #57	; 0x39
     eb0:	d80a      	bhi.n	ec8 <_vprintk+0x5c>
     eb2:	2831      	cmp	r0, #49	; 0x31
     eb4:	d250      	bcs.n	f58 <_vprintk+0xec>
     eb6:	282d      	cmp	r0, #45	; 0x2d
     eb8:	d03c      	beq.n	f34 <_vprintk+0xc8>
     eba:	2830      	cmp	r0, #48	; 0x30
     ebc:	d03d      	beq.n	f3a <_vprintk+0xce>
     ebe:	2825      	cmp	r0, #37	; 0x25
     ec0:	d108      	bne.n	ed4 <_vprintk+0x68>
				out((int)'%', ctx);
     ec2:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     ec4:	47b0      	blx	r6
     ec6:	e7de      	b.n	e86 <_vprintk+0x1a>
			switch (*fmt) {
     ec8:	2858      	cmp	r0, #88	; 0x58
     eca:	f000 8088 	beq.w	fde <_vprintk+0x172>
     ece:	2863      	cmp	r0, #99	; 0x63
     ed0:	f000 80eb 	beq.w	10aa <_vprintk+0x23e>
				out((int)'%', ctx);
     ed4:	4639      	mov	r1, r7
     ed6:	2025      	movs	r0, #37	; 0x25
     ed8:	47b0      	blx	r6
				out((int)*fmt, ctx);
     eda:	9b04      	ldr	r3, [sp, #16]
     edc:	4639      	mov	r1, r7
     ede:	7818      	ldrb	r0, [r3, #0]
     ee0:	e7f0      	b.n	ec4 <_vprintk+0x58>
			switch (*fmt) {
     ee2:	2870      	cmp	r0, #112	; 0x70
     ee4:	d071      	beq.n	fca <_vprintk+0x15e>
     ee6:	d806      	bhi.n	ef6 <_vprintk+0x8a>
     ee8:	2869      	cmp	r0, #105	; 0x69
     eea:	d041      	beq.n	f70 <_vprintk+0x104>
     eec:	286c      	cmp	r0, #108	; 0x6c
     eee:	d03c      	beq.n	f6a <_vprintk+0xfe>
     ef0:	2868      	cmp	r0, #104	; 0x68
     ef2:	d0d0      	beq.n	e96 <_vprintk+0x2a>
     ef4:	e7ee      	b.n	ed4 <_vprintk+0x68>
     ef6:	2875      	cmp	r0, #117	; 0x75
     ef8:	d057      	beq.n	faa <_vprintk+0x13e>
     efa:	d817      	bhi.n	f2c <_vprintk+0xc0>
     efc:	2873      	cmp	r0, #115	; 0x73
     efe:	d1e9      	bne.n	ed4 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
     f00:	6823      	ldr	r3, [r4, #0]
     f02:	f104 0b04 	add.w	fp, r4, #4
     f06:	461c      	mov	r4, r3
				while (*s)
     f08:	4625      	mov	r5, r4
     f0a:	f815 0b01 	ldrb.w	r0, [r5], #1
     f0e:	2800      	cmp	r0, #0
     f10:	f040 80c0 	bne.w	1094 <_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
     f14:	f1b8 0f03 	cmp.w	r8, #3
     f18:	f040 80d6 	bne.w	10c8 <_vprintk+0x25c>
					int remaining = min_width - (s - start);
     f1c:	1ae4      	subs	r4, r4, r3
     f1e:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     f22:	2c00      	cmp	r4, #0
     f24:	f300 80bc 	bgt.w	10a0 <_vprintk+0x234>
				char *s = va_arg(ap, char *);
     f28:	465c      	mov	r4, fp
     f2a:	e7ac      	b.n	e86 <_vprintk+0x1a>
			switch (*fmt) {
     f2c:	2878      	cmp	r0, #120	; 0x78
     f2e:	d056      	beq.n	fde <_vprintk+0x172>
     f30:	287a      	cmp	r0, #122	; 0x7a
     f32:	e7de      	b.n	ef2 <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
     f34:	f04f 0803 	mov.w	r8, #3
     f38:	e7ad      	b.n	e96 <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
     f3a:	f1b9 0f00 	cmp.w	r9, #0
     f3e:	da0e      	bge.n	f5e <_vprintk+0xf2>
     f40:	f1b8 0f00 	cmp.w	r8, #0
     f44:	f000 80bd 	beq.w	10c2 <_vprintk+0x256>
					min_width = *fmt - '0';
     f48:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     f4c:	f1b8 0f00 	cmp.w	r8, #0
     f50:	bf08      	it	eq
     f52:	f04f 0802 	moveq.w	r8, #2
     f56:	e79e      	b.n	e96 <_vprintk+0x2a>
				if (min_width < 0) {
     f58:	f1b9 0f00 	cmp.w	r9, #0
     f5c:	dbf4      	blt.n	f48 <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
     f5e:	230a      	movs	r3, #10
     f60:	fb03 0909 	mla	r9, r3, r9, r0
     f64:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     f68:	e7f0      	b.n	f4c <_vprintk+0xe0>
				long_ctr++;
     f6a:	f10a 0a01 	add.w	sl, sl, #1
     f6e:	e792      	b.n	e96 <_vprintk+0x2a>
				if (long_ctr < 2) {
     f70:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     f74:	bfc5      	ittet	gt
     f76:	3407      	addgt	r4, #7
     f78:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     f7c:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     f7e:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     f80:	bfd4      	ite	le
     f82:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     f84:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     f88:	2d00      	cmp	r5, #0
     f8a:	da05      	bge.n	f98 <_vprintk+0x12c>
					out((int)'-', ctx);
     f8c:	4639      	mov	r1, r7
     f8e:	202d      	movs	r0, #45	; 0x2d
     f90:	47b0      	blx	r6
					d = -d;
     f92:	426d      	negs	r5, r5
					min_width--;
     f94:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     f98:	f8cd 9000 	str.w	r9, [sp]
     f9c:	4643      	mov	r3, r8
     f9e:	462a      	mov	r2, r5
     fa0:	4639      	mov	r1, r7
     fa2:	4630      	mov	r0, r6
     fa4:	f7ff fef8 	bl	d98 <_printk_dec_ulong>
     fa8:	e76d      	b.n	e86 <_vprintk+0x1a>
				if (long_ctr < 2) {
     faa:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     fae:	bfc5      	ittet	gt
     fb0:	3407      	addgt	r4, #7
     fb2:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     fb6:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     fb8:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     fba:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     fbe:	bfcc      	ite	gt
     fc0:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     fc4:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     fc6:	4643      	mov	r3, r8
     fc8:	e7ea      	b.n	fa0 <_vprintk+0x134>
				  out('0', ctx);
     fca:	4639      	mov	r1, r7
     fcc:	2030      	movs	r0, #48	; 0x30
     fce:	47b0      	blx	r6
				  out('x', ctx);
     fd0:	4639      	mov	r1, r7
     fd2:	2078      	movs	r0, #120	; 0x78
     fd4:	47b0      	blx	r6
				  min_width = 8;
     fd6:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     fda:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     fde:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     fe2:	bfc7      	ittee	gt
     fe4:	3407      	addgt	r4, #7
     fe6:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     fea:	6823      	ldrle	r3, [r4, #0]
     fec:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     fee:	bfc2      	ittt	gt
     ff0:	f103 0408 	addgt.w	r4, r3, #8
     ff4:	681b      	ldrgt	r3, [r3, #0]
     ff6:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     ff8:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     ffc:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1000:	bfd8      	it	le
    1002:	3404      	addle	r4, #4
	int digits = 0;
    1004:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    1006:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    1008:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    100a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    100e:	9b05      	ldr	r3, [sp, #20]
    1010:	ea4f 008b 	mov.w	r0, fp, lsl #2
    1014:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    1018:	f010 000f 	ands.w	r0, r0, #15
    101c:	d109      	bne.n	1032 <_vprintk+0x1c6>
    101e:	9b07      	ldr	r3, [sp, #28]
    1020:	b913      	cbnz	r3, 1028 <_vprintk+0x1bc>
    1022:	f1bb 0f00 	cmp.w	fp, #0
    1026:	d124      	bne.n	1072 <_vprintk+0x206>
			nibble += nibble > 9 ? 87 : 48;
    1028:	f04f 0c30 	mov.w	ip, #48	; 0x30
    102c:	e007      	b.n	103e <_vprintk+0x1d2>
	for (; size; size--) {
    102e:	9a06      	ldr	r2, [sp, #24]
    1030:	e7eb      	b.n	100a <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    1032:	2809      	cmp	r0, #9
    1034:	bf8c      	ite	hi
    1036:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    103a:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    103e:	4639      	mov	r1, r7
    1040:	4460      	add	r0, ip
    1042:	9206      	str	r2, [sp, #24]
    1044:	47b0      	blx	r6
			digits++;
    1046:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1048:	9507      	str	r5, [sp, #28]
			digits++;
    104a:	3301      	adds	r3, #1
    104c:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    104e:	f1bb 0f00 	cmp.w	fp, #0
    1052:	d1ec      	bne.n	102e <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    1054:	f1b8 0f03 	cmp.w	r8, #3
    1058:	f47f af15 	bne.w	e86 <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    105c:	9b03      	ldr	r3, [sp, #12]
    105e:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1062:	2d00      	cmp	r5, #0
    1064:	f77f af0f 	ble.w	e86 <_vprintk+0x1a>
			out(' ', ctx);
    1068:	4639      	mov	r1, r7
    106a:	2020      	movs	r0, #32
    106c:	47b0      	blx	r6
    106e:	3d01      	subs	r5, #1
    1070:	e7f7      	b.n	1062 <_vprintk+0x1f6>
		if (remaining-- <= min_width) {
    1072:	1e53      	subs	r3, r2, #1
    1074:	4591      	cmp	r9, r2
    1076:	9306      	str	r3, [sp, #24]
    1078:	dbe9      	blt.n	104e <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    107a:	f1b8 0f01 	cmp.w	r8, #1
    107e:	d103      	bne.n	1088 <_vprintk+0x21c>
				out('0', ctx);
    1080:	4639      	mov	r1, r7
    1082:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1084:	47b0      	blx	r6
    1086:	e7e2      	b.n	104e <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    1088:	f1b8 0f02 	cmp.w	r8, #2
    108c:	d1df      	bne.n	104e <_vprintk+0x1e2>
				out(' ', ctx);
    108e:	4639      	mov	r1, r7
    1090:	2020      	movs	r0, #32
    1092:	e7f7      	b.n	1084 <_vprintk+0x218>
					out((int)(*s++), ctx);
    1094:	4639      	mov	r1, r7
    1096:	9303      	str	r3, [sp, #12]
    1098:	462c      	mov	r4, r5
    109a:	47b0      	blx	r6
    109c:	9b03      	ldr	r3, [sp, #12]
    109e:	e733      	b.n	f08 <_vprintk+0x9c>
						out(' ', ctx);
    10a0:	4639      	mov	r1, r7
    10a2:	2020      	movs	r0, #32
    10a4:	47b0      	blx	r6
    10a6:	3c01      	subs	r4, #1
    10a8:	e73b      	b.n	f22 <_vprintk+0xb6>
				out(c, ctx);
    10aa:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    10ac:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    10ae:	4639      	mov	r1, r7
    10b0:	47b0      	blx	r6
				int c = va_arg(ap, int);
    10b2:	462c      	mov	r4, r5
    10b4:	e6e7      	b.n	e86 <_vprintk+0x1a>
				long_ctr = 0;
    10b6:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    10b8:	46a8      	mov	r8, r5
				min_width = -1;
    10ba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    10be:	2501      	movs	r5, #1
    10c0:	e6e9      	b.n	e96 <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    10c2:	f04f 0801 	mov.w	r8, #1
    10c6:	e6e6      	b.n	e96 <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
    10c8:	465c      	mov	r4, fp
			might_format = 0;
    10ca:	4605      	mov	r5, r0
    10cc:	e6e3      	b.n	e96 <_vprintk+0x2a>
	...

000010d0 <vprintk>:
{
    10d0:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    10d2:	ac02      	add	r4, sp, #8
    10d4:	2300      	movs	r3, #0
    10d6:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    10da:	4602      	mov	r2, r0
    10dc:	460b      	mov	r3, r1
    10de:	4803      	ldr	r0, [pc, #12]	; (10ec <vprintk+0x1c>)
    10e0:	4621      	mov	r1, r4
    10e2:	f7ff fec3 	bl	e6c <_vprintk>
}
    10e6:	b002      	add	sp, #8
    10e8:	bd10      	pop	{r4, pc}
    10ea:	bf00      	nop
    10ec:	00000d89 	.word	0x00000d89

000010f0 <printk>:
{
    10f0:	b40f      	push	{r0, r1, r2, r3}
    10f2:	b507      	push	{r0, r1, r2, lr}
    10f4:	a904      	add	r1, sp, #16
    10f6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    10fa:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    10fc:	f7ff ffe8 	bl	10d0 <vprintk>
}
    1100:	b003      	add	sp, #12
    1102:	f85d eb04 	ldr.w	lr, [sp], #4
    1106:	b004      	add	sp, #16
    1108:	4770      	bx	lr
	...

0000110c <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    110c:	b40c      	push	{r2, r3}
    110e:	b530      	push	{r4, r5, lr}
    1110:	b085      	sub	sp, #20
    1112:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
    1114:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1118:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
    111c:	9300      	str	r3, [sp, #0]
{
    111e:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1120:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1122:	a901      	add	r1, sp, #4
    1124:	4806      	ldr	r0, [pc, #24]	; (1140 <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
    1126:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1128:	f7ff fea0 	bl	e6c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    112c:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1130:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1132:	bfb8      	it	lt
    1134:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1136:	b005      	add	sp, #20
    1138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    113c:	b002      	add	sp, #8
    113e:	4770      	bx	lr
    1140:	00000e39 	.word	0x00000e39

00001144 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE_NO_BLOCK_SKIP, 1);
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE, 0);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_LINKER_ORPHAN_SECTION_WARN, 1);

GEN_ABS_SYM_END
    1144:	4770      	bx	lr
	...

00001148 <nordicsemi_nrf52_init>:
#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
#include <logging/log.h>
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf52_init(struct device *arg)
{
    1148:	b510      	push	{r4, lr}
	__asm__ volatile(
    114a:	f04f 0320 	mov.w	r3, #32
    114e:	f3ef 8411 	mrs	r4, BASEPRI
    1152:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
    1156:	f000 fadd 	bl	1714 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    115a:	4a08      	ldr	r2, [pc, #32]	; (117c <nordicsemi_nrf52_init+0x34>)
    115c:	2301      	movs	r3, #1
    115e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
}
#endif

__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    1162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1166:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    116a:	4b05      	ldr	r3, [pc, #20]	; (1180 <nordicsemi_nrf52_init+0x38>)
    116c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1170:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1172:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1174:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1178:	2000      	movs	r0, #0
    117a:	bd10      	pop	{r4, pc}
    117c:	4001e000 	.word	0x4001e000
    1180:	e000ed00 	.word	0xe000ed00

00001184 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    1184:	428b      	cmp	r3, r1
{
    1186:	b538      	push	{r3, r4, r5, lr}
    1188:	4615      	mov	r5, r2
    118a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    118c:	d805      	bhi.n	119a <_copy+0x16>
		(void)memcpy(to, from, from_len);
    118e:	461a      	mov	r2, r3
    1190:	4629      	mov	r1, r5
    1192:	f004 fe79 	bl	5e88 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    1196:	4620      	mov	r0, r4
    1198:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    119a:	2400      	movs	r4, #0
    119c:	e7fb      	b.n	1196 <_copy+0x12>

0000119e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    119e:	f004 bea0 	b.w	5ee2 <memset>

000011a2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    11a2:	09c3      	lsrs	r3, r0, #7
    11a4:	005a      	lsls	r2, r3, #1
    11a6:	4413      	add	r3, r2
    11a8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    11ac:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    11b0:	b2c0      	uxtb	r0, r0
    11b2:	4770      	bx	lr

000011b4 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    11b4:	78cb      	ldrb	r3, [r1, #3]
    11b6:	7802      	ldrb	r2, [r0, #0]
    11b8:	4053      	eors	r3, r2
    11ba:	7003      	strb	r3, [r0, #0]
    11bc:	884b      	ldrh	r3, [r1, #2]
    11be:	7842      	ldrb	r2, [r0, #1]
    11c0:	4053      	eors	r3, r2
    11c2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    11c4:	680a      	ldr	r2, [r1, #0]
    11c6:	7883      	ldrb	r3, [r0, #2]
    11c8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    11cc:	7083      	strb	r3, [r0, #2]
    11ce:	680a      	ldr	r2, [r1, #0]
    11d0:	78c3      	ldrb	r3, [r0, #3]
    11d2:	4053      	eors	r3, r2
    11d4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    11d6:	79cb      	ldrb	r3, [r1, #7]
    11d8:	7902      	ldrb	r2, [r0, #4]
    11da:	4053      	eors	r3, r2
    11dc:	7103      	strb	r3, [r0, #4]
    11de:	88cb      	ldrh	r3, [r1, #6]
    11e0:	7942      	ldrb	r2, [r0, #5]
    11e2:	4053      	eors	r3, r2
    11e4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    11e6:	684a      	ldr	r2, [r1, #4]
    11e8:	7983      	ldrb	r3, [r0, #6]
    11ea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    11ee:	7183      	strb	r3, [r0, #6]
    11f0:	684a      	ldr	r2, [r1, #4]
    11f2:	79c3      	ldrb	r3, [r0, #7]
    11f4:	4053      	eors	r3, r2
    11f6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    11f8:	7acb      	ldrb	r3, [r1, #11]
    11fa:	7a02      	ldrb	r2, [r0, #8]
    11fc:	4053      	eors	r3, r2
    11fe:	7203      	strb	r3, [r0, #8]
    1200:	7a42      	ldrb	r2, [r0, #9]
    1202:	894b      	ldrh	r3, [r1, #10]
    1204:	4053      	eors	r3, r2
    1206:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    1208:	688a      	ldr	r2, [r1, #8]
    120a:	7a83      	ldrb	r3, [r0, #10]
    120c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1210:	7283      	strb	r3, [r0, #10]
    1212:	688a      	ldr	r2, [r1, #8]
    1214:	7ac3      	ldrb	r3, [r0, #11]
    1216:	4053      	eors	r3, r2
    1218:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    121a:	7bcb      	ldrb	r3, [r1, #15]
    121c:	7b02      	ldrb	r2, [r0, #12]
    121e:	4053      	eors	r3, r2
    1220:	7303      	strb	r3, [r0, #12]
    1222:	89cb      	ldrh	r3, [r1, #14]
    1224:	7b42      	ldrb	r2, [r0, #13]
    1226:	4053      	eors	r3, r2
    1228:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    122a:	68ca      	ldr	r2, [r1, #12]
    122c:	7b83      	ldrb	r3, [r0, #14]
    122e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1232:	7383      	strb	r3, [r0, #14]
    1234:	68ca      	ldr	r2, [r1, #12]
    1236:	7bc3      	ldrb	r3, [r0, #15]
    1238:	4053      	eors	r3, r2
    123a:	73c3      	strb	r3, [r0, #15]
}
    123c:	4770      	bx	lr

0000123e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    123e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    1240:	7802      	ldrb	r2, [r0, #0]
    1242:	f88d 2000 	strb.w	r2, [sp]
    1246:	7942      	ldrb	r2, [r0, #5]
    1248:	f88d 2001 	strb.w	r2, [sp, #1]
    124c:	7a82      	ldrb	r2, [r0, #10]
    124e:	f88d 2002 	strb.w	r2, [sp, #2]
    1252:	7bc2      	ldrb	r2, [r0, #15]
    1254:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    1258:	7902      	ldrb	r2, [r0, #4]
    125a:	f88d 2004 	strb.w	r2, [sp, #4]
    125e:	7a42      	ldrb	r2, [r0, #9]
    1260:	f88d 2005 	strb.w	r2, [sp, #5]
    1264:	7b82      	ldrb	r2, [r0, #14]
    1266:	f88d 2006 	strb.w	r2, [sp, #6]
    126a:	78c2      	ldrb	r2, [r0, #3]
    126c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    1270:	7a02      	ldrb	r2, [r0, #8]
    1272:	f88d 2008 	strb.w	r2, [sp, #8]
    1276:	7b42      	ldrb	r2, [r0, #13]
    1278:	f88d 2009 	strb.w	r2, [sp, #9]
    127c:	7882      	ldrb	r2, [r0, #2]
    127e:	f88d 200a 	strb.w	r2, [sp, #10]
    1282:	79c2      	ldrb	r2, [r0, #7]
    1284:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    1288:	7b02      	ldrb	r2, [r0, #12]
    128a:	f88d 200c 	strb.w	r2, [sp, #12]
    128e:	7842      	ldrb	r2, [r0, #1]
    1290:	f88d 200d 	strb.w	r2, [sp, #13]
    1294:	7ac3      	ldrb	r3, [r0, #11]
    1296:	7982      	ldrb	r2, [r0, #6]
    1298:	f88d 200e 	strb.w	r2, [sp, #14]
    129c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    12a0:	2310      	movs	r3, #16
    12a2:	466a      	mov	r2, sp
    12a4:	4619      	mov	r1, r3
    12a6:	f7ff ff6d 	bl	1184 <_copy>
}
    12aa:	b005      	add	sp, #20
    12ac:	f85d fb04 	ldr.w	pc, [sp], #4

000012b0 <mult_row_column>:
{
    12b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12b2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    12b4:	7808      	ldrb	r0, [r1, #0]
{
    12b6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    12b8:	f7ff ff73 	bl	11a2 <_double_byte>
    12bc:	4605      	mov	r5, r0
    12be:	7860      	ldrb	r0, [r4, #1]
    12c0:	f7ff ff6f 	bl	11a2 <_double_byte>
    12c4:	78a2      	ldrb	r2, [r4, #2]
    12c6:	7863      	ldrb	r3, [r4, #1]
    12c8:	4053      	eors	r3, r2
    12ca:	78e2      	ldrb	r2, [r4, #3]
    12cc:	4053      	eors	r3, r2
    12ce:	405d      	eors	r5, r3
    12d0:	4045      	eors	r5, r0
    12d2:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    12d4:	7860      	ldrb	r0, [r4, #1]
    12d6:	7827      	ldrb	r7, [r4, #0]
    12d8:	f7ff ff63 	bl	11a2 <_double_byte>
    12dc:	4605      	mov	r5, r0
    12de:	78a0      	ldrb	r0, [r4, #2]
    12e0:	f7ff ff5f 	bl	11a2 <_double_byte>
    12e4:	78a3      	ldrb	r3, [r4, #2]
    12e6:	405f      	eors	r7, r3
    12e8:	78e3      	ldrb	r3, [r4, #3]
    12ea:	405f      	eors	r7, r3
    12ec:	407d      	eors	r5, r7
    12ee:	4045      	eors	r5, r0
    12f0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    12f2:	78a0      	ldrb	r0, [r4, #2]
    12f4:	7865      	ldrb	r5, [r4, #1]
    12f6:	7827      	ldrb	r7, [r4, #0]
    12f8:	f7ff ff53 	bl	11a2 <_double_byte>
    12fc:	406f      	eors	r7, r5
    12fe:	4605      	mov	r5, r0
    1300:	78e0      	ldrb	r0, [r4, #3]
    1302:	f7ff ff4e 	bl	11a2 <_double_byte>
    1306:	78e3      	ldrb	r3, [r4, #3]
    1308:	405f      	eors	r7, r3
    130a:	407d      	eors	r5, r7
    130c:	4045      	eors	r5, r0
    130e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    1310:	7820      	ldrb	r0, [r4, #0]
    1312:	f7ff ff46 	bl	11a2 <_double_byte>
    1316:	7863      	ldrb	r3, [r4, #1]
    1318:	7825      	ldrb	r5, [r4, #0]
    131a:	405d      	eors	r5, r3
    131c:	78a3      	ldrb	r3, [r4, #2]
    131e:	405d      	eors	r5, r3
    1320:	4045      	eors	r5, r0
    1322:	78e0      	ldrb	r0, [r4, #3]
    1324:	f7ff ff3d 	bl	11a2 <_double_byte>
    1328:	b2ed      	uxtb	r5, r5
    132a:	4068      	eors	r0, r5
    132c:	70f0      	strb	r0, [r6, #3]
}
    132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001330 <tc_aes128_set_encrypt_key>:
{
    1330:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    1332:	4e28      	ldr	r6, [pc, #160]	; (13d4 <tc_aes128_set_encrypt_key+0xa4>)
{
    1334:	4607      	mov	r7, r0
    1336:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    1338:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    133a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    133c:	ad01      	add	r5, sp, #4
    133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1340:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1344:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1348:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    134c:	2f00      	cmp	r7, #0
    134e:	d03c      	beq.n	13ca <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    1350:	2c00      	cmp	r4, #0
    1352:	d03c      	beq.n	13ce <tc_aes128_set_encrypt_key+0x9e>
    1354:	1f38      	subs	r0, r7, #4
    1356:	4621      	mov	r1, r4
    1358:	4602      	mov	r2, r0
    135a:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    135c:	784b      	ldrb	r3, [r1, #1]
    135e:	780d      	ldrb	r5, [r1, #0]
    1360:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    1362:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    1366:	78cd      	ldrb	r5, [r1, #3]
    1368:	432b      	orrs	r3, r5
    136a:	788d      	ldrb	r5, [r1, #2]
    136c:	3104      	adds	r1, #4
    136e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    1372:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1374:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    1378:	d1f0      	bne.n	135c <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    137a:	4c17      	ldr	r4, [pc, #92]	; (13d8 <tc_aes128_set_encrypt_key+0xa8>)
    137c:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    137e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    1380:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    1382:	d118      	bne.n	13b6 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    1384:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    1388:	0e1a      	lsrs	r2, r3, #24
    138a:	5ca5      	ldrb	r5, [r4, r2]
    138c:	b2da      	uxtb	r2, r3
    138e:	5ca2      	ldrb	r2, [r4, r2]
    1390:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    1394:	f3c3 4507 	ubfx	r5, r3, #16, #8
    1398:	f3c3 2307 	ubfx	r3, r3, #8, #8
    139c:	5d65      	ldrb	r5, [r4, r5]
    139e:	5ce3      	ldrb	r3, [r4, r3]
    13a0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    13a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    13a8:	ad0c      	add	r5, sp, #48	; 0x30
    13aa:	f021 0303 	bic.w	r3, r1, #3
    13ae:	442b      	add	r3, r5
    13b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    13b4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    13b6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    13ba:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    13bc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    13be:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    13c0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    13c2:	d1dc      	bne.n	137e <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    13c4:	2001      	movs	r0, #1
}
    13c6:	b00d      	add	sp, #52	; 0x34
    13c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    13ca:	4638      	mov	r0, r7
    13cc:	e7fb      	b.n	13c6 <tc_aes128_set_encrypt_key+0x96>
    13ce:	4620      	mov	r0, r4
    13d0:	e7f9      	b.n	13c6 <tc_aes128_set_encrypt_key+0x96>
    13d2:	bf00      	nop
    13d4:	0002d1f0 	.word	0x0002d1f0
    13d8:	0002d42b 	.word	0x0002d42b

000013dc <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    13dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    13e0:	4615      	mov	r5, r2
    13e2:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    13e4:	4680      	mov	r8, r0
    13e6:	2800      	cmp	r0, #0
    13e8:	d05b      	beq.n	14a2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    13ea:	2900      	cmp	r1, #0
    13ec:	d05a      	beq.n	14a4 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    13ee:	2a00      	cmp	r2, #0
    13f0:	d05a      	beq.n	14a8 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    13f2:	2310      	movs	r3, #16
    13f4:	460a      	mov	r2, r1
    13f6:	4668      	mov	r0, sp
    13f8:	4619      	mov	r1, r3
    13fa:	f7ff fec3 	bl	1184 <_copy>
	add_round_key(state, s->words);
    13fe:	4629      	mov	r1, r5
    1400:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    1402:	4c2a      	ldr	r4, [pc, #168]	; (14ac <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    1404:	f7ff fed6 	bl	11b4 <add_round_key>
    1408:	f105 0710 	add.w	r7, r5, #16
    140c:	46a1      	mov	r9, r4
    140e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    1410:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1412:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1416:	5ce3      	ldrb	r3, [r4, r3]
    1418:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    141c:	3601      	adds	r6, #1
    141e:	2e10      	cmp	r6, #16
    1420:	d1f7      	bne.n	1412 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    1422:	4668      	mov	r0, sp
    1424:	f7ff ff0b 	bl	123e <shift_rows>
	mult_row_column(t, s);
    1428:	4669      	mov	r1, sp
    142a:	a804      	add	r0, sp, #16
    142c:	f7ff ff40 	bl	12b0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    1430:	a901      	add	r1, sp, #4
    1432:	a805      	add	r0, sp, #20
    1434:	f7ff ff3c 	bl	12b0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    1438:	a902      	add	r1, sp, #8
    143a:	a806      	add	r0, sp, #24
    143c:	f7ff ff38 	bl	12b0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    1440:	a903      	add	r1, sp, #12
    1442:	a807      	add	r0, sp, #28
    1444:	f7ff ff34 	bl	12b0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1448:	4633      	mov	r3, r6
    144a:	aa04      	add	r2, sp, #16
    144c:	4631      	mov	r1, r6
    144e:	4668      	mov	r0, sp
    1450:	f7ff fe98 	bl	1184 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    1454:	4639      	mov	r1, r7
    1456:	4668      	mov	r0, sp
    1458:	3710      	adds	r7, #16
    145a:	f7ff feab 	bl	11b4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    145e:	42bd      	cmp	r5, r7
    1460:	d1d6      	bne.n	1410 <tc_aes_encrypt+0x34>
	for (i = 0; i < (Nb * Nk); ++i) {
    1462:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1464:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1468:	f819 3003 	ldrb.w	r3, [r9, r3]
    146c:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    1470:	3601      	adds	r6, #1
    1472:	2e10      	cmp	r6, #16
    1474:	d1f6      	bne.n	1464 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    1476:	4668      	mov	r0, sp
    1478:	f7ff fee1 	bl	123e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    147c:	4629      	mov	r1, r5
    147e:	4668      	mov	r0, sp
    1480:	f7ff fe98 	bl	11b4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1484:	4633      	mov	r3, r6
    1486:	466a      	mov	r2, sp
    1488:	4631      	mov	r1, r6
    148a:	4640      	mov	r0, r8
    148c:	f7ff fe7a 	bl	1184 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1490:	4668      	mov	r0, sp
    1492:	4632      	mov	r2, r6
    1494:	2100      	movs	r1, #0
    1496:	f7ff fe82 	bl	119e <_set>

	return TC_CRYPTO_SUCCESS;
    149a:	2001      	movs	r0, #1
}
    149c:	b009      	add	sp, #36	; 0x24
    149e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    14a2:	e7fb      	b.n	149c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    14a4:	4608      	mov	r0, r1
    14a6:	e7f9      	b.n	149c <tc_aes_encrypt+0xc0>
    14a8:	4610      	mov	r0, r2
    14aa:	e7f7      	b.n	149c <tc_aes_encrypt+0xc0>
    14ac:	0002d42b 	.word	0x0002d42b

000014b0 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    14b0:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    14b2:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
    14b4:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    14b6:	f912 3b10 	ldrsb.w	r3, [r2], #16
    14ba:	2b00      	cmp	r3, #0
    14bc:	bfb4      	ite	lt
    14be:	2387      	movlt	r3, #135	; 0x87
    14c0:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    14c2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    14c6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
    14ca:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
    14cc:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    14d0:	d002      	beq.n	14d8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
    14d2:	7813      	ldrb	r3, [r2, #0]
    14d4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    14d6:	e7f4      	b.n	14c2 <gf_double+0x12>
	}
}
    14d8:	bd10      	pop	{r4, pc}

000014da <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    14da:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    14dc:	b120      	cbz	r0, 14e8 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    14de:	2258      	movs	r2, #88	; 0x58
    14e0:	2100      	movs	r1, #0
    14e2:	f7ff fe5c 	bl	119e <_set>
    14e6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
    14e8:	bd08      	pop	{r3, pc}

000014ea <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    14ea:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    14ec:	4604      	mov	r4, r0
    14ee:	b188      	cbz	r0, 1514 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    14f0:	2210      	movs	r2, #16
    14f2:	2100      	movs	r1, #0
    14f4:	f7ff fe53 	bl	119e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    14f8:	2210      	movs	r2, #16
    14fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
    14fe:	2100      	movs	r1, #0
    1500:	f7ff fe4d 	bl	119e <_set>
	s->leftover_offset = 0;
    1504:	2300      	movs	r3, #0
    1506:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1508:	2200      	movs	r2, #0
    150a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    150e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    1512:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
    1514:	bd10      	pop	{r4, pc}

00001516 <tc_cmac_setup>:
{
    1516:	b570      	push	{r4, r5, r6, lr}
    1518:	460d      	mov	r5, r1
    151a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    151c:	4604      	mov	r4, r0
    151e:	b310      	cbz	r0, 1566 <tc_cmac_setup+0x50>
    1520:	b311      	cbz	r1, 1568 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
    1522:	2258      	movs	r2, #88	; 0x58
    1524:	2100      	movs	r1, #0
    1526:	f7ff fe3a 	bl	119e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    152a:	4629      	mov	r1, r5
	s->sched = sched;
    152c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    152e:	4630      	mov	r0, r6
    1530:	f7ff fefe 	bl	1330 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1534:	2210      	movs	r2, #16
    1536:	2100      	movs	r1, #0
    1538:	4620      	mov	r0, r4
    153a:	f7ff fe30 	bl	119e <_set>
	gf_double (s->K1, s->iv);
    153e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    1542:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1544:	4621      	mov	r1, r4
    1546:	4620      	mov	r0, r4
    1548:	f7ff ff48 	bl	13dc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    154c:	4621      	mov	r1, r4
    154e:	4628      	mov	r0, r5
    1550:	f7ff ffae 	bl	14b0 <gf_double>
	gf_double (s->K2, s->K1);
    1554:	4629      	mov	r1, r5
    1556:	f104 0020 	add.w	r0, r4, #32
    155a:	f7ff ffa9 	bl	14b0 <gf_double>
	tc_cmac_init(s);
    155e:	4620      	mov	r0, r4
    1560:	f7ff ffc3 	bl	14ea <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    1564:	2001      	movs	r0, #1
}
    1566:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1568:	4608      	mov	r0, r1
    156a:	e7fc      	b.n	1566 <tc_cmac_setup+0x50>

0000156c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    156e:	460d      	mov	r5, r1
    1570:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1572:	4604      	mov	r4, r0
    1574:	2800      	cmp	r0, #0
    1576:	d05c      	beq.n	1632 <tc_cmac_update+0xc6>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    1578:	b90a      	cbnz	r2, 157e <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    157a:	2001      	movs	r0, #1
}
    157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    157e:	2900      	cmp	r1, #0
    1580:	d057      	beq.n	1632 <tc_cmac_update+0xc6>
	if (s->countdown == 0) {
    1582:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
    1586:	ea50 0301 	orrs.w	r3, r0, r1
    158a:	d052      	beq.n	1632 <tc_cmac_update+0xc6>
	s->countdown--;
    158c:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
    1590:	6c60      	ldr	r0, [r4, #68]	; 0x44
	s->countdown--;
    1592:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
    1596:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
    159a:	b348      	cbz	r0, 15f0 <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    159c:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    15a0:	42be      	cmp	r6, r7
    15a2:	f100 0030 	add.w	r0, r0, #48	; 0x30
    15a6:	4420      	add	r0, r4
    15a8:	d208      	bcs.n	15bc <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    15aa:	4633      	mov	r3, r6
    15ac:	4631      	mov	r1, r6
    15ae:	462a      	mov	r2, r5
    15b0:	f7ff fde8 	bl	1184 <_copy>
			s->leftover_offset += data_length;
    15b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    15b6:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    15b8:	6466      	str	r6, [r4, #68]	; 0x44
    15ba:	e7de      	b.n	157a <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    15bc:	463b      	mov	r3, r7
    15be:	462a      	mov	r2, r5
    15c0:	4639      	mov	r1, r7
    15c2:	f7ff fddf 	bl	1184 <_copy>
		s->leftover_offset = 0;
    15c6:	2300      	movs	r3, #0
    15c8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    15ca:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    15cc:	443d      	add	r5, r7
    15ce:	1e63      	subs	r3, r4, #1
    15d0:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
    15d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    15d8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    15dc:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
    15de:	ea82 0200 	eor.w	r2, r2, r0
    15e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    15e4:	d1f6      	bne.n	15d4 <tc_cmac_update+0x68>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    15e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    15e8:	4621      	mov	r1, r4
    15ea:	4620      	mov	r0, r4
    15ec:	f7ff fef6 	bl	13dc <tc_aes_encrypt>
    15f0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    15f4:	2e10      	cmp	r6, #16
    15f6:	d809      	bhi.n	160c <tc_cmac_update+0xa0>
	if (data_length > 0) {
    15f8:	2e00      	cmp	r6, #0
    15fa:	d0be      	beq.n	157a <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    15fc:	4633      	mov	r3, r6
    15fe:	462a      	mov	r2, r5
    1600:	4631      	mov	r1, r6
    1602:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1606:	f7ff fdbd 	bl	1184 <_copy>
    160a:	e7d5      	b.n	15b8 <tc_cmac_update+0x4c>
    160c:	1e63      	subs	r3, r4, #1
    160e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    1610:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    1614:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1618:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
    161a:	ea82 0200 	eor.w	r2, r2, r0
    161e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1620:	d1f6      	bne.n	1610 <tc_cmac_update+0xa4>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1622:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1624:	4621      	mov	r1, r4
    1626:	4620      	mov	r0, r4
    1628:	f7ff fed8 	bl	13dc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    162c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    162e:	3e10      	subs	r6, #16
    1630:	e7e0      	b.n	15f4 <tc_cmac_update+0x88>
		return TC_CRYPTO_FAIL;
    1632:	2000      	movs	r0, #0
    1634:	e7a2      	b.n	157c <tc_cmac_update+0x10>

00001636 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    1636:	b570      	push	{r4, r5, r6, lr}
    1638:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    163a:	4605      	mov	r5, r0
    163c:	b1e8      	cbz	r0, 167a <tc_cmac_final+0x44>
    163e:	b369      	cbz	r1, 169c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    1640:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1642:	2a10      	cmp	r2, #16
    1644:	d11a      	bne.n	167c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    1646:	3110      	adds	r1, #16
    1648:	1e63      	subs	r3, r4, #1
    164a:	3901      	subs	r1, #1
    164c:	f104 000f 	add.w	r0, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1650:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    1654:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
    1658:	4072      	eors	r2, r6
    165a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    165e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1660:	ea82 0206 	eor.w	r2, r2, r6
    1664:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1666:	d1f3      	bne.n	1650 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    1668:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    166a:	4621      	mov	r1, r4
    166c:	4628      	mov	r0, r5
    166e:	f7ff feb5 	bl	13dc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    1672:	4620      	mov	r0, r4
    1674:	f7ff ff31 	bl	14da <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1678:	2001      	movs	r0, #1
}
    167a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    167c:	f102 0030 	add.w	r0, r2, #48	; 0x30
    1680:	2100      	movs	r1, #0
    1682:	f1c2 0210 	rsb	r2, r2, #16
    1686:	4420      	add	r0, r4
    1688:	f7ff fd89 	bl	119e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    168c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    168e:	4423      	add	r3, r4
    1690:	2280      	movs	r2, #128	; 0x80
    1692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    1696:	f104 0120 	add.w	r1, r4, #32
    169a:	e7d5      	b.n	1648 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
    169c:	4608      	mov	r0, r1
    169e:	e7ec      	b.n	167a <tc_cmac_final+0x44>

000016a0 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    16a0:	4b0c      	ldr	r3, [pc, #48]	; (16d4 <errata_108+0x34>)
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	2b06      	cmp	r3, #6
    16a6:	d110      	bne.n	16ca <errata_108+0x2a>
    16a8:	4b0b      	ldr	r3, [pc, #44]	; (16d8 <errata_108+0x38>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	071a      	lsls	r2, r3, #28
    16ae:	d10c      	bne.n	16ca <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    16b0:	4b0a      	ldr	r3, [pc, #40]	; (16dc <errata_108+0x3c>)
    16b2:	6818      	ldr	r0, [r3, #0]
    16b4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    16b8:	2b30      	cmp	r3, #48	; 0x30
    16ba:	d008      	beq.n	16ce <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    16bc:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    16c0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    16c4:	4258      	negs	r0, r3
    16c6:	4158      	adcs	r0, r3
    16c8:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    16ca:	2000      	movs	r0, #0
    16cc:	4770      	bx	lr
            return true;
    16ce:	2001      	movs	r0, #1
}
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop
    16d4:	f0000fe0 	.word	0xf0000fe0
    16d8:	f0000fe4 	.word	0xf0000fe4
    16dc:	f0000fe8 	.word	0xf0000fe8

000016e0 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    16e0:	4b09      	ldr	r3, [pc, #36]	; (1708 <errata_16+0x28>)
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	2b06      	cmp	r3, #6
    16e6:	d10c      	bne.n	1702 <errata_16+0x22>
    16e8:	4b08      	ldr	r3, [pc, #32]	; (170c <errata_16+0x2c>)
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	071a      	lsls	r2, r3, #28
    16ee:	d108      	bne.n	1702 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    16f0:	4b07      	ldr	r3, [pc, #28]	; (1710 <errata_16+0x30>)
    16f2:	6818      	ldr	r0, [r3, #0]
    16f4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    16f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    16fc:	4258      	negs	r0, r3
    16fe:	4158      	adcs	r0, r3
    1700:	4770      	bx	lr
            return true;
        }
    }

    return false;
    1702:	2000      	movs	r0, #0
}
    1704:	4770      	bx	lr
    1706:	bf00      	nop
    1708:	f0000fe0 	.word	0xf0000fe0
    170c:	f0000fe4 	.word	0xf0000fe4
    1710:	f0000fe8 	.word	0xf0000fe8

00001714 <SystemInit>:
{
    1714:	b508      	push	{r3, lr}
    if (errata_12()){
    1716:	f7ff ffc3 	bl	16a0 <errata_108>
    171a:	b128      	cbz	r0, 1728 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    171c:	4b78      	ldr	r3, [pc, #480]	; (1900 <SystemInit+0x1ec>)
    171e:	4a79      	ldr	r2, [pc, #484]	; (1904 <SystemInit+0x1f0>)
    1720:	681b      	ldr	r3, [r3, #0]
    1722:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1726:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    1728:	f7ff ffda 	bl	16e0 <errata_16>
    172c:	b110      	cbz	r0, 1734 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    172e:	4b76      	ldr	r3, [pc, #472]	; (1908 <SystemInit+0x1f4>)
    1730:	4a76      	ldr	r2, [pc, #472]	; (190c <SystemInit+0x1f8>)
    1732:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    1734:	f7ff ffb4 	bl	16a0 <errata_108>
    1738:	b128      	cbz	r0, 1746 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    173a:	4b75      	ldr	r3, [pc, #468]	; (1910 <SystemInit+0x1fc>)
    173c:	4a75      	ldr	r2, [pc, #468]	; (1914 <SystemInit+0x200>)
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	f3c3 3342 	ubfx	r3, r3, #13, #3
    1744:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    1746:	f7ff ffcb 	bl	16e0 <errata_16>
    174a:	b120      	cbz	r0, 1756 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    174c:	4a72      	ldr	r2, [pc, #456]	; (1918 <SystemInit+0x204>)
    174e:	68d3      	ldr	r3, [r2, #12]
    1750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    1754:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    1756:	f7ff ffa3 	bl	16a0 <errata_108>
    175a:	b140      	cbz	r0, 176e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    175c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1760:	2200      	movs	r2, #0
    1762:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    1766:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    176a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    176e:	f7ff ffb7 	bl	16e0 <errata_16>
    1772:	b110      	cbz	r0, 177a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    1774:	4b69      	ldr	r3, [pc, #420]	; (191c <SystemInit+0x208>)
    1776:	2203      	movs	r2, #3
    1778:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    177a:	f7ff ffb1 	bl	16e0 <errata_16>
    177e:	b140      	cbz	r0, 1792 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    1780:	4b67      	ldr	r3, [pc, #412]	; (1920 <SystemInit+0x20c>)
    1782:	2205      	movs	r2, #5
    1784:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    1786:	2201      	movs	r2, #1
    1788:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    178a:	2200      	movs	r2, #0
    178c:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    178e:	223f      	movs	r2, #63	; 0x3f
    1790:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    1792:	4b64      	ldr	r3, [pc, #400]	; (1924 <SystemInit+0x210>)
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	2b06      	cmp	r3, #6
    1798:	d150      	bne.n	183c <SystemInit+0x128>
    179a:	4b63      	ldr	r3, [pc, #396]	; (1928 <SystemInit+0x214>)
    179c:	681b      	ldr	r3, [r3, #0]
    179e:	0719      	lsls	r1, r3, #28
    17a0:	d14c      	bne.n	183c <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    17a2:	4b62      	ldr	r3, [pc, #392]	; (192c <SystemInit+0x218>)
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    17aa:	2b50      	cmp	r3, #80	; 0x50
    17ac:	d146      	bne.n	183c <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    17ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    17b2:	4b5f      	ldr	r3, [pc, #380]	; (1930 <SystemInit+0x21c>)
    17b4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    17b8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    17bc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    17c0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    17c4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    17c8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    17cc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    17d0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    17d4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    17d8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    17dc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    17e0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    17e4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    17e8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    17ec:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    17f0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    17f4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    17f8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    17fc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1800:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1804:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1808:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    180c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1810:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    1814:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1818:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    181c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1820:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1824:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    1828:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    182c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    1830:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1834:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    1838:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    183c:	f7ff ff30 	bl	16a0 <errata_108>
    1840:	b128      	cbz	r0, 184e <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    1842:	4b3c      	ldr	r3, [pc, #240]	; (1934 <SystemInit+0x220>)
    1844:	4a3c      	ldr	r2, [pc, #240]	; (1938 <SystemInit+0x224>)
    1846:	681b      	ldr	r3, [r3, #0]
    1848:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    184c:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    184e:	f7ff ff27 	bl	16a0 <errata_108>
    1852:	b148      	cbz	r0, 1868 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    1854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1858:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    185c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    185e:	bf44      	itt	mi
    1860:	f06f 0201 	mvnmi.w	r2, #1
    1864:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    1868:	4b34      	ldr	r3, [pc, #208]	; (193c <SystemInit+0x228>)
    186a:	681b      	ldr	r3, [r3, #0]
    186c:	2b06      	cmp	r3, #6
    186e:	d108      	bne.n	1882 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    1870:	4b33      	ldr	r3, [pc, #204]	; (1940 <SystemInit+0x22c>)
    1872:	681b      	ldr	r3, [r3, #0]
    1874:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    1876:	bf01      	itttt	eq
    1878:	4a32      	ldreq	r2, [pc, #200]	; (1944 <SystemInit+0x230>)
    187a:	6813      	ldreq	r3, [r2, #0]
    187c:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    1880:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1882:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1886:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    188a:	2a00      	cmp	r2, #0
    188c:	db03      	blt.n	1896 <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    188e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1892:	2b00      	cmp	r3, #0
    1894:	da2f      	bge.n	18f6 <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1896:	4b2c      	ldr	r3, [pc, #176]	; (1948 <SystemInit+0x234>)
    1898:	2201      	movs	r2, #1
    189a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    189e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    18a2:	2a00      	cmp	r2, #0
    18a4:	d0fb      	beq.n	189e <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
    18a6:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    18aa:	2115      	movs	r1, #21
    18ac:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    18b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    18b4:	2a00      	cmp	r2, #0
    18b6:	d0fb      	beq.n	18b0 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
    18b8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    18bc:	2215      	movs	r2, #21
    18be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    18c2:	4b21      	ldr	r3, [pc, #132]	; (1948 <SystemInit+0x234>)
    18c4:	461a      	mov	r2, r3
    18c6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    18ca:	2900      	cmp	r1, #0
    18cc:	d0fb      	beq.n	18c6 <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    18ce:	2100      	movs	r1, #0
    18d0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    18d4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    18d8:	2b00      	cmp	r3, #0
    18da:	d0fb      	beq.n	18d4 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    18dc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    18e0:	491a      	ldr	r1, [pc, #104]	; (194c <SystemInit+0x238>)
    18e2:	4b1b      	ldr	r3, [pc, #108]	; (1950 <SystemInit+0x23c>)
    18e4:	68ca      	ldr	r2, [r1, #12]
    18e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    18ea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    18ec:	60cb      	str	r3, [r1, #12]
    18ee:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    18f2:	bf00      	nop
    18f4:	e7fd      	b.n	18f2 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    18f6:	4b17      	ldr	r3, [pc, #92]	; (1954 <SystemInit+0x240>)
    18f8:	4a17      	ldr	r2, [pc, #92]	; (1958 <SystemInit+0x244>)
    18fa:	601a      	str	r2, [r3, #0]
}
    18fc:	bd08      	pop	{r3, pc}
    18fe:	bf00      	nop
    1900:	10000324 	.word	0x10000324
    1904:	40013540 	.word	0x40013540
    1908:	4007c074 	.word	0x4007c074
    190c:	baadf00d 	.word	0xbaadf00d
    1910:	10000244 	.word	0x10000244
    1914:	4000053c 	.word	0x4000053c
    1918:	e000edf0 	.word	0xe000edf0
    191c:	400005a0 	.word	0x400005a0
    1920:	40005610 	.word	0x40005610
    1924:	f0000fe0 	.word	0xf0000fe0
    1928:	f0000fe4 	.word	0xf0000fe4
    192c:	f0000fe8 	.word	0xf0000fe8
    1930:	4000c000 	.word	0x4000c000
    1934:	10000258 	.word	0x10000258
    1938:	40000ee4 	.word	0x40000ee4
    193c:	10000130 	.word	0x10000130
    1940:	10000134 	.word	0x10000134
    1944:	4000173c 	.word	0x4000173c
    1948:	4001e000 	.word	0x4001e000
    194c:	e000ed00 	.word	0xe000ed00
    1950:	05fa0004 	.word	0x05fa0004
    1954:	2000cc3c 	.word	0x2000cc3c
    1958:	03d09000 	.word	0x03d09000

0000195c <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    195c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    195e:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    1960:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1962:	bf9d      	ittte	ls
    1964:	6882      	ldrls	r2, [r0, #8]
    1966:	18d2      	addls	r2, r2, r3
    1968:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
    196c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1970:	bf94      	ite	ls
    1972:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    1974:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
    1976:	4770      	bx	lr

00001978 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    197c:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1980:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    1982:	1bf6      	subs	r6, r6, r7
    1984:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    1986:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1988:	4688      	mov	r8, r1
    198a:	4615      	mov	r5, r2
    198c:	4438      	add	r0, r7
  if (Rem > NumBytes) {
    198e:	d905      	bls.n	199c <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1990:	f004 fa7a 	bl	5e88 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    1994:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    1996:	60e5      	str	r5, [r4, #12]
}
    1998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    199c:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    199e:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    19a0:	f004 fa72 	bl	5e88 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    19a4:	462a      	mov	r2, r5
    19a6:	eb08 0106 	add.w	r1, r8, r6
    19aa:	6860      	ldr	r0, [r4, #4]
    19ac:	f004 fa6c 	bl	5e88 <memcpy>
    19b0:	e7f1      	b.n	1996 <_WriteNoCheck+0x1e>

000019b2 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    19b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    19b6:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    19b8:	4606      	mov	r6, r0
    19ba:	4689      	mov	r9, r1
    19bc:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    19be:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    19c2:	6934      	ldr	r4, [r6, #16]
    19c4:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    19c6:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    19c8:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    19ca:	bf28      	it	cs
    19cc:	18e4      	addcs	r4, r4, r3
    19ce:	3c01      	subs	r4, #1
    19d0:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    19d2:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    19d4:	42bc      	cmp	r4, r7
    19d6:	bf28      	it	cs
    19d8:	463c      	movcs	r4, r7
    19da:	4294      	cmp	r4, r2
    19dc:	bf28      	it	cs
    19de:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    19e0:	4649      	mov	r1, r9
    19e2:	4428      	add	r0, r5
    19e4:	4622      	mov	r2, r4
    19e6:	f004 fa4f 	bl	5e88 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    19ea:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    19ec:	4425      	add	r5, r4
      WrOff = 0u;
    19ee:	42ab      	cmp	r3, r5
    19f0:	bf08      	it	eq
    19f2:	2500      	moveq	r5, #0
  } while (NumBytes);
    19f4:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    19f6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    19f8:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    19fa:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    19fc:	d1e1      	bne.n	19c2 <_WriteBlocking+0x10>
}
    19fe:	4640      	mov	r0, r8
    1a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001a04 <_DoInit>:
static void _DoInit(void) {
    1a04:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1a06:	4c11      	ldr	r4, [pc, #68]	; (1a4c <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    1a08:	4a11      	ldr	r2, [pc, #68]	; (1a50 <_DoInit+0x4c>)
    1a0a:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1a0c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1a0e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1a12:	4b10      	ldr	r3, [pc, #64]	; (1a54 <_DoInit+0x50>)
    1a14:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    1a16:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1a1c:	4a0e      	ldr	r2, [pc, #56]	; (1a58 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1a1e:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1a20:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1a22:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1a24:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1a26:	490d      	ldr	r1, [pc, #52]	; (1a5c <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    1a28:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    1a2a:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    1a2c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1a30:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1a32:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1a34:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1a36:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1a38:	f004 f998 	bl	5d6c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1a3c:	4908      	ldr	r1, [pc, #32]	; (1a60 <_DoInit+0x5c>)
    1a3e:	4620      	mov	r0, r4
    1a40:	f004 f994 	bl	5d6c <strcpy>
  p->acID[6] = ' ';
    1a44:	2320      	movs	r3, #32
    1a46:	71a3      	strb	r3, [r4, #6]
}
    1a48:	bd10      	pop	{r4, pc}
    1a4a:	bf00      	nop
    1a4c:	20002f50 	.word	0x20002f50
    1a50:	0002d52b 	.word	0x0002d52b
    1a54:	2000001c 	.word	0x2000001c
    1a58:	2000000c 	.word	0x2000000c
    1a5c:	0002d534 	.word	0x0002d534
    1a60:	0002d538 	.word	0x0002d538

00001a64 <SEGGER_RTT_WriteSkipNoLock>:
  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    1a64:	f8df c088 	ldr.w	ip, [pc, #136]	; 1af0 <SEGGER_RTT_WriteSkipNoLock+0x8c>
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  RdOff = pRing->RdOff;
    1a6c:	f04f 0a18 	mov.w	sl, #24
    1a70:	fb0a c700 	mla	r7, sl, r0, ip
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a74:	4689      	mov	r9, r1
  RdOff = pRing->RdOff;
    1a76:	6abe      	ldr	r6, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
    1a78:	6a7d      	ldr	r5, [r7, #36]	; 0x24
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
    1a7a:	42ae      	cmp	r6, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a7c:	4614      	mov	r4, r2
  if (RdOff <= WrOff) {
    1a7e:	d82b      	bhi.n	1ad8 <SEGGER_RTT_WriteSkipNoLock+0x74>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
    1a80:	6a3b      	ldr	r3, [r7, #32]
    1a82:	eba3 0805 	sub.w	r8, r3, r5
    1a86:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {
    1a8a:	4572      	cmp	r2, lr
    1a8c:	d806      	bhi.n	1a9c <SEGGER_RTT_WriteSkipNoLock+0x38>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1a8e:	fb00 a30a 	mla	r3, r0, sl, sl
    1a92:	449c      	add	ip, r3
    1a94:	f8dc 0004 	ldr.w	r0, [ip, #4]
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1a98:	4428      	add	r0, r5
    1a9a:	e00a      	b.n	1ab2 <SEGGER_RTT_WriteSkipNoLock+0x4e>
    Avail += RdOff;
    1a9c:	4476      	add	r6, lr
    if (Avail >= NumBytes) {
    1a9e:	42b2      	cmp	r2, r6
    1aa0:	d823      	bhi.n	1aea <SEGGER_RTT_WriteSkipNoLock+0x86>
    1aa2:	fb00 a30a 	mla	r3, r0, sl, sl
    1aa6:	eb0c 0603 	add.w	r6, ip, r3
      if (Rem > NumBytes) {
    1aaa:	4590      	cmp	r8, r2
    1aac:	6870      	ldr	r0, [r6, #4]
    1aae:	4428      	add	r0, r5
    1ab0:	d903      	bls.n	1aba <SEGGER_RTT_WriteSkipNoLock+0x56>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1ab2:	f004 f9e9 	bl	5e88 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    1ab6:	442c      	add	r4, r5
    1ab8:	e00a      	b.n	1ad0 <SEGGER_RTT_WriteSkipNoLock+0x6c>
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    1aba:	4642      	mov	r2, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    1abc:	eba4 0408 	sub.w	r4, r4, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    1ac0:	f004 f9e2 	bl	5e88 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    1ac4:	4622      	mov	r2, r4
    1ac6:	eb09 0108 	add.w	r1, r9, r8
    1aca:	6870      	ldr	r0, [r6, #4]
    1acc:	f004 f9dc 	bl	5e88 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    1ad0:	627c      	str	r4, [r7, #36]	; 0x24
#endif
      return 1;
    1ad2:	2001      	movs	r0, #1
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
}
    1ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Avail = RdOff - WrOff - 1u;
    1ad8:	3e01      	subs	r6, #1
    1ada:	1b76      	subs	r6, r6, r5
    if (Avail >= NumBytes) {
    1adc:	4296      	cmp	r6, r2
    1ade:	d304      	bcc.n	1aea <SEGGER_RTT_WriteSkipNoLock+0x86>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    1ae0:	fb00 a30a 	mla	r3, r0, sl, sl
    1ae4:	4463      	add	r3, ip
    1ae6:	6858      	ldr	r0, [r3, #4]
    1ae8:	e7d6      	b.n	1a98 <SEGGER_RTT_WriteSkipNoLock+0x34>
  return 0;
    1aea:	2000      	movs	r0, #0
    1aec:	e7f2      	b.n	1ad4 <SEGGER_RTT_WriteSkipNoLock+0x70>
    1aee:	bf00      	nop
    1af0:	20002f50 	.word	0x20002f50

00001af4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1af6:	4c18      	ldr	r4, [pc, #96]	; (1b58 <SEGGER_RTT_WriteNoLock+0x64>)
    1af8:	2318      	movs	r3, #24
    1afa:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1afe:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1b02:	4425      	add	r5, r4
  switch (pRing->Flags) {
    1b04:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    1b06:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1b08:	460f      	mov	r7, r1
    1b0a:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    1b0c:	d011      	beq.n	1b32 <SEGGER_RTT_WriteNoLock+0x3e>
    1b0e:	d303      	bcc.n	1b18 <SEGGER_RTT_WriteNoLock+0x24>
    1b10:	2c02      	cmp	r4, #2
    1b12:	d01b      	beq.n	1b4c <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    1b14:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    1b16:	e00a      	b.n	1b2e <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    1b18:	4628      	mov	r0, r5
    1b1a:	f7ff ff1f 	bl	195c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    1b1e:	4286      	cmp	r6, r0
    1b20:	d805      	bhi.n	1b2e <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    1b22:	4632      	mov	r2, r6
    1b24:	4639      	mov	r1, r7
    1b26:	4628      	mov	r0, r5
    1b28:	f7ff ff26 	bl	1978 <_WriteNoCheck>
    1b2c:	4634      	mov	r4, r6
}
    1b2e:	4620      	mov	r0, r4
    1b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    1b32:	4628      	mov	r0, r5
    1b34:	f7ff ff12 	bl	195c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    1b38:	4286      	cmp	r6, r0
    1b3a:	4634      	mov	r4, r6
    1b3c:	bf28      	it	cs
    1b3e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    1b40:	4622      	mov	r2, r4
    1b42:	4639      	mov	r1, r7
    1b44:	4628      	mov	r0, r5
    1b46:	f7ff ff17 	bl	1978 <_WriteNoCheck>
    break;
    1b4a:	e7f0      	b.n	1b2e <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1b4c:	4628      	mov	r0, r5
}
    1b4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1b52:	f7ff bf2e 	b.w	19b2 <_WriteBlocking>
    1b56:	bf00      	nop
    1b58:	20002f50 	.word	0x20002f50

00001b5c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    1b5c:	4a03      	ldr	r2, [pc, #12]	; (1b6c <SEGGER_RTT_HasDataUp+0x10>)
    1b5e:	2318      	movs	r3, #24
    1b60:	fb03 2300 	mla	r3, r3, r0, r2
    1b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    1b66:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1b68:	1a80      	subs	r0, r0, r2
    1b6a:	4770      	bx	lr
    1b6c:	20002f50 	.word	0x20002f50

00001b70 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    1b70:	f7ff bf48 	b.w	1a04 <_DoInit>

00001b74 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    1b74:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    1b76:	f7ff fffb 	bl	1b70 <SEGGER_RTT_Init>
}
    1b7a:	bd08      	pop	{r3, pc}

00001b7c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    1b7c:	2300      	movs	r3, #0
	list->head = NULL;
    1b7e:	e9c0 3300 	strd	r3, r3, [r0]
}
    1b82:	4770      	bx	lr

00001b84 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    1b84:	6803      	ldr	r3, [r0, #0]
    1b86:	b923      	cbnz	r3, 1b92 <log_list_add_tail+0xe>
		list->head = msg;
    1b88:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    1b8a:	2300      	movs	r3, #0
	list->tail = msg;
    1b8c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    1b8e:	600b      	str	r3, [r1, #0]
}
    1b90:	4770      	bx	lr
		list->tail->next = msg;
    1b92:	6843      	ldr	r3, [r0, #4]
    1b94:	6019      	str	r1, [r3, #0]
    1b96:	e7f8      	b.n	1b8a <log_list_add_tail+0x6>

00001b98 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    1b98:	6800      	ldr	r0, [r0, #0]
    1b9a:	4770      	bx	lr

00001b9c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    1b9c:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    1b9e:	b10b      	cbz	r3, 1ba4 <log_list_head_get+0x8>
		list->head = list->head->next;
    1ba0:	681a      	ldr	r2, [r3, #0]
    1ba2:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    1ba4:	4618      	mov	r0, r3
    1ba6:	4770      	bx	lr

00001ba8 <dummy_timestamp>:
static timestamp_get_t timestamp_func = dummy_timestamp;

static u32_t dummy_timestamp(void)
{
	return 0;
}
    1ba8:	2000      	movs	r0, #0
    1baa:	4770      	bx	lr

00001bac <_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *_log_msg_std_alloc(void)
{
    1bac:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    1bae:	a902      	add	r1, sp, #8
    1bb0:	2200      	movs	r2, #0
    1bb2:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    1bb6:	4808      	ldr	r0, [pc, #32]	; (1bd8 <_log_msg_std_alloc+0x2c>)
    1bb8:	f029 feac 	bl	2b914 <k_mem_slab_alloc>
	if (err != 0) {
    1bbc:	b110      	cbz	r0, 1bc4 <_log_msg_std_alloc+0x18>
		msg = log_msg_no_space_handle();
    1bbe:	f000 fb19 	bl	21f4 <log_msg_no_space_handle>
    1bc2:	9001      	str	r0, [sp, #4]
	return msg;
    1bc4:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    1bc6:	b118      	cbz	r0, 1bd0 <_log_msg_std_alloc+0x24>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    1bc8:	2301      	movs	r3, #1
    1bca:	6043      	str	r3, [r0, #4]
    1bcc:	2300      	movs	r3, #0
    1bce:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    1bd0:	b003      	add	sp, #12
    1bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    1bd6:	bf00      	nop
    1bd8:	20003080 	.word	0x20003080

00001bdc <timestamp_get>:
	log_n(fmt, args, nargs, src_level);
}

static u32_t timestamp_get(void)
{
	return k_cycle_get_32();
    1bdc:	f003 bcde 	b.w	559c <_timer_cycle_get_32>

00001be0 <log_core_init>:
}

void log_core_init(void)
{
    1be0:	b538      	push	{r3, r4, r5, lr}
	log_msg_pool_init();
    1be2:	f000 faef 	bl	21c4 <log_msg_pool_init>
	log_list_init(&list);
    1be6:	480d      	ldr	r0, [pc, #52]	; (1c1c <log_core_init+0x3c>)
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		for (int i = 0; i < log_sources_count(); i++) {
			u32_t *filters = log_dynamic_filters_get(i);
			u8_t level = log_compiled_level_get(i);

			LOG_FILTER_SLOT_SET(filters,
    1be8:	4d0d      	ldr	r5, [pc, #52]	; (1c20 <log_core_init+0x40>)
	log_list_init(&list);
    1bea:	f7ff ffc7 	bl	1b7c <log_list_init>
    1bee:	480d      	ldr	r0, [pc, #52]	; (1c24 <log_core_init+0x44>)
    1bf0:	4a0d      	ldr	r2, [pc, #52]	; (1c28 <log_core_init+0x48>)
    1bf2:	1a12      	subs	r2, r2, r0
    1bf4:	08d2      	lsrs	r2, r2, #3
		for (int i = 0; i < log_sources_count(); i++) {
    1bf6:	2300      	movs	r3, #0
    1bf8:	4293      	cmp	r3, r2
    1bfa:	d100      	bne.n	1bfe <log_core_init+0x1e>
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    1bfc:	bd38      	pop	{r3, r4, r5, pc}
	return __log_const_start[source_id].level;
    1bfe:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
			LOG_FILTER_SLOT_SET(filters,
    1c02:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    1c06:	7909      	ldrb	r1, [r1, #4]
    1c08:	f024 0407 	bic.w	r4, r4, #7
    1c0c:	f001 0107 	and.w	r1, r1, #7
    1c10:	4321      	orrs	r1, r4
    1c12:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
		for (int i = 0; i < log_sources_count(); i++) {
    1c16:	3301      	adds	r3, #1
    1c18:	e7ee      	b.n	1bf8 <log_core_init+0x18>
    1c1a:	bf00      	nop
    1c1c:	20000428 	.word	0x20000428
    1c20:	2000d710 	.word	0x2000d710
    1c24:	0002cff8 	.word	0x0002cff8
    1c28:	0002d188 	.word	0x0002d188

00001c2c <log_process>:

bool log_process(bool bypass)
{
	struct log_msg *msg;

	if (!backend_attached) {
    1c2c:	4b26      	ldr	r3, [pc, #152]	; (1cc8 <log_process+0x9c>)
{
    1c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c32:	4605      	mov	r5, r0
	if (!backend_attached) {
    1c34:	7818      	ldrb	r0, [r3, #0]
    1c36:	b310      	cbz	r0, 1c7e <log_process+0x52>
	__asm__ volatile(
    1c38:	f04f 0320 	mov.w	r3, #32
    1c3c:	f3ef 8411 	mrs	r4, BASEPRI
    1c40:	f383 8811 	msr	BASEPRI, r3
		return false;
	}
	unsigned int key = irq_lock();

	msg = log_list_head_get(&list);
    1c44:	4821      	ldr	r0, [pc, #132]	; (1ccc <log_process+0xa0>)
    1c46:	f7ff ffa9 	bl	1b9c <log_list_head_get>
    1c4a:	4606      	mov	r6, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1c4c:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);

	if (msg != NULL) {
    1c50:	b178      	cbz	r0, 1c72 <log_process+0x46>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1c52:	f3bf 8f5b 	dmb	ish
    1c56:	4b1e      	ldr	r3, [pc, #120]	; (1cd0 <log_process+0xa4>)
    1c58:	e853 2f00 	ldrex	r2, [r3]
    1c5c:	3a01      	subs	r2, #1
    1c5e:	e843 2100 	strex	r1, r2, [r3]
    1c62:	2900      	cmp	r1, #0
    1c64:	d1f8      	bne.n	1c58 <log_process+0x2c>
    1c66:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    1c6a:	b155      	cbz	r5, 1c82 <log_process+0x56>
	log_msg_put(msg);
    1c6c:	4630      	mov	r0, r6
    1c6e:	f000 fb3f 	bl	22f0 <log_msg_put>
		atomic_dec(&buffered_cnt);
		msg_process(msg, bypass);
	}

	return (log_list_head_peek(&list) != NULL);
    1c72:	4816      	ldr	r0, [pc, #88]	; (1ccc <log_process+0xa0>)
    1c74:	f7ff ff90 	bl	1b98 <log_list_head_peek>
    1c78:	3000      	adds	r0, #0
    1c7a:	bf18      	it	ne
    1c7c:	2001      	movne	r0, #1
}
    1c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    1c82:	4c14      	ldr	r4, [pc, #80]	; (1cd4 <log_process+0xa8>)
    1c84:	4f14      	ldr	r7, [pc, #80]	; (1cd8 <log_process+0xac>)
	assert(src_id < log_sources_count());

	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
		u32_t *filters = log_dynamic_filters_get(src_id);

		return LOG_FILTER_SLOT_GET(filters,
    1c86:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1cdc <log_process+0xb0>
    1c8a:	1b3f      	subs	r7, r7, r4
    1c8c:	093f      	lsrs	r7, r7, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    1c8e:	42bd      	cmp	r5, r7
    1c90:	daec      	bge.n	1c6c <log_process+0x40>
			if (log_backend_is_active(backend) &&
    1c92:	6863      	ldr	r3, [r4, #4]
    1c94:	795a      	ldrb	r2, [r3, #5]
    1c96:	b19a      	cbz	r2, 1cc0 <log_process+0x94>
	return msg->hdr.ids.source_id;
    1c98:	8970      	ldrh	r0, [r6, #10]
		return LOG_FILTER_SLOT_GET(filters,
    1c9a:	791b      	ldrb	r3, [r3, #4]
	return msg->hdr.ids.level;
    1c9c:	7ab1      	ldrb	r1, [r6, #10]
	return msg->hdr.ids.source_id;
    1c9e:	0980      	lsrs	r0, r0, #6
    1ca0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1ca4:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
    1ca8:	40d3      	lsrs	r3, r2
	return msg->hdr.ids.level;
    1caa:	f001 0107 	and.w	r1, r1, #7
    1cae:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
    1cb2:	4299      	cmp	r1, r3
    1cb4:	d804      	bhi.n	1cc0 <log_process+0x94>
	backend->api->put(backend, msg);
    1cb6:	6823      	ldr	r3, [r4, #0]
    1cb8:	4631      	mov	r1, r6
    1cba:	681b      	ldr	r3, [r3, #0]
    1cbc:	4620      	mov	r0, r4
    1cbe:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1cc0:	3501      	adds	r5, #1
    1cc2:	3410      	adds	r4, #16
    1cc4:	e7e3      	b.n	1c8e <log_process+0x62>
    1cc6:	bf00      	nop
    1cc8:	2000041c 	.word	0x2000041c
    1ccc:	20000428 	.word	0x20000428
    1cd0:	20000420 	.word	0x20000420
    1cd4:	0002d188 	.word	0x0002d188
    1cd8:	0002d1b8 	.word	0x0002d1b8
    1cdc:	2000d710 	.word	0x2000d710

00001ce0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    1ce0:	4b18      	ldr	r3, [pc, #96]	; (1d44 <msg_finalize+0x64>)
{
    1ce2:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    1ce4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    1ce6:	8141      	strh	r1, [r0, #10]
{
    1ce8:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    1cea:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1cec:	4c16      	ldr	r4, [pc, #88]	; (1d48 <msg_finalize+0x68>)
    1cee:	60e8      	str	r0, [r5, #12]
    1cf0:	f3bf 8f5b 	dmb	ish
    1cf4:	e854 3f00 	ldrex	r3, [r4]
    1cf8:	3301      	adds	r3, #1
    1cfa:	e844 3200 	strex	r2, r3, [r4]
    1cfe:	2a00      	cmp	r2, #0
    1d00:	d1f8      	bne.n	1cf4 <msg_finalize+0x14>
    1d02:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    1d06:	f04f 0320 	mov.w	r3, #32
    1d0a:	f3ef 8611 	mrs	r6, BASEPRI
    1d0e:	f383 8811 	msr	BASEPRI, r3
	log_list_add_tail(&list, msg);
    1d12:	480e      	ldr	r0, [pc, #56]	; (1d4c <msg_finalize+0x6c>)
    1d14:	4629      	mov	r1, r5
    1d16:	f7ff ff35 	bl	1b84 <log_list_add_tail>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1d1a:	f386 8811 	msr	BASEPRI, r6
	if (IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) || panic_mode) {
    1d1e:	4b0c      	ldr	r3, [pc, #48]	; (1d50 <msg_finalize+0x70>)
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	b123      	cbz	r3, 1d2e <msg_finalize+0x4e>
		(void)log_process(false);
    1d24:	2000      	movs	r0, #0
}
    1d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)log_process(false);
    1d2a:	f7ff bf7f 	b.w	1c2c <log_process>
		if (buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1d2e:	6823      	ldr	r3, [r4, #0]
    1d30:	2b0a      	cmp	r3, #10
    1d32:	d106      	bne.n	1d42 <msg_finalize+0x62>
    1d34:	4b07      	ldr	r3, [pc, #28]	; (1d54 <msg_finalize+0x74>)
    1d36:	6818      	ldr	r0, [r3, #0]
    1d38:	b118      	cbz	r0, 1d42 <msg_finalize+0x62>
}
    1d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    1d3e:	f02a bae9 	b.w	2c314 <_impl_k_wakeup>
    1d42:	bd70      	pop	{r4, r5, r6, pc}
    1d44:	2000cc40 	.word	0x2000cc40
    1d48:	20000420 	.word	0x20000420
    1d4c:	20000428 	.word	0x20000428
    1d50:	20000430 	.word	0x20000430
    1d54:	20000434 	.word	0x20000434

00001d58 <log_1>:
{
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	4604      	mov	r4, r0
    1d5c:	460e      	mov	r6, r1
    1d5e:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    1d60:	f7ff ff24 	bl	1bac <_log_msg_std_alloc>

	if (msg != NULL) {
    1d64:	b158      	cbz	r0, 1d7e <log_1+0x26>
		msg->str = str;
    1d66:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1;
    1d68:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    1d6a:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1;
    1d6c:	2201      	movs	r2, #1
    1d6e:	f362 1407 	bfi	r4, r2, #4, #4
    1d72:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
    1d74:	4629      	mov	r1, r5
}
    1d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
    1d7a:	f7ff bfb1 	b.w	1ce0 <msg_finalize>
}
    1d7e:	bd70      	pop	{r4, r5, r6, pc}

00001d80 <log_2>:
{
    1d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d84:	4605      	mov	r5, r0
    1d86:	4688      	mov	r8, r1
    1d88:	4617      	mov	r7, r2
    1d8a:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    1d8c:	f7ff ff0e 	bl	1bac <_log_msg_std_alloc>

	if (msg != NULL) {
    1d90:	b160      	cbz	r0, 1dac <log_2+0x2c>
		msg->str = str;
    1d92:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2;
    1d94:	7a45      	ldrb	r5, [r0, #9]
    1d96:	2302      	movs	r3, #2
    1d98:	f363 1507 	bfi	r5, r3, #4, #4
    1d9c:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    1d9e:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
    1da2:	4631      	mov	r1, r6
}
    1da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
    1da8:	f7ff bf9a 	b.w	1ce0 <msg_finalize>
}
    1dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001db0 <log_3>:
{
    1db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1db4:	4605      	mov	r5, r0
    1db6:	4689      	mov	r9, r1
    1db8:	4690      	mov	r8, r2
    1dba:	461f      	mov	r7, r3
    1dbc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       u32_t arg1,
					       u32_t arg2,
					       u32_t arg3)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    1dc0:	f7ff fef4 	bl	1bac <_log_msg_std_alloc>

	if (msg != NULL) {
    1dc4:	b168      	cbz	r0, 1de2 <log_3+0x32>
		msg->str = str;
    1dc6:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3;
    1dc8:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    1dca:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3;
    1dcc:	2303      	movs	r3, #3
    1dce:	f363 1507 	bfi	r5, r3, #4, #4
    1dd2:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    1dd4:	e9c0 9805 	strd	r9, r8, [r0, #20]
	msg_finalize(msg, src_level);
    1dd8:	4631      	mov	r1, r6
}
    1dda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
    1dde:	f7ff bf7f 	b.w	1ce0 <msg_finalize>
}
    1de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001de6 <log_n>:
{
    1de6:	b510      	push	{r4, lr}
    1de8:	461c      	mov	r4, r3
	struct log_msg *msg = log_msg_create_n(str, args, narg);
    1dea:	f000 fa96 	bl	231a <log_msg_create_n>
	if (msg == NULL) {
    1dee:	b120      	cbz	r0, 1dfa <log_n+0x14>
	msg_finalize(msg, src_level);
    1df0:	4621      	mov	r1, r4
}
    1df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	msg_finalize(msg, src_level);
    1df6:	f7ff bf73 	b.w	1ce0 <msg_finalize>
}
    1dfa:	bd10      	pop	{r4, pc}

00001dfc <log_panic>:
{
    1dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1dfe:	4f0d      	ldr	r7, [pc, #52]	; (1e34 <log_panic+0x38>)
    1e00:	783d      	ldrb	r5, [r7, #0]
    1e02:	b965      	cbnz	r5, 1e1e <log_panic+0x22>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    1e04:	4c0c      	ldr	r4, [pc, #48]	; (1e38 <log_panic+0x3c>)
    1e06:	4e0d      	ldr	r6, [pc, #52]	; (1e3c <log_panic+0x40>)
    1e08:	1b36      	subs	r6, r6, r4
    1e0a:	0936      	lsrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e0c:	42b5      	cmp	r5, r6
    1e0e:	db07      	blt.n	1e20 <log_panic+0x24>
	panic_mode = true;
    1e10:	2301      	movs	r3, #1
    1e12:	703b      	strb	r3, [r7, #0]
	while (log_process(false) == true) {
    1e14:	2000      	movs	r0, #0
    1e16:	f7ff ff09 	bl	1c2c <log_process>
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d1fa      	bne.n	1e14 <log_panic+0x18>
}
    1e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	assert(backend);
	return backend->cb->active;
    1e20:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1e22:	795b      	ldrb	r3, [r3, #5]
    1e24:	b11b      	cbz	r3, 1e2e <log_panic+0x32>
	backend->api->panic(backend);
    1e26:	6823      	ldr	r3, [r4, #0]
    1e28:	4620      	mov	r0, r4
    1e2a:	685b      	ldr	r3, [r3, #4]
    1e2c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e2e:	3501      	adds	r5, #1
    1e30:	3410      	adds	r4, #16
    1e32:	e7eb      	b.n	1e0c <log_panic+0x10>
    1e34:	20000430 	.word	0x20000430
    1e38:	0002d188 	.word	0x0002d188
    1e3c:	0002d1b8 	.word	0x0002d1b8

00001e40 <log_source_name_get>:
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1e40:	4a04      	ldr	r2, [pc, #16]	; (1e54 <log_source_name_get+0x14>)
    1e42:	4b05      	ldr	r3, [pc, #20]	; (1e58 <log_source_name_get+0x18>)
    1e44:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1e46:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1e4a:	bf34      	ite	cc
    1e4c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    1e50:	2000      	movcs	r0, #0
}
    1e52:	4770      	bx	lr
    1e54:	0002cff8 	.word	0x0002cff8
    1e58:	0002d188 	.word	0x0002d188

00001e5c <log_filter_set>:
{
    1e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e60:	4688      	mov	r8, r1
    1e62:	4615      	mov	r5, r2
    1e64:	461e      	mov	r6, r3
		if (backend == NULL) {
    1e66:	b990      	cbnz	r0, 1e8e <log_filter_set+0x32>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    1e68:	4b1a      	ldr	r3, [pc, #104]	; (1ed4 <log_filter_set+0x78>)
    1e6a:	4f1b      	ldr	r7, [pc, #108]	; (1ed8 <log_filter_set+0x7c>)
    1e6c:	1aff      	subs	r7, r7, r3
    1e6e:	093f      	lsrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
    1e70:	4604      	mov	r4, r0
    1e72:	4699      	mov	r9, r3
    1e74:	42bc      	cmp	r4, r7
    1e76:	db01      	blt.n	1e7c <log_filter_set+0x20>
}
    1e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				log_filter_set(backend, domain_id,
    1e7c:	eb09 1004 	add.w	r0, r9, r4, lsl #4
    1e80:	4633      	mov	r3, r6
    1e82:	462a      	mov	r2, r5
    1e84:	4641      	mov	r1, r8
    1e86:	f7ff ffe9 	bl	1e5c <log_filter_set>
			for (int i = 0; i < log_backend_count_get(); i++) {
    1e8a:	3401      	adds	r4, #1
    1e8c:	e7f2      	b.n	1e74 <log_filter_set+0x18>
	return backend->cb->id;
    1e8e:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    1e90:	4912      	ldr	r1, [pc, #72]	; (1edc <log_filter_set+0x80>)
    1e92:	791a      	ldrb	r2, [r3, #4]
    1e94:	2307      	movs	r3, #7
    1e96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1e9a:	fa03 f002 	lsl.w	r0, r3, r2
    1e9e:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    1ea2:	f006 0607 	and.w	r6, r6, #7
    1ea6:	ea23 0300 	bic.w	r3, r3, r0
    1eaa:	4096      	lsls	r6, r2
    1eac:	4333      	orrs	r3, r6
    1eae:	2203      	movs	r2, #3
	u32_t max_filter = LOG_LEVEL_NONE;
    1eb0:	2000      	movs	r0, #0
		u32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    1eb2:	fa23 f402 	lsr.w	r4, r3, r2
    1eb6:	f004 0407 	and.w	r4, r4, #7
    1eba:	42a0      	cmp	r0, r4
    1ebc:	f102 0203 	add.w	r2, r2, #3
    1ec0:	bf38      	it	cc
    1ec2:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    1ec4:	2a1e      	cmp	r2, #30
    1ec6:	d1f4      	bne.n	1eb2 <log_filter_set+0x56>
			LOG_FILTER_SLOT_SET(filters,
    1ec8:	f023 0307 	bic.w	r3, r3, #7
    1ecc:	4303      	orrs	r3, r0
    1ece:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
}
    1ed2:	e7d1      	b.n	1e78 <log_filter_set+0x1c>
    1ed4:	0002d188 	.word	0x0002d188
    1ed8:	0002d1b8 	.word	0x0002d1b8
    1edc:	2000d710 	.word	0x2000d710

00001ee0 <log_init>:
{
    1ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ee4:	4b25      	ldr	r3, [pc, #148]	; (1f7c <log_init+0x9c>)
    1ee6:	f3bf 8f5b 	dmb	ish
    1eea:	e853 4f00 	ldrex	r4, [r3]
    1eee:	1c62      	adds	r2, r4, #1
    1ef0:	e843 2100 	strex	r1, r2, [r3]
    1ef4:	2900      	cmp	r1, #0
    1ef6:	d1f8      	bne.n	1eea <log_init+0xa>
    1ef8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized)) {
    1efc:	b9e4      	cbnz	r4, 1f38 <log_init+0x58>
	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1efe:	2304      	movs	r3, #4
    1f00:	2234      	movs	r2, #52	; 0x34
    1f02:	491f      	ldr	r1, [pc, #124]	; (1f80 <log_init+0xa0>)
    1f04:	481f      	ldr	r0, [pc, #124]	; (1f84 <log_init+0xa4>)
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    1f06:	4d20      	ldr	r5, [pc, #128]	; (1f88 <log_init+0xa8>)
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1f08:	4e20      	ldr	r6, [pc, #128]	; (1f8c <log_init+0xac>)
			backend_attached = true;
    1f0a:	f8df b094 	ldr.w	fp, [pc, #148]	; 1fa0 <log_init+0xc0>
	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1f0e:	f029 fcef 	bl	2b8f0 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    1f12:	4b1f      	ldr	r3, [pc, #124]	; (1f90 <log_init+0xb0>)
    1f14:	4a1f      	ldr	r2, [pc, #124]	; (1f94 <log_init+0xb4>)
    1f16:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
    1f18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1f1c:	f000 fd6c 	bl	29f8 <log_output_timestamp_freq_set>
    1f20:	4b1d      	ldr	r3, [pc, #116]	; (1f98 <log_init+0xb8>)
    1f22:	1b5b      	subs	r3, r3, r5
    1f24:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    1f28:	4b1c      	ldr	r3, [pc, #112]	; (1f9c <log_init+0xbc>)
    1f2a:	1af6      	subs	r6, r6, r3
    1f2c:	08f6      	lsrs	r6, r6, #3
    1f2e:	4698      	mov	r8, r3
	backend->cb->active = true;
    1f30:	f04f 0901 	mov.w	r9, #1
	for (i = 0; i < log_backend_count_get(); i++) {
    1f34:	4554      	cmp	r4, sl
    1f36:	db01      	blt.n	1f3c <log_init+0x5c>
}
    1f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		log_backend_id_set(backend,
    1f3c:	686b      	ldr	r3, [r5, #4]
	backend->cb->id = id;
    1f3e:	3401      	adds	r4, #1
    1f40:	711c      	strb	r4, [r3, #4]
		if (backend->autostart) {
    1f42:	7b2b      	ldrb	r3, [r5, #12]
    1f44:	b16b      	cbz	r3, 1f62 <log_init+0x82>
		for (i = 0; i < log_sources_count(); i++) {
    1f46:	2700      	movs	r7, #0
    1f48:	42be      	cmp	r6, r7
    1f4a:	d10c      	bne.n	1f66 <log_init+0x86>
			if (backend->api->init) {
    1f4c:	682b      	ldr	r3, [r5, #0]
    1f4e:	689b      	ldr	r3, [r3, #8]
    1f50:	b103      	cbz	r3, 1f54 <log_init+0x74>
				backend->api->init();
    1f52:	4798      	blx	r3
			log_backend_activate(backend, NULL);
    1f54:	686b      	ldr	r3, [r5, #4]
			backend_attached = true;
    1f56:	f88b 9000 	strb.w	r9, [fp]
	backend->cb->ctx = ctx;
    1f5a:	2200      	movs	r2, #0
    1f5c:	601a      	str	r2, [r3, #0]
	backend->cb->active = true;
    1f5e:	f883 9005 	strb.w	r9, [r3, #5]
    1f62:	3510      	adds	r5, #16
    1f64:	e7e6      	b.n	1f34 <log_init+0x54>
	return __log_const_start[source_id].level;
    1f66:	eb08 03c7 	add.w	r3, r8, r7, lsl #3
			log_filter_set(backend,
    1f6a:	463a      	mov	r2, r7
    1f6c:	791b      	ldrb	r3, [r3, #4]
    1f6e:	2100      	movs	r1, #0
    1f70:	4628      	mov	r0, r5
    1f72:	f7ff ff73 	bl	1e5c <log_filter_set>
		for (i = 0; i < log_sources_count(); i++) {
    1f76:	3701      	adds	r7, #1
    1f78:	e7e6      	b.n	1f48 <log_init+0x68>
    1f7a:	bf00      	nop
    1f7c:	20000424 	.word	0x20000424
    1f80:	20003258 	.word	0x20003258
    1f84:	20003064 	.word	0x20003064
    1f88:	0002d188 	.word	0x0002d188
    1f8c:	0002d188 	.word	0x0002d188
    1f90:	2000cc40 	.word	0x2000cc40
    1f94:	00001bdd 	.word	0x00001bdd
    1f98:	0002d1b8 	.word	0x0002d1b8
    1f9c:	0002cff8 	.word	0x0002cff8
    1fa0:	2000041c 	.word	0x2000041c

00001fa4 <log_process_thread_func>:
	}
}

#ifdef CONFIG_LOG_PROCESS_THREAD
static void log_process_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
    1fa4:	b508      	push	{r3, lr}
	log_init();
    1fa6:	f7ff ff9b 	bl	1ee0 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    1faa:	f02a f9d9 	bl	2c360 <_impl_k_current_get>
	proc_tid = process_tid;
    1fae:	4a09      	ldr	r2, [pc, #36]	; (1fd4 <log_process_thread_func+0x30>)
    1fb0:	6010      	str	r0, [r2, #0]
	if (!IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) &&
    1fb2:	b128      	cbz	r0, 1fc0 <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1fb4:	4b08      	ldr	r3, [pc, #32]	; (1fd8 <log_process_thread_func+0x34>)
	    process_tid &&
    1fb6:	681b      	ldr	r3, [r3, #0]
    1fb8:	2b09      	cmp	r3, #9
    1fba:	dd01      	ble.n	1fc0 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    1fbc:	f02a f9aa 	bl	2c314 <_impl_k_wakeup>
	thread_set(k_current_get());

	while (1) {
		if (log_process(false) == false) {
    1fc0:	2000      	movs	r0, #0
    1fc2:	f7ff fe33 	bl	1c2c <log_process>
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d1fa      	bne.n	1fc0 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    1fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1fce:	f02a f961 	bl	2c294 <_impl_k_sleep>
    1fd2:	e7f5      	b.n	1fc0 <log_process_thread_func+0x1c>
    1fd4:	20000434 	.word	0x20000434
    1fd8:	20000420 	.word	0x20000420

00001fdc <log_backend_enable>:
{
    1fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1fe0:	4b0c      	ldr	r3, [pc, #48]	; (2014 <log_backend_enable+0x38>)
    1fe2:	4c0d      	ldr	r4, [pc, #52]	; (2018 <log_backend_enable+0x3c>)
    1fe4:	1ae4      	subs	r4, r4, r3
    1fe6:	4606      	mov	r6, r0
    1fe8:	460f      	mov	r7, r1
    1fea:	4690      	mov	r8, r2
    1fec:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < log_sources_count(); i++) {
    1fee:	2500      	movs	r5, #0
    1ff0:	42ac      	cmp	r4, r5
    1ff2:	d107      	bne.n	2004 <log_backend_enable+0x28>
	log_backend_activate(backend, ctx);
    1ff4:	6872      	ldr	r2, [r6, #4]
    1ff6:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
    1ff8:	6017      	str	r7, [r2, #0]
	backend->cb->active = true;
    1ffa:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
    1ffc:	4a07      	ldr	r2, [pc, #28]	; (201c <log_backend_enable+0x40>)
    1ffe:	7013      	strb	r3, [r2, #0]
}
    2000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			log_filter_set(backend,
    2004:	462a      	mov	r2, r5
    2006:	4643      	mov	r3, r8
    2008:	2100      	movs	r1, #0
    200a:	4630      	mov	r0, r6
    200c:	f7ff ff26 	bl	1e5c <log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    2010:	3501      	adds	r5, #1
    2012:	e7ed      	b.n	1ff0 <log_backend_enable+0x14>
    2014:	0002cff8 	.word	0x0002cff8
    2018:	0002d188 	.word	0x0002d188
    201c:	2000041c 	.word	0x2000041c

00002020 <log_backend_disable>:
	backend->cb->active = false;
    2020:	6843      	ldr	r3, [r0, #4]
{
    2022:	b570      	push	{r4, r5, r6, lr}
    2024:	2400      	movs	r4, #0
    2026:	715c      	strb	r4, [r3, #5]
    2028:	4d07      	ldr	r5, [pc, #28]	; (2048 <log_backend_disable+0x28>)
    202a:	4b08      	ldr	r3, [pc, #32]	; (204c <log_backend_disable+0x2c>)
    202c:	1aed      	subs	r5, r5, r3
    202e:	4606      	mov	r6, r0
    2030:	08ed      	lsrs	r5, r5, #3
		for (int i = 0; i < log_sources_count(); i++) {
    2032:	42ac      	cmp	r4, r5
    2034:	d100      	bne.n	2038 <log_backend_disable+0x18>
}
    2036:	bd70      	pop	{r4, r5, r6, pc}
			log_filter_set(backend,
    2038:	2300      	movs	r3, #0
    203a:	4622      	mov	r2, r4
    203c:	4619      	mov	r1, r3
    203e:	4630      	mov	r0, r6
    2040:	f7ff ff0c 	bl	1e5c <log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    2044:	3401      	adds	r4, #1
    2046:	e7f4      	b.n	2032 <log_backend_disable+0x12>
    2048:	0002d188 	.word	0x0002d188
    204c:	0002cff8 	.word	0x0002cff8

00002050 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    2050:	b153      	cbz	r3, 2068 <log_filter_get+0x18>
	return backend->cb->id;
    2052:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    2054:	4907      	ldr	r1, [pc, #28]	; (2074 <log_filter_get+0x24>)
    2056:	7918      	ldrb	r0, [r3, #4]
    2058:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    205c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    2060:	40d8      	lsrs	r0, r3
    2062:	f000 0007 	and.w	r0, r0, #7
    2066:	4770      	bx	lr
	return __log_const_start[source_id].level;
    2068:	4b03      	ldr	r3, [pc, #12]	; (2078 <log_filter_get+0x28>)
    206a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    206e:	7910      	ldrb	r0, [r2, #4]
}
    2070:	4770      	bx	lr
    2072:	bf00      	nop
    2074:	2000d710 	.word	0x2000d710
    2078:	0002cff8 	.word	0x0002cff8

0000207c <log_strdup>:
{
    207c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    207e:	4605      	mov	r5, r0
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2080:	2200      	movs	r2, #0
    2082:	a901      	add	r1, sp, #4
    2084:	4810      	ldr	r0, [pc, #64]	; (20c8 <log_strdup+0x4c>)
    2086:	f029 fc45 	bl	2b914 <k_mem_slab_alloc>
	if (err) {
    208a:	4604      	mov	r4, r0
    208c:	b9d0      	cbnz	r0, 20c4 <log_strdup+0x48>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    208e:	2201      	movs	r2, #1
    2090:	9b01      	ldr	r3, [sp, #4]
    2092:	f3bf 8f5b 	dmb	ish
    2096:	e853 1f00 	ldrex	r1, [r3]
    209a:	e843 2000 	strex	r0, r2, [r3]
    209e:	2800      	cmp	r0, #0
    20a0:	d1f9      	bne.n	2096 <log_strdup+0x1a>
    20a2:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    20a6:	9801      	ldr	r0, [sp, #4]
    20a8:	222d      	movs	r2, #45	; 0x2d
    20aa:	4629      	mov	r1, r5
    20ac:	3004      	adds	r0, #4
    20ae:	f003 fe67 	bl	5d80 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    20b2:	9801      	ldr	r0, [sp, #4]
    20b4:	237e      	movs	r3, #126	; 0x7e
    20b6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    20ba:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
	return dup->buf;
    20be:	3004      	adds	r0, #4
}
    20c0:	b003      	add	sp, #12
    20c2:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    20c4:	4801      	ldr	r0, [pc, #4]	; (20cc <log_strdup+0x50>)
    20c6:	e7fb      	b.n	20c0 <log_strdup+0x44>
    20c8:	20003064 	.word	0x20003064
    20cc:	0002d53f 	.word	0x0002d53f

000020d0 <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    20d0:	4b05      	ldr	r3, [pc, #20]	; (20e8 <log_is_strdup+0x18>)
    20d2:	4298      	cmp	r0, r3
    20d4:	d305      	bcc.n	20e2 <log_is_strdup+0x12>
    20d6:	339c      	adds	r3, #156	; 0x9c
    20d8:	4298      	cmp	r0, r3
    20da:	bf8c      	ite	hi
    20dc:	2000      	movhi	r0, #0
    20de:	2001      	movls	r0, #1
    20e0:	4770      	bx	lr
    20e2:	2000      	movs	r0, #0
}
    20e4:	4770      	bx	lr
    20e6:	bf00      	nop
    20e8:	2000325c 	.word	0x2000325c

000020ec <log_free>:
{
    20ec:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    20ee:	3804      	subs	r0, #4
    20f0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    20f2:	f3bf 8f5b 	dmb	ish
    20f6:	e850 3f00 	ldrex	r3, [r0]
    20fa:	1e5a      	subs	r2, r3, #1
    20fc:	e840 2100 	strex	r1, r2, [r0]
    2100:	2900      	cmp	r1, #0
    2102:	d1f8      	bne.n	20f6 <log_free+0xa>
    2104:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2108:	2b01      	cmp	r3, #1
    210a:	d103      	bne.n	2114 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    210c:	a901      	add	r1, sp, #4
    210e:	4803      	ldr	r0, [pc, #12]	; (211c <log_free+0x30>)
    2110:	f029 fc28 	bl	2b964 <k_mem_slab_free>
}
    2114:	b003      	add	sp, #12
    2116:	f85d fb04 	ldr.w	pc, [sp], #4
    211a:	bf00      	nop
    211c:	20003064 	.word	0x20003064

00002120 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    2120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2124:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    2126:	8903      	ldrh	r3, [r0, #8]
{
    2128:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    212c:	08db      	lsrs	r3, r3, #3
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    212e:	42a3      	cmp	r3, r4
{
    2130:	460e      	mov	r6, r1
	if (offset >= available_len) {
    2132:	d803      	bhi.n	213c <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    2134:	2300      	movs	r3, #0
    2136:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    2138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    213c:	6811      	ldr	r1, [r2, #0]
    213e:	4421      	add	r1, r4
    2140:	4299      	cmp	r1, r3
		*length = available_len - offset;
    2142:	bf84      	itt	hi
    2144:	1b19      	subhi	r1, r3, r4
    2146:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    2148:	2b0c      	cmp	r3, #12
	req_len = *length;
    214a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    214e:	d928      	bls.n	21a2 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    2150:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    2152:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    2156:	d82b      	bhi.n	21b0 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
    2158:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    215a:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    215c:	454b      	cmp	r3, r9
    215e:	bf28      	it	cs
    2160:	464b      	movcs	r3, r9
    2162:	461d      	mov	r5, r3
    2164:	4420      	add	r0, r4
			memcpy(&head_data[offset], data, cpy_len);
    2166:	461a      	mov	r2, r3
		if (put_op) {
    2168:	b1ff      	cbz	r7, 21aa <log_msg_hexdump_data_op+0x8a>
			memcpy(&head_data[offset], data, cpy_len);
    216a:	4631      	mov	r1, r6
			memcpy(data, &head_data[offset], cpy_len);
    216c:	f003 fe8c 	bl	5e88 <memcpy>
		req_len -= cpy_len;
    2170:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    2174:	442e      	add	r6, r5
	while (req_len > 0) {
    2176:	f1b9 0f00 	cmp.w	r9, #0
    217a:	d0dd      	beq.n	2138 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    217c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    2180:	454d      	cmp	r5, r9
    2182:	bf28      	it	cs
    2184:	464d      	movcs	r5, r9
    2186:	1d20      	adds	r0, r4, #4
    2188:	4440      	add	r0, r8
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    218a:	462a      	mov	r2, r5
		if (put_op) {
    218c:	b1bf      	cbz	r7, 21be <log_msg_hexdump_data_op+0x9e>
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    218e:	4631      	mov	r1, r6
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    2190:	f003 fe7a 	bl	5e88 <memcpy>
		req_len -= cpy_len;
    2194:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    2198:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    219c:	442e      	add	r6, r5
		offset = 0;
    219e:	2400      	movs	r4, #0
    21a0:	e7e9      	b.n	2176 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    21a2:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    21a4:	f04f 0800 	mov.w	r8, #0
    21a8:	e7d8      	b.n	215c <log_msg_hexdump_data_op+0x3c>
			memcpy(data, &head_data[offset], cpy_len);
    21aa:	4601      	mov	r1, r0
    21ac:	4630      	mov	r0, r6
    21ae:	e7dd      	b.n	216c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    21b0:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    21b2:	2c1b      	cmp	r4, #27
    21b4:	d9df      	bls.n	2176 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    21b6:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    21ba:	3c1c      	subs	r4, #28
    21bc:	e7f9      	b.n	21b2 <log_msg_hexdump_data_op+0x92>
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    21be:	4601      	mov	r1, r0
    21c0:	4630      	mov	r0, r6
    21c2:	e7e5      	b.n	2190 <log_msg_hexdump_data_op+0x70>

000021c4 <log_msg_pool_init>:
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    21c4:	2320      	movs	r3, #32
    21c6:	461a      	mov	r2, r3
    21c8:	4901      	ldr	r1, [pc, #4]	; (21d0 <log_msg_pool_init+0xc>)
    21ca:	4802      	ldr	r0, [pc, #8]	; (21d4 <log_msg_pool_init+0x10>)
    21cc:	f029 bb90 	b.w	2b8f0 <k_mem_slab_init>
    21d0:	20003628 	.word	0x20003628
    21d4:	20003080 	.word	0x20003080

000021d8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    21d8:	3004      	adds	r0, #4
    21da:	f3bf 8f5b 	dmb	ish
    21de:	e850 3f00 	ldrex	r3, [r0]
    21e2:	3301      	adds	r3, #1
    21e4:	e840 3200 	strex	r2, r3, [r0]
    21e8:	2a00      	cmp	r2, #0
    21ea:	d1f8      	bne.n	21de <log_msg_get+0x6>
    21ec:	f3bf 8f5b 	dmb	ish
}
    21f0:	4770      	bx	lr
	...

000021f4 <log_msg_no_space_handle>:
{
    21f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	union log_msg_chunk *msg = NULL;
    21f6:	ac02      	add	r4, sp, #8
    21f8:	2300      	movs	r3, #0
    21fa:	f844 3d04 	str.w	r3, [r4, #-4]!
			err = k_mem_slab_alloc(&log_msg_pool,
    21fe:	4e08      	ldr	r6, [pc, #32]	; (2220 <log_msg_no_space_handle+0x2c>)
			more = log_process(true);
    2200:	2001      	movs	r0, #1
    2202:	f7ff fd13 	bl	1c2c <log_process>
			err = k_mem_slab_alloc(&log_msg_pool,
    2206:	2200      	movs	r2, #0
			more = log_process(true);
    2208:	4605      	mov	r5, r0
			err = k_mem_slab_alloc(&log_msg_pool,
    220a:	4621      	mov	r1, r4
    220c:	4630      	mov	r0, r6
    220e:	f029 fb81 	bl	2b914 <k_mem_slab_alloc>
		} while ((err != 0) && more);
    2212:	b108      	cbz	r0, 2218 <log_msg_no_space_handle+0x24>
    2214:	2d00      	cmp	r5, #0
    2216:	d1f3      	bne.n	2200 <log_msg_no_space_handle+0xc>
}
    2218:	9801      	ldr	r0, [sp, #4]
    221a:	b002      	add	sp, #8
    221c:	bd70      	pop	{r4, r5, r6, pc}
    221e:	bf00      	nop
    2220:	20003080 	.word	0x20003080

00002224 <log_msg_chunk_alloc>:
{
    2224:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2226:	a902      	add	r1, sp, #8
    2228:	2200      	movs	r2, #0
    222a:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    222e:	4805      	ldr	r0, [pc, #20]	; (2244 <log_msg_chunk_alloc+0x20>)
    2230:	f029 fb70 	bl	2b914 <k_mem_slab_alloc>
	if (err != 0) {
    2234:	b110      	cbz	r0, 223c <log_msg_chunk_alloc+0x18>
		msg = log_msg_no_space_handle();
    2236:	f7ff ffdd 	bl	21f4 <log_msg_no_space_handle>
    223a:	9001      	str	r0, [sp, #4]
}
    223c:	9801      	ldr	r0, [sp, #4]
    223e:	b003      	add	sp, #12
    2240:	f85d fb04 	ldr.w	pc, [sp], #4
    2244:	20003080 	.word	0x20003080

00002248 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    2248:	7a40      	ldrb	r0, [r0, #9]
}
    224a:	0900      	lsrs	r0, r0, #4
    224c:	4770      	bx	lr

0000224e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    224e:	7a43      	ldrb	r3, [r0, #9]
    2250:	091b      	lsrs	r3, r3, #4
    2252:	428b      	cmp	r3, r1
    2254:	d916      	bls.n	2284 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    2256:	2b03      	cmp	r3, #3
    2258:	d803      	bhi.n	2262 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    225a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    225e:	6948      	ldr	r0, [r1, #20]
    2260:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    2262:	2901      	cmp	r1, #1
    2264:	d803      	bhi.n	226e <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    2266:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    226a:	6988      	ldr	r0, [r1, #24]
    226c:	4770      	bx	lr
	cont = msg->payload.ext.next;
    226e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    2270:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    2272:	2906      	cmp	r1, #6
    2274:	d803      	bhi.n	227e <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    2276:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    227a:	6848      	ldr	r0, [r1, #4]
    227c:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    227e:	3907      	subs	r1, #7
		cont = cont->next;
    2280:	681b      	ldr	r3, [r3, #0]
    2282:	e7f6      	b.n	2272 <log_msg_arg_get+0x24>
		return 0;
    2284:	2000      	movs	r0, #0
}
    2286:	4770      	bx	lr

00002288 <msg_free>:
{
    2288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    228a:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    228c:	7a45      	ldrb	r5, [r0, #9]
{
    228e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2290:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    2294:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    2298:	d010      	beq.n	22bc <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    229a:	9b01      	ldr	r3, [sp, #4]
    229c:	7a1a      	ldrb	r2, [r3, #8]
    229e:	0792      	lsls	r2, r2, #30
    22a0:	d506      	bpl.n	22b0 <msg_free+0x28>
    22a2:	ac04      	add	r4, sp, #16
    22a4:	695b      	ldr	r3, [r3, #20]
    22a6:	f844 3d04 	str.w	r3, [r4, #-4]!
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    22aa:	4d10      	ldr	r5, [pc, #64]	; (22ec <msg_free+0x64>)
	while (cont != NULL) {
    22ac:	9b03      	ldr	r3, [sp, #12]
    22ae:	b9b3      	cbnz	r3, 22de <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    22b0:	a901      	add	r1, sp, #4
    22b2:	480e      	ldr	r0, [pc, #56]	; (22ec <msg_free+0x64>)
    22b4:	f029 fb56 	bl	2b964 <k_mem_slab_free>
}
    22b8:	b004      	add	sp, #16
    22ba:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    22bc:	2d00      	cmp	r5, #0
    22be:	d0ec      	beq.n	229a <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    22c0:	42ac      	cmp	r4, r5
    22c2:	9801      	ldr	r0, [sp, #4]
    22c4:	d2e9      	bcs.n	229a <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    22c6:	4621      	mov	r1, r4
    22c8:	f7ff ffc1 	bl	224e <log_msg_arg_get>
    22cc:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    22ce:	f7ff feff 	bl	20d0 <log_is_strdup>
    22d2:	b110      	cbz	r0, 22da <msg_free+0x52>
				log_free(buf);
    22d4:	4630      	mov	r0, r6
    22d6:	f7ff ff09 	bl	20ec <log_free>
		for (i = 0; i < nargs; i++) {
    22da:	3401      	adds	r4, #1
    22dc:	e7f0      	b.n	22c0 <msg_free+0x38>
		next = cont->next;
    22de:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    22e0:	4621      	mov	r1, r4
    22e2:	4628      	mov	r0, r5
    22e4:	f029 fb3e 	bl	2b964 <k_mem_slab_free>
		cont = next;
    22e8:	9603      	str	r6, [sp, #12]
    22ea:	e7df      	b.n	22ac <msg_free+0x24>
    22ec:	20003080 	.word	0x20003080

000022f0 <log_msg_put>:
{
    22f0:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    22f2:	1d02      	adds	r2, r0, #4
    22f4:	f3bf 8f5b 	dmb	ish
    22f8:	e852 1f00 	ldrex	r1, [r2]
    22fc:	3901      	subs	r1, #1
    22fe:	e842 1c00 	strex	ip, r1, [r2]
    2302:	f1bc 0f00 	cmp.w	ip, #0
    2306:	d1f7      	bne.n	22f8 <log_msg_put+0x8>
    2308:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    230c:	685b      	ldr	r3, [r3, #4]
    230e:	b90b      	cbnz	r3, 2314 <log_msg_put+0x24>
		msg_free(msg);
    2310:	f7ff bfba 	b.w	2288 <msg_free>
}
    2314:	4770      	bx	lr

00002316 <log_msg_str_get>:
}
    2316:	6900      	ldr	r0, [r0, #16]
    2318:	4770      	bx	lr

0000231a <log_msg_create_n>:
{
    231a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    231e:	4683      	mov	fp, r0
    2320:	460d      	mov	r5, r1
    2322:	4616      	mov	r6, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    2324:	f7ff ff7e 	bl	2224 <log_msg_chunk_alloc>
	if (msg != NULL) {
    2328:	4604      	mov	r4, r0
    232a:	b1e0      	cbz	r0, 2366 <log_msg_create_n+0x4c>
		msg->hdr.ref_cnt = 1;
    232c:	2301      	movs	r3, #1
	*next = NULL;
    232e:	2200      	movs	r2, #0
    2330:	6043      	str	r3, [r0, #4]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    2332:	f1a6 0802 	sub.w	r8, r6, #2
    2336:	2302      	movs	r3, #2
	next = &msg->payload.ext.next;
    2338:	f100 0914 	add.w	r9, r0, #20
    233c:	8103      	strh	r3, [r0, #8]
	*next = NULL;
    233e:	6142      	str	r2, [r0, #20]
	next = &msg->payload.ext.next;
    2340:	46ca      	mov	sl, r9
    2342:	4647      	mov	r7, r8
		cont->next = NULL;
    2344:	9200      	str	r2, [sp, #0]
	while (n > 0) {
    2346:	f1b8 0f00 	cmp.w	r8, #0
    234a:	dc10      	bgt.n	236e <log_msg_create_n+0x54>
		msg->hdr.params.std.nargs = nargs;
    234c:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    234e:	f8c4 b010 	str.w	fp, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    2352:	f366 1307 	bfi	r3, r6, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    2356:	2e03      	cmp	r6, #3
		msg->hdr.params.std.nargs = nargs;
    2358:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    235a:	d819      	bhi.n	2390 <log_msg_create_n+0x76>
		memcpy(msg->payload.single.args, args, nargs * sizeof(u32_t));
    235c:	00b2      	lsls	r2, r6, #2
    235e:	4629      	mov	r1, r5
    2360:	4648      	mov	r0, r9
    2362:	f003 fd91 	bl	5e88 <memcpy>
}
    2366:	4620      	mov	r0, r4
    2368:	b003      	add	sp, #12
    236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    236e:	f7ff ff59 	bl	2224 <log_msg_chunk_alloc>
		if (!cont) {
    2372:	4602      	mov	r2, r0
    2374:	b920      	cbnz	r0, 2380 <log_msg_create_n+0x66>
    2376:	9001      	str	r0, [sp, #4]
			msg_free(msg);
    2378:	4620      	mov	r0, r4
    237a:	f7ff ff85 	bl	2288 <msg_free>
    237e:	9a01      	ldr	r2, [sp, #4]
		cont->next = NULL;
    2380:	9b00      	ldr	r3, [sp, #0]
		*next = cont;
    2382:	f8ca 2000 	str.w	r2, [sl]
    2386:	f1a8 0807 	sub.w	r8, r8, #7
		cont->next = NULL;
    238a:	6013      	str	r3, [r2, #0]
		next = &cont->next;
    238c:	4692      	mov	sl, r2
    238e:	e7da      	b.n	2346 <log_msg_create_n+0x2c>
		memcpy(msg->payload.ext.data.args, args,
    2390:	4629      	mov	r1, r5
    2392:	2208      	movs	r2, #8
    2394:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    2398:	f8d4 8014 	ldr.w	r8, [r4, #20]
		memcpy(msg->payload.ext.data.args, args,
    239c:	f003 fd74 	bl	5e88 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    23a0:	463e      	mov	r6, r7
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    23a2:	3508      	adds	r5, #8
		u32_t cpy_args = min(nargs, ARGS_CONT_MSG);
    23a4:	2e07      	cmp	r6, #7
    23a6:	4637      	mov	r7, r6
    23a8:	bf28      	it	cs
    23aa:	2707      	movcs	r7, #7
		memcpy(cont->payload.args, args, cpy_args * sizeof(u32_t));
    23ac:	ea4f 0987 	mov.w	r9, r7, lsl #2
    23b0:	4629      	mov	r1, r5
    23b2:	f108 0004 	add.w	r0, r8, #4
    23b6:	464a      	mov	r2, r9
    23b8:	f003 fd66 	bl	5e88 <memcpy>
	while (nargs) {
    23bc:	1bf6      	subs	r6, r6, r7
		args += cpy_args;
    23be:	444d      	add	r5, r9
		cont = cont->next;
    23c0:	f8d8 8000 	ldr.w	r8, [r8]
	while (nargs) {
    23c4:	d1ee      	bne.n	23a4 <log_msg_create_n+0x8a>
    23c6:	e7ce      	b.n	2366 <log_msg_create_n+0x4c>

000023c8 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    23c8:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    23ca:	2400      	movs	r4, #0
    23cc:	9400      	str	r4, [sp, #0]
    23ce:	f7ff fea7 	bl	2120 <log_msg_hexdump_data_op>
}
    23d2:	b002      	add	sp, #8
    23d4:	bd10      	pop	{r4, pc}
	...

000023d8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    23d8:	b40e      	push	{r1, r2, r3}
    23da:	b503      	push	{r0, r1, lr}
    23dc:	ab03      	add	r3, sp, #12
	va_list args;
	int length = 0;

	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    23de:	4601      	mov	r1, r0
{
    23e0:	f853 2b04 	ldr.w	r2, [r3], #4
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    23e4:	4804      	ldr	r0, [pc, #16]	; (23f8 <print_formatted+0x20>)
	va_start(args, fmt);
    23e6:	9301      	str	r3, [sp, #4]
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    23e8:	f003 fe24 	bl	6034 <_prf>
	_vprintk(out_func, (void *)log_output, fmt, args);
#endif
	va_end(args);

	return length;
}
    23ec:	b002      	add	sp, #8
    23ee:	f85d eb04 	ldr.w	lr, [sp], #4
    23f2:	b003      	add	sp, #12
    23f4:	4770      	bx	lr
    23f6:	bf00      	nop
    23f8:	00002421 	.word	0x00002421

000023fc <log_output_flush>:

void log_output_flush(const struct log_output *log_output)
{
	int offset = 0;
	int len = log_output->control_block->offset;
    23fc:	6843      	ldr	r3, [r0, #4]
{
    23fe:	b570      	push	{r4, r5, r6, lr}
	int len = log_output->control_block->offset;
    2400:	681c      	ldr	r4, [r3, #0]
{
    2402:	4605      	mov	r5, r0
	int offset = 0;
    2404:	2600      	movs	r6, #0
	int processed;

	do {
		processed = log_output->func(&log_output->buf[offset], len,
    2406:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
    240a:	4621      	mov	r1, r4
    240c:	4430      	add	r0, r6
    240e:	682b      	ldr	r3, [r5, #0]
    2410:	6852      	ldr	r2, [r2, #4]
    2412:	4798      	blx	r3
					     log_output->control_block->ctx);
		len -= processed;
		offset += processed;
	} while (len);
    2414:	1a24      	subs	r4, r4, r0
		offset += processed;
    2416:	4406      	add	r6, r0
	} while (len);
    2418:	d1f5      	bne.n	2406 <log_output_flush+0xa>

	log_output->control_block->offset = 0;
    241a:	686b      	ldr	r3, [r5, #4]
    241c:	601c      	str	r4, [r3, #0]
}
    241e:	bd70      	pop	{r4, r5, r6, pc}

00002420 <out_func>:
{
    2420:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    2422:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    2426:	681b      	ldr	r3, [r3, #0]
    2428:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    242a:	684a      	ldr	r2, [r1, #4]
    242c:	6813      	ldr	r3, [r2, #0]
    242e:	3301      	adds	r3, #1
    2430:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    2432:	68ca      	ldr	r2, [r1, #12]
    2434:	4293      	cmp	r3, r2
    2436:	d102      	bne.n	243e <out_func+0x1e>
		log_output_flush(out_ctx);
    2438:	4608      	mov	r0, r1
    243a:	f7ff ffdf 	bl	23fc <log_output_flush>
}
    243e:	2000      	movs	r0, #0
    2440:	bd08      	pop	{r3, pc}
	...

00002444 <log_output_msg_process>:
}

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    2444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    2448:	7a0b      	ldrb	r3, [r1, #8]
    244a:	b093      	sub	sp, #76	; 0x4c
	if (!log_msg_is_raw_string(msg)) {
    244c:	f003 0305 	and.w	r3, r3, #5
    2450:	2b05      	cmp	r3, #5
{
    2452:	4605      	mov	r5, r0
    2454:	460c      	mov	r4, r1
    2456:	9209      	str	r2, [sp, #36]	; 0x24
	if (!log_msg_is_raw_string(msg)) {
    2458:	d07e      	beq.n	2558 <log_output_msg_process+0x114>
		if (stamp) {
    245a:	f012 0602 	ands.w	r6, r2, #2
		bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    245e:	4613      	mov	r3, r2
    2460:	f002 0801 	and.w	r8, r2, #1
		bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2464:	f002 0708 	and.w	r7, r2, #8
		if (stamp) {
    2468:	d006      	beq.n	2478 <log_output_msg_process+0x34>
	if (!format) {
    246a:	075e      	lsls	r6, r3, #29
	u32_t timestamp = log_msg_timestamp_get(msg);
    246c:	68ca      	ldr	r2, [r1, #12]
	if (!format) {
    246e:	d448      	bmi.n	2502 <log_output_msg_process+0xbe>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    2470:	49cc      	ldr	r1, [pc, #816]	; (27a4 <log_output_msg_process+0x360>)
    2472:	f7ff ffb1 	bl	23d8 <print_formatted>
		length = print_formatted(log_output,
    2476:	4606      	mov	r6, r0
	if (color) {
    2478:	f1b8 0f00 	cmp.w	r8, #0
    247c:	d00a      	beq.n	2494 <log_output_msg_process+0x50>
		if (colors[level] != NULL) {
    247e:	7aa3      	ldrb	r3, [r4, #10]
    2480:	4ac9      	ldr	r2, [pc, #804]	; (27a8 <log_output_msg_process+0x364>)
    2482:	f003 0307 	and.w	r3, r3, #7
    2486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    248a:	b11a      	cbz	r2, 2494 <log_output_msg_process+0x50>
			print_formatted(log_output, "%s", color);
    248c:	49c7      	ldr	r1, [pc, #796]	; (27ac <log_output_msg_process+0x368>)
    248e:	4628      	mov	r0, r5
    2490:	f7ff ffa2 	bl	23d8 <print_formatted>
	return msg->hdr.ids.domain_id;
    2494:	7aa3      	ldrb	r3, [r4, #10]
	return msg->hdr.ids.source_id;
    2496:	f8b4 800a 	ldrh.w	r8, [r4, #10]
	return msg->hdr.ids.domain_id;
    249a:	f3c3 09c2 	ubfx	r9, r3, #3, #3
	return msg->hdr.ids.source_id;
    249e:	ea4f 1898 	mov.w	r8, r8, lsr #6
	if (level_on) {
    24a2:	b14f      	cbz	r7, 24b8 <log_output_msg_process+0x74>
	return msg->hdr.ids.level;
    24a4:	f003 0307 	and.w	r3, r3, #7
		total += print_formatted(log_output, "<%s> ", severity[level]);
    24a8:	4ac1      	ldr	r2, [pc, #772]	; (27b0 <log_output_msg_process+0x36c>)
    24aa:	49c2      	ldr	r1, [pc, #776]	; (27b4 <log_output_msg_process+0x370>)
    24ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    24b0:	4628      	mov	r0, r5
    24b2:	f7ff ff91 	bl	23d8 <print_formatted>
    24b6:	4607      	mov	r7, r0
	total += print_formatted(log_output,
    24b8:	4641      	mov	r1, r8
    24ba:	4648      	mov	r0, r9
    24bc:	f7ff fcc0 	bl	1e40 <log_source_name_get>
    24c0:	49bd      	ldr	r1, [pc, #756]	; (27b8 <log_output_msg_process+0x374>)
    24c2:	4602      	mov	r2, r0
    24c4:	4628      	mov	r0, r5
    24c6:	f7ff ff87 	bl	23d8 <print_formatted>
    24ca:	4407      	add	r7, r0
		length += ids_print(msg, log_output, level_on);
    24cc:	443e      	add	r6, r7
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    24ce:	7a23      	ldrb	r3, [r4, #8]
	int prefix_offset = prefix_print(msg, log_output, flags);

	if (log_msg_is_std(msg)) {
    24d0:	07d9      	lsls	r1, r3, #31
    24d2:	f100 81fc 	bmi.w	28ce <log_output_msg_process+0x48a>
	const char *str = log_msg_str_get(msg);
    24d6:	4620      	mov	r0, r4
    24d8:	f7ff ff1d 	bl	2316 <log_msg_str_get>
    24dc:	4606      	mov	r6, r0
	switch (log_msg_nargs_get(msg)) {
    24de:	4620      	mov	r0, r4
    24e0:	f7ff feb2 	bl	2248 <log_msg_nargs_get>
    24e4:	280a      	cmp	r0, #10
    24e6:	d847      	bhi.n	2578 <log_output_msg_process+0x134>
    24e8:	e8df f010 	tbh	[pc, r0, lsl #1]
    24ec:	003d0038 	.word	0x003d0038
    24f0:	007a006a 	.word	0x007a006a
    24f4:	00ac0090 	.word	0x00ac0090
    24f8:	00f700cf 	.word	0x00f700cf
    24fc:	01740126 	.word	0x01740126
    2500:	01af      	.short	0x01af
	} else if (freq) {
    2502:	4bae      	ldr	r3, [pc, #696]	; (27bc <log_output_msg_process+0x378>)
    2504:	681e      	ldr	r6, [r3, #0]
    2506:	2e00      	cmp	r6, #0
    2508:	d0b6      	beq.n	2478 <log_output_msg_process+0x34>
		timestamp /= timestamp_div;
    250a:	4bad      	ldr	r3, [pc, #692]	; (27c0 <log_output_msg_process+0x37c>)
    250c:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2510:	6819      	ldr	r1, [r3, #0]
    2512:	fbb2 f1f1 	udiv	r1, r2, r1
		ms = (remainder * 1000) / freq;
    2516:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    251a:	fbb1 f3f6 	udiv	r3, r1, r6
    251e:	fbb3 f2fe 	udiv	r2, r3, lr
    2522:	fb0e 3e12 	mls	lr, lr, r2, r3
		remainder = timestamp % freq;
    2526:	fb06 1313 	mls	r3, r6, r3, r1
		ms = (remainder * 1000) / freq;
    252a:	fb0c f103 	mul.w	r1, ip, r3
		mins = seconds / 60;
    252e:	f04f 093c 	mov.w	r9, #60	; 0x3c
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    2532:	fbb1 faf6 	udiv	sl, r1, r6
    2536:	fb06 111a 	mls	r1, r6, sl, r1
    253a:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    253e:	fbbe f3f9 	udiv	r3, lr, r9
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    2542:	fbb1 f6f6 	udiv	r6, r1, r6
		length = print_formatted(log_output,
    2546:	fb09 e113 	mls	r1, r9, r3, lr
    254a:	9100      	str	r1, [sp, #0]
    254c:	e9cd a601 	strd	sl, r6, [sp, #4]
    2550:	499c      	ldr	r1, [pc, #624]	; (27c4 <log_output_msg_process+0x380>)
    2552:	f7ff ff41 	bl	23d8 <print_formatted>
    2556:	e78e      	b.n	2476 <log_output_msg_process+0x32>
	int length = 0;
    2558:	2600      	movs	r6, #0
    255a:	e7b8      	b.n	24ce <log_output_msg_process+0x8a>
		print_formatted(log_output, str);
    255c:	4631      	mov	r1, r6
	print_formatted(log_output, "\r");
    255e:	4628      	mov	r0, r5
    2560:	f7ff ff3a 	bl	23d8 <print_formatted>
    2564:	e008      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str, log_msg_arg_get(msg, 0));
    2566:	2100      	movs	r1, #0
    2568:	4620      	mov	r0, r4
    256a:	f7ff fe70 	bl	224e <log_msg_arg_get>
    256e:	4631      	mov	r1, r6
    2570:	4602      	mov	r2, r0
    2572:	4628      	mov	r0, r5
    2574:	f7ff ff30 	bl	23d8 <print_formatted>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    2578:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_raw_string(msg)) {
    257a:	f003 0305 	and.w	r3, r3, #5
    257e:	2b05      	cmp	r3, #5
    2580:	d018      	beq.n	25b4 <log_output_msg_process+0x170>
	if (color) {
    2582:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2584:	07d9      	lsls	r1, r3, #31
    2586:	d50b      	bpl.n	25a0 <log_output_msg_process+0x15c>
	return msg->hdr.ids.level;
    2588:	7aa3      	ldrb	r3, [r4, #10]
		if (colors[level] != NULL) {
    258a:	4a87      	ldr	r2, [pc, #540]	; (27a8 <log_output_msg_process+0x364>)
    258c:	f003 0307 	and.w	r3, r3, #7
    2590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2594:	b123      	cbz	r3, 25a0 <log_output_msg_process+0x15c>
			print_formatted(log_output, "%s", color);
    2596:	4a8c      	ldr	r2, [pc, #560]	; (27c8 <log_output_msg_process+0x384>)
    2598:	4984      	ldr	r1, [pc, #528]	; (27ac <log_output_msg_process+0x368>)
    259a:	4628      	mov	r0, r5
    259c:	f7ff ff1c 	bl	23d8 <print_formatted>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    25a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25a2:	06da      	lsls	r2, r3, #27
    25a4:	d406      	bmi.n	25b4 <log_output_msg_process+0x170>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    25a6:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    25a8:	bf4c      	ite	mi
    25aa:	4988      	ldrmi	r1, [pc, #544]	; (27cc <log_output_msg_process+0x388>)
		print_formatted(ctx, "\r\n");
    25ac:	4988      	ldrpl	r1, [pc, #544]	; (27d0 <log_output_msg_process+0x38c>)
    25ae:	4628      	mov	r0, r5
    25b0:	f7ff ff12 	bl	23d8 <print_formatted>
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	postfix_print(msg, log_output, flags);

	log_output_flush(log_output);
    25b4:	4628      	mov	r0, r5
    25b6:	f7ff ff21 	bl	23fc <log_output_flush>
}
    25ba:	b013      	add	sp, #76	; 0x4c
    25bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		print_formatted(log_output, str,
    25c0:	2100      	movs	r1, #0
    25c2:	4620      	mov	r0, r4
    25c4:	f7ff fe43 	bl	224e <log_msg_arg_get>
    25c8:	2101      	movs	r1, #1
    25ca:	4607      	mov	r7, r0
    25cc:	4620      	mov	r0, r4
    25ce:	f7ff fe3e 	bl	224e <log_msg_arg_get>
    25d2:	463a      	mov	r2, r7
    25d4:	4603      	mov	r3, r0
    25d6:	4631      	mov	r1, r6
    25d8:	4628      	mov	r0, r5
    25da:	f7ff fefd 	bl	23d8 <print_formatted>
    25de:	e7cb      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    25e0:	2100      	movs	r1, #0
    25e2:	4620      	mov	r0, r4
    25e4:	f7ff fe33 	bl	224e <log_msg_arg_get>
    25e8:	2101      	movs	r1, #1
    25ea:	4607      	mov	r7, r0
    25ec:	4620      	mov	r0, r4
    25ee:	f7ff fe2e 	bl	224e <log_msg_arg_get>
    25f2:	2102      	movs	r1, #2
    25f4:	4680      	mov	r8, r0
    25f6:	4620      	mov	r0, r4
    25f8:	f7ff fe29 	bl	224e <log_msg_arg_get>
    25fc:	4643      	mov	r3, r8
    25fe:	9000      	str	r0, [sp, #0]
    2600:	463a      	mov	r2, r7
    2602:	4631      	mov	r1, r6
    2604:	4628      	mov	r0, r5
    2606:	f7ff fee7 	bl	23d8 <print_formatted>
    260a:	e7b5      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    260c:	2100      	movs	r1, #0
    260e:	4620      	mov	r0, r4
    2610:	f7ff fe1d 	bl	224e <log_msg_arg_get>
    2614:	2101      	movs	r1, #1
    2616:	4607      	mov	r7, r0
    2618:	4620      	mov	r0, r4
    261a:	f7ff fe18 	bl	224e <log_msg_arg_get>
    261e:	2102      	movs	r1, #2
    2620:	4680      	mov	r8, r0
    2622:	4620      	mov	r0, r4
    2624:	f7ff fe13 	bl	224e <log_msg_arg_get>
    2628:	2103      	movs	r1, #3
    262a:	4681      	mov	r9, r0
    262c:	4620      	mov	r0, r4
    262e:	f7ff fe0e 	bl	224e <log_msg_arg_get>
    2632:	4643      	mov	r3, r8
    2634:	e9cd 9000 	strd	r9, r0, [sp]
    2638:	463a      	mov	r2, r7
    263a:	4631      	mov	r1, r6
    263c:	4628      	mov	r0, r5
    263e:	f7ff fecb 	bl	23d8 <print_formatted>
    2642:	e799      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    2644:	2100      	movs	r1, #0
    2646:	4620      	mov	r0, r4
    2648:	f7ff fe01 	bl	224e <log_msg_arg_get>
    264c:	2101      	movs	r1, #1
    264e:	4607      	mov	r7, r0
    2650:	4620      	mov	r0, r4
    2652:	f7ff fdfc 	bl	224e <log_msg_arg_get>
    2656:	2102      	movs	r1, #2
    2658:	4680      	mov	r8, r0
    265a:	4620      	mov	r0, r4
    265c:	f7ff fdf7 	bl	224e <log_msg_arg_get>
    2660:	2103      	movs	r1, #3
    2662:	4681      	mov	r9, r0
    2664:	4620      	mov	r0, r4
    2666:	f7ff fdf2 	bl	224e <log_msg_arg_get>
    266a:	2104      	movs	r1, #4
    266c:	4682      	mov	sl, r0
    266e:	4620      	mov	r0, r4
    2670:	f7ff fded 	bl	224e <log_msg_arg_get>
    2674:	f8cd 9000 	str.w	r9, [sp]
    2678:	e9cd a001 	strd	sl, r0, [sp, #4]
    267c:	4643      	mov	r3, r8
    267e:	463a      	mov	r2, r7
    2680:	4631      	mov	r1, r6
    2682:	4628      	mov	r0, r5
    2684:	f7ff fea8 	bl	23d8 <print_formatted>
    2688:	e776      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    268a:	2100      	movs	r1, #0
    268c:	4620      	mov	r0, r4
    268e:	f7ff fdde 	bl	224e <log_msg_arg_get>
    2692:	2101      	movs	r1, #1
    2694:	4607      	mov	r7, r0
    2696:	4620      	mov	r0, r4
    2698:	f7ff fdd9 	bl	224e <log_msg_arg_get>
    269c:	2102      	movs	r1, #2
    269e:	4680      	mov	r8, r0
    26a0:	4620      	mov	r0, r4
    26a2:	f7ff fdd4 	bl	224e <log_msg_arg_get>
    26a6:	2103      	movs	r1, #3
    26a8:	4681      	mov	r9, r0
    26aa:	4620      	mov	r0, r4
    26ac:	f7ff fdcf 	bl	224e <log_msg_arg_get>
    26b0:	2104      	movs	r1, #4
    26b2:	4682      	mov	sl, r0
    26b4:	4620      	mov	r0, r4
    26b6:	f7ff fdca 	bl	224e <log_msg_arg_get>
    26ba:	2105      	movs	r1, #5
    26bc:	4683      	mov	fp, r0
    26be:	4620      	mov	r0, r4
    26c0:	f7ff fdc5 	bl	224e <log_msg_arg_get>
    26c4:	e9cd 9a00 	strd	r9, sl, [sp]
    26c8:	e9cd b002 	strd	fp, r0, [sp, #8]
    26cc:	4643      	mov	r3, r8
    26ce:	463a      	mov	r2, r7
    26d0:	4631      	mov	r1, r6
    26d2:	4628      	mov	r0, r5
    26d4:	f7ff fe80 	bl	23d8 <print_formatted>
    26d8:	e74e      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    26da:	2100      	movs	r1, #0
    26dc:	4620      	mov	r0, r4
    26de:	f7ff fdb6 	bl	224e <log_msg_arg_get>
    26e2:	2101      	movs	r1, #1
    26e4:	4607      	mov	r7, r0
    26e6:	4620      	mov	r0, r4
    26e8:	f7ff fdb1 	bl	224e <log_msg_arg_get>
    26ec:	2102      	movs	r1, #2
    26ee:	4680      	mov	r8, r0
    26f0:	4620      	mov	r0, r4
    26f2:	f7ff fdac 	bl	224e <log_msg_arg_get>
    26f6:	2103      	movs	r1, #3
    26f8:	4681      	mov	r9, r0
    26fa:	4620      	mov	r0, r4
    26fc:	f7ff fda7 	bl	224e <log_msg_arg_get>
    2700:	2104      	movs	r1, #4
    2702:	4682      	mov	sl, r0
    2704:	4620      	mov	r0, r4
    2706:	f7ff fda2 	bl	224e <log_msg_arg_get>
    270a:	2105      	movs	r1, #5
    270c:	4683      	mov	fp, r0
    270e:	4620      	mov	r0, r4
    2710:	f7ff fd9d 	bl	224e <log_msg_arg_get>
    2714:	2106      	movs	r1, #6
    2716:	900a      	str	r0, [sp, #40]	; 0x28
    2718:	4620      	mov	r0, r4
    271a:	f7ff fd98 	bl	224e <log_msg_arg_get>
    271e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2720:	9004      	str	r0, [sp, #16]
    2722:	e9cd b302 	strd	fp, r3, [sp, #8]
    2726:	e9cd 9a00 	strd	r9, sl, [sp]
    272a:	4643      	mov	r3, r8
    272c:	463a      	mov	r2, r7
    272e:	4631      	mov	r1, r6
    2730:	4628      	mov	r0, r5
    2732:	f7ff fe51 	bl	23d8 <print_formatted>
    2736:	e71f      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    2738:	2100      	movs	r1, #0
    273a:	4620      	mov	r0, r4
    273c:	f7ff fd87 	bl	224e <log_msg_arg_get>
    2740:	2101      	movs	r1, #1
    2742:	4607      	mov	r7, r0
    2744:	4620      	mov	r0, r4
    2746:	f7ff fd82 	bl	224e <log_msg_arg_get>
    274a:	2102      	movs	r1, #2
    274c:	4680      	mov	r8, r0
    274e:	4620      	mov	r0, r4
    2750:	f7ff fd7d 	bl	224e <log_msg_arg_get>
    2754:	2103      	movs	r1, #3
    2756:	4681      	mov	r9, r0
    2758:	4620      	mov	r0, r4
    275a:	f7ff fd78 	bl	224e <log_msg_arg_get>
    275e:	2104      	movs	r1, #4
    2760:	4682      	mov	sl, r0
    2762:	4620      	mov	r0, r4
    2764:	f7ff fd73 	bl	224e <log_msg_arg_get>
    2768:	2105      	movs	r1, #5
    276a:	4683      	mov	fp, r0
    276c:	4620      	mov	r0, r4
    276e:	f7ff fd6e 	bl	224e <log_msg_arg_get>
    2772:	2106      	movs	r1, #6
    2774:	900b      	str	r0, [sp, #44]	; 0x2c
    2776:	4620      	mov	r0, r4
    2778:	f7ff fd69 	bl	224e <log_msg_arg_get>
    277c:	2107      	movs	r1, #7
    277e:	900a      	str	r0, [sp, #40]	; 0x28
    2780:	4620      	mov	r0, r4
    2782:	f7ff fd64 	bl	224e <log_msg_arg_get>
    2786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    278a:	9005      	str	r0, [sp, #20]
    278c:	9204      	str	r2, [sp, #16]
    278e:	e9cd b302 	strd	fp, r3, [sp, #8]
    2792:	e9cd 9a00 	strd	r9, sl, [sp]
    2796:	4643      	mov	r3, r8
    2798:	463a      	mov	r2, r7
    279a:	4631      	mov	r1, r6
    279c:	4628      	mov	r0, r5
    279e:	f7ff fe1b 	bl	23d8 <print_formatted>
    27a2:	e6e9      	b.n	2578 <log_output_msg_process+0x134>
    27a4:	0002d56c 	.word	0x0002d56c
    27a8:	0002d558 	.word	0x0002d558
    27ac:	0002db78 	.word	0x0002db78
    27b0:	0002d5a8 	.word	0x0002d5a8
    27b4:	0002d591 	.word	0x0002d591
    27b8:	0002d597 	.word	0x0002d597
    27bc:	20000438 	.word	0x20000438
    27c0:	2000043c 	.word	0x2000043c
    27c4:	0002d575 	.word	0x0002d575
    27c8:	0002d5a3 	.word	0x0002d5a3
    27cc:	0002db7d 	.word	0x0002db7d
    27d0:	0002d656 	.word	0x0002d656
		print_formatted(log_output, str,
    27d4:	2100      	movs	r1, #0
    27d6:	4620      	mov	r0, r4
    27d8:	f7ff fd39 	bl	224e <log_msg_arg_get>
    27dc:	2101      	movs	r1, #1
    27de:	900c      	str	r0, [sp, #48]	; 0x30
    27e0:	4620      	mov	r0, r4
    27e2:	f7ff fd34 	bl	224e <log_msg_arg_get>
    27e6:	2102      	movs	r1, #2
    27e8:	900b      	str	r0, [sp, #44]	; 0x2c
    27ea:	4620      	mov	r0, r4
    27ec:	f7ff fd2f 	bl	224e <log_msg_arg_get>
    27f0:	2103      	movs	r1, #3
    27f2:	4607      	mov	r7, r0
    27f4:	4620      	mov	r0, r4
    27f6:	f7ff fd2a 	bl	224e <log_msg_arg_get>
    27fa:	2104      	movs	r1, #4
    27fc:	4680      	mov	r8, r0
    27fe:	4620      	mov	r0, r4
    2800:	f7ff fd25 	bl	224e <log_msg_arg_get>
    2804:	2105      	movs	r1, #5
    2806:	4681      	mov	r9, r0
    2808:	4620      	mov	r0, r4
    280a:	f7ff fd20 	bl	224e <log_msg_arg_get>
    280e:	2106      	movs	r1, #6
    2810:	4682      	mov	sl, r0
    2812:	4620      	mov	r0, r4
    2814:	f7ff fd1b 	bl	224e <log_msg_arg_get>
    2818:	2107      	movs	r1, #7
    281a:	4683      	mov	fp, r0
    281c:	4620      	mov	r0, r4
    281e:	f7ff fd16 	bl	224e <log_msg_arg_get>
    2822:	2108      	movs	r1, #8
    2824:	900a      	str	r0, [sp, #40]	; 0x28
    2826:	4620      	mov	r0, r4
    2828:	f7ff fd11 	bl	224e <log_msg_arg_get>
    282c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    282e:	9006      	str	r0, [sp, #24]
    2830:	e9cd b304 	strd	fp, r3, [sp, #16]
    2834:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    2838:	e9cd 7800 	strd	r7, r8, [sp]
    283c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
    2840:	4631      	mov	r1, r6
    2842:	4628      	mov	r0, r5
    2844:	f7ff fdc8 	bl	23d8 <print_formatted>
    2848:	e696      	b.n	2578 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    284a:	2100      	movs	r1, #0
    284c:	4620      	mov	r0, r4
    284e:	f7ff fcfe 	bl	224e <log_msg_arg_get>
    2852:	2101      	movs	r1, #1
    2854:	900d      	str	r0, [sp, #52]	; 0x34
    2856:	4620      	mov	r0, r4
    2858:	f7ff fcf9 	bl	224e <log_msg_arg_get>
    285c:	2102      	movs	r1, #2
    285e:	900c      	str	r0, [sp, #48]	; 0x30
    2860:	4620      	mov	r0, r4
    2862:	f7ff fcf4 	bl	224e <log_msg_arg_get>
    2866:	2103      	movs	r1, #3
    2868:	900a      	str	r0, [sp, #40]	; 0x28
    286a:	4620      	mov	r0, r4
    286c:	f7ff fcef 	bl	224e <log_msg_arg_get>
    2870:	2104      	movs	r1, #4
    2872:	4607      	mov	r7, r0
    2874:	4620      	mov	r0, r4
    2876:	f7ff fcea 	bl	224e <log_msg_arg_get>
    287a:	2105      	movs	r1, #5
    287c:	4680      	mov	r8, r0
    287e:	4620      	mov	r0, r4
    2880:	f7ff fce5 	bl	224e <log_msg_arg_get>
    2884:	2106      	movs	r1, #6
    2886:	4681      	mov	r9, r0
    2888:	4620      	mov	r0, r4
    288a:	f7ff fce0 	bl	224e <log_msg_arg_get>
    288e:	2107      	movs	r1, #7
    2890:	4682      	mov	sl, r0
    2892:	4620      	mov	r0, r4
    2894:	f7ff fcdb 	bl	224e <log_msg_arg_get>
    2898:	2108      	movs	r1, #8
    289a:	4683      	mov	fp, r0
    289c:	4620      	mov	r0, r4
    289e:	f7ff fcd6 	bl	224e <log_msg_arg_get>
    28a2:	2109      	movs	r1, #9
    28a4:	900b      	str	r0, [sp, #44]	; 0x2c
    28a6:	4620      	mov	r0, r4
    28a8:	f7ff fcd1 	bl	224e <log_msg_arg_get>
    28ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    28ae:	9007      	str	r0, [sp, #28]
    28b0:	e9cd b305 	strd	fp, r3, [sp, #20]
    28b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    28b6:	9300      	str	r3, [sp, #0]
    28b8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
    28bc:	e9cd 7801 	strd	r7, r8, [sp, #4]
    28c0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    28c4:	4631      	mov	r1, r6
    28c6:	4628      	mov	r0, r5
    28c8:	f7ff fd86 	bl	23d8 <print_formatted>
    28cc:	e654      	b.n	2578 <log_output_msg_process+0x134>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    28ce:	7a23      	ldrb	r3, [r4, #8]
	} else if (log_msg_is_raw_string(msg)) {
    28d0:	f003 0305 	and.w	r3, r3, #5
    28d4:	2b05      	cmp	r3, #5
    28d6:	af10      	add	r7, sp, #64	; 0x40
    28d8:	d114      	bne.n	2904 <log_output_msg_process+0x4c0>
	size_t offset = 0;
    28da:	2600      	movs	r6, #0
		length = log_output->size;
    28dc:	68eb      	ldr	r3, [r5, #12]
    28de:	9310      	str	r3, [sp, #64]	; 0x40
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    28e0:	463a      	mov	r2, r7
    28e2:	4633      	mov	r3, r6
    28e4:	68a9      	ldr	r1, [r5, #8]
    28e6:	4620      	mov	r0, r4
    28e8:	f7ff fd6e 	bl	23c8 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    28ec:	686b      	ldr	r3, [r5, #4]
    28ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    28f0:	601a      	str	r2, [r3, #0]
		log_output_flush(log_output);
    28f2:	4628      	mov	r0, r5
    28f4:	f7ff fd82 	bl	23fc <log_output_flush>
		offset += length;
    28f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    28fa:	441e      	add	r6, r3
	} while (length > 0);
    28fc:	2b00      	cmp	r3, #0
    28fe:	d1ed      	bne.n	28dc <log_output_msg_process+0x498>
	print_formatted(log_output, "\r");
    2900:	4934      	ldr	r1, [pc, #208]	; (29d4 <log_output_msg_process+0x590>)
    2902:	e62c      	b.n	255e <log_output_msg_process+0x11a>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2904:	4620      	mov	r0, r4
    2906:	f7ff fd06 	bl	2316 <log_msg_str_get>
    290a:	4933      	ldr	r1, [pc, #204]	; (29d8 <log_output_msg_process+0x594>)
			print_formatted(log_output, " ");
    290c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 29f0 <log_output_msg_process+0x5ac>
				print_formatted(log_output, "%02x ", buf[i]);
    2910:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 29f4 <log_output_msg_process+0x5b0>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    2914:	4602      	mov	r2, r0
    2916:	4628      	mov	r0, r5
    2918:	f7ff fd5e 	bl	23d8 <print_formatted>
	u32_t offset = 0;
    291c:	f04f 0800 	mov.w	r8, #0
	size_t length = sizeof(buf);
    2920:	aa12      	add	r2, sp, #72	; 0x48
    2922:	2308      	movs	r3, #8
    2924:	f842 3d0c 	str.w	r3, [r2, #-12]!
	log_msg_hexdump_data_get(msg, buf, &length, offset);
    2928:	4639      	mov	r1, r7
    292a:	4643      	mov	r3, r8
    292c:	4620      	mov	r0, r4
    292e:	f7ff fd4b 	bl	23c8 <log_msg_hexdump_data_get>
	if (length > 0) {
    2932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2934:	2b00      	cmp	r3, #0
    2936:	d036      	beq.n	29a6 <log_output_msg_process+0x562>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    2938:	9b09      	ldr	r3, [sp, #36]	; 0x24
    293a:	06da      	lsls	r2, r3, #27
    293c:	d406      	bmi.n	294c <log_output_msg_process+0x508>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    293e:	0698      	lsls	r0, r3, #26
		print_formatted(ctx, "\n");
    2940:	bf4c      	ite	mi
    2942:	4926      	ldrmi	r1, [pc, #152]	; (29dc <log_output_msg_process+0x598>)
		print_formatted(ctx, "\r\n");
    2944:	4926      	ldrpl	r1, [pc, #152]	; (29e0 <log_output_msg_process+0x59c>)
    2946:	4628      	mov	r0, r5
    2948:	f7ff fd46 	bl	23d8 <print_formatted>
	u32_t offset = 0;
    294c:	f04f 0a00 	mov.w	sl, #0
		for (int i = 0; i < prefix_offset; i++) {
    2950:	4556      	cmp	r6, sl
    2952:	dc2e      	bgt.n	29b2 <log_output_msg_process+0x56e>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2954:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    2958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    295a:	459a      	cmp	sl, r3
    295c:	d230      	bcs.n	29c0 <log_output_msg_process+0x57c>
				print_formatted(log_output, "%02x ", buf[i]);
    295e:	f817 200a 	ldrb.w	r2, [r7, sl]
    2962:	4659      	mov	r1, fp
    2964:	4628      	mov	r0, r5
    2966:	f7ff fd37 	bl	23d8 <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    296a:	f10a 0a01 	add.w	sl, sl, #1
    296e:	f1ba 0f08 	cmp.w	sl, #8
    2972:	d1f1      	bne.n	2958 <log_output_msg_process+0x514>
		print_formatted(log_output, "|");
    2974:	491b      	ldr	r1, [pc, #108]	; (29e4 <log_output_msg_process+0x5a0>)
    2976:	4628      	mov	r0, r5
    2978:	f7ff fd2e 	bl	23d8 <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    297c:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    2980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2982:	4592      	cmp	sl, r2
    2984:	d221      	bcs.n	29ca <log_output_msg_process+0x586>
				char c = (char)buf[i];
    2986:	f817 200a 	ldrb.w	r2, [r7, sl]
	return ((((unsigned)c) > ' ') && (((unsigned)c) <= '~'));
}

static inline int isprint(int c)
{
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    298a:	f1a2 0120 	sub.w	r1, r2, #32
				print_formatted(log_output, "%c",
    298e:	295f      	cmp	r1, #95	; 0x5f
    2990:	bf28      	it	cs
    2992:	222e      	movcs	r2, #46	; 0x2e
    2994:	4914      	ldr	r1, [pc, #80]	; (29e8 <log_output_msg_process+0x5a4>)
    2996:	4628      	mov	r0, r5
    2998:	f7ff fd1e 	bl	23d8 <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    299c:	f10a 0a01 	add.w	sl, sl, #1
    29a0:	f1ba 0f08 	cmp.w	sl, #8
    29a4:	d1ec      	bne.n	2980 <log_output_msg_process+0x53c>
	return length;
    29a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if (length < HEXDUMP_BYTES_IN_LINE) {
    29a8:	2b07      	cmp	r3, #7
    29aa:	f67f ade5 	bls.w	2578 <log_output_msg_process+0x134>
		offset += length;
    29ae:	4498      	add	r8, r3
    29b0:	e7b6      	b.n	2920 <log_output_msg_process+0x4dc>
			print_formatted(log_output, " ");
    29b2:	4649      	mov	r1, r9
    29b4:	4628      	mov	r0, r5
    29b6:	f7ff fd0f 	bl	23d8 <print_formatted>
		for (int i = 0; i < prefix_offset; i++) {
    29ba:	f10a 0a01 	add.w	sl, sl, #1
    29be:	e7c7      	b.n	2950 <log_output_msg_process+0x50c>
				print_formatted(log_output, "   ");
    29c0:	490a      	ldr	r1, [pc, #40]	; (29ec <log_output_msg_process+0x5a8>)
    29c2:	4628      	mov	r0, r5
    29c4:	f7ff fd08 	bl	23d8 <print_formatted>
    29c8:	e7cf      	b.n	296a <log_output_msg_process+0x526>
				print_formatted(log_output, " ");
    29ca:	4649      	mov	r1, r9
    29cc:	4628      	mov	r0, r5
    29ce:	f7ff fd03 	bl	23d8 <print_formatted>
    29d2:	e7e3      	b.n	299c <log_output_msg_process+0x558>
    29d4:	0002da96 	.word	0x0002da96
    29d8:	0002db78 	.word	0x0002db78
    29dc:	0002db7d 	.word	0x0002db7d
    29e0:	0002d656 	.word	0x0002d656
    29e4:	0002d5a1 	.word	0x0002d5a1
    29e8:	0002db90 	.word	0x0002db90
    29ec:	00033fc1 	.word	0x00033fc1
    29f0:	00033fc3 	.word	0x00033fc3
    29f4:	0002d59b 	.word	0x0002d59b

000029f8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1;
    29f8:	4a08      	ldr	r2, [pc, #32]	; (2a1c <log_output_timestamp_freq_set+0x24>)
{
    29fa:	b510      	push	{r4, lr}
	timestamp_div = 1;
    29fc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    29fe:	4c08      	ldr	r4, [pc, #32]	; (2a20 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1;
    2a00:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2a02:	2100      	movs	r1, #0
    2a04:	42a0      	cmp	r0, r4
    2a06:	d804      	bhi.n	2a12 <log_output_timestamp_freq_set+0x1a>
    2a08:	b101      	cbz	r1, 2a0c <log_output_timestamp_freq_set+0x14>
    2a0a:	6013      	str	r3, [r2, #0]
		frequency /= 2;
		timestamp_div *= 2;
	}

	freq = frequency;
    2a0c:	4b05      	ldr	r3, [pc, #20]	; (2a24 <log_output_timestamp_freq_set+0x2c>)
    2a0e:	6018      	str	r0, [r3, #0]
}
    2a10:	bd10      	pop	{r4, pc}
		frequency /= 2;
    2a12:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2;
    2a14:	005b      	lsls	r3, r3, #1
    2a16:	2101      	movs	r1, #1
    2a18:	e7f4      	b.n	2a04 <log_output_timestamp_freq_set+0xc>
    2a1a:	bf00      	nop
    2a1c:	2000043c 	.word	0x2000043c
    2a20:	000f4240 	.word	0x000f4240
    2a24:	20000438 	.word	0x20000438

00002a28 <char_out>:
#include <device.h>
#include <uart.h>
#include <assert.h>

static int char_out(u8_t *data, size_t length, void *ctx)
{
    2a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a2a:	460d      	mov	r5, r1
    2a2c:	4616      	mov	r6, r2
    2a2e:	4604      	mov	r4, r0
    2a30:	1847      	adds	r7, r0, r1
	struct device *dev = (struct device *)ctx;

	for (size_t i = 0; i < length; i++) {
    2a32:	42a7      	cmp	r7, r4
    2a34:	d101      	bne.n	2a3a <char_out+0x12>
		uart_poll_out(dev, data[i]);
	}

	return length;
}
    2a36:	4628      	mov	r0, r5
    2a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    2a3a:	6873      	ldr	r3, [r6, #4]
    2a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
    2a40:	685b      	ldr	r3, [r3, #4]
    2a42:	4630      	mov	r0, r6
    2a44:	4798      	blx	r3
    2a46:	e7f4      	b.n	2a32 <char_out+0xa>

00002a48 <panic>:
	log_output_ctx_set(&log_output, dev);
}

static void panic(struct log_backend const *const backend)
{
}
    2a48:	4770      	bx	lr
	...

00002a4c <log_backend_uart_init>:
{
    2a4c:	b508      	push	{r3, lr}
	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2a4e:	4803      	ldr	r0, [pc, #12]	; (2a5c <log_backend_uart_init+0x10>)
    2a50:	f028 fe38 	bl	2b6c4 <device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    2a54:	4b02      	ldr	r3, [pc, #8]	; (2a60 <log_backend_uart_init+0x14>)
    2a56:	6058      	str	r0, [r3, #4]
}
    2a58:	bd08      	pop	{r3, pc}
    2a5a:	bf00      	nop
    2a5c:	0002d5e8 	.word	0x0002d5e8
    2a60:	2000044c 	.word	0x2000044c

00002a64 <put>:
{
    2a64:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2a66:	4608      	mov	r0, r1
{
    2a68:	460c      	mov	r4, r1
	log_msg_get(msg);
    2a6a:	f7ff fbb5 	bl	21d8 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    2a6e:	4621      	mov	r1, r4
    2a70:	4804      	ldr	r0, [pc, #16]	; (2a84 <put+0x20>)
    2a72:	220f      	movs	r2, #15
    2a74:	f7ff fce6 	bl	2444 <log_output_msg_process>
	log_msg_put(msg);
    2a78:	4620      	mov	r0, r4
}
    2a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    2a7e:	f7ff bc37 	b.w	22f0 <log_msg_put>
    2a82:	bf00      	nop
    2a84:	0002d5f0 	.word	0x0002d5f0

00002a88 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    2a88:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    2a8a:	2804      	cmp	r0, #4
	entry->handler = NULL;
    2a8c:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    2a8e:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    2a90:	bf98      	it	ls
    2a92:	4b04      	ldrls	r3, [pc, #16]	; (2aa4 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    2a94:	4a04      	ldr	r2, [pc, #16]	; (2aa8 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    2a96:	bf98      	it	ls
    2a98:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    2a9c:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    2a9e:	600b      	str	r3, [r1, #0]
}
    2aa0:	4770      	bx	lr
    2aa2:	bf00      	nop
    2aa4:	0002d778 	.word	0x0002d778
    2aa8:	0002d664 	.word	0x0002d664

00002aac <log_halt>:
	backend->cb->active = false;
    2aac:	684b      	ldr	r3, [r1, #4]
    2aae:	2000      	movs	r0, #0
    2ab0:	7158      	strb	r0, [r3, #5]
		    size_t argc,
		    char **argv)
{
	log_backend_deactivate(backend);
	return 0;
}
    2ab2:	4770      	bx	lr

00002ab4 <log_go>:
	backend->cb->active = true;
    2ab4:	684b      	ldr	r3, [r1, #4]
    2ab6:	2201      	movs	r2, #1
    2ab8:	715a      	strb	r2, [r3, #5]
		  size_t argc,
		  char **argv)
{
	log_backend_activate(backend, backend->cb->ctx);
	return 0;
}
    2aba:	2000      	movs	r0, #0
    2abc:	4770      	bx	lr
	...

00002ac0 <backend_name_get>:
	SHELL_SUBCMD_SET_END
};

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    2ac0:	2200      	movs	r2, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    2ac2:	4b08      	ldr	r3, [pc, #32]	; (2ae4 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    2ac4:	600a      	str	r2, [r1, #0]
	entry->handler = NULL;
    2ac6:	60ca      	str	r2, [r1, #12]
	entry->help  = NULL;
    2ac8:	604a      	str	r2, [r1, #4]
	entry->subcmd = &sub_log_backend;
    2aca:	608b      	str	r3, [r1, #8]
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    2acc:	4a06      	ldr	r2, [pc, #24]	; (2ae8 <backend_name_get+0x28>)
    2ace:	4b07      	ldr	r3, [pc, #28]	; (2aec <backend_name_get+0x2c>)
    2ad0:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    2ad2:	ebb0 1f12 	cmp.w	r0, r2, lsr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    2ad6:	bf3e      	ittt	cc
    2ad8:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    2adc:	689b      	ldrcc	r3, [r3, #8]
    2ade:	600b      	strcc	r3, [r1, #0]
	}
}
    2ae0:	4770      	bx	lr
    2ae2:	bf00      	nop
    2ae4:	0002da54 	.word	0x0002da54
    2ae8:	0002d1b8 	.word	0x0002d1b8
    2aec:	0002d188 	.word	0x0002d188

00002af0 <log_status>:
{
    2af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    2af4:	4b21      	ldr	r3, [pc, #132]	; (2b7c <log_status+0x8c>)
    2af6:	4d22      	ldr	r5, [pc, #136]	; (2b80 <log_status+0x90>)
    2af8:	1aed      	subs	r5, r5, r3
	return backend->cb->active;
    2afa:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    2afc:	795b      	ldrb	r3, [r3, #5]
{
    2afe:	4606      	mov	r6, r0
    2b00:	460f      	mov	r7, r1
    2b02:	08ed      	lsrs	r5, r5, #3
	if (!log_backend_is_active(backend)) {
    2b04:	b91b      	cbnz	r3, 2b0e <log_status+0x1e>
		shell_fprintf(shell, SHELL_ERROR, "Logs are halted!\r\n");
    2b06:	4a1f      	ldr	r2, [pc, #124]	; (2b84 <log_status+0x94>)
    2b08:	2102      	movs	r1, #2
    2b0a:	f000 fc5f 	bl	33cc <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    2b0e:	4b1e      	ldr	r3, [pc, #120]	; (2b88 <log_status+0x98>)
    2b10:	4a1e      	ldr	r2, [pc, #120]	; (2b8c <log_status+0x9c>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2b12:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2b94 <log_status+0xa4>
    2b16:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2b98 <log_status+0xa8>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    2b1a:	2100      	movs	r1, #0
    2b1c:	4630      	mov	r0, r6
    2b1e:	f000 fc55 	bl	33cc <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    2b22:	4a1b      	ldr	r2, [pc, #108]	; (2b90 <log_status+0xa0>)
    2b24:	2100      	movs	r1, #0
    2b26:	4630      	mov	r0, r6
    2b28:	f000 fc50 	bl	33cc <shell_fprintf>
	for (i = 0; i < modules_cnt; i++) {
    2b2c:	2400      	movs	r4, #0
    2b2e:	42ac      	cmp	r4, r5
    2b30:	d103      	bne.n	2b3a <log_status+0x4a>
}
    2b32:	2000      	movs	r0, #0
    2b34:	b003      	add	sp, #12
    2b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2b3a:	4622      	mov	r2, r4
    2b3c:	2301      	movs	r3, #1
    2b3e:	2100      	movs	r1, #0
    2b40:	4638      	mov	r0, r7
    2b42:	f7ff fa85 	bl	2050 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2b46:	2300      	movs	r3, #0
    2b48:	4622      	mov	r2, r4
    2b4a:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2b4c:	4682      	mov	sl, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2b4e:	4638      	mov	r0, r7
    2b50:	f7ff fa7e 	bl	2050 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2b54:	4621      	mov	r1, r4
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2b56:	4683      	mov	fp, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    2b58:	2000      	movs	r0, #0
    2b5a:	f7ff f971 	bl	1e40 <log_source_name_get>
    2b5e:	f858 302b 	ldr.w	r3, [r8, fp, lsl #2]
    2b62:	9301      	str	r3, [sp, #4]
    2b64:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    2b68:	9300      	str	r3, [sp, #0]
    2b6a:	464a      	mov	r2, r9
    2b6c:	4603      	mov	r3, r0
    2b6e:	2100      	movs	r1, #0
    2b70:	4630      	mov	r0, r6
    2b72:	f000 fc2b 	bl	33cc <shell_fprintf>
	for (i = 0; i < modules_cnt; i++) {
    2b76:	3401      	adds	r4, #1
    2b78:	e7d9      	b.n	2b2e <log_status+0x3e>
    2b7a:	bf00      	nop
    2b7c:	0002cff8 	.word	0x0002cff8
    2b80:	0002d188 	.word	0x0002d188
    2b84:	0002d6d3 	.word	0x0002d6d3
    2b88:	0002d6e6 	.word	0x0002d6e6
    2b8c:	0002d6f2 	.word	0x0002d6f2
    2b90:	0002d710 	.word	0x0002d710
    2b94:	0002d764 	.word	0x0002d764
    2b98:	0002d74d 	.word	0x0002d74d

00002b9c <module_name_get>:
{
    2b9c:	b510      	push	{r4, lr}
	entry->handler = NULL;
    2b9e:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    2ba0:	4a05      	ldr	r2, [pc, #20]	; (2bb8 <module_name_get+0x1c>)
	entry->handler = NULL;
    2ba2:	60cb      	str	r3, [r1, #12]
{
    2ba4:	460c      	mov	r4, r1
	entry->help  = NULL;
    2ba6:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    2ba8:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    2baa:	4601      	mov	r1, r0
    2bac:	4618      	mov	r0, r3
    2bae:	f7ff f947 	bl	1e40 <log_source_name_get>
    2bb2:	6020      	str	r0, [r4, #0]
}
    2bb4:	bd10      	pop	{r4, pc}
    2bb6:	bf00      	nop
    2bb8:	0002d664 	.word	0x0002d664

00002bbc <filters_set>:
{
    2bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bc0:	460f      	mov	r7, r1
    2bc2:	4698      	mov	r8, r3
    2bc4:	4930      	ldr	r1, [pc, #192]	; (2c88 <filters_set+0xcc>)
    2bc6:	4b31      	ldr	r3, [pc, #196]	; (2c8c <filters_set+0xd0>)
    2bc8:	1a5b      	subs	r3, r3, r1
    2bca:	b085      	sub	sp, #20
    2bcc:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	int cnt = all ? log_sources_count() : argc;
    2bd0:	2a00      	cmp	r2, #0
    2bd2:	bf14      	ite	ne
    2bd4:	4613      	movne	r3, r2
    2bd6:	465b      	moveq	r3, fp
    2bd8:	9303      	str	r3, [sp, #12]
	if (!backend->cb->active) {
    2bda:	687b      	ldr	r3, [r7, #4]
{
    2bdc:	9002      	str	r0, [sp, #8]
	if (!backend->cb->active) {
    2bde:	795b      	ldrb	r3, [r3, #5]
	int cnt = all ? log_sources_count() : argc;
    2be0:	4616      	mov	r6, r2
	if (!backend->cb->active) {
    2be2:	b91b      	cbnz	r3, 2bec <filters_set+0x30>
		shell_fprintf(shell, SHELL_WARNING, "Backend not active.\r\n");
    2be4:	4a2a      	ldr	r2, [pc, #168]	; (2c90 <filters_set+0xd4>)
    2be6:	2104      	movs	r1, #4
    2be8:	f000 fbf0 	bl	33cc <shell_fprintf>
	for (i = 0; i < modules_cnt; i++) {
    2bec:	2500      	movs	r5, #0
    2bee:	e03d      	b.n	2c6c <filters_set+0xb0>
		id = all ? i : module_id_get(argv[i]);
    2bf0:	2e00      	cmp	r6, #0
    2bf2:	d047      	beq.n	2c84 <filters_set+0xc8>
    2bf4:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
	for (i = 0; i < modules_cnt; i++) {
    2bf8:	f04f 0900 	mov.w	r9, #0
    2bfc:	45d9      	cmp	r9, fp
    2bfe:	d107      	bne.n	2c10 <filters_set+0x54>
			shell_fprintf(shell, SHELL_ERROR,
    2c00:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    2c04:	4a23      	ldr	r2, [pc, #140]	; (2c94 <filters_set+0xd8>)
    2c06:	9802      	ldr	r0, [sp, #8]
    2c08:	2102      	movs	r1, #2
    2c0a:	f000 fbdf 	bl	33cc <shell_fprintf>
    2c0e:	e02c      	b.n	2c6a <filters_set+0xae>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    2c10:	4649      	mov	r1, r9
    2c12:	2000      	movs	r0, #0
    2c14:	f7ff f914 	bl	1e40 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    2c18:	2240      	movs	r2, #64	; 0x40
    2c1a:	4621      	mov	r1, r4
    2c1c:	f003 f8f3 	bl	5e06 <strncmp>
    2c20:	bb50      	cbnz	r0, 2c78 <filters_set+0xbc>
			return i;
    2c22:	464c      	mov	r4, r9
	compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    2c24:	2300      	movs	r3, #0
    2c26:	4619      	mov	r1, r3
    2c28:	4622      	mov	r2, r4
    2c2a:	4638      	mov	r0, r7
    2c2c:	f7ff fa10 	bl	2050 <log_filter_get>
    2c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2c32:	4283      	cmp	r3, r0
    2c34:	bf28      	it	cs
    2c36:	4603      	movcs	r3, r0
    2c38:	4681      	mov	r9, r0
	log_filter_set(backend, CONFIG_LOG_DOMAIN_ID, module_id, level);
    2c3a:	4622      	mov	r2, r4
    2c3c:	2100      	movs	r1, #0
    2c3e:	4638      	mov	r0, r7
    2c40:	469a      	mov	sl, r3
    2c42:	f7ff f90b 	bl	1e5c <log_filter_set>
			if (set_lvl != level) {
    2c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2c48:	454b      	cmp	r3, r9
    2c4a:	d90e      	bls.n	2c6a <filters_set+0xae>
						CONFIG_LOG_DOMAIN_ID, i) :
    2c4c:	b9be      	cbnz	r6, 2c7e <filters_set+0xc2>
    2c4e:	4629      	mov	r1, r5
    2c50:	4630      	mov	r0, r6
    2c52:	f7ff f8f5 	bl	1e40 <log_source_name_get>
    2c56:	4603      	mov	r3, r0
				shell_fprintf(shell, SHELL_WARNING,
    2c58:	4a0f      	ldr	r2, [pc, #60]	; (2c98 <filters_set+0xdc>)
    2c5a:	9802      	ldr	r0, [sp, #8]
    2c5c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    2c60:	9200      	str	r2, [sp, #0]
    2c62:	2104      	movs	r1, #4
    2c64:	4a0d      	ldr	r2, [pc, #52]	; (2c9c <filters_set+0xe0>)
    2c66:	f000 fbb1 	bl	33cc <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    2c6a:	3501      	adds	r5, #1
    2c6c:	9b03      	ldr	r3, [sp, #12]
    2c6e:	429d      	cmp	r5, r3
    2c70:	dbbe      	blt.n	2bf0 <filters_set+0x34>
}
    2c72:	b005      	add	sp, #20
    2c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < modules_cnt; i++) {
    2c78:	f109 0901 	add.w	r9, r9, #1
    2c7c:	e7be      	b.n	2bfc <filters_set+0x40>
						CONFIG_LOG_DOMAIN_ID, i) :
    2c7e:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    2c82:	e7e9      	b.n	2c58 <filters_set+0x9c>
    2c84:	462c      	mov	r4, r5
    2c86:	e7cd      	b.n	2c24 <filters_set+0x68>
    2c88:	0002cff8 	.word	0x0002cff8
    2c8c:	0002d188 	.word	0x0002d188
    2c90:	0002d674 	.word	0x0002d674
    2c94:	0002d6a1 	.word	0x0002d6a1
    2c98:	0002d764 	.word	0x0002d764
    2c9c:	0002d68a 	.word	0x0002d68a

00002ca0 <shell_backend_cmd_execute>:
{
    2ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    2ca4:	f852 7c04 	ldr.w	r7, [r2, #-4]
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    2ca8:	4d19      	ldr	r5, [pc, #100]	; (2d10 <shell_backend_cmd_execute+0x70>)
{
    2caa:	b085      	sub	sp, #20
    2cac:	4680      	mov	r8, r0
	size_t slen = strlen(name);
    2cae:	4638      	mov	r0, r7
{
    2cb0:	4692      	mov	sl, r2
    2cb2:	9302      	str	r3, [sp, #8]
    2cb4:	468b      	mov	fp, r1
	size_t slen = strlen(name);
    2cb6:	f003 f891 	bl	5ddc <strlen>
    2cba:	4a16      	ldr	r2, [pc, #88]	; (2d14 <shell_backend_cmd_execute+0x74>)
    2cbc:	1b52      	subs	r2, r2, r5
    2cbe:	0912      	lsrs	r2, r2, #4
    2cc0:	4603      	mov	r3, r0
    2cc2:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    2cc4:	2400      	movs	r4, #0
    2cc6:	9a01      	ldr	r2, [sp, #4]
    2cc8:	4294      	cmp	r4, r2
    2cca:	db08      	blt.n	2cde <shell_backend_cmd_execute+0x3e>
		shell_fprintf(shell, SHELL_ERROR,
    2ccc:	463b      	mov	r3, r7
    2cce:	4a12      	ldr	r2, [pc, #72]	; (2d18 <shell_backend_cmd_execute+0x78>)
    2cd0:	2102      	movs	r1, #2
    2cd2:	4640      	mov	r0, r8
    2cd4:	f000 fb7a 	bl	33cc <shell_fprintf>
		return -ENOEXEC;
    2cd8:	f06f 0607 	mvn.w	r6, #7
    2cdc:	e013      	b.n	2d06 <shell_backend_cmd_execute+0x66>
    2cde:	eb05 1904 	add.w	r9, r5, r4, lsl #4
		if (strncmp(name, backend->name, slen) == 0) {
    2ce2:	461a      	mov	r2, r3
    2ce4:	f8d9 1008 	ldr.w	r1, [r9, #8]
    2ce8:	9303      	str	r3, [sp, #12]
    2cea:	4638      	mov	r0, r7
    2cec:	f003 f88b 	bl	5e06 <strncmp>
    2cf0:	4606      	mov	r6, r0
    2cf2:	b110      	cbz	r0, 2cfa <shell_backend_cmd_execute+0x5a>
	for (int i = 0; i < log_backend_count_get(); i++) {
    2cf4:	3401      	adds	r4, #1
    2cf6:	9b03      	ldr	r3, [sp, #12]
    2cf8:	e7e5      	b.n	2cc6 <shell_backend_cmd_execute+0x26>
		func(shell, backend, argc, argv);
    2cfa:	4653      	mov	r3, sl
    2cfc:	465a      	mov	r2, fp
    2cfe:	4649      	mov	r1, r9
    2d00:	4640      	mov	r0, r8
    2d02:	9c02      	ldr	r4, [sp, #8]
    2d04:	47a0      	blx	r4
}
    2d06:	4630      	mov	r0, r6
    2d08:	b005      	add	sp, #20
    2d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d0e:	bf00      	nop
    2d10:	0002d188 	.word	0x0002d188
    2d14:	0002d1b8 	.word	0x0002d1b8
    2d18:	0002d78c 	.word	0x0002d78c

00002d1c <cmd_log_backend_status>:
{
    2d1c:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    2d1e:	4b02      	ldr	r3, [pc, #8]	; (2d28 <cmd_log_backend_status+0xc>)
    2d20:	f7ff ffbe 	bl	2ca0 <shell_backend_cmd_execute>
}
    2d24:	2000      	movs	r0, #0
    2d26:	bd08      	pop	{r3, pc}
    2d28:	00002af1 	.word	0x00002af1

00002d2c <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    2d2c:	4b01      	ldr	r3, [pc, #4]	; (2d34 <cmd_log_backend_halt+0x8>)
    2d2e:	f7ff bfb7 	b.w	2ca0 <shell_backend_cmd_execute>
    2d32:	bf00      	nop
    2d34:	00002aad 	.word	0x00002aad

00002d38 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    2d38:	4b01      	ldr	r3, [pc, #4]	; (2d40 <cmd_log_backend_go+0x8>)
    2d3a:	f7ff bfb1 	b.w	2ca0 <shell_backend_cmd_execute>
    2d3e:	bf00      	nop
    2d40:	00002ab5 	.word	0x00002ab5

00002d44 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    2d44:	4b01      	ldr	r3, [pc, #4]	; (2d4c <cmd_log_backend_enable+0x8>)
    2d46:	f7ff bfab 	b.w	2ca0 <shell_backend_cmd_execute>
    2d4a:	bf00      	nop
    2d4c:	00002e85 	.word	0x00002e85

00002d50 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    2d50:	4b01      	ldr	r3, [pc, #4]	; (2d58 <cmd_log_backend_disable+0x8>)
    2d52:	f7ff bfa5 	b.w	2ca0 <shell_backend_cmd_execute>
    2d56:	bf00      	nop
    2d58:	00002f23 	.word	0x00002f23

00002d5c <cmd_log>:
	SHELL_SUBCMD_SET_END
};

static int cmd_log(const struct shell *shell, size_t argc, char **argv)
{
	if ((argc == 1) || shell_help_requested(shell)) {
    2d5c:	2901      	cmp	r1, #1
{
    2d5e:	b507      	push	{r0, r1, r2, lr}
    2d60:	4603      	mov	r3, r0
	if ((argc == 1) || shell_help_requested(shell)) {
    2d62:	d004      	beq.n	2d6e <cmd_log+0x12>
    2d64:	6881      	ldr	r1, [r0, #8]
 *
 * @return True if help has been requested.
 */
static inline bool shell_help_requested(const struct shell *shell)
{
	return shell->ctx->internal.flags.show_help;
    2d66:	f8d1 124c 	ldr.w	r1, [r1, #588]	; 0x24c
    2d6a:	0789      	lsls	r1, r1, #30
    2d6c:	d508      	bpl.n	2d80 <cmd_log+0x24>
		shell_help_print(shell, NULL, 0);
    2d6e:	2200      	movs	r2, #0
    2d70:	4618      	mov	r0, r3
    2d72:	4611      	mov	r1, r2
    2d74:	f000 fc2e 	bl	35d4 <shell_help_print>
		return 0;
    2d78:	2000      	movs	r0, #0
	}

	shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\r\n",
		      argv[0], " unknown parameter: ", argv[1]);
	return -ENOEXEC;
}
    2d7a:	b003      	add	sp, #12
    2d7c:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\r\n",
    2d80:	6853      	ldr	r3, [r2, #4]
    2d82:	9301      	str	r3, [sp, #4]
    2d84:	4b04      	ldr	r3, [pc, #16]	; (2d98 <cmd_log+0x3c>)
    2d86:	9300      	str	r3, [sp, #0]
    2d88:	6813      	ldr	r3, [r2, #0]
    2d8a:	4a04      	ldr	r2, [pc, #16]	; (2d9c <cmd_log+0x40>)
    2d8c:	2102      	movs	r1, #2
    2d8e:	f000 fb1d 	bl	33cc <shell_fprintf>
    2d92:	f06f 0007 	mvn.w	r0, #7
    2d96:	e7f0      	b.n	2d7a <cmd_log+0x1e>
    2d98:	0002d61b 	.word	0x0002d61b
    2d9c:	0002d611 	.word	0x0002d611

00002da0 <shell_state_precheck>:
	if (shell->log_backend->control_block->state
    2da0:	69c3      	ldr	r3, [r0, #28]
    2da2:	68db      	ldr	r3, [r3, #12]
{
    2da4:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    2da6:	791c      	ldrb	r4, [r3, #4]
    2da8:	b92c      	cbnz	r4, 2db6 <shell_state_precheck+0x16>
		shell_fprintf(shell, SHELL_ERROR,
    2daa:	4a04      	ldr	r2, [pc, #16]	; (2dbc <shell_state_precheck+0x1c>)
    2dac:	2102      	movs	r1, #2
    2dae:	f000 fb0d 	bl	33cc <shell_fprintf>
    2db2:	4620      	mov	r0, r4
}
    2db4:	bd10      	pop	{r4, pc}
	return true;
    2db6:	2001      	movs	r0, #1
    2db8:	e7fc      	b.n	2db4 <shell_state_precheck+0x14>
    2dba:	bf00      	nop
    2dbc:	0002d7b4 	.word	0x0002d7b4

00002dc0 <cmd_log_self_halt>:
{
    2dc0:	b510      	push	{r4, lr}
    2dc2:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    2dc4:	f7ff ffec 	bl	2da0 <shell_state_precheck>
    2dc8:	b120      	cbz	r0, 2dd4 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
    2dca:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
    2dcc:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = false;
    2dce:	685b      	ldr	r3, [r3, #4]
    2dd0:	2200      	movs	r2, #0
    2dd2:	715a      	strb	r2, [r3, #5]
}
    2dd4:	2000      	movs	r0, #0
    2dd6:	bd10      	pop	{r4, pc}

00002dd8 <cmd_log_self_go>:
{
    2dd8:	b510      	push	{r4, lr}
    2dda:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    2ddc:	f7ff ffe0 	bl	2da0 <shell_state_precheck>
    2de0:	b120      	cbz	r0, 2dec <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
    2de2:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    2de4:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = true;
    2de6:	685b      	ldr	r3, [r3, #4]
    2de8:	2201      	movs	r2, #1
    2dea:	715a      	strb	r2, [r3, #5]
}
    2dec:	2000      	movs	r0, #0
    2dee:	bd10      	pop	{r4, pc}

00002df0 <cmd_log_self_status>:
{
    2df0:	b570      	push	{r4, r5, r6, lr}
    2df2:	4604      	mov	r4, r0
    2df4:	460d      	mov	r5, r1
    2df6:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    2df8:	f7ff ffd2 	bl	2da0 <shell_state_precheck>
    2dfc:	b130      	cbz	r0, 2e0c <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
    2dfe:	69e0      	ldr	r0, [r4, #28]
    2e00:	4633      	mov	r3, r6
    2e02:	6801      	ldr	r1, [r0, #0]
    2e04:	462a      	mov	r2, r5
    2e06:	4620      	mov	r0, r4
    2e08:	f7ff fe72 	bl	2af0 <log_status>
}
    2e0c:	2000      	movs	r0, #0
    2e0e:	bd70      	pop	{r4, r5, r6, pc}

00002e10 <cmd_log_backends_list>:
{
    2e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    2e14:	1e4c      	subs	r4, r1, #1
    2e16:	2300      	movs	r3, #0
    2e18:	4261      	negs	r1, r4
    2e1a:	461a      	mov	r2, r3
    2e1c:	4161      	adcs	r1, r4
{
    2e1e:	4680      	mov	r8, r0
	int err = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    2e20:	f001 f97a 	bl	4118 <shell_cmd_precheck>
	if (err) {
    2e24:	4606      	mov	r6, r0
    2e26:	b960      	cbnz	r0, 2e42 <cmd_log_backends_list+0x32>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    2e28:	4c11      	ldr	r4, [pc, #68]	; (2e70 <cmd_log_backends_list+0x60>)
    2e2a:	4d12      	ldr	r5, [pc, #72]	; (2e74 <cmd_log_backends_list+0x64>)
		shell_fprintf(shell, SHELL_NORMAL,
    2e2c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2e78 <cmd_log_backends_list+0x68>
    2e30:	f8df a048 	ldr.w	sl, [pc, #72]	; 2e7c <cmd_log_backends_list+0x6c>
    2e34:	f8df b048 	ldr.w	fp, [pc, #72]	; 2e80 <cmd_log_backends_list+0x70>
    2e38:	1b2d      	subs	r5, r5, r4
    2e3a:	092d      	lsrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
    2e3c:	4607      	mov	r7, r0
    2e3e:	42bd      	cmp	r5, r7
    2e40:	dc03      	bgt.n	2e4a <cmd_log_backends_list+0x3a>
}
    2e42:	4630      	mov	r0, r6
    2e44:	b003      	add	sp, #12
    2e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			      backend->cb->active ? "enabled" : "disabled",
    2e4a:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    2e4c:	7953      	ldrb	r3, [r2, #5]
    2e4e:	7912      	ldrb	r2, [r2, #4]
    2e50:	2b00      	cmp	r3, #0
    2e52:	bf14      	ite	ne
    2e54:	464b      	movne	r3, r9
    2e56:	4653      	moveq	r3, sl
    2e58:	e9cd 3200 	strd	r3, r2, [sp]
    2e5c:	2100      	movs	r1, #0
    2e5e:	68a3      	ldr	r3, [r4, #8]
    2e60:	465a      	mov	r2, fp
    2e62:	4640      	mov	r0, r8
    2e64:	f000 fab2 	bl	33cc <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    2e68:	3701      	adds	r7, #1
    2e6a:	3410      	adds	r4, #16
    2e6c:	e7e7      	b.n	2e3e <cmd_log_backends_list+0x2e>
    2e6e:	bf00      	nop
    2e70:	0002d188 	.word	0x0002d188
    2e74:	0002d1b8 	.word	0x0002d1b8
    2e78:	0002d630 	.word	0x0002d630
    2e7c:	000320de 	.word	0x000320de
    2e80:	0002d638 	.word	0x0002d638

00002e84 <log_enable>:
{
    2e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e88:	4690      	mov	r8, r2
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2e8a:	f1b8 0f01 	cmp.w	r8, #1
{
    2e8e:	461d      	mov	r5, r3
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2e90:	f04f 0300 	mov.w	r3, #0
{
    2e94:	4689      	mov	r9, r1
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2e96:	461a      	mov	r2, r3
    2e98:	bf94      	ite	ls
    2e9a:	2100      	movls	r1, #0
    2e9c:	2101      	movhi	r1, #1
{
    2e9e:	4607      	mov	r7, r0
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2ea0:	f001 f93a 	bl	4118 <shell_cmd_precheck>
	if (err) {
    2ea4:	4604      	mov	r4, r0
    2ea6:	b968      	cbnz	r0, 2ec4 <log_enable+0x40>
	severity_level = severity_level_get(argv[1]);
    2ea8:	f8d5 a004 	ldr.w	sl, [r5, #4]
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    2eac:	f8df b04c 	ldr.w	fp, [pc, #76]	; 2efc <log_enable+0x78>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    2eb0:	2c05      	cmp	r4, #5
    2eb2:	d10b      	bne.n	2ecc <log_enable+0x48>
		shell_fprintf(shell, SHELL_ERROR, "Invalid severity: %s\r\n",
    2eb4:	686b      	ldr	r3, [r5, #4]
    2eb6:	4a10      	ldr	r2, [pc, #64]	; (2ef8 <log_enable+0x74>)
    2eb8:	2102      	movs	r1, #2
    2eba:	4638      	mov	r0, r7
    2ebc:	f000 fa86 	bl	33cc <shell_fprintf>
    2ec0:	f06f 0407 	mvn.w	r4, #7
}
    2ec4:	4620      	mov	r0, r4
    2ec6:	b003      	add	sp, #12
    2ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    2ecc:	2204      	movs	r2, #4
    2ece:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
    2ed2:	4650      	mov	r0, sl
    2ed4:	f002 ff97 	bl	5e06 <strncmp>
    2ed8:	4606      	mov	r6, r0
    2eda:	b108      	cbz	r0, 2ee0 <log_enable+0x5c>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    2edc:	3401      	adds	r4, #1
    2ede:	e7e7      	b.n	2eb0 <log_enable+0x2c>
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    2ee0:	9400      	str	r4, [sp, #0]
    2ee2:	f105 0308 	add.w	r3, r5, #8
    2ee6:	f1a8 0202 	sub.w	r2, r8, #2
    2eea:	4649      	mov	r1, r9
    2eec:	4638      	mov	r0, r7
    2eee:	f7ff fe65 	bl	2bbc <filters_set>
	return 0;
    2ef2:	4634      	mov	r4, r6
    2ef4:	e7e6      	b.n	2ec4 <log_enable+0x40>
    2ef6:	bf00      	nop
    2ef8:	0002d6bc 	.word	0x0002d6bc
    2efc:	0002d764 	.word	0x0002d764

00002f00 <cmd_log_self_enable>:
{
    2f00:	b570      	push	{r4, r5, r6, lr}
    2f02:	4604      	mov	r4, r0
    2f04:	460d      	mov	r5, r1
    2f06:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    2f08:	f7ff ff4a 	bl	2da0 <shell_state_precheck>
    2f0c:	b140      	cbz	r0, 2f20 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    2f0e:	69e0      	ldr	r0, [r4, #28]
    2f10:	4633      	mov	r3, r6
    2f12:	462a      	mov	r2, r5
    2f14:	6801      	ldr	r1, [r0, #0]
    2f16:	4620      	mov	r0, r4
}
    2f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    2f1c:	f7ff bfb2 	b.w	2e84 <log_enable>
}
    2f20:	bd70      	pop	{r4, r5, r6, pc}

00002f22 <log_disable>:
{
    2f22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2f26:	4615      	mov	r5, r2
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2f28:	2d01      	cmp	r5, #1
{
    2f2a:	4698      	mov	r8, r3
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2f2c:	f04f 0300 	mov.w	r3, #0
{
    2f30:	460f      	mov	r7, r1
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2f32:	461a      	mov	r2, r3
    2f34:	bf94      	ite	ls
    2f36:	2100      	movls	r1, #0
    2f38:	2101      	movhi	r1, #1
{
    2f3a:	4606      	mov	r6, r0
	int err = shell_cmd_precheck(shell, (argc > 1), NULL, 0);
    2f3c:	f001 f8ec 	bl	4118 <shell_cmd_precheck>
	if (err) {
    2f40:	4604      	mov	r4, r0
    2f42:	b938      	cbnz	r0, 2f54 <log_disable+0x32>
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    2f44:	9000      	str	r0, [sp, #0]
    2f46:	f108 0304 	add.w	r3, r8, #4
    2f4a:	1e6a      	subs	r2, r5, #1
    2f4c:	4639      	mov	r1, r7
    2f4e:	4630      	mov	r0, r6
    2f50:	f7ff fe34 	bl	2bbc <filters_set>
}
    2f54:	4620      	mov	r0, r4
    2f56:	b002      	add	sp, #8
    2f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002f5c <cmd_log_self_disable>:
{
    2f5c:	b570      	push	{r4, r5, r6, lr}
    2f5e:	4604      	mov	r4, r0
    2f60:	460d      	mov	r5, r1
    2f62:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    2f64:	f7ff ff1c 	bl	2da0 <shell_state_precheck>
    2f68:	b140      	cbz	r0, 2f7c <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    2f6a:	69e0      	ldr	r0, [r4, #28]
    2f6c:	4633      	mov	r3, r6
    2f6e:	462a      	mov	r2, r5
    2f70:	6801      	ldr	r1, [r0, #0]
    2f72:	4620      	mov	r0, r4
}
    2f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    2f78:	f7ff bfd3 	b.w	2f22 <log_disable>
}
    2f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002f80 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	panic_mode = 0;
    2f80:	4b03      	ldr	r3, [pc, #12]	; (2f90 <log_backend_rtt_init+0x10>)
    2f82:	2200      	movs	r2, #0
    2f84:	601a      	str	r2, [r3, #0]
	line_pos = line_buf;
    2f86:	4b03      	ldr	r3, [pc, #12]	; (2f94 <log_backend_rtt_init+0x14>)
    2f88:	4a03      	ldr	r2, [pc, #12]	; (2f98 <log_backend_rtt_init+0x18>)
    2f8a:	601a      	str	r2, [r3, #0]
}
    2f8c:	4770      	bx	lr
    2f8e:	bf00      	nop
    2f90:	2000050c 	.word	0x2000050c
    2f94:	20000500 	.word	0x20000500
    2f98:	20000468 	.word	0x20000468

00002f9c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = 1;
    2f9c:	4b01      	ldr	r3, [pc, #4]	; (2fa4 <panic+0x8>)
    2f9e:	2201      	movs	r2, #1
    2fa0:	601a      	str	r2, [r3, #0]
}
    2fa2:	4770      	bx	lr
    2fa4:	2000050c 	.word	0x2000050c

00002fa8 <put>:
{
    2fa8:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2faa:	4608      	mov	r0, r1
{
    2fac:	460c      	mov	r4, r1
	log_msg_get(msg);
    2fae:	f7ff f913 	bl	21d8 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    2fb2:	4621      	mov	r1, r4
    2fb4:	4804      	ldr	r0, [pc, #16]	; (2fc8 <put+0x20>)
    2fb6:	220f      	movs	r2, #15
    2fb8:	f7ff fa44 	bl	2444 <log_output_msg_process>
	log_msg_put(msg);
    2fbc:	4620      	mov	r0, r4
}
    2fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    2fc2:	f7ff b995 	b.w	22f0 <log_msg_put>
    2fc6:	bf00      	nop
    2fc8:	0002da70 	.word	0x0002da70

00002fcc <msg_out>:
{
    2fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (panic_mode) {
    2fd0:	4b41      	ldr	r3, [pc, #260]	; (30d8 <msg_out+0x10c>)
    2fd2:	681b      	ldr	r3, [r3, #0]
{
    2fd4:	4680      	mov	r8, r0
    2fd6:	4689      	mov	r9, r1
	if (panic_mode) {
    2fd8:	b953      	cbnz	r3, 2ff0 <msg_out+0x24>
    2fda:	4e40      	ldr	r6, [pc, #256]	; (30dc <msg_out+0x110>)
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    2fdc:	f8df a110 	ldr.w	sl, [pc, #272]	; 30f0 <msg_out+0x124>
    2fe0:	4605      	mov	r5, r0
	for (pos = data; pos < data + length; pos++) {
    2fe2:	eb08 0309 	add.w	r3, r8, r9
    2fe6:	429d      	cmp	r5, r3
    2fe8:	d310      	bcc.n	300c <msg_out+0x40>
	return (int) (pos - data);
    2fea:	eba5 0008 	sub.w	r0, r5, r8
    2fee:	e00b      	b.n	3008 <msg_out+0x3c>
	written = SEGGER_RTT_WriteNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER, data,
    2ff0:	460a      	mov	r2, r1
    2ff2:	4601      	mov	r1, r0
    2ff4:	2000      	movs	r0, #0
    2ff6:	f7fe fd7d 	bl	1af4 <SEGGER_RTT_WriteNoLock>
    2ffa:	4605      	mov	r5, r0

static void log_backend_rtt_flush(void)
{
	while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER)) {
    2ffc:	2000      	movs	r0, #0
    2ffe:	f7fe fdad 	bl	1b5c <SEGGER_RTT_HasDataUp>
    3002:	2800      	cmp	r0, #0
    3004:	d1fa      	bne.n	2ffc <msg_out+0x30>
	return written;
    3006:	4628      	mov	r0, r5
}
    3008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (line_out(*pos)) {
    300c:	f815 3b01 	ldrb.w	r3, [r5], #1
    3010:	6832      	ldr	r2, [r6, #0]
	if (data == '\r') {
    3012:	2b0d      	cmp	r3, #13
    3014:	d15a      	bne.n	30cc <msg_out+0x100>
	if (drop_cnt > 0 && !drop_warn) {
    3016:	4f32      	ldr	r7, [pc, #200]	; (30e0 <msg_out+0x114>)
	*line_pos = '\r';
    3018:	7013      	strb	r3, [r2, #0]
	if (drop_cnt > 0 && !drop_warn) {
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	4c31      	ldr	r4, [pc, #196]	; (30e4 <msg_out+0x118>)
    301e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 30f4 <msg_out+0x128>
    3022:	2b00      	cmp	r3, #0
    3024:	dd13      	ble.n	304e <msg_out+0x82>
    3026:	f8db 3000 	ldr.w	r3, [fp]
    302a:	b983      	cbnz	r3, 304e <msg_out+0x82>
		memmove(line_buf + DROP_MSG_LEN, line_buf,
    302c:	1b12      	subs	r2, r2, r4
    302e:	4621      	mov	r1, r4
    3030:	f104 0017 	add.w	r0, r4, #23
    3034:	f002 ff11 	bl	5e5a <memmove>
		memcpy(line_buf, drop_msg, DROP_MSG_LEN);
    3038:	2217      	movs	r2, #23
    303a:	492b      	ldr	r1, [pc, #172]	; (30e8 <msg_out+0x11c>)
    303c:	4620      	mov	r0, r4
    303e:	f002 ff23 	bl	5e88 <memcpy>
		line_pos += DROP_MSG_LEN;
    3042:	6833      	ldr	r3, [r6, #0]
    3044:	3317      	adds	r3, #23
    3046:	6033      	str	r3, [r6, #0]
		drop_warn = 1;
    3048:	2301      	movs	r3, #1
    304a:	f8cb 3000 	str.w	r3, [fp]
	if (drop_warn) {
    304e:	f8db 3000 	ldr.w	r3, [fp]
    3052:	b163      	cbz	r3, 306e <msg_out+0xa2>
		int cnt = min(drop_cnt, DROP_MAX);
    3054:	683b      	ldr	r3, [r7, #0]
    3056:	2b63      	cmp	r3, #99	; 0x63
    3058:	461a      	mov	r2, r3
    305a:	bfa8      	it	ge
    305c:	2263      	movge	r2, #99	; 0x63
		if (cnt < 10) {
    305e:	2b09      	cmp	r3, #9
    3060:	dc23      	bgt.n	30aa <msg_out+0xde>
			line_buf[DROP_MSG_LEN - 2] = ' ';
    3062:	2120      	movs	r1, #32
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    3064:	f102 0330 	add.w	r3, r2, #48	; 0x30
			line_buf[DROP_MSG_LEN - 2] = ' ';
    3068:	7561      	strb	r1, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    306a:	7523      	strb	r3, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = ' ';
    306c:	74e1      	strb	r1, [r4, #19]

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    306e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3072:	481e      	ldr	r0, [pc, #120]	; (30ec <msg_out+0x120>)
    3074:	f028 fd6e 	bl	2bb54 <_impl_k_mutex_lock>
					     line_buf, line_pos - line_buf + 1);
    3078:	6832      	ldr	r2, [r6, #0]
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    307a:	491a      	ldr	r1, [pc, #104]	; (30e4 <msg_out+0x118>)
					     line_buf, line_pos - line_buf + 1);
    307c:	f1c4 0401 	rsb	r4, r4, #1
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3080:	4422      	add	r2, r4
    3082:	2000      	movs	r0, #0
    3084:	f7fe fcee 	bl	1a64 <SEGGER_RTT_WriteSkipNoLock>
    3088:	4604      	mov	r4, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    308a:	4818      	ldr	r0, [pc, #96]	; (30ec <msg_out+0x120>)
    308c:	f028 fdc4 	bl	2bc18 <_impl_k_mutex_unlock>
	if (!ret) {
    3090:	b9bc      	cbnz	r4, 30c2 <msg_out+0xf6>
		drop_cnt++;
    3092:	683b      	ldr	r3, [r7, #0]
    3094:	3301      	adds	r3, #1
    3096:	603b      	str	r3, [r7, #0]
		line_pos = drop_cnt > 0 ? line_buf + DROP_MSG_LEN : line_buf;
    3098:	4b12      	ldr	r3, [pc, #72]	; (30e4 <msg_out+0x118>)
    309a:	6839      	ldr	r1, [r7, #0]
    309c:	f103 0217 	add.w	r2, r3, #23
    30a0:	2900      	cmp	r1, #0
    30a2:	bfc8      	it	gt
    30a4:	4613      	movgt	r3, r2
    30a6:	6033      	str	r3, [r6, #0]
    30a8:	e79b      	b.n	2fe2 <msg_out+0x16>
			line_buf[DROP_MSG_LEN - 2] = (u8_t) ('0' + cnt % 10);
    30aa:	230a      	movs	r3, #10
    30ac:	fb92 f1f3 	sdiv	r1, r2, r3
    30b0:	fb03 2311 	mls	r3, r3, r1, r2
    30b4:	3330      	adds	r3, #48	; 0x30
    30b6:	7563      	strb	r3, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    30b8:	3130      	adds	r1, #48	; 0x30
			line_buf[DROP_MSG_LEN - 4] = '>';
    30ba:	233e      	movs	r3, #62	; 0x3e
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    30bc:	7521      	strb	r1, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = '>';
    30be:	74e3      	strb	r3, [r4, #19]
    30c0:	e7d5      	b.n	306e <msg_out+0xa2>
	drop_cnt = 0;
    30c2:	2300      	movs	r3, #0
    30c4:	603b      	str	r3, [r7, #0]
	drop_warn = 0;
    30c6:	f8cb 3000 	str.w	r3, [fp]
    30ca:	e7e5      	b.n	3098 <msg_out+0xcc>
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    30cc:	4552      	cmp	r2, sl
		*line_pos++ = data;
    30ce:	bf3e      	ittt	cc
    30d0:	1c51      	addcc	r1, r2, #1
    30d2:	6031      	strcc	r1, [r6, #0]
    30d4:	7013      	strbcc	r3, [r2, #0]
    30d6:	e784      	b.n	2fe2 <msg_out+0x16>
    30d8:	2000050c 	.word	0x2000050c
    30dc:	20000500 	.word	0x20000500
    30e0:	20000460 	.word	0x20000460
    30e4:	20000468 	.word	0x20000468
    30e8:	0002da80 	.word	0x0002da80
    30ec:	2000d8d4 	.word	0x2000d8d4
    30f0:	200004fe 	.word	0x200004fe
    30f4:	20000464 	.word	0x20000464

000030f8 <isspace>:
	return c == ' ' || ((unsigned)c-'\t') < 5;
    30f8:	2820      	cmp	r0, #32
    30fa:	d005      	beq.n	3108 <isspace+0x10>
    30fc:	3809      	subs	r0, #9
    30fe:	2804      	cmp	r0, #4
    3100:	bf8c      	ite	hi
    3102:	2000      	movhi	r0, #0
    3104:	2001      	movls	r0, #1
    3106:	4770      	bx	lr
    3108:	2001      	movs	r0, #1
}
    310a:	4770      	bx	lr

0000310c <shell_raw_fprintf>:
#define SHELL_DEFAULT_TERMINAL_WIDTH	(80u) /* Default PuTTY width. */
#define SHELL_DEFAULT_TERMINAL_HEIGHT	(24u) /* Default PuTTY height. */

static inline void shell_raw_fprintf(const struct shell_fprintf *const ctx,
				     const char *fmt, ...)
{
    310c:	b40e      	push	{r1, r2, r3}
    310e:	b503      	push	{r0, r1, lr}
    3110:	aa03      	add	r2, sp, #12
    3112:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;

	va_start(args, fmt);
    3116:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    3118:	f001 f82c 	bl	4174 <shell_fprintf_fmt>
	va_end(args);
}
    311c:	b002      	add	sp, #8
    311e:	f85d eb04 	ldr.w	lr, [sp], #4
    3122:	b003      	add	sp, #12
    3124:	4770      	bx	lr

00003126 <shell_strlen>:
void shell_multiline_data_calc(struct shell_multiline_cons *cons,
				   u16_t buff_pos, u16_t buff_len);

static inline size_t shell_strlen(const char *str)
{
	return str == NULL ? 0 : strlen(str);
    3126:	b108      	cbz	r0, 312c <shell_strlen+0x6>
    3128:	f002 be58 	b.w	5ddc <strlen>
}
    312c:	4770      	bx	lr
	...

00003130 <cmd_get>:
 *			stored.
 */
static void cmd_get(const struct shell_cmd_entry *command, size_t lvl,
		    size_t idx, const struct shell_static_entry **entry,
		    struct shell_static_entry *d_entry)
{
    3130:	b570      	push	{r4, r5, r6, lr}
    3132:	9c04      	ldr	r4, [sp, #16]
    3134:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	if (lvl == SHELL_CMD_ROOT_LVL) {
    3136:	b961      	cbnz	r1, 3152 <cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
    3138:	4b10      	ldr	r3, [pc, #64]	; (317c <cmd_get+0x4c>)
    313a:	4911      	ldr	r1, [pc, #68]	; (3180 <cmd_get+0x50>)
    313c:	1ac9      	subs	r1, r1, r3
		if (idx < shell_root_cmd_count()) {
    313e:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    3142:	d204      	bcs.n	314e <cmd_get+0x1e>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
    3144:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    3148:	6853      	ldr	r3, [r2, #4]

	if (command->is_dynamic) {
		command->u.dynamic_get(idx, d_entry);
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
	} else {
		*entry = (command->u.entry[idx].syntax != NULL) ?
    314a:	602b      	str	r3, [r5, #0]
    314c:	e00e      	b.n	316c <cmd_get+0x3c>
			*entry = NULL;
    314e:	2300      	movs	r3, #0
    3150:	e7fb      	b.n	314a <cmd_get+0x1a>
	if (command == NULL) {
    3152:	2800      	cmp	r0, #0
    3154:	d0fb      	beq.n	314e <cmd_get+0x1e>
	if (command->is_dynamic) {
    3156:	7803      	ldrb	r3, [r0, #0]
    3158:	6846      	ldr	r6, [r0, #4]
    315a:	b143      	cbz	r3, 316e <cmd_get+0x3e>
		command->u.dynamic_get(idx, d_entry);
    315c:	4621      	mov	r1, r4
    315e:	4610      	mov	r0, r2
    3160:	47b0      	blx	r6
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
    3162:	6823      	ldr	r3, [r4, #0]
    3164:	2b00      	cmp	r3, #0
    3166:	bf08      	it	eq
    3168:	2400      	moveq	r4, #0
    316a:	602c      	str	r4, [r5, #0]
				&command->u.entry[idx] : NULL;
	}
}
    316c:	bd70      	pop	{r4, r5, r6, pc}
		*entry = (command->u.entry[idx].syntax != NULL) ?
    316e:	0112      	lsls	r2, r2, #4
    3170:	18b3      	adds	r3, r6, r2
				&command->u.entry[idx] : NULL;
    3172:	58b2      	ldr	r2, [r6, r2]
    3174:	2a00      	cmp	r2, #0
    3176:	bf08      	it	eq
    3178:	2300      	moveq	r3, #0
    317a:	e7e6      	b.n	314a <cmd_get+0x1a>
    317c:	0002d1b8 	.word	0x0002d1b8
    3180:	0002d1f0 	.word	0x0002d1f0

00003184 <cursor_next_line_move.isra.14>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void cursor_next_line_move(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    3184:	4901      	ldr	r1, [pc, #4]	; (318c <cursor_next_line_move.isra.14+0x8>)
    3186:	f7ff bfc1 	b.w	310c <shell_raw_fprintf>
    318a:	bf00      	nop
    318c:	0002d656 	.word	0x0002d656

00003190 <vt100_color_set>:

static void vt100_color_set(const struct shell *shell,
			    enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
    3190:	6883      	ldr	r3, [r0, #8]
{
    3192:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
    3194:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    3198:	428a      	cmp	r2, r1
    319a:	d012      	beq.n	31c2 <vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    319c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    31a0:	6940      	ldr	r0, [r0, #20]

	if (color != SHELL_NORMAL) {
    31a2:	b189      	cbz	r1, 31c8 <vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
    31a4:	4b09      	ldr	r3, [pc, #36]	; (31cc <vt100_color_set+0x3c>)
    31a6:	9300      	str	r3, [sp, #0]
    31a8:	2333      	movs	r3, #51	; 0x33
    31aa:	f88d 3004 	strb.w	r3, [sp, #4]
    31ae:	312f      	adds	r1, #47	; 0x2f
    31b0:	236d      	movs	r3, #109	; 0x6d
    31b2:	f88d 1005 	strb.w	r1, [sp, #5]
    31b6:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    31ba:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    31bc:	4904      	ldr	r1, [pc, #16]	; (31d0 <vt100_color_set+0x40>)
    31be:	f7ff ffa5 	bl	310c <shell_raw_fprintf>
	}
}
    31c2:	b003      	add	sp, #12
    31c4:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    31c8:	4a02      	ldr	r2, [pc, #8]	; (31d4 <vt100_color_set+0x44>)
    31ca:	e7f7      	b.n	31bc <vt100_color_set+0x2c>
    31cc:	3b315b1b 	.word	0x3b315b1b
    31d0:	0002db78 	.word	0x0002db78
    31d4:	0002daac 	.word	0x0002daac

000031d8 <shell_transport_evt_handler>:
	return ret_val;
}

static void shell_transport_evt_handler(enum shell_transport_evt evt_type,
				      void *context)
{
    31d8:	688b      	ldr	r3, [r1, #8]
	struct shell *shell = (struct shell *)context;
	struct k_poll_signal *signal;

	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    31da:	b920      	cbnz	r0, 31e6 <shell_transport_evt_handler+0xe>
    31dc:	f503 7014 	add.w	r0, r3, #592	; 0x250

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    31e0:	2100      	movs	r1, #0
    31e2:	f029 be5b 	b.w	2ce9c <_impl_k_poll_signal>
    31e6:	f503 7018 	add.w	r0, r3, #608	; 0x260
    31ea:	e7f9      	b.n	31e0 <shell_transport_evt_handler+0x8>

000031ec <shell_write>:
{
    31ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    31f0:	4606      	mov	r6, r0
    31f2:	460f      	mov	r7, r1
    31f4:	4614      	mov	r4, r2
	size_t offset = 0;
    31f6:	2500      	movs	r5, #0
	while (length) {
    31f8:	b914      	cbnz	r4, 3200 <shell_write+0x14>
}
    31fa:	b002      	add	sp, #8
    31fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    3200:	6870      	ldr	r0, [r6, #4]
    3202:	6803      	ldr	r3, [r0, #0]
    3204:	4622      	mov	r2, r4
    3206:	f8d3 800c 	ldr.w	r8, [r3, #12]
    320a:	1979      	adds	r1, r7, r5
    320c:	ab01      	add	r3, sp, #4
    320e:	47c0      	blx	r8
		offset += tmp_cnt;
    3210:	9b01      	ldr	r3, [sp, #4]
    3212:	441d      	add	r5, r3
		length -= tmp_cnt;
    3214:	1ae4      	subs	r4, r4, r3
		if (tmp_cnt == 0 &&
    3216:	2b00      	cmp	r3, #0
    3218:	d1ee      	bne.n	31f8 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    321a:	68b0      	ldr	r0, [r6, #8]
		if (tmp_cnt == 0 &&
    321c:	7803      	ldrb	r3, [r0, #0]
    321e:	2b03      	cmp	r3, #3
    3220:	d0ea      	beq.n	31f8 <shell_write+0xc>
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    3222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3226:	2101      	movs	r1, #1
    3228:	f500 7029 	add.w	r0, r0, #676	; 0x2a4
    322c:	f029 fd9a 	bl	2cd64 <_impl_k_poll>
    3230:	e7e2      	b.n	31f8 <shell_write+0xc>

00003232 <formatted_text_print.constprop.28>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    3232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3236:	4605      	mov	r5, r0
    3238:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    323a:	460e      	mov	r6, r1
    323c:	2900      	cmp	r1, #0
    323e:	d061      	beq.n	3304 <formatted_text_print.constprop.28+0xd2>
    3240:	460b      	mov	r3, r1
    3242:	1b9f      	subs	r7, r3, r6
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    3244:	f813 0b01 	ldrb.w	r0, [r3], #1
    3248:	f7ff ff56 	bl	30f8 <isspace>
    324c:	2800      	cmp	r0, #0
    324e:	d1f8      	bne.n	3242 <formatted_text_print.constprop.28+0x10>
	}

	while (true) {
		size_t idx = 0;

		length = shell_strlen(str) - offset;
    3250:	4630      	mov	r0, r6
    3252:	f7ff ff68 	bl	3126 <shell_strlen>

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    3256:	68ab      	ldr	r3, [r5, #8]
    3258:	8bda      	ldrh	r2, [r3, #30]
		length = shell_strlen(str) - offset;
    325a:	1bc0      	subs	r0, r0, r7
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    325c:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
    3260:	4298      	cmp	r0, r3
			for (idx = 0; idx < length; idx++) {
    3262:	f04f 0400 	mov.w	r4, #0
    3266:	eb06 0907 	add.w	r9, r6, r7
		if (length <=
    326a:	d90f      	bls.n	328c <formatted_text_print.constprop.28+0x5a>
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    326c:	f819 1004 	ldrb.w	r1, [r9, r4]
    3270:	4608      	mov	r0, r1
    3272:	f7ff ff41 	bl	30f8 <isspace>
    3276:	b110      	cbz	r0, 327e <formatted_text_print.constprop.28+0x4c>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    3278:	290a      	cmp	r1, #10
    327a:	d02a      	beq.n	32d2 <formatted_text_print.constprop.28+0xa0>
    327c:	4623      	mov	r3, r4
					break;
				}
			}

			if ((idx + terminal_offset) >=
    327e:	eb08 0104 	add.w	r1, r8, r4
    3282:	4291      	cmp	r1, r2
    3284:	d224      	bcs.n	32d0 <formatted_text_print.constprop.28+0x9e>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    3286:	3401      	adds	r4, #1
    3288:	e7f0      	b.n	326c <formatted_text_print.constprop.28+0x3a>
			for (idx = 0; idx < length; idx++) {
    328a:	3401      	adds	r4, #1
    328c:	42a0      	cmp	r0, r4
    328e:	d016      	beq.n	32be <formatted_text_print.constprop.28+0x8c>
				if (*(str + offset + idx) == '\n') {
    3290:	f819 3004 	ldrb.w	r3, [r9, r4]
    3294:	2b0a      	cmp	r3, #10
    3296:	eb07 0a04 	add.w	sl, r7, r4
    329a:	d1f6      	bne.n	328a <formatted_text_print.constprop.28+0x58>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    329c:	6968      	ldr	r0, [r5, #20]
    329e:	f000 ff5d 	bl	415c <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
    32a2:	4649      	mov	r1, r9
    32a4:	4622      	mov	r2, r4
    32a6:	4628      	mov	r0, r5
    32a8:	f7ff ffa0 	bl	31ec <shell_write>
					cursor_next_line_move(shell);
    32ac:	6968      	ldr	r0, [r5, #20]
    32ae:	f7ff ff69 	bl	3184 <cursor_next_line_move.isra.14>
					shell_op_cursor_horiz_move(shell,
    32b2:	4641      	mov	r1, r8
    32b4:	4628      	mov	r0, r5
					offset += idx + 1;
    32b6:	f10a 0701 	add.w	r7, sl, #1
					shell_op_cursor_horiz_move(shell,
    32ba:	f001 f8e7 	bl	448c <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    32be:	6968      	ldr	r0, [r5, #20]
    32c0:	19f1      	adds	r1, r6, r7
    32c2:	f7ff ff23 	bl	310c <shell_raw_fprintf>

		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
    32c6:	6968      	ldr	r0, [r5, #20]
}
    32c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	cursor_next_line_move(shell);
    32cc:	f7ff bf5a 	b.w	3184 <cursor_next_line_move.isra.14>
			if ((idx + terminal_offset) >=
    32d0:	461c      	mov	r4, r3
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    32d2:	6968      	ldr	r0, [r5, #20]
    32d4:	f000 ff42 	bl	415c <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
    32d8:	4622      	mov	r2, r4
    32da:	4649      	mov	r1, r9
    32dc:	4628      	mov	r0, r5
    32de:	f7ff ff85 	bl	31ec <shell_write>
		offset += length;
    32e2:	443c      	add	r4, r7
    32e4:	4434      	add	r4, r6
    32e6:	1ba7      	subs	r7, r4, r6
		while (isspace((int) (*(str + offset)))) {
    32e8:	f814 0b01 	ldrb.w	r0, [r4], #1
    32ec:	f7ff ff04 	bl	30f8 <isspace>
    32f0:	2800      	cmp	r0, #0
    32f2:	d1f8      	bne.n	32e6 <formatted_text_print.constprop.28+0xb4>
		cursor_next_line_move(shell);
    32f4:	6968      	ldr	r0, [r5, #20]
    32f6:	f7ff ff45 	bl	3184 <cursor_next_line_move.isra.14>
		shell_op_cursor_horiz_move(shell, terminal_offset);
    32fa:	4641      	mov	r1, r8
    32fc:	4628      	mov	r0, r5
    32fe:	f001 f8c5 	bl	448c <shell_op_cursor_horiz_move>
    3302:	e7a5      	b.n	3250 <formatted_text_print.constprop.28+0x1e>
}
    3304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003308 <shell_init>:
{
    3308:	b570      	push	{r4, r5, r6, lr}
    330a:	4604      	mov	r4, r0
	err = shell->iface->api->init(shell->iface, p_config,
    330c:	6840      	ldr	r0, [r0, #4]
    330e:	4a2a      	ldr	r2, [pc, #168]	; (33b8 <shell_init+0xb0>)
{
    3310:	461e      	mov	r6, r3
	err = shell->iface->api->init(shell->iface, p_config,
    3312:	6803      	ldr	r3, [r0, #0]
{
    3314:	b086      	sub	sp, #24
	err = shell->iface->api->init(shell->iface, p_config,
    3316:	681d      	ldr	r5, [r3, #0]
    3318:	4623      	mov	r3, r4
    331a:	47a8      	blx	r5
	if (err != 0) {
    331c:	4605      	mov	r5, r0
    331e:	2800      	cmp	r0, #0
    3320:	d146      	bne.n	33b0 <shell_init+0xa8>
	shell_history_init(shell->history);
    3322:	68e0      	ldr	r0, [r4, #12]
    3324:	f001 fe10 	bl	4f48 <shell_history_init>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
    3328:	f44f 7238 	mov.w	r2, #736	; 0x2e0
    332c:	4629      	mov	r1, r5
    332e:	68a0      	ldr	r0, [r4, #8]
    3330:	f002 fdd7 	bl	5ee2 <memset>
		shell->ctx->internal.flags.mode_delete = 1;
    3334:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->prompt);
    3336:	6820      	ldr	r0, [r4, #0]
		shell->ctx->internal.flags.mode_delete = 1;
    3338:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    333c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3340:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
		shell->stats->log_lost_cnt = 0;
    3344:	69a2      	ldr	r2, [r4, #24]
    3346:	6015      	str	r5, [r2, #0]
	shell->ctx->internal.flags.tx_rdy = 1;
    3348:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    334c:	f042 0220 	orr.w	r2, r2, #32
    3350:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	shell->ctx->internal.flags.echo = CONFIG_SHELL_ECHO_STATUS;
    3354:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    3358:	f042 0208 	orr.w	r2, r2, #8
    335c:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	shell->ctx->state = SHELL_STATE_INITIALIZED;
    3360:	2201      	movs	r2, #1
    3362:	701a      	strb	r2, [r3, #0]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    3364:	4a15      	ldr	r2, [pc, #84]	; (33bc <shell_init+0xb4>)
    3366:	61da      	str	r2, [r3, #28]
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->prompt);
    3368:	f7ff fedd 	bl	3126 <shell_strlen>
    336c:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.use_colors =
    336e:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->prompt);
    3372:	f883 0020 	strb.w	r0, [r3, #32]
	shell->ctx->internal.flags.use_colors =
    3376:	f042 0204 	orr.w	r2, r2, #4
    337a:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
	if (log_backend) {
    337e:	b126      	cbz	r6, 338a <shell_init+0x82>
			shell_log_backend_enable(shell->log_backend,
    3380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3382:	69e0      	ldr	r0, [r4, #28]
    3384:	4621      	mov	r1, r4
    3386:	f001 fe40 	bl	500a <shell_log_backend_enable>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    338a:	2300      	movs	r3, #0
    338c:	f06f 0201 	mvn.w	r2, #1
    3390:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3394:	e9cd 3304 	strd	r3, r3, [sp, #16]
    3398:	e9cd 4300 	strd	r4, r3, [sp]
    339c:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
    33a0:	4b07      	ldr	r3, [pc, #28]	; (33c0 <shell_init+0xb8>)
    33a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    33a6:	f029 f8bb 	bl	2c520 <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    33aa:	4906      	ldr	r1, [pc, #24]	; (33c4 <shell_init+0xbc>)
    33ac:	f029 f886 	bl	2c4bc <_impl_k_thread_name_set>
}
    33b0:	4628      	mov	r0, r5
    33b2:	b006      	add	sp, #24
    33b4:	bd70      	pop	{r4, r5, r6, pc}
    33b6:	bf00      	nop
    33b8:	000031d9 	.word	0x000031d9
    33bc:	00500018 	.word	0x00500018
    33c0:	00003fd5 	.word	0x00003fd5
    33c4:	00034a97 	.word	0x00034a97

000033c8 <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
    33c8:	f7ff bf10 	b.w	31ec <shell_write>

000033cc <shell_fprintf>:
{
    33cc:	b40c      	push	{r2, r3}
    33ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    33d0:	ab08      	add	r3, sp, #32
    33d2:	460e      	mov	r6, r1
    33d4:	f853 5b04 	ldr.w	r5, [r3], #4
	    shell->ctx->internal.flags.use_colors &&
    33d8:	6881      	ldr	r1, [r0, #8]
	va_start(args, p_fmt);
    33da:	9301      	str	r3, [sp, #4]
	    shell->ctx->internal.flags.use_colors &&
    33dc:	f8d1 324c 	ldr.w	r3, [r1, #588]	; 0x24c
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    33e0:	075b      	lsls	r3, r3, #29
{
    33e2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    33e4:	d538      	bpl.n	3458 <shell_fprintf+0x8c>
	    shell->ctx->internal.flags.use_colors &&
    33e6:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    33ea:	42b3      	cmp	r3, r6
    33ec:	d034      	beq.n	3458 <shell_fprintf+0x8c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
    33ee:	2202      	movs	r2, #2
    33f0:	3122      	adds	r1, #34	; 0x22
    33f2:	4668      	mov	r0, sp
    33f4:	f002 fd48 	bl	5e88 <memcpy>
		vt100_color_set(shell, color);
    33f8:	4631      	mov	r1, r6
    33fa:	4620      	mov	r0, r4
    33fc:	f7ff fec8 	bl	3190 <vt100_color_set>
		shell_fprintf_fmt(shell->fprintf_ctx, p_fmt, args);
    3400:	9a01      	ldr	r2, [sp, #4]
    3402:	6960      	ldr	r0, [r4, #20]
    3404:	4629      	mov	r1, r5
    3406:	f000 feb5 	bl	4174 <shell_fprintf_fmt>
	vt100_color_set(shell, color->col);
    340a:	f89d 1000 	ldrb.w	r1, [sp]
    340e:	4620      	mov	r0, r4
    3410:	f7ff febe 	bl	3190 <vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    3414:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    3418:	b1cb      	cbz	r3, 344e <shell_fprintf+0x82>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    341a:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    341c:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
    3420:	4299      	cmp	r1, r3
    3422:	d014      	beq.n	344e <shell_fprintf+0x82>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
    3424:	f645 311b 	movw	r1, #23323	; 0x5b1b
    3428:	f8ad 1008 	strh.w	r1, [sp, #8]
    342c:	2134      	movs	r1, #52	; 0x34
    342e:	f88d 100a 	strb.w	r1, [sp, #10]
    3432:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    3436:	f88d 100b 	strb.w	r1, [sp, #11]
    343a:	216d      	movs	r1, #109	; 0x6d
    343c:	f8ad 100c 	strh.w	r1, [sp, #12]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    3440:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
    3444:	4907      	ldr	r1, [pc, #28]	; (3464 <shell_fprintf+0x98>)
    3446:	6960      	ldr	r0, [r4, #20]
    3448:	aa02      	add	r2, sp, #8
    344a:	f7ff fe5f 	bl	310c <shell_raw_fprintf>
}
    344e:	b004      	add	sp, #16
    3450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3454:	b002      	add	sp, #8
    3456:	4770      	bx	lr
		shell_fprintf_fmt(shell->fprintf_ctx, p_fmt, args);
    3458:	9a01      	ldr	r2, [sp, #4]
    345a:	6960      	ldr	r0, [r4, #20]
    345c:	4629      	mov	r1, r5
    345e:	f000 fe89 	bl	4174 <shell_fprintf_fmt>
}
    3462:	e7f4      	b.n	344e <shell_fprintf+0x82>
    3464:	0002db78 	.word	0x0002db78

00003468 <history_handle>:
{
    3468:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (EXIT_HISTORY(shell)) {
    346a:	6882      	ldr	r2, [r0, #8]
    346c:	f8d2 324c 	ldr.w	r3, [r2, #588]	; 0x24c
    3470:	061b      	lsls	r3, r3, #24
{
    3472:	4604      	mov	r4, r0
    3474:	460d      	mov	r5, r1
	if (EXIT_HISTORY(shell)) {
    3476:	d508      	bpl.n	348a <history_handle+0x22>
		EXIT_HISTORY_CLEAR(shell);
    3478:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    347c:	68c0      	ldr	r0, [r0, #12]
    347e:	f36f 13c7 	bfc	r3, #7, #1
    3482:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
		shell_history_mode_exit(shell->history);
    3486:	f001 fcec 	bl	4e62 <shell_history_mode_exit>
	if (!shell_history_active(shell->history)) {
    348a:	68e3      	ldr	r3, [r4, #12]
    348c:	68db      	ldr	r3, [r3, #12]
    348e:	b97b      	cbnz	r3, 34b0 <history_handle+0x48>
		if (up) {
    3490:	2d00      	cmp	r5, #0
    3492:	d037      	beq.n	3504 <history_handle+0x9c>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
    3494:	68a0      	ldr	r0, [r4, #8]
    3496:	302c      	adds	r0, #44	; 0x2c
    3498:	f7ff fe45 	bl	3126 <shell_strlen>
			if (cmd_len) {
    349c:	b280      	uxth	r0, r0
    349e:	68a3      	ldr	r3, [r4, #8]
    34a0:	2800      	cmp	r0, #0
    34a2:	d031      	beq.n	3508 <history_handle+0xa0>
				strcpy(shell->ctx->temp_buff,
    34a4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    34a8:	f503 7096 	add.w	r0, r3, #300	; 0x12c
    34ac:	f002 fc5e 	bl	5d6c <strcpy>
					 shell->ctx->cmd_buff, &len);
    34b0:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
    34b2:	68e0      	ldr	r0, [r4, #12]
    34b4:	ab01      	add	r3, sp, #4
    34b6:	322c      	adds	r2, #44	; 0x2c
    34b8:	4629      	mov	r1, r5
    34ba:	f001 fcd5 	bl	4e68 <shell_history_get>
	if (!history_mode) {
    34be:	b950      	cbnz	r0, 34d6 <history_handle+0x6e>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    34c0:	68a0      	ldr	r0, [r4, #8]
    34c2:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    34c6:	302c      	adds	r0, #44	; 0x2c
    34c8:	f002 fc50 	bl	5d6c <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
    34cc:	68a0      	ldr	r0, [r4, #8]
    34ce:	302c      	adds	r0, #44	; 0x2c
    34d0:	f7ff fe29 	bl	3126 <shell_strlen>
    34d4:	9001      	str	r0, [sp, #4]
	shell_op_cursor_home_move(shell);
    34d6:	4620      	mov	r0, r4
    34d8:	f001 f914 	bl	4704 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    34dc:	4a0c      	ldr	r2, [pc, #48]	; (3510 <history_handle+0xa8>)
    34de:	490d      	ldr	r1, [pc, #52]	; (3514 <history_handle+0xac>)
    34e0:	6960      	ldr	r0, [r4, #20]
    34e2:	f7ff fe13 	bl	310c <shell_raw_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%s", shell->ctx->cmd_buff);
    34e6:	68a3      	ldr	r3, [r4, #8]
    34e8:	4a0a      	ldr	r2, [pc, #40]	; (3514 <history_handle+0xac>)
    34ea:	332c      	adds	r3, #44	; 0x2c
    34ec:	4620      	mov	r0, r4
    34ee:	2100      	movs	r1, #0
    34f0:	f7ff ff6c 	bl	33cc <shell_fprintf>
	shell->ctx->cmd_buff_pos = len;
    34f4:	68a3      	ldr	r3, [r4, #8]
    34f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    34fa:	851a      	strh	r2, [r3, #40]	; 0x28
	shell->ctx->cmd_buff_len = len;
    34fc:	84da      	strh	r2, [r3, #38]	; 0x26
	shell_op_cond_next_line(shell);
    34fe:	4620      	mov	r0, r4
    3500:	f000 ffe8 	bl	44d4 <shell_op_cond_next_line>
}
    3504:	b003      	add	sp, #12
    3506:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    3508:	f883 012c 	strb.w	r0, [r3, #300]	; 0x12c
    350c:	e7d0      	b.n	34b0 <history_handle+0x48>
    350e:	bf00      	nop
    3510:	0002daa8 	.word	0x0002daa8
    3514:	0002db78 	.word	0x0002db78

00003518 <help_item_print>:
			     field_width, false);
}

static void help_item_print(const struct shell *shell, const char *item_name,
			    u16_t item_name_width, const char *item_help)
{
    3518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static const u8_t tabulator[] = "  ";
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    351c:	4e15      	ldr	r6, [pc, #84]	; (3574 <help_item_print+0x5c>)
{
    351e:	b085      	sub	sp, #20
    3520:	4605      	mov	r5, r0
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3522:	4630      	mov	r0, r6
{
    3524:	4688      	mov	r8, r1
    3526:	4614      	mov	r4, r2
    3528:	461f      	mov	r7, r3
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    352a:	f002 fc57 	bl	5ddc <strlen>
    352e:	4681      	mov	r9, r0

	if (item_name == NULL) {
    3530:	f1b8 0f00 	cmp.w	r8, #0
    3534:	d01a      	beq.n	356c <help_item_print+0x54>
		return;
	}

	if (!IS_ENABLED(CONFIG_NEWLIB_LIBC) && !IS_ENABLED(CONFIG_ARCH_POSIX)) {
		/* print option name */
		shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
    3536:	e9cd 8601 	strd	r8, r6, [sp, #4]
    353a:	9400      	str	r4, [sp, #0]
    353c:	4633      	mov	r3, r6
    353e:	4a0e      	ldr	r2, [pc, #56]	; (3578 <help_item_print+0x60>)
    3540:	2100      	movs	r1, #0
    3542:	4628      	mov	r0, r5
    3544:	f7ff ff42 	bl	33cc <shell_fprintf>
			shell_write(shell, &space, 1);
		}
		shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
	}

	if (item_help == NULL) {
    3548:	b92f      	cbnz	r7, 3556 <help_item_print+0x3e>
		cursor_next_line_move(shell);
    354a:	6968      	ldr	r0, [r5, #20]
		return;
	}
	/* print option help */
	formatted_text_print(shell, item_help, offset, false);
}
    354c:	b005      	add	sp, #20
    354e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		cursor_next_line_move(shell);
    3552:	f7ff be17 	b.w	3184 <cursor_next_line_move.isra.14>
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3556:	1c62      	adds	r2, r4, #1
    3558:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    355c:	b292      	uxth	r2, r2
    355e:	4639      	mov	r1, r7
    3560:	4628      	mov	r0, r5
}
    3562:	b005      	add	sp, #20
    3564:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	formatted_text_print(shell, item_help, offset, false);
    3568:	f7ff be63 	b.w	3232 <formatted_text_print.constprop.28>
}
    356c:	b005      	add	sp, #20
    356e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3572:	bf00      	nop
    3574:	0002db7f 	.word	0x0002db7f
    3578:	0002dabd 	.word	0x0002dabd

0000357c <shell_state_set.constprop.31>:
	shell->ctx->state = state;
    357c:	6883      	ldr	r3, [r0, #8]
    357e:	2202      	movs	r2, #2
    3580:	701a      	strb	r2, [r3, #0]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3582:	2200      	movs	r2, #0
    3584:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	shell->ctx->cmd_buff_pos = 0;
    3588:	851a      	strh	r2, [r3, #40]	; 0x28
	shell->ctx->cmd_buff_len = 0;
    358a:	84da      	strh	r2, [r3, #38]	; 0x26
		shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    358c:	2103      	movs	r1, #3
    358e:	6803      	ldr	r3, [r0, #0]
    3590:	4a01      	ldr	r2, [pc, #4]	; (3598 <shell_state_set.constprop.31+0x1c>)
    3592:	f7ff bf1b 	b.w	33cc <shell_fprintf>
    3596:	bf00      	nop
    3598:	0002db78 	.word	0x0002db78

0000359c <shell_start>:
{
    359c:	b538      	push	{r3, r4, r5, lr}
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    359e:	6883      	ldr	r3, [r0, #8]
    35a0:	781b      	ldrb	r3, [r3, #0]
    35a2:	2b01      	cmp	r3, #1
{
    35a4:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
    35a6:	d10f      	bne.n	35c8 <shell_start+0x2c>
	err = shell->iface->api->enable(shell->iface, false);
    35a8:	6840      	ldr	r0, [r0, #4]
    35aa:	6803      	ldr	r3, [r0, #0]
    35ac:	2100      	movs	r1, #0
    35ae:	689b      	ldr	r3, [r3, #8]
    35b0:	4798      	blx	r3
	if (err != 0) {
    35b2:	4605      	mov	r5, r0
    35b4:	b930      	cbnz	r0, 35c4 <shell_start+0x28>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n\n");
    35b6:	6960      	ldr	r0, [r4, #20]
    35b8:	4905      	ldr	r1, [pc, #20]	; (35d0 <shell_start+0x34>)
    35ba:	f7ff fda7 	bl	310c <shell_raw_fprintf>
	shell_state_set(shell, SHELL_STATE_ACTIVE);
    35be:	4620      	mov	r0, r4
    35c0:	f7ff ffdc 	bl	357c <shell_state_set.constprop.31>
}
    35c4:	4628      	mov	r0, r5
    35c6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    35c8:	f06f 0522 	mvn.w	r5, #34	; 0x22
    35cc:	e7fa      	b.n	35c4 <shell_start+0x28>
    35ce:	bf00      	nop
    35d0:	0002db7b 	.word	0x0002db7b

000035d4 <shell_help_print>:
	}
}

void shell_help_print(const struct shell *shell,
		      const struct shell_getopt_option *opt, size_t opt_len)
{
    35d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    35d8:	6883      	ldr	r3, [r0, #8]
	return str == NULL ? 0 : strlen(str);
    35da:	4e63      	ldr	r6, [pc, #396]	; (3768 <shell_help_print+0x194>)
{
    35dc:	b089      	sub	sp, #36	; 0x24
    35de:	4604      	mov	r4, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    35e0:	6858      	ldr	r0, [r3, #4]
{
    35e2:	4689      	mov	r9, r1
    35e4:	4617      	mov	r7, r2
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    35e6:	f7ff fd9e 	bl	3126 <shell_strlen>
    35ea:	4605      	mov	r5, r0
    35ec:	4630      	mov	r0, r6
    35ee:	f002 fbf5 	bl	5ddc <strlen>
	shell_fprintf(shell, SHELL_NORMAL, "%s%s",
    35f2:	68a3      	ldr	r3, [r4, #8]
    35f4:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    35f6:	4405      	add	r5, r0
	shell_fprintf(shell, SHELL_NORMAL, "%s%s",
    35f8:	685b      	ldr	r3, [r3, #4]
    35fa:	4a5c      	ldr	r2, [pc, #368]	; (376c <shell_help_print+0x198>)
    35fc:	2100      	movs	r1, #0
    35fe:	4620      	mov	r0, r4
    3600:	f7ff fee4 	bl	33cc <shell_fprintf>
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    3604:	68a3      	ldr	r3, [r4, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
    3606:	b2ad      	uxth	r5, r5
	formatted_text_print(shell, shell->ctx->active_cmd.help,
    3608:	462a      	mov	r2, r5
    360a:	6899      	ldr	r1, [r3, #8]
    360c:	4620      	mov	r0, r4
    360e:	f7ff fe10 	bl	3232 <formatted_text_print.constprop.28>
    3612:	4857      	ldr	r0, [pc, #348]	; (3770 <shell_help_print+0x19c>)
    3614:	f002 fbe2 	bl	5ddc <strlen>
	shell_fprintf(shell, SHELL_NORMAL, "Options:\r\n");
    3618:	4a56      	ldr	r2, [pc, #344]	; (3774 <shell_help_print+0x1a0>)
	u16_t longest_name = shell_strlen(help_opt);
    361a:	fa1f f880 	uxth.w	r8, r0
	shell_fprintf(shell, SHELL_NORMAL, "Options:\r\n");
    361e:	2100      	movs	r1, #0
    3620:	4620      	mov	r0, r4
    3622:	f7ff fed3 	bl	33cc <shell_fprintf>
	if ((opt == NULL) || (opt_cnt == 0)) {
    3626:	f1b9 0f00 	cmp.w	r9, #0
    362a:	d041      	beq.n	36b0 <shell_help_print+0xdc>
    362c:	2f00      	cmp	r7, #0
    362e:	d03f      	beq.n	36b0 <shell_help_print+0xdc>
    3630:	230c      	movs	r3, #12
    3632:	435f      	muls	r7, r3
    3634:	18fb      	adds	r3, r7, r3
    3636:	464e      	mov	r6, r9
    3638:	eb09 0a03 	add.w	sl, r9, r3
    363c:	46cb      	mov	fp, r9
    363e:	f10b 0b0c 	add.w	fp, fp, #12
	for (size_t i = 0; i < opt_cnt; ++i) {
    3642:	45da      	cmp	sl, fp
    3644:	d170      	bne.n	3728 <shell_help_print+0x154>
	help_item_print(shell, help_opt, longest_name, "Show command help.");
    3646:	4b4c      	ldr	r3, [pc, #304]	; (3778 <shell_help_print+0x1a4>)
    3648:	4949      	ldr	r1, [pc, #292]	; (3770 <shell_help_print+0x19c>)
				strcat(shell->ctx->temp_buff, opt_sep);
    364a:	4d4c      	ldr	r5, [pc, #304]	; (377c <shell_help_print+0x1a8>)
	help_item_print(shell, help_opt, longest_name, "Show command help.");
    364c:	4642      	mov	r2, r8
    364e:	4620      	mov	r0, r4
    3650:	f7ff ff62 	bl	3518 <help_item_print>
	memset(shell->ctx->temp_buff, 0, longest_name + 1);
    3654:	68a0      	ldr	r0, [r4, #8]
    3656:	f108 0201 	add.w	r2, r8, #1
    365a:	2100      	movs	r1, #0
    365c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3660:	f002 fc3f 	bl	5ee2 <memset>
    3664:	444f      	add	r7, r9
		if (opt[i].optname_short) {
    3666:	6871      	ldr	r1, [r6, #4]
    3668:	b121      	cbz	r1, 3674 <shell_help_print+0xa0>
			strcpy(shell->ctx->temp_buff, opt[i].optname_short);
    366a:	68a0      	ldr	r0, [r4, #8]
    366c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3670:	f002 fb7c 	bl	5d6c <strcpy>
		if (opt[i].optname) {
    3674:	6831      	ldr	r1, [r6, #0]
    3676:	b179      	cbz	r1, 3698 <shell_help_print+0xc4>
    3678:	68a3      	ldr	r3, [r4, #8]
    367a:	f503 7096 	add.w	r0, r3, #300	; 0x12c
			if (*shell->ctx->temp_buff) {
    367e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
    3682:	2b00      	cmp	r3, #0
    3684:	d064      	beq.n	3750 <shell_help_print+0x17c>
				strcat(shell->ctx->temp_buff, opt_sep);
    3686:	4629      	mov	r1, r5
    3688:	f002 fbcc 	bl	5e24 <strcat>
				strcat(shell->ctx->temp_buff, opt[i].optname);
    368c:	68a0      	ldr	r0, [r4, #8]
    368e:	6831      	ldr	r1, [r6, #0]
    3690:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3694:	f002 fbc6 	bl	5e24 <strcat>
		help_item_print(shell, shell->ctx->temp_buff, longest_name,
    3698:	68a1      	ldr	r1, [r4, #8]
    369a:	68b3      	ldr	r3, [r6, #8]
    369c:	4642      	mov	r2, r8
    369e:	f501 7196 	add.w	r1, r1, #300	; 0x12c
    36a2:	4620      	mov	r0, r4
    36a4:	360c      	adds	r6, #12
    36a6:	f7ff ff37 	bl	3518 <help_item_print>
	for (size_t i = 0; i < opt_cnt; ++i) {
    36aa:	42b7      	cmp	r7, r6
    36ac:	d1db      	bne.n	3666 <shell_help_print+0x92>
    36ae:	e005      	b.n	36bc <shell_help_print+0xe8>
		help_item_print(shell, help_opt, longest_name,
    36b0:	4b31      	ldr	r3, [pc, #196]	; (3778 <shell_help_print+0x1a4>)
    36b2:	492f      	ldr	r1, [pc, #188]	; (3770 <shell_help_print+0x19c>)
    36b4:	4642      	mov	r2, r8
    36b6:	4620      	mov	r0, r4
    36b8:	f7ff ff2e 	bl	3518 <help_item_print>
	if (!shell->ctx->active_cmd.subcmd) {
    36bc:	68a3      	ldr	r3, [r4, #8]
    36be:	68db      	ldr	r3, [r3, #12]
	const struct shell_static_entry *entry = NULL;
    36c0:	2500      	movs	r5, #0
    36c2:	9503      	str	r5, [sp, #12]
	if (!shell->ctx->active_cmd.subcmd) {
    36c4:	2b00      	cmp	r3, #0
    36c6:	d04b      	beq.n	3760 <shell_help_print+0x18c>
	u16_t longest_syntax = 0;
    36c8:	462f      	mov	r7, r5
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    36ca:	ae04      	add	r6, sp, #16
    36cc:	68a0      	ldr	r0, [r4, #8]
    36ce:	9600      	str	r6, [sp, #0]
    36d0:	ab03      	add	r3, sp, #12
    36d2:	462a      	mov	r2, r5
    36d4:	2101      	movs	r1, #1
    36d6:	68c0      	ldr	r0, [r0, #12]
    36d8:	f7ff fd2a 	bl	3130 <cmd_get>
		if (!entry) {
    36dc:	9b03      	ldr	r3, [sp, #12]
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    36de:	f105 0801 	add.w	r8, r5, #1
		if (!entry) {
    36e2:	2b00      	cmp	r3, #0
    36e4:	d039      	beq.n	375a <shell_help_print+0x186>
		u16_t len = shell_strlen(entry->syntax);
    36e6:	6818      	ldr	r0, [r3, #0]
    36e8:	f7ff fd1d 	bl	3126 <shell_strlen>
		longest_syntax = longest_syntax > len ? longest_syntax : len;
    36ec:	b280      	uxth	r0, r0
    36ee:	4287      	cmp	r7, r0
    36f0:	bf38      	it	cc
    36f2:	4607      	movcc	r7, r0
	} while (cmd_idx != 0); /* too many commands */
    36f4:	3501      	adds	r5, #1
    36f6:	d12e      	bne.n	3756 <shell_help_print+0x182>
	shell_fprintf(shell, SHELL_NORMAL, "Subcommands:\r\n");
    36f8:	4a21      	ldr	r2, [pc, #132]	; (3780 <shell_help_print+0x1ac>)
    36fa:	2100      	movs	r1, #0
    36fc:	4620      	mov	r0, r4
    36fe:	f7ff fe65 	bl	33cc <shell_fprintf>
	cmd_idx = 0;
    3702:	2200      	movs	r2, #0
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3704:	68a0      	ldr	r0, [r4, #8]
    3706:	9600      	str	r6, [sp, #0]
    3708:	2101      	movs	r1, #1
    370a:	ab03      	add	r3, sp, #12
    370c:	68c0      	ldr	r0, [r0, #12]
    370e:	1c55      	adds	r5, r2, #1
    3710:	f7ff fd0e 	bl	3130 <cmd_get>
		if (entry == NULL) {
    3714:	9903      	ldr	r1, [sp, #12]
    3716:	b319      	cbz	r1, 3760 <shell_help_print+0x18c>
		help_item_print(shell, entry->syntax, longest_syntax,
    3718:	684b      	ldr	r3, [r1, #4]
    371a:	6809      	ldr	r1, [r1, #0]
    371c:	463a      	mov	r2, r7
    371e:	4620      	mov	r0, r4
    3720:	f7ff fefa 	bl	3518 <help_item_print>
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3724:	462a      	mov	r2, r5
    3726:	e7ed      	b.n	3704 <shell_help_print+0x130>
		u16_t len = shell_strlen(opt[i].optname_short) +
    3728:	f85b 0c08 	ldr.w	r0, [fp, #-8]
    372c:	f7ff fcfb 	bl	3126 <shell_strlen>
    3730:	4605      	mov	r5, r0
						 shell_strlen(opt[i].optname) +
    3732:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
    3736:	f7ff fcf6 	bl	3126 <shell_strlen>
		u16_t len = shell_strlen(opt[i].optname_short) +
    373a:	4405      	add	r5, r0
    373c:	480f      	ldr	r0, [pc, #60]	; (377c <shell_help_print+0x1a8>)
    373e:	f002 fb4d 	bl	5ddc <strlen>
    3742:	b2ad      	uxth	r5, r5
    3744:	4428      	add	r0, r5
		longest_name = len > longest_name ? len : longest_name;
    3746:	b280      	uxth	r0, r0
    3748:	4580      	cmp	r8, r0
    374a:	bf38      	it	cc
    374c:	4680      	movcc	r8, r0
    374e:	e776      	b.n	363e <shell_help_print+0x6a>
				strcpy(shell->ctx->temp_buff, opt[i].optname);
    3750:	f002 fb0c 	bl	5d6c <strcpy>
    3754:	e7a0      	b.n	3698 <shell_help_print+0xc4>
		cmd_get(shell->ctx->active_cmd.subcmd, !SHELL_CMD_ROOT_LVL,
    3756:	4645      	mov	r5, r8
    3758:	e7b8      	b.n	36cc <shell_help_print+0xf8>
	if (cmd_idx == 1) {
    375a:	f1b8 0f01 	cmp.w	r8, #1
    375e:	d1cb      	bne.n	36f8 <shell_help_print+0x124>
	}

	help_cmd_print(shell);
	help_options_print(shell, opt, opt_len);
	help_subcmd_print(shell);
}
    3760:	b009      	add	sp, #36	; 0x24
    3762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3766:	bf00      	nop
    3768:	0002dab9 	.word	0x0002dab9
    376c:	0002db71 	.word	0x0002db71
    3770:	0002dac7 	.word	0x0002dac7
    3774:	0002db42 	.word	0x0002db42
    3778:	0002db4d 	.word	0x0002db4d
    377c:	0002dad2 	.word	0x0002dad2
    3780:	0002db60 	.word	0x0002db60

00003784 <shell_execute>:
{
    3784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3788:	b097      	sub	sp, #92	; 0x5c
    378a:	4604      	mov	r4, r0
	const struct shell_static_entry *p_static_entry = NULL;
    378c:	2300      	movs	r3, #0
    378e:	9303      	str	r3, [sp, #12]
	shell_op_cursor_end_move(shell);
    3790:	f000 ffbe 	bl	4710 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
    3794:	4620      	mov	r0, r4
    3796:	f000 fe89 	bl	44ac <shell_cursor_in_empty_line>
    379a:	b910      	cbnz	r0, 37a2 <shell_execute+0x1e>
		cursor_next_line_move(shell);
    379c:	6960      	ldr	r0, [r4, #20]
    379e:	f7ff fcf1 	bl	3184 <cursor_next_line_move.isra.14>
	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    37a2:	68a0      	ldr	r0, [r4, #8]
    37a4:	2210      	movs	r2, #16
    37a6:	2100      	movs	r1, #0
    37a8:	3004      	adds	r0, #4
    37aa:	f002 fb9a 	bl	5ee2 <memset>
	shell_buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    37ae:	68a0      	ldr	r0, [r4, #8]
    37b0:	f100 0126 	add.w	r1, r0, #38	; 0x26
    37b4:	302c      	adds	r0, #44	; 0x2c
    37b6:	f000 fe0b 	bl	43d0 <shell_buffer_trim>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    37ba:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
    37bc:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    37be:	8cca      	ldrh	r2, [r1, #38]	; 0x26
    37c0:	850a      	strh	r2, [r1, #40]	; 0x28
	shell_history_put(shell->history, line, length);
    37c2:	312c      	adds	r1, #44	; 0x2c
    37c4:	f001 fb86 	bl	4ed4 <shell_history_put>
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    37c8:	68a2      	ldr	r2, [r4, #8]
    37ca:	230c      	movs	r3, #12
    37cc:	322c      	adds	r2, #44	; 0x2c
    37ce:	a909      	add	r1, sp, #36	; 0x24
    37d0:	a804      	add	r0, sp, #16
    37d2:	f000 fd3d 	bl	4250 <shell_make_argv>
	if (!argc) {
    37d6:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
    37d8:	4603      	mov	r3, r0
	if (!argc) {
    37da:	b12a      	cbz	r2, 37e8 <shell_execute+0x64>
	if (quote != 0) {
    37dc:	b138      	cbz	r0, 37ee <shell_execute+0x6a>
		shell_fprintf(shell, SHELL_ERROR, "not terminated: %c\r\n",
    37de:	4a4d      	ldr	r2, [pc, #308]	; (3914 <shell_execute+0x190>)
    37e0:	2102      	movs	r1, #2
    37e2:	4620      	mov	r0, r4
    37e4:	f7ff fdf2 	bl	33cc <shell_fprintf>
		return -ENOEXEC;
    37e8:	f06f 0507 	mvn.w	r5, #7
    37ec:	e06d      	b.n	38ca <shell_execute+0x146>
	return ((u8_t *)__shell_root_cmds_end -
    37ee:	494a      	ldr	r1, [pc, #296]	; (3918 <shell_execute+0x194>)
    37f0:	4a4a      	ldr	r2, [pc, #296]	; (391c <shell_execute+0x198>)
	p_cmd = root_cmd_find(argv[0]);
    37f2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	return ((u8_t *)__shell_root_cmds_end -
    37f6:	eba2 0801 	sub.w	r8, r2, r1
			(u8_t *)__shell_root_cmds_start)/
    37fa:	ea4f 08d8 	mov.w	r8, r8, lsr #3
	for (size_t cmd_idx = 0; cmd_idx < cmd_count; ++cmd_idx) {
    37fe:	4606      	mov	r6, r0
    3800:	468a      	mov	sl, r1
    3802:	45b0      	cmp	r8, r6
    3804:	d108      	bne.n	3818 <shell_execute+0x94>
		shell_fprintf(shell, SHELL_ERROR, "%s%s\r\n", argv[0],
    3806:	4b46      	ldr	r3, [pc, #280]	; (3920 <shell_execute+0x19c>)
    3808:	9300      	str	r3, [sp, #0]
    380a:	4a46      	ldr	r2, [pc, #280]	; (3924 <shell_execute+0x1a0>)
    380c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    380e:	2102      	movs	r1, #2
    3810:	4620      	mov	r0, r4
    3812:	f7ff fddb 	bl	33cc <shell_fprintf>
    3816:	e7e7      	b.n	37e8 <shell_execute+0x64>
		if (strcmp(syntax, cmd->u.entry->syntax) == 0) {
    3818:	eb0a 03c6 	add.w	r3, sl, r6, lsl #3
    381c:	4648      	mov	r0, r9
    381e:	685f      	ldr	r7, [r3, #4]
    3820:	6839      	ldr	r1, [r7, #0]
    3822:	f002 fae3 	bl	5dec <strcmp>
    3826:	4605      	mov	r5, r0
    3828:	2800      	cmp	r0, #0
    382a:	d064      	beq.n	38f6 <shell_execute+0x172>
	for (size_t cmd_idx = 0; cmd_idx < cmd_count; ++cmd_idx) {
    382c:	3601      	adds	r6, #1
    382e:	e7e8      	b.n	3802 <shell_execute+0x7e>
		    !strcmp(argv[cmd_lvl], "--help")) {
    3830:	493d      	ldr	r1, [pc, #244]	; (3928 <shell_execute+0x1a4>)
    3832:	6838      	ldr	r0, [r7, #0]
    3834:	f002 fada 	bl	5dec <strcmp>
		if (!strcmp(argv[cmd_lvl], "-h") ||
    3838:	b378      	cbz	r0, 389a <shell_execute+0x116>
		cmd_get(p_cmd, cmd_lvl, cmd_idx++, &p_static_entry, &d_entry);
    383a:	ab05      	add	r3, sp, #20
    383c:	9300      	str	r3, [sp, #0]
    383e:	4642      	mov	r2, r8
    3840:	ab03      	add	r3, sp, #12
    3842:	4631      	mov	r1, r6
    3844:	4650      	mov	r0, sl
    3846:	f7ff fc73 	bl	3130 <cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
    384a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    384e:	d02b      	beq.n	38a8 <shell_execute+0x124>
    3850:	9b03      	ldr	r3, [sp, #12]
    3852:	b34b      	cbz	r3, 38a8 <shell_execute+0x124>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
    3854:	6819      	ldr	r1, [r3, #0]
    3856:	6838      	ldr	r0, [r7, #0]
    3858:	f002 fac8 	bl	5dec <strcmp>
    385c:	f108 0801 	add.w	r8, r8, #1
    3860:	b990      	cbnz	r0, 3888 <shell_execute+0x104>
			if (p_static_entry->handler != NULL) {
    3862:	f8dd c00c 	ldr.w	ip, [sp, #12]
    3866:	f8dc 300c 	ldr.w	r3, [ip, #12]
    386a:	b13b      	cbz	r3, 387c <shell_execute+0xf8>
				shell->ctx->active_cmd = *p_static_entry;
    386c:	68a3      	ldr	r3, [r4, #8]
    386e:	f103 0e04 	add.w	lr, r3, #4
    3872:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    3876:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    387a:	46b1      	mov	r9, r6
			p_cmd = p_static_entry->subcmd;
    387c:	f8dc a008 	ldr.w	sl, [ip, #8]
			cmd_lvl++;
    3880:	3601      	adds	r6, #1
    3882:	3704      	adds	r7, #4
	cmd_lvl++;
    3884:	f04f 0800 	mov.w	r8, #0
		if (cmd_lvl >= argc) {
    3888:	9b04      	ldr	r3, [sp, #16]
    388a:	429e      	cmp	r6, r3
    388c:	d20c      	bcs.n	38a8 <shell_execute+0x124>
		if (!strcmp(argv[cmd_lvl], "-h") ||
    388e:	4659      	mov	r1, fp
    3890:	6838      	ldr	r0, [r7, #0]
    3892:	f002 faab 	bl	5dec <strcmp>
    3896:	2800      	cmp	r0, #0
    3898:	d1ca      	bne.n	3830 <shell_execute+0xac>
			help_flag_set(shell);
    389a:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.show_help = 1;
    389c:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    38a0:	f043 0302 	orr.w	r3, r3, #2
    38a4:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
	if (shell->ctx->active_cmd.handler == NULL) {
    38a8:	68a2      	ldr	r2, [r4, #8]
    38aa:	6913      	ldr	r3, [r2, #16]
    38ac:	b9cb      	cbnz	r3, 38e2 <shell_execute+0x15e>
		if (shell->ctx->active_cmd.help) {
    38ae:	6892      	ldr	r2, [r2, #8]
    38b0:	b17a      	cbz	r2, 38d2 <shell_execute+0x14e>
			shell_help_print(shell, NULL, 0);
    38b2:	461a      	mov	r2, r3
    38b4:	4619      	mov	r1, r3
    38b6:	4620      	mov	r0, r4
    38b8:	f7ff fe8c 	bl	35d4 <shell_help_print>
	help_flag_clear(shell);
    38bc:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.show_help = 0;
    38be:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    38c2:	f36f 0341 	bfc	r3, #1, #1
    38c6:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    38ca:	4628      	mov	r0, r5
    38cc:	b017      	add	sp, #92	; 0x5c
    38ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			shell_fprintf(shell, SHELL_ERROR,
    38d2:	4a16      	ldr	r2, [pc, #88]	; (392c <shell_execute+0x1a8>)
    38d4:	2102      	movs	r1, #2
    38d6:	4620      	mov	r0, r4
    38d8:	f7ff fd78 	bl	33cc <shell_fprintf>
			ret_val = -ENOEXEC;
    38dc:	f06f 0507 	mvn.w	r5, #7
    38e0:	e7ec      	b.n	38bc <shell_execute+0x138>
		ret_val = shell->ctx->active_cmd.handler(shell,
    38e2:	9904      	ldr	r1, [sp, #16]
    38e4:	aa09      	add	r2, sp, #36	; 0x24
    38e6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    38ea:	eba1 0109 	sub.w	r1, r1, r9
    38ee:	4620      	mov	r0, r4
    38f0:	4798      	blx	r3
    38f2:	4605      	mov	r5, r0
    38f4:	e7e2      	b.n	38bc <shell_execute+0x138>
	shell->ctx->active_cmd = *p_cmd->u.entry;
    38f6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    38fa:	68a6      	ldr	r6, [r4, #8]
		if (!strcmp(argv[cmd_lvl], "-h") ||
    38fc:	f8df b030 	ldr.w	fp, [pc, #48]	; 3930 <shell_execute+0x1ac>
	shell->ctx->active_cmd = *p_cmd->u.entry;
    3900:	3604      	adds	r6, #4
    3902:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	size_t cmd_with_handler_lvl = 0;
    3906:	46a9      	mov	r9, r5
	p_cmd = p_cmd->u.entry->subcmd;
    3908:	f8d7 a008 	ldr.w	sl, [r7, #8]
	cmd_lvl++;
    390c:	2601      	movs	r6, #1
    390e:	af0a      	add	r7, sp, #40	; 0x28
    3910:	e7b8      	b.n	3884 <shell_execute+0x100>
    3912:	bf00      	nop
    3914:	0002daf0 	.word	0x0002daf0
    3918:	0002d1b8 	.word	0x0002d1b8
    391c:	0002d1f0 	.word	0x0002d1f0
    3920:	0002db2e 	.word	0x0002db2e
    3924:	0002d614 	.word	0x0002d614
    3928:	0002db08 	.word	0x0002db08
    392c:	0002db0f 	.word	0x0002db0f
    3930:	0002db05 	.word	0x0002db05

00003934 <shell_process>:
{
    3934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3938:	6883      	ldr	r3, [r0, #8]
    393a:	f3bf 8f5b 	dmb	ish
    393e:	b0a9      	sub	sp, #164	; 0xa4
    3940:	4604      	mov	r4, r0
    3942:	f503 7313 	add.w	r3, r3, #588	; 0x24c
    3946:	e853 2f00 	ldrex	r2, [r3]
    394a:	f042 0210 	orr.w	r2, r2, #16
    394e:	e843 2100 	strex	r1, r2, [r3]
    3952:	2900      	cmp	r1, #0
    3954:	d1f7      	bne.n	3946 <shell_process+0x12>
    3956:	f3bf 8f5b 	dmb	ish
	switch (shell->ctx->state) {
    395a:	68a3      	ldr	r3, [r4, #8]
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	2b02      	cmp	r3, #2
    3960:	d173      	bne.n	3a4a <shell_process+0x116>
	size_t count = 0;
    3962:	2300      	movs	r3, #0
    3964:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
    3966:	6860      	ldr	r0, [r4, #4]
    3968:	6803      	ldr	r3, [r0, #0]
    396a:	2201      	movs	r2, #1
    396c:	691d      	ldr	r5, [r3, #16]
    396e:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    3972:	ab0b      	add	r3, sp, #44	; 0x2c
    3974:	47a8      	blx	r5
		if (count == 0) {
    3976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3978:	2b00      	cmp	r3, #0
    397a:	d066      	beq.n	3a4a <shell_process+0x116>
		if (ascii_filter(data) != 0) {
    397c:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
			-EINVAL : 0;
    3980:	060a      	lsls	r2, r1, #24
    3982:	d4f0      	bmi.n	3966 <shell_process+0x32>
		switch (shell->ctx->receive_state) {
    3984:	68a0      	ldr	r0, [r4, #8]
    3986:	7843      	ldrb	r3, [r0, #1]
    3988:	2b01      	cmp	r3, #1
    398a:	f000 82d8 	beq.w	3f3e <shell_process+0x60a>
    398e:	d347      	bcc.n	3a20 <shell_process+0xec>
    3990:	2b02      	cmp	r3, #2
    3992:	f04f 0300 	mov.w	r3, #0
    3996:	f040 809f 	bne.w	3ad8 <shell_process+0x1a4>
	shell->ctx->receive_state = state;
    399a:	7043      	strb	r3, [r0, #1]
	shell_raw_fprintf(shell->fprintf_ctx, "%c", ch);
}

static inline bool flag_echo_is_set(const struct shell *shell)
{
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    399c:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
			if (!flag_echo_is_set(shell)) {
    39a0:	071a      	lsls	r2, r3, #28
    39a2:	d552      	bpl.n	3a4a <shell_process+0x116>
			switch (data) {
    39a4:	3931      	subs	r1, #49	; 0x31
    39a6:	291b      	cmp	r1, #27
    39a8:	d8dd      	bhi.n	3966 <shell_process+0x32>
    39aa:	a301      	add	r3, pc, #4	; (adr r3, 39b0 <shell_process+0x7c>)
    39ac:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    39b0:	00003f75 	.word	0x00003f75
    39b4:	00003f81 	.word	0x00003f81
    39b8:	00003f9f 	.word	0x00003f9f
    39bc:	00003f69 	.word	0x00003f69
    39c0:	00003967 	.word	0x00003967
    39c4:	00003967 	.word	0x00003967
    39c8:	00003967 	.word	0x00003967
    39cc:	00003967 	.word	0x00003967
    39d0:	00003967 	.word	0x00003967
    39d4:	00003967 	.word	0x00003967
    39d8:	00003967 	.word	0x00003967
    39dc:	00003967 	.word	0x00003967
    39e0:	00003967 	.word	0x00003967
    39e4:	00003967 	.word	0x00003967
    39e8:	00003967 	.word	0x00003967
    39ec:	00003967 	.word	0x00003967
    39f0:	00003f4b 	.word	0x00003f4b
    39f4:	00003f55 	.word	0x00003f55
    39f8:	00003f59 	.word	0x00003f59
    39fc:	00003f61 	.word	0x00003f61
    3a00:	00003967 	.word	0x00003967
    3a04:	00003f6d 	.word	0x00003f6d
    3a08:	00003967 	.word	0x00003967
    3a0c:	00003f79 	.word	0x00003f79
    3a10:	00003967 	.word	0x00003967
    3a14:	00003967 	.word	0x00003967
    3a18:	00003967 	.word	0x00003967
    3a1c:	00003f85 	.word	0x00003f85
			if ((data == '\r') || (data == '\n')) {
    3a20:	290d      	cmp	r1, #13
    3a22:	d001      	beq.n	3a28 <shell_process+0xf4>
    3a24:	290a      	cmp	r1, #10
    3a26:	d129      	bne.n	3a7c <shell_process+0x148>
				if (!shell->ctx->cmd_buff_len) {
    3a28:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    3a2a:	bb1a      	cbnz	r2, 3a74 <shell_process+0x140>
	EXIT_HISTORY_CLEAR(shell);
    3a2c:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3a30:	f362 13c7 	bfi	r3, r2, #7, #1
    3a34:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
	shell_history_mode_exit(shell->history);
    3a38:	68e0      	ldr	r0, [r4, #12]
    3a3a:	f001 fa12 	bl	4e62 <shell_history_mode_exit>
					cursor_next_line_move(shell);
    3a3e:	6960      	ldr	r0, [r4, #20]
    3a40:	f7ff fba0 	bl	3184 <cursor_next_line_move.isra.14>
				shell_state_set(shell, SHELL_STATE_ACTIVE);
    3a44:	4620      	mov	r0, r4
    3a46:	f7ff fd99 	bl	357c <shell_state_set.constprop.31>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3a4a:	6960      	ldr	r0, [r4, #20]
    3a4c:	f000 fb86 	bl	415c <shell_fprintf_buffer_flush>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a50:	68a3      	ldr	r3, [r4, #8]
    3a52:	f3bf 8f5b 	dmb	ish
    3a56:	f503 7313 	add.w	r3, r3, #588	; 0x24c
    3a5a:	e853 2f00 	ldrex	r2, [r3]
    3a5e:	f022 0210 	bic.w	r2, r2, #16
    3a62:	e843 2100 	strex	r1, r2, [r3]
    3a66:	2900      	cmp	r1, #0
    3a68:	d1f7      	bne.n	3a5a <shell_process+0x126>
    3a6a:	f3bf 8f5b 	dmb	ish
}
    3a6e:	b029      	add	sp, #164	; 0xa4
    3a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(void)shell_execute(shell);
    3a74:	4620      	mov	r0, r4
    3a76:	f7ff fe85 	bl	3784 <shell_execute>
    3a7a:	e7e3      	b.n	3a44 <shell_process+0x110>
			switch (data) {
    3a7c:	2909      	cmp	r1, #9
    3a7e:	d02d      	beq.n	3adc <shell_process+0x1a8>
    3a80:	d811      	bhi.n	3aa6 <shell_process+0x172>
    3a82:	2900      	cmp	r1, #0
    3a84:	f43f af6f 	beq.w	3966 <shell_process+0x32>
    3a88:	2908      	cmp	r1, #8
    3a8a:	f000 81e7 	beq.w	3e5c <shell_process+0x528>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    3a8e:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data)) {
    3a92:	2b5e      	cmp	r3, #94	; 0x5e
    3a94:	f200 81f1 	bhi.w	3e7a <shell_process+0x546>
					EXIT_HISTORY_REQUEST(shell);
    3a98:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3aa0:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
    3aa4:	e104      	b.n	3cb0 <shell_process+0x37c>
			switch (data) {
    3aa6:	291b      	cmp	r1, #27
    3aa8:	d015      	beq.n	3ad6 <shell_process+0x1a2>
    3aaa:	297f      	cmp	r1, #127	; 0x7f
    3aac:	d1ef      	bne.n	3a8e <shell_process+0x15a>
    3aae:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    3ab2:	071d      	lsls	r5, r3, #28
    3ab4:	f57f af57 	bpl.w	3966 <shell_process+0x32>
					EXIT_HISTORY_REQUEST(shell);
    3ab8:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3ac0:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
    3ac4:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
					if (flag_delete_mode_set(shell)) {
    3ac8:	0658      	lsls	r0, r3, #25
    3aca:	f100 81d2 	bmi.w	3e72 <shell_process+0x53e>
						shell_op_char_delete(shell);
    3ace:	4620      	mov	r0, r4
    3ad0:	f000 fe6d 	bl	47ae <shell_op_char_delete>
    3ad4:	e747      	b.n	3966 <shell_process+0x32>
	shell->ctx->receive_state = state;
    3ad6:	2301      	movs	r3, #1
    3ad8:	7043      	strb	r3, [r0, #1]
    3ada:	e744      	b.n	3966 <shell_process+0x32>
    3adc:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    3ae0:	071b      	lsls	r3, r3, #28
    3ae2:	f57f af40 	bpl.w	3966 <shell_process+0x32>
					EXIT_HISTORY_REQUEST(shell);
    3ae6:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3aee:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
	if (compl_space == 0) {
    3af2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    3af4:	2bff      	cmp	r3, #255	; 0xff
    3af6:	f43f af36 	beq.w	3966 <shell_process+0x32>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    3afa:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    3afc:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    3b00:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    3b04:	f002 f9c0 	bl	5e88 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    3b08:	68a2      	ldr	r2, [r4, #8]
    3b0a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    3b0c:	4413      	add	r3, r2
    3b0e:	2100      	movs	r1, #0
	(void)shell_make_argv(argc, argv, shell->ctx->temp_buff,
    3b10:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    3b14:	f883 112c 	strb.w	r1, [r3, #300]	; 0x12c
	(void)shell_make_argv(argc, argv, shell->ctx->temp_buff,
    3b18:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    3b1c:	230c      	movs	r3, #12
    3b1e:	4641      	mov	r1, r8
    3b20:	a80c      	add	r0, sp, #48	; 0x30
    3b22:	f000 fb95 	bl	4250 <shell_make_argv>
	int space = isspace((int)shell->ctx->cmd_buff[
    3b26:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    3b28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
	int space = isspace((int)shell->ctx->cmd_buff[
    3b2a:	4413      	add	r3, r2
    3b2c:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    3b30:	f7ff fae2 	bl	30f8 <isspace>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    3b34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3b36:	2d00      	cmp	r5, #0
    3b38:	f000 8239 	beq.w	3fae <shell_process+0x67a>
    3b3c:	b918      	cbnz	r0, 3b46 <shell_process+0x212>
    3b3e:	2d01      	cmp	r5, #1
    3b40:	f000 8238 	beq.w	3fb4 <shell_process+0x680>
	search_argc = space ? *argc : *argc - 1;
    3b44:	3d01      	subs	r5, #1
	*match_arg = SHELL_CMD_ROOT_LVL;
    3b46:	2700      	movs	r7, #0
	const struct shell_cmd_entry *prev_cmd = NULL;
    3b48:	463e      	mov	r6, r7
		cmd_get(cmd, lvl, idx++, &entry, d_entry);
    3b4a:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
	const struct shell_static_entry *entry = NULL;
    3b4e:	2300      	movs	r3, #0
		entry = find_cmd(prev_cmd, *match_arg, argv[*match_arg],
    3b50:	f858 b027 	ldr.w	fp, [r8, r7, lsl #2]
	const struct shell_static_entry *entry = NULL;
    3b54:	9317      	str	r3, [sp, #92]	; 0x5c
	size_t idx = 0;
    3b56:	461a      	mov	r2, r3
		cmd_get(cmd, lvl, idx++, &entry, d_entry);
    3b58:	ab17      	add	r3, sp, #92	; 0x5c
    3b5a:	f8cd 9000 	str.w	r9, [sp]
    3b5e:	4639      	mov	r1, r7
    3b60:	4630      	mov	r0, r6
    3b62:	f102 0a01 	add.w	sl, r2, #1
    3b66:	f7ff fae3 	bl	3130 <cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
    3b6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d04c      	beq.n	3c0a <shell_process+0x2d6>
    3b70:	6819      	ldr	r1, [r3, #0]
    3b72:	4658      	mov	r0, fp
    3b74:	f002 f93a 	bl	5dec <strcmp>
    3b78:	2800      	cmp	r0, #0
    3b7a:	d146      	bne.n	3c0a <shell_process+0x2d6>
			return entry;
    3b7c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
		if (entry) {
    3b80:	f1ba 0f00 	cmp.w	sl, #0
    3b84:	f43f aeef 	beq.w	3966 <shell_process+0x32>
			(*match_arg)++;
    3b88:	3701      	adds	r7, #1
	while (*match_arg < argc) {
    3b8a:	42bd      	cmp	r5, r7
			prev_cmd = entry->subcmd;
    3b8c:	f8da 6008 	ldr.w	r6, [sl, #8]
	while (*match_arg < argc) {
    3b90:	d1dd      	bne.n	3b4e <shell_process+0x21a>
	find_completion_candidates(cmd, argv[arg_idx], &first, &cnt, &longest);
    3b92:	ab28      	add	r3, sp, #160	; 0xa0
    3b94:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	*cnt = 0;
    3b98:	f04f 0b00 	mov.w	fp, #0
	find_completion_candidates(cmd, argv[arg_idx], &first, &cnt, &longest);
    3b9c:	f853 3c34 	ldr.w	r3, [r3, #-52]
    3ba0:	9304      	str	r3, [sp, #16]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    3ba2:	4618      	mov	r0, r3
    3ba4:	f7ff fabf 	bl	3126 <shell_strlen>
	size_t idx = 0;
    3ba8:	465d      	mov	r5, fp
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
    3baa:	4681      	mov	r9, r0
	*longest = 0;
    3bac:	f8cd b014 	str.w	fp, [sp, #20]
	bool found = false;
    3bb0:	465e      	mov	r6, fp
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3bb2:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
    3bb6:	f1ba 0f00 	cmp.w	sl, #0
    3bba:	d02b      	beq.n	3c14 <shell_process+0x2e0>
    3bbc:	f8da 0008 	ldr.w	r0, [sl, #8]
    3bc0:	f8cd 8000 	str.w	r8, [sp]
    3bc4:	f11a 0300 	adds.w	r3, sl, #0
    3bc8:	bf18      	it	ne
    3bca:	2301      	movne	r3, #1
    3bcc:	9302      	str	r3, [sp, #8]
    3bce:	462a      	mov	r2, r5
    3bd0:	ab13      	add	r3, sp, #76	; 0x4c
    3bd2:	9902      	ldr	r1, [sp, #8]
    3bd4:	f7ff faac 	bl	3130 <cmd_get>
		if (!candidate) {
    3bd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3bda:	b1eb      	cbz	r3, 3c18 <shell_process+0x2e4>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    3bdc:	464a      	mov	r2, r9
    3bde:	9904      	ldr	r1, [sp, #16]
    3be0:	6818      	ldr	r0, [r3, #0]
    3be2:	f002 f910 	bl	5e06 <strncmp>
		if (is_completion_candidate(candidate->syntax, incompl_cmd,
    3be6:	b970      	cbnz	r0, 3c06 <shell_process+0x2d2>
			size_t slen = strlen(candidate->syntax);
    3be8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3bea:	6818      	ldr	r0, [r3, #0]
    3bec:	f002 f8f6 	bl	5ddc <strlen>
			*longest = (slen > *longest) ? slen : *longest;
    3bf0:	9b05      	ldr	r3, [sp, #20]
    3bf2:	4283      	cmp	r3, r0
    3bf4:	bf38      	it	cc
    3bf6:	4603      	movcc	r3, r0
    3bf8:	b29b      	uxth	r3, r3
    3bfa:	9305      	str	r3, [sp, #20]
			(*cnt)++;
    3bfc:	f10b 0b01 	add.w	fp, fp, #1
			if (!found) {
    3c00:	b90e      	cbnz	r6, 3c06 <shell_process+0x2d2>
				*first_idx = idx;
    3c02:	9503      	str	r5, [sp, #12]
			found = true;
    3c04:	2601      	movs	r6, #1
		idx++;
    3c06:	3501      	adds	r5, #1
    3c08:	e7d5      	b.n	3bb6 <shell_process+0x282>
	} while (entry);
    3c0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		cmd_get(cmd, lvl, idx++, &entry, d_entry);
    3c0c:	4652      	mov	r2, sl
	} while (entry);
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d1a2      	bne.n	3b58 <shell_process+0x224>
    3c12:	e6a8      	b.n	3966 <shell_process+0x32>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3c14:	4650      	mov	r0, sl
    3c16:	e7d3      	b.n	3bc0 <shell_process+0x28c>
	if (!cnt) {
    3c18:	f1bb 0f00 	cmp.w	fp, #0
    3c1c:	f43f aea3 	beq.w	3966 <shell_process+0x32>
    3c20:	aa28      	add	r2, sp, #160	; 0xa0
    3c22:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	} else if (cnt == 1) {
    3c26:	f1bb 0f01 	cmp.w	fp, #1
    3c2a:	f852 6c34 	ldr.w	r6, [r2, #-52]
    3c2e:	d148      	bne.n	3cc2 <shell_process+0x38e>
	size_t arg_len = shell_strlen(arg);
    3c30:	4630      	mov	r0, r6
    3c32:	f7ff fa78 	bl	3126 <shell_strlen>
    3c36:	4605      	mov	r5, r0
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3c38:	f1ba 0f00 	cmp.w	sl, #0
    3c3c:	d035      	beq.n	3caa <shell_process+0x376>
    3c3e:	f8da 0008 	ldr.w	r0, [sl, #8]
    3c42:	68a3      	ldr	r3, [r4, #8]
    3c44:	3304      	adds	r3, #4
    3c46:	9300      	str	r3, [sp, #0]
    3c48:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    3c4c:	ab17      	add	r3, sp, #92	; 0x5c
    3c4e:	f7ff fa6f 	bl	3130 <cmd_get>
	cmd_len = shell_strlen(match->syntax);
    3c52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3c54:	6818      	ldr	r0, [r3, #0]
    3c56:	f7ff fa66 	bl	3126 <shell_strlen>
	if (cmd_len != arg_len) {
    3c5a:	4285      	cmp	r5, r0
    3c5c:	d007      	beq.n	3c6e <shell_process+0x33a>
					   match->syntax + arg_len,
    3c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		shell_op_completion_insert(shell,
    3c60:	6819      	ldr	r1, [r3, #0]
    3c62:	1b42      	subs	r2, r0, r5
    3c64:	b292      	uxth	r2, r2
    3c66:	4429      	add	r1, r5
    3c68:	4620      	mov	r0, r4
    3c6a:	f000 fdcc 	bl	4806 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    3c6e:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    3c70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
	if (!isspace((int) shell->ctx->cmd_buff[
    3c72:	441a      	add	r2, r3
    3c74:	f892 002c 	ldrb.w	r0, [r2, #44]	; 0x2c
    3c78:	f7ff fa3e 	bl	30f8 <isspace>
    3c7c:	b9e0      	cbnz	r0, 3cb8 <shell_process+0x384>
		if (shell->ctx->internal.flags.insert_mode) {
    3c7e:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    3c82:	07d7      	lsls	r7, r2, #31
    3c84:	d513      	bpl.n	3cae <shell_process+0x37a>
			shell->ctx->internal.flags.insert_mode = 0;
    3c86:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    3c8a:	f360 0200 	bfi	r2, r0, #0, #1
    3c8e:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
			shell_op_char_insert(shell, ' ');
    3c92:	2120      	movs	r1, #32
    3c94:	4620      	mov	r0, r4
    3c96:	f000 fd71 	bl	477c <shell_op_char_insert>
			shell->ctx->internal.flags.insert_mode = 1;
    3c9a:	68a2      	ldr	r2, [r4, #8]
    3c9c:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    3ca0:	f043 0301 	orr.w	r3, r3, #1
		EXIT_HISTORY_REQUEST(shell);
    3ca4:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
    3ca8:	e65d      	b.n	3966 <shell_process+0x32>
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3caa:	4650      	mov	r0, sl
    3cac:	e7c9      	b.n	3c42 <shell_process+0x30e>
			shell_op_char_insert(shell, ' ');
    3cae:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
    3cb0:	4620      	mov	r0, r4
    3cb2:	f000 fd63 	bl	477c <shell_op_char_insert>
    3cb6:	e656      	b.n	3966 <shell_process+0x32>
		shell_op_cursor_move(shell, 1);
    3cb8:	2101      	movs	r1, #1
    3cba:	4620      	mov	r0, r4
    3cbc:	f000 fc44 	bl	4548 <shell_op_cursor_move>
    3cc0:	e651      	b.n	3966 <shell_process+0x32>
	size_t str_len = shell_strlen(str);
    3cc2:	4630      	mov	r0, r6
    3cc4:	9304      	str	r3, [sp, #16]
    3cc6:	f7ff fa2e 	bl	3126 <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3cca:	68a2      	ldr	r2, [r4, #8]
    3ccc:	9b04      	ldr	r3, [sp, #16]
    3cce:	8493      	strh	r3, [r2, #36]	; 0x24
    3cd0:	9b03      	ldr	r3, [sp, #12]
	size_t str_len = shell_strlen(str);
    3cd2:	9007      	str	r0, [sp, #28]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3cd4:	f8cd b010 	str.w	fp, [sp, #16]
    3cd8:	9306      	str	r3, [sp, #24]
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3cda:	f1ba 0f00 	cmp.w	sl, #0
    3cde:	d052      	beq.n	3d86 <shell_process+0x452>
    3ce0:	f8da 0008 	ldr.w	r0, [sl, #8]
    3ce4:	68a3      	ldr	r3, [r4, #8]
    3ce6:	9a06      	ldr	r2, [sp, #24]
    3ce8:	9902      	ldr	r1, [sp, #8]
    3cea:	3304      	adds	r3, #4
    3cec:	9300      	str	r3, [sp, #0]
    3cee:	ab17      	add	r3, sp, #92	; 0x5c
    3cf0:	f7ff fa1e 	bl	3130 <cmd_get>
		idx++;
    3cf4:	9b06      	ldr	r3, [sp, #24]
    3cf6:	3301      	adds	r3, #1
    3cf8:	9306      	str	r3, [sp, #24]
		if (str && match->syntax &&
    3cfa:	2e00      	cmp	r6, #0
    3cfc:	d145      	bne.n	3d8a <shell_process+0x456>
		tab_item_print(shell, match->syntax, longest);
    3cfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3d00:	f8d3 8000 	ldr.w	r8, [r3]
	if (option == NULL) {
    3d04:	f1b8 0f00 	cmp.w	r8, #0
    3d08:	d14a      	bne.n	3da0 <shell_process+0x46c>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3d0a:	68a3      	ldr	r3, [r4, #8]
    3d0c:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
	while (cnt) {
    3d10:	9b04      	ldr	r3, [sp, #16]
    3d12:	3b01      	subs	r3, #1
    3d14:	9304      	str	r3, [sp, #16]
    3d16:	d1e0      	bne.n	3cda <shell_process+0x3a6>
	shell_fprintf(shell, SHELL_INFO, "\r\n%s", shell->prompt);
    3d18:	6823      	ldr	r3, [r4, #0]
    3d1a:	4aa7      	ldr	r2, [pc, #668]	; (3fb8 <shell_process+0x684>)
    3d1c:	2103      	movs	r1, #3
    3d1e:	4620      	mov	r0, r4
    3d20:	f7ff fb54 	bl	33cc <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%s", shell->ctx->cmd_buff);
    3d24:	68a3      	ldr	r3, [r4, #8]
    3d26:	4aa5      	ldr	r2, [pc, #660]	; (3fbc <shell_process+0x688>)
    3d28:	9904      	ldr	r1, [sp, #16]
    3d2a:	332c      	adds	r3, #44	; 0x2c
    3d2c:	4620      	mov	r0, r4
    3d2e:	f7ff fb4d 	bl	33cc <shell_fprintf>
	shell_op_cursor_position_synchronize(shell);
    3d32:	4620      	mov	r0, r4
    3d34:	f000 fbe2 	bl	44fc <shell_op_cursor_position_synchronize>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    3d38:	ab28      	add	r3, sp, #160	; 0xa0
    3d3a:	eb03 0087 	add.w	r0, r3, r7, lsl #2
    3d3e:	f850 8c34 	ldr.w	r8, [r0, #-52]
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3d42:	f1ba 0f00 	cmp.w	sl, #0
    3d46:	d063      	beq.n	3e10 <shell_process+0x4dc>
    3d48:	f8da 0008 	ldr.w	r0, [sl, #8]
    3d4c:	ab13      	add	r3, sp, #76	; 0x4c
    3d4e:	9300      	str	r3, [sp, #0]
    3d50:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    3d54:	ab0d      	add	r3, sp, #52	; 0x34
    3d56:	f7ff f9eb 	bl	3130 <cmd_get>
	*str = match->syntax;
    3d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d5c:	681f      	ldr	r7, [r3, #0]
	for (size_t idx = first + 1; idx < first + cnt; idx++) {
    3d5e:	9b03      	ldr	r3, [sp, #12]
	u16_t common = UINT16_MAX;
    3d60:	f64f 75ff 	movw	r5, #65535	; 0xffff
	for (size_t idx = first + 1; idx < first + cnt; idx++) {
    3d64:	1c5e      	adds	r6, r3, #1
    3d66:	449b      	add	fp, r3
    3d68:	455e      	cmp	r6, fp
    3d6a:	d353      	bcc.n	3e14 <shell_process+0x4e0>
	int arg_len = shell_strlen(arg);
    3d6c:	4640      	mov	r0, r8
    3d6e:	f7ff f9da 	bl	3126 <shell_strlen>
	if (common) {
    3d72:	2d00      	cmp	r5, #0
    3d74:	f43f adf7 	beq.w	3966 <shell_process+0x32>
		shell_op_completion_insert(shell, &completion[arg_len],
    3d78:	1a2a      	subs	r2, r5, r0
    3d7a:	1839      	adds	r1, r7, r0
    3d7c:	b292      	uxth	r2, r2
    3d7e:	4620      	mov	r0, r4
    3d80:	f000 fd41 	bl	4806 <shell_op_completion_insert>
    3d84:	e5ef      	b.n	3966 <shell_process+0x32>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3d86:	4650      	mov	r0, sl
    3d88:	e7ac      	b.n	3ce4 <shell_process+0x3b0>
		if (str && match->syntax &&
    3d8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3d8c:	6818      	ldr	r0, [r3, #0]
    3d8e:	2800      	cmp	r0, #0
    3d90:	d0b5      	beq.n	3cfe <shell_process+0x3ca>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    3d92:	9a07      	ldr	r2, [sp, #28]
    3d94:	4631      	mov	r1, r6
    3d96:	f002 f836 	bl	5e06 <strncmp>
		if (str && match->syntax &&
    3d9a:	2800      	cmp	r0, #0
    3d9c:	d0af      	beq.n	3cfe <shell_process+0x3ca>
    3d9e:	e79c      	b.n	3cda <shell_process+0x3a6>
	longest_option += shell_strlen(tab);
    3da0:	4887      	ldr	r0, [pc, #540]	; (3fc0 <shell_process+0x68c>)
    3da2:	f7ff f9c0 	bl	3126 <shell_strlen>
    3da6:	9b05      	ldr	r3, [sp, #20]
    3da8:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3daa:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
    3dac:	fa1f f980 	uxth.w	r9, r0
			- shell_strlen(tab)) / longest_option;
    3db0:	4883      	ldr	r0, [pc, #524]	; (3fc0 <shell_process+0x68c>)
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3db2:	8bdd      	ldrh	r5, [r3, #30]
			- shell_strlen(tab)) / longest_option;
    3db4:	f7ff f9b7 	bl	3126 <shell_strlen>
    3db8:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
    3dba:	4640      	mov	r0, r8
    3dbc:	f7ff f9b3 	bl	3126 <shell_strlen>
    3dc0:	eba9 0000 	sub.w	r0, r9, r0
    3dc4:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0) {
    3dc6:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
    3dc8:	9308      	str	r3, [sp, #32]
			- shell_strlen(tab)) / longest_option;
    3dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0) {
    3dcc:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
    3dce:	1aed      	subs	r5, r5, r3
    3dd0:	fbb5 f9f9 	udiv	r9, r5, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0) {
    3dd4:	fa1f f989 	uxth.w	r9, r9
    3dd8:	1c50      	adds	r0, r2, #1
    3dda:	fbb2 f3f9 	udiv	r3, r2, r9
    3dde:	fb09 2213 	mls	r2, r9, r3, r2
    3de2:	b292      	uxth	r2, r2
    3de4:	8488      	strh	r0, [r1, #36]	; 0x24
    3de6:	b962      	cbnz	r2, 3e02 <shell_process+0x4ce>
		shell_fprintf(shell, SHELL_OPTION, "\r\n%s%s", tab, option);
    3de8:	f8cd 8000 	str.w	r8, [sp]
    3dec:	4b74      	ldr	r3, [pc, #464]	; (3fc0 <shell_process+0x68c>)
    3dee:	4a75      	ldr	r2, [pc, #468]	; (3fc4 <shell_process+0x690>)
    3df0:	2107      	movs	r1, #7
    3df2:	4620      	mov	r0, r4
    3df4:	f7ff faea 	bl	33cc <shell_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
    3df8:	9908      	ldr	r1, [sp, #32]
    3dfa:	4620      	mov	r0, r4
    3dfc:	f000 fb46 	bl	448c <shell_op_cursor_horiz_move>
    3e00:	e786      	b.n	3d10 <shell_process+0x3dc>
		shell_fprintf(shell, SHELL_OPTION, "%s", option);
    3e02:	4643      	mov	r3, r8
    3e04:	4a6d      	ldr	r2, [pc, #436]	; (3fbc <shell_process+0x688>)
    3e06:	2107      	movs	r1, #7
    3e08:	4620      	mov	r0, r4
    3e0a:	f7ff fadf 	bl	33cc <shell_fprintf>
    3e0e:	e7f3      	b.n	3df8 <shell_process+0x4c4>
	cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3e10:	4650      	mov	r0, sl
    3e12:	e79b      	b.n	3d4c <shell_process+0x418>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3e14:	f1ba 0f00 	cmp.w	sl, #0
    3e18:	d01e      	beq.n	3e58 <shell_process+0x524>
    3e1a:	f8da 0008 	ldr.w	r0, [sl, #8]
    3e1e:	9902      	ldr	r1, [sp, #8]
    3e20:	ab17      	add	r3, sp, #92	; 0x5c
    3e22:	9300      	str	r3, [sp, #0]
    3e24:	4632      	mov	r2, r6
    3e26:	ab0e      	add	r3, sp, #56	; 0x38
    3e28:	f7ff f982 	bl	3130 <cmd_get>
		curr_common = shell_str_common(match->syntax, match2->syntax,
    3e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e2e:	6819      	ldr	r1, [r3, #0]
    3e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3e32:	6818      	ldr	r0, [r3, #0]
	size_t common = 0;
    3e34:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3e36:	f811 c002 	ldrb.w	ip, [r1, r2]
    3e3a:	5c83      	ldrb	r3, [r0, r2]
    3e3c:	4563      	cmp	r3, ip
    3e3e:	d105      	bne.n	3e4c <shell_process+0x518>
    3e40:	b123      	cbz	r3, 3e4c <shell_process+0x518>
		common++;
    3e42:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3e48:	429a      	cmp	r2, r3
    3e4a:	d1f4      	bne.n	3e36 <shell_process+0x502>
		common = (curr_common < common) ? curr_common : common;
    3e4c:	4295      	cmp	r5, r2
    3e4e:	bfa8      	it	ge
    3e50:	4615      	movge	r5, r2
    3e52:	b2ad      	uxth	r5, r5
	for (size_t idx = first + 1; idx < first + cnt; idx++) {
    3e54:	3601      	adds	r6, #1
    3e56:	e787      	b.n	3d68 <shell_process+0x434>
		cmd_get(cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
    3e58:	4650      	mov	r0, sl
    3e5a:	e7e0      	b.n	3e1e <shell_process+0x4ea>
    3e5c:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    3e60:	071e      	lsls	r6, r3, #28
    3e62:	f57f ad80 	bpl.w	3966 <shell_process+0x32>
					EXIT_HISTORY_REQUEST(shell);
    3e66:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
    3e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3e6e:	f880 324c 	strb.w	r3, [r0, #588]	; 0x24c
						shell_op_char_backspace(shell);
    3e72:	4620      	mov	r0, r4
    3e74:	f000 fcb6 	bl	47e4 <shell_op_char_backspace>
    3e78:	e575      	b.n	3966 <shell_process+0x32>
	switch (data) {
    3e7a:	2905      	cmp	r1, #5
    3e7c:	d076      	beq.n	3f6c <shell_process+0x638>
    3e7e:	d819      	bhi.n	3eb4 <shell_process+0x580>
    3e80:	2901      	cmp	r1, #1
    3e82:	d079      	beq.n	3f78 <shell_process+0x644>
    3e84:	2903      	cmp	r1, #3
    3e86:	f47f ad6e 	bne.w	3966 <shell_process+0x32>
		shell_op_cursor_end_move(shell);
    3e8a:	4620      	mov	r0, r4
    3e8c:	f000 fc40 	bl	4710 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
    3e90:	4620      	mov	r0, r4
    3e92:	f000 fb0b 	bl	44ac <shell_cursor_in_empty_line>
    3e96:	b910      	cbnz	r0, 3e9e <shell_process+0x56a>
			cursor_next_line_move(shell);
    3e98:	6960      	ldr	r0, [r4, #20]
    3e9a:	f7ff f973 	bl	3184 <cursor_next_line_move.isra.14>
		EXIT_HISTORY_REQUEST(shell);
    3e9e:	68a2      	ldr	r2, [r4, #8]
    3ea0:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    3ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3ea8:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
		shell_state_set(shell, SHELL_STATE_ACTIVE);
    3eac:	4620      	mov	r0, r4
    3eae:	f7ff fb65 	bl	357c <shell_state_set.constprop.31>
    3eb2:	e558      	b.n	3966 <shell_process+0x32>
	switch (data) {
    3eb4:	2915      	cmp	r1, #21
    3eb6:	d024      	beq.n	3f02 <shell_process+0x5ce>
    3eb8:	2917      	cmp	r1, #23
    3eba:	d037      	beq.n	3f2c <shell_process+0x5f8>
    3ebc:	290c      	cmp	r1, #12
    3ebe:	f47f ad52 	bne.w	3966 <shell_process+0x32>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3ec2:	4a41      	ldr	r2, [pc, #260]	; (3fc8 <shell_process+0x694>)
    3ec4:	493d      	ldr	r1, [pc, #244]	; (3fbc <shell_process+0x688>)
    3ec6:	6960      	ldr	r0, [r4, #20]
    3ec8:	f7ff f920 	bl	310c <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3ecc:	4a3f      	ldr	r2, [pc, #252]	; (3fcc <shell_process+0x698>)
    3ece:	493b      	ldr	r1, [pc, #236]	; (3fbc <shell_process+0x688>)
    3ed0:	6960      	ldr	r0, [r4, #20]
    3ed2:	f7ff f91b 	bl	310c <shell_raw_fprintf>
		shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    3ed6:	6823      	ldr	r3, [r4, #0]
    3ed8:	4a38      	ldr	r2, [pc, #224]	; (3fbc <shell_process+0x688>)
    3eda:	2103      	movs	r1, #3
    3edc:	4620      	mov	r0, r4
    3ede:	f7ff fa75 	bl	33cc <shell_fprintf>
		if (flag_echo_is_set(shell)) {
    3ee2:	68a3      	ldr	r3, [r4, #8]
    3ee4:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    3ee8:	0711      	lsls	r1, r2, #28
    3eea:	f57f ad3c 	bpl.w	3966 <shell_process+0x32>
			shell_fprintf(shell, SHELL_NORMAL, "%s",
    3eee:	4620      	mov	r0, r4
    3ef0:	332c      	adds	r3, #44	; 0x2c
    3ef2:	4a32      	ldr	r2, [pc, #200]	; (3fbc <shell_process+0x688>)
    3ef4:	2100      	movs	r1, #0
    3ef6:	f7ff fa69 	bl	33cc <shell_fprintf>
			shell_op_cursor_position_synchronize(shell);
    3efa:	4620      	mov	r0, r4
    3efc:	f000 fafe 	bl	44fc <shell_op_cursor_position_synchronize>
    3f00:	e531      	b.n	3966 <shell_process+0x32>
		shell_op_cursor_home_move(shell);
    3f02:	4620      	mov	r0, r4
    3f04:	f000 fbfe 	bl	4704 <shell_op_cursor_home_move>
		shell_cmd_buffer_clear(shell);
    3f08:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    3f0a:	492c      	ldr	r1, [pc, #176]	; (3fbc <shell_process+0x688>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3f0c:	2200      	movs	r2, #0
    3f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	shell->ctx->cmd_buff_pos = 0;
    3f12:	851a      	strh	r2, [r3, #40]	; 0x28
	shell->ctx->cmd_buff_len = 0;
    3f14:	84da      	strh	r2, [r3, #38]	; 0x26
		EXIT_HISTORY_REQUEST(shell);
    3f16:	f893 224c 	ldrb.w	r2, [r3, #588]	; 0x24c
    3f1a:	6960      	ldr	r0, [r4, #20]
    3f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3f20:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
    3f24:	4a2a      	ldr	r2, [pc, #168]	; (3fd0 <shell_process+0x69c>)
    3f26:	f7ff f8f1 	bl	310c <shell_raw_fprintf>
    3f2a:	e51c      	b.n	3966 <shell_process+0x32>
		shell_op_word_remove(shell);
    3f2c:	4620      	mov	r0, r4
    3f2e:	f000 fb8f 	bl	4650 <shell_op_word_remove>
		EXIT_HISTORY_REQUEST(shell);
    3f32:	68a2      	ldr	r2, [r4, #8]
    3f34:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    3f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3f3c:	e6b2      	b.n	3ca4 <shell_process+0x370>
			if (data == '[') {
    3f3e:	295b      	cmp	r1, #91	; 0x5b
    3f40:	d101      	bne.n	3f46 <shell_process+0x612>
	shell->ctx->receive_state = state;
    3f42:	2302      	movs	r3, #2
    3f44:	e5c8      	b.n	3ad8 <shell_process+0x1a4>
    3f46:	2300      	movs	r3, #0
    3f48:	e5c6      	b.n	3ad8 <shell_process+0x1a4>
				history_handle(shell, true);
    3f4a:	2101      	movs	r1, #1
				history_handle(shell, false);
    3f4c:	4620      	mov	r0, r4
    3f4e:	f7ff fa8b 	bl	3468 <history_handle>
    3f52:	e508      	b.n	3966 <shell_process+0x32>
    3f54:	2100      	movs	r1, #0
    3f56:	e7f9      	b.n	3f4c <shell_process+0x618>
				shell_op_right_arrow(shell);
    3f58:	4620      	mov	r0, r4
    3f5a:	f000 fbe8 	bl	472e <shell_op_right_arrow>
    3f5e:	e502      	b.n	3966 <shell_process+0x32>
				shell_op_left_arrow(shell);
    3f60:	4620      	mov	r0, r4
    3f62:	f000 fbdc 	bl	471e <shell_op_left_arrow>
    3f66:	e4fe      	b.n	3966 <shell_process+0x32>
	shell->ctx->receive_state = state;
    3f68:	2303      	movs	r3, #3
    3f6a:	7043      	strb	r3, [r0, #1]
		shell_op_cursor_end_move(shell);
    3f6c:	4620      	mov	r0, r4
    3f6e:	f000 fbcf 	bl	4710 <shell_op_cursor_end_move>
    3f72:	e4f8      	b.n	3966 <shell_process+0x32>
	shell->ctx->receive_state = state;
    3f74:	2303      	movs	r3, #3
    3f76:	7043      	strb	r3, [r0, #1]
		shell_op_cursor_home_move(shell);
    3f78:	4620      	mov	r0, r4
    3f7a:	f000 fbc3 	bl	4704 <shell_op_cursor_home_move>
    3f7e:	e4f2      	b.n	3966 <shell_process+0x32>
	shell->ctx->receive_state = state;
    3f80:	2303      	movs	r3, #3
    3f82:	7043      	strb	r3, [r0, #1]
				shell->ctx->internal.flags.insert_mode ^= 1;
    3f84:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
    3f88:	f890 224c 	ldrb.w	r2, [r0, #588]	; 0x24c
    3f8c:	f003 0301 	and.w	r3, r3, #1
    3f90:	f083 0301 	eor.w	r3, r3, #1
    3f94:	f363 0200 	bfi	r2, r3, #0, #1
    3f98:	f880 224c 	strb.w	r2, [r0, #588]	; 0x24c
    3f9c:	e4e3      	b.n	3966 <shell_process+0x32>
	shell->ctx->receive_state = state;
    3f9e:	2303      	movs	r3, #3
    3fa0:	7043      	strb	r3, [r0, #1]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    3fa2:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
				if (flag_echo_is_set(shell)) {
    3fa6:	071b      	lsls	r3, r3, #28
    3fa8:	f57f acdd 	bpl.w	3966 <shell_process+0x32>
    3fac:	e58f      	b.n	3ace <shell_process+0x19a>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    3fae:	2700      	movs	r7, #0
		*cmd = NULL;
    3fb0:	46ba      	mov	sl, r7
    3fb2:	e5ee      	b.n	3b92 <shell_process+0x25e>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
    3fb4:	4607      	mov	r7, r0
    3fb6:	e7fb      	b.n	3fb0 <shell_process+0x67c>
    3fb8:	0002db76 	.word	0x0002db76
    3fbc:	0002db78 	.word	0x0002db78
    3fc0:	00033fc2 	.word	0x00033fc2
    3fc4:	0002db6f 	.word	0x0002db6f
    3fc8:	0002dab0 	.word	0x0002dab0
    3fcc:	0002dab4 	.word	0x0002dab4
    3fd0:	0002daa8 	.word	0x0002daa8

00003fd4 <shell_thread>:
{
    3fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd6:	4604      	mov	r4, r0
    3fd8:	b085      	sub	sp, #20
    3fda:	f44f 7624 	mov.w	r6, #656	; 0x290
    3fde:	f44f 7514 	mov.w	r5, #592	; 0x250
		k_poll_signal_init(&shell->ctx->signals[i]);
    3fe2:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_INIT, k_poll_signal_init, struct k_poll_signal *, signal)
    3fe4:	4428      	add	r0, r5
    3fe6:	f028 ff4f 	bl	2ce88 <_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
    3fea:	68a0      	ldr	r0, [r4, #8]
    3fec:	2200      	movs	r2, #0
    3fee:	1943      	adds	r3, r0, r5
    3ff0:	2101      	movs	r1, #1
    3ff2:	4430      	add	r0, r6
    3ff4:	3510      	adds	r5, #16
    3ff6:	f028 fe9f 	bl	2cd38 <k_poll_event_init>
	for (i = 0; i < SHELL_SIGNALS; i++) {
    3ffa:	f5b5 7f24 	cmp.w	r5, #656	; 0x290
    3ffe:	f106 0614 	add.w	r6, r6, #20
    4002:	d1ee      	bne.n	3fe2 <shell_thread+0xe>
	err = shell_start(shell);
    4004:	4620      	mov	r0, r4
    4006:	f7ff fac9 	bl	359c <shell_start>
	if (err != 0) {
    400a:	2800      	cmp	r0, #0
    400c:	d17d      	bne.n	410a <shell_thread+0x136>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    400e:	4f40      	ldr	r7, [pc, #256]	; (4110 <shell_thread+0x13c>)
    4010:	4d40      	ldr	r5, [pc, #256]	; (4114 <shell_thread+0x140>)
		err = k_poll(shell->ctx->events, SHELL_SIGNALS, K_FOREVER);
    4012:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    4014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4018:	2104      	movs	r1, #4
    401a:	f500 7024 	add.w	r0, r0, #656	; 0x290
    401e:	f028 fea1 	bl	2cd64 <_impl_k_poll>
		k_poll_signal_check(&shell->ctx->signals[SHELL_SIGNAL_KILL],
    4022:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    4024:	aa01      	add	r2, sp, #4
    4026:	4669      	mov	r1, sp
    4028:	f500 7020 	add.w	r0, r0, #640	; 0x280
    402c:	f028 ff31 	bl	2ce92 <_impl_k_poll_signal_check>
		if (signaled) {
    4030:	9b00      	ldr	r3, [sp, #0]
    4032:	b1cb      	cbz	r3, 4068 <shell_thread+0x94>
				&shell->ctx->signals[SHELL_SIGNAL_KILL]);
    4034:	68a3      	ldr	r3, [r4, #8]
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void _impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0;
    4036:	2200      	movs	r2, #0
    4038:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	return shell->ctx->internal.flags.processing == 1 ? true : false;
    403c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
	if (flag_processing_is_set(shell)) {
    4040:	06d9      	lsls	r1, r3, #27
    4042:	d40d      	bmi.n	4060 <shell_thread+0x8c>
		shell_log_backend_disable(shell->log_backend);
    4044:	69e0      	ldr	r0, [r4, #28]
    4046:	f000 ffef 	bl	5028 <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
    404a:	6860      	ldr	r0, [r4, #4]
    404c:	6803      	ldr	r3, [r0, #0]
    404e:	685b      	ldr	r3, [r3, #4]
    4050:	4798      	blx	r3
	if (err != 0) {
    4052:	4606      	mov	r6, r0
    4054:	b920      	cbnz	r0, 4060 <shell_thread+0x8c>
	shell_history_purge(shell->history);
    4056:	68e0      	ldr	r0, [r4, #12]
    4058:	f000 ff31 	bl	4ebe <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
    405c:	68a3      	ldr	r3, [r4, #8]
    405e:	701e      	strb	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    4060:	f028 f97e 	bl	2c360 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    4064:	f001 fd5e 	bl	5b24 <_impl_k_thread_abort>
		k_poll_signal_check(&shell->ctx->signals[SHELL_SIGNAL_LOG_MSG],
    4068:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)
    406a:	aa01      	add	r2, sp, #4
    406c:	4669      	mov	r1, sp
    406e:	f500 701c 	add.w	r0, r0, #624	; 0x270
    4072:	f028 ff0e 	bl	2ce92 <_impl_k_poll_signal_check>
		if (!signaled) {
    4076:	9a00      	ldr	r2, [sp, #0]
    4078:	68a3      	ldr	r3, [r4, #8]
    407a:	b93a      	cbnz	r2, 408c <shell_thread+0xb8>
    407c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    4080:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
			shell_process(shell);
    4084:	4620      	mov	r0, r4
    4086:	f7ff fc55 	bl	3934 <shell_process>
    408a:	e7c2      	b.n	4012 <shell_thread+0x3e>
    408c:	2200      	movs	r2, #0
    408e:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    4092:	68a0      	ldr	r0, [r4, #8]
    4094:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    4096:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    4098:	3014      	adds	r0, #20
    409a:	f000 f8c3 	bl	4224 <shell_multiline_data_calc>
	shell_op_cursor_horiz_move(shell, -shell->ctx->vt100_ctx.cons.cur_x);
    409e:	68a3      	ldr	r3, [r4, #8]
    40a0:	8a99      	ldrh	r1, [r3, #20]
    40a2:	4620      	mov	r0, r4
    40a4:	4249      	negs	r1, r1
    40a6:	f000 f9f1 	bl	448c <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    40aa:	68a3      	ldr	r3, [r4, #8]
    40ac:	8b19      	ldrh	r1, [r3, #24]
    40ae:	4620      	mov	r0, r4
    40b0:	3901      	subs	r1, #1
    40b2:	f000 f9db 	bl	446c <shell_op_cursor_vert_move>
    40b6:	463a      	mov	r2, r7
    40b8:	4629      	mov	r1, r5
    40ba:	6960      	ldr	r0, [r4, #20]
    40bc:	f7ff f826 	bl	310c <shell_raw_fprintf>
		processed = shell_log_backend_process(shell->log_backend);
    40c0:	69e0      	ldr	r0, [r4, #28]
    40c2:	f000 ffc1 	bl	5048 <shell_log_backend_process>
	shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    40c6:	6823      	ldr	r3, [r4, #0]
    40c8:	462a      	mov	r2, r5
		processed = shell_log_backend_process(shell->log_backend);
    40ca:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_INFO, "%s", shell->prompt);
    40cc:	2103      	movs	r1, #3
    40ce:	4620      	mov	r0, r4
    40d0:	f7ff f97c 	bl	33cc <shell_fprintf>
	if (flag_echo_is_set(shell)) {
    40d4:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    40d6:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    40da:	0712      	lsls	r2, r2, #28
    40dc:	d508      	bpl.n	40f0 <shell_thread+0x11c>
		shell_fprintf(shell, SHELL_NORMAL, "%s", shell->ctx->cmd_buff);
    40de:	4620      	mov	r0, r4
    40e0:	332c      	adds	r3, #44	; 0x2c
    40e2:	462a      	mov	r2, r5
    40e4:	2100      	movs	r1, #0
    40e6:	f7ff f971 	bl	33cc <shell_fprintf>
		shell_op_cursor_position_synchronize(shell);
    40ea:	4620      	mov	r0, r4
    40ec:	f000 fa06 	bl	44fc <shell_op_cursor_position_synchronize>
		k_poll_signal_check(&shell->ctx->signals[SHELL_SIGNAL_RXRDY],
    40f0:	68a0      	ldr	r0, [r4, #8]
    40f2:	aa03      	add	r2, sp, #12
    40f4:	a902      	add	r1, sp, #8
    40f6:	f500 7014 	add.w	r0, r0, #592	; 0x250
    40fa:	f028 feca 	bl	2ce92 <_impl_k_poll_signal_check>
	} while (processed && !signaled);
    40fe:	2e00      	cmp	r6, #0
    4100:	d087      	beq.n	4012 <shell_thread+0x3e>
    4102:	9b02      	ldr	r3, [sp, #8]
    4104:	2b00      	cmp	r3, #0
    4106:	d0c4      	beq.n	4092 <shell_thread+0xbe>
    4108:	e783      	b.n	4012 <shell_thread+0x3e>
}
    410a:	b005      	add	sp, #20
    410c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    410e:	bf00      	nop
    4110:	0002daa8 	.word	0x0002daa8
    4114:	0002db78 	.word	0x0002db78

00004118 <shell_cmd_precheck>:

int shell_cmd_precheck(const struct shell *shell,
		       bool arg_cnt_ok,
		       const struct shell_getopt_option *opt,
		       size_t opt_len)
{
    4118:	b570      	push	{r4, r5, r6, lr}
    411a:	4615      	mov	r5, r2
	if (shell_help_requested(shell)) {
    411c:	6882      	ldr	r2, [r0, #8]
{
    411e:	461e      	mov	r6, r3
    4120:	f8d2 324c 	ldr.w	r3, [r2, #588]	; 0x24c
    4124:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4128:	4604      	mov	r4, r0
	if (shell_help_requested(shell)) {
    412a:	b12b      	cbz	r3, 4138 <shell_cmd_precheck+0x20>
		shell_help_print(shell, opt, opt_len);
    412c:	4632      	mov	r2, r6
    412e:	4629      	mov	r1, r5
    4130:	f7ff fa50 	bl	35d4 <shell_help_print>
		return 1; /* help printed */
    4134:	2001      	movs	r0, #1

		return -EINVAL;
	}

	return 0;
}
    4136:	bd70      	pop	{r4, r5, r6, pc}
	if (!arg_cnt_ok) {
    4138:	b961      	cbnz	r1, 4154 <shell_cmd_precheck+0x3c>
		shell_fprintf(shell, SHELL_ERROR,
    413a:	6853      	ldr	r3, [r2, #4]
    413c:	4a06      	ldr	r2, [pc, #24]	; (4158 <shell_cmd_precheck+0x40>)
    413e:	2102      	movs	r1, #2
    4140:	f7ff f944 	bl	33cc <shell_fprintf>
			shell_help_print(shell, opt, opt_len);
    4144:	4620      	mov	r0, r4
    4146:	4632      	mov	r2, r6
    4148:	4629      	mov	r1, r5
    414a:	f7ff fa43 	bl	35d4 <shell_help_print>
		return -EINVAL;
    414e:	f06f 0015 	mvn.w	r0, #21
    4152:	e7f0      	b.n	4136 <shell_cmd_precheck+0x1e>
	return 0;
    4154:	4618      	mov	r0, r3
    4156:	e7ee      	b.n	4136 <shell_cmd_precheck+0x1e>
    4158:	0002dad5 	.word	0x0002dad5

0000415c <shell_fprintf_buffer_flush>:
}


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    415c:	6902      	ldr	r2, [r0, #16]
    415e:	6883      	ldr	r3, [r0, #8]
    4160:	6812      	ldr	r2, [r2, #0]
    4162:	6801      	ldr	r1, [r0, #0]
{
    4164:	b510      	push	{r4, lr}
    4166:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    4168:	68c0      	ldr	r0, [r0, #12]
    416a:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    416c:	6923      	ldr	r3, [r4, #16]
    416e:	2200      	movs	r2, #0
    4170:	601a      	str	r2, [r3, #0]
}
    4172:	bd10      	pop	{r4, pc}

00004174 <shell_fprintf_fmt>:
{
    4174:	b510      	push	{r4, lr}
    4176:	4604      	mov	r4, r0
	(void)_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
    4178:	4613      	mov	r3, r2
    417a:	460a      	mov	r2, r1
    417c:	4601      	mov	r1, r0
    417e:	4806      	ldr	r0, [pc, #24]	; (4198 <shell_fprintf_fmt+0x24>)
    4180:	f001 ff58 	bl	6034 <_prf>
	if (sh_fprintf->ctrl_blk->autoflush) {
    4184:	6923      	ldr	r3, [r4, #16]
    4186:	791b      	ldrb	r3, [r3, #4]
    4188:	b123      	cbz	r3, 4194 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
    418a:	4620      	mov	r0, r4
}
    418c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
    4190:	f7ff bfe4 	b.w	415c <shell_fprintf_buffer_flush>
}
    4194:	bd10      	pop	{r4, pc}
    4196:	bf00      	nop
    4198:	0000419d 	.word	0x0000419d

0000419c <out_func>:
{
    419c:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    419e:	68cb      	ldr	r3, [r1, #12]
    41a0:	7c1b      	ldrb	r3, [r3, #16]
    41a2:	2b02      	cmp	r3, #2
{
    41a4:	4605      	mov	r5, r0
    41a6:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    41a8:	d104      	bne.n	41b4 <out_func+0x18>
    41aa:	280a      	cmp	r0, #10
    41ac:	d102      	bne.n	41b4 <out_func+0x18>
		(void)out_func('\r', ctx);
    41ae:	200d      	movs	r0, #13
    41b0:	f7ff fff4 	bl	419c <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
    41b4:	6923      	ldr	r3, [r4, #16]
    41b6:	6822      	ldr	r2, [r4, #0]
    41b8:	681b      	ldr	r3, [r3, #0]
    41ba:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    41bc:	6922      	ldr	r2, [r4, #16]
    41be:	6813      	ldr	r3, [r2, #0]
    41c0:	3301      	adds	r3, #1
    41c2:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    41c4:	6862      	ldr	r2, [r4, #4]
    41c6:	4293      	cmp	r3, r2
    41c8:	d102      	bne.n	41d0 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
    41ca:	4620      	mov	r0, r4
    41cc:	f7ff ffc6 	bl	415c <shell_fprintf_buffer_flush>
}
    41d0:	2000      	movs	r0, #0
    41d2:	bd38      	pop	{r3, r4, r5, pc}

000041d4 <isspace>:
	return c == ' ' || ((unsigned)c-'\t') < 5;
    41d4:	2820      	cmp	r0, #32
    41d6:	d005      	beq.n	41e4 <isspace+0x10>
    41d8:	3809      	subs	r0, #9
    41da:	2804      	cmp	r0, #4
    41dc:	bf8c      	ite	hi
    41de:	2000      	movhi	r0, #0
    41e0:	2001      	movls	r0, #1
    41e2:	4770      	bx	lr
    41e4:	2001      	movs	r0, #1
}
    41e6:	4770      	bx	lr

000041e8 <shell_strlen>:
    41e8:	b108      	cbz	r0, 41ee <shell_strlen+0x6>
    41ea:	f001 bdf7 	b.w	5ddc <strlen>
}
    41ee:	4770      	bx	lr

000041f0 <column_span_with_buffer_offsets_get>:
}

s32_t column_span_with_buffer_offsets_get(struct shell_multiline_cons *cons,
					  u16_t offset1,
					  u16_t offset2)
{
    41f0:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    41f2:	7b03      	ldrb	r3, [r0, #12]
    41f4:	8944      	ldrh	r4, [r0, #10]
    41f6:	441a      	add	r2, r3
    41f8:	4419      	add	r1, r3
    41fa:	fb92 f0f4 	sdiv	r0, r2, r4
    41fe:	fb91 f3f4 	sdiv	r3, r1, r4
    4202:	fb04 2010 	mls	r0, r4, r0, r2
    4206:	fb04 1113 	mls	r1, r4, r3, r1
	return col_num_with_buffer_offset_get(cons, offset2)
			- col_num_with_buffer_offset_get(cons, offset1);
}
    420a:	1a40      	subs	r0, r0, r1
    420c:	bd10      	pop	{r4, pc}

0000420e <row_span_with_buffer_offsets_get>:

s32_t row_span_with_buffer_offsets_get(struct shell_multiline_cons *cons,
				       u16_t offset1,
				       u16_t offset2)
{
    420e:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    4210:	7b03      	ldrb	r3, [r0, #12]
    4212:	8944      	ldrh	r4, [r0, #10]
    4214:	441a      	add	r2, r3
    4216:	4419      	add	r1, r3
    4218:	fb92 f0f4 	sdiv	r0, r2, r4
    421c:	fb91 f1f4 	sdiv	r1, r1, r4
	return line_num_with_buffer_offset_get(cons, offset2)
		- line_num_with_buffer_offset_get(cons, offset1);
}
    4220:	1a40      	subs	r0, r0, r1
    4222:	bd10      	pop	{r4, pc}

00004224 <shell_multiline_data_calc>:

void shell_multiline_data_calc(struct shell_multiline_cons *cons,
			       u16_t buff_pos, u16_t buff_len)
{
    4224:	b530      	push	{r4, r5, lr}
	/* Current cursor position in command.
	 * +1 -> because home position is (1, 1)
	 */
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    4226:	7b04      	ldrb	r4, [r0, #12]
    4228:	8945      	ldrh	r5, [r0, #10]
    422a:	4421      	add	r1, r4
    422c:	fb91 f3f5 	sdiv	r3, r1, r5
    4230:	fb05 1113 	mls	r1, r5, r3, r1
    4234:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    4236:	3301      	adds	r3, #1

	/* Extreme position when cursor is at the end of command. */
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    4238:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    423a:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    423c:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    423e:	fb92 f3f5 	sdiv	r3, r2, r5
    4242:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    4244:	fb05 2313 	mls	r3, r5, r3, r2
    4248:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    424a:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    424c:	8043      	strh	r3, [r0, #2]
}
    424e:	bd30      	pop	{r4, r5, pc}

00004250 <shell_make_argv>:
	*ppcmd = cmd;
}


char shell_make_argv(size_t *argc, char **argv, char *cmd, u8_t max_argc)
{
    4250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4254:	4699      	mov	r9, r3
	char quote = 0;
	char c;

	*argc = 0;
    4256:	2300      	movs	r3, #0
{
    4258:	4607      	mov	r7, r0
    425a:	4688      	mov	r8, r1
    425c:	4614      	mov	r4, r2
	*argc = 0;
    425e:	6003      	str	r3, [r0, #0]
	do {
		c = *cmd;
    4260:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    4262:	b140      	cbz	r0, 4276 <shell_make_argv+0x26>
			break;
		}

		if (isspace((int) c)) {
    4264:	f7ff ffb6 	bl	41d4 <isspace>
    4268:	b160      	cbz	r0, 4284 <shell_make_argv+0x34>
			*cmd++ = '\0';
    426a:	2300      	movs	r3, #0
    426c:	7023      	strb	r3, [r4, #0]
    426e:	3401      	adds	r4, #1

		argv[(*argc)++] = cmd;
		quote = 0;

		make_argv(&cmd, c, quote);
	} while (*argc < max_argc);
    4270:	683b      	ldr	r3, [r7, #0]
    4272:	454b      	cmp	r3, r9
    4274:	d3f4      	bcc.n	4260 <shell_make_argv+0x10>

	argv[*argc] = 0;
    4276:	683b      	ldr	r3, [r7, #0]
    4278:	2000      	movs	r0, #0
    427a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]

	return quote;
}
    427e:	b003      	add	sp, #12
    4280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
    4284:	683b      	ldr	r3, [r7, #0]
    4286:	1c5a      	adds	r2, r3, #1
    4288:	603a      	str	r2, [r7, #0]
    428a:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
    428e:	4606      	mov	r6, r0
		c = *cmd;
    4290:	f894 a000 	ldrb.w	sl, [r4]
		if (c == '\0') {
    4294:	f1ba 0f00 	cmp.w	sl, #0
    4298:	d0ea      	beq.n	4270 <shell_make_argv+0x20>
		if (!quote) {
    429a:	2e00      	cmp	r6, #0
    429c:	f040 8089 	bne.w	43b2 <shell_make_argv+0x162>
			switch (c) {
    42a0:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
    42a4:	d005      	beq.n	42b2 <shell_make_argv+0x62>
    42a6:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
    42aa:	d00e      	beq.n	42ca <shell_make_argv+0x7a>
    42ac:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    42b0:	d177      	bne.n	43a2 <shell_make_argv+0x152>
				memmove(cmd, cmd + 1,
    42b2:	4620      	mov	r0, r4
    42b4:	f7ff ff98 	bl	41e8 <shell_strlen>
    42b8:	1c61      	adds	r1, r4, #1
    42ba:	4602      	mov	r2, r0
    42bc:	4620      	mov	r0, r4
    42be:	f001 fdcc 	bl	5e5a <memmove>
    42c2:	4625      	mov	r5, r4
    42c4:	4656      	mov	r6, sl
			quote = 0;
    42c6:	462c      	mov	r4, r5
    42c8:	e7e2      	b.n	4290 <shell_make_argv+0x40>
				memmove(cmd, cmd + 1,
    42ca:	1c65      	adds	r5, r4, #1
				memmove(cmd, cmd + 1,
    42cc:	4620      	mov	r0, r4
    42ce:	f7ff ff8b 	bl	41e8 <shell_strlen>
    42d2:	4629      	mov	r1, r5
    42d4:	4602      	mov	r2, r0
    42d6:	4620      	mov	r0, r4
    42d8:	f001 fdbf 	bl	5e5a <memmove>
    42dc:	e7f3      	b.n	42c6 <shell_make_argv+0x76>
		if (quote && c == '\\') {
    42de:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
    42e2:	d164      	bne.n	43ae <shell_make_argv+0x15e>
    42e4:	7862      	ldrb	r2, [r4, #1]
			if (t == quote) {
    42e6:	4296      	cmp	r6, r2
    42e8:	d0f0      	beq.n	42cc <shell_make_argv+0x7c>
			if (t == '0') {
    42ea:	2a30      	cmp	r2, #48	; 0x30
    42ec:	d126      	bne.n	433c <shell_make_argv+0xec>
    42ee:	2302      	movs	r3, #2
				u8_t v = 0;
    42f0:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    42f4:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '7') {
    42f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    42fa:	b2c9      	uxtb	r1, r1
    42fc:	2907      	cmp	r1, #7
    42fe:	fa5f fb83 	uxtb.w	fp, r3
    4302:	d818      	bhi.n	4336 <shell_make_argv+0xe6>
    4304:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
    4306:	ea41 01ca 	orr.w	r1, r1, sl, lsl #3
				for (i = 2; i < (2 + 3); i++) {
    430a:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    430c:	fa5f fa81 	uxtb.w	sl, r1
				for (i = 2; i < (2 + 3); i++) {
    4310:	d1f0      	bne.n	42f4 <shell_make_argv+0xa4>
    4312:	469b      	mov	fp, r3
					memmove(cmd, cmd + (i - 1),
    4314:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
    4318:	4421      	add	r1, r4
						shell_strlen(cmd) - (i - 2));
    431a:	4620      	mov	r0, r4
					memmove(cmd, cmd + (i - 1),
    431c:	9101      	str	r1, [sp, #4]
						shell_strlen(cmd) - (i - 2));
    431e:	f7ff ff63 	bl	41e8 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    4322:	9901      	ldr	r1, [sp, #4]
    4324:	1c82      	adds	r2, r0, #2
    4326:	eba2 020b 	sub.w	r2, r2, fp
					memmove(cmd, cmd + (i - 1),
    432a:	4620      	mov	r0, r4
    432c:	f001 fd95 	bl	5e5a <memmove>
					*cmd++ = v;
    4330:	f884 a000 	strb.w	sl, [r4]
    4334:	e7c7      	b.n	42c6 <shell_make_argv+0x76>
				if (i > 2) {
    4336:	f1bb 0f02 	cmp.w	fp, #2
    433a:	d1eb      	bne.n	4314 <shell_make_argv+0xc4>
			if (t == 'x') {
    433c:	2a78      	cmp	r2, #120	; 0x78
    433e:	d136      	bne.n	43ae <shell_make_argv+0x15e>
    4340:	2102      	movs	r1, #2
				u8_t v = 0;
    4342:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    4346:	5c63      	ldrb	r3, [r4, r1]
					if (t >= '0' && t <= '9') {
    4348:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    434c:	b2d2      	uxtb	r2, r2
    434e:	2a09      	cmp	r2, #9
    4350:	b2c8      	uxtb	r0, r1
    4352:	d814      	bhi.n	437e <shell_make_argv+0x12e>
						v = (v << 4) | (t - '0');
    4354:	ea42 130a 	orr.w	r3, r2, sl, lsl #4
				for (i = 2; i < (2 + 2); i++) {
    4358:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
    435a:	fa5f fa83 	uxtb.w	sl, r3
				for (i = 2; i < (2 + 2); i++) {
    435e:	d10c      	bne.n	437a <shell_make_argv+0x12a>
    4360:	2304      	movs	r3, #4
						shell_strlen(cmd) - (i - 2));
    4362:	4620      	mov	r0, r4
					memmove(cmd, cmd + (i - 1),
    4364:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    4368:	9301      	str	r3, [sp, #4]
						shell_strlen(cmd) - (i - 2));
    436a:	f7ff ff3d 	bl	41e8 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	44a3      	add	fp, r4
    4372:	1c82      	adds	r2, r0, #2
    4374:	1ad2      	subs	r2, r2, r3
    4376:	4659      	mov	r1, fp
    4378:	e7d7      	b.n	432a <shell_make_argv+0xda>
				for (i = 2; i < (2 + 2); i++) {
    437a:	2103      	movs	r1, #3
    437c:	e7e3      	b.n	4346 <shell_make_argv+0xf6>
					} else if ((t >= 'a') &&
    437e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    4382:	2a05      	cmp	r2, #5
    4384:	d803      	bhi.n	438e <shell_make_argv+0x13e>
						v = (v << 4) | (t - 'a' + 10);
    4386:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    4388:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
    438c:	e7e4      	b.n	4358 <shell_make_argv+0x108>
					} else if ((t >= 'A') && (t <= 'F')) {
    438e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    4392:	2a05      	cmp	r2, #5
    4394:	d801      	bhi.n	439a <shell_make_argv+0x14a>
						v = (v << 4) | (t - 'A' + 10);
    4396:	3b37      	subs	r3, #55	; 0x37
    4398:	e7f6      	b.n	4388 <shell_make_argv+0x138>
				if (i > 2) {
    439a:	2802      	cmp	r0, #2
    439c:	d007      	beq.n	43ae <shell_make_argv+0x15e>
    439e:	2303      	movs	r3, #3
    43a0:	e7df      	b.n	4362 <shell_make_argv+0x112>
		if (!quote && isspace((int) c)) {
    43a2:	4650      	mov	r0, sl
    43a4:	f7ff ff16 	bl	41d4 <isspace>
    43a8:	2800      	cmp	r0, #0
    43aa:	f47f af61 	bne.w	4270 <shell_make_argv+0x20>
		cmd += 1;
    43ae:	1c65      	adds	r5, r4, #1
    43b0:	e789      	b.n	42c6 <shell_make_argv+0x76>
		if (quote == c) {
    43b2:	45b2      	cmp	sl, r6
    43b4:	f104 0501 	add.w	r5, r4, #1
    43b8:	d191      	bne.n	42de <shell_make_argv+0x8e>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
    43ba:	4620      	mov	r0, r4
    43bc:	f7ff ff14 	bl	41e8 <shell_strlen>
    43c0:	4629      	mov	r1, r5
    43c2:	4602      	mov	r2, r0
    43c4:	4620      	mov	r0, r4
    43c6:	f001 fd48 	bl	5e5a <memmove>
    43ca:	4625      	mov	r5, r4
			quote = 0;
    43cc:	2600      	movs	r6, #0
    43ce:	e77a      	b.n	42c6 <shell_make_argv+0x76>

000043d0 <shell_buffer_trim>:
		}
	}
}

void shell_buffer_trim(char *buff, u16_t *buff_len)
{
    43d0:	b570      	push	{r4, r5, r6, lr}
	u16_t i = 0;

	/* no command in the buffer */
	if (buff[0] == '\0') {
    43d2:	7803      	ldrb	r3, [r0, #0]
{
    43d4:	4604      	mov	r4, r0
    43d6:	460d      	mov	r5, r1
	if (buff[0] == '\0') {
    43d8:	b93b      	cbnz	r3, 43ea <shell_buffer_trim+0x1a>
	/* Removing counted whitespace characters. */
	if (--i > 0) {
		memmove(buff, buff + i, (*buff_len + 1) - i); /* +1 for '\0' */
		*buff_len = *buff_len - i;
	}
}
    43da:	bd70      	pop	{r4, r5, r6, pc}
		*buff_len -= 1;
    43dc:	3b01      	subs	r3, #1
    43de:	b29b      	uxth	r3, r3
    43e0:	802b      	strh	r3, [r5, #0]
		if (*buff_len == 0) {
    43e2:	b913      	cbnz	r3, 43ea <shell_buffer_trim+0x1a>
			buff[0] = '\0';
    43e4:	2300      	movs	r3, #0
    43e6:	7023      	strb	r3, [r4, #0]
			return;
    43e8:	e7f7      	b.n	43da <shell_buffer_trim+0xa>
	while (isspace((int) buff[*buff_len - 1])) {
    43ea:	882b      	ldrh	r3, [r5, #0]
    43ec:	18e2      	adds	r2, r4, r3
    43ee:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    43f2:	f7ff feef 	bl	41d4 <isspace>
    43f6:	2800      	cmp	r0, #0
    43f8:	d1f0      	bne.n	43dc <shell_buffer_trim+0xc>
	buff[*buff_len] = '\0';
    43fa:	54e0      	strb	r0, [r4, r3]
	while (isspace((int) buff[i++])) {
    43fc:	4603      	mov	r3, r0
    43fe:	5ce0      	ldrb	r0, [r4, r3]
    4400:	b29e      	uxth	r6, r3
    4402:	18e1      	adds	r1, r4, r3
    4404:	f7ff fee6 	bl	41d4 <isspace>
    4408:	b958      	cbnz	r0, 4422 <shell_buffer_trim+0x52>
	if (--i > 0) {
    440a:	2e00      	cmp	r6, #0
    440c:	d0e5      	beq.n	43da <shell_buffer_trim+0xa>
		memmove(buff, buff + i, (*buff_len + 1) - i); /* +1 for '\0' */
    440e:	882a      	ldrh	r2, [r5, #0]
    4410:	3201      	adds	r2, #1
    4412:	1ad2      	subs	r2, r2, r3
    4414:	4620      	mov	r0, r4
    4416:	f001 fd20 	bl	5e5a <memmove>
		*buff_len = *buff_len - i;
    441a:	882b      	ldrh	r3, [r5, #0]
    441c:	1b9b      	subs	r3, r3, r6
    441e:	802b      	strh	r3, [r5, #0]
    4420:	e7db      	b.n	43da <shell_buffer_trim+0xa>
    4422:	3301      	adds	r3, #1
		if (i == 0) {
    4424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4428:	d1e9      	bne.n	43fe <shell_buffer_trim+0x2e>
    442a:	e7db      	b.n	43e4 <shell_buffer_trim+0x14>

0000442c <shell_raw_fprintf>:
{
    442c:	b40e      	push	{r1, r2, r3}
    442e:	b503      	push	{r0, r1, lr}
    4430:	aa03      	add	r2, sp, #12
    4432:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    4436:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    4438:	f7ff fe9c 	bl	4174 <shell_fprintf_fmt>
}
    443c:	b002      	add	sp, #8
    443e:	f85d eb04 	ldr.w	lr, [sp], #4
    4442:	b003      	add	sp, #12
    4444:	4770      	bx	lr

00004446 <full_line_cmd>:

/* Function returns true if command length is equal to multiplicity of terminal
 * width.
 */
static inline bool full_line_cmd(const struct shell *shell)
{
    4446:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->prompt))
    4448:	6883      	ldr	r3, [r0, #8]
{
    444a:	4605      	mov	r5, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->prompt))
    444c:	6800      	ldr	r0, [r0, #0]
    444e:	8cdc      	ldrh	r4, [r3, #38]	; 0x26
	return str == NULL ? 0 : strlen(str);
    4450:	b108      	cbz	r0, 4456 <full_line_cmd+0x10>
    4452:	f001 fcc3 	bl	5ddc <strlen>
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    4456:	68ab      	ldr	r3, [r5, #8]
    4458:	8bda      	ldrh	r2, [r3, #30]
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->prompt))
    445a:	4420      	add	r0, r4
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    445c:	fbb0 f3f2 	udiv	r3, r0, r2
    4460:	fb02 0013 	mls	r0, r2, r3, r0
}
    4464:	fab0 f080 	clz	r0, r0
    4468:	0940      	lsrs	r0, r0, #5
    446a:	bd38      	pop	{r3, r4, r5, pc}

0000446c <shell_op_cursor_vert_move>:
	if (delta != 0) {
    446c:	b159      	cbz	r1, 4486 <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    446e:	2900      	cmp	r1, #0
    4470:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    4474:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    4478:	bfcc      	ite	gt
    447a:	2341      	movgt	r3, #65	; 0x41
    447c:	2342      	movle	r3, #66	; 0x42
    447e:	4902      	ldr	r1, [pc, #8]	; (4488 <shell_op_cursor_vert_move+0x1c>)
    4480:	6940      	ldr	r0, [r0, #20]
    4482:	f7ff bfd3 	b.w	442c <shell_raw_fprintf>
}
    4486:	4770      	bx	lr
    4488:	0002db8c 	.word	0x0002db8c

0000448c <shell_op_cursor_horiz_move>:
	if (delta != 0) {
    448c:	b159      	cbz	r1, 44a6 <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
    448e:	2900      	cmp	r1, #0
    4490:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    4494:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    4498:	bfcc      	ite	gt
    449a:	2343      	movgt	r3, #67	; 0x43
    449c:	2344      	movle	r3, #68	; 0x44
    449e:	4902      	ldr	r1, [pc, #8]	; (44a8 <shell_op_cursor_horiz_move+0x1c>)
    44a0:	6940      	ldr	r0, [r0, #20]
    44a2:	f7ff bfc3 	b.w	442c <shell_raw_fprintf>
}
    44a6:	4770      	bx	lr
    44a8:	0002db8c 	.word	0x0002db8c

000044ac <shell_cursor_in_empty_line>:

/* Function returns true if cursor is at beginning of an empty line. */
bool shell_cursor_in_empty_line(const struct shell *shell)
{
    44ac:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->prompt))
    44ae:	6883      	ldr	r3, [r0, #8]
{
    44b0:	4605      	mov	r5, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->prompt))
    44b2:	6800      	ldr	r0, [r0, #0]
    44b4:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    44b6:	b108      	cbz	r0, 44bc <shell_cursor_in_empty_line+0x10>
    44b8:	f001 fc90 	bl	5ddc <strlen>
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    44bc:	68ab      	ldr	r3, [r5, #8]
    44be:	8bda      	ldrh	r2, [r3, #30]
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->prompt))
    44c0:	4420      	add	r0, r4
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0);
    44c2:	fbb0 f3f2 	udiv	r3, r0, r2
    44c6:	fb02 0013 	mls	r0, r2, r3, r0
}
    44ca:	fab0 f080 	clz	r0, r0
    44ce:	0940      	lsrs	r0, r0, #5
    44d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000044d4 <shell_op_cond_next_line>:

void shell_op_cond_next_line(const struct shell *shell)
{
    44d4:	b510      	push	{r4, lr}
    44d6:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    44d8:	f7ff ffe8 	bl	44ac <shell_cursor_in_empty_line>
    44dc:	b128      	cbz	r0, 44ea <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    44de:	6960      	ldr	r0, [r4, #20]
    44e0:	4905      	ldr	r1, [pc, #20]	; (44f8 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
    44e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44e6:	f7ff bfa1 	b.w	442c <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    44ea:	4620      	mov	r0, r4
    44ec:	f7ff ffab 	bl	4446 <full_line_cmd>
    44f0:	2800      	cmp	r0, #0
    44f2:	d1f4      	bne.n	44de <shell_op_cond_next_line+0xa>
}
    44f4:	bd10      	pop	{r4, pc}
    44f6:	bf00      	nop
    44f8:	0002d656 	.word	0x0002d656

000044fc <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
    44fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    44fe:	6884      	ldr	r4, [r0, #8]
{
    4500:	4605      	mov	r5, r0
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    4502:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    4504:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    4506:	f104 0014 	add.w	r0, r4, #20
    450a:	f7ff fe8b 	bl	4224 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
    450e:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    4510:	8b27      	ldrh	r7, [r4, #24]
    4512:	8b66      	ldrh	r6, [r4, #26]
	if (full_line_cmd(shell)) {
    4514:	f7ff ff97 	bl	4446 <full_line_cmd>
    4518:	b118      	cbz	r0, 4522 <shell_op_cursor_position_synchronize+0x26>
    451a:	490a      	ldr	r1, [pc, #40]	; (4544 <shell_op_cursor_position_synchronize+0x48>)
    451c:	6968      	ldr	r0, [r5, #20]
    451e:	f7ff ff85 	bl	442c <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
    4522:	42b7      	cmp	r7, r6
    4524:	d107      	bne.n	4536 <shell_op_cursor_position_synchronize+0x3a>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    4526:	8aa1      	ldrh	r1, [r4, #20]
							       cons->cur_x_end);
    4528:	8ae3      	ldrh	r3, [r4, #22]
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    452a:	4628      	mov	r0, r5
    452c:	1ac9      	subs	r1, r1, r3
	}
}
    452e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
    4532:	f7ff bfab 	b.w	448c <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    4536:	8b61      	ldrh	r1, [r4, #26]
    4538:	8b23      	ldrh	r3, [r4, #24]
    453a:	4628      	mov	r0, r5
    453c:	1ac9      	subs	r1, r1, r3
    453e:	f7ff ff95 	bl	446c <shell_op_cursor_vert_move>
    4542:	e7f0      	b.n	4526 <shell_op_cursor_position_synchronize+0x2a>
    4544:	0002d656 	.word	0x0002d656

00004548 <shell_op_cursor_move>:

void shell_op_cursor_move(const struct shell *shell, s16_t val)
{
    4548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    454a:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    454c:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    454e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	s32_t row_span;
	s32_t col_span;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    4550:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
    4552:	4419      	add	r1, r3
    4554:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    4556:	3014      	adds	r0, #20
    4558:	4619      	mov	r1, r3
    455a:	f7ff fe63 	bl	4224 <shell_multiline_data_calc>
				  shell->ctx->cmd_buff_len);

	/* Calculate the new cursor. */
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
    455e:	68a0      	ldr	r0, [r4, #8]
    4560:	462a      	mov	r2, r5
    4562:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    4564:	3014      	adds	r0, #20
    4566:	f7ff fe52 	bl	420e <row_span_with_buffer_offsets_get>
    456a:	4607      	mov	r7, r0
						    shell->ctx->cmd_buff_pos,
						    new_pos);
	col_span = column_span_with_buffer_offsets_get(
						    &shell->ctx->vt100_ctx.cons,
    456c:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
    456e:	462a      	mov	r2, r5
    4570:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    4572:	3014      	adds	r0, #20
    4574:	f7ff fe3c 	bl	41f0 <column_span_with_buffer_offsets_get>
						    shell->ctx->cmd_buff_pos,
						    new_pos);

	shell_op_cursor_vert_move(shell, -row_span);
    4578:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
    457a:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
    457c:	4620      	mov	r0, r4
    457e:	f7ff ff75 	bl	446c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
    4582:	4631      	mov	r1, r6
    4584:	4620      	mov	r0, r4
    4586:	f7ff ff81 	bl	448c <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    458a:	68a3      	ldr	r3, [r4, #8]
    458c:	851d      	strh	r5, [r3, #40]	; 0x28
}
    458e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004590 <reprint_from_cursor>:
	}
}

static void reprint_from_cursor(const struct shell *shell, u16_t diff,
				bool data_removed)
{
    4590:	b570      	push	{r4, r5, r6, lr}
    4592:	4604      	mov	r4, r0
    4594:	460d      	mov	r5, r1
	 * was called.
	 *
	 * Such condition is useful for Bluetooth devices to save number of
	 * bytes transmitted between terminal and device.
	 */
	if (data_removed) {
    4596:	4616      	mov	r6, r2
    4598:	b122      	cbz	r2, 45a4 <reprint_from_cursor+0x14>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    459a:	4a11      	ldr	r2, [pc, #68]	; (45e0 <reprint_from_cursor+0x50>)
    459c:	4911      	ldr	r1, [pc, #68]	; (45e4 <reprint_from_cursor+0x54>)
    459e:	6940      	ldr	r0, [r0, #20]
    45a0:	f7ff ff44 	bl	442c <shell_raw_fprintf>
		clear_eos(shell);
	}

	shell_fprintf(shell, SHELL_NORMAL, "%s",
			&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    45a4:	68a2      	ldr	r2, [r4, #8]
	shell_fprintf(shell, SHELL_NORMAL, "%s",
    45a6:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    45a8:	332c      	adds	r3, #44	; 0x2c
    45aa:	4413      	add	r3, r2
    45ac:	4620      	mov	r0, r4
    45ae:	4a0d      	ldr	r2, [pc, #52]	; (45e4 <reprint_from_cursor+0x54>)
    45b0:	2100      	movs	r1, #0
    45b2:	f7fe ff0b 	bl	33cc <shell_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    45b6:	68a3      	ldr	r3, [r4, #8]
    45b8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    45ba:	851a      	strh	r2, [r3, #40]	; 0x28

	if (full_line_cmd(shell)) {
    45bc:	4620      	mov	r0, r4
    45be:	f7ff ff42 	bl	4446 <full_line_cmd>
    45c2:	b128      	cbz	r0, 45d0 <reprint_from_cursor+0x40>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    45c4:	b106      	cbz	r6, 45c8 <reprint_from_cursor+0x38>
    45c6:	b11d      	cbz	r5, 45d0 <reprint_from_cursor+0x40>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    45c8:	4907      	ldr	r1, [pc, #28]	; (45e8 <reprint_from_cursor+0x58>)
    45ca:	6960      	ldr	r0, [r4, #20]
    45cc:	f7ff ff2e 	bl	442c <shell_raw_fprintf>
			cursor_next_line_move(shell);
		}
	}

	shell_op_cursor_move(shell, -diff);
    45d0:	4269      	negs	r1, r5
    45d2:	4620      	mov	r0, r4
    45d4:	b209      	sxth	r1, r1
}
    45d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
    45da:	f7ff bfb5 	b.w	4548 <shell_op_cursor_move>
    45de:	bf00      	nop
    45e0:	0002db82 	.word	0x0002db82
    45e4:	0002db78 	.word	0x0002db78
    45e8:	0002d656 	.word	0x0002d656

000045ec <data_insert>:

static void data_insert(const struct shell *shell, const char *data, u16_t len)
{
    45ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    45f0:	6886      	ldr	r6, [r0, #8]
    45f2:	8cf4      	ldrh	r4, [r6, #38]	; 0x26
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];

	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    45f4:	18a3      	adds	r3, r4, r2
    45f6:	2bff      	cmp	r3, #255	; 0xff
{
    45f8:	4607      	mov	r7, r0
    45fa:	4688      	mov	r8, r1
    45fc:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    45fe:	dc1f      	bgt.n	4640 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    4600:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    4602:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    4604:	332c      	adds	r3, #44	; 0x2c
    4606:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    4608:	b2a4      	uxth	r4, r4
		return;
	}

	memmove(curr_pos + len, curr_pos, after);
    460a:	4622      	mov	r2, r4
    460c:	4631      	mov	r1, r6
    460e:	1970      	adds	r0, r6, r5
    4610:	f001 fc23 	bl	5e5a <memmove>
	memcpy(curr_pos, data, len);
    4614:	462a      	mov	r2, r5
    4616:	4641      	mov	r1, r8
    4618:	4630      	mov	r0, r6
    461a:	f001 fc35 	bl	5e88 <memcpy>
	shell->ctx->cmd_buff_len += len;
    461e:	68ba      	ldr	r2, [r7, #8]
    4620:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
    4622:	442b      	add	r3, r5
    4624:	b29b      	uxth	r3, r3
    4626:	84d3      	strh	r3, [r2, #38]	; 0x26
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    4628:	4413      	add	r3, r2
    462a:	2200      	movs	r2, #0
    462c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	if (!flag_echo_is_set(shell)) {
    4630:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4632:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
    4636:	0709      	lsls	r1, r1, #28
    4638:	d404      	bmi.n	4644 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
    463a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    463c:	4415      	add	r5, r2
    463e:	851d      	strh	r5, [r3, #40]	; 0x28
		return;
	}

	reprint_from_cursor(shell, after, false);
}
    4640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    4644:	4621      	mov	r1, r4
    4646:	4638      	mov	r0, r7
}
    4648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    464c:	f7ff bfa0 	b.w	4590 <reprint_from_cursor>

00004650 <shell_op_word_remove>:
{
    4650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    4652:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    4654:	8cda      	ldrh	r2, [r3, #38]	; 0x26
{
    4656:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    4658:	2a00      	cmp	r2, #0
    465a:	d049      	beq.n	46f0 <shell_op_word_remove+0xa0>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    465c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
	if ((shell->ctx->cmd_buff_len == 0) ||
    465e:	2800      	cmp	r0, #0
    4660:	d046      	beq.n	46f0 <shell_op_word_remove+0xa0>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    4662:	302b      	adds	r0, #43	; 0x2b
    4664:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    4666:	f103 062c 	add.w	r6, r3, #44	; 0x2c
    466a:	4603      	mov	r3, r0
    466c:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    466e:	42b3      	cmp	r3, r6
    4670:	b2a4      	uxth	r4, r4
    4672:	4619      	mov	r1, r3
    4674:	d30e      	bcc.n	4694 <shell_op_word_remove+0x44>
    4676:	7819      	ldrb	r1, [r3, #0]
    4678:	2920      	cmp	r1, #32
    467a:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
    467e:	d035      	beq.n	46ec <shell_op_word_remove+0x9c>
    4680:	4619      	mov	r1, r3
    4682:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    4684:	7808      	ldrb	r0, [r1, #0]
    4686:	2820      	cmp	r0, #32
    4688:	d004      	beq.n	4694 <shell_op_word_remove+0x44>
		++chars_to_delete;
    468a:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    468c:	429e      	cmp	r6, r3
		++chars_to_delete;
    468e:	b2a4      	uxth	r4, r4
		--str;
    4690:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    4692:	d9f5      	bls.n	4680 <shell_op_word_remove+0x30>
	memmove(str + 1, str + 1 + chars_to_delete,
    4694:	1c63      	adds	r3, r4, #1
    4696:	1c4e      	adds	r6, r1, #1
    4698:	1b12      	subs	r2, r2, r4
    469a:	4419      	add	r1, r3
    469c:	4630      	mov	r0, r6
    469e:	f001 fbdc 	bl	5e5a <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    46a2:	68a9      	ldr	r1, [r5, #8]
    46a4:	8cca      	ldrh	r2, [r1, #38]	; 0x26
    46a6:	1b12      	subs	r2, r2, r4
    46a8:	b292      	uxth	r2, r2
    46aa:	84ca      	strh	r2, [r1, #38]	; 0x26
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    46ac:	440a      	add	r2, r1
    46ae:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
    46b0:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    46b2:	f882 702c 	strb.w	r7, [r2, #44]	; 0x2c
	shell_op_cursor_move(shell, -chars_to_delete);
    46b6:	4628      	mov	r0, r5
    46b8:	b209      	sxth	r1, r1
    46ba:	f7ff ff45 	bl	4548 <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    46be:	6968      	ldr	r0, [r5, #20]
    46c0:	4a0c      	ldr	r2, [pc, #48]	; (46f4 <shell_op_word_remove+0xa4>)
    46c2:	490d      	ldr	r1, [pc, #52]	; (46f8 <shell_op_word_remove+0xa8>)
    46c4:	f7ff feb2 	bl	442c <shell_raw_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    46c8:	4633      	mov	r3, r6
    46ca:	4639      	mov	r1, r7
    46cc:	4628      	mov	r0, r5
    46ce:	4a0a      	ldr	r2, [pc, #40]	; (46f8 <shell_op_word_remove+0xa8>)
    46d0:	f7fe fe7c 	bl	33cc <shell_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
    46d4:	6968      	ldr	r0, [r5, #20]
    46d6:	4a09      	ldr	r2, [pc, #36]	; (46fc <shell_op_word_remove+0xac>)
    46d8:	4907      	ldr	r1, [pc, #28]	; (46f8 <shell_op_word_remove+0xa8>)
    46da:	f7ff fea7 	bl	442c <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    46de:	6968      	ldr	r0, [r5, #20]
    46e0:	4a07      	ldr	r2, [pc, #28]	; (4700 <shell_op_word_remove+0xb0>)
    46e2:	4905      	ldr	r1, [pc, #20]	; (46f8 <shell_op_word_remove+0xa8>)
}
    46e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    46e8:	f7ff bea0 	b.w	442c <shell_raw_fprintf>
    46ec:	463b      	mov	r3, r7
    46ee:	e7bd      	b.n	466c <shell_op_word_remove+0x1c>
    46f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46f2:	bf00      	nop
    46f4:	0002db86 	.word	0x0002db86
    46f8:	0002db78 	.word	0x0002db78
    46fc:	0002db82 	.word	0x0002db82
    4700:	0002db89 	.word	0x0002db89

00004704 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    4704:	6883      	ldr	r3, [r0, #8]
    4706:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    4708:	4249      	negs	r1, r1
    470a:	b209      	sxth	r1, r1
    470c:	f7ff bf1c 	b.w	4548 <shell_op_cursor_move>

00004710 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    4710:	6883      	ldr	r3, [r0, #8]
    4712:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
    4714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4716:	1ac9      	subs	r1, r1, r3
    4718:	b209      	sxth	r1, r1
    471a:	f7ff bf15 	b.w	4548 <shell_op_cursor_move>

0000471e <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    471e:	6883      	ldr	r3, [r0, #8]
    4720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4722:	b11b      	cbz	r3, 472c <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
    4724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4728:	f7ff bf0e 	b.w	4548 <shell_op_cursor_move>
}
    472c:	4770      	bx	lr

0000472e <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    472e:	6883      	ldr	r3, [r0, #8]
    4730:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    4732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4734:	429a      	cmp	r2, r3
    4736:	d202      	bcs.n	473e <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
    4738:	2101      	movs	r1, #1
    473a:	f7ff bf05 	b.w	4548 <shell_op_cursor_move>
}
    473e:	4770      	bx	lr

00004740 <char_replace>:

void char_replace(const struct shell *shell, char data)
{
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    4740:	6883      	ldr	r3, [r0, #8]
{
    4742:	460a      	mov	r2, r1
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    4744:	8d19      	ldrh	r1, [r3, #40]	; 0x28
{
    4746:	b510      	push	{r4, lr}
    4748:	4604      	mov	r4, r0
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    474a:	1c48      	adds	r0, r1, #1
    474c:	8518      	strh	r0, [r3, #40]	; 0x28
    474e:	440b      	add	r3, r1
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    4750:	4908      	ldr	r1, [pc, #32]	; (4774 <char_replace+0x34>)
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    4752:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    4756:	6960      	ldr	r0, [r4, #20]
    4758:	f7ff fe68 	bl	442c <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
    475c:	4620      	mov	r0, r4
    475e:	f7ff fea5 	bl	44ac <shell_cursor_in_empty_line>
    4762:	b128      	cbz	r0, 4770 <char_replace+0x30>
	shell_raw_fprintf(shell->fprintf_ctx, "\r\n");
    4764:	6960      	ldr	r0, [r4, #20]
    4766:	4904      	ldr	r1, [pc, #16]	; (4778 <char_replace+0x38>)
		cursor_next_line_move(shell);
	}
}
    4768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    476c:	f7ff be5e 	b.w	442c <shell_raw_fprintf>
    4770:	bd10      	pop	{r4, pc}
    4772:	bf00      	nop
    4774:	0002db90 	.word	0x0002db90
    4778:	0002d656 	.word	0x0002d656

0000477c <shell_op_char_insert>:

void shell_op_char_insert(const struct shell *shell, char data)
{
    477c:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
    477e:	6883      	ldr	r3, [r0, #8]
{
    4780:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
    4784:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
    4788:	07d2      	lsls	r2, r2, #31
{
    478a:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
    478c:	d508      	bpl.n	47a0 <shell_op_char_insert+0x24>
    478e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    4790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4792:	429a      	cmp	r2, r3
    4794:	d004      	beq.n	47a0 <shell_op_char_insert+0x24>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
		char_replace(shell, data);
    4796:	b2c9      	uxtb	r1, r1
    4798:	f7ff ffd2 	bl	4740 <char_replace>
	} else {
		data_insert(shell, &data, 1);
	}
}
    479c:	b002      	add	sp, #8
    479e:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    47a0:	2201      	movs	r2, #1
    47a2:	f10d 0107 	add.w	r1, sp, #7
    47a6:	4620      	mov	r0, r4
    47a8:	f7ff ff20 	bl	45ec <data_insert>
}
    47ac:	e7f6      	b.n	479c <shell_op_char_insert+0x20>

000047ae <shell_op_char_delete>:
	shell_op_cursor_move(shell, -1);
	shell_op_char_delete(shell);
}

void shell_op_char_delete(const struct shell *shell)
{
    47ae:	b538      	push	{r3, r4, r5, lr}
    47b0:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    47b2:	6880      	ldr	r0, [r0, #8]
    47b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    47b6:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
    47b8:	1ae4      	subs	r4, r4, r3
    47ba:	b2a4      	uxth	r4, r4
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];

	if (diff == 0) {
    47bc:	b18c      	cbz	r4, 47e2 <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    47be:	332c      	adds	r3, #44	; 0x2c
    47c0:	4418      	add	r0, r3
		return;
	}

	memmove(str, str + 1, diff);
    47c2:	4622      	mov	r2, r4
    47c4:	1c41      	adds	r1, r0, #1
    47c6:	f001 fb48 	bl	5e5a <memmove>
	--shell->ctx->cmd_buff_len;
    47ca:	68aa      	ldr	r2, [r5, #8]
    47cc:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
	reprint_from_cursor(shell, --diff, true);
    47ce:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    47d0:	3b01      	subs	r3, #1
    47d2:	84d3      	strh	r3, [r2, #38]	; 0x26
	reprint_from_cursor(shell, --diff, true);
    47d4:	4628      	mov	r0, r5
    47d6:	2201      	movs	r2, #1
    47d8:	b289      	uxth	r1, r1
}
    47da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    47de:	f7ff bed7 	b.w	4590 <reprint_from_cursor>
}
    47e2:	bd38      	pop	{r3, r4, r5, pc}

000047e4 <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    47e4:	6883      	ldr	r3, [r0, #8]
    47e6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
{
    47e8:	b510      	push	{r4, lr}
    47ea:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    47ec:	b152      	cbz	r2, 4804 <shell_op_char_backspace+0x20>
    47ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    47f0:	b143      	cbz	r3, 4804 <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
    47f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    47f6:	f7ff fea7 	bl	4548 <shell_op_cursor_move>
	shell_op_char_delete(shell);
    47fa:	4620      	mov	r0, r4
}
    47fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
    4800:	f7ff bfd5 	b.w	47ae <shell_op_char_delete>
}
    4804:	bd10      	pop	{r4, pc}

00004806 <shell_op_completion_insert>:

void shell_op_completion_insert(const struct shell *shell,
				const char *compl,
				u16_t compl_len)
{
	data_insert(shell, compl, compl_len);
    4806:	f7ff bef1 	b.w	45ec <data_insert>

0000480a <timer_handler>:
SHELL_UART_DEFINE(shell_transport_uart);
SHELL_DEFINE(uart_shell, "uart:~$ ", &shell_transport_uart, 10,
	     SHELL_FLAG_OLF_CRLF);

static void timer_handler(struct k_timer *timer)
{
    480a:	b510      	push	{r4, lr}
    480c:	4604      	mov	r4, r0
	struct shell_uart *sh_uart =
			CONTAINER_OF(timer, struct shell_uart, timer);

	if (uart_poll_in(sh_uart->dev, sh_uart->rx) == 0) {
    480e:	f850 0c08 	ldr.w	r0, [r0, #-8]
	return api->poll_in(dev, p_char);
    4812:	6843      	ldr	r3, [r0, #4]
    4814:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4818:	681b      	ldr	r3, [r3, #0]
    481a:	4798      	blx	r3
    481c:	b938      	cbnz	r0, 482e <timer_handler+0x24>
		sh_uart->rx_cnt = 1;
    481e:	2301      	movs	r3, #1
    4820:	6363      	str	r3, [r4, #52]	; 0x34
		sh_uart->handler(SHELL_TRANSPORT_EVT_RX_RDY, sh_uart->context);
    4822:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4824:	f854 3c04 	ldr.w	r3, [r4, #-4]
	}
}
    4828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sh_uart->handler(SHELL_TRANSPORT_EVT_RX_RDY, sh_uart->context);
    482c:	4718      	bx	r3
}
    482e:	bd10      	pop	{r4, pc}

00004830 <uninit>:
}

static int uninit(const struct shell_transport *transport)
{
	return 0;
}
    4830:	2000      	movs	r0, #0
    4832:	4770      	bx	lr

00004834 <enable>:

static int enable(const struct shell_transport *transport, bool blocking)
{
	return 0;
}
    4834:	2000      	movs	r0, #0
    4836:	4770      	bx	lr

00004838 <write>:

static int write(const struct shell_transport *transport,
		 const void *data, size_t length, size_t *cnt)
{
    4838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    483c:	6845      	ldr	r5, [r0, #4]
{
    483e:	4616      	mov	r6, r2
    4840:	461f      	mov	r7, r3
    4842:	460c      	mov	r4, r1
    4844:	eb01 0802 	add.w	r8, r1, r2
	const u8_t *data8 = (const u8_t *)data;

	for (size_t i = 0; i < length; i++) {
    4848:	45a0      	cmp	r8, r4
    484a:	d107      	bne.n	485c <write+0x24>
		uart_poll_out(sh_uart->dev, data8[i]);
	}

	*cnt = length;
    484c:	603e      	str	r6, [r7, #0]

	sh_uart->handler(SHELL_TRANSPORT_EVT_TX_RDY, sh_uart->context);
    484e:	686b      	ldr	r3, [r5, #4]
    4850:	6b69      	ldr	r1, [r5, #52]	; 0x34
    4852:	2001      	movs	r0, #1
    4854:	4798      	blx	r3

	return 0;
}
    4856:	2000      	movs	r0, #0
    4858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_poll_out(sh_uart->dev, data8[i]);
    485c:	6828      	ldr	r0, [r5, #0]
	return api->poll_out(dev, out_char);
    485e:	f814 1b01 	ldrb.w	r1, [r4], #1
    4862:	6843      	ldr	r3, [r0, #4]
    4864:	685b      	ldr	r3, [r3, #4]
    4866:	4798      	blx	r3
    4868:	e7ee      	b.n	4848 <write+0x10>

0000486a <read>:

static int read(const struct shell_transport *transport,
		void *data, size_t length, size_t *cnt)
{
    486a:	b570      	push	{r4, r5, r6, lr}
	struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    486c:	6844      	ldr	r4, [r0, #4]
{
    486e:	461d      	mov	r5, r3

	if (sh_uart->rx_cnt) {
    4870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
{
    4872:	460e      	mov	r6, r1
	if (sh_uart->rx_cnt) {
    4874:	b143      	cbz	r3, 4888 <read+0x1e>
		memcpy(data, sh_uart->rx, 1);
    4876:	2201      	movs	r2, #1
    4878:	f104 0138 	add.w	r1, r4, #56	; 0x38
    487c:	4630      	mov	r0, r6
    487e:	f001 fb03 	bl	5e88 <memcpy>
		sh_uart->rx_cnt = 0;
    4882:	2300      	movs	r3, #0
    4884:	63e3      	str	r3, [r4, #60]	; 0x3c
		*cnt = 1;
    4886:	2301      	movs	r3, #1
	} else {
		*cnt = 0;
    4888:	602b      	str	r3, [r5, #0]
	}

	return 0;
}
    488a:	2000      	movs	r0, #0
    488c:	bd70      	pop	{r4, r5, r6, pc}
	...

00004890 <init>:
{
    4890:	b570      	push	{r4, r5, r6, lr}
	struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    4892:	6844      	ldr	r4, [r0, #4]
	sh_uart->dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4894:	480a      	ldr	r0, [pc, #40]	; (48c0 <init+0x30>)
{
    4896:	461d      	mov	r5, r3
    4898:	4616      	mov	r6, r2
	sh_uart->dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    489a:	f026 ff13 	bl	2b6c4 <device_get_binding>
	sh_uart->context = context;
    489e:	6365      	str	r5, [r4, #52]	; 0x34
	sh_uart->handler = evt_handler;
    48a0:	e9c4 0600 	strd	r0, r6, [r4]
	k_timer_init(&sh_uart->timer, timer_handler, NULL);
    48a4:	3408      	adds	r4, #8
    48a6:	4620      	mov	r0, r4
    48a8:	2200      	movs	r2, #0
    48aa:	4906      	ldr	r1, [pc, #24]	; (48c4 <init+0x34>)
    48ac:	f028 f948 	bl	2cb40 <k_timer_init>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    48b0:	2214      	movs	r2, #20
    48b2:	4620      	mov	r0, r4
    48b4:	4611      	mov	r1, r2
    48b6:	f028 f951 	bl	2cb5c <_impl_k_timer_start>
}
    48ba:	2000      	movs	r0, #0
    48bc:	bd70      	pop	{r4, r5, r6, pc}
    48be:	bf00      	nop
    48c0:	0002d5e8 	.word	0x0002d5e8
    48c4:	0000480b 	.word	0x0000480b

000048c8 <enable_shell_uart>:
	.write = write,
	.read = read
};

static int enable_shell_uart(struct device *arg)
{
    48c8:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(arg);
	shell_init(&uart_shell, NULL, true, true, LOG_LEVEL_INF);
    48ca:	2303      	movs	r3, #3
    48cc:	9300      	str	r3, [sp, #0]
    48ce:	2301      	movs	r3, #1
    48d0:	461a      	mov	r2, r3
    48d2:	2100      	movs	r1, #0
    48d4:	4803      	ldr	r0, [pc, #12]	; (48e4 <enable_shell_uart+0x1c>)
    48d6:	f7fe fd17 	bl	3308 <shell_init>
	return 0;
}
    48da:	2000      	movs	r0, #0
    48dc:	b003      	add	sp, #12
    48de:	f85d fb04 	ldr.w	pc, [sp], #4
    48e2:	bf00      	nop
    48e4:	0002dbcc 	.word	0x0002dbcc

000048e8 <cmd_shell_stats_reset>:
	if (!IS_ENABLED(CONFIG_SHELL_STATS)) {
		shell_fprintf(shell, SHELL_ERROR, "Command not supported.\n");
		return -ENOEXEC;
	}

	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    48e8:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    48ec:	f1dc 0100 	rsbs	r1, ip, #0
    48f0:	f04f 0300 	mov.w	r3, #0
{
    48f4:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    48f6:	eb41 010c 	adc.w	r1, r1, ip
    48fa:	461a      	mov	r2, r3
{
    48fc:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    48fe:	f7ff fc0b 	bl	4118 <shell_cmd_precheck>

	if (ret == 0) {
    4902:	b908      	cbnz	r0, 4908 <cmd_shell_stats_reset+0x20>
		shell->stats->log_lost_cnt = 0;
    4904:	69a3      	ldr	r3, [r4, #24]
    4906:	6018      	str	r0, [r3, #0]
	}

	return ret;
}
    4908:	bd10      	pop	{r4, pc}

0000490a <cmd_echo_on>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    490a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    490e:	f1dc 0100 	rsbs	r1, ip, #0
    4912:	f04f 0300 	mov.w	r3, #0
{
    4916:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4918:	eb41 010c 	adc.w	r1, r1, ip
    491c:	461a      	mov	r2, r3
{
    491e:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4920:	f7ff fbfa 	bl	4118 <shell_cmd_precheck>
	if (ret == 0) {
    4924:	b930      	cbnz	r0, 4934 <cmd_echo_on+0x2a>
		shell->ctx->internal.flags.echo = 1;
    4926:	68a2      	ldr	r2, [r4, #8]
    4928:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    492c:	f043 0308 	orr.w	r3, r3, #8
    4930:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4934:	bd10      	pop	{r4, pc}

00004936 <cmd_echo_off>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4936:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    493a:	f1dc 0100 	rsbs	r1, ip, #0
    493e:	f04f 0300 	mov.w	r3, #0
{
    4942:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4944:	eb41 010c 	adc.w	r1, r1, ip
    4948:	461a      	mov	r2, r3
{
    494a:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    494c:	f7ff fbe4 	bl	4118 <shell_cmd_precheck>
	if (ret == 0) {
    4950:	b930      	cbnz	r0, 4960 <cmd_echo_off+0x2a>
		shell->ctx->internal.flags.echo = 0;
    4952:	68a2      	ldr	r2, [r4, #8]
    4954:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4958:	f360 03c3 	bfi	r3, r0, #3, #1
    495c:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4960:	bd10      	pop	{r4, pc}

00004962 <cmd_colors_on>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4962:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4966:	f1dc 0100 	rsbs	r1, ip, #0
    496a:	f04f 0300 	mov.w	r3, #0
{
    496e:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4970:	eb41 010c 	adc.w	r1, r1, ip
    4974:	461a      	mov	r2, r3
{
    4976:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4978:	f7ff fbce 	bl	4118 <shell_cmd_precheck>
	if (ret == 0) {
    497c:	b930      	cbnz	r0, 498c <cmd_colors_on+0x2a>
		shell->ctx->internal.flags.use_colors = 1;
    497e:	68a2      	ldr	r2, [r4, #8]
    4980:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4984:	f043 0304 	orr.w	r3, r3, #4
    4988:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    498c:	bd10      	pop	{r4, pc}

0000498e <cmd_colors_off>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    498e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    4992:	f1dc 0100 	rsbs	r1, ip, #0
    4996:	f04f 0300 	mov.w	r3, #0
{
    499a:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    499c:	eb41 010c 	adc.w	r1, r1, ip
    49a0:	461a      	mov	r2, r3
{
    49a2:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    49a4:	f7ff fbb8 	bl	4118 <shell_cmd_precheck>
	if (ret == 0) {
    49a8:	b930      	cbnz	r0, 49b8 <cmd_colors_off+0x2a>
		shell->ctx->internal.flags.use_colors = 0;
    49aa:	68a2      	ldr	r2, [r4, #8]
    49ac:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    49b0:	f360 0382 	bfi	r3, r0, #2, #1
    49b4:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    49b8:	bd10      	pop	{r4, pc}

000049ba <cmd_bacskpace_mode_delete>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    49ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    49be:	f1dc 0100 	rsbs	r1, ip, #0
    49c2:	f04f 0300 	mov.w	r3, #0
{
    49c6:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    49c8:	eb41 010c 	adc.w	r1, r1, ip
    49cc:	461a      	mov	r2, r3
{
    49ce:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    49d0:	f7ff fba2 	bl	4118 <shell_cmd_precheck>
	if (ret == 0) {
    49d4:	b930      	cbnz	r0, 49e4 <cmd_bacskpace_mode_delete+0x2a>
		shell->ctx->internal.flags.mode_delete = 1;
    49d6:	68a2      	ldr	r2, [r4, #8]
    49d8:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    49dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    49e0:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    49e4:	bd10      	pop	{r4, pc}

000049e6 <cmd_bacskpace_mode_backspace>:
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    49e6:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    49ea:	f1dc 0100 	rsbs	r1, ip, #0
    49ee:	f04f 0300 	mov.w	r3, #0
{
    49f2:	b510      	push	{r4, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    49f4:	eb41 010c 	adc.w	r1, r1, ip
    49f8:	461a      	mov	r2, r3
{
    49fa:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    49fc:	f7ff fb8c 	bl	4118 <shell_cmd_precheck>
	if (ret == 0) {
    4a00:	b930      	cbnz	r0, 4a10 <cmd_bacskpace_mode_backspace+0x2a>
		shell->ctx->internal.flags.mode_delete = 0;
    4a02:	68a2      	ldr	r2, [r4, #8]
    4a04:	f892 324c 	ldrb.w	r3, [r2, #588]	; 0x24c
    4a08:	f360 1386 	bfi	r3, r0, #6, #1
    4a0c:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
}
    4a10:	bd10      	pop	{r4, pc}

00004a12 <shell_raw_fprintf>:
{
    4a12:	b40e      	push	{r1, r2, r3}
    4a14:	b503      	push	{r0, r1, lr}
    4a16:	aa03      	add	r2, sp, #12
    4a18:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    4a1c:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
    4a1e:	f7ff fba9 	bl	4174 <shell_fprintf_fmt>
}
    4a22:	b002      	add	sp, #8
    4a24:	f85d eb04 	ldr.w	lr, [sp], #4
    4a28:	b003      	add	sp, #12
    4a2a:	4770      	bx	lr

00004a2c <cmd_help>:
{
    4a2c:	b508      	push	{r3, lr}
	shell_fprintf(shell, SHELL_NORMAL,
    4a2e:	4a03      	ldr	r2, [pc, #12]	; (4a3c <cmd_help+0x10>)
    4a30:	2100      	movs	r1, #0
    4a32:	f7fe fccb 	bl	33cc <shell_fprintf>
}
    4a36:	2000      	movs	r0, #0
    4a38:	bd08      	pop	{r3, pc}
    4a3a:	bf00      	nop
    4a3c:	0002dc5b 	.word	0x0002dc5b

00004a40 <cmd_clear>:
{
    4a40:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4a42:	1e4c      	subs	r4, r1, #1
    4a44:	4261      	negs	r1, r4
    4a46:	f04f 0300 	mov.w	r3, #0
    4a4a:	4161      	adcs	r1, r4
    4a4c:	461a      	mov	r2, r3
{
    4a4e:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4a50:	f7ff fb62 	bl	4118 <shell_cmd_precheck>
	if (ret) {
    4a54:	4604      	mov	r4, r0
    4a56:	b948      	cbnz	r0, 4a6c <cmd_clear+0x2c>
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    4a58:	4a05      	ldr	r2, [pc, #20]	; (4a70 <cmd_clear+0x30>)
    4a5a:	4906      	ldr	r1, [pc, #24]	; (4a74 <cmd_clear+0x34>)
    4a5c:	6968      	ldr	r0, [r5, #20]
    4a5e:	f7ff ffd8 	bl	4a12 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    4a62:	4a05      	ldr	r2, [pc, #20]	; (4a78 <cmd_clear+0x38>)
    4a64:	4903      	ldr	r1, [pc, #12]	; (4a74 <cmd_clear+0x34>)
    4a66:	6968      	ldr	r0, [r5, #20]
    4a68:	f7ff ffd3 	bl	4a12 <shell_raw_fprintf>
}
    4a6c:	4620      	mov	r0, r4
    4a6e:	bd38      	pop	{r3, r4, r5, pc}
    4a70:	0002dc32 	.word	0x0002dc32
    4a74:	0002db78 	.word	0x0002db78
    4a78:	0002dc36 	.word	0x0002dc36

00004a7c <cmd_resize_default>:
	return -EINVAL;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    4a7c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4a7e:	1e4c      	subs	r4, r1, #1
    4a80:	4261      	negs	r1, r4
    4a82:	f04f 0300 	mov.w	r3, #0
    4a86:	4161      	adcs	r1, r4
    4a88:	461a      	mov	r2, r3
{
    4a8a:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4a8c:	f7ff fb44 	bl	4118 <shell_cmd_precheck>

	if (ret == 0) {
    4a90:	4604      	mov	r4, r0
    4a92:	b938      	cbnz	r0, 4aa4 <cmd_resize_default+0x28>
		SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    4a94:	4a04      	ldr	r2, [pc, #16]	; (4aa8 <cmd_resize_default+0x2c>)
    4a96:	4905      	ldr	r1, [pc, #20]	; (4aac <cmd_resize_default+0x30>)
    4a98:	6968      	ldr	r0, [r5, #20]
    4a9a:	f7ff ffba 	bl	4a12 <shell_raw_fprintf>
		shell->ctx->vt100_ctx.cons.terminal_wid =
						   SHELL_DEFAULT_TERMINAL_WIDTH;
		shell->ctx->vt100_ctx.cons.terminal_hei =
    4a9e:	68ab      	ldr	r3, [r5, #8]
    4aa0:	4a03      	ldr	r2, [pc, #12]	; (4ab0 <cmd_resize_default+0x34>)
    4aa2:	61da      	str	r2, [r3, #28]
						  SHELL_DEFAULT_TERMINAL_HEIGHT;
	}

	return ret;
}
    4aa4:	4620      	mov	r0, r4
    4aa6:	bd38      	pop	{r3, r4, r5, pc}
    4aa8:	0002dc3b 	.word	0x0002dc3b
    4aac:	0002db78 	.word	0x0002db78
    4ab0:	00500018 	.word	0x00500018

00004ab4 <cmd_bacskpace_mode.part.10>:
static int cmd_shell(const struct shell *shell, size_t argc, char **argv)
    4ab4:	b507      	push	{r0, r1, r2, lr}
	shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\n", argv[0],
    4ab6:	684b      	ldr	r3, [r1, #4]
    4ab8:	9301      	str	r3, [sp, #4]
    4aba:	4b06      	ldr	r3, [pc, #24]	; (4ad4 <cmd_bacskpace_mode.part.10+0x20>)
    4abc:	9300      	str	r3, [sp, #0]
    4abe:	680b      	ldr	r3, [r1, #0]
    4ac0:	4a05      	ldr	r2, [pc, #20]	; (4ad8 <cmd_bacskpace_mode.part.10+0x24>)
    4ac2:	2102      	movs	r1, #2
    4ac4:	f7fe fc82 	bl	33cc <shell_fprintf>
}
    4ac8:	f06f 0015 	mvn.w	r0, #21
    4acc:	b003      	add	sp, #12
    4ace:	f85d fb04 	ldr.w	pc, [sp], #4
    4ad2:	bf00      	nop
    4ad4:	0002d61b 	.word	0x0002d61b
    4ad8:	0002dd8d 	.word	0x0002dd8d

00004adc <cmd_shell>:
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4adc:	f1a1 0c02 	sub.w	ip, r1, #2
{
    4ae0:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4ae2:	f1dc 0100 	rsbs	r1, ip, #0
    4ae6:	f04f 0300 	mov.w	r3, #0
{
    4aea:	4615      	mov	r5, r2
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4aec:	eb41 010c 	adc.w	r1, r1, ip
    4af0:	461a      	mov	r2, r3
{
    4af2:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4af4:	f7ff fb10 	bl	4118 <shell_cmd_precheck>
	if (ret) {
    4af8:	b928      	cbnz	r0, 4b06 <cmd_shell+0x2a>
    4afa:	4629      	mov	r1, r5
    4afc:	4620      	mov	r0, r4
}
    4afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4b02:	f7ff bfd7 	b.w	4ab4 <cmd_bacskpace_mode.part.10>
    4b06:	bd38      	pop	{r3, r4, r5, pc}

00004b08 <cmd_shell_stats_show>:
{
    4b08:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4b0a:	1e4c      	subs	r4, r1, #1
    4b0c:	4261      	negs	r1, r4
    4b0e:	f04f 0300 	mov.w	r3, #0
    4b12:	4161      	adcs	r1, r4
    4b14:	461a      	mov	r2, r3
{
    4b16:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4b18:	f7ff fafe 	bl	4118 <shell_cmd_precheck>
	if (ret == 0) {
    4b1c:	4604      	mov	r4, r0
    4b1e:	b930      	cbnz	r0, 4b2e <cmd_shell_stats_show+0x26>
		shell_fprintf(shell, SHELL_NORMAL, "Lost logs: %u\n",
    4b20:	69ab      	ldr	r3, [r5, #24]
    4b22:	4a04      	ldr	r2, [pc, #16]	; (4b34 <cmd_shell_stats_show+0x2c>)
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	4601      	mov	r1, r0
    4b28:	4628      	mov	r0, r5
    4b2a:	f7fe fc4f 	bl	33cc <shell_fprintf>
}
    4b2e:	4620      	mov	r0, r4
    4b30:	bd38      	pop	{r3, r4, r5, pc}
    4b32:	bf00      	nop
    4b34:	0002dd96 	.word	0x0002dd96

00004b38 <cmd_echo>:
{
    4b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4b3a:	2902      	cmp	r1, #2
    4b3c:	f04f 0300 	mov.w	r3, #0
{
    4b40:	460e      	mov	r6, r1
    4b42:	4617      	mov	r7, r2
	int ret = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4b44:	bf88      	it	hi
    4b46:	2100      	movhi	r1, #0
    4b48:	461a      	mov	r2, r3
    4b4a:	bf98      	it	ls
    4b4c:	2101      	movls	r1, #1
{
    4b4e:	4605      	mov	r5, r0
	int ret = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4b50:	f7ff fae2 	bl	4118 <shell_cmd_precheck>
	if (ret) {
    4b54:	4604      	mov	r4, r0
    4b56:	b9a8      	cbnz	r0, 4b84 <cmd_echo+0x4c>
	if (argc == 2) {
    4b58:	2e02      	cmp	r6, #2
    4b5a:	d105      	bne.n	4b68 <cmd_echo+0x30>
    4b5c:	4639      	mov	r1, r7
    4b5e:	4628      	mov	r0, r5
}
    4b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4b64:	f7ff bfa6 	b.w	4ab4 <cmd_bacskpace_mode.part.10>
		      flag_echo_is_set(shell) ? "on" : "off");
    4b68:	68ab      	ldr	r3, [r5, #8]
	shell_fprintf(shell, SHELL_NORMAL, "Echo status: %s\n",
    4b6a:	4a07      	ldr	r2, [pc, #28]	; (4b88 <cmd_echo+0x50>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
    4b6c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
    4b70:	f013 0f08 	tst.w	r3, #8
    4b74:	4601      	mov	r1, r0
    4b76:	4b05      	ldr	r3, [pc, #20]	; (4b8c <cmd_echo+0x54>)
    4b78:	4628      	mov	r0, r5
    4b7a:	bf18      	it	ne
    4b7c:	4613      	movne	r3, r2
    4b7e:	4a04      	ldr	r2, [pc, #16]	; (4b90 <cmd_echo+0x58>)
    4b80:	f7fe fc24 	bl	33cc <shell_fprintf>
}
    4b84:	4620      	mov	r0, r4
    4b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b88:	0002fc6f 	.word	0x0002fc6f
    4b8c:	0002dc41 	.word	0x0002dc41
    4b90:	0002dc45 	.word	0x0002dc45

00004b94 <cmd_colors>:
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4b94:	f1a1 0c02 	sub.w	ip, r1, #2
{
    4b98:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4b9a:	f1dc 0100 	rsbs	r1, ip, #0
    4b9e:	f04f 0300 	mov.w	r3, #0
{
    4ba2:	4615      	mov	r5, r2
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4ba4:	eb41 010c 	adc.w	r1, r1, ip
    4ba8:	461a      	mov	r2, r3
{
    4baa:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4bac:	f7ff fab4 	bl	4118 <shell_cmd_precheck>
	if (ret) {
    4bb0:	b928      	cbnz	r0, 4bbe <cmd_colors+0x2a>
    4bb2:	4629      	mov	r1, r5
    4bb4:	4620      	mov	r0, r4
}
    4bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4bba:	f7ff bf7b 	b.w	4ab4 <cmd_bacskpace_mode.part.10>
    4bbe:	bd38      	pop	{r3, r4, r5, pc}

00004bc0 <cmd_bacskpace_mode>:
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4bc0:	f1a1 0c02 	sub.w	ip, r1, #2
{
    4bc4:	b538      	push	{r3, r4, r5, lr}
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4bc6:	f1dc 0100 	rsbs	r1, ip, #0
    4bca:	f04f 0300 	mov.w	r3, #0
{
    4bce:	4615      	mov	r5, r2
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4bd0:	eb41 010c 	adc.w	r1, r1, ip
    4bd4:	461a      	mov	r2, r3
{
    4bd6:	4604      	mov	r4, r0
	int ret = shell_cmd_precheck(shell, (argc == 2), NULL, 0);
    4bd8:	f7ff fa9e 	bl	4118 <shell_cmd_precheck>
	if (ret) {
    4bdc:	b928      	cbnz	r0, 4bea <cmd_bacskpace_mode+0x2a>
    4bde:	4629      	mov	r1, r5
    4be0:	4620      	mov	r0, r4
}
    4be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4be6:	f7ff bf65 	b.w	4ab4 <cmd_bacskpace_mode.part.10>
    4bea:	bd38      	pop	{r3, r4, r5, pc}

00004bec <cmd_shell_stats>:
{
    4bec:	b507      	push	{r0, r1, r2, lr}
	if (shell_help_requested(shell)) {
    4bee:	6883      	ldr	r3, [r0, #8]
    4bf0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
    4bf4:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4bf8:	b13b      	cbz	r3, 4c0a <cmd_shell_stats+0x1e>
		shell_help_print(shell, NULL, 0);
    4bfa:	2200      	movs	r2, #0
    4bfc:	4611      	mov	r1, r2
    4bfe:	f7fe fce9 	bl	35d4 <shell_help_print>
		return 1;
    4c02:	2001      	movs	r0, #1
}
    4c04:	b003      	add	sp, #12
    4c06:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (argc == 1) {
    4c0a:	2901      	cmp	r1, #1
    4c0c:	d106      	bne.n	4c1c <cmd_shell_stats+0x30>
		shell_help_print(shell, NULL, 0);
    4c0e:	461a      	mov	r2, r3
    4c10:	4619      	mov	r1, r3
    4c12:	f7fe fcdf 	bl	35d4 <shell_help_print>
	return -EINVAL;
    4c16:	f06f 0015 	mvn.w	r0, #21
    4c1a:	e7f3      	b.n	4c04 <cmd_shell_stats+0x18>
		shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\n", argv[0],
    4c1c:	6853      	ldr	r3, [r2, #4]
    4c1e:	9301      	str	r3, [sp, #4]
    4c20:	4b03      	ldr	r3, [pc, #12]	; (4c30 <cmd_shell_stats+0x44>)
    4c22:	9300      	str	r3, [sp, #0]
    4c24:	6813      	ldr	r3, [r2, #0]
    4c26:	4a03      	ldr	r2, [pc, #12]	; (4c34 <cmd_shell_stats+0x48>)
    4c28:	2102      	movs	r1, #2
    4c2a:	f7fe fbcf 	bl	33cc <shell_fprintf>
    4c2e:	e7f2      	b.n	4c16 <cmd_shell_stats+0x2a>
    4c30:	0002d61b 	.word	0x0002d61b
    4c34:	0002dd8d 	.word	0x0002dd8d

00004c38 <cmd_history>:
{
    4c38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4c3c:	1e4d      	subs	r5, r1, #1
    4c3e:	4269      	negs	r1, r5
    4c40:	f04f 0300 	mov.w	r3, #0
    4c44:	4169      	adcs	r1, r5
    4c46:	461a      	mov	r2, r3
{
    4c48:	4604      	mov	r4, r0
	ret = shell_cmd_precheck(shell, (argc == 1), NULL, 0);
    4c4a:	f7ff fa65 	bl	4118 <shell_cmd_precheck>
	if (ret) {
    4c4e:	4605      	mov	r5, r0
    4c50:	b9d8      	cbnz	r0, 4c8a <cmd_history+0x52>
			shell_fprintf(shell, SHELL_NORMAL, "[%3d] %s\n",
    4c52:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4c94 <cmd_history+0x5c>
	size_t i = 0;
    4c56:	4606      	mov	r6, r0
				  shell->ctx->temp_buff, &len);
    4c58:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
    4c5a:	68e0      	ldr	r0, [r4, #12]
    4c5c:	ab03      	add	r3, sp, #12
    4c5e:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    4c62:	2101      	movs	r1, #1
    4c64:	f000 f900 	bl	4e68 <shell_history_get>
		if (len) {
    4c68:	9a03      	ldr	r2, [sp, #12]
    4c6a:	68a3      	ldr	r3, [r4, #8]
    4c6c:	b15a      	cbz	r2, 4c86 <cmd_history+0x4e>
				      i++, shell->ctx->temp_buff);
    4c6e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
			shell_fprintf(shell, SHELL_NORMAL, "[%3d] %s\n",
    4c72:	9300      	str	r3, [sp, #0]
    4c74:	1c77      	adds	r7, r6, #1
    4c76:	4633      	mov	r3, r6
    4c78:	4642      	mov	r2, r8
    4c7a:	2100      	movs	r1, #0
    4c7c:	4620      	mov	r0, r4
    4c7e:	f7fe fba5 	bl	33cc <shell_fprintf>
    4c82:	463e      	mov	r6, r7
    4c84:	e7e8      	b.n	4c58 <cmd_history+0x20>
	shell->ctx->temp_buff[0] = '\0';
    4c86:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
}
    4c8a:	4628      	mov	r0, r5
    4c8c:	b004      	add	sp, #16
    4c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c92:	bf00      	nop
    4c94:	0002dd49 	.word	0x0002dd49

00004c98 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    4c98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (!IS_ENABLED(CONFIG_SHELL_CMDS_RESIZE)) {
		shell_fprintf(shell, SHELL_ERROR, "Command not supported.\n");
		return -ENOEXEC;
	}

	err = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4c9c:	2902      	cmp	r1, #2
    4c9e:	f04f 0300 	mov.w	r3, #0
{
    4ca2:	460f      	mov	r7, r1
    4ca4:	4616      	mov	r6, r2
	err = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4ca6:	bf88      	it	hi
    4ca8:	2100      	movhi	r1, #0
    4caa:	461a      	mov	r2, r3
    4cac:	bf98      	it	ls
    4cae:	2101      	movls	r1, #1
{
    4cb0:	4604      	mov	r4, r0
	err = shell_cmd_precheck(shell, (argc <= 2), NULL, 0);
    4cb2:	f7ff fa31 	bl	4118 <shell_cmd_precheck>
	if (err) {
    4cb6:	4605      	mov	r5, r0
    4cb8:	b968      	cbnz	r0, 4cd6 <cmd_resize+0x3e>
		return err;
	}

	if (argc != 1) {
    4cba:	2f01      	cmp	r7, #1
    4cbc:	d00f      	beq.n	4cde <cmd_resize+0x46>
		shell_fprintf(shell, SHELL_ERROR, "%s:%s%s\n", argv[0],
    4cbe:	6873      	ldr	r3, [r6, #4]
    4cc0:	9301      	str	r3, [sp, #4]
    4cc2:	4b54      	ldr	r3, [pc, #336]	; (4e14 <cmd_resize+0x17c>)
    4cc4:	9300      	str	r3, [sp, #0]
    4cc6:	6833      	ldr	r3, [r6, #0]
    4cc8:	4a53      	ldr	r2, [pc, #332]	; (4e18 <cmd_resize+0x180>)
    4cca:	2102      	movs	r1, #2
    4ccc:	4620      	mov	r0, r4
    4cce:	f7fe fb7d 	bl	33cc <shell_fprintf>
			      SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    4cd2:	f06f 0515 	mvn.w	r5, #21
			      "screen size\n");
		return -ENOEXEC;
	}

	return 0;
}
    4cd6:	4628      	mov	r0, r5
    4cd8:	b004      	add	sp, #16
    4cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
    4cde:	4a4f      	ldr	r2, [pc, #316]	; (4e1c <cmd_resize+0x184>)
    4ce0:	494f      	ldr	r1, [pc, #316]	; (4e20 <cmd_resize+0x188>)
    4ce2:	6960      	ldr	r0, [r4, #20]
    4ce4:	f7ff fe95 	bl	4a12 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    4ce8:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    4cec:	4620      	mov	r0, r4
    4cee:	f7ff fbbd 	bl	446c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    4cf2:	21fa      	movs	r1, #250	; 0xfa
    4cf4:	4620      	mov	r0, r4
    4cf6:	f7ff fbc9 	bl	448c <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    4cfa:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    4cfc:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    4d00:	f44f 7280 	mov.w	r2, #256	; 0x100
    4d04:	4629      	mov	r1, r5
    4d06:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    4d0a:	f001 f8ea 	bl	5ee2 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    4d0e:	4945      	ldr	r1, [pc, #276]	; (4e24 <cmd_resize+0x18c>)
    4d10:	6960      	ldr	r0, [r4, #20]
    4d12:	f7ff fe7e 	bl	4a12 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
    4d16:	6960      	ldr	r0, [r4, #20]
    4d18:	f7ff fa20 	bl	415c <shell_fprintf_buffer_flush>
    4d1c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	u16_t buff_idx = 0;
    4d20:	462e      	mov	r6, r5
			(void)shell->iface->api->read(shell->iface, &c,
    4d22:	6860      	ldr	r0, [r4, #4]
    4d24:	6803      	ldr	r3, [r0, #0]
    4d26:	2201      	movs	r2, #1
    4d28:	691f      	ldr	r7, [r3, #16]
    4d2a:	f10d 010b 	add.w	r1, sp, #11
    4d2e:	ab03      	add	r3, sp, #12
    4d30:	47b8      	blx	r7
			if (cnt == 0) {
    4d32:	9b03      	ldr	r3, [sp, #12]
    4d34:	b963      	cbnz	r3, 4d50 <cmd_resize+0xb8>
    4d36:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    4d3a:	2001      	movs	r0, #1
    4d3c:	fa1f f888 	uxth.w	r8, r8
    4d40:	f027 faa8 	bl	2c294 <_impl_k_sleep>
	for (u16_t i = 0; i < 1000; i++) {
    4d44:	f1b8 0f00 	cmp.w	r8, #0
    4d48:	d1eb      	bne.n	4d22 <cmd_resize+0x8a>
		ret_val = -ENOTSUP;
    4d4a:	f06f 0522 	mvn.w	r5, #34	; 0x22
    4d4e:	e02f      	b.n	4db0 <cmd_resize+0x118>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    4d50:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4d54:	68a7      	ldr	r7, [r4, #8]
    4d56:	2b1b      	cmp	r3, #27
    4d58:	d051      	beq.n	4dfe <cmd_resize+0x166>
    4d5a:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
    4d5e:	2a1b      	cmp	r2, #27
    4d60:	d1df      	bne.n	4d22 <cmd_resize+0x8a>
			if (c == 'R') { /* End of response from the terminal. */
    4d62:	2b52      	cmp	r3, #82	; 0x52
    4d64:	d14b      	bne.n	4dfe <cmd_resize+0x166>
				shell->ctx->temp_buff[buff_idx] = '\0';
    4d66:	443e      	add	r6, r7
    4d68:	2300      	movs	r3, #0
    4d6a:	f886 312c 	strb.w	r3, [r6, #300]	; 0x12c
				if (shell->ctx->temp_buff[1] != '[') {
    4d6e:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
    4d72:	2a5b      	cmp	r2, #91	; 0x5b
    4d74:	d14b      	bne.n	4e0e <cmd_resize+0x176>
    4d76:	f507 7197 	add.w	r1, r7, #302	; 0x12e
				buff_idx = 2;
    4d7a:	2002      	movs	r0, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    4d7c:	f811 2b01 	ldrb.w	r2, [r1], #1
    4d80:	3001      	adds	r0, #1
    4d82:	2a3b      	cmp	r2, #59	; 0x3b
    4d84:	b280      	uxth	r0, r0
    4d86:	d125      	bne.n	4dd4 <cmd_resize+0x13c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    4d88:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    4d8c:	d0dd      	beq.n	4d4a <cmd_resize+0xb2>
    4d8e:	f200 162b 	addw	r6, r0, #299	; 0x12b
    4d92:	443e      	add	r6, r7
	*x = 0;
    4d94:	2200      	movs	r2, #0
				while (shell->ctx->temp_buff[buff_idx]
    4d96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    4d9a:	bb29      	cbnz	r1, 4de8 <cmd_resize+0x150>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    4d9c:	2afa      	cmp	r2, #250	; 0xfa
    4d9e:	bf28      	it	cs
    4da0:	22fa      	movcs	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4da2:	2bfa      	cmp	r3, #250	; 0xfa
    4da4:	bf28      	it	cs
    4da6:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    4da8:	f887 112c 	strb.w	r1, [r7, #300]	; 0x12c
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    4dac:	83fa      	strh	r2, [r7, #30]
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4dae:	83bb      	strh	r3, [r7, #28]
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
    4db0:	4a1d      	ldr	r2, [pc, #116]	; (4e28 <cmd_resize+0x190>)
    4db2:	491b      	ldr	r1, [pc, #108]	; (4e20 <cmd_resize+0x188>)
    4db4:	6960      	ldr	r0, [r4, #20]
    4db6:	f7ff fe2c 	bl	4a12 <shell_raw_fprintf>
	if (err != 0) {
    4dba:	2d00      	cmp	r5, #0
    4dbc:	d08b      	beq.n	4cd6 <cmd_resize+0x3e>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    4dbe:	68a3      	ldr	r3, [r4, #8]
    4dc0:	4a1a      	ldr	r2, [pc, #104]	; (4e2c <cmd_resize+0x194>)
    4dc2:	61da      	str	r2, [r3, #28]
		shell_fprintf(shell, SHELL_WARNING,
    4dc4:	2104      	movs	r1, #4
    4dc6:	4a1a      	ldr	r2, [pc, #104]	; (4e30 <cmd_resize+0x198>)
    4dc8:	4620      	mov	r0, r4
    4dca:	f7fe faff 	bl	33cc <shell_fprintf>
    4dce:	f06f 0507 	mvn.w	r5, #7
    4dd2:	e780      	b.n	4cd6 <cmd_resize+0x3e>
					*y = *y * 10 +
    4dd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4dd8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    4ddc:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    4dde:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
					*y = *y * 10 +
    4de2:	b29b      	uxth	r3, r3
					if (buff_idx >=
    4de4:	d1ca      	bne.n	4d7c <cmd_resize+0xe4>
    4de6:	e7b0      	b.n	4d4a <cmd_resize+0xb2>
					(shell->ctx->temp_buff[buff_idx++] -
    4de8:	3001      	adds	r0, #1
    4dea:	b280      	uxth	r0, r0
					*x = *x * 10 +
    4dec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4df0:	3930      	subs	r1, #48	; 0x30
    4df2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
					if (buff_idx >=
    4df6:	28ff      	cmp	r0, #255	; 0xff
					*x = *x * 10 +
    4df8:	b292      	uxth	r2, r2
					if (buff_idx >=
    4dfa:	d9cc      	bls.n	4d96 <cmd_resize+0xfe>
    4dfc:	e7a5      	b.n	4d4a <cmd_resize+0xb2>
			shell->ctx->temp_buff[buff_idx] = c;
    4dfe:	19ba      	adds	r2, r7, r6
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    4e00:	3601      	adds	r6, #1
    4e02:	b2b6      	uxth	r6, r6
    4e04:	2e09      	cmp	r6, #9
			shell->ctx->temp_buff[buff_idx] = c;
    4e06:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    4e0a:	d98a      	bls.n	4d22 <cmd_resize+0x8a>
				shell->ctx->temp_buff[0] = 0;
    4e0c:	2300      	movs	r3, #0
    4e0e:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
    4e12:	e79a      	b.n	4d4a <cmd_resize+0xb2>
    4e14:	0002d61b 	.word	0x0002d61b
    4e18:	0002dd8d 	.word	0x0002dd8d
    4e1c:	0002dc2c 	.word	0x0002dc2c
    4e20:	0002db78 	.word	0x0002db78
    4e24:	0002dc56 	.word	0x0002dc56
    4e28:	0002dc2f 	.word	0x0002dc2f
    4e2c:	00500018 	.word	0x00500018
    4e30:	0002dd53 	.word	0x0002dd53

00004e34 <remove_from_tail>:
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    4e34:	6842      	ldr	r2, [r0, #4]
static void remove_from_tail(struct shell_history *history)
{
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;

	l_item = sys_dlist_peek_tail(&history->list);
    4e36:	1d03      	adds	r3, r0, #4
    4e38:	429a      	cmp	r2, r3
{
    4e3a:	b513      	push	{r0, r1, r4, lr}
    4e3c:	d00d      	beq.n	4e5a <remove_from_tail+0x26>
    4e3e:	6883      	ldr	r3, [r0, #8]
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
	k_mem_slab_free(history->mem_slab, (void **)&l_item);
    4e40:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
    4e42:	e9d3 4200 	ldrd	r4, r2, [r3]
	l_item = sys_dlist_peek_tail(&history->list);
    4e46:	a902      	add	r1, sp, #8
    4e48:	f841 3d04 	str.w	r3, [r1, #-4]!
    4e4c:	6014      	str	r4, [r2, #0]
	node->next->prev = node->prev;
    4e4e:	681b      	ldr	r3, [r3, #0]
    4e50:	605a      	str	r2, [r3, #4]
	k_mem_slab_free(history->mem_slab, (void **)&l_item);
    4e52:	f026 fd87 	bl	2b964 <k_mem_slab_free>
}
    4e56:	b002      	add	sp, #8
    4e58:	bd10      	pop	{r4, pc}
	l_item = sys_dlist_peek_tail(&history->list);
    4e5a:	2300      	movs	r3, #0
    4e5c:	9301      	str	r3, [sp, #4]
	node->prev->next = node->next;
    4e5e:	685b      	ldr	r3, [r3, #4]
    4e60:	deff      	udf	#255	; 0xff

00004e62 <shell_history_mode_exit>:
	history->current = NULL;
    4e62:	2300      	movs	r3, #0
    4e64:	60c3      	str	r3, [r0, #12]
}
    4e66:	4770      	bx	lr

00004e68 <shell_history_get>:
{
    4e68:	b570      	push	{r4, r5, r6, lr}
    4e6a:	4615      	mov	r5, r2
	return list->head == list;
    4e6c:	4602      	mov	r2, r0
    4e6e:	461e      	mov	r6, r3
    4e70:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    4e74:	4294      	cmp	r4, r2
    4e76:	d102      	bne.n	4e7e <shell_history_get+0x16>
		*len = 0;
    4e78:	2000      	movs	r0, #0
    4e7a:	6030      	str	r0, [r6, #0]
}
    4e7c:	bd70      	pop	{r4, r5, r6, pc}
    4e7e:	68c2      	ldr	r2, [r0, #12]
	if (!up) { /* button down */
    4e80:	b9b1      	cbnz	r1, 4eb0 <shell_history_get+0x48>
		if (history->current == NULL) {
    4e82:	2a00      	cmp	r2, #0
    4e84:	d0f8      	beq.n	4e78 <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    4e86:	4294      	cmp	r4, r2
    4e88:	d102      	bne.n	4e90 <shell_history_get+0x28>
	history->current = l_item;
    4e8a:	2300      	movs	r3, #0
    4e8c:	60c3      	str	r3, [r0, #12]
    4e8e:	e7f3      	b.n	4e78 <shell_history_get+0x10>
    4e90:	6854      	ldr	r4, [r2, #4]
    4e92:	60c4      	str	r4, [r0, #12]
	if (h_item) {
    4e94:	2c00      	cmp	r4, #0
    4e96:	d0ef      	beq.n	4e78 <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    4e98:	8922      	ldrh	r2, [r4, #8]
    4e9a:	f104 010a 	add.w	r1, r4, #10
    4e9e:	4628      	mov	r0, r5
    4ea0:	f000 fff2 	bl	5e88 <memcpy>
		*len = h_item->len;
    4ea4:	8922      	ldrh	r2, [r4, #8]
    4ea6:	6032      	str	r2, [r6, #0]
		dst[*len] = '\0';
    4ea8:	2300      	movs	r3, #0
    4eaa:	54ab      	strb	r3, [r5, r2]
		return true;
    4eac:	2001      	movs	r0, #1
    4eae:	e7e5      	b.n	4e7c <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    4eb0:	2a00      	cmp	r2, #0
    4eb2:	d0ee      	beq.n	4e92 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    4eb4:	6883      	ldr	r3, [r0, #8]
    4eb6:	4293      	cmp	r3, r2
    4eb8:	d0e7      	beq.n	4e8a <shell_history_get+0x22>
    4eba:	6814      	ldr	r4, [r2, #0]
    4ebc:	e7e9      	b.n	4e92 <shell_history_get+0x2a>

00004ebe <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
    4ebe:	b538      	push	{r3, r4, r5, lr}
    4ec0:	4604      	mov	r4, r0
	while (!sys_dlist_is_empty(&history->list)) {
    4ec2:	1d05      	adds	r5, r0, #4
    4ec4:	6863      	ldr	r3, [r4, #4]
    4ec6:	42ab      	cmp	r3, r5
    4ec8:	d100      	bne.n	4ecc <shell_history_purge+0xe>
		remove_from_tail(history);
	}
}
    4eca:	bd38      	pop	{r3, r4, r5, pc}
		remove_from_tail(history);
    4ecc:	4620      	mov	r0, r4
    4ece:	f7ff ffb1 	bl	4e34 <remove_from_tail>
    4ed2:	e7f7      	b.n	4ec4 <shell_history_purge+0x6>

00004ed4 <shell_history_put>:
	history->current = NULL;
    4ed4:	2300      	movs	r3, #0

void shell_history_put(struct shell_history *history, u8_t *line, size_t len)
{
    4ed6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4eda:	4604      	mov	r4, r0
    4edc:	4689      	mov	r9, r1
	history->current = NULL;
    4ede:	60c3      	str	r3, [r0, #12]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;

	shell_history_mode_exit(history);

	if (len == 0) {
    4ee0:	4616      	mov	r6, r2
    4ee2:	b352      	cbz	r2, 4f3a <shell_history_put+0x66>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    4ee4:	1d07      	adds	r7, r0, #4
	return list->head == list;
    4ee6:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ee8:	4287      	cmp	r7, r0
    4eea:	d119      	bne.n	4f20 <shell_history_put+0x4c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    4eec:	9301      	str	r3, [sp, #4]
	   (strncmp(h_item->data, line, CONFIG_SHELL_CMD_BUFF_SIZE) == 0)) {
		/* Same command as before, do not store */
		return;
	}

	while (k_mem_slab_alloc(history->mem_slab, (void **)&h_item, K_NO_WAIT)
    4eee:	2200      	movs	r2, #0
    4ef0:	a901      	add	r1, sp, #4
    4ef2:	6820      	ldr	r0, [r4, #0]
    4ef4:	f026 fd0e 	bl	2b914 <k_mem_slab_alloc>
    4ef8:	4680      	mov	r8, r0
    4efa:	bb08      	cbnz	r0, 4f40 <shell_history_put+0x6c>
			!= 0) {
		/* if no space remove the oldest entry. */
		remove_from_tail(history);
	}

	add_to_head(history, h_item, line, len);
    4efc:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    4efe:	4632      	mov	r2, r6
	item->len = len;
    4f00:	812e      	strh	r6, [r5, #8]
	item->data[len] = '\0';
    4f02:	442e      	add	r6, r5
	memcpy(item->data, src, len);
    4f04:	4649      	mov	r1, r9
    4f06:	f105 000a 	add.w	r0, r5, #10
    4f0a:	f000 ffbd 	bl	5e88 <memcpy>
	item->data[len] = '\0';
    4f0e:	f886 800a 	strb.w	r8, [r6, #10]
	node->next = list->head;
    4f12:	6863      	ldr	r3, [r4, #4]
	node->prev = list;
    4f14:	e9c5 3700 	strd	r3, r7, [r5]
	list->head->prev = node;
    4f18:	6863      	ldr	r3, [r4, #4]
    4f1a:	605d      	str	r5, [r3, #4]
	list->head = node;
    4f1c:	6065      	str	r5, [r4, #4]
    4f1e:	e00c      	b.n	4f3a <shell_history_put+0x66>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    4f20:	9001      	str	r0, [sp, #4]
	if (h_item &&
    4f22:	2800      	cmp	r0, #0
    4f24:	d0e3      	beq.n	4eee <shell_history_put+0x1a>
	   (h_item->len == len) &&
    4f26:	8903      	ldrh	r3, [r0, #8]
	if (h_item &&
    4f28:	4293      	cmp	r3, r2
    4f2a:	d1e0      	bne.n	4eee <shell_history_put+0x1a>
	   (strncmp(h_item->data, line, CONFIG_SHELL_CMD_BUFF_SIZE) == 0)) {
    4f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f30:	300a      	adds	r0, #10
    4f32:	f000 ff68 	bl	5e06 <strncmp>
	   (h_item->len == len) &&
    4f36:	2800      	cmp	r0, #0
    4f38:	d1d9      	bne.n	4eee <shell_history_put+0x1a>
}
    4f3a:	b003      	add	sp, #12
    4f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		remove_from_tail(history);
    4f40:	4620      	mov	r0, r4
    4f42:	f7ff ff77 	bl	4e34 <remove_from_tail>
    4f46:	e7d2      	b.n	4eee <shell_history_put+0x1a>

00004f48 <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    4f48:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    4f4a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    4f4e:	2300      	movs	r3, #0
    4f50:	60c3      	str	r3, [r0, #12]
}
    4f52:	4770      	bx	lr

00004f54 <msg_from_fifo>:
	backend->control_block->cnt = 0;
	backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
{
    4f54:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    4f56:	2100      	movs	r1, #0
    4f58:	4604      	mov	r4, r0
    4f5a:	6840      	ldr	r0, [r0, #4]
    4f5c:	f026 ff14 	bl	2bd88 <_impl_k_queue_get>
	struct log_msg *msg = k_fifo_get(backend->fifo, K_NO_WAIT);

	if (msg) {
    4f60:	b158      	cbz	r0, 4f7a <msg_from_fifo+0x26>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4f62:	68e3      	ldr	r3, [r4, #12]
    4f64:	f3bf 8f5b 	dmb	ish
    4f68:	e853 2f00 	ldrex	r2, [r3]
    4f6c:	3a01      	subs	r2, #1
    4f6e:	e843 2100 	strex	r1, r2, [r3]
    4f72:	2900      	cmp	r1, #0
    4f74:	d1f8      	bne.n	4f68 <msg_from_fifo+0x14>
    4f76:	f3bf 8f5b 	dmb	ish
		atomic_dec(&backend->control_block->cnt);
	}

	return msg;
}
    4f7a:	bd10      	pop	{r4, pc}

00004f7c <put>:

	return true;
}

static void put(const struct log_backend *const backend, struct log_msg *msg)
{
    4f7c:	b538      	push	{r3, r4, r5, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    4f7e:	6843      	ldr	r3, [r0, #4]
    4f80:	681d      	ldr	r5, [r3, #0]
	struct k_poll_signal *signal;

	log_msg_get(msg);
    4f82:	4608      	mov	r0, r1
{
    4f84:	460c      	mov	r4, r1
	log_msg_get(msg);
    4f86:	f7fd f927 	bl	21d8 <log_msg_get>

	switch (shell->log_backend->control_block->state) {
    4f8a:	69eb      	ldr	r3, [r5, #28]
    4f8c:	68da      	ldr	r2, [r3, #12]
    4f8e:	7912      	ldrb	r2, [r2, #4]
    4f90:	2a01      	cmp	r2, #1
    4f92:	d006      	beq.n	4fa2 <put+0x26>
    4f94:	2a03      	cmp	r2, #3
    4f96:	d028      	beq.n	4fea <put+0x6e>
	case SHELL_LOG_BACKEND_DISABLED:
		/* fall through */
		/* no break */
	default:
		/* Discard message. */
		log_msg_put(msg);
    4f98:	4620      	mov	r0, r4
	}
}
    4f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		log_msg_put(msg);
    4f9e:	f7fd b9a7 	b.w	22f0 <log_msg_put>
	k_fifo_put(shell->log_backend->fifo, msg);
    4fa2:	6858      	ldr	r0, [r3, #4]
    4fa4:	4621      	mov	r1, r4
    4fa6:	f026 fecb 	bl	2bd40 <k_queue_append>
	cnt = atomic_inc(&shell->log_backend->control_block->cnt);
    4faa:	69eb      	ldr	r3, [r5, #28]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4fac:	68db      	ldr	r3, [r3, #12]
    4fae:	f3bf 8f5b 	dmb	ish
    4fb2:	e853 2f00 	ldrex	r2, [r3]
    4fb6:	1c51      	adds	r1, r2, #1
    4fb8:	e843 1000 	strex	r0, r1, [r3]
    4fbc:	2800      	cmp	r0, #0
    4fbe:	d1f8      	bne.n	4fb2 <put+0x36>
    4fc0:	f3bf 8f5b 	dmb	ish
	if (cnt >= CONFIG_SHELL_MAX_LOG_MSG_BUFFERED) {
    4fc4:	2a07      	cmp	r2, #7
    4fc6:	dd08      	ble.n	4fda <put+0x5e>
		log_msg_put(msg_from_fifo(shell->log_backend));
    4fc8:	69e8      	ldr	r0, [r5, #28]
    4fca:	f7ff ffc3 	bl	4f54 <msg_from_fifo>
    4fce:	f7fd f98f 	bl	22f0 <log_msg_put>
			shell->stats->log_lost_cnt++;
    4fd2:	69aa      	ldr	r2, [r5, #24]
    4fd4:	6813      	ldr	r3, [r2, #0]
    4fd6:	3301      	adds	r3, #1
    4fd8:	6013      	str	r3, [r2, #0]
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
    4fda:	68a8      	ldr	r0, [r5, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    4fdc:	2100      	movs	r1, #0
    4fde:	f500 701c 	add.w	r0, r0, #624	; 0x270
}
    4fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4fe6:	f027 bf59 	b.w	2ce9c <_impl_k_poll_signal>
	log_output_msg_process(log_output, msg, flags);
    4fea:	220f      	movs	r2, #15
    4fec:	4621      	mov	r1, r4
    4fee:	6898      	ldr	r0, [r3, #8]
    4ff0:	f7fd fa28 	bl	2444 <log_output_msg_process>
    4ff4:	e7d0      	b.n	4f98 <put+0x1c>

00004ff6 <shell_log_backend_output_func>:
{
    4ff6:	b510      	push	{r4, lr}
    4ff8:	4613      	mov	r3, r2
    4ffa:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
    4ffc:	460a      	mov	r2, r1
    4ffe:	4601      	mov	r1, r0
    5000:	4618      	mov	r0, r3
    5002:	f7fe f9e1 	bl	33c8 <shell_print_stream>
}
    5006:	4620      	mov	r0, r4
    5008:	bd10      	pop	{r4, pc}

0000500a <shell_log_backend_enable>:
{
    500a:	b538      	push	{r3, r4, r5, lr}
    500c:	4604      	mov	r4, r0
	log_backend_enable(backend->backend, ctx, init_log_level);
    500e:	6800      	ldr	r0, [r0, #0]
{
    5010:	460d      	mov	r5, r1
	log_backend_enable(backend->backend, ctx, init_log_level);
    5012:	f7fc ffe3 	bl	1fdc <log_backend_enable>
	log_output_ctx_set(backend->log_output, ctx);
    5016:	68a3      	ldr	r3, [r4, #8]
    5018:	685b      	ldr	r3, [r3, #4]
    501a:	605d      	str	r5, [r3, #4]
	backend->control_block->cnt = 0;
    501c:	68e3      	ldr	r3, [r4, #12]
    501e:	2200      	movs	r2, #0
    5020:	601a      	str	r2, [r3, #0]
	backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    5022:	2201      	movs	r2, #1
    5024:	711a      	strb	r2, [r3, #4]
}
    5026:	bd38      	pop	{r3, r4, r5, pc}

00005028 <shell_log_backend_disable>:
{
    5028:	b510      	push	{r4, lr}
    502a:	4604      	mov	r4, r0
		msg = msg_from_fifo(backend);
    502c:	f7ff ff92 	bl	4f54 <msg_from_fifo>
	while (msg) {
    5030:	b930      	cbnz	r0, 5040 <shell_log_backend_disable+0x18>
	log_backend_disable(backend->backend);
    5032:	6820      	ldr	r0, [r4, #0]
    5034:	f7fc fff4 	bl	2020 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    5038:	68e3      	ldr	r3, [r4, #12]
    503a:	2202      	movs	r2, #2
    503c:	711a      	strb	r2, [r3, #4]
}
    503e:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
    5040:	f7fd f956 	bl	22f0 <log_msg_put>
		msg = msg_from_fifo(backend);
    5044:	4620      	mov	r0, r4
    5046:	e7f1      	b.n	502c <shell_log_backend_disable+0x4>

00005048 <shell_log_backend_process>:
{
    5048:	b538      	push	{r3, r4, r5, lr}
			(const struct shell *)backend->backend->cb->ctx;
    504a:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
    504c:	685b      	ldr	r3, [r3, #4]
    504e:	681d      	ldr	r5, [r3, #0]
	struct log_msg *msg = msg_from_fifo(backend);
    5050:	f7ff ff80 	bl	4f54 <msg_from_fifo>
	if (!msg) {
    5054:	4604      	mov	r4, r0
    5056:	b148      	cbz	r0, 506c <shell_log_backend_process+0x24>
	msg_process(shell->log_backend->log_output, msg);
    5058:	69eb      	ldr	r3, [r5, #28]
	log_output_msg_process(log_output, msg, flags);
    505a:	4601      	mov	r1, r0
    505c:	220f      	movs	r2, #15
    505e:	6898      	ldr	r0, [r3, #8]
    5060:	f7fd f9f0 	bl	2444 <log_output_msg_process>
	log_msg_put(msg);
    5064:	4620      	mov	r0, r4
    5066:	f7fd f943 	bl	22f0 <log_msg_put>
	return true;
    506a:	2001      	movs	r0, #1
}
    506c:	bd38      	pop	{r3, r4, r5, pc}

0000506e <panic>:

static void panic(const struct log_backend *const backend)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    506e:	6843      	ldr	r3, [r0, #4]
{
    5070:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    5072:	681c      	ldr	r4, [r3, #0]
	int err;

	err = shell->iface->api->enable(shell->iface, true);
    5074:	6860      	ldr	r0, [r4, #4]
    5076:	6803      	ldr	r3, [r0, #0]
    5078:	2101      	movs	r1, #1
    507a:	689b      	ldr	r3, [r3, #8]
    507c:	4798      	blx	r3

	if (err == 0) {
    507e:	b9d0      	cbnz	r0, 50b6 <panic+0x48>
		shell->log_backend->control_block->state =
    5080:	69e3      	ldr	r3, [r4, #28]
							SHELL_LOG_BACKEND_PANIC;

		/* Move to the start of next line. */
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    5082:	68a0      	ldr	r0, [r4, #8]
		shell->log_backend->control_block->state =
    5084:	68db      	ldr	r3, [r3, #12]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    5086:	8d01      	ldrh	r1, [r0, #40]	; 0x28
		shell->log_backend->control_block->state =
    5088:	2203      	movs	r2, #3
    508a:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    508c:	3014      	adds	r0, #20
    508e:	8a42      	ldrh	r2, [r0, #18]
    5090:	f7ff f8c8 	bl	4224 <shell_multiline_data_calc>
						  shell->ctx->cmd_buff_pos,
						  shell->ctx->cmd_buff_len);
		shell_op_cursor_vert_move(shell, -1);
    5094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5098:	4620      	mov	r0, r4
    509a:	f7ff f9e7 	bl	446c <shell_op_cursor_vert_move>
		shell_op_cursor_horiz_move(shell,
					   -shell->ctx->vt100_ctx.cons.cur_x);
    509e:	68a3      	ldr	r3, [r4, #8]
    50a0:	8a99      	ldrh	r1, [r3, #20]
		shell_op_cursor_horiz_move(shell,
    50a2:	4620      	mov	r0, r4
    50a4:	4249      	negs	r1, r1
    50a6:	f7ff f9f1 	bl	448c <shell_op_cursor_horiz_move>

		while (shell_log_backend_process(shell->log_backend)) {
    50aa:	69e0      	ldr	r0, [r4, #28]
    50ac:	f7ff ffcc 	bl	5048 <shell_log_backend_process>
    50b0:	2800      	cmp	r0, #0
    50b2:	d1fa      	bne.n	50aa <panic+0x3c>
			/* empty */
		}
	} else {
		shell_log_backend_disable(shell->log_backend);
	}
}
    50b4:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
    50b6:	69e0      	ldr	r0, [r4, #28]
}
    50b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
    50bc:	f7ff bfb4 	b.w	5028 <shell_log_backend_disable>

000050c0 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    50c0:	b513      	push	{r0, r1, r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    50c2:	4c11      	ldr	r4, [pc, #68]	; (5108 <sys_rand32_get+0x48>)
    50c4:	f3bf 8f5b 	dmb	ish
    50c8:	6820      	ldr	r0, [r4, #0]
    50ca:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    50ce:	b960      	cbnz	r0, 50ea <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    50d0:	480e      	ldr	r0, [pc, #56]	; (510c <sys_rand32_get+0x4c>)
    50d2:	f026 faf7 	bl	2b6c4 <device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    50d6:	f3bf 8f5b 	dmb	ish
    50da:	e854 3f00 	ldrex	r3, [r4]
    50de:	e844 0200 	strex	r2, r0, [r4]
    50e2:	2a00      	cmp	r2, #0
    50e4:	d1f9      	bne.n	50da <sys_rand32_get+0x1a>
    50e6:	f3bf 8f5b 	dmb	ish
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    50ea:	6843      	ldr	r3, [r0, #4]
    50ec:	2204      	movs	r2, #4
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	eb0d 0102 	add.w	r1, sp, r2
    50f4:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    50f6:	2800      	cmp	r0, #0
    50f8:	da02      	bge.n	5100 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    50fa:	f000 fa4f 	bl	559c <_timer_cycle_get_32>
    50fe:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    5100:	9801      	ldr	r0, [sp, #4]
    5102:	b002      	add	sp, #8
    5104:	bd10      	pop	{r4, pc}
    5106:	bf00      	nop
    5108:	200008d8 	.word	0x200008d8
    510c:	0002e383 	.word	0x0002e383

00005110 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5110:	280a      	cmp	r0, #10
{
    5112:	b538      	push	{r3, r4, r5, lr}
    5114:	4604      	mov	r4, r0
    5116:	4d07      	ldr	r5, [pc, #28]	; (5134 <console_out+0x24>)
	if ('\n' == c) {
    5118:	d104      	bne.n	5124 <console_out+0x14>
    511a:	6828      	ldr	r0, [r5, #0]
    511c:	6843      	ldr	r3, [r0, #4]
    511e:	210d      	movs	r1, #13
    5120:	685b      	ldr	r3, [r3, #4]
    5122:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5124:	6828      	ldr	r0, [r5, #0]
    5126:	6843      	ldr	r3, [r0, #4]
    5128:	b2e1      	uxtb	r1, r4
    512a:	685b      	ldr	r3, [r3, #4]
    512c:	4798      	blx	r3

	return c;
}
    512e:	4620      	mov	r0, r4
    5130:	bd38      	pop	{r3, r4, r5, pc}
    5132:	bf00      	nop
    5134:	200008dc 	.word	0x200008dc

00005138 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    5138:	4801      	ldr	r0, [pc, #4]	; (5140 <uart_console_hook_install+0x8>)
    513a:	f7fb be91 	b.w	e60 <__printk_hook_install>
    513e:	bf00      	nop
    5140:	00005111 	.word	0x00005111

00005144 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    5144:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5146:	4804      	ldr	r0, [pc, #16]	; (5158 <uart_console_init+0x14>)
    5148:	f026 fabc 	bl	2b6c4 <device_get_binding>
    514c:	4b03      	ldr	r3, [pc, #12]	; (515c <uart_console_init+0x18>)
    514e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    5150:	f7ff fff2 	bl	5138 <uart_console_hook_install>

	return 0;
}
    5154:	2000      	movs	r0, #0
    5156:	bd08      	pop	{r3, pc}
    5158:	0002d5e8 	.word	0x0002d5e8
    515c:	200008dc 	.word	0x200008dc

00005160 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    5160:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    5162:	4c04      	ldr	r4, [pc, #16]	; (5174 <rtt_console_init+0x14>)
    5164:	4620      	mov	r0, r4
    5166:	f7fb fe7b 	bl	e60 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    516a:	4620      	mov	r0, r4
    516c:	f001 fb4c 	bl	6808 <__stdout_hook_install>

	return 0;
}
    5170:	2000      	movs	r0, #0
    5172:	bd10      	pop	{r4, pc}
    5174:	00005179 	.word	0x00005179

00005178 <rtt_console_out>:
{
    5178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    517c:	4f16      	ldr	r7, [pc, #88]	; (51d8 <rtt_console_out+0x60>)
    517e:	4d17      	ldr	r5, [pc, #92]	; (51dc <rtt_console_out+0x64>)
	char c = (char)character;
    5180:	f88d 0007 	strb.w	r0, [sp, #7]
{
    5184:	4606      	mov	r6, r0
	char c = (char)character;
    5186:	2403      	movs	r4, #3
    5188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    518c:	4638      	mov	r0, r7
    518e:	f026 fce1 	bl	2bb54 <_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    5192:	2201      	movs	r2, #1
    5194:	f10d 0107 	add.w	r1, sp, #7
    5198:	2000      	movs	r0, #0
    519a:	f7fc fcab 	bl	1af4 <SEGGER_RTT_WriteNoLock>
    519e:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    51a0:	4638      	mov	r0, r7
    51a2:	f026 fd39 	bl	2bc18 <_impl_k_mutex_unlock>
		if (cnt) {
    51a6:	f1b8 0f00 	cmp.w	r8, #0
    51aa:	d005      	beq.n	51b8 <rtt_console_out+0x40>
			host_present = true;
    51ac:	2301      	movs	r3, #1
    51ae:	702b      	strb	r3, [r5, #0]
}
    51b0:	4630      	mov	r0, r6
    51b2:	b002      	add	sp, #8
    51b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    51b8:	782b      	ldrb	r3, [r5, #0]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d0f8      	beq.n	51b0 <rtt_console_out+0x38>
			if (max_cnt) {
    51be:	3c01      	subs	r4, #1
    51c0:	d007      	beq.n	51d2 <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    51c2:	f027 f963 	bl	2c48c <k_is_in_isr>
    51c6:	2800      	cmp	r0, #0
    51c8:	d1de      	bne.n	5188 <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    51ca:	2002      	movs	r0, #2
    51cc:	f027 f862 	bl	2c294 <_impl_k_sleep>
		SEGGER_RTT_LOCK();
    51d0:	e7da      	b.n	5188 <rtt_console_out+0x10>
				host_present = false;
    51d2:	702c      	strb	r4, [r5, #0]
    51d4:	e7ec      	b.n	51b0 <rtt_console_out+0x38>
    51d6:	bf00      	nop
    51d8:	2000d8d4 	.word	0x2000d8d4
    51dc:	200008e0 	.word	0x200008e0

000051e0 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    51e0:	b510      	push	{r4, lr}
	__asm__ volatile(
    51e2:	f04f 0320 	mov.w	r3, #32
    51e6:	f3ef 8211 	mrs	r2, BASEPRI
    51ea:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    51ee:	4c11      	ldr	r4, [pc, #68]	; (5234 <_m16src_stop+0x54>)
    51f0:	7823      	ldrb	r3, [r4, #0]
    51f2:	b923      	cbnz	r3, 51fe <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    51f4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    51f8:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    51fc:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    51fe:	3b01      	subs	r3, #1
    5200:	b2db      	uxtb	r3, r3
    5202:	7023      	strb	r3, [r4, #0]
    5204:	b123      	cbz	r3, 5210 <_m16src_stop+0x30>
    5206:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    520a:	f06f 000f 	mvn.w	r0, #15
    520e:	e7f5      	b.n	51fc <_m16src_stop+0x1c>
	if (m16src_grd) {
    5210:	4b09      	ldr	r3, [pc, #36]	; (5238 <_m16src_stop+0x58>)
    5212:	7818      	ldrb	r0, [r3, #0]
    5214:	2101      	movs	r1, #1
    5216:	b128      	cbz	r0, 5224 <_m16src_stop+0x44>
		m16src_ref++;
    5218:	7021      	strb	r1, [r4, #0]
    521a:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    521e:	f06f 000a 	mvn.w	r0, #10
    5222:	e7eb      	b.n	51fc <_m16src_stop+0x1c>
	m16src_grd = 1;
    5224:	7019      	strb	r1, [r3, #0]
    5226:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    522a:	4a04      	ldr	r2, [pc, #16]	; (523c <_m16src_stop+0x5c>)
    522c:	6011      	str	r1, [r2, #0]
	m16src_grd = 0;
    522e:	7018      	strb	r0, [r3, #0]
	return 0;
    5230:	e7e4      	b.n	51fc <_m16src_stop+0x1c>
    5232:	bf00      	nop
    5234:	200008e3 	.word	0x200008e3
    5238:	200008e2 	.word	0x200008e2
    523c:	40000004 	.word	0x40000004

00005240 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    5240:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    5242:	2200      	movs	r2, #0
    5244:	4610      	mov	r0, r2
    5246:	2101      	movs	r1, #1
    5248:	f000 fb92 	bl	5970 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    524c:	2000      	movs	r0, #0
    524e:	f000 fb5d 	bl	590c <_arch_irq_enable>

	return 0;
}
    5252:	2000      	movs	r0, #0
    5254:	bd08      	pop	{r3, pc}
	...

00005258 <_m16src_start>:
{
    5258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    525a:	f04f 0220 	mov.w	r2, #32
    525e:	f3ef 8311 	mrs	r3, BASEPRI
    5262:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    5266:	4a26      	ldr	r2, [pc, #152]	; (5300 <_m16src_start+0xa8>)
    5268:	7810      	ldrb	r0, [r2, #0]
    526a:	1c44      	adds	r4, r0, #1
    526c:	7014      	strb	r4, [r2, #0]
    526e:	b170      	cbz	r0, 528e <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5270:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    5274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5278:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    527c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    5280:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    5284:	bf0c      	ite	eq
    5286:	2000      	moveq	r0, #0
    5288:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    528c:	e007      	b.n	529e <_m16src_start+0x46>
	if (m16src_grd) {
    528e:	4d1d      	ldr	r5, [pc, #116]	; (5304 <_m16src_start+0xac>)
    5290:	782f      	ldrb	r7, [r5, #0]
    5292:	b12f      	cbz	r7, 52a0 <_m16src_start+0x48>
		m16src_ref--;
    5294:	7010      	strb	r0, [r2, #0]
    5296:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    529a:	f06f 000a 	mvn.w	r0, #10
}
    529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    52a0:	2601      	movs	r6, #1
    52a2:	702e      	strb	r6, [r5, #0]
    52a4:	f383 8811 	msr	BASEPRI, r3
    52a8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    52ac:	b319      	cbz	r1, 52f6 <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    52ae:	4638      	mov	r0, r7
    52b0:	f000 fb3c 	bl	592c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    52b4:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    52b8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    52bc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    52c0:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    52c2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    52c6:	b192      	cbz	r2, 52ee <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    52c8:	2200      	movs	r2, #0
    52ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52ce:	4a0e      	ldr	r2, [pc, #56]	; (5308 <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    52d0:	f013 0f01 	tst.w	r3, #1
    52d4:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    52d8:	bf08      	it	eq
    52da:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    52de:	2000      	movs	r0, #0
    52e0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    52e4:	f000 fb12 	bl	590c <_arch_irq_enable>
	m16src_grd = 0;
    52e8:	2300      	movs	r3, #0
    52ea:	702b      	strb	r3, [r5, #0]
    52ec:	e7c2      	b.n	5274 <_m16src_start+0x1c>
			__WFE();
    52ee:	bf20      	wfe
			__SEV();
    52f0:	bf40      	sev
			__WFE();
    52f2:	bf20      	wfe
    52f4:	e7e5      	b.n	52c2 <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    52f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    52fa:	6026      	str	r6, [r4, #0]
    52fc:	e7f4      	b.n	52e8 <_m16src_start+0x90>
    52fe:	bf00      	nop
    5300:	200008e3 	.word	0x200008e3
    5304:	200008e2 	.word	0x200008e2
    5308:	e000e100 	.word	0xe000e100

0000530c <_k32src_start>:
{
    530c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    530e:	f04f 0220 	mov.w	r2, #32
    5312:	f3ef 8311 	mrs	r3, BASEPRI
    5316:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    531a:	4d1d      	ldr	r5, [pc, #116]	; (5390 <_k32src_start+0x84>)
    531c:	782a      	ldrb	r2, [r5, #0]
    531e:	b18a      	cbz	r2, 5344 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5320:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    5324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5328:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    532c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    5330:	f003 0303 	and.w	r3, r3, #3
    5334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    5338:	4393      	bics	r3, r2
}
    533a:	bf14      	ite	ne
    533c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    5340:	2000      	moveq	r0, #0
    5342:	bd38      	pop	{r3, r4, r5, pc}
	k32src_initialized = 1;
    5344:	2401      	movs	r4, #1
    5346:	702c      	strb	r4, [r5, #0]
    5348:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    534c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5350:	4d10      	ldr	r5, [pc, #64]	; (5394 <_k32src_start+0x88>)
    5352:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    5356:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    535a:	602c      	str	r4, [r5, #0]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    535c:	f011 0103 	ands.w	r1, r1, #3
    NRF_CLOCK->INTENCLR = int_mask;
    5360:	f04f 0518 	mov.w	r5, #24
    5364:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    5368:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    536c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    5370:	d1d8      	bne.n	5324 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    5372:	2210      	movs	r2, #16
    5374:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    5378:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    537c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    5380:	f7ff ff6a 	bl	5258 <_m16src_start>
		if (!err) {
    5384:	2800      	cmp	r0, #0
    5386:	d1cd      	bne.n	5324 <_k32src_start+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5388:	4b03      	ldr	r3, [pc, #12]	; (5398 <_k32src_start+0x8c>)
    538a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    538e:	e7c9      	b.n	5324 <_k32src_start+0x18>
    5390:	200008e1 	.word	0x200008e1
    5394:	40000008 	.word	0x40000008
    5398:	e000e100 	.word	0xe000e100

0000539c <_power_clock_isr>:
{
    539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    539e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    53a2:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    53a4:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    53a8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    53ac:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    53b0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    53b4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    53b8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    53bc:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    53c0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    53c4:	f1bc 0f00 	cmp.w	ip, #0
    53c8:	d003      	beq.n	53d2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    53ca:	f04f 0c00 	mov.w	ip, #0
    53ce:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    53d2:	b127      	cbz	r7, 53de <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    53d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53d8:	2700      	movs	r7, #0
    53da:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    53de:	b152      	cbz	r2, 53f6 <_power_clock_isr+0x5a>
    53e0:	03e3      	lsls	r3, r4, #15
    53e2:	d508      	bpl.n	53f6 <_power_clock_isr+0x5a>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    53e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    53e8:	4c15      	ldr	r4, [pc, #84]	; (5440 <_power_clock_isr+0xa4>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    53ea:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    53ec:	2702      	movs	r7, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    53ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    53f2:	6027      	str	r7, [r4, #0]
		NRF_CLOCK->TASKS_CAL = 1;
    53f4:	611a      	str	r2, [r3, #16]
	if (lf) {
    53f6:	b120      	cbz	r0, 5402 <_power_clock_isr+0x66>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    53f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53fc:	2200      	movs	r2, #0
    53fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    5402:	b159      	cbz	r1, 541c <_power_clock_isr+0x80>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    5404:	4b0e      	ldr	r3, [pc, #56]	; (5440 <_power_clock_isr+0xa4>)
		NRF_CLOCK->EVENTS_DONE = 0;
    5406:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    540a:	2100      	movs	r1, #0
    540c:	6019      	str	r1, [r3, #0]
		err = _m16src_stop(dev, NULL);
    540e:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    5410:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    5414:	f7ff fee4 	bl	51e0 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    5418:	2301      	movs	r3, #1
    541a:	6163      	str	r3, [r4, #20]
	if (ctto) {
    541c:	b176      	cbz	r6, 543c <_power_clock_isr+0xa0>
		NRF_CLOCK->EVENTS_CTTO = 0;
    541e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5422:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    5424:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    5426:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    542a:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    542c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    5430:	f7ff ff12 	bl	5258 <_m16src_start>
		if (!err) {
    5434:	b910      	cbnz	r0, 543c <_power_clock_isr+0xa0>
    5436:	4b03      	ldr	r3, [pc, #12]	; (5444 <_power_clock_isr+0xa8>)
    5438:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    543e:	bf00      	nop
    5440:	40000c34 	.word	0x40000c34
    5444:	e000e100 	.word	0xe000e100

00005448 <rtc_compare_set>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)
{
    p_rtc->CC[ch] = cc_val;
    5448:	4b08      	ldr	r3, [pc, #32]	; (546c <rtc_compare_set+0x24>)
    544a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)
{
     return p_rtc->COUNTER;
    544e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    5452:	1ac0      	subs	r0, r0, r3
    5454:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5458:	4b05      	ldr	r3, [pc, #20]	; (5470 <rtc_compare_set+0x28>)
    545a:	3802      	subs	r0, #2
    545c:	4298      	cmp	r0, r3
    545e:	bf82      	ittt	hi
    5460:	4b04      	ldrhi	r3, [pc, #16]	; (5474 <rtc_compare_set+0x2c>)
    5462:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    5466:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    546a:	4770      	bx	lr
    546c:	40011000 	.word	0x40011000
    5470:	007ffffd 	.word	0x007ffffd
    5474:	e000e100 	.word	0xe000e100

00005478 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    5478:	b510      	push	{r4, lr}
    547a:	4b13      	ldr	r3, [pc, #76]	; (54c8 <rtc_announce_set_next+0x50>)
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    547c:	4c13      	ldr	r4, [pc, #76]	; (54cc <rtc_announce_set_next+0x54>)
    547e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    5482:	6822      	ldr	r2, [r4, #0]
    5484:	1a80      	subs	r0, r0, r2
    5486:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick()) {
    548a:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    548e:	d913      	bls.n	54b8 <rtc_announce_set_next+0x40>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();

		if (sys_elapsed > expected_sys_ticks) {
    5490:	490f      	ldr	r1, [pc, #60]	; (54d0 <rtc_announce_set_next+0x58>)
    5492:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();
    5494:	f240 1347 	movw	r3, #327	; 0x147
    5498:	fbb0 f0f3 	udiv	r0, r0, r3
    549c:	4288      	cmp	r0, r1
    549e:	bf28      	it	cs
    54a0:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    54a2:	fb03 2300 	mla	r3, r3, r0, r2
#endif
}

static void wrapped_announce(s32_t ticks)
{
	driver_uptime += ticks;
    54a6:	4a0b      	ldr	r2, [pc, #44]	; (54d4 <rtc_announce_set_next+0x5c>)
				(sys_elapsed * sys_clock_hw_cycles_per_tick())
			   ) & RTC_MASK;
    54a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    54ac:	6023      	str	r3, [r4, #0]
    54ae:	6813      	ldr	r3, [r2, #0]
    54b0:	4403      	add	r3, r0
    54b2:	6013      	str	r3, [r2, #0]
	z_clock_announce(ticks);
    54b4:	f027 fa7c 	bl	2c9b0 <z_clock_announce>
		_sys_idle_elapsed_ticks = sys_elapsed;
		z_clock_announce(_sys_idle_elapsed_ticks);
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    54b8:	6820      	ldr	r0, [r4, #0]
}
    54ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    54be:	f200 1047 	addw	r0, r0, #327	; 0x147
    54c2:	f7ff bfc1 	b.w	5448 <rtc_compare_set>
    54c6:	bf00      	nop
    54c8:	40011000 	.word	0x40011000
    54cc:	200008ec 	.word	0x200008ec
    54d0:	200008e8 	.word	0x200008e8
    54d4:	200008e4 	.word	0x200008e4

000054d8 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    54d8:	4b02      	ldr	r3, [pc, #8]	; (54e4 <rtc1_nrf5_isr+0xc>)
    54da:	2200      	movs	r2, #0
    54dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	/* z_clock_announce() could cause new programming */
	if (!expected_sys_ticks && _sys_clock_always_on) {
		program_max_cycles();
	}
#else
	rtc_announce_set_next();
    54e0:	f7ff bfca 	b.w	5478 <rtc_announce_set_next>
    54e4:	40011000 	.word	0x40011000

000054e8 <z_clock_set_timeout>:
}
    54e8:	4770      	bx	lr

000054ea <z_clock_elapsed>:
}
    54ea:	2000      	movs	r0, #0
    54ec:	4770      	bx	lr
	...

000054f0 <z_clock_idle_exit>:
{
    54f0:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    54f2:	4b07      	ldr	r3, [pc, #28]	; (5510 <z_clock_idle_exit+0x20>)
    54f4:	2200      	movs	r2, #0
    54f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    54fa:	4b06      	ldr	r3, [pc, #24]	; (5514 <z_clock_idle_exit+0x24>)
    54fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5500:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    5504:	f7ff ffb8 	bl	5478 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    5508:	4b03      	ldr	r3, [pc, #12]	; (5518 <z_clock_idle_exit+0x28>)
    550a:	2201      	movs	r2, #1
    550c:	601a      	str	r2, [r3, #0]
}
    550e:	bd08      	pop	{r3, pc}
    5510:	40011000 	.word	0x40011000
    5514:	e000e100 	.word	0xe000e100
    5518:	200008e8 	.word	0x200008e8

0000551c <z_clock_driver_init>:
	sys_trace_isr_exit();

}

int z_clock_driver_init(struct device *device)
{
    551c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    551e:	4819      	ldr	r0, [pc, #100]	; (5584 <z_clock_driver_init+0x68>)
    5520:	f026 f8d0 	bl	2b6c4 <device_get_binding>
	if (!clock) {
    5524:	b350      	cbz	r0, 557c <z_clock_driver_init+0x60>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    5526:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    5528:	4d17      	ldr	r5, [pc, #92]	; (5588 <z_clock_driver_init+0x6c>)
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	2101      	movs	r1, #1
    552e:	4798      	blx	r3
	rtc_past = 0;
    5530:	4b16      	ldr	r3, [pc, #88]	; (558c <z_clock_driver_init+0x70>)
    5532:	2400      	movs	r4, #0
    5534:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    5536:	4b16      	ldr	r3, [pc, #88]	; (5590 <z_clock_driver_init+0x74>)
    5538:	2601      	movs	r6, #1
    553a:	601e      	str	r6, [r3, #0]
    p_rtc->CC[ch] = cc_val;
    553c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    5540:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    5544:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENSET = mask;
    5548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    554c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_rtc->INTENSET = mask;
    5550:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    5554:	4b0f      	ldr	r3, [pc, #60]	; (5594 <z_clock_driver_init+0x78>)
		       sys_clock_hw_cycles_per_tick());
	nrf_rtc_event_enable(SYS_CLOCK_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(SYS_CLOCK_RTC, RTC_INTENSET_COMPARE0_Msk);

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    5556:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    555a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    555e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    5562:	4631      	mov	r1, r6
    5564:	4622      	mov	r2, r4
    5566:	2011      	movs	r0, #17
    5568:	f000 fa02 	bl	5970 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    556c:	2011      	movs	r0, #17
    556e:	f000 f9cd 	bl	590c <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    5572:	4b09      	ldr	r3, [pc, #36]	; (5598 <z_clock_driver_init+0x7c>)

	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_START);

	return 0;
    5574:	4620      	mov	r0, r4
    5576:	601e      	str	r6, [r3, #0]
    5578:	602e      	str	r6, [r5, #0]
}
    557a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    557c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5580:	e7fb      	b.n	557a <z_clock_driver_init+0x5e>
    5582:	bf00      	nop
    5584:	0002e3a8 	.word	0x0002e3a8
    5588:	40011000 	.word	0x40011000
    558c:	200008ec 	.word	0x200008ec
    5590:	200008e8 	.word	0x200008e8
    5594:	e000e100 	.word	0xe000e100
    5598:	40011008 	.word	0x40011008

0000559c <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    559c:	b508      	push	{r3, lr}
	u32_t ticked_cycles;
	u32_t elapsed_cycles;

	/* Number of timer cycles announced as ticks so far. */
	ticked_cycles = z_tick_get() * sys_clock_hw_cycles_per_tick();
    559e:	f027 fa53 	bl	2ca48 <z_tick_get>
    55a2:	f240 1347 	movw	r3, #327	; 0x147
    55a6:	4358      	muls	r0, r3
     return p_rtc->COUNTER;
    55a8:	4b03      	ldr	r3, [pc, #12]	; (55b8 <_timer_cycle_get_32+0x1c>)
    55aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * The value of RTC_COUNTER is not reset on tick, so it will
	 * compensate potentialy missed update of z_tick_get()
	 * which could have happen between the ticked_cycles calculation
	 * and the code below.
	 */
	elapsed_cycles = (RTC_COUNTER - ticked_cycles) & RTC_MASK;
    55ae:	1a1b      	subs	r3, r3, r0
    55b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return ticked_cycles + elapsed_cycles;
}
    55b4:	4418      	add	r0, r3
    55b6:	bd08      	pop	{r3, pc}
    55b8:	40011000 	.word	0x40011000

000055bc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    55bc:	4804      	ldr	r0, [pc, #16]	; (55d0 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    55be:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    55c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    55c2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    55c4:	d003      	beq.n	55ce <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    55c6:	4903      	ldr	r1, [pc, #12]	; (55d4 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    55c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    55cc:	600a      	str	r2, [r1, #0]

000055ce <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    55ce:	4770      	bx	lr
    ldr r0, =_kernel
    55d0:	200031a8 	.word	0x200031a8
    ldr r1, =_SCS_ICSR
    55d4:	e000ed04 	.word	0xe000ed04

000055d8 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    55d8:	4804      	ldr	r0, [pc, #16]	; (55ec <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    55da:	2300      	movs	r3, #0
    55dc:	2120      	movs	r1, #32
    55de:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    55e0:	3301      	adds	r3, #1
    55e2:	2b27      	cmp	r3, #39	; 0x27
    55e4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    55e8:	d1f9      	bne.n	55de <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    55ea:	4770      	bx	lr
    55ec:	e000e100 	.word	0xe000e100

000055f0 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    55f0:	4a08      	ldr	r2, [pc, #32]	; (5614 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    55f2:	4909      	ldr	r1, [pc, #36]	; (5618 <__swap+0x28>)
	_current->arch.basepri = key;
    55f4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    55f6:	6809      	ldr	r1, [r1, #0]
    55f8:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    55fa:	4908      	ldr	r1, [pc, #32]	; (561c <__swap+0x2c>)
	_current->arch.basepri = key;
    55fc:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    55fe:	684b      	ldr	r3, [r1, #4]
    5600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5604:	604b      	str	r3, [r1, #4]
    5606:	2300      	movs	r3, #0
    5608:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    560c:	6893      	ldr	r3, [r2, #8]
}
    560e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    5610:	4770      	bx	lr
    5612:	bf00      	nop
    5614:	200031a8 	.word	0x200031a8
    5618:	00035384 	.word	0x00035384
    561c:	e000ed00 	.word	0xe000ed00

00005620 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5620:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5622:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5626:	490d      	ldr	r1, [pc, #52]	; (565c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5628:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    562a:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    562e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    5630:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5634:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    5638:	4f09      	ldr	r7, [pc, #36]	; (5660 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    563a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    563e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    5640:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    5642:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5644:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    5646:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5648:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    564a:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    564e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    5652:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
    5656:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    565a:	4770      	bx	lr
    ldr r1, =_kernel
    565c:	200031a8 	.word	0x200031a8
    ldr v4, =_SCS_ICSR
    5660:	e000ed04 	.word	0xe000ed04

00005664 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    5664:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5668:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    566a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    566e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5672:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    5674:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    5678:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    567c:	2902      	cmp	r1, #2
    beq _oops
    567e:	d0ff      	beq.n	5680 <_oops>

00005680 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    5680:	b500      	push	{lr}
    blx _do_kernel_oops
    5682:	f000 fa1f 	bl	5ac4 <_do_kernel_oops>
    pop {pc}
    5686:	bd00      	pop	{pc}

00005688 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    5688:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    568a:	4c19      	ldr	r4, [pc, #100]	; (56f0 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    568c:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    568e:	4819      	ldr	r0, [pc, #100]	; (56f4 <_MpuFault.isra.2+0x6c>)
    5690:	f7fb fd2e 	bl	10f0 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    5694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5696:	06d9      	lsls	r1, r3, #27
    5698:	d502      	bpl.n	56a0 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    569a:	4817      	ldr	r0, [pc, #92]	; (56f8 <_MpuFault.isra.2+0x70>)
    569c:	f7fb fd28 	bl	10f0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    56a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    56a2:	071a      	lsls	r2, r3, #28
    56a4:	d502      	bpl.n	56ac <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    56a6:	4815      	ldr	r0, [pc, #84]	; (56fc <_MpuFault.isra.2+0x74>)
    56a8:	f7fb fd22 	bl	10f0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    56ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    56ae:	079b      	lsls	r3, r3, #30
    56b0:	d50e      	bpl.n	56d0 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    56b2:	4813      	ldr	r0, [pc, #76]	; (5700 <_MpuFault.isra.2+0x78>)
    56b4:	f7fb fd1c 	bl	10f0 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    56b8:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    56ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    56bc:	0618      	lsls	r0, r3, #24
    56be:	d507      	bpl.n	56d0 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    56c0:	4810      	ldr	r0, [pc, #64]	; (5704 <_MpuFault.isra.2+0x7c>)
    56c2:	f7fb fd15 	bl	10f0 <printk>
			if (fromHardFault) {
    56c6:	b11d      	cbz	r5, 56d0 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    56c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    56ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    56ce:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    56d0:	4c07      	ldr	r4, [pc, #28]	; (56f0 <_MpuFault.isra.2+0x68>)
    56d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    56d4:	07d2      	lsls	r2, r2, #31
    56d6:	d502      	bpl.n	56de <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    56d8:	480b      	ldr	r0, [pc, #44]	; (5708 <_MpuFault.isra.2+0x80>)
    56da:	f7fb fd09 	bl	10f0 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    56de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    56e0:	069b      	lsls	r3, r3, #26
    56e2:	d502      	bpl.n	56ea <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    56e4:	4809      	ldr	r0, [pc, #36]	; (570c <_MpuFault.isra.2+0x84>)
    56e6:	f7fb fd03 	bl	10f0 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    56ea:	2000      	movs	r0, #0
    56ec:	bd38      	pop	{r3, r4, r5, pc}
    56ee:	bf00      	nop
    56f0:	e000ed00 	.word	0xe000ed00
    56f4:	0002e517 	.word	0x0002e517
    56f8:	0002e52e 	.word	0x0002e52e
    56fc:	0002e540 	.word	0x0002e540
    5700:	0002e554 	.word	0x0002e554
    5704:	0002e56d 	.word	0x0002e56d
    5708:	0002e584 	.word	0x0002e584
    570c:	0002e5a4 	.word	0x0002e5a4

00005710 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    5710:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5712:	4c1b      	ldr	r4, [pc, #108]	; (5780 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    5714:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    5716:	481b      	ldr	r0, [pc, #108]	; (5784 <_BusFault.isra.3+0x74>)
    5718:	f7fb fcea 	bl	10f0 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    571c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    571e:	04d8      	lsls	r0, r3, #19
    5720:	d504      	bpl.n	572c <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    5722:	4819      	ldr	r0, [pc, #100]	; (5788 <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    5724:	f7fb fce4 	bl	10f0 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    5728:	2000      	movs	r0, #0
    572a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    572c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    572e:	0519      	lsls	r1, r3, #20
    5730:	d501      	bpl.n	5736 <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    5732:	4816      	ldr	r0, [pc, #88]	; (578c <_BusFault.isra.3+0x7c>)
    5734:	e7f6      	b.n	5724 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5738:	059a      	lsls	r2, r3, #22
    573a:	d514      	bpl.n	5766 <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    573c:	4814      	ldr	r0, [pc, #80]	; (5790 <_BusFault.isra.3+0x80>)
    573e:	f7fb fcd7 	bl	10f0 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    5742:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    5744:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5746:	041b      	lsls	r3, r3, #16
    5748:	d507      	bpl.n	575a <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    574a:	4812      	ldr	r0, [pc, #72]	; (5794 <_BusFault.isra.3+0x84>)
    574c:	f7fb fcd0 	bl	10f0 <printk>
			if (fromHardFault) {
    5750:	b11d      	cbz	r5, 575a <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5758:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    575a:	4b09      	ldr	r3, [pc, #36]	; (5780 <_BusFault.isra.3+0x70>)
    575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    575e:	0558      	lsls	r0, r3, #21
    5760:	d5e2      	bpl.n	5728 <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    5762:	480d      	ldr	r0, [pc, #52]	; (5798 <_BusFault.isra.3+0x88>)
    5764:	e7de      	b.n	5724 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5768:	0559      	lsls	r1, r3, #21
    576a:	d4fa      	bmi.n	5762 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    576c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    576e:	05da      	lsls	r2, r3, #23
    5770:	d501      	bpl.n	5776 <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    5772:	480a      	ldr	r0, [pc, #40]	; (579c <_BusFault.isra.3+0x8c>)
    5774:	e7d6      	b.n	5724 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5778:	049b      	lsls	r3, r3, #18
    577a:	d5d5      	bpl.n	5728 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    577c:	4808      	ldr	r0, [pc, #32]	; (57a0 <_BusFault.isra.3+0x90>)
    577e:	e7d1      	b.n	5724 <_BusFault.isra.3+0x14>
    5780:	e000ed00 	.word	0xe000ed00
    5784:	0002e3c8 	.word	0x0002e3c8
    5788:	0002e52e 	.word	0x0002e52e
    578c:	0002e540 	.word	0x0002e540
    5790:	0002e3df 	.word	0x0002e3df
    5794:	0002e3f9 	.word	0x0002e3f9
    5798:	0002e40f 	.word	0x0002e40f
    579c:	0002e42b 	.word	0x0002e42b
    57a0:	0002e5a4 	.word	0x0002e5a4

000057a4 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    57a4:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    57a6:	4c19      	ldr	r4, [pc, #100]	; (580c <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    57a8:	4819      	ldr	r0, [pc, #100]	; (5810 <_UsageFault.isra.5+0x6c>)
    57aa:	f7fb fca1 	bl	10f0 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    57ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57b0:	019a      	lsls	r2, r3, #6
    57b2:	d502      	bpl.n	57ba <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    57b4:	4817      	ldr	r0, [pc, #92]	; (5814 <_UsageFault.isra.5+0x70>)
    57b6:	f7fb fc9b 	bl	10f0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    57ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57bc:	01db      	lsls	r3, r3, #7
    57be:	d502      	bpl.n	57c6 <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    57c0:	4815      	ldr	r0, [pc, #84]	; (5818 <_UsageFault.isra.5+0x74>)
    57c2:	f7fb fc95 	bl	10f0 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    57c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57c8:	0318      	lsls	r0, r3, #12
    57ca:	d502      	bpl.n	57d2 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    57cc:	4813      	ldr	r0, [pc, #76]	; (581c <_UsageFault.isra.5+0x78>)
    57ce:	f7fb fc8f 	bl	10f0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    57d2:	4c0e      	ldr	r4, [pc, #56]	; (580c <_UsageFault.isra.5+0x68>)
    57d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57d6:	0359      	lsls	r1, r3, #13
    57d8:	d502      	bpl.n	57e0 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    57da:	4811      	ldr	r0, [pc, #68]	; (5820 <_UsageFault.isra.5+0x7c>)
    57dc:	f7fb fc88 	bl	10f0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    57e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57e2:	039a      	lsls	r2, r3, #14
    57e4:	d502      	bpl.n	57ec <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    57e6:	480f      	ldr	r0, [pc, #60]	; (5824 <_UsageFault.isra.5+0x80>)
    57e8:	f7fb fc82 	bl	10f0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    57ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57ee:	03db      	lsls	r3, r3, #15
    57f0:	d502      	bpl.n	57f8 <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    57f2:	480d      	ldr	r0, [pc, #52]	; (5828 <_UsageFault.isra.5+0x84>)
    57f4:	f7fb fc7c 	bl	10f0 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    57f8:	4a04      	ldr	r2, [pc, #16]	; (580c <_UsageFault.isra.5+0x68>)
    57fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    57fc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5800:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5804:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5806:	2000      	movs	r0, #0
    5808:	bd10      	pop	{r4, pc}
    580a:	bf00      	nop
    580c:	e000ed00 	.word	0xe000ed00
    5810:	0002e5d4 	.word	0x0002e5d4
    5814:	0002e5ed 	.word	0x0002e5ed
    5818:	0002e601 	.word	0x0002e601
    581c:	0002e61c 	.word	0x0002e61c
    5820:	0002e63b 	.word	0x0002e63b
    5824:	0002e661 	.word	0x0002e661
    5828:	0002e67c 	.word	0x0002e67c

0000582c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    582c:	b570      	push	{r4, r5, r6, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    582e:	4d28      	ldr	r5, [pc, #160]	; (58d0 <_Fault+0xa4>)
    5830:	686c      	ldr	r4, [r5, #4]
    5832:	f3c4 0408 	ubfx	r4, r4, #0, #9
{
    5836:	4606      	mov	r6, r0

	LOG_PANIC();
    5838:	f7fc fae0 	bl	1dfc <log_panic>
	switch (fault) {
    583c:	1ee3      	subs	r3, r4, #3
    583e:	2b09      	cmp	r3, #9
    5840:	d83a      	bhi.n	58b8 <_Fault+0x8c>
    5842:	e8df f003 	tbb	[pc, r3]
    5846:	3305      	.short	0x3305
    5848:	39393035 	.word	0x39393035
    584c:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    5850:	4820      	ldr	r0, [pc, #128]	; (58d4 <_Fault+0xa8>)
    5852:	f7fb fc4d 	bl	10f0 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    5856:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    5858:	079a      	lsls	r2, r3, #30
    585a:	d503      	bpl.n	5864 <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
    585c:	481e      	ldr	r0, [pc, #120]	; (58d8 <_Fault+0xac>)
	PR_FAULT_INFO(
    585e:	f7fb fc47 	bl	10f0 <printk>
    5862:	e002      	b.n	586a <_Fault+0x3e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    5864:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    5866:	005b      	lsls	r3, r3, #1
    5868:	d405      	bmi.n	5876 <_Fault+0x4a>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    586a:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
    586c:	4631      	mov	r1, r6
}
    586e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_NanoFatalErrorHandler(reason, esf);
    5872:	f000 b8f3 	b.w	5a5c <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    5876:	4819      	ldr	r0, [pc, #100]	; (58dc <_Fault+0xb0>)
    5878:	f7fb fc3a 	bl	10f0 <printk>
		if (SCB_MMFSR) {
    587c:	4b18      	ldr	r3, [pc, #96]	; (58e0 <_Fault+0xb4>)
    587e:	781b      	ldrb	r3, [r3, #0]
    5880:	b12b      	cbz	r3, 588e <_Fault+0x62>
			reason = _MpuFault(esf, 1);
    5882:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    5884:	f7ff ff00 	bl	5688 <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    5888:	2806      	cmp	r0, #6
    588a:	d1ef      	bne.n	586c <_Fault+0x40>
}
    588c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR) {
    588e:	4b15      	ldr	r3, [pc, #84]	; (58e4 <_Fault+0xb8>)
    5890:	781b      	ldrb	r3, [r3, #0]
    5892:	b11b      	cbz	r3, 589c <_Fault+0x70>
			reason = _BusFault(esf, 1);
    5894:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    5896:	f7ff ff3b 	bl	5710 <_BusFault.isra.3>
    589a:	e7f5      	b.n	5888 <_Fault+0x5c>
		} else if (SCB_UFSR) {
    589c:	4b12      	ldr	r3, [pc, #72]	; (58e8 <_Fault+0xbc>)
    589e:	881b      	ldrh	r3, [r3, #0]
    58a0:	b29b      	uxth	r3, r3
    58a2:	2b00      	cmp	r3, #0
    58a4:	d0e1      	beq.n	586a <_Fault+0x3e>
		reason = _UsageFault(esf);
    58a6:	f7ff ff7d 	bl	57a4 <_UsageFault.isra.5>
    58aa:	e7ed      	b.n	5888 <_Fault+0x5c>
		reason = _MpuFault(esf, 0);
    58ac:	2000      	movs	r0, #0
    58ae:	e7e9      	b.n	5884 <_Fault+0x58>
		reason = _BusFault(esf, 0);
    58b0:	2000      	movs	r0, #0
    58b2:	e7f0      	b.n	5896 <_Fault+0x6a>
	PR_FAULT_INFO(
    58b4:	480d      	ldr	r0, [pc, #52]	; (58ec <_Fault+0xc0>)
    58b6:	e7d2      	b.n	585e <_Fault+0x32>
	PR_FAULT_INFO("***** %s %d) *****\n",
    58b8:	4b0d      	ldr	r3, [pc, #52]	; (58f0 <_Fault+0xc4>)
    58ba:	490e      	ldr	r1, [pc, #56]	; (58f4 <_Fault+0xc8>)
    58bc:	480e      	ldr	r0, [pc, #56]	; (58f8 <_Fault+0xcc>)
    58be:	f1a4 0210 	sub.w	r2, r4, #16
    58c2:	2c0f      	cmp	r4, #15
    58c4:	bfc8      	it	gt
    58c6:	4619      	movgt	r1, r3
    58c8:	f7fb fc12 	bl	10f0 <printk>
    58cc:	e7cd      	b.n	586a <_Fault+0x3e>
    58ce:	bf00      	nop
    58d0:	e000ed00 	.word	0xe000ed00
    58d4:	0002e472 	.word	0x0002e472
    58d8:	0002e48a 	.word	0x0002e48a
    58dc:	0002e4ac 	.word	0x0002e4ac
    58e0:	e000ed28 	.word	0xe000ed28
    58e4:	e000ed29 	.word	0xe000ed29
    58e8:	e000ed2a 	.word	0xe000ed2a
    58ec:	0002e4cc 	.word	0x0002e4cc
    58f0:	0002e459 	.word	0x0002e459
    58f4:	0002e444 	.word	0x0002e444
    58f8:	0002e503 	.word	0x0002e503

000058fc <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    58fc:	4a02      	ldr	r2, [pc, #8]	; (5908 <_FaultInit+0xc>)
    58fe:	6953      	ldr	r3, [r2, #20]
    5900:	f043 0310 	orr.w	r3, r3, #16
    5904:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    5906:	4770      	bx	lr
    5908:	e000ed00 	.word	0xe000ed00

0000590c <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    590c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    590e:	2b00      	cmp	r3, #0
    5910:	db08      	blt.n	5924 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5912:	2201      	movs	r2, #1
    5914:	f000 001f 	and.w	r0, r0, #31
    5918:	fa02 f000 	lsl.w	r0, r2, r0
    591c:	095b      	lsrs	r3, r3, #5
    591e:	4a02      	ldr	r2, [pc, #8]	; (5928 <_arch_irq_enable+0x1c>)
    5920:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5924:	4770      	bx	lr
    5926:	bf00      	nop
    5928:	e000e100 	.word	0xe000e100

0000592c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    592c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    592e:	2b00      	cmp	r3, #0
    5930:	db0d      	blt.n	594e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5932:	2201      	movs	r2, #1
    5934:	095b      	lsrs	r3, r3, #5
    5936:	f000 001f 	and.w	r0, r0, #31
    593a:	fa02 f000 	lsl.w	r0, r2, r0
    593e:	3320      	adds	r3, #32
    5940:	4a03      	ldr	r2, [pc, #12]	; (5950 <_arch_irq_disable+0x24>)
    5942:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5946:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    594a:	f3bf 8f6f 	isb	sy
}
    594e:	4770      	bx	lr
    5950:	e000e100 	.word	0xe000e100

00005954 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    5954:	0942      	lsrs	r2, r0, #5
    5956:	4b05      	ldr	r3, [pc, #20]	; (596c <_arch_irq_is_enabled+0x18>)
    5958:	f000 001f 	and.w	r0, r0, #31
    595c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5960:	2301      	movs	r3, #1
    5962:	fa03 f000 	lsl.w	r0, r3, r0
}
    5966:	4010      	ands	r0, r2
    5968:	4770      	bx	lr
    596a:	bf00      	nop
    596c:	e000e100 	.word	0xe000e100

00005970 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5970:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5972:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5974:	bfa8      	it	ge
    5976:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    597a:	f101 0101 	add.w	r1, r1, #1
    597e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    5982:	bfae      	itee	ge
    5984:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5988:	f000 000f 	andlt.w	r0, r0, #15
    598c:	4b03      	ldrlt	r3, [pc, #12]	; (599c <_irq_priority_set+0x2c>)
    598e:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5990:	bfac      	ite	ge
    5992:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5996:	5419      	strblt	r1, [r3, r0]
}
    5998:	4770      	bx	lr
    599a:	bf00      	nop
    599c:	e000ed14 	.word	0xe000ed14

000059a0 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    59a0:	f000 b848 	b.w	5a34 <__bus_fault>

000059a4 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    59a4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    59a6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    59a8:	4b04      	ldr	r3, [pc, #16]	; (59bc <_arch_isr_direct_pm+0x18>)
    59aa:	6a18      	ldr	r0, [r3, #32]
    59ac:	b118      	cbz	r0, 59b6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    59ae:	2200      	movs	r2, #0
    59b0:	621a      	str	r2, [r3, #32]
		_sys_power_save_idle_exit(idle_val);
    59b2:	f025 feb3 	bl	2b71c <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    59b6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    59b8:	bd08      	pop	{r3, pc}
    59ba:	bf00      	nop
    59bc:	200031a8 	.word	0x200031a8

000059c0 <_arch_isr_direct_header>:
#endif

void _arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
    59c0:	4770      	bx	lr
	...

000059c4 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    59c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59c6:	460c      	mov	r4, r1
    59c8:	4605      	mov	r5, r0
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
    59ca:	21aa      	movs	r1, #170	; 0xaa
    59cc:	4620      	mov	r0, r4
    59ce:	4616      	mov	r6, r2
    59d0:	461f      	mov	r7, r3
    59d2:	f000 fa86 	bl	5ee2 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    59d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    59d8:	9909      	ldr	r1, [sp, #36]	; 0x24
    59da:	2204      	movs	r2, #4
    59dc:	4628      	mov	r0, r5
    59de:	f026 fe2d 	bl	2c63c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    59e2:	f1a6 0120 	sub.w	r1, r6, #32
    59e6:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    59e8:	4a0b      	ldr	r2, [pc, #44]	; (5a18 <_new_thread+0x54>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    59ea:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    59ee:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    59f0:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    59f4:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    59f8:	e9c5 4616 	strd	r4, r6, [r5, #88]	; 0x58
    59fc:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    59fe:	9a06      	ldr	r2, [sp, #24]
    5a00:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    5a02:	9a07      	ldr	r2, [sp, #28]
    5a04:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    5a06:	9a08      	ldr	r2, [sp, #32]
    5a08:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    5a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    5a0e:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    5a10:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    5a12:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    5a14:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a18:	00000975 	.word	0x00000975

00005a1c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    5a1c:	4901      	ldr	r1, [pc, #4]	; (5a24 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    5a1e:	2210      	movs	r2, #16
	str r2, [r1]
    5a20:	600a      	str	r2, [r1, #0]
	bx lr
    5a22:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    5a24:	e000ed10 	.word	0xe000ed10

00005a28 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    5a28:	4040      	eors	r0, r0
	msr BASEPRI, r0
    5a2a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    5a2e:	bf30      	wfi

	bx lr
    5a30:	4770      	bx	lr
    5a32:	bf00      	nop

00005a34 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    5a34:	4040      	eors	r0, r0
	msr BASEPRI, r0
    5a36:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    5a3a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 5a58 <__bus_fault+0x24>
	ldr ip, [ip]
    5a3e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    5a42:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    5a46:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    5a48:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    5a4c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    5a50:	b500      	push	{lr}
	bl _Fault
    5a52:	f7ff feeb 	bl	582c <_Fault>

	pop {pc}
    5a56:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    5a58:	e000ed04 	.word	0xe000ed04

00005a5c <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    5a5c:	b538      	push	{r3, r4, r5, lr}
    5a5e:	4604      	mov	r4, r0
    5a60:	460d      	mov	r5, r1
	LOG_PANIC();
    5a62:	f7fc f9cb 	bl	1dfc <log_panic>

	switch (reason) {
    5a66:	2c05      	cmp	r4, #5
    5a68:	d81a      	bhi.n	5aa0 <_NanoFatalErrorHandler+0x44>
    5a6a:	e8df f004 	tbb	[pc, r4]
    5a6e:	1903      	.short	0x1903
    5a70:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    5a74:	480d      	ldr	r0, [pc, #52]	; (5aac <_NanoFatalErrorHandler+0x50>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    5a76:	f7fb fb3b 	bl	10f0 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    5a7a:	f026 fc71 	bl	2c360 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    5a7e:	69aa      	ldr	r2, [r5, #24]
    5a80:	4601      	mov	r1, r0
    5a82:	480b      	ldr	r0, [pc, #44]	; (5ab0 <_NanoFatalErrorHandler+0x54>)
    5a84:	f7fb fb34 	bl	10f0 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    5a88:	4629      	mov	r1, r5
    5a8a:	4620      	mov	r0, r4
}
    5a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    5a90:	f000 b81c 	b.w	5acc <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    5a94:	4807      	ldr	r0, [pc, #28]	; (5ab4 <_NanoFatalErrorHandler+0x58>)
    5a96:	e7ee      	b.n	5a76 <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
    5a98:	4807      	ldr	r0, [pc, #28]	; (5ab8 <_NanoFatalErrorHandler+0x5c>)
    5a9a:	e7ec      	b.n	5a76 <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
    5a9c:	4807      	ldr	r0, [pc, #28]	; (5abc <_NanoFatalErrorHandler+0x60>)
    5a9e:	e7ea      	b.n	5a76 <_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    5aa0:	4621      	mov	r1, r4
    5aa2:	4807      	ldr	r0, [pc, #28]	; (5ac0 <_NanoFatalErrorHandler+0x64>)
    5aa4:	f7fb fb24 	bl	10f0 <printk>
		break;
    5aa8:	e7e7      	b.n	5a7a <_NanoFatalErrorHandler+0x1e>
    5aaa:	bf00      	nop
    5aac:	0002e6a8 	.word	0x0002e6a8
    5ab0:	0002e746 	.word	0x0002e746
    5ab4:	0002e6c8 	.word	0x0002e6c8
    5ab8:	0002e6ee 	.word	0x0002e6ee
    5abc:	0002e708 	.word	0x0002e708
    5ac0:	0002e723 	.word	0x0002e723

00005ac4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    5ac4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    5ac6:	6800      	ldr	r0, [r0, #0]
    5ac8:	f7ff bfc8 	b.w	5a5c <_NanoFatalErrorHandler>

00005acc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    5acc:	2805      	cmp	r0, #5
{
    5ace:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    5ad0:	d00c      	beq.n	5aec <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    5ad2:	f026 fcdb 	bl	2c48c <k_is_in_isr>
    5ad6:	b160      	cbz	r0, 5af2 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    5ad8:	f026 fcd8 	bl	2c48c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    5adc:	490c      	ldr	r1, [pc, #48]	; (5b10 <_SysFatalErrorHandler+0x44>)
    5ade:	4b0d      	ldr	r3, [pc, #52]	; (5b14 <_SysFatalErrorHandler+0x48>)
    5ae0:	2800      	cmp	r0, #0
    5ae2:	bf08      	it	eq
    5ae4:	4619      	moveq	r1, r3
    5ae6:	480c      	ldr	r0, [pc, #48]	; (5b18 <_SysFatalErrorHandler+0x4c>)
    5ae8:	f7fb fb02 	bl	10f0 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    5aec:	f7ff ff9c 	bl	5a28 <k_cpu_idle>
    5af0:	e7fc      	b.n	5aec <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    5af2:	f026 fcdb 	bl	2c4ac <_is_thread_essential>
    5af6:	2800      	cmp	r0, #0
    5af8:	d1ee      	bne.n	5ad8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    5afa:	4c08      	ldr	r4, [pc, #32]	; (5b1c <_SysFatalErrorHandler+0x50>)
    5afc:	4808      	ldr	r0, [pc, #32]	; (5b20 <_SysFatalErrorHandler+0x54>)
    5afe:	68a1      	ldr	r1, [r4, #8]
    5b00:	f7fb faf6 	bl	10f0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    5b04:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    5b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b0a:	f000 b80b 	b.w	5b24 <_impl_k_thread_abort>
    5b0e:	bf00      	nop
    5b10:	0002e782 	.word	0x0002e782
    5b14:	0002e786 	.word	0x0002e786
    5b18:	0002e797 	.word	0x0002e797
    5b1c:	200031a8 	.word	0x200031a8
    5b20:	0002e7b7 	.word	0x0002e7b7

00005b24 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    5b24:	b538      	push	{r3, r4, r5, lr}
    5b26:	4605      	mov	r5, r0
	__asm__ volatile(
    5b28:	f04f 0320 	mov.w	r3, #32
    5b2c:	f3ef 8411 	mrs	r4, BASEPRI
    5b30:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    5b34:	f026 fd14 	bl	2c560 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    5b38:	4b0a      	ldr	r3, [pc, #40]	; (5b64 <_impl_k_thread_abort+0x40>)
    5b3a:	689b      	ldr	r3, [r3, #8]
    5b3c:	42ab      	cmp	r3, r5
    5b3e:	d10b      	bne.n	5b58 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    5b40:	4b09      	ldr	r3, [pc, #36]	; (5b68 <_impl_k_thread_abort+0x44>)
    5b42:	685a      	ldr	r2, [r3, #4]
    5b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
    5b48:	b912      	cbnz	r2, 5b50 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    5b4a:	4620      	mov	r0, r4
    5b4c:	f7ff fd50 	bl	55f0 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5b50:	685a      	ldr	r2, [r3, #4]
    5b52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5b56:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    5b58:	4620      	mov	r0, r4
}
    5b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    5b5e:	f026 ba19 	b.w	2bf94 <_reschedule>
    5b62:	bf00      	nop
    5b64:	200031a8 	.word	0x200031a8
    5b68:	e000ed00 	.word	0xe000ed00

00005b6c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    5b6c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    5b6e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5b70:	4a0b      	ldr	r2, [pc, #44]	; (5ba0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5b72:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5b74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5b76:	bf1e      	ittt	ne
	movne	r1, #0
    5b78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5b7a:	6211      	strne	r1, [r2, #32]
		blxne	_sys_power_save_idle_exit
    5b7c:	f025 fdce 	blne	2b71c <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5b80:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    5b82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5b86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5b8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    5b8e:	4905      	ldr	r1, [pc, #20]	; (5ba4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5b90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5b92:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    5b94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    5b96:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    5b9a:	f7ff bd0f 	b.w	55bc <_ExcExit>
    5b9e:	0000      	.short	0x0000
	ldr r2, =_kernel
    5ba0:	200031a8 	.word	0x200031a8
	ldr r1, =_sw_isr_table
    5ba4:	000000dc 	.word	0x000000dc

00005ba8 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5ba8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5baa:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
    5bae:	480a      	ldr	r0, [pc, #40]	; (5bd8 <__reset+0x30>)
    ldr r1, =0xaa
    5bb0:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    5bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    5bb8:	f000 f993 	bl	5ee2 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    5bbc:	4806      	ldr	r0, [pc, #24]	; (5bd8 <__reset+0x30>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    5bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5bc2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5bc4:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    5bc8:	2002      	movs	r0, #2
    msr CONTROL, r0
    5bca:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    5bce:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    5bd2:	f000 f807 	bl	5be4 <_PrepC>
    5bd6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    5bd8:	2000c018 	.word	0x2000c018

00005bdc <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    5bdc:	bf30      	wfi
    b _SysNmiOnReset
    5bde:	f7ff bffd 	b.w	5bdc <_SysNmiOnReset>
    5be2:	bf00      	nop

00005be4 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    5be4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5be6:	4b07      	ldr	r3, [pc, #28]	; (5c04 <_PrepC+0x20>)
    5be8:	4a07      	ldr	r2, [pc, #28]	; (5c08 <_PrepC+0x24>)
    5bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5bee:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5bf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5bf4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    5bf8:	f025 fdaa 	bl	2b750 <_bss_zero>
	_data_copy();
    5bfc:	f025 fdb2 	bl	2b764 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    5c00:	f025 fdd4 	bl	2b7ac <_Cstart>
    5c04:	00000000 	.word	0x00000000
    5c08:	e000ed00 	.word	0xe000ed00

00005c0c <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    5c0c:	b508      	push	{r3, lr}
	handler();
    5c0e:	f7ff ffe5 	bl	5bdc <_SysNmiOnReset>
	_ExcExit();
}
    5c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    5c16:	f7ff bcd1 	b.w	55bc <_ExcExit>
	...

00005c1c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5c1c:	4b03      	ldr	r3, [pc, #12]	; (5c2c <arm_core_mpu_enable+0x10>)
    5c1e:	2205      	movs	r2, #5
    5c20:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    5c22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c26:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5c2a:	4770      	bx	lr
    5c2c:	e000ed90 	.word	0xe000ed90

00005c30 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    5c30:	4a11      	ldr	r2, [pc, #68]	; (5c78 <arm_mpu_init+0x48>)
{
    5c32:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    5c34:	6814      	ldr	r4, [r2, #0]
    5c36:	2c08      	cmp	r4, #8
    5c38:	d81b      	bhi.n	5c72 <arm_mpu_init+0x42>
	MPU->CTRL = 0;
    5c3a:	4910      	ldr	r1, [pc, #64]	; (5c7c <arm_mpu_init+0x4c>)
    5c3c:	6850      	ldr	r0, [r2, #4]
    5c3e:	2300      	movs	r3, #0
    5c40:	604b      	str	r3, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    5c42:	429c      	cmp	r4, r3
    5c44:	f100 000c 	add.w	r0, r0, #12
    5c48:	d103      	bne.n	5c52 <arm_mpu_init+0x22>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    5c4a:	f7ff ffe7 	bl	5c1c <arm_core_mpu_enable>
    5c4e:	2000      	movs	r0, #0
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    5c50:	bd10      	pop	{r4, pc}
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    5c52:	608b      	str	r3, [r1, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5c54:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    5c58:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    5c5c:	f042 0210 	orr.w	r2, r2, #16
    5c60:	431a      	orrs	r2, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5c62:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5c64:	f850 2c04 	ldr.w	r2, [r0, #-4]
    5c68:	f042 0201 	orr.w	r2, r2, #1
    5c6c:	610a      	str	r2, [r1, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    5c6e:	3301      	adds	r3, #1
    5c70:	e7e7      	b.n	5c42 <arm_mpu_init+0x12>
		return -1;
    5c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5c76:	e7eb      	b.n	5c50 <arm_mpu_init+0x20>
    5c78:	2000cc1c 	.word	0x2000cc1c
    5c7c:	e000ed90 	.word	0xe000ed90

00005c80 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    5c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c84:	4684      	mov	ip, r0
    5c86:	460f      	mov	r7, r1
	register const char *s = nptr;
    5c88:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    5c8a:	462c      	mov	r4, r5
    5c8c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return c == ' ' || ((unsigned)c-'\t') < 5;
    5c90:	2b20      	cmp	r3, #32
    5c92:	d036      	beq.n	5d02 <strtol+0x82>
    5c94:	f1a3 0109 	sub.w	r1, r3, #9
    5c98:	2904      	cmp	r1, #4
    5c9a:	d932      	bls.n	5d02 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
    5c9c:	2b2d      	cmp	r3, #45	; 0x2d
    5c9e:	d132      	bne.n	5d06 <strtol+0x86>
		neg = 1;
		c = *s++;
    5ca0:	786b      	ldrb	r3, [r5, #1]
    5ca2:	1cac      	adds	r4, r5, #2
		neg = 1;
    5ca4:	2101      	movs	r1, #1
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
    5ca6:	2a00      	cmp	r2, #0
    5ca8:	d05c      	beq.n	5d64 <strtol+0xe4>
    5caa:	2a10      	cmp	r2, #16
    5cac:	d109      	bne.n	5cc2 <strtol+0x42>
    5cae:	2b30      	cmp	r3, #48	; 0x30
    5cb0:	d107      	bne.n	5cc2 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    5cb2:	7823      	ldrb	r3, [r4, #0]
    5cb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5cb8:	2b58      	cmp	r3, #88	; 0x58
    5cba:	d14e      	bne.n	5d5a <strtol+0xda>
		c = s[1];
    5cbc:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    5cbe:	2210      	movs	r2, #16
		s += 2;
    5cc0:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    5cc2:	2900      	cmp	r1, #0
    5cc4:	bf0c      	ite	eq
    5cc6:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
    5cca:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    5cce:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    5cd0:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
    5cd4:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    5cd6:	fb02 891e 	mls	r9, r2, lr, r8
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    5cda:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
    5cde:	2d09      	cmp	r5, #9
    5ce0:	d817      	bhi.n	5d12 <strtol+0x92>
			c -= '0';
    5ce2:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
    5ce4:	429a      	cmp	r2, r3
    5ce6:	dd24      	ble.n	5d32 <strtol+0xb2>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
    5ce8:	1c75      	adds	r5, r6, #1
    5cea:	d007      	beq.n	5cfc <strtol+0x7c>
    5cec:	4570      	cmp	r0, lr
    5cee:	d81d      	bhi.n	5d2c <strtol+0xac>
    5cf0:	d101      	bne.n	5cf6 <strtol+0x76>
    5cf2:	454b      	cmp	r3, r9
    5cf4:	dc1a      	bgt.n	5d2c <strtol+0xac>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
    5cf6:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    5cfa:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    5cfc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
    5d00:	e7eb      	b.n	5cda <strtol+0x5a>
{
    5d02:	4625      	mov	r5, r4
    5d04:	e7c1      	b.n	5c8a <strtol+0xa>
	} else if (c == '+')
    5d06:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    5d08:	bf04      	itt	eq
    5d0a:	1cac      	addeq	r4, r5, #2
    5d0c:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
    5d0e:	2100      	movs	r1, #0
    5d10:	e7c9      	b.n	5ca6 <strtol+0x26>
	return (((unsigned)c|32)-'a') < 26;
    5d12:	f043 0520 	orr.w	r5, r3, #32
    5d16:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
    5d18:	2d19      	cmp	r5, #25
    5d1a:	d80a      	bhi.n	5d32 <strtol+0xb2>
	return ((unsigned)(a)-'A') < 26;
    5d1c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    5d20:	2d19      	cmp	r5, #25
    5d22:	bf8c      	ite	hi
    5d24:	2557      	movhi	r5, #87	; 0x57
    5d26:	2537      	movls	r5, #55	; 0x37
    5d28:	1b5b      	subs	r3, r3, r5
    5d2a:	e7db      	b.n	5ce4 <strtol+0x64>
			any = -1;
    5d2c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    5d30:	e7e4      	b.n	5cfc <strtol+0x7c>
		}
	}
	if (any < 0) {
    5d32:	1c73      	adds	r3, r6, #1
    5d34:	d107      	bne.n	5d46 <strtol+0xc6>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
    5d36:	f025 fceb 	bl	2b710 <_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    5d3a:	2326      	movs	r3, #38	; 0x26
    5d3c:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    5d3e:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != NULL)
    5d40:	b937      	cbnz	r7, 5d50 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	return acc;
}
    5d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
    5d46:	b101      	cbz	r1, 5d4a <strtol+0xca>
		acc = -acc;
    5d48:	4240      	negs	r0, r0
	if (endptr != NULL)
    5d4a:	2f00      	cmp	r7, #0
    5d4c:	d0f9      	beq.n	5d42 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
    5d4e:	b10e      	cbz	r6, 5d54 <strtol+0xd4>
    5d50:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    5d54:	f8c7 c000 	str.w	ip, [r7]
	return acc;
    5d58:	e7f3      	b.n	5d42 <strtol+0xc2>
	if (base == 0)
    5d5a:	2330      	movs	r3, #48	; 0x30
    5d5c:	2a00      	cmp	r2, #0
    5d5e:	d1b0      	bne.n	5cc2 <strtol+0x42>
		base = c == '0' ? 8 : 10;
    5d60:	2208      	movs	r2, #8
    5d62:	e7ae      	b.n	5cc2 <strtol+0x42>
	if ((base == 0 || base == 16) &&
    5d64:	2b30      	cmp	r3, #48	; 0x30
    5d66:	d0a4      	beq.n	5cb2 <strtol+0x32>
		base = c == '0' ? 8 : 10;
    5d68:	220a      	movs	r2, #10
    5d6a:	e7aa      	b.n	5cc2 <strtol+0x42>

00005d6c <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    5d6c:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    5d6e:	4603      	mov	r3, r0
    5d70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5d74:	b90a      	cbnz	r2, 5d7a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5d76:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5d78:	4770      	bx	lr
		*d = *s;
    5d7a:	f803 2b01 	strb.w	r2, [r3], #1
    5d7e:	e7f7      	b.n	5d70 <strcpy+0x4>

00005d80 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    5d80:	b570      	push	{r4, r5, r6, lr}
    5d82:	3901      	subs	r1, #1
    5d84:	4605      	mov	r5, r0
    5d86:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5d88:	b142      	cbz	r2, 5d9c <strncpy+0x1c>
    5d8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5d8e:	1e56      	subs	r6, r2, #1
    5d90:	b92b      	cbnz	r3, 5d9e <strncpy+0x1e>
    5d92:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    5d94:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    5d98:	42a2      	cmp	r2, r4
    5d9a:	d1fb      	bne.n	5d94 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    5d9c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    5d9e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    5da2:	4632      	mov	r2, r6
    5da4:	e7ef      	b.n	5d86 <strncpy+0x6>

00005da6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    5da6:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    5da8:	7802      	ldrb	r2, [r0, #0]
    5daa:	428a      	cmp	r2, r1
    5dac:	4603      	mov	r3, r0
    5dae:	f100 0001 	add.w	r0, r0, #1
    5db2:	d004      	beq.n	5dbe <strchr+0x18>
    5db4:	2a00      	cmp	r2, #0
    5db6:	d1f7      	bne.n	5da8 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    5db8:	2900      	cmp	r1, #0
    5dba:	bf18      	it	ne
    5dbc:	2300      	movne	r3, #0
}
    5dbe:	4618      	mov	r0, r3
    5dc0:	4770      	bx	lr

00005dc2 <strrchr>:
 *
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
    5dc2:	b510      	push	{r4, lr}
	char *match = NULL;
    5dc4:	2300      	movs	r3, #0

	do {
		if (*s == (char)c) {
    5dc6:	b2c9      	uxtb	r1, r1
    5dc8:	4604      	mov	r4, r0
    5dca:	f810 2b01 	ldrb.w	r2, [r0], #1
    5dce:	428a      	cmp	r2, r1
    5dd0:	bf08      	it	eq
    5dd2:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
    5dd4:	2a00      	cmp	r2, #0
    5dd6:	d1f7      	bne.n	5dc8 <strrchr+0x6>

	return match;
}
    5dd8:	4618      	mov	r0, r3
    5dda:	bd10      	pop	{r4, pc}

00005ddc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5ddc:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    5dde:	4603      	mov	r3, r0
    5de0:	1a98      	subs	r0, r3, r2
    5de2:	f813 1b01 	ldrb.w	r1, [r3], #1
    5de6:	2900      	cmp	r1, #0
    5de8:	d1fa      	bne.n	5de0 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    5dea:	4770      	bx	lr

00005dec <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    5dec:	3801      	subs	r0, #1
    5dee:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5df0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5df4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5df8:	4293      	cmp	r3, r2
    5dfa:	d102      	bne.n	5e02 <strcmp+0x16>
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d1f7      	bne.n	5df0 <strcmp+0x4>
    5e00:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5e02:	1a98      	subs	r0, r3, r2
    5e04:	4770      	bx	lr

00005e06 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    5e06:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5e08:	2400      	movs	r4, #0
    5e0a:	42a2      	cmp	r2, r4
    5e0c:	d008      	beq.n	5e20 <strncmp+0x1a>
    5e0e:	5d03      	ldrb	r3, [r0, r4]
    5e10:	5d0d      	ldrb	r5, [r1, r4]
    5e12:	42ab      	cmp	r3, r5
    5e14:	d102      	bne.n	5e1c <strncmp+0x16>
    5e16:	3401      	adds	r4, #1
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d1f6      	bne.n	5e0a <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    5e1c:	1b58      	subs	r0, r3, r5
    5e1e:	e000      	b.n	5e22 <strncmp+0x1c>
    5e20:	2000      	movs	r0, #0
}
    5e22:	bd30      	pop	{r4, r5, pc}

00005e24 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
    5e24:	b538      	push	{r3, r4, r5, lr}
    5e26:	4604      	mov	r4, r0
    5e28:	460d      	mov	r5, r1
	strcpy(dest + strlen(dest), src);
    5e2a:	f7ff ffd7 	bl	5ddc <strlen>
    5e2e:	4629      	mov	r1, r5
    5e30:	4420      	add	r0, r4
    5e32:	f7ff ff9b 	bl	5d6c <strcpy>
	return dest;
}
    5e36:	4620      	mov	r0, r4
    5e38:	bd38      	pop	{r3, r4, r5, pc}

00005e3a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    5e3a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    5e3c:	b15a      	cbz	r2, 5e56 <memcmp+0x1c>
    5e3e:	3901      	subs	r1, #1
    5e40:	1884      	adds	r4, r0, r2
    5e42:	f810 2b01 	ldrb.w	r2, [r0], #1
    5e46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    5e4a:	42a0      	cmp	r0, r4
    5e4c:	d001      	beq.n	5e52 <memcmp+0x18>
    5e4e:	429a      	cmp	r2, r3
    5e50:	d0f7      	beq.n	5e42 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    5e52:	1ad0      	subs	r0, r2, r3
}
    5e54:	bd10      	pop	{r4, pc}
		return 0;
    5e56:	4610      	mov	r0, r2
    5e58:	e7fc      	b.n	5e54 <memcmp+0x1a>

00005e5a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    5e5a:	1a43      	subs	r3, r0, r1
    5e5c:	4293      	cmp	r3, r2
{
    5e5e:	b510      	push	{r4, lr}
    5e60:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    5e64:	d308      	bcc.n	5e78 <memmove+0x1e>
    5e66:	3901      	subs	r1, #1
	char *dest = d;
    5e68:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    5e6a:	429a      	cmp	r2, r3
    5e6c:	d00b      	beq.n	5e86 <memmove+0x2c>
			*dest = *src;
    5e6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    5e72:	f802 4b01 	strb.w	r4, [r2], #1
    5e76:	e7f8      	b.n	5e6a <memmove+0x10>
    5e78:	440a      	add	r2, r1
			dest[n] = src[n];
    5e7a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    5e7e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    5e82:	428a      	cmp	r2, r1
    5e84:	d1f9      	bne.n	5e7a <memmove+0x20>
			n--;
		}
	}

	return d;
}
    5e86:	bd10      	pop	{r4, pc}

00005e88 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    5e88:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    5e8a:	ea81 0400 	eor.w	r4, r1, r0
    5e8e:	07a5      	lsls	r5, r4, #30
    5e90:	4603      	mov	r3, r0
    5e92:	d00b      	beq.n	5eac <memcpy+0x24>
    5e94:	3b01      	subs	r3, #1
    5e96:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    5e98:	4291      	cmp	r1, r2
    5e9a:	d11d      	bne.n	5ed8 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    5e9e:	2a00      	cmp	r2, #0
    5ea0:	d0fc      	beq.n	5e9c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    5ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
    5ea6:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    5eaa:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    5eac:	079c      	lsls	r4, r3, #30
    5eae:	d1f6      	bne.n	5e9e <memcpy+0x16>
    5eb0:	1f1d      	subs	r5, r3, #4
    5eb2:	460c      	mov	r4, r1
    5eb4:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    5eb6:	1b3e      	subs	r6, r7, r4
    5eb8:	2e03      	cmp	r6, #3
    5eba:	d808      	bhi.n	5ece <memcpy+0x46>
    5ebc:	0894      	lsrs	r4, r2, #2
    5ebe:	f06f 0503 	mvn.w	r5, #3
    5ec2:	fb05 2204 	mla	r2, r5, r4, r2
    5ec6:	00a4      	lsls	r4, r4, #2
    5ec8:	4423      	add	r3, r4
    5eca:	4421      	add	r1, r4
    5ecc:	e7e2      	b.n	5e94 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    5ece:	f854 6b04 	ldr.w	r6, [r4], #4
    5ed2:	f845 6f04 	str.w	r6, [r5, #4]!
    5ed6:	e7ee      	b.n	5eb6 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    5ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
    5edc:	f803 4f01 	strb.w	r4, [r3, #1]!
    5ee0:	e7da      	b.n	5e98 <memcpy+0x10>

00005ee2 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    5ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5ee4:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5ee6:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    5ee8:	079c      	lsls	r4, r3, #30
    5eea:	d10f      	bne.n	5f0c <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    5eec:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    5ef0:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    5ef4:	461d      	mov	r5, r3
    5ef6:	189f      	adds	r7, r3, r2
    5ef8:	1b7e      	subs	r6, r7, r5
    5efa:	2e03      	cmp	r6, #3
    5efc:	d80c      	bhi.n	5f18 <memset+0x36>
    5efe:	0894      	lsrs	r4, r2, #2
    5f00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5f04:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    5f06:	429c      	cmp	r4, r3
    5f08:	d109      	bne.n	5f1e <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    5f0c:	2a00      	cmp	r2, #0
    5f0e:	d0fc      	beq.n	5f0a <memset+0x28>
		*(d_byte++) = c_byte;
    5f10:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5f14:	3a01      	subs	r2, #1
    5f16:	e7e7      	b.n	5ee8 <memset+0x6>
		*(d_word++) = c_word;
    5f18:	f845 4b04 	str.w	r4, [r5], #4
    5f1c:	e7ec      	b.n	5ef8 <memset+0x16>
		*(d_byte++) = c_byte;
    5f1e:	f804 1b01 	strb.w	r1, [r4], #1
    5f22:	e7f0      	b.n	5f06 <memset+0x24>

00005f24 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    5f24:	b570      	push	{r4, r5, r6, lr}
    5f26:	4604      	mov	r4, r0
	char *buf0 = buf;

	do {
		int d = n % base;
    5f28:	fbb1 f6f2 	udiv	r6, r1, r2
    5f2c:	fb02 1116 	mls	r1, r2, r6, r1

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    5f30:	b2cd      	uxtb	r5, r1
    5f32:	2909      	cmp	r1, #9
    5f34:	bf8c      	ite	hi
    5f36:	2127      	movhi	r1, #39	; 0x27
    5f38:	2100      	movls	r1, #0
    5f3a:	3530      	adds	r5, #48	; 0x30
    5f3c:	4429      	add	r1, r5
    5f3e:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
    5f42:	4631      	mov	r1, r6
    5f44:	2e00      	cmp	r6, #0
    5f46:	d1ef      	bne.n	5f28 <_to_x+0x4>
		*end++ = '0';
    5f48:	2130      	movs	r1, #48	; 0x30
    5f4a:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
    5f4c:	4293      	cmp	r3, r2
    5f4e:	dc07      	bgt.n	5f60 <_to_x+0x3c>
	*end = 0;
    5f50:	4623      	mov	r3, r4
    5f52:	2100      	movs	r1, #0
    5f54:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
    5f58:	4283      	cmp	r3, r0
    5f5a:	d804      	bhi.n	5f66 <_to_x+0x42>
	return _reverse_and_pad(buf0, buf, minlen);
}
    5f5c:	4610      	mov	r0, r2
    5f5e:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
    5f60:	f804 1b01 	strb.w	r1, [r4], #1
    5f64:	e7f1      	b.n	5f4a <_to_x+0x26>
		char tmp = *end;
    5f66:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
    5f68:	7804      	ldrb	r4, [r0, #0]
    5f6a:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
    5f6e:	f800 1b01 	strb.w	r1, [r0], #1
    5f72:	e7f1      	b.n	5f58 <_to_x+0x34>

00005f74 <_rlrshift>:
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
    5f74:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    5f78:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
    5f7c:	ea5f 0c53 	movs.w	ip, r3, lsr #1
    5f80:	ea4f 0b32 	mov.w	fp, r2, rrx
    5f84:	f002 0401 	and.w	r4, r2, #1
    5f88:	eb1b 0204 	adds.w	r2, fp, r4
    5f8c:	f04f 0500 	mov.w	r5, #0
    5f90:	eb4c 0305 	adc.w	r3, ip, r5
    5f94:	e9c0 2300 	strd	r2, r3, [r0]
}
    5f98:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00005f9c <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
    5f9c:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    5fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5) << shifts[i];
    5fa4:	2105      	movs	r1, #5
	rem += 2;
    5fa6:	f112 0802 	adds.w	r8, r2, #2
		rem -= q * 5;
    5faa:	f04f 0600 	mov.w	r6, #0
	rem += 2;
    5fae:	f143 0900 	adc.w	r9, r3, #0
		rem -= q * 5;
    5fb2:	ebb8 0806 	subs.w	r8, r8, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    5fb6:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5;
    5fba:	fb01 f705 	mul.w	r7, r1, r5
    5fbe:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
    5fc2:	ea4f 06d8 	mov.w	r6, r8, lsr #3
    5fc6:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5) << shifts[i];
    5fca:	2400      	movs	r4, #0
    5fcc:	fbb6 fcf1 	udiv	ip, r6, r1
    5fd0:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		quot += q;
    5fd4:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    5fd6:	ea4f 775c 	mov.w	r7, ip, lsr #29
		rem -= q * 5;
    5fda:	46c2      	mov	sl, r8
		quot += q;
    5fdc:	eb45 0307 	adc.w	r3, r5, r7
    5fe0:	4614      	mov	r4, r2
		rem -= q * 5;
    5fe2:	fba6 8901 	umull	r8, r9, r6, r1
    5fe6:	ebba 0208 	subs.w	r2, sl, r8
		quot += q;
    5fea:	461d      	mov	r5, r3
		q = (uint64_t)(hi / 5) << shifts[i];
    5fec:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
    5ff0:	18a4      	adds	r4, r4, r2
    5ff2:	f145 0500 	adc.w	r5, r5, #0
	}

	*v = quot;
    5ff6:	e9c0 4500 	strd	r4, r5, [r0]
}
    5ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005ffe <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
    5ffe:	680b      	ldr	r3, [r1, #0]
    6000:	2b00      	cmp	r3, #0
{
    6002:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
    6006:	dd13      	ble.n	6030 <_get_digit+0x32>
		*digit_count -= 1;
		*fr = *fr * 10;
    6008:	6802      	ldr	r2, [r0, #0]
    600a:	6844      	ldr	r4, [r0, #4]
		*digit_count -= 1;
    600c:	3b01      	subs	r3, #1
    600e:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
    6010:	210a      	movs	r1, #10
    6012:	fba2 bc01 	umull	fp, ip, r2, r1
    6016:	fb01 cc04 	mla	ip, r1, r4, ip
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    601a:	465a      	mov	r2, fp
    601c:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
    6020:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    6024:	ea4f 711c 	mov.w	r1, ip, lsr #28
    6028:	3130      	adds	r1, #48	; 0x30
	} else
		rval = '0';
	return (char) (rval);
}
    602a:	b2c8      	uxtb	r0, r1
    602c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
    6030:	2130      	movs	r1, #48	; 0x30
    6032:	e7fa      	b.n	602a <_get_digit+0x2c>

00006034 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    6034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6038:	b0c9      	sub	sp, #292	; 0x124
    603a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    603e:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    6040:	2300      	movs	r3, #0
{
    6042:	4693      	mov	fp, r2
	count = 0;
    6044:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
    6046:	f89b 0000 	ldrb.w	r0, [fp]
    604a:	f10b 0501 	add.w	r5, fp, #1
    604e:	b148      	cbz	r0, 6064 <_prf+0x30>
		if (c != '%') {
    6050:	2825      	cmp	r0, #37	; 0x25
    6052:	d07b      	beq.n	614c <_prf+0x118>
			if ((*func) (c, dest) == EOF) {
    6054:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    6058:	4798      	blx	r3
    605a:	3001      	adds	r0, #1
    605c:	d106      	bne.n	606c <_prf+0x38>
				return EOF;
    605e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6062:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    6064:	9804      	ldr	r0, [sp, #16]
    6066:	b049      	add	sp, #292	; 0x124
    6068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
    606c:	9b04      	ldr	r3, [sp, #16]
    606e:	3301      	adds	r3, #1
    6070:	e9cd 3704 	strd	r3, r7, [sp, #16]
	while ((c = *format++)) {
    6074:	46ab      	mov	fp, r5
			if (c >= MAXFLD + 1)
    6076:	9f05      	ldr	r7, [sp, #20]
    6078:	e7e5      	b.n	6046 <_prf+0x12>
				switch (c) {
    607a:	2c23      	cmp	r4, #35	; 0x23
    607c:	d05f      	beq.n	613e <_prf+0x10a>
    607e:	d854      	bhi.n	612a <_prf+0xf6>
    6080:	2c00      	cmp	r4, #0
    6082:	d0ef      	beq.n	6064 <_prf+0x30>
					fspace = true;
    6084:	2c20      	cmp	r4, #32
    6086:	bf08      	it	eq
    6088:	f04f 0901 	moveq.w	r9, #1
					fplus = true;
    608c:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    608e:	46ab      	mov	fp, r5
    6090:	48bf      	ldr	r0, [pc, #764]	; (6390 <_prf+0x35c>)
    6092:	f81b 4b01 	ldrb.w	r4, [fp], #1
    6096:	4621      	mov	r1, r4
    6098:	f7ff fe85 	bl	5da6 <strchr>
    609c:	2800      	cmp	r0, #0
    609e:	d1ec      	bne.n	607a <_prf+0x46>
			if (c == '*') {
    60a0:	2c2a      	cmp	r4, #42	; 0x2a
    60a2:	d15b      	bne.n	615c <_prf+0x128>
				width = (int32_t) va_arg(vargs, int32_t);
    60a4:	683a      	ldr	r2, [r7, #0]
    60a6:	9203      	str	r2, [sp, #12]
				if (width < 0) {
    60a8:	2a00      	cmp	r2, #0
					width = -width;
    60aa:	bfb8      	it	lt
    60ac:	4252      	neglt	r2, r2
				width = (int32_t) va_arg(vargs, int32_t);
    60ae:	f107 0304 	add.w	r3, r7, #4
					width = -width;
    60b2:	bfb8      	it	lt
    60b4:	9203      	strlt	r2, [sp, #12]
				c = *format++;
    60b6:	786c      	ldrb	r4, [r5, #1]
					fminus = true;
    60b8:	bfbc      	itt	lt
    60ba:	2201      	movlt	r2, #1
    60bc:	9206      	strlt	r2, [sp, #24]
				c = *format++;
    60be:	f105 0b02 	add.w	fp, r5, #2
				width = (int32_t) va_arg(vargs, int32_t);
    60c2:	461f      	mov	r7, r3
				width = MAXFLD;
    60c4:	9b03      	ldr	r3, [sp, #12]
    60c6:	2bc9      	cmp	r3, #201	; 0xc9
    60c8:	bf28      	it	cs
    60ca:	23c8      	movcs	r3, #200	; 0xc8
    60cc:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    60ce:	2c2e      	cmp	r4, #46	; 0x2e
    60d0:	d169      	bne.n	61a6 <_prf+0x172>
				if (c == '*') {
    60d2:	f89b 3000 	ldrb.w	r3, [fp]
    60d6:	2b2a      	cmp	r3, #42	; 0x2a
    60d8:	d162      	bne.n	61a0 <_prf+0x16c>
					precision = (int32_t)
    60da:	683d      	ldr	r5, [r7, #0]
				c = *format++;
    60dc:	f10b 0b01 	add.w	fp, fp, #1
					precision = (int32_t)
    60e0:	3704      	adds	r7, #4
					precision = -1;
    60e2:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    60e4:	f89b 4000 	ldrb.w	r4, [fp]
					precision = -1;
    60e8:	bfa8      	it	ge
    60ea:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
				c = *format++;
    60ee:	f10b 0b01 	add.w	fp, fp, #1
			if (strchr("hlLz", c) != NULL) {
    60f2:	4621      	mov	r1, r4
    60f4:	48a7      	ldr	r0, [pc, #668]	; (6394 <_prf+0x360>)
    60f6:	f7ff fe56 	bl	5da6 <strchr>
    60fa:	b118      	cbz	r0, 6104 <_prf+0xd0>
				c = *format++;
    60fc:	f89b 4000 	ldrb.w	r4, [fp]
    6100:	f10b 0b01 	add.w	fp, fp, #1
			switch (c) {
    6104:	2c67      	cmp	r4, #103	; 0x67
    6106:	dc7c      	bgt.n	6202 <_prf+0x1ce>
    6108:	2c65      	cmp	r4, #101	; 0x65
    610a:	f280 80e0 	bge.w	62ce <_prf+0x29a>
    610e:	2c47      	cmp	r4, #71	; 0x47
    6110:	dc4c      	bgt.n	61ac <_prf+0x178>
    6112:	2c45      	cmp	r4, #69	; 0x45
    6114:	f280 80db 	bge.w	62ce <_prf+0x29a>
    6118:	2c00      	cmp	r4, #0
    611a:	d0a3      	beq.n	6064 <_prf+0x30>
    611c:	2c25      	cmp	r4, #37	; 0x25
    611e:	f000 8335 	beq.w	678c <_prf+0x758>
			if (c >= MAXFLD + 1)
    6122:	2cc8      	cmp	r4, #200	; 0xc8
    6124:	f340 833c 	ble.w	67a0 <_prf+0x76c>
    6128:	e799      	b.n	605e <_prf+0x2a>
				switch (c) {
    612a:	2c2d      	cmp	r4, #45	; 0x2d
    612c:	d00b      	beq.n	6146 <_prf+0x112>
    612e:	2c30      	cmp	r4, #48	; 0x30
    6130:	d007      	beq.n	6142 <_prf+0x10e>
					fplus = true;
    6132:	2c2b      	cmp	r4, #43	; 0x2b
    6134:	9b07      	ldr	r3, [sp, #28]
    6136:	bf08      	it	eq
    6138:	2301      	moveq	r3, #1
    613a:	9307      	str	r3, [sp, #28]
    613c:	e7a6      	b.n	608c <_prf+0x58>
					falt = true;
    613e:	2601      	movs	r6, #1
					break;
    6140:	e7a4      	b.n	608c <_prf+0x58>
					pad = '0';
    6142:	9402      	str	r4, [sp, #8]
					break;
    6144:	e7a2      	b.n	608c <_prf+0x58>
					fminus = true;
    6146:	2301      	movs	r3, #1
    6148:	9306      	str	r3, [sp, #24]
    614a:	e79f      	b.n	608c <_prf+0x58>
			fminus = fplus = fspace = falt = false;
    614c:	f04f 0900 	mov.w	r9, #0
			pad = ' ';		/* Default pad character    */
    6150:	2320      	movs	r3, #32
    6152:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    6154:	e9cd 9906 	strd	r9, r9, [sp, #24]
    6158:	464e      	mov	r6, r9
    615a:	e798      	b.n	608e <_prf+0x5a>
	return (((unsigned)(a)-'0') < 10);
    615c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c))
    6160:	2b09      	cmp	r3, #9
				width = 0;
    6162:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c))
    6164:	d8b3      	bhi.n	60ce <_prf+0x9a>
		i = 10 * i + *p++ - '0';
    6166:	220a      	movs	r2, #10
	while (isdigit(((int) *p)))
    6168:	46ab      	mov	fp, r5
    616a:	f81b 0b01 	ldrb.w	r0, [fp], #1
    616e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6172:	2b09      	cmp	r3, #9
    6174:	4604      	mov	r4, r0
    6176:	d8a5      	bhi.n	60c4 <_prf+0x90>
		i = 10 * i + *p++ - '0';
    6178:	9b03      	ldr	r3, [sp, #12]
    617a:	fb02 0003 	mla	r0, r2, r3, r0
    617e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6182:	9303      	str	r3, [sp, #12]
    6184:	465d      	mov	r5, fp
    6186:	e7ef      	b.n	6168 <_prf+0x134>
    6188:	fb00 3505 	mla	r5, r0, r5, r3
    618c:	3d30      	subs	r5, #48	; 0x30
    618e:	4693      	mov	fp, r2
	while (isdigit(((int) *p)))
    6190:	465a      	mov	r2, fp
    6192:	f812 3b01 	ldrb.w	r3, [r2], #1
    6196:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    619a:	2909      	cmp	r1, #9
    619c:	d9f4      	bls.n	6188 <_prf+0x154>
    619e:	e7a0      	b.n	60e2 <_prf+0xae>
	i = 0;
    61a0:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    61a2:	200a      	movs	r0, #10
    61a4:	e7f4      	b.n	6190 <_prf+0x15c>
			precision = -1;	/* No precision specified   */
    61a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    61aa:	e7a2      	b.n	60f2 <_prf+0xbe>
			switch (c) {
    61ac:	2c63      	cmp	r4, #99	; 0x63
    61ae:	d06f      	beq.n	6290 <_prf+0x25c>
    61b0:	dc32      	bgt.n	6218 <_prf+0x1e4>
    61b2:	2c58      	cmp	r4, #88	; 0x58
    61b4:	d1b5      	bne.n	6122 <_prf+0xee>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    61b6:	1d3b      	adds	r3, r7, #4
    61b8:	9305      	str	r3, [sp, #20]
    61ba:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    61bc:	2e00      	cmp	r6, #0
    61be:	f000 82dc 	beq.w	677a <_prf+0x746>
		*buf++ = '0';
    61c2:	f647 0330 	movw	r3, #30768	; 0x7830
    61c6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
		*buf++ = 'x';
    61ca:	f10d 0756 	add.w	r7, sp, #86	; 0x56
	len = _to_x(buf, value, 16, precision);
    61ce:	462b      	mov	r3, r5
    61d0:	2210      	movs	r2, #16
    61d2:	4638      	mov	r0, r7
    61d4:	f7ff fea6 	bl	5f24 <_to_x>
	if (prefix == 'X') {
    61d8:	2c58      	cmp	r4, #88	; 0x58
    61da:	d106      	bne.n	61ea <_prf+0x1b6>
    61dc:	f10d 0253 	add.w	r2, sp, #83	; 0x53
	for (/**/; *buf; buf++) {
    61e0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    61e4:	2b00      	cmp	r3, #0
    61e6:	f040 82ca 	bne.w	677e <_prf+0x74a>
	return len + (buf - buf0);
    61ea:	f10d 0854 	add.w	r8, sp, #84	; 0x54
			prefix = 0;
    61ee:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
    61f0:	eba7 0808 	sub.w	r8, r7, r8
    61f4:	4440      	add	r0, r8
			prefix = 0;
    61f6:	bf14      	ite	ne
    61f8:	f04f 0902 	movne.w	r9, #2
    61fc:	f04f 0900 	moveq.w	r9, #0
    6200:	e029      	b.n	6256 <_prf+0x222>
			switch (c) {
    6202:	2c70      	cmp	r4, #112	; 0x70
    6204:	f000 8294 	beq.w	6730 <_prf+0x6fc>
    6208:	dc2b      	bgt.n	6262 <_prf+0x22e>
    620a:	2c6e      	cmp	r4, #110	; 0x6e
    620c:	f000 8253 	beq.w	66b6 <_prf+0x682>
    6210:	f300 8257 	bgt.w	66c2 <_prf+0x68e>
    6214:	2c69      	cmp	r4, #105	; 0x69
    6216:	d184      	bne.n	6122 <_prf+0xee>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    6218:	683c      	ldr	r4, [r7, #0]
    621a:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
    621c:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    621e:	9305      	str	r3, [sp, #20]
	if (value < 0) {
    6220:	da42      	bge.n	62a8 <_prf+0x274>
		*buf++ = '-';
    6222:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000)
    6224:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    6228:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (value != 0x80000000)
    622c:	d041      	beq.n	62b2 <_prf+0x27e>
			value = -value;
    622e:	4261      	negs	r1, r4
		*buf++ = ' ';
    6230:	f10d 0855 	add.w	r8, sp, #85	; 0x55
	return _to_x(buf, value, 10, precision);
    6234:	462b      	mov	r3, r5
    6236:	4640      	mov	r0, r8
    6238:	220a      	movs	r2, #10
    623a:	f7ff fe73 	bl	5f24 <_to_x>
				if (fplus || fspace || (int32_temp < 0))
    623e:	9b07      	ldr	r3, [sp, #28]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    6240:	4480      	add	r8, r0
    6242:	a815      	add	r0, sp, #84	; 0x54
    6244:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (int32_temp < 0))
    6248:	2b00      	cmp	r3, #0
    624a:	d13d      	bne.n	62c8 <_prf+0x294>
    624c:	f1b9 0f00 	cmp.w	r9, #0
    6250:	d101      	bne.n	6256 <_prf+0x222>
    6252:	ea4f 79d4 	mov.w	r9, r4, lsr #31
			prefix = 0;
    6256:	3501      	adds	r5, #1
    6258:	9b02      	ldr	r3, [sp, #8]
    625a:	bf18      	it	ne
    625c:	2320      	movne	r3, #32
    625e:	9302      	str	r3, [sp, #8]
    6260:	e080      	b.n	6364 <_prf+0x330>
			switch (c) {
    6262:	2c75      	cmp	r4, #117	; 0x75
    6264:	f000 8280 	beq.w	6768 <_prf+0x734>
    6268:	2c78      	cmp	r4, #120	; 0x78
    626a:	d0a4      	beq.n	61b6 <_prf+0x182>
    626c:	2c73      	cmp	r4, #115	; 0x73
    626e:	f47f af58 	bne.w	6122 <_prf+0xee>
				cptr_temp = (char *) va_arg(vargs, char *);
    6272:	1d3b      	adds	r3, r7, #4
    6274:	6839      	ldr	r1, [r7, #0]
    6276:	9305      	str	r3, [sp, #20]
				for (c = 0; c < MAXFLD; c++) {
    6278:	2600      	movs	r6, #0
					if (cptr_temp[c] == '\0') {
    627a:	5d8b      	ldrb	r3, [r1, r6]
    627c:	2b00      	cmp	r3, #0
    627e:	f000 8266 	beq.w	674e <_prf+0x71a>
				for (c = 0; c < MAXFLD; c++) {
    6282:	3601      	adds	r6, #1
    6284:	2ec8      	cmp	r6, #200	; 0xc8
    6286:	d1f8      	bne.n	627a <_prf+0x246>
				if ((precision >= 0) && (precision < c))
    6288:	2d00      	cmp	r5, #0
    628a:	f280 8262 	bge.w	6752 <_prf+0x71e>
    628e:	e266      	b.n	675e <_prf+0x72a>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    6290:	1d3b      	adds	r3, r7, #4
    6292:	9305      	str	r3, [sp, #20]
    6294:	683b      	ldr	r3, [r7, #0]
    6296:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				buf[1] = '\0';
    629a:	2300      	movs	r3, #0
    629c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				c = 1;
    62a0:	2601      	movs	r6, #1
					prefix = 2;
    62a2:	f04f 0900 	mov.w	r9, #0
    62a6:	e21c      	b.n	66e2 <_prf+0x6ae>
	} else if (fplus)
    62a8:	9b07      	ldr	r3, [sp, #28]
    62aa:	b123      	cbz	r3, 62b6 <_prf+0x282>
		*buf++ = '+';
    62ac:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    62ae:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    62b2:	4621      	mov	r1, r4
    62b4:	e7bc      	b.n	6230 <_prf+0x1fc>
	else if (fspace)
    62b6:	f1b9 0f00 	cmp.w	r9, #0
    62ba:	d001      	beq.n	62c0 <_prf+0x28c>
		*buf++ = ' ';
    62bc:	2320      	movs	r3, #32
    62be:	e7f6      	b.n	62ae <_prf+0x27a>
	else if (fspace)
    62c0:	4621      	mov	r1, r4
    62c2:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    62c6:	e7b5      	b.n	6234 <_prf+0x200>
					prefix = 1;
    62c8:	f8dd 901c 	ldr.w	r9, [sp, #28]
    62cc:	e7c3      	b.n	6256 <_prf+0x222>
				u.d = (double) va_arg(vargs, double);
    62ce:	3707      	adds	r7, #7
    62d0:	f027 0707 	bic.w	r7, r7, #7
    62d4:	f107 0308 	add.w	r3, r7, #8
				double_temp = u.i;
    62d8:	e9d7 c700 	ldrd	ip, r7, [r7]
				u.d = (double) va_arg(vargs, double);
    62dc:	9305      	str	r3, [sp, #20]
	fract = (double_temp << 11) & ~HIGHBIT64;
    62de:	02fb      	lsls	r3, r7, #11
    62e0:	ea43 535c 	orr.w	r3, r3, ip, lsr #21
    62e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    62e8:	ea4f 22cc 	mov.w	r2, ip, lsl #11
    62ec:	460b      	mov	r3, r1
	exp = double_temp >> 52 & 0x7ff;
    62ee:	f3c7 580a 	ubfx	r8, r7, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    62f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (exp == 0x7ff) {
    62f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
    62fa:	4610      	mov	r0, r2
	if (exp == 0x7ff) {
    62fc:	4598      	cmp	r8, r3
	fract = (double_temp << 11) & ~HIGHBIT64;
    62fe:	e9cd 0100 	strd	r0, r1, [sp]
	sign = !!(double_temp & HIGHBIT64);
    6302:	4660      	mov	r0, ip
	if (exp == 0x7ff) {
    6304:	d148      	bne.n	6398 <_prf+0x364>
		if (sign) {
    6306:	2800      	cmp	r0, #0
		if (!fract) {
    6308:	e9dd 1200 	ldrd	r1, r2, [sp]
		if (sign) {
    630c:	f177 0300 	sbcs.w	r3, r7, #0
			*buf++ = '-';
    6310:	bfb8      	it	lt
    6312:	232d      	movlt	r3, #45	; 0x2d
    6314:	a815      	add	r0, sp, #84	; 0x54
    6316:	bfb6      	itet	lt
    6318:	f88d 3054 	strblt.w	r3, [sp, #84]	; 0x54
		if (sign) {
    631c:	4603      	movge	r3, r0
			*buf++ = '-';
    631e:	f10d 0355 	addlt.w	r3, sp, #85	; 0x55
		if (!fract) {
    6322:	430a      	orrs	r2, r1
    6324:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    6328:	f103 0803 	add.w	r8, r3, #3
    632c:	d125      	bne.n	637a <_prf+0x346>
			if (isupper(c)) {
    632e:	2c19      	cmp	r4, #25
    6330:	d81d      	bhi.n	636e <_prf+0x33a>
				*buf++ = 'I';
    6332:	2249      	movs	r2, #73	; 0x49
    6334:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    6336:	224e      	movs	r2, #78	; 0x4e
    6338:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    633a:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    633c:	709a      	strb	r2, [r3, #2]
		*buf = 0;
    633e:	2200      	movs	r2, #0
    6340:	70da      	strb	r2, [r3, #3]
				if (fplus || fspace || (buf[0] == '-'))
    6342:	9b07      	ldr	r3, [sp, #28]
	return buf - start;
    6344:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (buf[0] == '-'))
    6348:	2b00      	cmp	r3, #0
    634a:	f040 8255 	bne.w	67f8 <_prf+0x7c4>
    634e:	f1b9 0f00 	cmp.w	r9, #0
    6352:	d107      	bne.n	6364 <_prf+0x330>
    6354:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    6358:	f1a1 032d 	sub.w	r3, r1, #45	; 0x2d
    635c:	f1d3 0900 	rsbs	r9, r3, #0
    6360:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1)
    6364:	28c8      	cmp	r0, #200	; 0xc8
    6366:	f73f ae7a 	bgt.w	605e <_prf+0x2a>
    636a:	4606      	mov	r6, r0
    636c:	e1b9      	b.n	66e2 <_prf+0x6ae>
				*buf++ = 'i';
    636e:	2269      	movs	r2, #105	; 0x69
    6370:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    6372:	226e      	movs	r2, #110	; 0x6e
    6374:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    6376:	2266      	movs	r2, #102	; 0x66
    6378:	e7e0      	b.n	633c <_prf+0x308>
			if (isupper(c)) {
    637a:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    637c:	bf99      	ittee	ls
    637e:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    6380:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    6382:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    6384:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    6386:	bf94      	ite	ls
    6388:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    638a:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    638c:	7059      	strb	r1, [r3, #1]
    638e:	e7d5      	b.n	633c <_prf+0x308>
    6390:	0002e7e0 	.word	0x0002e7e0
    6394:	0002e7e6 	.word	0x0002e7e6
	if ((exp | fract) != 0) {
    6398:	e9dd 2300 	ldrd	r2, r3, [sp]
		c = 'f';
    639c:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    639e:	ea42 0208 	orr.w	r2, r2, r8
    63a2:	ea43 73e8 	orr.w	r3, r3, r8, asr #31
		c = 'f';
    63a6:	bf08      	it	eq
    63a8:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    63aa:	4313      	orrs	r3, r2
    63ac:	d043      	beq.n	6436 <_prf+0x402>
		fract |= HIGHBIT64;
    63ae:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (decexp && sign) {
    63b2:	2800      	cmp	r0, #0
		fract |= HIGHBIT64;
    63b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    63b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (decexp && sign) {
    63bc:	f177 0300 	sbcs.w	r3, r7, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    63c0:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
	if (decexp && sign) {
    63c4:	da39      	bge.n	643a <_prf+0x406>
		*buf++ = '-';
    63c6:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    63c8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    63cc:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
	decexp = 0;
    63d0:	2300      	movs	r3, #0
    63d2:	9300      	str	r3, [sp, #0]
	while (exp <= -3) {
    63d4:	f118 0f02 	cmn.w	r8, #2
    63d8:	db3e      	blt.n	6458 <_prf+0x424>
	while (exp > 0) {
    63da:	f1b8 0f00 	cmp.w	r8, #0
    63de:	dc79      	bgt.n	64d4 <_prf+0x4a0>
		_rlrshift(&fract);
    63e0:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    63e2:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    63e6:	f7ff fdc5 	bl	5f74 <_rlrshift>
	while (exp < (0 + 4)) {
    63ea:	f1b8 0f04 	cmp.w	r8, #4
    63ee:	d1f7      	bne.n	63e0 <_prf+0x3ac>
		precision = 6;		/* Default precision if none given */
    63f0:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    63f2:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    63f6:	bfb8      	it	lt
    63f8:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    63fa:	2b47      	cmp	r3, #71	; 0x47
    63fc:	f040 8097 	bne.w	652e <_prf+0x4fa>
		if (!falt && (precision > 0))
    6400:	2e00      	cmp	r6, #0
    6402:	f040 8092 	bne.w	652a <_prf+0x4f6>
    6406:	1c2b      	adds	r3, r5, #0
    6408:	bf18      	it	ne
    640a:	2301      	movne	r3, #1
	prune_zero = false;		/* Assume trailing 0's allowed     */
    640c:	9308      	str	r3, [sp, #32]
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    640e:	9b00      	ldr	r3, [sp, #0]
    6410:	3303      	adds	r3, #3
    6412:	db04      	blt.n	641e <_prf+0x3ea>
    6414:	9a00      	ldr	r2, [sp, #0]
    6416:	1c6b      	adds	r3, r5, #1
    6418:	429a      	cmp	r2, r3
    641a:	f340 808d 	ble.w	6538 <_prf+0x504>
				c = 'E';
    641e:	2c67      	cmp	r4, #103	; 0x67
    6420:	bf0c      	ite	eq
    6422:	2465      	moveq	r4, #101	; 0x65
    6424:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    6426:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    642a:	2310      	movs	r3, #16
    642c:	4598      	cmp	r8, r3
    642e:	930f      	str	r3, [sp, #60]	; 0x3c
    6430:	bfa8      	it	ge
    6432:	4698      	movge	r8, r3
    6434:	e089      	b.n	654a <_prf+0x516>
	if ((exp | fract) != 0) {
    6436:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    643a:	9b07      	ldr	r3, [sp, #28]
    643c:	b10b      	cbz	r3, 6442 <_prf+0x40e>
		*buf++ = '+';
    643e:	232b      	movs	r3, #43	; 0x2b
    6440:	e7c2      	b.n	63c8 <_prf+0x394>
	} else if (fspace) {
    6442:	f1b9 0f00 	cmp.w	r9, #0
    6446:	d001      	beq.n	644c <_prf+0x418>
		*buf++ = ' ';
    6448:	2320      	movs	r3, #32
    644a:	e7bd      	b.n	63c8 <_prf+0x394>
	} else if (fspace) {
    644c:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
    6450:	e7be      	b.n	63d0 <_prf+0x39c>
			_rlrshift(&fract);
    6452:	a810      	add	r0, sp, #64	; 0x40
    6454:	f7ff fd8e 	bl	5f74 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    6458:	e9dd 7c10 	ldrd	r7, ip, [sp, #64]	; 0x40
    645c:	2300      	movs	r3, #0
    645e:	930b      	str	r3, [sp, #44]	; 0x2c
    6460:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    6464:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    6468:	4aa8      	ldr	r2, [pc, #672]	; (670c <_prf+0x6d8>)
    646a:	2300      	movs	r3, #0
    646c:	428b      	cmp	r3, r1
    646e:	bf08      	it	eq
    6470:	4282      	cmpeq	r2, r0
    6472:	f108 0801 	add.w	r8, r8, #1
    6476:	d3ec      	bcc.n	6452 <_prf+0x41e>
		fract *= 5;
    6478:	2205      	movs	r2, #5
    647a:	fba7 0102 	umull	r0, r1, r7, r2
    647e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    6482:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6484:	fb02 330c 	mla	r3, r2, ip, r3
    6488:	9309      	str	r3, [sp, #36]	; 0x24
    648a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    648e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		decexp--;
    6492:	9b00      	ldr	r3, [sp, #0]
    6494:	3b01      	subs	r3, #1
    6496:	9300      	str	r3, [sp, #0]
    6498:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    649c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    649e:	2300      	movs	r3, #0
    64a0:	2100      	movs	r1, #0
    64a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    64a6:	4299      	cmp	r1, r3
    64a8:	bf08      	it	eq
    64aa:	4290      	cmpeq	r0, r2
    64ac:	d207      	bcs.n	64be <_prf+0x48a>
    64ae:	f1bc 0f00 	cmp.w	ip, #0
    64b2:	d08f      	beq.n	63d4 <_prf+0x3a0>
    64b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    64b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    64bc:	e78a      	b.n	63d4 <_prf+0x3a0>
			fract <<= 1;
    64be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    64c2:	1892      	adds	r2, r2, r2
    64c4:	415b      	adcs	r3, r3
    64c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    64ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    64ce:	f04f 0c01 	mov.w	ip, #1
    64d2:	e7e3      	b.n	649c <_prf+0x468>
		_ldiv5(&fract);
    64d4:	a810      	add	r0, sp, #64	; 0x40
    64d6:	f7ff fd61 	bl	5f9c <_ldiv5>
		decexp++;
    64da:	9b00      	ldr	r3, [sp, #0]
    64dc:	3301      	adds	r3, #1
    64de:	9300      	str	r3, [sp, #0]
    64e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    64e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
		exp--;
    64e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    64ec:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    64f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    64f2:	2300      	movs	r3, #0
    64f4:	2100      	movs	r1, #0
    64f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    64fa:	4299      	cmp	r1, r3
    64fc:	bf08      	it	eq
    64fe:	4290      	cmpeq	r0, r2
    6500:	d208      	bcs.n	6514 <_prf+0x4e0>
    6502:	f1bc 0f00 	cmp.w	ip, #0
    6506:	f43f af68 	beq.w	63da <_prf+0x3a6>
    650a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    650e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    6512:	e762      	b.n	63da <_prf+0x3a6>
			fract <<= 1;
    6514:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    6518:	1892      	adds	r2, r2, r2
    651a:	415b      	adcs	r3, r3
    651c:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    6520:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    6524:	f04f 0c01 	mov.w	ip, #1
    6528:	e7e2      	b.n	64f0 <_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    652a:	2300      	movs	r3, #0
    652c:	e76e      	b.n	640c <_prf+0x3d8>
    652e:	2300      	movs	r3, #0
	if (c == 'f') {
    6530:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    6532:	9308      	str	r3, [sp, #32]
	if (c == 'f') {
    6534:	f47f af77 	bne.w	6426 <_prf+0x3f2>
		if (exp < 0)
    6538:	9b00      	ldr	r3, [sp, #0]
    653a:	eb13 0805 	adds.w	r8, r3, r5
    653e:	d54b      	bpl.n	65d8 <_prf+0x5a4>
	digit_count = 16;
    6540:	2310      	movs	r3, #16
    6542:	930f      	str	r3, [sp, #60]	; 0x3c
    6544:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    6546:	f04f 0800 	mov.w	r8, #0
	ltemp = 0x0800000000000000;
    654a:	a948      	add	r1, sp, #288	; 0x120
    654c:	2200      	movs	r2, #0
    654e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    6552:	e961 2336 	strd	r2, r3, [r1, #-216]!	; 0xd8
	while (exp--) {
    6556:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    655a:	d23f      	bcs.n	65dc <_prf+0x5a8>
	fract += ltemp;
    655c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    6560:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    6564:	1817      	adds	r7, r2, r0
    6566:	eb43 0801 	adc.w	r8, r3, r1
    656a:	463a      	mov	r2, r7
    656c:	4643      	mov	r3, r8
    656e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
    6572:	f008 4270 	and.w	r2, r8, #4026531840	; 0xf0000000
    6576:	2300      	movs	r3, #0
    6578:	4313      	orrs	r3, r2
    657a:	d008      	beq.n	658e <_prf+0x55a>
		_ldiv5(&fract);
    657c:	a810      	add	r0, sp, #64	; 0x40
    657e:	f7ff fd0d 	bl	5f9c <_ldiv5>
		_rlrshift(&fract);
    6582:	a810      	add	r0, sp, #64	; 0x40
    6584:	f7ff fcf6 	bl	5f74 <_rlrshift>
		decexp++;
    6588:	9b00      	ldr	r3, [sp, #0]
    658a:	3301      	adds	r3, #1
    658c:	9300      	str	r3, [sp, #0]
	if (c == 'f') {
    658e:	2c66      	cmp	r4, #102	; 0x66
    6590:	f10a 0801 	add.w	r8, sl, #1
    6594:	d140      	bne.n	6618 <_prf+0x5e4>
		if (decexp > 0) {
    6596:	9b00      	ldr	r3, [sp, #0]
    6598:	2b00      	cmp	r3, #0
    659a:	dd29      	ble.n	65f0 <_prf+0x5bc>
    659c:	4453      	add	r3, sl
    659e:	4698      	mov	r8, r3
				*buf++ = _get_digit(&fract, &digit_count);
    65a0:	a90f      	add	r1, sp, #60	; 0x3c
    65a2:	a810      	add	r0, sp, #64	; 0x40
    65a4:	f7ff fd2b 	bl	5ffe <_get_digit>
    65a8:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
    65ac:	45c2      	cmp	sl, r8
    65ae:	d1f7      	bne.n	65a0 <_prf+0x56c>
    65b0:	2300      	movs	r3, #0
    65b2:	9300      	str	r3, [sp, #0]
		if (falt || (precision > 0))
    65b4:	b906      	cbnz	r6, 65b8 <_prf+0x584>
    65b6:	b15d      	cbz	r5, 65d0 <_prf+0x59c>
			*buf++ = '.';
    65b8:	232e      	movs	r3, #46	; 0x2e
    65ba:	f888 3000 	strb.w	r3, [r8]
    65be:	4646      	mov	r6, r8
    65c0:	eb08 0305 	add.w	r3, r8, r5
				*buf++ = '0';
    65c4:	f04f 0a30 	mov.w	sl, #48	; 0x30
		while (precision-- > 0) {
    65c8:	42b3      	cmp	r3, r6
    65ca:	d115      	bne.n	65f8 <_prf+0x5c4>
    65cc:	3501      	adds	r5, #1
    65ce:	44a8      	add	r8, r5
	if (prune_zero) {
    65d0:	9b08      	ldr	r3, [sp, #32]
    65d2:	2b00      	cmp	r3, #0
    65d4:	d139      	bne.n	664a <_prf+0x616>
    65d6:	e060      	b.n	669a <_prf+0x666>
		if (exp < 0)
    65d8:	2466      	movs	r4, #102	; 0x66
    65da:	e726      	b.n	642a <_prf+0x3f6>
		_ldiv5(&ltemp);
    65dc:	4608      	mov	r0, r1
    65de:	910a      	str	r1, [sp, #40]	; 0x28
    65e0:	f7ff fcdc 	bl	5f9c <_ldiv5>
		_rlrshift(&ltemp);
    65e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    65e6:	4608      	mov	r0, r1
    65e8:	f7ff fcc4 	bl	5f74 <_rlrshift>
    65ec:	990a      	ldr	r1, [sp, #40]	; 0x28
    65ee:	e7b2      	b.n	6556 <_prf+0x522>
			*buf++ = '0';
    65f0:	2330      	movs	r3, #48	; 0x30
    65f2:	f88a 3000 	strb.w	r3, [sl]
    65f6:	e7dd      	b.n	65b4 <_prf+0x580>
			if (decexp < 0) {
    65f8:	9a00      	ldr	r2, [sp, #0]
    65fa:	b12a      	cbz	r2, 6608 <_prf+0x5d4>
				decexp++;
    65fc:	3201      	adds	r2, #1
				*buf++ = '0';
    65fe:	f886 a001 	strb.w	sl, [r6, #1]
				decexp++;
    6602:	9200      	str	r2, [sp, #0]
    6604:	3601      	adds	r6, #1
    6606:	e7df      	b.n	65c8 <_prf+0x594>
				*buf++ = _get_digit(&fract, &digit_count);
    6608:	a90f      	add	r1, sp, #60	; 0x3c
    660a:	a810      	add	r0, sp, #64	; 0x40
    660c:	930a      	str	r3, [sp, #40]	; 0x28
    660e:	f7ff fcf6 	bl	5ffe <_get_digit>
    6612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6614:	7070      	strb	r0, [r6, #1]
    6616:	e7f5      	b.n	6604 <_prf+0x5d0>
		*buf = _get_digit(&fract, &digit_count);
    6618:	a90f      	add	r1, sp, #60	; 0x3c
    661a:	a810      	add	r0, sp, #64	; 0x40
    661c:	f7ff fcef 	bl	5ffe <_get_digit>
		if (*buf++ != '0')
    6620:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    6622:	bf18      	it	ne
    6624:	9b00      	ldrne	r3, [sp, #0]
		*buf = _get_digit(&fract, &digit_count);
    6626:	f88a 0000 	strb.w	r0, [sl]
			decexp--;
    662a:	bf1c      	itt	ne
    662c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    6630:	9300      	strne	r3, [sp, #0]
		if (falt || (precision > 0))
    6632:	b906      	cbnz	r6, 6636 <_prf+0x602>
    6634:	b13d      	cbz	r5, 6646 <_prf+0x612>
			*buf++ = '.';
    6636:	f10a 0802 	add.w	r8, sl, #2
    663a:	232e      	movs	r3, #46	; 0x2e
    663c:	f88a 3001 	strb.w	r3, [sl, #1]
    6640:	4445      	add	r5, r8
		while (precision-- > 0)
    6642:	4545      	cmp	r5, r8
    6644:	d12e      	bne.n	66a4 <_prf+0x670>
	if (prune_zero) {
    6646:	9b08      	ldr	r3, [sp, #32]
    6648:	b143      	cbz	r3, 665c <_prf+0x628>
		while (*--buf == '0')
    664a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    664e:	2a30      	cmp	r2, #48	; 0x30
    6650:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    6654:	d02d      	beq.n	66b2 <_prf+0x67e>
    6656:	2a2e      	cmp	r2, #46	; 0x2e
    6658:	bf08      	it	eq
    665a:	4698      	moveq	r8, r3
	if ((c == 'e') || (c == 'E')) {
    665c:	f024 0320 	bic.w	r3, r4, #32
    6660:	2b45      	cmp	r3, #69	; 0x45
    6662:	d11a      	bne.n	669a <_prf+0x666>
		if (decexp < 0) {
    6664:	9b00      	ldr	r3, [sp, #0]
		*buf++ = (char) c;
    6666:	f888 4000 	strb.w	r4, [r8]
		if (decexp < 0) {
    666a:	2b00      	cmp	r3, #0
			decexp = -decexp;
    666c:	bfbb      	ittet	lt
    666e:	425b      	neglt	r3, r3
    6670:	9300      	strlt	r3, [sp, #0]
			*buf++ = '+';
    6672:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
    6674:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    6676:	f888 3001 	strb.w	r3, [r8, #1]
		*buf++ = (char) ((decexp / 10) + '0');
    667a:	220a      	movs	r2, #10
    667c:	9b00      	ldr	r3, [sp, #0]
    667e:	fb93 f3f2 	sdiv	r3, r3, r2
    6682:	f103 0130 	add.w	r1, r3, #48	; 0x30
    6686:	f888 1002 	strb.w	r1, [r8, #2]
		decexp %= 10;
    668a:	9900      	ldr	r1, [sp, #0]
    668c:	fb02 1713 	mls	r7, r2, r3, r1
		*buf++ = (char) (decexp + '0');
    6690:	3730      	adds	r7, #48	; 0x30
    6692:	f888 7003 	strb.w	r7, [r8, #3]
    6696:	f108 0804 	add.w	r8, r8, #4
	*buf = 0;
    669a:	2300      	movs	r3, #0
    669c:	f888 3000 	strb.w	r3, [r8]
	return buf - start;
    66a0:	a815      	add	r0, sp, #84	; 0x54
    66a2:	e64e      	b.n	6342 <_prf+0x30e>
			*buf++ = _get_digit(&fract, &digit_count);
    66a4:	a90f      	add	r1, sp, #60	; 0x3c
    66a6:	a810      	add	r0, sp, #64	; 0x40
    66a8:	f7ff fca9 	bl	5ffe <_get_digit>
    66ac:	f808 0b01 	strb.w	r0, [r8], #1
    66b0:	e7c7      	b.n	6642 <_prf+0x60e>
		while (*--buf == '0')
    66b2:	4698      	mov	r8, r3
    66b4:	e7c9      	b.n	664a <_prf+0x616>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    66b6:	1d3b      	adds	r3, r7, #4
    66b8:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
    66ba:	683b      	ldr	r3, [r7, #0]
    66bc:	9a04      	ldr	r2, [sp, #16]
    66be:	601a      	str	r2, [r3, #0]
				break;
    66c0:	e4d9      	b.n	6076 <_prf+0x42>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    66c2:	1d3b      	adds	r3, r7, #4
    66c4:	9305      	str	r3, [sp, #20]
    66c6:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    66c8:	b316      	cbz	r6, 6710 <_prf+0x6dc>
		*buf++ = '0';
    66ca:	2330      	movs	r3, #48	; 0x30
    66cc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
    66d0:	bb59      	cbnz	r1, 672a <_prf+0x6f6>
			prefix = 0;
    66d2:	3501      	adds	r5, #1
    66d4:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    66d6:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
    66da:	bf18      	it	ne
    66dc:	2320      	movne	r3, #32
    66de:	4689      	mov	r9, r1
    66e0:	9302      	str	r3, [sp, #8]
				if (c < width) {
    66e2:	9b03      	ldr	r3, [sp, #12]
    66e4:	42b3      	cmp	r3, r6
    66e6:	f340 8085 	ble.w	67f4 <_prf+0x7c0>
					if (fminus)	{
    66ea:	9b06      	ldr	r3, [sp, #24]
    66ec:	ad15      	add	r5, sp, #84	; 0x54
    66ee:	2b00      	cmp	r3, #0
    66f0:	d058      	beq.n	67a4 <_prf+0x770>
							buf[i] = ' ';
    66f2:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    66f4:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    66f6:	55ab      	strb	r3, [r5, r6]
						for (i = c; i < width; i++)
    66f8:	3601      	adds	r6, #1
    66fa:	42b2      	cmp	r2, r6
    66fc:	d1fa      	bne.n	66f4 <_prf+0x6c0>
    66fe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
					if ((*func)(*cptr, dest) == EOF)
    6702:	ac15      	add	r4, sp, #84	; 0x54
    6704:	4413      	add	r3, r2
    6706:	461d      	mov	r5, r3
    6708:	1aa4      	subs	r4, r4, r2
    670a:	e06f      	b.n	67ec <_prf+0x7b8>
    670c:	33333332 	.word	0x33333332
	if (alt_form) {
    6710:	a815      	add	r0, sp, #84	; 0x54
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    6712:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    6716:	462b      	mov	r3, r5
    6718:	2208      	movs	r2, #8
    671a:	eba0 0808 	sub.w	r8, r0, r8
    671e:	f7ff fc01 	bl	5f24 <_to_x>
    6722:	4440      	add	r0, r8
			prefix = 0;
    6724:	f04f 0900 	mov.w	r9, #0
    6728:	e595      	b.n	6256 <_prf+0x222>
		*buf++ = '0';
    672a:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    672e:	e7f0      	b.n	6712 <_prf+0x6de>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    6730:	1d3b      	adds	r3, r7, #4
    6732:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
    6734:	f647 0330 	movw	r3, #30768	; 0x7830
    6738:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    673c:	6839      	ldr	r1, [r7, #0]
	len = _to_x(buf, value, 16, precision);
    673e:	2308      	movs	r3, #8
    6740:	2210      	movs	r2, #16
    6742:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    6746:	f7ff fbed 	bl	5f24 <_to_x>
	return len + (buf - buf0);
    674a:	3002      	adds	r0, #2
    674c:	e7ea      	b.n	6724 <_prf+0x6f0>
				if ((precision >= 0) && (precision < c))
    674e:	2d00      	cmp	r5, #0
    6750:	db02      	blt.n	6758 <_prf+0x724>
    6752:	42ae      	cmp	r6, r5
    6754:	bfa8      	it	ge
    6756:	462e      	movge	r6, r5
				if (c > 0) {
    6758:	2e00      	cmp	r6, #0
    675a:	f43f ac8c 	beq.w	6076 <_prf+0x42>
					memcpy(buf, cptr_temp, (size_t) c);
    675e:	4632      	mov	r2, r6
    6760:	a815      	add	r0, sp, #84	; 0x54
    6762:	f7ff fb91 	bl	5e88 <memcpy>
    6766:	e59c      	b.n	62a2 <_prf+0x26e>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    6768:	1d3b      	adds	r3, r7, #4
    676a:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
    676c:	220a      	movs	r2, #10
    676e:	462b      	mov	r3, r5
    6770:	6839      	ldr	r1, [r7, #0]
    6772:	a815      	add	r0, sp, #84	; 0x54
    6774:	f7ff fbd6 	bl	5f24 <_to_x>
    6778:	e7d4      	b.n	6724 <_prf+0x6f0>
	if (alt_form) {
    677a:	af15      	add	r7, sp, #84	; 0x54
    677c:	e527      	b.n	61ce <_prf+0x19a>
		if (*buf >= 'a' && *buf <= 'z') {
    677e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    6782:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    6784:	bf9c      	itt	ls
    6786:	3b20      	subls	r3, #32
    6788:	7013      	strbls	r3, [r2, #0]
    678a:	e529      	b.n	61e0 <_prf+0x1ac>
				if ((*func)('%', dest) == EOF) {
    678c:	990d      	ldr	r1, [sp, #52]	; 0x34
    678e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6790:	4620      	mov	r0, r4
    6792:	4798      	blx	r3
    6794:	3001      	adds	r0, #1
    6796:	f43f ac62 	beq.w	605e <_prf+0x2a>
				count++;
    679a:	9b04      	ldr	r3, [sp, #16]
    679c:	3301      	adds	r3, #1
    679e:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1)
    67a0:	9705      	str	r7, [sp, #20]
    67a2:	e468      	b.n	6076 <_prf+0x42>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    67a4:	9b03      	ldr	r3, [sp, #12]
    67a6:	1b9c      	subs	r4, r3, r6
    67a8:	1c72      	adds	r2, r6, #1
    67aa:	1928      	adds	r0, r5, r4
    67ac:	4629      	mov	r1, r5
    67ae:	f7ff fb54 	bl	5e5a <memmove>
						if (pad == ' ')
    67b2:	9b06      	ldr	r3, [sp, #24]
    67b4:	9a02      	ldr	r2, [sp, #8]
    67b6:	2a20      	cmp	r2, #32
    67b8:	bf18      	it	ne
    67ba:	464b      	movne	r3, r9
    67bc:	9306      	str	r3, [sp, #24]
						c = width - c + prefix;
    67be:	441c      	add	r4, r3
						for (i = prefix; i < c; i++)
    67c0:	9b06      	ldr	r3, [sp, #24]
    67c2:	42a3      	cmp	r3, r4
    67c4:	da9b      	bge.n	66fe <_prf+0x6ca>
							buf[i] = pad;
    67c6:	9b06      	ldr	r3, [sp, #24]
    67c8:	461a      	mov	r2, r3
    67ca:	9b02      	ldr	r3, [sp, #8]
    67cc:	54ab      	strb	r3, [r5, r2]
						for (i = prefix; i < c; i++)
    67ce:	4613      	mov	r3, r2
    67d0:	3301      	adds	r3, #1
    67d2:	9306      	str	r3, [sp, #24]
    67d4:	e7f4      	b.n	67c0 <_prf+0x78c>
					if ((*func)(*cptr, dest) == EOF)
    67d6:	9b04      	ldr	r3, [sp, #16]
    67d8:	990d      	ldr	r1, [sp, #52]	; 0x34
    67da:	5ce0      	ldrb	r0, [r4, r3]
    67dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67de:	4798      	blx	r3
    67e0:	3001      	adds	r0, #1
    67e2:	f43f ac3c 	beq.w	605e <_prf+0x2a>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    67e6:	9b04      	ldr	r3, [sp, #16]
    67e8:	3301      	adds	r3, #1
    67ea:	9304      	str	r3, [sp, #16]
    67ec:	9b04      	ldr	r3, [sp, #16]
    67ee:	42ab      	cmp	r3, r5
    67f0:	d1f1      	bne.n	67d6 <_prf+0x7a2>
    67f2:	e440      	b.n	6076 <_prf+0x42>
    67f4:	9603      	str	r6, [sp, #12]
    67f6:	e782      	b.n	66fe <_prf+0x6ca>
					prefix = 1;
    67f8:	f8dd 901c 	ldr.w	r9, [sp, #28]
    67fc:	e5b2      	b.n	6364 <_prf+0x330>
    67fe:	bf00      	nop

00006800 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    6800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6804:	4770      	bx	lr
	...

00006808 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6808:	4b01      	ldr	r3, [pc, #4]	; (6810 <__stdout_hook_install+0x8>)
    680a:	6018      	str	r0, [r3, #0]
}
    680c:	4770      	bx	lr
    680e:	bf00      	nop
    6810:	2000cc78 	.word	0x2000cc78

00006814 <_impl__zephyr_fputc>:

int _impl__zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    6814:	2902      	cmp	r1, #2
    6816:	d102      	bne.n	681e <_impl__zephyr_fputc+0xa>
    6818:	4b02      	ldr	r3, [pc, #8]	; (6824 <_impl__zephyr_fputc+0x10>)
    681a:	681b      	ldr	r3, [r3, #0]
    681c:	4718      	bx	r3
}
    681e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6822:	4770      	bx	lr
    6824:	2000cc78 	.word	0x2000cc78

00006828 <fputc>:

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_READ, _zephyr_read, int, char *, buf, int, nbytes)

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_WRITE, _zephyr_write, int, const void *, buf, int, nbytes)

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_FPUTC, _zephyr_fputc, int, int, c, FILE *, stream)
    6828:	f7ff bff4 	b.w	6814 <_impl__zephyr_fputc>

0000682c <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    682c:	b40f      	push	{r0, r1, r2, r3}
    682e:	b507      	push	{r0, r1, r2, lr}
    6830:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
    6832:	2102      	movs	r1, #2
{
    6834:	f853 2b04 	ldr.w	r2, [r3], #4
	r = _prf(fputc, DESC(stdout), format, vargs);
    6838:	4804      	ldr	r0, [pc, #16]	; (684c <printf+0x20>)
	va_start(vargs, format);
    683a:	9301      	str	r3, [sp, #4]
	r = _prf(fputc, DESC(stdout), format, vargs);
    683c:	f7ff fbfa 	bl	6034 <_prf>
	va_end(vargs);

	return r;
}
    6840:	b003      	add	sp, #12
    6842:	f85d eb04 	ldr.w	lr, [sp], #4
    6846:	b004      	add	sp, #16
    6848:	4770      	bx	lr
    684a:	bf00      	nop
    684c:	00006829 	.word	0x00006829

00006850 <bt_hex_real>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex_real(const void *buf, size_t len)
{
    6850:	b570      	push	{r4, r5, r6, lr}
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = min(len, (sizeof(hex) - 1) / 2);
    6852:	2908      	cmp	r1, #8
    6854:	4a0e      	ldr	r2, [pc, #56]	; (6890 <bt_hex_real+0x40>)

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    6856:	4d0f      	ldr	r5, [pc, #60]	; (6894 <bt_hex_real+0x44>)
    6858:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	len = min(len, (sizeof(hex) - 1) / 2);
    685c:	bf28      	it	cs
    685e:	2108      	movcs	r1, #8
	for (i = 0; i < len; i++) {
    6860:	2300      	movs	r3, #0
    6862:	428b      	cmp	r3, r1
    6864:	d104      	bne.n	6870 <bt_hex_real+0x20>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    6866:	2100      	movs	r1, #0
    6868:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]

	return str;
}
    686c:	4808      	ldr	r0, [pc, #32]	; (6890 <bt_hex_real+0x40>)
    686e:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    6870:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    6874:	0924      	lsrs	r4, r4, #4
		str[i * 2 + 1] = hex[b[i] & 0xf];
    6876:	eb02 0643 	add.w	r6, r2, r3, lsl #1
		str[i * 2]     = hex[b[i] >> 4];
    687a:	5d2c      	ldrb	r4, [r5, r4]
    687c:	f802 4013 	strb.w	r4, [r2, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    6880:	7804      	ldrb	r4, [r0, #0]
    6882:	f004 040f 	and.w	r4, r4, #15
	for (i = 0; i < len; i++) {
    6886:	3301      	adds	r3, #1
		str[i * 2 + 1] = hex[b[i] & 0xf];
    6888:	5d2c      	ldrb	r4, [r5, r4]
    688a:	7074      	strb	r4, [r6, #1]
    688c:	e7e9      	b.n	6862 <bt_hex_real+0x12>
    688e:	bf00      	nop
    6890:	200008f0 	.word	0x200008f0
    6894:	0002e830 	.word	0x0002e830

00006898 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    6898:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    689a:	7803      	ldrb	r3, [r0, #0]
    689c:	b08b      	sub	sp, #44	; 0x2c
    689e:	4604      	mov	r4, r0
    68a0:	ad07      	add	r5, sp, #28
    68a2:	2b03      	cmp	r3, #3
    68a4:	d821      	bhi.n	68ea <bt_addr_le_str_real+0x52>
    68a6:	e8df f003 	tbb	[pc, r3]
    68aa:	1a02      	.short	0x1a02
    68ac:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    68ae:	4912      	ldr	r1, [pc, #72]	; (68f8 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    68b0:	4628      	mov	r0, r5
    68b2:	f7ff fa5b 	bl	5d6c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    68b6:	7862      	ldrb	r2, [r4, #1]
    68b8:	9204      	str	r2, [sp, #16]
    68ba:	78a2      	ldrb	r2, [r4, #2]
    68bc:	9203      	str	r2, [sp, #12]
    68be:	78e2      	ldrb	r2, [r4, #3]
    68c0:	9202      	str	r2, [sp, #8]
    68c2:	7922      	ldrb	r2, [r4, #4]
    68c4:	9201      	str	r2, [sp, #4]
    68c6:	7962      	ldrb	r2, [r4, #5]
    68c8:	9200      	str	r2, [sp, #0]
    68ca:	79a3      	ldrb	r3, [r4, #6]
    68cc:	9505      	str	r5, [sp, #20]
    68ce:	4a0b      	ldr	r2, [pc, #44]	; (68fc <bt_addr_le_str_real+0x64>)
    68d0:	480b      	ldr	r0, [pc, #44]	; (6900 <bt_addr_le_str_real+0x68>)
    68d2:	211b      	movs	r1, #27
    68d4:	f7fa fc1a 	bl	110c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    68d8:	4809      	ldr	r0, [pc, #36]	; (6900 <bt_addr_le_str_real+0x68>)
    68da:	b00b      	add	sp, #44	; 0x2c
    68dc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    68de:	4909      	ldr	r1, [pc, #36]	; (6904 <bt_addr_le_str_real+0x6c>)
    68e0:	e7e6      	b.n	68b0 <bt_addr_le_str_real+0x18>
		strcpy(type, "public id");
    68e2:	4909      	ldr	r1, [pc, #36]	; (6908 <bt_addr_le_str_real+0x70>)
    68e4:	e7e4      	b.n	68b0 <bt_addr_le_str_real+0x18>
		strcpy(type, "random id");
    68e6:	4909      	ldr	r1, [pc, #36]	; (690c <bt_addr_le_str_real+0x74>)
    68e8:	e7e2      	b.n	68b0 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    68ea:	4a09      	ldr	r2, [pc, #36]	; (6910 <bt_addr_le_str_real+0x78>)
    68ec:	210a      	movs	r1, #10
    68ee:	4628      	mov	r0, r5
    68f0:	f7fa fc0c 	bl	110c <snprintk>
    68f4:	e7df      	b.n	68b6 <bt_addr_le_str_real+0x1e>
    68f6:	bf00      	nop
    68f8:	0002e7eb 	.word	0x0002e7eb
    68fc:	0002e80d 	.word	0x0002e80d
    6900:	20000971 	.word	0x20000971
    6904:	0002e7f2 	.word	0x0002e7f2
    6908:	0002e7f9 	.word	0x0002e7f9
    690c:	0002e803 	.word	0x0002e803
    6910:	000317f3 	.word	0x000317f3

00006914 <ah>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#define LOG_MODULE_NAME bt_rpa
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    6914:	b530      	push	{r4, r5, lr}
    6916:	b085      	sub	sp, #20
    6918:	4604      	mov	r4, r0
    691a:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    691c:	4668      	mov	r0, sp
    691e:	2203      	movs	r2, #3
    6920:	f7ff fab2 	bl	5e88 <memcpy>
	(void)memset(res + 3, 0, 13);
    6924:	220d      	movs	r2, #13
    6926:	2100      	movs	r1, #0
    6928:	f10d 0003 	add.w	r0, sp, #3
    692c:	f7ff fad9 	bl	5ee2 <memset>

	err = bt_encrypt_le(irk, res, res);
    6930:	4620      	mov	r0, r4
    6932:	466a      	mov	r2, sp
    6934:	4669      	mov	r1, sp
    6936:	f015 fb5f 	bl	1bff8 <bt_encrypt_le>
	if (err) {
    693a:	4604      	mov	r4, r0
    693c:	b920      	cbnz	r0, 6948 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    693e:	2203      	movs	r2, #3
    6940:	4669      	mov	r1, sp
    6942:	4628      	mov	r0, r5
    6944:	f7ff faa0 	bl	5e88 <memcpy>

	return 0;
}
    6948:	4620      	mov	r0, r4
    694a:	b005      	add	sp, #20
    694c:	bd30      	pop	{r4, r5, pc}

0000694e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    694e:	b513      	push	{r0, r1, r4, lr}
    6950:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    6952:	aa01      	add	r2, sp, #4
    6954:	3103      	adds	r1, #3
    6956:	f7ff ffdd 	bl	6914 <ah>
	if (err) {
    695a:	b948      	cbnz	r0, 6970 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    695c:	2203      	movs	r2, #3
    695e:	a901      	add	r1, sp, #4
    6960:	4620      	mov	r0, r4
    6962:	f7ff fa6a 	bl	5e3a <memcmp>
    6966:	fab0 f080 	clz	r0, r0
    696a:	0940      	lsrs	r0, r0, #5
}
    696c:	b002      	add	sp, #8
    696e:	bd10      	pop	{r4, pc}
		return false;
    6970:	2000      	movs	r0, #0
    6972:	e7fb      	b.n	696c <bt_rpa_irk_matches+0x1e>

00006974 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    6974:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    6976:	1ccd      	adds	r5, r1, #3
{
    6978:	4606      	mov	r6, r0
    697a:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    697c:	4628      	mov	r0, r5
    697e:	2103      	movs	r1, #3
    6980:	f015 fb20 	bl	1bfc4 <bt_rand>
	if (err) {
    6984:	b960      	cbnz	r0, 69a0 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    6986:	7963      	ldrb	r3, [r4, #5]
    6988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    698c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6990:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    6992:	4622      	mov	r2, r4
    6994:	4629      	mov	r1, r5
    6996:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    6998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    699c:	f7ff bfba 	b.w	6914 <ah>
}
    69a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000069a4 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    69a4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    69a6:	7802      	ldrb	r2, [r0, #0]
    69a8:	2a01      	cmp	r2, #1
{
    69aa:	4604      	mov	r4, r0
    69ac:	460b      	mov	r3, r1
	switch (src->type) {
    69ae:	d017      	beq.n	69e0 <uuid_to_uuid128+0x3c>
    69b0:	d303      	bcc.n	69ba <uuid_to_uuid128+0x16>
    69b2:	2a02      	cmp	r2, #2
    69b4:	d02c      	beq.n	6a10 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    69b6:	bcf0      	pop	{r4, r5, r6, r7}
    69b8:	4770      	bx	lr
		*dst = uuid128_base;
    69ba:	4a18      	ldr	r2, [pc, #96]	; (6a1c <uuid_to_uuid128+0x78>)
    69bc:	460d      	mov	r5, r1
    69be:	f102 0710 	add.w	r7, r2, #16
    69c2:	6810      	ldr	r0, [r2, #0]
    69c4:	6851      	ldr	r1, [r2, #4]
    69c6:	462e      	mov	r6, r5
    69c8:	c603      	stmia	r6!, {r0, r1}
    69ca:	3208      	adds	r2, #8
    69cc:	42ba      	cmp	r2, r7
    69ce:	4635      	mov	r5, r6
    69d0:	d1f7      	bne.n	69c2 <uuid_to_uuid128+0x1e>
    69d2:	7812      	ldrb	r2, [r2, #0]
    69d4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    69d6:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    69d8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    69da:	0a12      	lsrs	r2, r2, #8
    69dc:	739a      	strb	r2, [r3, #14]
    69de:	e7ea      	b.n	69b6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    69e0:	4a0e      	ldr	r2, [pc, #56]	; (6a1c <uuid_to_uuid128+0x78>)
    69e2:	460d      	mov	r5, r1
    69e4:	f102 0710 	add.w	r7, r2, #16
    69e8:	6810      	ldr	r0, [r2, #0]
    69ea:	6851      	ldr	r1, [r2, #4]
    69ec:	462e      	mov	r6, r5
    69ee:	c603      	stmia	r6!, {r0, r1}
    69f0:	3208      	adds	r2, #8
    69f2:	42ba      	cmp	r2, r7
    69f4:	4635      	mov	r5, r6
    69f6:	d1f7      	bne.n	69e8 <uuid_to_uuid128+0x44>
    69f8:	7812      	ldrb	r2, [r2, #0]
    69fa:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    69fc:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    69fe:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    6a00:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    6a04:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    6a06:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    6a08:	0a12      	lsrs	r2, r2, #8
    6a0a:	7399      	strb	r1, [r3, #14]
    6a0c:	741a      	strb	r2, [r3, #16]
    6a0e:	e7d2      	b.n	69b6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    6a10:	4601      	mov	r1, r0
    6a12:	2211      	movs	r2, #17
    6a14:	4618      	mov	r0, r3
}
    6a16:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    6a18:	f7ff ba36 	b.w	5e88 <memcpy>
    6a1c:	0002e848 	.word	0x0002e848

00006a20 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    6a20:	b510      	push	{r4, lr}
    6a22:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    6a24:	7801      	ldrb	r1, [r0, #0]
    6a26:	7822      	ldrb	r2, [r4, #0]
    6a28:	428a      	cmp	r2, r1
{
    6a2a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    6a2c:	d00e      	beq.n	6a4c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    6a2e:	4669      	mov	r1, sp
    6a30:	f7ff ffb8 	bl	69a4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    6a34:	a905      	add	r1, sp, #20
    6a36:	4620      	mov	r0, r4
    6a38:	f7ff ffb4 	bl	69a4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    6a3c:	2210      	movs	r2, #16
    6a3e:	f10d 0115 	add.w	r1, sp, #21
    6a42:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    6a46:	f7ff f9f8 	bl	5e3a <memcmp>
    6a4a:	e00a      	b.n	6a62 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    6a4c:	2a01      	cmp	r2, #1
    6a4e:	d00a      	beq.n	6a66 <bt_uuid_cmp+0x46>
    6a50:	d304      	bcc.n	6a5c <bt_uuid_cmp+0x3c>
    6a52:	2a02      	cmp	r2, #2
    6a54:	d00a      	beq.n	6a6c <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    6a56:	f06f 0015 	mvn.w	r0, #21
    6a5a:	e002      	b.n	6a62 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    6a5c:	8840      	ldrh	r0, [r0, #2]
    6a5e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    6a60:	1ac0      	subs	r0, r0, r3
}
    6a62:	b00a      	add	sp, #40	; 0x28
    6a64:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    6a66:	6840      	ldr	r0, [r0, #4]
    6a68:	6863      	ldr	r3, [r4, #4]
    6a6a:	e7f9      	b.n	6a60 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    6a6c:	2210      	movs	r2, #16
    6a6e:	1c61      	adds	r1, r4, #1
    6a70:	3001      	adds	r0, #1
    6a72:	e7e8      	b.n	6a46 <bt_uuid_cmp+0x26>

00006a74 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    6a74:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    6a76:	4d0b      	ldr	r5, [pc, #44]	; (6aa4 <ver_str+0x30>)
{
    6a78:	4606      	mov	r6, r0
	const char * const str[] = {
    6a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    6a7c:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    6a7e:	466c      	mov	r4, sp
    6a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a86:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    6a8a:	2e09      	cmp	r6, #9
	const char * const str[] = {
    6a8c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    6a90:	bf9b      	ittet	ls
    6a92:	ab0a      	addls	r3, sp, #40	; 0x28
    6a94:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    6a98:	4803      	ldrhi	r0, [pc, #12]	; (6aa8 <ver_str+0x34>)
		return str[ver];
    6a9a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    6a9e:	b00a      	add	sp, #40	; 0x28
    6aa0:	bd70      	pop	{r4, r5, r6, pc}
    6aa2:	bf00      	nop
    6aa4:	0002d21c 	.word	0x0002d21c
    6aa8:	0002f414 	.word	0x0002f414

00006aac <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6aac:	2207      	movs	r2, #7
    6aae:	f7ff b9eb 	b.w	5e88 <memcpy>

00006ab2 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6ab2:	f3bf 8f5b 	dmb	ish
    6ab6:	e850 3f00 	ldrex	r3, [r0]
    6aba:	ea43 0201 	orr.w	r2, r3, r1
    6abe:	e840 2c00 	strex	ip, r2, [r0]
    6ac2:	f1bc 0f00 	cmp.w	ip, #0
    6ac6:	d1f6      	bne.n	6ab6 <atomic_or+0x4>
    6ac8:	f3bf 8f5b 	dmb	ish
}
    6acc:	4618      	mov	r0, r3
    6ace:	4770      	bx	lr

00006ad0 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ad0:	f3bf 8f5b 	dmb	ish
    6ad4:	e850 3f00 	ldrex	r3, [r0]
    6ad8:	ea03 0201 	and.w	r2, r3, r1
    6adc:	e840 2c00 	strex	ip, r2, [r0]
    6ae0:	f1bc 0f00 	cmp.w	ip, #0
    6ae4:	d1f6      	bne.n	6ad4 <atomic_and+0x4>
    6ae6:	f3bf 8f5b 	dmb	ish
}
    6aea:	4618      	mov	r0, r3
    6aec:	4770      	bx	lr
	...

00006af0 <stack_analyze>:
#endif

#if defined(CONFIG_INIT_STACKS) && defined(CONFIG_PRINTK)
static inline void stack_analyze(const char *name, const char *stack,
				 unsigned int size)
{
    6af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
    6af2:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
    6af4:	429a      	cmp	r2, r3
    6af6:	d002      	beq.n	6afe <stack_analyze+0xe>
		if (checked_stack[i] == 0xaaU) {
    6af8:	5ccc      	ldrb	r4, [r1, r3]
    6afa:	2caa      	cmp	r4, #170	; 0xaa
    6afc:	d00d      	beq.n	6b1a <stack_analyze+0x2a>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    6afe:	1ad4      	subs	r4, r2, r3
    6b00:	2164      	movs	r1, #100	; 0x64
    6b02:	4361      	muls	r1, r4

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    6b04:	9400      	str	r4, [sp, #0]
	pcnt = ((size - unused) * 100) / size;
    6b06:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    6b0a:	e9cd 2101 	strd	r2, r1, [sp, #4]
    6b0e:	4601      	mov	r1, r0
    6b10:	4803      	ldr	r0, [pc, #12]	; (6b20 <stack_analyze+0x30>)
    6b12:	f7fa faed 	bl	10f0 <printk>
	       size, unused, size - unused, size, pcnt);
}
    6b16:	b004      	add	sp, #16
    6b18:	bd10      	pop	{r4, pc}
			unused++;
    6b1a:	3301      	adds	r3, #1
    6b1c:	e7ea      	b.n	6af4 <stack_analyze+0x4>
    6b1e:	bf00      	nop
    6b20:	0002f2c9 	.word	0x0002f2c9

00006b24 <hci_stack_dump>:
{
    6b24:	4603      	mov	r3, r0
    6b26:	4608      	mov	r0, r1
	stack_analyze((char *)user_data, (char *)thread->stack_info.start,
    6b28:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
    6b2c:	f7ff bfe0 	b.w	6af0 <stack_analyze>

00006b30 <update_sec_level>:
{
    6b30:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    6b32:	7ac3      	ldrb	r3, [r0, #11]
{
    6b34:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    6b36:	b913      	cbnz	r3, 6b3e <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_LOW;
    6b38:	2301      	movs	r3, #1
    6b3a:	7243      	strb	r3, [r0, #9]
}
    6b3c:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    6b3e:	6f03      	ldr	r3, [r0, #112]	; 0x70
    6b40:	b353      	cbz	r3, 6b98 <update_sec_level+0x68>
    6b42:	7a5a      	ldrb	r2, [r3, #9]
    6b44:	07d1      	lsls	r1, r2, #31
    6b46:	d527      	bpl.n	6b98 <update_sec_level+0x68>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    6b48:	06d2      	lsls	r2, r2, #27
    6b4a:	d523      	bpl.n	6b94 <update_sec_level+0x64>
    6b4c:	7a1b      	ldrb	r3, [r3, #8]
    6b4e:	2b10      	cmp	r3, #16
    6b50:	d120      	bne.n	6b94 <update_sec_level+0x64>
			conn->sec_level = BT_SECURITY_FIPS;
    6b52:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_MEDIUM;
    6b54:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    6b56:	7aa2      	ldrb	r2, [r4, #10]
    6b58:	7a63      	ldrb	r3, [r4, #9]
    6b5a:	429a      	cmp	r2, r3
    6b5c:	d9ee      	bls.n	6b3c <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    6b5e:	4b0f      	ldr	r3, [pc, #60]	; (6b9c <update_sec_level+0x6c>)
    6b60:	681b      	ldr	r3, [r3, #0]
    6b62:	075b      	lsls	r3, r3, #29
    6b64:	d010      	beq.n	6b88 <update_sec_level+0x58>
    6b66:	2301      	movs	r3, #1
    6b68:	f04f 0200 	mov.w	r2, #0
    6b6c:	f363 0202 	bfi	r2, r3, #0, #3
    6b70:	490b      	ldr	r1, [pc, #44]	; (6ba0 <update_sec_level+0x70>)
    6b72:	4b0c      	ldr	r3, [pc, #48]	; (6ba4 <update_sec_level+0x74>)
    6b74:	480c      	ldr	r0, [pc, #48]	; (6ba8 <update_sec_level+0x78>)
    6b76:	1a5b      	subs	r3, r3, r1
    6b78:	f36f 02c5 	bfc	r2, #3, #3
    6b7c:	08db      	lsrs	r3, r3, #3
    6b7e:	f363 128f 	bfi	r2, r3, #6, #10
    6b82:	490a      	ldr	r1, [pc, #40]	; (6bac <update_sec_level+0x7c>)
    6b84:	f7fb f8e8 	bl	1d58 <log_1>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    6b88:	4620      	mov	r0, r4
    6b8a:	2105      	movs	r1, #5
}
    6b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    6b90:	f003 bcd2 	b.w	a538 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_HIGH;
    6b94:	2303      	movs	r3, #3
    6b96:	e7dd      	b.n	6b54 <update_sec_level+0x24>
		conn->sec_level = BT_SECURITY_MEDIUM;
    6b98:	2302      	movs	r3, #2
    6b9a:	e7db      	b.n	6b54 <update_sec_level+0x24>
    6b9c:	2000d74c 	.word	0x2000d74c
    6ba0:	0002cff8 	.word	0x0002cff8
    6ba4:	0002d070 	.word	0x0002d070
    6ba8:	0002f3d9 	.word	0x0002f3d9
    6bac:	0002e949 	.word	0x0002e949

00006bb0 <find_pending_connect>:
{
    6bb0:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
    6bb2:	2103      	movs	r1, #3
{
    6bb4:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
    6bb6:	f003 fc0d 	bl	a3d4 <bt_conn_lookup_state_le>
	if (conn) {
    6bba:	b928      	cbnz	r0, 6bc8 <find_pending_connect+0x18>
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
    6bbc:	4620      	mov	r0, r4
    6bbe:	2102      	movs	r1, #2
}
    6bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
    6bc4:	f003 bc06 	b.w	a3d4 <bt_conn_lookup_state_le>
}
    6bc8:	bd10      	pop	{r4, pc}
	...

00006bcc <hci_cmd_done>:
{
    6bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bd0:	4606      	mov	r6, r0
    6bd2:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6bd4:	7990      	ldrb	r0, [r2, #6]
    6bd6:	4f35      	ldr	r7, [pc, #212]	; (6cac <hci_cmd_done+0xe0>)
{
    6bd8:	4688      	mov	r8, r1
    6bda:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6bdc:	f017 fb74 	bl	1e2c8 <net_buf_pool_get>
    6be0:	4287      	cmp	r7, r0
    6be2:	d024      	beq.n	6c2e <hci_cmd_done+0x62>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    6be4:	4b32      	ldr	r3, [pc, #200]	; (6cb0 <hci_cmd_done+0xe4>)
    6be6:	681b      	ldr	r3, [r3, #0]
    6be8:	f003 0307 	and.w	r3, r3, #7
    6bec:	2b01      	cmp	r3, #1
    6bee:	d91b      	bls.n	6c28 <hci_cmd_done+0x5c>
    6bf0:	2302      	movs	r3, #2
    6bf2:	f04f 0400 	mov.w	r4, #0
    6bf6:	f363 0402 	bfi	r4, r3, #0, #3
    6bfa:	4a2e      	ldr	r2, [pc, #184]	; (6cb4 <hci_cmd_done+0xe8>)
    6bfc:	4b2e      	ldr	r3, [pc, #184]	; (6cb8 <hci_cmd_done+0xec>)
    6bfe:	79a8      	ldrb	r0, [r5, #6]
    6c00:	9005      	str	r0, [sp, #20]
    6c02:	1ad2      	subs	r2, r2, r3
    6c04:	4b2d      	ldr	r3, [pc, #180]	; (6cbc <hci_cmd_done+0xf0>)
    6c06:	08d2      	lsrs	r2, r2, #3
    6c08:	f36f 04c5 	bfc	r4, #3, #3
    6c0c:	f362 148f 	bfi	r4, r2, #6, #10
    6c10:	e9cd 3603 	strd	r3, r6, [sp, #12]
    6c14:	f017 fb58 	bl	1e2c8 <net_buf_pool_get>
    6c18:	4623      	mov	r3, r4
    6c1a:	e9cd 0706 	strd	r0, r7, [sp, #24]
    6c1e:	2205      	movs	r2, #5
    6c20:	a903      	add	r1, sp, #12
    6c22:	4827      	ldr	r0, [pc, #156]	; (6cc0 <hci_cmd_done+0xf4>)
    6c24:	f7fb f8df 	bl	1de6 <log_n>
}
    6c28:	b008      	add	sp, #32
    6c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    6c2e:	4628      	mov	r0, r5
    6c30:	f017 fb50 	bl	1e2d4 <net_buf_id>
    6c34:	4c23      	ldr	r4, [pc, #140]	; (6cc4 <hci_cmd_done+0xf8>)
    6c36:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6c3a:	8843      	ldrh	r3, [r0, #2]
    6c3c:	42b3      	cmp	r3, r6
    6c3e:	d01f      	beq.n	6c80 <hci_cmd_done+0xb4>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    6c40:	4b1b      	ldr	r3, [pc, #108]	; (6cb0 <hci_cmd_done+0xe4>)
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	f003 0307 	and.w	r3, r3, #7
    6c48:	2b01      	cmp	r3, #1
    6c4a:	d919      	bls.n	6c80 <hci_cmd_done+0xb4>
    6c4c:	2302      	movs	r3, #2
    6c4e:	f04f 0700 	mov.w	r7, #0
    6c52:	4a19      	ldr	r2, [pc, #100]	; (6cb8 <hci_cmd_done+0xec>)
    6c54:	f363 0702 	bfi	r7, r3, #0, #3
    6c58:	4b16      	ldr	r3, [pc, #88]	; (6cb4 <hci_cmd_done+0xe8>)
    6c5a:	1a9b      	subs	r3, r3, r2
    6c5c:	08db      	lsrs	r3, r3, #3
    6c5e:	f36f 07c5 	bfc	r7, #3, #3
    6c62:	4628      	mov	r0, r5
    6c64:	f363 178f 	bfi	r7, r3, #6, #10
    6c68:	f017 fb34 	bl	1e2d4 <net_buf_id>
    6c6c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6c70:	4632      	mov	r2, r6
    6c72:	8843      	ldrh	r3, [r0, #2]
    6c74:	4911      	ldr	r1, [pc, #68]	; (6cbc <hci_cmd_done+0xf0>)
    6c76:	f8ad 7000 	strh.w	r7, [sp]
    6c7a:	4813      	ldr	r0, [pc, #76]	; (6cc8 <hci_cmd_done+0xfc>)
    6c7c:	f7fb f898 	bl	1db0 <log_3>
	if (cmd(buf)->sync) {
    6c80:	4628      	mov	r0, r5
    6c82:	f017 fb27 	bl	1e2d4 <net_buf_id>
    6c86:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6c8a:	6843      	ldr	r3, [r0, #4]
    6c8c:	2b00      	cmp	r3, #0
    6c8e:	d0cb      	beq.n	6c28 <hci_cmd_done+0x5c>
		cmd(buf)->status = status;
    6c90:	4628      	mov	r0, r5
    6c92:	f017 fb1f 	bl	1e2d4 <net_buf_id>
    6c96:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    6c9a:	4628      	mov	r0, r5
    6c9c:	f017 fb1a 	bl	1e2d4 <net_buf_id>
    6ca0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    6ca4:	6840      	ldr	r0, [r0, #4]
    6ca6:	f025 fb6a 	bl	2c37e <_impl_k_sem_give>
    6caa:	e7bd      	b.n	6c28 <hci_cmd_done+0x5c>
    6cac:	2000d948 	.word	0x2000d948
    6cb0:	2000d74c 	.word	0x2000d74c
    6cb4:	0002d070 	.word	0x0002d070
    6cb8:	0002cff8 	.word	0x0002cff8
    6cbc:	0002e9ae 	.word	0x0002e9ae
    6cc0:	0002f151 	.word	0x0002f151
    6cc4:	2000098c 	.word	0x2000098c
    6cc8:	0002f18a 	.word	0x0002f18a

00006ccc <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    6ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0; id < bt_dev.id_count; id++) {
    6cce:	4e0b      	ldr	r6, [pc, #44]	; (6cfc <id_find+0x30>)
{
    6cd0:	4607      	mov	r7, r0
	for (id = 0; id < bt_dev.id_count; id++) {
    6cd2:	2500      	movs	r5, #0
    6cd4:	79f3      	ldrb	r3, [r6, #7]
    6cd6:	b2ec      	uxtb	r4, r5
    6cd8:	42a3      	cmp	r3, r4
    6cda:	d802      	bhi.n	6ce2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6cdc:	f06f 0401 	mvn.w	r4, #1
    6ce0:	e009      	b.n	6cf6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6ce2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    6ce6:	2207      	movs	r2, #7
    6ce8:	4431      	add	r1, r6
    6cea:	4638      	mov	r0, r7
    6cec:	f7ff f8a5 	bl	5e3a <memcmp>
    6cf0:	3501      	adds	r5, #1
    6cf2:	2800      	cmp	r0, #0
    6cf4:	d1ee      	bne.n	6cd4 <id_find+0x8>
}
    6cf6:	4620      	mov	r0, r4
    6cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cfa:	bf00      	nop
    6cfc:	2000cc80 	.word	0x2000cc80

00006d00 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6d00:	f3bf 8f5b 	dmb	ish
    6d04:	6800      	ldr	r0, [r0, #0]
    6d06:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6d0a:	4108      	asrs	r0, r1
}
    6d0c:	f000 0001 	and.w	r0, r0, #1
    6d10:	4770      	bx	lr
	...

00006d14 <slave_update_conn_param>:
{
    6d14:	b508      	push	{r3, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6d16:	2109      	movs	r1, #9
{
    6d18:	4603      	mov	r3, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6d1a:	3004      	adds	r0, #4
    6d1c:	f7ff fff0 	bl	6d00 <atomic_test_bit>
    6d20:	b940      	cbnz	r0, 6d34 <slave_update_conn_param+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6d22:	f103 0174 	add.w	r1, r3, #116	; 0x74
    6d26:	f241 3288 	movw	r2, #5000	; 0x1388
    6d2a:	4803      	ldr	r0, [pc, #12]	; (6d38 <slave_update_conn_param+0x24>)
}
    6d2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6d30:	f025 bd46 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
    6d34:	bd08      	pop	{r3, pc}
    6d36:	bf00      	nop
    6d38:	200031d8 	.word	0x200031d8

00006d3c <sys_put_le64>:
    6d3c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    6d40:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    6d42:	0e00      	lsrs	r0, r0, #24
    6d44:	7053      	strb	r3, [r2, #1]
    6d46:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
    6d48:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    6d4a:	f3c1 2007 	ubfx	r0, r1, #8, #8
    6d4e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
    6d50:	7093      	strb	r3, [r2, #2]
    6d52:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
    6d54:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
    6d56:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
    6d58:	71d1      	strb	r1, [r2, #7]
 */
static inline void sys_put_le64(u64_t val, u8_t dst[8])
{
	sys_put_le32(val, dst);
	sys_put_le32(val >> 32, &dst[4]);
}
    6d5a:	4770      	bx	lr

00006d5c <bt_hci_cmd_create>:
{
    6d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d60:	4680      	mov	r8, r0
    6d62:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6d64:	4813      	ldr	r0, [pc, #76]	; (6db4 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    6d66:	4d14      	ldr	r5, [pc, #80]	; (6db8 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6d6c:	f017 fb40 	bl	1e3f0 <net_buf_alloc_fixed>
    6d70:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6d72:	f100 0608 	add.w	r6, r0, #8
    6d76:	2100      	movs	r1, #0
    6d78:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    6d7a:	2700      	movs	r7, #0
    6d7c:	f017 fb57 	bl	1e42e <net_buf_simple_reserve>
    6d80:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    6d82:	4620      	mov	r0, r4
    6d84:	f017 faa6 	bl	1e2d4 <net_buf_id>
    6d88:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    6d8c:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    6d90:	4620      	mov	r0, r4
    6d92:	f017 fa9f 	bl	1e2d4 <net_buf_id>
    6d96:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    6d9a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    6d9c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    6d9e:	4630      	mov	r0, r6
    6da0:	f017 fbb4 	bl	1e50c <net_buf_simple_add>
	hdr->param_len = param_len;
    6da4:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    6da8:	f8a0 8000 	strh.w	r8, [r0]
}
    6dac:	4620      	mov	r0, r4
    6dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6db2:	bf00      	nop
    6db4:	2000d948 	.word	0x2000d948
    6db8:	2000098c 	.word	0x2000098c

00006dbc <bt_hci_cmd_send_sync>:
{
    6dbc:	b570      	push	{r4, r5, r6, lr}
    6dbe:	4615      	mov	r5, r2
    6dc0:	b086      	sub	sp, #24
	if (!buf) {
    6dc2:	460c      	mov	r4, r1
    6dc4:	b919      	cbnz	r1, 6dce <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    6dc6:	f7ff ffc9 	bl	6d5c <bt_hci_cmd_create>
		if (!buf) {
    6dca:	4604      	mov	r4, r0
    6dcc:	b368      	cbz	r0, 6e2a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    6dce:	2201      	movs	r2, #1
    6dd0:	2100      	movs	r1, #0
    6dd2:	4668      	mov	r0, sp
    6dd4:	f025 faca 	bl	2c36c <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    6dd8:	4620      	mov	r0, r4
    6dda:	f017 fa7b 	bl	1e2d4 <net_buf_id>
    6dde:	4e14      	ldr	r6, [pc, #80]	; (6e30 <bt_hci_cmd_send_sync+0x74>)
    6de0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    6de4:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    6de8:	4620      	mov	r0, r4
    6dea:	f017 fb5f 	bl	1e4ac <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6dee:	4621      	mov	r1, r4
    6df0:	4810      	ldr	r0, [pc, #64]	; (6e34 <bt_hci_cmd_send_sync+0x78>)
    6df2:	f017 fb20 	bl	1e436 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    6df6:	f242 7110 	movw	r1, #10000	; 0x2710
    6dfa:	4668      	mov	r0, sp
    6dfc:	f025 fae6 	bl	2c3cc <_impl_k_sem_take>
	if (cmd(buf)->status) {
    6e00:	4620      	mov	r0, r4
    6e02:	f017 fa67 	bl	1e2d4 <net_buf_id>
    6e06:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    6e0a:	b130      	cbz	r0, 6e1a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    6e0c:	4620      	mov	r0, r4
    6e0e:	f017 fb1f 	bl	1e450 <net_buf_unref>
		err = -EIO;
    6e12:	f06f 0004 	mvn.w	r0, #4
}
    6e16:	b006      	add	sp, #24
    6e18:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    6e1a:	b10d      	cbz	r5, 6e20 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    6e1c:	602c      	str	r4, [r5, #0]
    6e1e:	e7fa      	b.n	6e16 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    6e20:	4620      	mov	r0, r4
    6e22:	f017 fb15 	bl	1e450 <net_buf_unref>
		err = 0;
    6e26:	4628      	mov	r0, r5
    6e28:	e7f5      	b.n	6e16 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    6e2a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6e2e:	e7f2      	b.n	6e16 <bt_hci_cmd_send_sync+0x5a>
    6e30:	2000098c 	.word	0x2000098c
    6e34:	2000cd44 	.word	0x2000cd44

00006e38 <hci_id_add>:
{
    6e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e3a:	4607      	mov	r7, r0
    6e3c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    6e3e:	f242 0027 	movw	r0, #8231	; 0x2027
    6e42:	2127      	movs	r1, #39	; 0x27
    6e44:	f7ff ff8a 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    6e48:	4604      	mov	r4, r0
    6e4a:	b1d0      	cbz	r0, 6e82 <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    6e4c:	2127      	movs	r1, #39	; 0x27
    6e4e:	3008      	adds	r0, #8
    6e50:	f017 fb5c 	bl	1e50c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    6e54:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    6e56:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    6e58:	f7ff fe28 	bl	6aac <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    6e5c:	4631      	mov	r1, r6
    6e5e:	2210      	movs	r2, #16
    6e60:	1de8      	adds	r0, r5, #7
    6e62:	f7ff f811 	bl	5e88 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
    6e66:	2210      	movs	r2, #16
    6e68:	2100      	movs	r1, #0
    6e6a:	f105 0017 	add.w	r0, r5, #23
    6e6e:	f7ff f838 	bl	5ee2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    6e72:	4621      	mov	r1, r4
    6e74:	2200      	movs	r2, #0
    6e76:	f242 0027 	movw	r0, #8231	; 0x2027
}
    6e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    6e7e:	f7ff bf9d 	b.w	6dbc <bt_hci_cmd_send_sync>
}
    6e82:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006e88 <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    6e88:	f100 0126 	add.w	r1, r0, #38	; 0x26
    6e8c:	3001      	adds	r0, #1
    6e8e:	f7ff bfd3 	b.w	6e38 <hci_id_add>

00006e92 <addr_res_enable>:
{
    6e92:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    6e94:	2101      	movs	r1, #1
{
    6e96:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    6e98:	f242 002d 	movw	r0, #8237	; 0x202d
    6e9c:	f7ff ff5e 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    6ea0:	4604      	mov	r4, r0
    6ea2:	b158      	cbz	r0, 6ebc <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    6ea4:	4629      	mov	r1, r5
    6ea6:	3008      	adds	r0, #8
    6ea8:	f017 fb3f 	bl	1e52a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    6eac:	4621      	mov	r1, r4
    6eae:	2200      	movs	r2, #0
    6eb0:	f242 002d 	movw	r0, #8237	; 0x202d
}
    6eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    6eb8:	f7ff bf80 	b.w	6dbc <bt_hci_cmd_send_sync>
}
    6ebc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6ec0:	bd38      	pop	{r3, r4, r5, pc}
	...

00006ec4 <set_le_scan_enable>:
{
    6ec4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    6ec6:	2102      	movs	r1, #2
{
    6ec8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    6eca:	f242 000c 	movw	r0, #8204	; 0x200c
    6ece:	f7ff ff45 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    6ed2:	4604      	mov	r4, r0
    6ed4:	b330      	cbz	r0, 6f24 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    6ed6:	2102      	movs	r1, #2
    6ed8:	3008      	adds	r0, #8
    6eda:	f017 fb17 	bl	1e50c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    6ede:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    6ee0:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    6ee2:	d116      	bne.n	6f12 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    6ee4:	210d      	movs	r1, #13
    6ee6:	4811      	ldr	r0, [pc, #68]	; (6f2c <set_le_scan_enable+0x68>)
    6ee8:	f7ff ff0a 	bl	6d00 <atomic_test_bit>
    6eec:	7058      	strb	r0, [r3, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    6eee:	4621      	mov	r1, r4
	cp->enable = enable;
    6ef0:	701d      	strb	r5, [r3, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    6ef2:	2200      	movs	r2, #0
    6ef4:	f242 000c 	movw	r0, #8204	; 0x200c
    6ef8:	f7ff ff60 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    6efc:	4604      	mov	r4, r0
    6efe:	b930      	cbnz	r0, 6f0e <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    6f00:	2d01      	cmp	r5, #1
    6f02:	d109      	bne.n	6f18 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6f08:	4808      	ldr	r0, [pc, #32]	; (6f2c <set_le_scan_enable+0x68>)
    6f0a:	f7ff fdd2 	bl	6ab2 <atomic_or>
}
    6f0e:	4620      	mov	r0, r4
    6f10:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    6f12:	2200      	movs	r2, #0
    6f14:	7042      	strb	r2, [r0, #1]
    6f16:	e7ea      	b.n	6eee <set_le_scan_enable+0x2a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6f18:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    6f1c:	4803      	ldr	r0, [pc, #12]	; (6f2c <set_le_scan_enable+0x68>)
    6f1e:	f7ff fdd7 	bl	6ad0 <atomic_and>
    6f22:	e7f4      	b.n	6f0e <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    6f24:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6f28:	e7f1      	b.n	6f0e <set_le_scan_enable+0x4a>
    6f2a:	bf00      	nop
    6f2c:	2000ccf0 	.word	0x2000ccf0

00006f30 <set_advertise_enable>:
{
    6f30:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    6f32:	2101      	movs	r1, #1
{
    6f34:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    6f36:	f242 000a 	movw	r0, #8202	; 0x200a
    6f3a:	f7ff ff0f 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    6f3e:	4604      	mov	r4, r0
    6f40:	b1d8      	cbz	r0, 6f7a <set_advertise_enable+0x4a>
    6f42:	3008      	adds	r0, #8
	if (enable) {
    6f44:	b18d      	cbz	r5, 6f6a <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    6f46:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    6f48:	f017 faef 	bl	1e52a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    6f4c:	4621      	mov	r1, r4
    6f4e:	2200      	movs	r2, #0
    6f50:	f242 000a 	movw	r0, #8202	; 0x200a
    6f54:	f7ff ff32 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    6f58:	4604      	mov	r4, r0
    6f5a:	b920      	cbnz	r0, 6f66 <set_advertise_enable+0x36>
	if (enable) {
    6f5c:	b13d      	cbz	r5, 6f6e <set_advertise_enable+0x3e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6f5e:	2140      	movs	r1, #64	; 0x40
    6f60:	4807      	ldr	r0, [pc, #28]	; (6f80 <set_advertise_enable+0x50>)
    6f62:	f7ff fda6 	bl	6ab2 <atomic_or>
}
    6f66:	4620      	mov	r0, r4
    6f68:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    6f6a:	4629      	mov	r1, r5
    6f6c:	e7ec      	b.n	6f48 <set_advertise_enable+0x18>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6f6e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6f72:	4803      	ldr	r0, [pc, #12]	; (6f80 <set_advertise_enable+0x50>)
    6f74:	f7ff fdac 	bl	6ad0 <atomic_and>
    6f78:	e7f5      	b.n	6f66 <set_advertise_enable+0x36>
		return -ENOBUFS;
    6f7a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6f7e:	e7f2      	b.n	6f66 <set_advertise_enable+0x36>
    6f80:	2000ccf0 	.word	0x2000ccf0

00006f84 <set_random_address>:
{
    6f84:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    6f86:	4d15      	ldr	r5, [pc, #84]	; (6fdc <set_random_address+0x58>)
    6f88:	2206      	movs	r2, #6
    6f8a:	f105 010a 	add.w	r1, r5, #10
    6f8e:	4606      	mov	r6, r0
    6f90:	f7fe ff53 	bl	5e3a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    6f94:	4604      	mov	r4, r0
    6f96:	b1d8      	cbz	r0, 6fd0 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    6f98:	2106      	movs	r1, #6
    6f9a:	f242 0005 	movw	r0, #8197	; 0x2005
    6f9e:	f7ff fedd 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    6fa2:	4604      	mov	r4, r0
    6fa4:	b1b0      	cbz	r0, 6fd4 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    6fa6:	2206      	movs	r2, #6
    6fa8:	4631      	mov	r1, r6
    6faa:	3008      	adds	r0, #8
    6fac:	f017 fab4 	bl	1e518 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    6fb0:	4621      	mov	r1, r4
    6fb2:	2200      	movs	r2, #0
    6fb4:	f242 0005 	movw	r0, #8197	; 0x2005
    6fb8:	f7ff ff00 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    6fbc:	4604      	mov	r4, r0
    6fbe:	b938      	cbnz	r0, 6fd0 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    6fc0:	2206      	movs	r2, #6
    6fc2:	4631      	mov	r1, r6
    6fc4:	f105 000a 	add.w	r0, r5, #10
    6fc8:	f7fe ff5e 	bl	5e88 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    6fcc:	2301      	movs	r3, #1
    6fce:	726b      	strb	r3, [r5, #9]
}
    6fd0:	4620      	mov	r0, r4
    6fd2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    6fd4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6fd8:	e7fa      	b.n	6fd0 <set_random_address+0x4c>
    6fda:	bf00      	nop
    6fdc:	2000cc80 	.word	0x2000cc80

00006fe0 <le_set_private_addr.isra.26>:
static int le_set_private_addr(u8_t id)
    6fe0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    6fe2:	2106      	movs	r1, #6
    6fe4:	4668      	mov	r0, sp
    6fe6:	f014 ffed 	bl	1bfc4 <bt_rand>
	if (err) {
    6fea:	b940      	cbnz	r0, 6ffe <le_set_private_addr.isra.26+0x1e>
	nrpa.val[5] &= 0x3f;
    6fec:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    6ff0:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    6ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ff6:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    6ffa:	f7ff ffc3 	bl	6f84 <set_random_address>
}
    6ffe:	b003      	add	sp, #12
    7000:	f85d fb04 	ldr.w	pc, [sp], #4

00007004 <set_ad>:
{
    7004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7008:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    700a:	2120      	movs	r1, #32
{
    700c:	4682      	mov	sl, r0
    700e:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7010:	f7ff fea4 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    7014:	4607      	mov	r7, r0
    7016:	2800      	cmp	r0, #0
    7018:	d05e      	beq.n	70d8 <set_ad+0xd4>
	set_data = net_buf_add(buf, sizeof(*set_data));
    701a:	2120      	movs	r1, #32
    701c:	3008      	adds	r0, #8
    701e:	f017 fa75 	bl	1e50c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    7022:	2220      	movs	r2, #32
    7024:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    7026:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    7028:	f7fe ff5b 	bl	5ee2 <memset>
    702c:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
	for (c = 0; c < ad_len; c++) {
    7030:	45a1      	cmp	r9, r4
    7032:	d106      	bne.n	7042 <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7034:	4639      	mov	r1, r7
    7036:	4650      	mov	r0, sl
    7038:	2200      	movs	r2, #0
}
    703a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    703e:	f7ff bebd 	b.w	6dbc <bt_hci_cmd_send_sync>
    7042:	6826      	ldr	r6, [r4, #0]
		for (i = 0; i < ad[c].len; i++) {
    7044:	f04f 0b00 	mov.w	fp, #0
    7048:	6863      	ldr	r3, [r4, #4]
    704a:	455b      	cmp	r3, fp
    704c:	d801      	bhi.n	7052 <set_ad+0x4e>
    704e:	3408      	adds	r4, #8
    7050:	e7ee      	b.n	7030 <set_ad+0x2c>
			int len = data[i].data_len;
    7052:	7872      	ldrb	r2, [r6, #1]
			if (set_data->len + len + 2 > 31) {
    7054:	782b      	ldrb	r3, [r5, #0]
			u8_t type = data[i].type;
    7056:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    7058:	1898      	adds	r0, r3, r2
    705a:	3002      	adds	r0, #2
    705c:	281f      	cmp	r0, #31
    705e:	dd20      	ble.n	70a2 <set_ad+0x9e>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7060:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    7062:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7066:	d100      	bne.n	706a <set_ad+0x66>
    7068:	b9d2      	cbnz	r2, 70a0 <set_ad+0x9c>
					net_buf_unref(buf);
    706a:	4638      	mov	r0, r7
    706c:	f017 f9f0 	bl	1e450 <net_buf_unref>
					BT_ERR("Too big advertising data");
    7070:	4b1b      	ldr	r3, [pc, #108]	; (70e0 <set_ad+0xdc>)
    7072:	681b      	ldr	r3, [r3, #0]
    7074:	075b      	lsls	r3, r3, #29
    7076:	d010      	beq.n	709a <set_ad+0x96>
    7078:	2301      	movs	r3, #1
    707a:	f04f 0200 	mov.w	r2, #0
    707e:	f363 0202 	bfi	r2, r3, #0, #3
    7082:	4918      	ldr	r1, [pc, #96]	; (70e4 <set_ad+0xe0>)
    7084:	4b18      	ldr	r3, [pc, #96]	; (70e8 <set_ad+0xe4>)
    7086:	4819      	ldr	r0, [pc, #100]	; (70ec <set_ad+0xe8>)
    7088:	1a5b      	subs	r3, r3, r1
    708a:	f36f 02c5 	bfc	r2, #3, #3
    708e:	08db      	lsrs	r3, r3, #3
    7090:	f363 128f 	bfi	r2, r3, #6, #10
    7094:	4916      	ldr	r1, [pc, #88]	; (70f0 <set_ad+0xec>)
    7096:	f7fa fe5f 	bl	1d58 <log_1>
					return -EINVAL;
    709a:	f06f 0015 	mvn.w	r0, #21
    709e:	e01d      	b.n	70dc <set_ad+0xd8>
				type = BT_DATA_NAME_SHORTENED;
    70a0:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    70a2:	fa5f f882 	uxtb.w	r8, r2
    70a6:	18e8      	adds	r0, r5, r3
    70a8:	f108 0c01 	add.w	ip, r8, #1
    70ac:	f880 c001 	strb.w	ip, [r0, #1]
			set_data->data[set_data->len++] = type;
    70b0:	1c98      	adds	r0, r3, #2
			set_data->data[set_data->len++] = len + 1;
    70b2:	3301      	adds	r3, #1
			set_data->data[set_data->len++] = type;
    70b4:	fa55 f383 	uxtab	r3, r5, r3
    70b8:	b2c0      	uxtb	r0, r0
    70ba:	7028      	strb	r0, [r5, #0]
    70bc:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    70be:	3001      	adds	r0, #1
    70c0:	6871      	ldr	r1, [r6, #4]
    70c2:	4428      	add	r0, r5
    70c4:	f7fe fee0 	bl	5e88 <memcpy>
			set_data->len += len;
    70c8:	782b      	ldrb	r3, [r5, #0]
    70ca:	4498      	add	r8, r3
    70cc:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
    70d0:	f10b 0b01 	add.w	fp, fp, #1
    70d4:	3608      	adds	r6, #8
    70d6:	e7b7      	b.n	7048 <set_ad+0x44>
		return -ENOBUFS;
    70d8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    70dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70e0:	2000d74c 	.word	0x2000d74c
    70e4:	0002cff8 	.word	0x0002cff8
    70e8:	0002d070 	.word	0x0002d070
    70ec:	0002f2ac 	.word	0x0002f2ac
    70f0:	0002ea4a 	.word	0x0002ea4a

000070f4 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    70f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70f8:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    70fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    70fe:	4615      	mov	r5, r2
    7100:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7102:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    7104:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7106:	a902      	add	r1, sp, #8
    7108:	f242 0008 	movw	r0, #8200	; 0x2008
{
    710c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    7110:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    7114:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    7118:	f7ff ff74 	bl	7004 <set_ad>
	if (err) {
    711c:	4604      	mov	r4, r0
    711e:	bb10      	cbnz	r0, 7166 <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    7120:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    7124:	f1b8 0f00 	cmp.w	r8, #0
    7128:	d011      	beq.n	714e <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    712a:	b115      	cbz	r5, 7132 <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    712c:	4602      	mov	r2, r0
    712e:	42b2      	cmp	r2, r6
    7130:	d11d      	bne.n	716e <le_adv_update+0x7a>
			}
		}

		name = bt_get_name();

		d[1].data = (&(struct bt_data)BT_DATA(
    7132:	4d14      	ldr	r5, [pc, #80]	; (7184 <le_adv_update+0x90>)
    7134:	2309      	movs	r3, #9
    7136:	4628      	mov	r0, r5
    7138:	f88d 3000 	strb.w	r3, [sp]
    713c:	f7fe fe4e 	bl	5ddc <strlen>
					BT_DATA_NAME_COMPLETE,
					name, strlen(name)));
		d[1].len = 1;
    7140:	2301      	movs	r3, #1
		d[1].data = (&(struct bt_data)BT_DATA(
    7142:	f88d 0001 	strb.w	r0, [sp, #1]
    7146:	9501      	str	r5, [sp, #4]
    7148:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    714c:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    714e:	9b02      	ldr	r3, [sp, #8]
    7150:	b913      	cbnz	r3, 7158 <le_adv_update+0x64>
    7152:	9b04      	ldr	r3, [sp, #16]
    7154:	b903      	cbnz	r3, 7158 <le_adv_update+0x64>
    7156:	b137      	cbz	r7, 7166 <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    7158:	2202      	movs	r2, #2
    715a:	a902      	add	r1, sp, #8
    715c:	f242 0009 	movw	r0, #8201	; 0x2009
    7160:	f7ff ff50 	bl	7004 <set_ad>
    7164:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    7166:	4620      	mov	r0, r4
    7168:	b006      	add	sp, #24
    716a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    716e:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    7172:	3908      	subs	r1, #8
    7174:	2901      	cmp	r1, #1
    7176:	d901      	bls.n	717c <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    7178:	3201      	adds	r2, #1
    717a:	e7d8      	b.n	712e <le_adv_update+0x3a>
				return -EINVAL;
    717c:	f06f 0415 	mvn.w	r4, #21
    7180:	e7f1      	b.n	7166 <le_adv_update+0x72>
    7182:	bf00      	nop
    7184:	0002f23c 	.word	0x0002f23c

00007188 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    7188:	8802      	ldrh	r2, [r0, #0]
    718a:	8843      	ldrh	r3, [r0, #2]
    718c:	429a      	cmp	r2, r3
{
    718e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    7190:	d818      	bhi.n	71c4 <bt_le_conn_params_valid+0x3c>
    7192:	2a05      	cmp	r2, #5
    7194:	d916      	bls.n	71c4 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    7196:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    719a:	d813      	bhi.n	71c4 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    719c:	8884      	ldrh	r4, [r0, #4]
    719e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    71a2:	d20f      	bcs.n	71c4 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    71a4:	88c1      	ldrh	r1, [r0, #6]
    71a6:	f1a1 020a 	sub.w	r2, r1, #10
    71aa:	b292      	uxth	r2, r2
    71ac:	f640 4076 	movw	r0, #3190	; 0xc76
    71b0:	4282      	cmp	r2, r0
    71b2:	d807      	bhi.n	71c4 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    71b4:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    71b8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    71bc:	bfb4      	ite	lt
    71be:	2001      	movlt	r0, #1
    71c0:	2000      	movge	r0, #0
}
    71c2:	bd10      	pop	{r4, pc}
		return false;
    71c4:	2000      	movs	r0, #0
    71c6:	e7fc      	b.n	71c2 <bt_le_conn_params_valid+0x3a>

000071c8 <bt_id_add>:
{
    71c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    71cc:	4d85      	ldr	r5, [pc, #532]	; (73e4 <bt_id_add+0x21c>)
    71ce:	f895 20a4 	ldrb.w	r2, [r5, #164]	; 0xa4
    71d2:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
{
    71d6:	4607      	mov	r7, r0
    71d8:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    71da:	b10a      	cbz	r2, 71e0 <bt_id_add+0x18>
    71dc:	429a      	cmp	r2, r3
    71de:	d205      	bcs.n	71ec <bt_id_add+0x24>
		bt_dev.le.rl_entries++;
    71e0:	3301      	adds	r3, #1
    71e2:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    71e6:	b002      	add	sp, #8
    71e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    71ec:	2103      	movs	r1, #3
    71ee:	2000      	movs	r0, #0
    71f0:	f003 f8f0 	bl	a3d4 <bt_conn_lookup_state_le>
	if (conn) {
    71f4:	4606      	mov	r6, r0
    71f6:	b168      	cbz	r0, 7214 <bt_id_add+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    71f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    71fc:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7200:	f7ff fc57 	bl	6ab2 <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_ADD;
    7204:	7a7b      	ldrb	r3, [r7, #9]
    7206:	f043 0304 	orr.w	r3, r3, #4
    720a:	727b      	strb	r3, [r7, #9]
		bt_conn_unref(conn);
    720c:	4630      	mov	r0, r6
    720e:	f003 f903 	bl	a418 <bt_conn_unref>
		return;
    7212:	e7e8      	b.n	71e6 <bt_id_add+0x1e>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    7214:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7218:	2106      	movs	r1, #6
    721a:	f7ff fd71 	bl	6d00 <atomic_test_bit>
	if (adv_enabled) {
    721e:	4605      	mov	r5, r0
    7220:	b110      	cbz	r0, 7228 <bt_id_add+0x60>
		set_advertise_enable(false);
    7222:	4630      	mov	r0, r6
    7224:	f7ff fe84 	bl	6f30 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    7228:	210a      	movs	r1, #10
    722a:	486f      	ldr	r0, [pc, #444]	; (73e8 <bt_id_add+0x220>)
    722c:	f7ff fd68 	bl	6d00 <atomic_test_bit>
	if (scan_enabled) {
    7230:	4606      	mov	r6, r0
    7232:	b110      	cbz	r0, 723a <bt_id_add+0x72>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    7234:	2000      	movs	r0, #0
    7236:	f7ff fe45 	bl	6ec4 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    723a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    723e:	b1db      	cbz	r3, 7278 <bt_id_add+0xb0>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    7240:	2000      	movs	r0, #0
    7242:	f7ff fe26 	bl	6e92 <addr_res_enable>
		if (err) {
    7246:	b1b8      	cbz	r0, 7278 <bt_id_add+0xb0>
			BT_WARN("Failed to disable address resolution");
    7248:	4b68      	ldr	r3, [pc, #416]	; (73ec <bt_id_add+0x224>)
    724a:	681b      	ldr	r3, [r3, #0]
    724c:	f003 0307 	and.w	r3, r3, #7
    7250:	2b01      	cmp	r3, #1
    7252:	d94d      	bls.n	72f0 <bt_id_add+0x128>
    7254:	2302      	movs	r3, #2
    7256:	f04f 0200 	mov.w	r2, #0
    725a:	f363 0202 	bfi	r2, r3, #0, #3
    725e:	4964      	ldr	r1, [pc, #400]	; (73f0 <bt_id_add+0x228>)
    7260:	4b64      	ldr	r3, [pc, #400]	; (73f4 <bt_id_add+0x22c>)
    7262:	4865      	ldr	r0, [pc, #404]	; (73f8 <bt_id_add+0x230>)
    7264:	1a5b      	subs	r3, r3, r1
    7266:	f36f 02c5 	bfc	r2, #3, #3
    726a:	08db      	lsrs	r3, r3, #3
    726c:	4963      	ldr	r1, [pc, #396]	; (73fc <bt_id_add+0x234>)
    726e:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Failed to set privacy mode");
    7272:	f7fa fd71 	bl	1d58 <log_1>
    7276:	e03b      	b.n	72f0 <bt_id_add+0x128>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    7278:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    727c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    7280:	429a      	cmp	r2, r3
    7282:	d143      	bne.n	730c <bt_id_add+0x144>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    7284:	4f59      	ldr	r7, [pc, #356]	; (73ec <bt_id_add+0x224>)
    7286:	683b      	ldr	r3, [r7, #0]
    7288:	f003 0307 	and.w	r3, r3, #7
    728c:	2b01      	cmp	r3, #1
    728e:	d910      	bls.n	72b2 <bt_id_add+0xea>
    7290:	2302      	movs	r3, #2
    7292:	f04f 0200 	mov.w	r2, #0
    7296:	f363 0202 	bfi	r2, r3, #0, #3
    729a:	4955      	ldr	r1, [pc, #340]	; (73f0 <bt_id_add+0x228>)
    729c:	4b55      	ldr	r3, [pc, #340]	; (73f4 <bt_id_add+0x22c>)
    729e:	4858      	ldr	r0, [pc, #352]	; (7400 <bt_id_add+0x238>)
    72a0:	1a5b      	subs	r3, r3, r1
    72a2:	f36f 02c5 	bfc	r2, #3, #3
    72a6:	08db      	lsrs	r3, r3, #3
    72a8:	f363 128f 	bfi	r2, r3, #6, #10
    72ac:	4953      	ldr	r1, [pc, #332]	; (73fc <bt_id_add+0x234>)
    72ae:	f7fa fd53 	bl	1d58 <log_1>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    72b2:	2200      	movs	r2, #0
    72b4:	4611      	mov	r1, r2
    72b6:	f242 0029 	movw	r0, #8233	; 0x2029
    72ba:	f7ff fd7f 	bl	6dbc <bt_hci_cmd_send_sync>
		if (err) {
    72be:	b190      	cbz	r0, 72e6 <bt_id_add+0x11e>
			BT_ERR("Failed to clear resolution list");
    72c0:	683b      	ldr	r3, [r7, #0]
    72c2:	0759      	lsls	r1, r3, #29
    72c4:	d014      	beq.n	72f0 <bt_id_add+0x128>
    72c6:	2301      	movs	r3, #1
    72c8:	f04f 0200 	mov.w	r2, #0
    72cc:	f363 0202 	bfi	r2, r3, #0, #3
    72d0:	4947      	ldr	r1, [pc, #284]	; (73f0 <bt_id_add+0x228>)
    72d2:	4b48      	ldr	r3, [pc, #288]	; (73f4 <bt_id_add+0x22c>)
    72d4:	484b      	ldr	r0, [pc, #300]	; (7404 <bt_id_add+0x23c>)
    72d6:	1a5b      	subs	r3, r3, r1
    72d8:	f36f 02c5 	bfc	r2, #3, #3
    72dc:	08db      	lsrs	r3, r3, #3
    72de:	f363 128f 	bfi	r2, r3, #6, #10
    72e2:	4946      	ldr	r1, [pc, #280]	; (73fc <bt_id_add+0x234>)
    72e4:	e7c5      	b.n	7272 <bt_id_add+0xaa>
		bt_dev.le.rl_entries++;
    72e6:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    72ea:	3301      	adds	r3, #1
    72ec:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    72f0:	2001      	movs	r0, #1
    72f2:	f7ff fdce 	bl	6e92 <addr_res_enable>
	if (scan_enabled) {
    72f6:	b116      	cbz	r6, 72fe <bt_id_add+0x136>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    72f8:	2001      	movs	r0, #1
    72fa:	f7ff fde3 	bl	6ec4 <set_le_scan_enable>
	if (adv_enabled) {
    72fe:	2d00      	cmp	r5, #0
    7300:	f43f af71 	beq.w	71e6 <bt_id_add+0x1e>
		set_advertise_enable(true);
    7304:	2001      	movs	r0, #1
    7306:	f7ff fe13 	bl	6f30 <set_advertise_enable>
    730a:	e76c      	b.n	71e6 <bt_id_add+0x1e>
	err = hci_id_add(&keys->addr, keys->irk.val);
    730c:	f107 0801 	add.w	r8, r7, #1
    7310:	f107 0126 	add.w	r1, r7, #38	; 0x26
    7314:	4640      	mov	r0, r8
    7316:	f7ff fd8f 	bl	6e38 <hci_id_add>
	if (err) {
    731a:	4607      	mov	r7, r0
    731c:	b198      	cbz	r0, 7346 <bt_id_add+0x17e>
		BT_ERR("Failed to add IRK to controller");
    731e:	4b33      	ldr	r3, [pc, #204]	; (73ec <bt_id_add+0x224>)
    7320:	681b      	ldr	r3, [r3, #0]
    7322:	075a      	lsls	r2, r3, #29
    7324:	d0e4      	beq.n	72f0 <bt_id_add+0x128>
    7326:	2301      	movs	r3, #1
    7328:	f04f 0200 	mov.w	r2, #0
    732c:	f363 0202 	bfi	r2, r3, #0, #3
    7330:	492f      	ldr	r1, [pc, #188]	; (73f0 <bt_id_add+0x228>)
    7332:	4b30      	ldr	r3, [pc, #192]	; (73f4 <bt_id_add+0x22c>)
    7334:	4834      	ldr	r0, [pc, #208]	; (7408 <bt_id_add+0x240>)
    7336:	1a5b      	subs	r3, r3, r1
    7338:	f36f 02c5 	bfc	r2, #3, #3
    733c:	08db      	lsrs	r3, r3, #3
    733e:	f363 128f 	bfi	r2, r3, #6, #10
    7342:	492e      	ldr	r1, [pc, #184]	; (73fc <bt_id_add+0x234>)
    7344:	e795      	b.n	7272 <bt_id_add+0xaa>
	bt_dev.le.rl_entries++;
    7346:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    734a:	3301      	adds	r3, #1
    734c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    7350:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    7354:	f013 0304 	ands.w	r3, r3, #4
    7358:	d115      	bne.n	7386 <bt_id_add+0x1be>
		BT_WARN("Set privacy mode command is not supported");
    735a:	4a24      	ldr	r2, [pc, #144]	; (73ec <bt_id_add+0x224>)
    735c:	6812      	ldr	r2, [r2, #0]
    735e:	f002 0207 	and.w	r2, r2, #7
    7362:	2a01      	cmp	r2, #1
    7364:	d9c4      	bls.n	72f0 <bt_id_add+0x128>
    7366:	2102      	movs	r1, #2
    7368:	f04f 0200 	mov.w	r2, #0
    736c:	f361 0202 	bfi	r2, r1, #0, #3
    7370:	f363 02c5 	bfi	r2, r3, #3, #3
    7374:	491e      	ldr	r1, [pc, #120]	; (73f0 <bt_id_add+0x228>)
    7376:	4b1f      	ldr	r3, [pc, #124]	; (73f4 <bt_id_add+0x22c>)
    7378:	4824      	ldr	r0, [pc, #144]	; (740c <bt_id_add+0x244>)
    737a:	1a5b      	subs	r3, r3, r1
    737c:	08db      	lsrs	r3, r3, #3
    737e:	f363 128f 	bfi	r2, r3, #6, #10
    7382:	4923      	ldr	r1, [pc, #140]	; (7410 <bt_id_add+0x248>)
    7384:	e775      	b.n	7272 <bt_id_add+0xaa>
	bt_addr_le_copy(&cp.id_addr, addr);
    7386:	4641      	mov	r1, r8
    7388:	4668      	mov	r0, sp
    738a:	f7ff fb8f 	bl	6aac <bt_addr_le_copy>
	cp.mode = mode;
    738e:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7390:	2108      	movs	r1, #8
    7392:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    7396:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    739a:	f7ff fcdf 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    739e:	4604      	mov	r4, r0
    73a0:	b160      	cbz	r0, 73bc <bt_id_add+0x1f4>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    73a2:	2208      	movs	r2, #8
    73a4:	4669      	mov	r1, sp
    73a6:	4410      	add	r0, r2
    73a8:	f017 f8b6 	bl	1e518 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    73ac:	463a      	mov	r2, r7
    73ae:	4621      	mov	r1, r4
    73b0:	f242 004e 	movw	r0, #8270	; 0x204e
    73b4:	f7ff fd02 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    73b8:	2800      	cmp	r0, #0
    73ba:	d099      	beq.n	72f0 <bt_id_add+0x128>
		BT_ERR("Failed to set privacy mode");
    73bc:	4b0b      	ldr	r3, [pc, #44]	; (73ec <bt_id_add+0x224>)
    73be:	681b      	ldr	r3, [r3, #0]
    73c0:	075b      	lsls	r3, r3, #29
    73c2:	d095      	beq.n	72f0 <bt_id_add+0x128>
    73c4:	2301      	movs	r3, #1
    73c6:	f04f 0200 	mov.w	r2, #0
    73ca:	f363 0202 	bfi	r2, r3, #0, #3
    73ce:	4908      	ldr	r1, [pc, #32]	; (73f0 <bt_id_add+0x228>)
    73d0:	4b08      	ldr	r3, [pc, #32]	; (73f4 <bt_id_add+0x22c>)
    73d2:	4810      	ldr	r0, [pc, #64]	; (7414 <bt_id_add+0x24c>)
    73d4:	1a5b      	subs	r3, r3, r1
    73d6:	f36f 02c5 	bfc	r2, #3, #3
    73da:	08db      	lsrs	r3, r3, #3
    73dc:	f363 128f 	bfi	r2, r3, #6, #10
    73e0:	4906      	ldr	r1, [pc, #24]	; (73fc <bt_id_add+0x234>)
    73e2:	e746      	b.n	7272 <bt_id_add+0xaa>
    73e4:	2000cc80 	.word	0x2000cc80
    73e8:	2000ccf0 	.word	0x2000ccf0
    73ec:	2000d74c 	.word	0x2000d74c
    73f0:	0002cff8 	.word	0x0002cff8
    73f4:	0002d070 	.word	0x0002d070
    73f8:	0002eb7d 	.word	0x0002eb7d
    73fc:	0002e935 	.word	0x0002e935
    7400:	0002eba6 	.word	0x0002eba6
    7404:	0002ebdb 	.word	0x0002ebdb
    7408:	0002ebff 	.word	0x0002ebff
    740c:	0002ec23 	.word	0x0002ec23
    7410:	0002e921 	.word	0x0002e921
    7414:	0002ec51 	.word	0x0002ec51

00007418 <bt_id_del>:
{
    7418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    741c:	4d55      	ldr	r5, [pc, #340]	; (7574 <bt_id_del+0x15c>)
    741e:	f895 20a4 	ldrb.w	r2, [r5, #164]	; 0xa4
    7422:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
{
    7426:	4606      	mov	r6, r0
    7428:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size ||
    742a:	b112      	cbz	r2, 7432 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    742c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    742e:	4293      	cmp	r3, r2
    7430:	dd04      	ble.n	743c <bt_id_del+0x24>
		bt_dev.le.rl_entries--;
    7432:	3b01      	subs	r3, #1
    7434:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
}
    7438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    743c:	2103      	movs	r1, #3
    743e:	2000      	movs	r0, #0
    7440:	f002 ffc8 	bl	a3d4 <bt_conn_lookup_state_le>
	if (conn) {
    7444:	4680      	mov	r8, r0
    7446:	b170      	cbz	r0, 7466 <bt_id_del+0x4e>
    7448:	f105 0070 	add.w	r0, r5, #112	; 0x70
    744c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7450:	f7ff fb2f 	bl	6ab2 <atomic_or>
		keys->flags |= BT_KEYS_ID_PENDING_DEL;
    7454:	7a73      	ldrb	r3, [r6, #9]
    7456:	f043 0308 	orr.w	r3, r3, #8
    745a:	7273      	strb	r3, [r6, #9]
		bt_conn_unref(conn);
    745c:	4640      	mov	r0, r8
}
    745e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    7462:	f002 bfd9 	b.w	a418 <bt_conn_unref>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    7466:	2106      	movs	r1, #6
    7468:	f105 0070 	add.w	r0, r5, #112	; 0x70
    746c:	f7ff fc48 	bl	6d00 <atomic_test_bit>
	if (adv_enabled) {
    7470:	4607      	mov	r7, r0
    7472:	b110      	cbz	r0, 747a <bt_id_del+0x62>
		set_advertise_enable(false);
    7474:	4640      	mov	r0, r8
    7476:	f7ff fd5b 	bl	6f30 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    747a:	210a      	movs	r1, #10
    747c:	483e      	ldr	r0, [pc, #248]	; (7578 <bt_id_del+0x160>)
    747e:	f7ff fc3f 	bl	6d00 <atomic_test_bit>
	if (scan_enabled) {
    7482:	4680      	mov	r8, r0
    7484:	b110      	cbz	r0, 748c <bt_id_del+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    7486:	2000      	movs	r0, #0
    7488:	f7ff fd1c 	bl	6ec4 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    748c:	2000      	movs	r0, #0
    748e:	f7ff fd00 	bl	6e92 <addr_res_enable>
	if (err) {
    7492:	4605      	mov	r5, r0
    7494:	b340      	cbz	r0, 74e8 <bt_id_del+0xd0>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    7496:	4b39      	ldr	r3, [pc, #228]	; (757c <bt_id_del+0x164>)
    7498:	681b      	ldr	r3, [r3, #0]
    749a:	075a      	lsls	r2, r3, #29
    749c:	d011      	beq.n	74c2 <bt_id_del+0xaa>
    749e:	2201      	movs	r2, #1
    74a0:	f04f 0300 	mov.w	r3, #0
    74a4:	f362 0302 	bfi	r3, r2, #0, #3
    74a8:	4935      	ldr	r1, [pc, #212]	; (7580 <bt_id_del+0x168>)
    74aa:	4a36      	ldr	r2, [pc, #216]	; (7584 <bt_id_del+0x16c>)
    74ac:	1a52      	subs	r2, r2, r1
    74ae:	08d2      	lsrs	r2, r2, #3
    74b0:	f36f 03c5 	bfc	r3, #3, #3
    74b4:	f362 138f 	bfi	r3, r2, #6, #10
    74b8:	4933      	ldr	r1, [pc, #204]	; (7588 <bt_id_del+0x170>)
    74ba:	4602      	mov	r2, r0
    74bc:	4833      	ldr	r0, [pc, #204]	; (758c <bt_id_del+0x174>)
    74be:	f7fa fc5f 	bl	1d80 <log_2>
	if (bt_dev.le.rl_entries) {
    74c2:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    74c6:	b113      	cbz	r3, 74ce <bt_id_del+0xb6>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    74c8:	2001      	movs	r0, #1
    74ca:	f7ff fce2 	bl	6e92 <addr_res_enable>
	if (scan_enabled) {
    74ce:	f1b8 0f00 	cmp.w	r8, #0
    74d2:	d002      	beq.n	74da <bt_id_del+0xc2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    74d4:	2001      	movs	r0, #1
    74d6:	f7ff fcf5 	bl	6ec4 <set_le_scan_enable>
	if (adv_enabled) {
    74da:	2f00      	cmp	r7, #0
    74dc:	d0ac      	beq.n	7438 <bt_id_del+0x20>
		set_advertise_enable(true);
    74de:	2001      	movs	r0, #1
}
    74e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		set_advertise_enable(true);
    74e4:	f7ff bd24 	b.w	6f30 <set_advertise_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    74e8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    74ec:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    74f0:	429a      	cmp	r2, r3
    74f2:	d20c      	bcs.n	750e <bt_id_del+0xf6>
		bt_dev.le.rl_entries--;
    74f4:	3b01      	subs	r3, #1
    74f6:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    74fa:	8973      	ldrh	r3, [r6, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    74fc:	4924      	ldr	r1, [pc, #144]	; (7590 <bt_id_del+0x178>)
		keys->keys &= ~BT_KEYS_IRK;
    74fe:	f023 0302 	bic.w	r3, r3, #2
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7502:	4602      	mov	r2, r0
		keys->keys &= ~BT_KEYS_IRK;
    7504:	8173      	strh	r3, [r6, #10]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    7506:	2002      	movs	r0, #2
    7508:	f008 ff34 	bl	10374 <bt_keys_foreach>
    750c:	e7d9      	b.n	74c2 <bt_id_del+0xaa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    750e:	2107      	movs	r1, #7
    7510:	f242 0028 	movw	r0, #8232	; 0x2028
    7514:	f7ff fc22 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    7518:	4681      	mov	r9, r0
    751a:	2800      	cmp	r0, #0
    751c:	d0d1      	beq.n	74c2 <bt_id_del+0xaa>
	cp = net_buf_add(buf, sizeof(*cp));
    751e:	2107      	movs	r1, #7
    7520:	3008      	adds	r0, #8
    7522:	f016 fff3 	bl	1e50c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    7526:	1c71      	adds	r1, r6, #1
    7528:	f7ff fac0 	bl	6aac <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    752c:	462a      	mov	r2, r5
    752e:	4649      	mov	r1, r9
    7530:	f242 0028 	movw	r0, #8232	; 0x2028
    7534:	f7ff fc42 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    7538:	b1a8      	cbz	r0, 7566 <bt_id_del+0x14e>
		BT_ERR("Failed to remove IRK from controller");
    753a:	4b10      	ldr	r3, [pc, #64]	; (757c <bt_id_del+0x164>)
    753c:	681b      	ldr	r3, [r3, #0]
    753e:	075b      	lsls	r3, r3, #29
    7540:	d0bf      	beq.n	74c2 <bt_id_del+0xaa>
    7542:	2301      	movs	r3, #1
    7544:	f04f 0200 	mov.w	r2, #0
    7548:	f363 0202 	bfi	r2, r3, #0, #3
    754c:	490c      	ldr	r1, [pc, #48]	; (7580 <bt_id_del+0x168>)
    754e:	4b0d      	ldr	r3, [pc, #52]	; (7584 <bt_id_del+0x16c>)
    7550:	4810      	ldr	r0, [pc, #64]	; (7594 <bt_id_del+0x17c>)
    7552:	1a5b      	subs	r3, r3, r1
    7554:	f365 02c5 	bfi	r2, r5, #3, #3
    7558:	08db      	lsrs	r3, r3, #3
    755a:	f363 128f 	bfi	r2, r3, #6, #10
    755e:	490a      	ldr	r1, [pc, #40]	; (7588 <bt_id_del+0x170>)
    7560:	f7fa fbfa 	bl	1d58 <log_1>
    7564:	e7ad      	b.n	74c2 <bt_id_del+0xaa>
	bt_dev.le.rl_entries--;
    7566:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    756a:	3b01      	subs	r3, #1
    756c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    7570:	e7a7      	b.n	74c2 <bt_id_del+0xaa>
    7572:	bf00      	nop
    7574:	2000cc80 	.word	0x2000cc80
    7578:	2000ccf0 	.word	0x2000ccf0
    757c:	2000d74c 	.word	0x2000d74c
    7580:	0002cff8 	.word	0x0002cff8
    7584:	0002d070 	.word	0x0002d070
    7588:	0002e93f 	.word	0x0002e93f
    758c:	0002eca2 	.word	0x0002eca2
    7590:	00006e89 	.word	0x00006e89
    7594:	0002ecd3 	.word	0x0002ecd3

00007598 <update_pending_id>:
	if (keys->flags & BT_KEYS_ID_PENDING_ADD) {
    7598:	7a43      	ldrb	r3, [r0, #9]
    759a:	0759      	lsls	r1, r3, #29
    759c:	d504      	bpl.n	75a8 <update_pending_id+0x10>
		keys->flags &= ~BT_KEYS_ID_PENDING_ADD;
    759e:	f023 0304 	bic.w	r3, r3, #4
    75a2:	7243      	strb	r3, [r0, #9]
		bt_id_add(keys);
    75a4:	f7ff be10 	b.w	71c8 <bt_id_add>
	if (keys->flags & BT_KEYS_ID_PENDING_DEL) {
    75a8:	0719      	lsls	r1, r3, #28
    75aa:	d504      	bpl.n	75b6 <update_pending_id+0x1e>
		keys->flags &= ~BT_KEYS_ID_PENDING_DEL;
    75ac:	f023 0308 	bic.w	r3, r3, #8
    75b0:	7243      	strb	r3, [r0, #9]
		bt_id_del(keys);
    75b2:	f7ff bf31 	b.w	7418 <bt_id_del>
}
    75b6:	4770      	bx	lr

000075b8 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    75b8:	2301      	movs	r3, #1
{
    75ba:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    75bc:	2106      	movs	r1, #6
{
    75be:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    75c0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    75c4:	f014 fcfe 	bl	1bfc4 <bt_rand>
	if (err) {
    75c8:	b918      	cbnz	r0, 75d2 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    75ca:	79a3      	ldrb	r3, [r4, #6]
    75cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
    75d0:	71a3      	strb	r3, [r4, #6]
}
    75d2:	bd10      	pop	{r4, pc}

000075d4 <id_create.isra.30>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    75d4:	b530      	push	{r4, r5, lr}
    75d6:	4d14      	ldr	r5, [pc, #80]	; (7628 <id_create.isra.30+0x54>)
    75d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    75dc:	b085      	sub	sp, #20
    75de:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    75e0:	460c      	mov	r4, r1
    75e2:	b179      	cbz	r1, 7604 <id_create.isra.30+0x30>
    75e4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    75e6:	2207      	movs	r2, #7
    75e8:	4669      	mov	r1, sp
    75ea:	4620      	mov	r0, r4
    75ec:	9300      	str	r3, [sp, #0]
    75ee:	f8cd 3003 	str.w	r3, [sp, #3]
    75f2:	f7fe fc22 	bl	5e3a <memcmp>
    75f6:	b128      	cbz	r0, 7604 <id_create.isra.30+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    75f8:	4621      	mov	r1, r4
    75fa:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    75fc:	f7ff fa56 	bl	6aac <bt_addr_le_copy>
}
    7600:	b005      	add	sp, #20
    7602:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    7604:	a802      	add	r0, sp, #8
    7606:	f7ff ffd7 	bl	75b8 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    760a:	a802      	add	r0, sp, #8
    760c:	f7ff fb5e 	bl	6ccc <id_find>
    7610:	2800      	cmp	r0, #0
    7612:	daf7      	bge.n	7604 <id_create.isra.30+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7614:	a902      	add	r1, sp, #8
    7616:	4628      	mov	r0, r5
    7618:	f7ff fa48 	bl	6aac <bt_addr_le_copy>
		if (addr) {
    761c:	2c00      	cmp	r4, #0
    761e:	d0ef      	beq.n	7600 <id_create.isra.30+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7620:	4629      	mov	r1, r5
    7622:	4620      	mov	r0, r4
    7624:	e7ea      	b.n	75fc <id_create.isra.30+0x28>
    7626:	bf00      	nop
    7628:	2000cc80 	.word	0x2000cc80

0000762c <bt_dev_show_info>:
{
    762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7630:	4b48      	ldr	r3, [pc, #288]	; (7754 <bt_dev_show_info+0x128>)
    7632:	4d49      	ldr	r5, [pc, #292]	; (7758 <bt_dev_show_info+0x12c>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7634:	4f49      	ldr	r7, [pc, #292]	; (775c <bt_dev_show_info+0x130>)
    7636:	4c4a      	ldr	r4, [pc, #296]	; (7760 <bt_dev_show_info+0x134>)
    7638:	1aed      	subs	r5, r5, r3
    763a:	683b      	ldr	r3, [r7, #0]
    763c:	f003 0307 	and.w	r3, r3, #7
    7640:	2b02      	cmp	r3, #2
{
    7642:	b089      	sub	sp, #36	; 0x24
    7644:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7648:	d91e      	bls.n	7688 <bt_dev_show_info+0x5c>
    764a:	2303      	movs	r3, #3
    764c:	f04f 0600 	mov.w	r6, #0
    7650:	4a44      	ldr	r2, [pc, #272]	; (7764 <bt_dev_show_info+0x138>)
    7652:	f894 9007 	ldrb.w	r9, [r4, #7]
    7656:	f363 0602 	bfi	r6, r3, #0, #3
    765a:	4b43      	ldr	r3, [pc, #268]	; (7768 <bt_dev_show_info+0x13c>)
    765c:	4620      	mov	r0, r4
    765e:	f1b9 0f01 	cmp.w	r9, #1
    7662:	bf94      	ite	ls
    7664:	4691      	movls	r9, r2
    7666:	4699      	movhi	r9, r3
    7668:	f7ff f916 	bl	6898 <bt_addr_le_str_real>
    766c:	f7fa fd06 	bl	207c <log_strdup>
    7670:	f36f 06c5 	bfc	r6, #3, #3
    7674:	f365 168f 	bfi	r6, r5, #6, #10
    7678:	4603      	mov	r3, r0
    767a:	f8ad 6000 	strh.w	r6, [sp]
    767e:	464a      	mov	r2, r9
    7680:	493a      	ldr	r1, [pc, #232]	; (776c <bt_dev_show_info+0x140>)
    7682:	483b      	ldr	r0, [pc, #236]	; (7770 <bt_dev_show_info+0x144>)
    7684:	f7fa fb94 	bl	1db0 <log_3>
		BT_INFO("Identity[%d]: %s",
    7688:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 776c <bt_dev_show_info+0x140>
    768c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 777c <bt_dev_show_info+0x150>
{
    7690:	2601      	movs	r6, #1
		BT_INFO("Identity[%d]: %s",
    7692:	f04f 0903 	mov.w	r9, #3
	for (i = 1; i < bt_dev.id_count; i++) {
    7696:	79e2      	ldrb	r2, [r4, #7]
    7698:	683b      	ldr	r3, [r7, #0]
    769a:	42b2      	cmp	r2, r6
    769c:	f003 0307 	and.w	r3, r3, #7
    76a0:	dc3e      	bgt.n	7720 <bt_dev_show_info+0xf4>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    76a2:	2b02      	cmp	r3, #2
    76a4:	d91b      	bls.n	76de <bt_dev_show_info+0xb2>
    76a6:	f894 8010 	ldrb.w	r8, [r4, #16]
    76aa:	2303      	movs	r3, #3
    76ac:	f04f 0600 	mov.w	r6, #0
    76b0:	f363 0602 	bfi	r6, r3, #0, #3
    76b4:	4640      	mov	r0, r8
    76b6:	4b2d      	ldr	r3, [pc, #180]	; (776c <bt_dev_show_info+0x140>)
    76b8:	9303      	str	r3, [sp, #12]
    76ba:	f7ff f9db 	bl	6a74 <ver_str>
    76be:	f36f 06c5 	bfc	r6, #3, #3
    76c2:	8a63      	ldrh	r3, [r4, #18]
    76c4:	9306      	str	r3, [sp, #24]
    76c6:	f365 168f 	bfi	r6, r5, #6, #10
    76ca:	8ae3      	ldrh	r3, [r4, #22]
    76cc:	9307      	str	r3, [sp, #28]
    76ce:	e9cd 0804 	strd	r0, r8, [sp, #16]
    76d2:	4633      	mov	r3, r6
    76d4:	2205      	movs	r2, #5
    76d6:	a903      	add	r1, sp, #12
    76d8:	4826      	ldr	r0, [pc, #152]	; (7774 <bt_dev_show_info+0x148>)
    76da:	f7fa fb84 	bl	1de6 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    76de:	683b      	ldr	r3, [r7, #0]
    76e0:	f003 0307 	and.w	r3, r3, #7
    76e4:	2b02      	cmp	r3, #2
    76e6:	d918      	bls.n	771a <bt_dev_show_info+0xee>
    76e8:	2303      	movs	r3, #3
    76ea:	f04f 0600 	mov.w	r6, #0
    76ee:	f363 0602 	bfi	r6, r3, #0, #3
    76f2:	f36f 06c5 	bfc	r6, #3, #3
    76f6:	f365 168f 	bfi	r6, r5, #6, #10
    76fa:	7c65      	ldrb	r5, [r4, #17]
    76fc:	4b1b      	ldr	r3, [pc, #108]	; (776c <bt_dev_show_info+0x140>)
    76fe:	9303      	str	r3, [sp, #12]
    7700:	4628      	mov	r0, r5
    7702:	f7ff f9b7 	bl	6a74 <ver_str>
    7706:	8aa3      	ldrh	r3, [r4, #20]
    7708:	9306      	str	r3, [sp, #24]
    770a:	e9cd 0504 	strd	r0, r5, [sp, #16]
    770e:	4633      	mov	r3, r6
    7710:	2204      	movs	r2, #4
    7712:	a903      	add	r1, sp, #12
    7714:	4818      	ldr	r0, [pc, #96]	; (7778 <bt_dev_show_info+0x14c>)
    7716:	f7fa fb66 	bl	1de6 <log_n>
}
    771a:	b009      	add	sp, #36	; 0x24
    771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
    7720:	2b02      	cmp	r3, #2
    7722:	d914      	bls.n	774e <bt_dev_show_info+0x122>
    7724:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    7728:	4420      	add	r0, r4
    772a:	f7ff f8b5 	bl	6898 <bt_addr_le_str_real>
    772e:	f7fa fca5 	bl	207c <log_strdup>
    7732:	f369 0802 	bfi	r8, r9, #0, #3
    7736:	f36f 08c5 	bfc	r8, #3, #3
    773a:	f365 188f 	bfi	r8, r5, #6, #10
    773e:	4603      	mov	r3, r0
    7740:	f8ad 8000 	strh.w	r8, [sp]
    7744:	4632      	mov	r2, r6
    7746:	4651      	mov	r1, sl
    7748:	4658      	mov	r0, fp
    774a:	f7fa fb31 	bl	1db0 <log_3>
	for (i = 1; i < bt_dev.id_count; i++) {
    774e:	3601      	adds	r6, #1
    7750:	e7a1      	b.n	7696 <bt_dev_show_info+0x6a>
    7752:	bf00      	nop
    7754:	0002cff8 	.word	0x0002cff8
    7758:	0002d070 	.word	0x0002d070
    775c:	2000d74c 	.word	0x2000d74c
    7760:	2000cc80 	.word	0x2000cc80
    7764:	000340c0 	.word	0x000340c0
    7768:	0002ea81 	.word	0x0002ea81
    776c:	0002ea05 	.word	0x0002ea05
    7770:	0002ea85 	.word	0x0002ea85
    7774:	0002eaad 	.word	0x0002eaad
    7778:	0002eaef 	.word	0x0002eaef
    777c:	0002ea98 	.word	0x0002ea98

00007780 <bt_send>:
	return bt_dev.drv->send(buf);
    7780:	4b02      	ldr	r3, [pc, #8]	; (778c <bt_send+0xc>)
    7782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    7786:	691b      	ldr	r3, [r3, #16]
    7788:	4718      	bx	r3
    778a:	bf00      	nop
    778c:	2000cc80 	.word	0x2000cc80

00007790 <bt_hci_cmd_send>:
{
    7790:	b538      	push	{r3, r4, r5, lr}
    7792:	4604      	mov	r4, r0
	if (!buf) {
    7794:	460d      	mov	r5, r1
    7796:	b919      	cbnz	r1, 77a0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    7798:	f7ff fae0 	bl	6d5c <bt_hci_cmd_create>
		if (!buf) {
    779c:	4605      	mov	r5, r0
    779e:	b348      	cbz	r0, 77f4 <bt_hci_cmd_send+0x64>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    77a0:	f640 4335 	movw	r3, #3125	; 0xc35
    77a4:	429c      	cmp	r4, r3
    77a6:	d11f      	bne.n	77e8 <bt_hci_cmd_send+0x58>
		err = bt_send(buf);
    77a8:	4628      	mov	r0, r5
    77aa:	f7ff ffe9 	bl	7780 <bt_send>
		if (err) {
    77ae:	4604      	mov	r4, r0
    77b0:	b1c0      	cbz	r0, 77e4 <bt_hci_cmd_send+0x54>
			BT_ERR("Unable to send to driver (err %d)", err);
    77b2:	4b12      	ldr	r3, [pc, #72]	; (77fc <bt_hci_cmd_send+0x6c>)
    77b4:	681b      	ldr	r3, [r3, #0]
    77b6:	075b      	lsls	r3, r3, #29
    77b8:	d011      	beq.n	77de <bt_hci_cmd_send+0x4e>
    77ba:	2201      	movs	r2, #1
    77bc:	f04f 0300 	mov.w	r3, #0
    77c0:	f362 0302 	bfi	r3, r2, #0, #3
    77c4:	490e      	ldr	r1, [pc, #56]	; (7800 <bt_hci_cmd_send+0x70>)
    77c6:	4a0f      	ldr	r2, [pc, #60]	; (7804 <bt_hci_cmd_send+0x74>)
    77c8:	1a52      	subs	r2, r2, r1
    77ca:	08d2      	lsrs	r2, r2, #3
    77cc:	f36f 03c5 	bfc	r3, #3, #3
    77d0:	f362 138f 	bfi	r3, r2, #6, #10
    77d4:	490c      	ldr	r1, [pc, #48]	; (7808 <bt_hci_cmd_send+0x78>)
    77d6:	4602      	mov	r2, r0
    77d8:	480c      	ldr	r0, [pc, #48]	; (780c <bt_hci_cmd_send+0x7c>)
    77da:	f7fa fad1 	bl	1d80 <log_2>
			net_buf_unref(buf);
    77de:	4628      	mov	r0, r5
    77e0:	f016 fe36 	bl	1e450 <net_buf_unref>
}
    77e4:	4620      	mov	r0, r4
    77e6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    77e8:	4629      	mov	r1, r5
    77ea:	4809      	ldr	r0, [pc, #36]	; (7810 <bt_hci_cmd_send+0x80>)
    77ec:	f016 fe23 	bl	1e436 <net_buf_put>
	return 0;
    77f0:	2400      	movs	r4, #0
    77f2:	e7f7      	b.n	77e4 <bt_hci_cmd_send+0x54>
			return -ENOBUFS;
    77f4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    77f8:	e7f4      	b.n	77e4 <bt_hci_cmd_send+0x54>
    77fa:	bf00      	nop
    77fc:	2000d74c 	.word	0x2000d74c
    7800:	0002cff8 	.word	0x0002cff8
    7804:	0002d070 	.word	0x0002d070
    7808:	0002e859 	.word	0x0002e859
    780c:	0002eb57 	.word	0x0002eb57
    7810:	2000cd44 	.word	0x2000cd44

00007814 <start_le_scan>:
{
    7814:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7816:	4605      	mov	r5, r0
    7818:	460e      	mov	r6, r1
    781a:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    781c:	2100      	movs	r1, #0
    781e:	2207      	movs	r2, #7
    7820:	4668      	mov	r0, sp
    7822:	f7fe fb5e 	bl	5ee2 <memset>
		set_param.addr_type =  bt_dev.id_addr[0].type;
    7826:	4825      	ldr	r0, [pc, #148]	; (78bc <start_le_scan+0xa8>)
	set_param.scan_type = scan_type;
    7828:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    782c:	2300      	movs	r3, #0
    782e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    7832:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr[0].type;
    7834:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    7836:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    783a:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr[0].type;
    783e:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    7842:	d12a      	bne.n	789a <start_le_scan+0x86>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    7844:	2106      	movs	r1, #6
    7846:	3070      	adds	r0, #112	; 0x70
    7848:	f7ff fa5a 	bl	6d00 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    784c:	bb28      	cbnz	r0, 789a <start_le_scan+0x86>
			err = le_set_private_addr(BT_ID_DEFAULT);
    784e:	f7ff fbc7 	bl	6fe0 <le_set_private_addr.isra.26>
			if (err) {
    7852:	4604      	mov	r4, r0
    7854:	b9f0      	cbnz	r0, 7894 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    7856:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    785a:	2107      	movs	r1, #7
    785c:	f242 000b 	movw	r0, #8203	; 0x200b
    7860:	f7ff fa7c 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    7864:	4604      	mov	r4, r0
    7866:	b330      	cbz	r0, 78b6 <start_le_scan+0xa2>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    7868:	2207      	movs	r2, #7
    786a:	4669      	mov	r1, sp
    786c:	3008      	adds	r0, #8
    786e:	f016 fe53 	bl	1e518 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    7872:	4621      	mov	r1, r4
    7874:	f242 000b 	movw	r0, #8203	; 0x200b
    7878:	f7ff ff8a 	bl	7790 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    787c:	2001      	movs	r0, #1
    787e:	f7ff fb21 	bl	6ec4 <set_le_scan_enable>
	if (err) {
    7882:	4604      	mov	r4, r0
    7884:	b930      	cbnz	r0, 7894 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    7886:	2d01      	cmp	r5, #1
    7888:	d10f      	bne.n	78aa <start_le_scan+0x96>
    788a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    788e:	480c      	ldr	r0, [pc, #48]	; (78c0 <start_le_scan+0xac>)
    7890:	f7ff f90f 	bl	6ab2 <atomic_or>
}
    7894:	4620      	mov	r0, r4
    7896:	b002      	add	sp, #8
    7898:	bd70      	pop	{r4, r5, r6, pc}
		} else if (set_param.addr_type == BT_ADDR_LE_RANDOM) {
    789a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    789e:	2b01      	cmp	r3, #1
    78a0:	d1db      	bne.n	785a <start_le_scan+0x46>
			set_random_address(&bt_dev.id_addr[0].a);
    78a2:	4808      	ldr	r0, [pc, #32]	; (78c4 <start_le_scan+0xb0>)
    78a4:	f7ff fb6e 	bl	6f84 <set_random_address>
    78a8:	e7d7      	b.n	785a <start_le_scan+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    78aa:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    78ae:	4804      	ldr	r0, [pc, #16]	; (78c0 <start_le_scan+0xac>)
    78b0:	f7ff f90e 	bl	6ad0 <atomic_and>
    78b4:	e7ee      	b.n	7894 <start_le_scan+0x80>
		return -ENOBUFS;
    78b6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    78ba:	e7eb      	b.n	7894 <start_le_scan+0x80>
    78bc:	2000cc80 	.word	0x2000cc80
    78c0:	2000ccf0 	.word	0x2000ccf0
    78c4:	2000cc81 	.word	0x2000cc81

000078c8 <bt_le_scan_update>:
{
    78c8:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    78ca:	210b      	movs	r1, #11
{
    78cc:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    78ce:	4816      	ldr	r0, [pc, #88]	; (7928 <bt_le_scan_update+0x60>)
    78d0:	f7ff fa16 	bl	6d00 <atomic_test_bit>
    78d4:	4603      	mov	r3, r0
    78d6:	b108      	cbz	r0, 78dc <bt_le_scan_update+0x14>
		return 0;
    78d8:	2000      	movs	r0, #0
}
    78da:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    78dc:	210a      	movs	r1, #10
    78de:	4812      	ldr	r0, [pc, #72]	; (7928 <bt_le_scan_update+0x60>)
    78e0:	f7ff fa0e 	bl	6d00 <atomic_test_bit>
    78e4:	b9d0      	cbnz	r0, 791c <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    78e6:	2101      	movs	r1, #1
    78e8:	2000      	movs	r0, #0
    78ea:	f002 fd73 	bl	a3d4 <bt_conn_lookup_state_le>
		if (!conn) {
    78ee:	4604      	mov	r4, r0
    78f0:	2800      	cmp	r0, #0
    78f2:	d0f1      	beq.n	78d8 <bt_le_scan_update+0x10>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    78f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    78f8:	480b      	ldr	r0, [pc, #44]	; (7928 <bt_le_scan_update+0x60>)
    78fa:	f7ff f8da 	bl	6ab2 <atomic_or>
		bt_conn_unref(conn);
    78fe:	4620      	mov	r0, r4
    7900:	f002 fd8a 	bl	a418 <bt_conn_unref>
			window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    7904:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    7906:	bf15      	itete	ne
    7908:	2230      	movne	r2, #48	; 0x30
    790a:	2212      	moveq	r2, #18
    790c:	2160      	movne	r1, #96	; 0x60
    790e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    7912:	2000      	movs	r0, #0
}
    7914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    7918:	f7ff bf7c 	b.w	7814 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    791c:	4618      	mov	r0, r3
    791e:	f7ff fad1 	bl	6ec4 <set_le_scan_enable>
		if (err) {
    7922:	2800      	cmp	r0, #0
    7924:	d0df      	beq.n	78e6 <bt_le_scan_update+0x1e>
    7926:	e7d8      	b.n	78da <bt_le_scan_update+0x12>
    7928:	2000ccf0 	.word	0x2000ccf0

0000792c <hci_le_set_phy.isra.35>:
static int hci_le_set_phy(struct bt_conn *conn)
    792c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    792e:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    7930:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    7932:	f242 0032 	movw	r0, #8242	; 0x2032
    7936:	f7ff fa11 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    793a:	4605      	mov	r5, r0
    793c:	b198      	cbz	r0, 7966 <hci_le_set_phy.isra.35+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    793e:	2107      	movs	r1, #7
    7940:	3008      	adds	r0, #8
    7942:	f016 fde3 	bl	1e50c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7946:	8823      	ldrh	r3, [r4, #0]
    7948:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    794a:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    794c:	2302      	movs	r3, #2
	cp->all_phys = 0;
    794e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    7950:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    7952:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    7954:	7144      	strb	r4, [r0, #5]
    7956:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    7958:	4629      	mov	r1, r5
    795a:	f242 0032 	movw	r0, #8242	; 0x2032
    795e:	f7ff ff17 	bl	7790 <bt_hci_cmd_send>
	return 0;
    7962:	4620      	mov	r0, r4
}
    7964:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    7966:	f06f 0036 	mvn.w	r0, #54	; 0x36
    796a:	e7fb      	b.n	7964 <hci_le_set_phy.isra.35+0x38>

0000796c <hci_le_set_data_len.isra.36>:
static int hci_le_set_data_len(struct bt_conn *conn)
    796c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    796e:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    7970:	aa01      	add	r2, sp, #4
    7972:	2100      	movs	r1, #0
    7974:	f242 002f 	movw	r0, #8239	; 0x202f
    7978:	f7ff fa20 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    797c:	b9d8      	cbnz	r0, 79b6 <hci_le_set_data_len.isra.36+0x4a>
	rp = (void *)rsp->data;
    797e:	9801      	ldr	r0, [sp, #4]
    7980:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    7982:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    7986:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    798a:	f016 fd61 	bl	1e450 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    798e:	2106      	movs	r1, #6
    7990:	f242 0022 	movw	r0, #8226	; 0x2022
    7994:	f7ff f9e2 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    7998:	4604      	mov	r4, r0
    799a:	b170      	cbz	r0, 79ba <hci_le_set_data_len.isra.36+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    799c:	2106      	movs	r1, #6
    799e:	3008      	adds	r0, #8
    79a0:	f016 fdb4 	bl	1e50c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    79a4:	883b      	ldrh	r3, [r7, #0]
    79a6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    79a8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    79aa:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    79ac:	4621      	mov	r1, r4
    79ae:	f242 0022 	movw	r0, #8226	; 0x2022
    79b2:	f7ff feed 	bl	7790 <bt_hci_cmd_send>
}
    79b6:	b003      	add	sp, #12
    79b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    79ba:	f06f 0036 	mvn.w	r0, #54	; 0x36
    79be:	e7fa      	b.n	79b6 <hci_le_set_data_len.isra.36+0x4a>

000079c0 <le_enh_conn_complete>:
{
    79c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    79c2:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
	u16_t handle = sys_le16_to_cpu(evt->handle);
    79c6:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    79ca:	b085      	sub	sp, #20
    79cc:	4605      	mov	r5, r0
    79ce:	487c      	ldr	r0, [pc, #496]	; (7bc0 <le_enh_conn_complete+0x200>)
    79d0:	f7ff f87e 	bl	6ad0 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    79d4:	0404      	lsls	r4, r0, #16
	u16_t handle = sys_le16_to_cpu(evt->handle);
    79d6:	b2be      	uxth	r6, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    79d8:	d504      	bpl.n	79e4 <le_enh_conn_complete+0x24>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id, NULL);
    79da:	2200      	movs	r2, #0
    79dc:	4979      	ldr	r1, [pc, #484]	; (7bc4 <le_enh_conn_complete+0x204>)
    79de:	2002      	movs	r0, #2
    79e0:	f008 fcc8 	bl	10374 <bt_keys_foreach>
		if (evt->status) {
    79e4:	782b      	ldrb	r3, [r5, #0]
    79e6:	b313      	cbz	r3, 7a2e <le_enh_conn_complete+0x6e>
			conn = find_pending_connect(NULL);
    79e8:	2000      	movs	r0, #0
    79ea:	f7ff f8e1 	bl	6bb0 <find_pending_connect>
			if (!conn) {
    79ee:	4604      	mov	r4, r0
    79f0:	2800      	cmp	r0, #0
    79f2:	d05b      	beq.n	7aac <le_enh_conn_complete+0xec>
			conn->err = evt->status;
    79f4:	782b      	ldrb	r3, [r5, #0]
    79f6:	7303      	strb	r3, [r0, #12]
		if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    79f8:	2b3c      	cmp	r3, #60	; 0x3c
    79fa:	d104      	bne.n	7a06 <le_enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    79fc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7a00:	486f      	ldr	r0, [pc, #444]	; (7bc0 <le_enh_conn_complete+0x200>)
    7a02:	f7ff f865 	bl	6ad0 <atomic_and>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7a06:	2100      	movs	r1, #0
    7a08:	4620      	mov	r0, r4
    7a0a:	f002 fba3 	bl	a154 <bt_conn_set_state>
			if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    7a0e:	2100      	movs	r1, #0
    7a10:	1d20      	adds	r0, r4, #4
    7a12:	f7ff f975 	bl	6d00 <atomic_test_bit>
    7a16:	b118      	cbz	r0, 7a20 <le_enh_conn_complete+0x60>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7a18:	2101      	movs	r1, #1
    7a1a:	4620      	mov	r0, r4
    7a1c:	f002 fb9a 	bl	a154 <bt_conn_set_state>
	bt_conn_unref(conn);
    7a20:	4620      	mov	r0, r4
    7a22:	f002 fcf9 	bl	a418 <bt_conn_unref>
		bt_le_scan_update(false);
    7a26:	2000      	movs	r0, #0
    7a28:	f7ff ff4e 	bl	78c8 <bt_le_scan_update>
    7a2c:	e03e      	b.n	7aac <le_enh_conn_complete+0xec>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7a2e:	1d2c      	adds	r4, r5, #4
    7a30:	4621      	mov	r1, r4
    7a32:	a802      	add	r0, sp, #8
    7a34:	f7ff f83a 	bl	6aac <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7a38:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7a3c:	3b02      	subs	r3, #2
    7a3e:	b2db      	uxtb	r3, r3
    7a40:	2b01      	cmp	r3, #1
    7a42:	d835      	bhi.n	7ab0 <le_enh_conn_complete+0xf0>
	memcpy(dst, src, sizeof(*dst));
    7a44:	2206      	movs	r2, #6
    7a46:	f105 0111 	add.w	r1, r5, #17
    7a4a:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7a4e:	f88d 3008 	strb.w	r3, [sp, #8]
    7a52:	f7fe fa19 	bl	5e88 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    7a56:	2301      	movs	r3, #1
    7a58:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(&id_addr);
    7a5c:	a802      	add	r0, sp, #8
    7a5e:	f7ff f8a7 	bl	6bb0 <find_pending_connect>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    7a62:	78eb      	ldrb	r3, [r5, #3]
    7a64:	2b01      	cmp	r3, #1
	conn = find_pending_connect(&id_addr);
    7a66:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    7a68:	d109      	bne.n	7a7e <le_enh_conn_complete+0xbe>
    7a6a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7a6e:	4854      	ldr	r0, [pc, #336]	; (7bc0 <le_enh_conn_complete+0x200>)
    7a70:	f7ff f82e 	bl	6ad0 <atomic_and>
		if (!conn) {
    7a74:	bb0c      	cbnz	r4, 7aba <le_enh_conn_complete+0xfa>
			conn = bt_conn_add_le(&id_addr);
    7a76:	a802      	add	r0, sp, #8
    7a78:	f002 fb36 	bl	a0e8 <bt_conn_add_le>
    7a7c:	4604      	mov	r4, r0
	if (!conn) {
    7a7e:	b9e4      	cbnz	r4, 7aba <le_enh_conn_complete+0xfa>
		BT_ERR("Unable to add new conn for handle %u", handle);
    7a80:	4b51      	ldr	r3, [pc, #324]	; (7bc8 <le_enh_conn_complete+0x208>)
    7a82:	681b      	ldr	r3, [r3, #0]
    7a84:	0758      	lsls	r0, r3, #29
    7a86:	d011      	beq.n	7aac <le_enh_conn_complete+0xec>
    7a88:	2201      	movs	r2, #1
    7a8a:	f04f 0300 	mov.w	r3, #0
    7a8e:	f362 0302 	bfi	r3, r2, #0, #3
    7a92:	494e      	ldr	r1, [pc, #312]	; (7bcc <le_enh_conn_complete+0x20c>)
    7a94:	4a4e      	ldr	r2, [pc, #312]	; (7bd0 <le_enh_conn_complete+0x210>)
    7a96:	484f      	ldr	r0, [pc, #316]	; (7bd4 <le_enh_conn_complete+0x214>)
    7a98:	1a52      	subs	r2, r2, r1
    7a9a:	08d2      	lsrs	r2, r2, #3
    7a9c:	f364 03c5 	bfi	r3, r4, #3, #3
    7aa0:	f362 138f 	bfi	r3, r2, #6, #10
    7aa4:	494c      	ldr	r1, [pc, #304]	; (7bd8 <le_enh_conn_complete+0x218>)
    7aa6:	4632      	mov	r2, r6
    7aa8:	f7fa f96a 	bl	1d80 <log_2>
}
    7aac:	b005      	add	sp, #20
    7aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    7ab0:	4621      	mov	r1, r4
    7ab2:	4668      	mov	r0, sp
    7ab4:	f7fe fffa 	bl	6aac <bt_addr_le_copy>
    7ab8:	e7d0      	b.n	7a5c <le_enh_conn_complete+0x9c>
	conn->handle = handle;
    7aba:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    7abc:	a902      	add	r1, sp, #8
	conn->handle = handle;
    7abe:	f820 7b48 	strh.w	r7, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    7ac2:	f7fe fff3 	bl	6aac <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    7ac6:	7e2a      	ldrb	r2, [r5, #24]
    7ac8:	7deb      	ldrb	r3, [r5, #23]
    7aca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7ace:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    7ad2:	7eaa      	ldrb	r2, [r5, #26]
    7ad4:	7e6b      	ldrb	r3, [r5, #25]
    7ad6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7ada:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7ade:	7eeb      	ldrb	r3, [r5, #27]
    7ae0:	7f2a      	ldrb	r2, [r5, #28]
    7ae2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7ae6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    7aea:	78ef      	ldrb	r7, [r5, #3]
    7aec:	70e7      	strb	r7, [r4, #3]
	conn->err = 0;
    7aee:	2300      	movs	r3, #0
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    7af0:	2f01      	cmp	r7, #1
	conn->err = 0;
    7af2:	7323      	strb	r3, [r4, #12]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    7af4:	d120      	bne.n	7b38 <le_enh_conn_complete+0x178>
		conn->id = bt_dev.adv_id;
    7af6:	4e39      	ldr	r6, [pc, #228]	; (7bdc <le_enh_conn_complete+0x21c>)
    7af8:	7a33      	ldrb	r3, [r6, #8]
    7afa:	7223      	strb	r3, [r4, #8]
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    7afc:	4669      	mov	r1, sp
    7afe:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    7b02:	f7fe ffd3 	bl	6aac <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    7b06:	7a21      	ldrb	r1, [r4, #8]
    7b08:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    7b0c:	4431      	add	r1, r6
    7b0e:	f104 0056 	add.w	r0, r4, #86	; 0x56
    7b12:	f7fe ffcb 	bl	6aac <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7b16:	2109      	movs	r1, #9
    7b18:	f106 0070 	add.w	r0, r6, #112	; 0x70
    7b1c:	f7ff f8f0 	bl	6d00 <atomic_test_bit>
    7b20:	b150      	cbz	r0, 7b38 <le_enh_conn_complete+0x178>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    7b22:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    7b26:	2000      	movs	r0, #0
    7b28:	f003 0140 	and.w	r1, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7b2c:	ea50 0301 	orrs.w	r3, r0, r1
    7b30:	d002      	beq.n	7b38 <le_enh_conn_complete+0x178>
			set_advertise_enable(true);
    7b32:	4638      	mov	r0, r7
    7b34:	f7ff f9fc 	bl	6f30 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    7b38:	2104      	movs	r1, #4
    7b3a:	4620      	mov	r0, r4
    7b3c:	f002 fb0a 	bl	a154 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    7b40:	7b63      	ldrb	r3, [r4, #13]
    7b42:	2b04      	cmp	r3, #4
    7b44:	f47f af6c 	bne.w	7a20 <le_enh_conn_complete+0x60>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    7b48:	78eb      	ldrb	r3, [r5, #3]
    7b4a:	b123      	cbz	r3, 7b56 <le_enh_conn_complete+0x196>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    7b4c:	4b23      	ldr	r3, [pc, #140]	; (7bdc <le_enh_conn_complete+0x21c>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    7b4e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7b52:	0719      	lsls	r1, r3, #28
    7b54:	d512      	bpl.n	7b7c <le_enh_conn_complete+0x1bc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    7b56:	2102      	movs	r1, #2
    7b58:	f242 0016 	movw	r0, #8214	; 0x2016
    7b5c:	f7ff f8fe 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    7b60:	4605      	mov	r5, r0
    7b62:	b158      	cbz	r0, 7b7c <le_enh_conn_complete+0x1bc>
	cp = net_buf_add(buf, sizeof(*cp));
    7b64:	2102      	movs	r1, #2
    7b66:	3008      	adds	r0, #8
    7b68:	f016 fcd0 	bl	1e50c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7b6c:	8823      	ldrh	r3, [r4, #0]
    7b6e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    7b70:	4629      	mov	r1, r5
    7b72:	f242 0016 	movw	r0, #8214	; 0x2016
    7b76:	f7ff fe0b 	bl	7790 <bt_hci_cmd_send>
    7b7a:	e751      	b.n	7a20 <le_enh_conn_complete+0x60>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    7b7c:	4d17      	ldr	r5, [pc, #92]	; (7bdc <le_enh_conn_complete+0x21c>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    7b7e:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    7b82:	07d2      	lsls	r2, r2, #31
    7b84:	d508      	bpl.n	7b98 <le_enh_conn_complete+0x1d8>
		err = hci_le_set_phy(conn);
    7b86:	4620      	mov	r0, r4
    7b88:	f7ff fed0 	bl	792c <hci_le_set_phy.isra.35>
		if (!err) {
    7b8c:	b920      	cbnz	r0, 7b98 <le_enh_conn_complete+0x1d8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7b8e:	2180      	movs	r1, #128	; 0x80
    7b90:	1d20      	adds	r0, r4, #4
    7b92:	f7fe ff8e 	bl	6ab2 <atomic_or>
    7b96:	e743      	b.n	7a20 <le_enh_conn_complete+0x60>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    7b98:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    7b9c:	069b      	lsls	r3, r3, #26
    7b9e:	d506      	bpl.n	7bae <le_enh_conn_complete+0x1ee>
		err = hci_le_set_data_len(conn);
    7ba0:	4620      	mov	r0, r4
    7ba2:	f7ff fee3 	bl	796c <hci_le_set_data_len.isra.36>
		if (!err) {
    7ba6:	b910      	cbnz	r0, 7bae <le_enh_conn_complete+0x1ee>
    7ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
    7bac:	e7f0      	b.n	7b90 <le_enh_conn_complete+0x1d0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7bae:	78e3      	ldrb	r3, [r4, #3]
    7bb0:	2b01      	cmp	r3, #1
    7bb2:	f47f af35 	bne.w	7a20 <le_enh_conn_complete+0x60>
		slave_update_conn_param(conn);
    7bb6:	4620      	mov	r0, r4
    7bb8:	f7ff f8ac 	bl	6d14 <slave_update_conn_param>
    7bbc:	e730      	b.n	7a20 <le_enh_conn_complete+0x60>
    7bbe:	bf00      	nop
    7bc0:	2000ccf0 	.word	0x2000ccf0
    7bc4:	00007599 	.word	0x00007599
    7bc8:	2000d74c 	.word	0x2000d74c
    7bcc:	0002cff8 	.word	0x0002cff8
    7bd0:	0002d070 	.word	0x0002d070
    7bd4:	0002f245 	.word	0x0002f245
    7bd8:	0002e8a0 	.word	0x0002e8a0
    7bdc:	2000cc80 	.word	0x2000cc80

00007be0 <le_conn_param_neg_reply>:
{
    7be0:	b570      	push	{r4, r5, r6, lr}
    7be2:	4606      	mov	r6, r0
    7be4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    7be6:	f242 0021 	movw	r0, #8225	; 0x2021
    7bea:	2103      	movs	r1, #3
    7bec:	f7ff f8b6 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    7bf0:	4604      	mov	r4, r0
    7bf2:	b160      	cbz	r0, 7c0e <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    7bf4:	2103      	movs	r1, #3
    7bf6:	3008      	adds	r0, #8
    7bf8:	f016 fc88 	bl	1e50c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    7bfc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    7bfe:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7c00:	4621      	mov	r1, r4
    7c02:	f242 0021 	movw	r0, #8225	; 0x2021
}
    7c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7c0a:	f7ff bdc1 	b.w	7790 <bt_hci_cmd_send>
}
    7c0e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7c12:	bd70      	pop	{r4, r5, r6, pc}

00007c14 <hci_tx_thread>:
{
    7c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    7c18:	4b6b      	ldr	r3, [pc, #428]	; (7dc8 <hci_tx_thread+0x1b4>)
    7c1a:	4c6c      	ldr	r4, [pc, #432]	; (7dcc <hci_tx_thread+0x1b8>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7c1c:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 7dd4 <hci_tx_thread+0x1c0>
		BT_ERR("Uncleared pending sent_cmd");
    7c20:	1ae4      	subs	r4, r4, r3
    7c22:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    7c26:	4a6a      	ldr	r2, [pc, #424]	; (7dd0 <hci_tx_thread+0x1bc>)
    7c28:	68d3      	ldr	r3, [r2, #12]
    7c2a:	f36f 3310 	bfc	r3, #12, #5
    7c2e:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7c30:	f102 0014 	add.w	r0, r2, #20
    7c34:	f002 fa10 	bl	a058 <bt_conn_prepare_events>
    7c38:	1c43      	adds	r3, r0, #1
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    7c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c3e:	4619      	mov	r1, r3
    7c40:	4863      	ldr	r0, [pc, #396]	; (7dd0 <hci_tx_thread+0x1bc>)
    7c42:	9300      	str	r3, [sp, #0]
    7c44:	f025 f88e 	bl	2cd64 <_impl_k_poll>
		BT_ASSERT(err == 0);
    7c48:	2800      	cmp	r0, #0
    7c4a:	f000 80b9 	beq.w	7dc0 <hci_tx_thread+0x1ac>
    7c4e:	4b61      	ldr	r3, [pc, #388]	; (7dd4 <hci_tx_thread+0x1c0>)
    7c50:	681b      	ldr	r3, [r3, #0]
    7c52:	0759      	lsls	r1, r3, #29
    7c54:	d00c      	beq.n	7c70 <hci_tx_thread+0x5c>
    7c56:	f04f 0200 	mov.w	r2, #0
    7c5a:	2301      	movs	r3, #1
    7c5c:	f363 0202 	bfi	r2, r3, #0, #3
    7c60:	f36f 02c5 	bfc	r2, #3, #3
    7c64:	495c      	ldr	r1, [pc, #368]	; (7dd8 <hci_tx_thread+0x1c4>)
    7c66:	485d      	ldr	r0, [pc, #372]	; (7ddc <hci_tx_thread+0x1c8>)
    7c68:	f364 128f 	bfi	r2, r4, #6, #10
	BT_ASSERT(buf);
    7c6c:	f7fa f874 	bl	1d58 <log_1>
    7c70:	4040      	eors	r0, r0
    7c72:	f380 8811 	msr	BASEPRI, r0
    7c76:	f04f 0004 	mov.w	r0, #4
    7c7a:	df02      	svc	2
		switch (ev->state) {
    7c7c:	68f2      	ldr	r2, [r6, #12]
    7c7e:	f3c2 3204 	ubfx	r2, r2, #12, #5
    7c82:	2a01      	cmp	r2, #1
    7c84:	d971      	bls.n	7d6a <hci_tx_thread+0x156>
    7c86:	2a04      	cmp	r2, #4
    7c88:	f040 8087 	bne.w	7d9a <hci_tx_thread+0x186>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7c8c:	7b33      	ldrb	r3, [r6, #12]
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d175      	bne.n	7d7e <hci_tx_thread+0x16a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7c92:	4619      	mov	r1, r3
    7c94:	4852      	ldr	r0, [pc, #328]	; (7de0 <hci_tx_thread+0x1cc>)
    7c96:	9301      	str	r3, [sp, #4]
    7c98:	f016 fbb0 	bl	1e3fc <net_buf_get>
	BT_ASSERT(buf);
    7c9c:	9b01      	ldr	r3, [sp, #4]
    7c9e:	4607      	mov	r7, r0
    7ca0:	b978      	cbnz	r0, 7cc2 <hci_tx_thread+0xae>
    7ca2:	4b4c      	ldr	r3, [pc, #304]	; (7dd4 <hci_tx_thread+0x1c0>)
    7ca4:	681b      	ldr	r3, [r3, #0]
    7ca6:	075a      	lsls	r2, r3, #29
    7ca8:	d0e2      	beq.n	7c70 <hci_tx_thread+0x5c>
    7caa:	f04f 0200 	mov.w	r2, #0
    7cae:	2301      	movs	r3, #1
    7cb0:	f363 0202 	bfi	r2, r3, #0, #3
    7cb4:	f360 02c5 	bfi	r2, r0, #3, #3
    7cb8:	f364 128f 	bfi	r2, r4, #6, #10
    7cbc:	4949      	ldr	r1, [pc, #292]	; (7de4 <hci_tx_thread+0x1d0>)
    7cbe:	484a      	ldr	r0, [pc, #296]	; (7de8 <hci_tx_thread+0x1d4>)
    7cc0:	e7d4      	b.n	7c6c <hci_tx_thread+0x58>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    7cc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7cc6:	4849      	ldr	r0, [pc, #292]	; (7dec <hci_tx_thread+0x1d8>)
    7cc8:	9301      	str	r3, [sp, #4]
    7cca:	f024 fb7f 	bl	2c3cc <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7cce:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
    7cd2:	b1c2      	cbz	r2, 7d06 <hci_tx_thread+0xf2>
		BT_ERR("Uncleared pending sent_cmd");
    7cd4:	f8db 2000 	ldr.w	r2, [fp]
    7cd8:	9b01      	ldr	r3, [sp, #4]
    7cda:	f012 0f07 	tst.w	r2, #7
    7cde:	d00b      	beq.n	7cf8 <hci_tx_thread+0xe4>
    7ce0:	2201      	movs	r2, #1
    7ce2:	f362 0802 	bfi	r8, r2, #0, #3
    7ce6:	f363 08c5 	bfi	r8, r3, #3, #3
    7cea:	f364 188f 	bfi	r8, r4, #6, #10
    7cee:	4642      	mov	r2, r8
    7cf0:	493c      	ldr	r1, [pc, #240]	; (7de4 <hci_tx_thread+0x1d0>)
    7cf2:	483f      	ldr	r0, [pc, #252]	; (7df0 <hci_tx_thread+0x1dc>)
    7cf4:	f7fa f830 	bl	1d58 <log_1>
		net_buf_unref(bt_dev.sent_cmd);
    7cf8:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7cfc:	f016 fba8 	bl	1e450 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7d00:	2300      	movs	r3, #0
    7d02:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    7d06:	4638      	mov	r0, r7
    7d08:	f016 fbd0 	bl	1e4ac <net_buf_ref>
    7d0c:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	err = bt_send(buf);
    7d10:	4638      	mov	r0, r7
    7d12:	f7ff fd35 	bl	7780 <bt_send>
	if (err) {
    7d16:	4602      	mov	r2, r0
    7d18:	b338      	cbz	r0, 7d6a <hci_tx_thread+0x156>
		BT_ERR("Unable to send to driver (err %d)", err);
    7d1a:	f8db 3000 	ldr.w	r3, [fp]
    7d1e:	075b      	lsls	r3, r3, #29
    7d20:	d00b      	beq.n	7d3a <hci_tx_thread+0x126>
    7d22:	2301      	movs	r3, #1
    7d24:	f363 0902 	bfi	r9, r3, #0, #3
    7d28:	f36f 09c5 	bfc	r9, #3, #3
    7d2c:	f364 198f 	bfi	r9, r4, #6, #10
    7d30:	464b      	mov	r3, r9
    7d32:	492c      	ldr	r1, [pc, #176]	; (7de4 <hci_tx_thread+0x1d0>)
    7d34:	482f      	ldr	r0, [pc, #188]	; (7df4 <hci_tx_thread+0x1e0>)
    7d36:	f7fa f823 	bl	1d80 <log_2>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    7d3a:	482c      	ldr	r0, [pc, #176]	; (7dec <hci_tx_thread+0x1d8>)
    7d3c:	f024 fb1f 	bl	2c37e <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    7d40:	4638      	mov	r0, r7
    7d42:	f016 fac7 	bl	1e2d4 <net_buf_id>
    7d46:	4b2c      	ldr	r3, [pc, #176]	; (7df8 <hci_tx_thread+0x1e4>)
    7d48:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7d4c:	2200      	movs	r2, #0
    7d4e:	211f      	movs	r1, #31
    7d50:	8840      	ldrh	r0, [r0, #2]
    7d52:	f7fe ff3b 	bl	6bcc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7d56:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7d5a:	f016 fb79 	bl	1e450 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7d5e:	2300      	movs	r3, #0
		net_buf_unref(buf);
    7d60:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    7d62:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    7d66:	f016 fb73 	bl	1e450 <net_buf_unref>
	for (; count; ev++, count--) {
    7d6a:	9b00      	ldr	r3, [sp, #0]
    7d6c:	3b01      	subs	r3, #1
    7d6e:	3614      	adds	r6, #20
    7d70:	9300      	str	r3, [sp, #0]
    7d72:	9b00      	ldr	r3, [sp, #0]
    7d74:	2b00      	cmp	r3, #0
    7d76:	d181      	bne.n	7c7c <hci_tx_thread+0x68>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    7d78:	f024 fa62 	bl	2c240 <_impl_k_yield>
    7d7c:	e753      	b.n	7c26 <hci_tx_thread+0x12>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    7d7e:	2b01      	cmp	r3, #1
    7d80:	d104      	bne.n	7d8c <hci_tx_thread+0x178>
					conn = CONTAINER_OF(ev->fifo,
    7d82:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    7d84:	381c      	subs	r0, #28
    7d86:	f002 f887 	bl	9e98 <bt_conn_notify_tx>
    7d8a:	e7ee      	b.n	7d6a <hci_tx_thread+0x156>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7d8c:	2b02      	cmp	r3, #2
    7d8e:	d1ec      	bne.n	7d6a <hci_tx_thread+0x156>
					conn = CONTAINER_OF(ev->fifo,
    7d90:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    7d92:	382c      	subs	r0, #44	; 0x2c
    7d94:	f002 fcec 	bl	a770 <bt_conn_process_tx>
    7d98:	e7e7      	b.n	7d6a <hci_tx_thread+0x156>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7d9a:	f8db 3000 	ldr.w	r3, [fp]
    7d9e:	f003 0307 	and.w	r3, r3, #7
    7da2:	2b01      	cmp	r3, #1
    7da4:	d9e1      	bls.n	7d6a <hci_tx_thread+0x156>
    7da6:	2302      	movs	r3, #2
    7da8:	f363 0a02 	bfi	sl, r3, #0, #3
    7dac:	f36f 0ac5 	bfc	sl, #3, #3
    7db0:	f364 1a8f 	bfi	sl, r4, #6, #10
    7db4:	4653      	mov	r3, sl
    7db6:	4911      	ldr	r1, [pc, #68]	; (7dfc <hci_tx_thread+0x1e8>)
    7db8:	4811      	ldr	r0, [pc, #68]	; (7e00 <hci_tx_thread+0x1ec>)
    7dba:	f7f9 ffe1 	bl	1d80 <log_2>
    7dbe:	e7d4      	b.n	7d6a <hci_tx_thread+0x156>
    7dc0:	4e03      	ldr	r6, [pc, #12]	; (7dd0 <hci_tx_thread+0x1bc>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7dc2:	4d10      	ldr	r5, [pc, #64]	; (7e04 <hci_tx_thread+0x1f0>)
    7dc4:	e7d5      	b.n	7d72 <hci_tx_thread+0x15e>
    7dc6:	bf00      	nop
    7dc8:	0002cff8 	.word	0x0002cff8
    7dcc:	0002d070 	.word	0x0002d070
    7dd0:	2000cd58 	.word	0x2000cd58
    7dd4:	2000d74c 	.word	0x2000d74c
    7dd8:	0002e9ef 	.word	0x0002e9ef
    7ddc:	0002f1c1 	.word	0x0002f1c1
    7de0:	2000cd44 	.word	0x2000cd44
    7de4:	0002e9d7 	.word	0x0002e9d7
    7de8:	0002f1df 	.word	0x0002f1df
    7dec:	2000cd28 	.word	0x2000cd28
    7df0:	0002f1f8 	.word	0x0002f1f8
    7df4:	0002eb57 	.word	0x0002eb57
    7df8:	2000098c 	.word	0x2000098c
    7dfc:	0002e9e0 	.word	0x0002e9e0
    7e00:	0002f217 	.word	0x0002f217
    7e04:	2000cc80 	.word	0x2000cc80

00007e08 <bt_recv>:
{
    7e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7e0c:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    7e0e:	2a01      	cmp	r2, #1
{
    7e10:	b091      	sub	sp, #68	; 0x44
    7e12:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    7e14:	d058      	beq.n	7ec8 <bt_recv+0xc0>
    7e16:	2a03      	cmp	r2, #3
    7e18:	f040 8589 	bne.w	892e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92e>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    7e1c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    7e1e:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    7e20:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    7e22:	f3c6 030b 	ubfx	r3, r6, #0, #12
    7e26:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    7e28:	23ff      	movs	r3, #255	; 0xff
    7e2a:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    7e2c:	2104      	movs	r1, #4
    7e2e:	3008      	adds	r0, #8
    7e30:	f016 fbbc 	bl	1e5ac <net_buf_simple_pull>
	if (buf->len != len) {
    7e34:	89a2      	ldrh	r2, [r4, #12]
    7e36:	4295      	cmp	r5, r2
    7e38:	d01e      	beq.n	7e78 <bt_recv+0x70>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    7e3a:	4bb0      	ldr	r3, [pc, #704]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    7e3c:	681b      	ldr	r3, [r3, #0]
    7e3e:	075e      	lsls	r6, r3, #29
    7e40:	d013      	beq.n	7e6a <bt_recv+0x62>
    7e42:	2301      	movs	r3, #1
    7e44:	f04f 0000 	mov.w	r0, #0
    7e48:	f363 0002 	bfi	r0, r3, #0, #3
    7e4c:	49ac      	ldr	r1, [pc, #688]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    7e4e:	4bad      	ldr	r3, [pc, #692]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    7e50:	1ac9      	subs	r1, r1, r3
    7e52:	08c9      	lsrs	r1, r1, #3
    7e54:	f36f 00c5 	bfc	r0, #3, #3
    7e58:	f361 108f 	bfi	r0, r1, #6, #10
    7e5c:	f8ad 0000 	strh.w	r0, [sp]
    7e60:	462b      	mov	r3, r5
    7e62:	49a9      	ldr	r1, [pc, #676]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
    7e64:	48a9      	ldr	r0, [pc, #676]	; (810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>)
    7e66:	f7f9 ffa3 	bl	1db0 <log_3>
		net_buf_unref(buf);
    7e6a:	4620      	mov	r0, r4
    7e6c:	f016 faf0 	bl	1e450 <net_buf_unref>
		return 0;
    7e70:	2000      	movs	r0, #0
}
    7e72:	b011      	add	sp, #68	; 0x44
    7e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    7e78:	8ae0      	ldrh	r0, [r4, #22]
    7e7a:	f002 fa5b 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    7e7e:	4605      	mov	r5, r0
    7e80:	b9b0      	cbnz	r0, 7eb0 <bt_recv+0xa8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    7e82:	4b9e      	ldr	r3, [pc, #632]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    7e84:	681b      	ldr	r3, [r3, #0]
    7e86:	0758      	lsls	r0, r3, #29
    7e88:	d0ef      	beq.n	7e6a <bt_recv+0x62>
    7e8a:	2201      	movs	r2, #1
    7e8c:	f04f 0300 	mov.w	r3, #0
    7e90:	f362 0302 	bfi	r3, r2, #0, #3
    7e94:	499b      	ldr	r1, [pc, #620]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    7e96:	4a9a      	ldr	r2, [pc, #616]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    7e98:	489d      	ldr	r0, [pc, #628]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
    7e9a:	1a52      	subs	r2, r2, r1
    7e9c:	08d2      	lsrs	r2, r2, #3
    7e9e:	f365 03c5 	bfi	r3, r5, #3, #3
    7ea2:	f362 138f 	bfi	r3, r2, #6, #10
    7ea6:	4998      	ldr	r1, [pc, #608]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
    7ea8:	8ae2      	ldrh	r2, [r4, #22]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7eaa:	f7f9 ff69 	bl	1d80 <log_2>
    7eae:	e7dc      	b.n	7e6a <bt_recv+0x62>
	acl(buf)->id = bt_conn_get_id(conn);
    7eb0:	f002 fcd8 	bl	a864 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    7eb4:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    7eb6:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    7eb8:	4621      	mov	r1, r4
    7eba:	4628      	mov	r0, r5
    7ebc:	f001 fedc 	bl	9c78 <bt_conn_recv>
	bt_conn_unref(conn);
    7ec0:	4628      	mov	r0, r5
    7ec2:	f002 faa9 	bl	a418 <bt_conn_unref>
    7ec6:	e7d3      	b.n	7e70 <bt_recv+0x68>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    7ec8:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7eca:	782b      	ldrb	r3, [r5, #0]
    7ecc:	2b13      	cmp	r3, #19
    7ece:	d81f      	bhi.n	7f10 <bt_recv+0x108>
    7ed0:	fa02 f303 	lsl.w	r3, r2, r3
    7ed4:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    7ed8:	d01a      	beq.n	7f10 <bt_recv+0x108>
    7eda:	4b88      	ldr	r3, [pc, #544]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    7edc:	681b      	ldr	r3, [r3, #0]
    7ede:	0759      	lsls	r1, r3, #29
    7ee0:	d010      	beq.n	7f04 <bt_recv+0xfc>
    7ee2:	f04f 0100 	mov.w	r1, #0
    7ee6:	f362 0102 	bfi	r1, r2, #0, #3
    7eea:	4b85      	ldr	r3, [pc, #532]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    7eec:	4a85      	ldr	r2, [pc, #532]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    7eee:	4889      	ldr	r0, [pc, #548]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
    7ef0:	1a9b      	subs	r3, r3, r2
    7ef2:	f36f 01c5 	bfc	r1, #3, #3
    7ef6:	08db      	lsrs	r3, r3, #3
    7ef8:	f363 118f 	bfi	r1, r3, #6, #10
    7efc:	460a      	mov	r2, r1
    7efe:	4986      	ldr	r1, [pc, #536]	; (8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>)
    7f00:	f7f9 ff2a 	bl	1d58 <log_1>
    7f04:	4040      	eors	r0, r0
    7f06:	f380 8811 	msr	BASEPRI, r0
    7f0a:	f04f 0004 	mov.w	r0, #4
    7f0e:	df02      	svc	2
	net_buf_pull(buf, sizeof(*hdr));
    7f10:	f104 0608 	add.w	r6, r4, #8
    7f14:	2102      	movs	r1, #2
    7f16:	4630      	mov	r0, r6
    7f18:	f016 fb48 	bl	1e5ac <net_buf_simple_pull>
	switch (hdr->evt) {
    7f1c:	782a      	ldrb	r2, [r5, #0]
    7f1e:	2a08      	cmp	r2, #8
    7f20:	f000 809d 	beq.w	805e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e>
    7f24:	d825      	bhi.n	7f72 <bt_recv+0x16a>
    7f26:	2a05      	cmp	r2, #5
    7f28:	d040      	beq.n	7fac <bt_recv+0x1a4>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    7f2a:	4b74      	ldr	r3, [pc, #464]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	f003 0307 	and.w	r3, r3, #7
    7f32:	2b01      	cmp	r3, #1
    7f34:	d999      	bls.n	7e6a <bt_recv+0x62>
    7f36:	2302      	movs	r3, #2
    7f38:	f04f 0500 	mov.w	r5, #0
    7f3c:	f363 0502 	bfi	r5, r3, #0, #3
    7f40:	496f      	ldr	r1, [pc, #444]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    7f42:	4b70      	ldr	r3, [pc, #448]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    7f44:	68a0      	ldr	r0, [r4, #8]
    7f46:	1ac9      	subs	r1, r1, r3
    7f48:	08c9      	lsrs	r1, r1, #3
    7f4a:	4b73      	ldr	r3, [pc, #460]	; (8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>)
    7f4c:	f36f 05c5 	bfc	r5, #3, #3
    7f50:	f361 158f 	bfi	r5, r1, #6, #10
    7f54:	89a1      	ldrh	r1, [r4, #12]
    7f56:	910a      	str	r1, [sp, #40]	; 0x28
    7f58:	e9cd 3208 	strd	r3, r2, [sp, #32]
    7f5c:	f7fe fc78 	bl	6850 <bt_hex_real>
    7f60:	f7fa f88c 	bl	207c <log_strdup>
    7f64:	462b      	mov	r3, r5
    7f66:	900b      	str	r0, [sp, #44]	; 0x2c
    7f68:	2204      	movs	r2, #4
    7f6a:	a908      	add	r1, sp, #32
    7f6c:	486b      	ldr	r0, [pc, #428]	; (811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>)
    7f6e:	f000 bcda 	b.w	8926 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x926>
	switch (hdr->evt) {
    7f72:	2a30      	cmp	r2, #48	; 0x30
    7f74:	f000 80a4 	beq.w	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    7f78:	2a3e      	cmp	r2, #62	; 0x3e
    7f7a:	d1d6      	bne.n	7f2a <bt_recv+0x122>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    7f7c:	68a5      	ldr	r5, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    7f7e:	2101      	movs	r1, #1
    7f80:	4630      	mov	r0, r6
    7f82:	f016 fb13 	bl	1e5ac <net_buf_simple_pull>
	switch (evt->subevent) {
    7f86:	7829      	ldrb	r1, [r5, #0]
    7f88:	1e4b      	subs	r3, r1, #1
    7f8a:	2b0b      	cmp	r3, #11
    7f8c:	f200 84a8 	bhi.w	88e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e0>
    7f90:	e8df f013 	tbh	[pc, r3, lsl #1]
    7f94:	03d000e8 	.word	0x03d000e8
    7f98:	0177013f 	.word	0x0177013f
    7f9c:	01c002a2 	.word	0x01c002a2
    7fa0:	038c0229 	.word	0x038c0229
    7fa4:	013d03ac 	.word	0x013d03ac
    7fa8:	025504a6 	.word	0x025504a6
		hci_disconn_complete(buf);
    7fac:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    7fae:	783e      	ldrb	r6, [r7, #0]
    7fb0:	2e00      	cmp	r6, #0
    7fb2:	f47f af5a 	bne.w	7e6a <bt_recv+0x62>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7fb6:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    7fba:	4640      	mov	r0, r8
    7fbc:	f002 f9ba 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    7fc0:	4605      	mov	r5, r0
    7fc2:	bb38      	cbnz	r0, 8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
		BT_ERR("Unable to look up conn with handle %u", handle);
    7fc4:	4b4d      	ldr	r3, [pc, #308]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    7fc6:	681b      	ldr	r3, [r3, #0]
    7fc8:	075a      	lsls	r2, r3, #29
    7fca:	d011      	beq.n	7ff0 <bt_recv+0x1e8>
    7fcc:	2201      	movs	r2, #1
    7fce:	f04f 0300 	mov.w	r3, #0
    7fd2:	f362 0302 	bfi	r3, r2, #0, #3
    7fd6:	494a      	ldr	r1, [pc, #296]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    7fd8:	4a4a      	ldr	r2, [pc, #296]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    7fda:	1a89      	subs	r1, r1, r2
    7fdc:	f360 03c5 	bfi	r3, r0, #3, #3
    7fe0:	08c9      	lsrs	r1, r1, #3
    7fe2:	f361 138f 	bfi	r3, r1, #6, #10
    7fe6:	4642      	mov	r2, r8
    7fe8:	494d      	ldr	r1, [pc, #308]	; (8120 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120>)
    7fea:	484e      	ldr	r0, [pc, #312]	; (8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>)
    7fec:	f7f9 fec8 	bl	1d80 <log_2>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7ff0:	2109      	movs	r1, #9
    7ff2:	484d      	ldr	r0, [pc, #308]	; (8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>)
    7ff4:	f7fe fe84 	bl	6d00 <atomic_test_bit>
    7ff8:	2800      	cmp	r0, #0
    7ffa:	f43f af36 	beq.w	7e6a <bt_recv+0x62>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    7ffe:	2106      	movs	r1, #6
    8000:	4849      	ldr	r0, [pc, #292]	; (8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>)
    8002:	f7fe fe7d 	bl	6d00 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    8006:	2800      	cmp	r0, #0
    8008:	f47f af2f 	bne.w	7e6a <bt_recv+0x62>
		set_advertise_enable(true);
    800c:	2001      	movs	r0, #1
    800e:	f7fe ff8f 	bl	6f30 <set_advertise_enable>
    8012:	e72a      	b.n	7e6a <bt_recv+0x62>
	conn->err = evt->reason;
    8014:	78fb      	ldrb	r3, [r7, #3]
    8016:	7303      	strb	r3, [r0, #12]
	k_thread_foreach(hci_stack_dump, "HCI");
    8018:	4944      	ldr	r1, [pc, #272]	; (812c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c>)
    801a:	4845      	ldr	r0, [pc, #276]	; (8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>)
    801c:	f024 fa35 	bl	2c48a <k_thread_foreach>
	STACK_ANALYZE("tx stack", tx_thread_stack);
    8020:	f44f 7220 	mov.w	r2, #640	; 0x280
    8024:	4943      	ldr	r1, [pc, #268]	; (8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>)
    8026:	4844      	ldr	r0, [pc, #272]	; (8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>)
    8028:	f7fe fd62 	bl	6af0 <stack_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    802c:	4631      	mov	r1, r6
    802e:	4628      	mov	r0, r5
    8030:	f002 f890 	bl	a154 <bt_conn_set_state>
	conn->handle = 0;
    8034:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    8036:	78ae      	ldrb	r6, [r5, #2]
    8038:	b10e      	cbz	r6, 803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
	bt_conn_unref(conn);
    803a:	4628      	mov	r0, r5
    803c:	e11e      	b.n	827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    803e:	4631      	mov	r1, r6
    8040:	1d28      	adds	r0, r5, #4
    8042:	f7fe fe5d 	bl	6d00 <atomic_test_bit>
    8046:	b130      	cbz	r0, 8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8048:	4628      	mov	r0, r5
    804a:	2101      	movs	r1, #1
    804c:	f002 f882 	bl	a154 <bt_conn_set_state>
		bt_le_scan_update(false);
    8050:	4630      	mov	r0, r6
    8052:	f7ff fc39 	bl	78c8 <bt_le_scan_update>
	bt_conn_unref(conn);
    8056:	4628      	mov	r0, r5
    8058:	f002 f9de 	bl	a418 <bt_conn_unref>
    805c:	e7c8      	b.n	7ff0 <bt_recv+0x1e8>
		hci_encrypt_change(buf);
    805e:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8060:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8064:	4638      	mov	r0, r7
    8066:	f002 f965 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    806a:	4605      	mov	r5, r0
    806c:	b9a8      	cbnz	r0, 809a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a>
		BT_ERR("Unable to look up conn with handle %u", handle);
    806e:	4b23      	ldr	r3, [pc, #140]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    8070:	681b      	ldr	r3, [r3, #0]
    8072:	075b      	lsls	r3, r3, #29
    8074:	f43f aef9 	beq.w	7e6a <bt_recv+0x62>
    8078:	2201      	movs	r2, #1
    807a:	f04f 0300 	mov.w	r3, #0
    807e:	f362 0302 	bfi	r3, r2, #0, #3
    8082:	491f      	ldr	r1, [pc, #124]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    8084:	4a1f      	ldr	r2, [pc, #124]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    8086:	1a89      	subs	r1, r1, r2
    8088:	08c9      	lsrs	r1, r1, #3
    808a:	f360 03c5 	bfi	r3, r0, #3, #3
    808e:	f361 138f 	bfi	r3, r1, #6, #10
    8092:	492a      	ldr	r1, [pc, #168]	; (813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>)
    8094:	463a      	mov	r2, r7
		BT_ERR("Unable to look up conn with handle %u", handle);
    8096:	4823      	ldr	r0, [pc, #140]	; (8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>)
    8098:	e707      	b.n	7eaa <bt_recv+0xa2>
	if (evt->status) {
    809a:	7833      	ldrb	r3, [r6, #0]
    809c:	7882      	ldrb	r2, [r0, #2]
    809e:	b123      	cbz	r3, 80aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa>
		if (conn->type == BT_CONN_TYPE_LE) {
    80a0:	2a00      	cmp	r2, #0
    80a2:	d1ca      	bne.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
			conn->required_sec_level = conn->sec_level;
    80a4:	7a43      	ldrb	r3, [r0, #9]
    80a6:	7283      	strb	r3, [r0, #10]
    80a8:	e7c7      	b.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	conn->encrypt = evt->encrypt;
    80aa:	78f3      	ldrb	r3, [r6, #3]
    80ac:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    80ae:	2a00      	cmp	r2, #0
    80b0:	d150      	bne.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
		if (conn->encrypt) {
    80b2:	b10b      	cbz	r3, 80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>
		bt_smp_update_keys(conn);
    80b4:	f008 f85a 	bl	1016c <bt_smp_update_keys>
		update_sec_level(conn);
    80b8:	4628      	mov	r0, r5
    80ba:	f7fe fd39 	bl	6b30 <update_sec_level>
    80be:	e049      	b.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
		hci_encrypt_key_refresh_complete(buf);
    80c0:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    80c2:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    80c6:	4638      	mov	r0, r7
    80c8:	f002 f934 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    80cc:	4605      	mov	r5, r0
    80ce:	2800      	cmp	r0, #0
    80d0:	d138      	bne.n	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
		BT_ERR("Unable to look up conn with handle %u", handle);
    80d2:	4b0a      	ldr	r3, [pc, #40]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	075e      	lsls	r6, r3, #29
    80d8:	f43f aec7 	beq.w	7e6a <bt_recv+0x62>
    80dc:	2201      	movs	r2, #1
    80de:	f04f 0300 	mov.w	r3, #0
    80e2:	f362 0302 	bfi	r3, r2, #0, #3
    80e6:	4906      	ldr	r1, [pc, #24]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    80e8:	4a06      	ldr	r2, [pc, #24]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    80ea:	1a89      	subs	r1, r1, r2
    80ec:	08c9      	lsrs	r1, r1, #3
    80ee:	f360 03c5 	bfi	r3, r0, #3, #3
    80f2:	f361 138f 	bfi	r3, r1, #6, #10
    80f6:	463a      	mov	r2, r7
    80f8:	4911      	ldr	r1, [pc, #68]	; (8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>)
    80fa:	e7cc      	b.n	8096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96>
    80fc:	2000d74c 	.word	0x2000d74c
    8100:	0002d070 	.word	0x0002d070
    8104:	0002cff8 	.word	0x0002cff8
    8108:	0002e869 	.word	0x0002e869
    810c:	0002ee84 	.word	0x0002ee84
    8110:	0002eeac 	.word	0x0002eeac
    8114:	0002eed2 	.word	0x0002eed2
    8118:	0002e9cd 	.word	0x0002e9cd
    811c:	0002efa8 	.word	0x0002efa8
    8120:	0002e88b 	.word	0x0002e88b
    8124:	0002ef05 	.word	0x0002ef05
    8128:	2000ccf0 	.word	0x2000ccf0
    812c:	0002ef2f 	.word	0x0002ef2f
    8130:	00006b25 	.word	0x00006b25
    8134:	20004628 	.word	0x20004628
    8138:	0002ef33 	.word	0x0002ef33
    813c:	0002e95a 	.word	0x0002e95a
    8140:	0002e96d 	.word	0x0002e96d
	if (evt->status) {
    8144:	7831      	ldrb	r1, [r6, #0]
    8146:	b111      	cbz	r1, 814e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e>
		bt_l2cap_encrypt_change(conn, evt->status);
    8148:	f002 fd9a 	bl	ac80 <bt_l2cap_encrypt_change>
    814c:	e68d      	b.n	7e6a <bt_recv+0x62>
	if (conn->type == BT_CONN_TYPE_LE) {
    814e:	7883      	ldrb	r3, [r0, #2]
    8150:	2b00      	cmp	r3, #0
    8152:	d0af      	beq.n	80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
	bt_l2cap_encrypt_change(conn, evt->status);
    8154:	4628      	mov	r0, r5
    8156:	7831      	ldrb	r1, [r6, #0]
    8158:	f002 fd92 	bl	ac80 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    815c:	4628      	mov	r0, r5
    815e:	f001 fd23 	bl	9ba8 <bt_conn_security_changed>
    8162:	e76a      	b.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
		le_legacy_conn_complete(buf);
    8164:	68a5      	ldr	r5, [r4, #8]
	enh.status         = evt->status;
    8166:	782b      	ldrb	r3, [r5, #0]
    8168:	f88d 3020 	strb.w	r3, [sp, #32]
	enh.handle         = evt->handle;
    816c:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    8170:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.role           = evt->role;
    8174:	78eb      	ldrb	r3, [r5, #3]
    8176:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	enh.interval       = evt->interval;
    817a:	f8b5 300b 	ldrh.w	r3, [r5, #11]
    817e:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
	enh.latency        = evt->latency;
    8182:	f8b5 300d 	ldrh.w	r3, [r5, #13]
    8186:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.supv_timeout   = evt->supv_timeout;
    818a:	f8b5 300f 	ldrh.w	r3, [r5, #15]
    818e:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    8192:	ae09      	add	r6, sp, #36	; 0x24
	enh.clock_accuracy = evt->clock_accuracy;
    8194:	7c6b      	ldrb	r3, [r5, #17]
    8196:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    819a:	1d29      	adds	r1, r5, #4
    819c:	4630      	mov	r0, r6
    819e:	f7fe fc85 	bl	6aac <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    81a2:	2700      	movs	r7, #0
    81a4:	a904      	add	r1, sp, #16
    81a6:	2206      	movs	r2, #6
    81a8:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
    81ac:	9704      	str	r7, [sp, #16]
    81ae:	f8ad 7014 	strh.w	r7, [sp, #20]
    81b2:	f7fd fe69 	bl	5e88 <memcpy>
	if (evt->role == BT_HCI_ROLE_SLAVE) {
    81b6:	78eb      	ldrb	r3, [r5, #3]
    81b8:	2b01      	cmp	r3, #1
		keys = bt_keys_find_irk(id, addr);
    81ba:	bf0a      	itet	eq
    81bc:	4bbc      	ldreq	r3, [pc, #752]	; (84b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b0>)
    81be:	4638      	movne	r0, r7
    81c0:	7a18      	ldrbeq	r0, [r3, #8]
    81c2:	4631      	mov	r1, r6
    81c4:	f008 f90e 	bl	103e4 <bt_keys_find_irk>
		if (keys) {
    81c8:	b1b0      	cbz	r0, 81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>
			return &keys->addr;
    81ca:	1c45      	adds	r5, r0, #1
	if (id_addr != &enh.peer_addr) {
    81cc:	42b5      	cmp	r5, r6
    81ce:	d013      	beq.n	81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>
    81d0:	2206      	movs	r2, #6
    81d2:	f10d 0125 	add.w	r1, sp, #37	; 0x25
    81d6:	f10d 0031 	add.w	r0, sp, #49	; 0x31
    81da:	f7fd fe55 	bl	5e88 <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    81de:	4629      	mov	r1, r5
    81e0:	4630      	mov	r0, r6
    81e2:	f7fe fc63 	bl	6aac <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    81e6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    81ea:	3302      	adds	r3, #2
    81ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	le_enh_conn_complete(&enh);
    81f0:	a808      	add	r0, sp, #32
		le_enh_conn_complete((void *)buf->data);
    81f2:	f7ff fbe5 	bl	79c0 <le_enh_conn_complete>
    81f6:	e638      	b.n	7e6a <bt_recv+0x62>
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    81f8:	2300      	movs	r3, #0
    81fa:	2206      	movs	r2, #6
    81fc:	a906      	add	r1, sp, #24
    81fe:	f10d 0031 	add.w	r0, sp, #49	; 0x31
    8202:	9306      	str	r3, [sp, #24]
    8204:	f8ad 301c 	strh.w	r3, [sp, #28]
    8208:	f7fd fe3e 	bl	5e88 <memcpy>
    820c:	e7f0      	b.n	81f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f0>
		le_enh_conn_complete((void *)buf->data);
    820e:	68a0      	ldr	r0, [r4, #8]
    8210:	e7ef      	b.n	81f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f2>
		le_conn_update_complete(buf);
    8212:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8214:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8218:	4638      	mov	r0, r7
    821a:	f002 f88b 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    821e:	4606      	mov	r6, r0
    8220:	b9a8      	cbnz	r0, 824e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8222:	4ba4      	ldr	r3, [pc, #656]	; (84b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b4>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	0758      	lsls	r0, r3, #29
    8228:	f43f ae1f 	beq.w	7e6a <bt_recv+0x62>
    822c:	2201      	movs	r2, #1
    822e:	f04f 0300 	mov.w	r3, #0
    8232:	f362 0302 	bfi	r3, r2, #0, #3
    8236:	49a0      	ldr	r1, [pc, #640]	; (84b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b8>)
    8238:	4aa0      	ldr	r2, [pc, #640]	; (84bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4bc>)
    823a:	1a89      	subs	r1, r1, r2
    823c:	08c9      	lsrs	r1, r1, #3
    823e:	f366 03c5 	bfi	r3, r6, #3, #3
    8242:	f361 138f 	bfi	r3, r1, #6, #10
    8246:	499e      	ldr	r1, [pc, #632]	; (84c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c0>)
    8248:	463a      	mov	r2, r7
    824a:	489e      	ldr	r0, [pc, #632]	; (84c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c4>)
    824c:	e62d      	b.n	7eaa <bt_recv+0xa2>
	if (!evt->status) {
    824e:	782b      	ldrb	r3, [r5, #0]
    8250:	b99b      	cbnz	r3, 827a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8252:	792a      	ldrb	r2, [r5, #4]
    8254:	78eb      	ldrb	r3, [r5, #3]
    8256:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    825a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    825e:	79aa      	ldrb	r2, [r5, #6]
    8260:	796b      	ldrb	r3, [r5, #5]
    8262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8266:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    826a:	79eb      	ldrb	r3, [r5, #7]
    826c:	7a2a      	ldrb	r2, [r5, #8]
    826e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8272:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    8276:	f001 fc0d 	bl	9a94 <notify_le_param_updated>
	bt_conn_unref(conn);
    827a:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    827c:	f002 f8cc 	bl	a418 <bt_conn_unref>
    8280:	e5f3      	b.n	7e6a <bt_recv+0x62>
		le_remote_feat_complete(buf);
    8282:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    8284:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8288:	4638      	mov	r0, r7
    828a:	f002 f853 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    828e:	4605      	mov	r5, r0
    8290:	b9a0      	cbnz	r0, 82bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2bc>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8292:	4b88      	ldr	r3, [pc, #544]	; (84b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b4>)
    8294:	681b      	ldr	r3, [r3, #0]
    8296:	0759      	lsls	r1, r3, #29
    8298:	f43f ade7 	beq.w	7e6a <bt_recv+0x62>
    829c:	2201      	movs	r2, #1
    829e:	f04f 0300 	mov.w	r3, #0
    82a2:	f362 0302 	bfi	r3, r2, #0, #3
    82a6:	4984      	ldr	r1, [pc, #528]	; (84b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b8>)
    82a8:	4a84      	ldr	r2, [pc, #528]	; (84bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4bc>)
    82aa:	1a89      	subs	r1, r1, r2
    82ac:	08c9      	lsrs	r1, r1, #3
    82ae:	f360 03c5 	bfi	r3, r0, #3, #3
    82b2:	f361 138f 	bfi	r3, r1, #6, #10
    82b6:	463a      	mov	r2, r7
    82b8:	4983      	ldr	r1, [pc, #524]	; (84c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c8>)
    82ba:	e7c6      	b.n	824a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24a>
	if (!evt->status) {
    82bc:	7833      	ldrb	r3, [r6, #0]
    82be:	b923      	cbnz	r3, 82ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ca>
		memcpy(conn->le.features, evt->features,
    82c0:	2208      	movs	r2, #8
    82c2:	1cf1      	adds	r1, r6, #3
    82c4:	3068      	adds	r0, #104	; 0x68
    82c6:	f7fd fddf 	bl	5e88 <memcpy>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    82ca:	4e79      	ldr	r6, [pc, #484]	; (84b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b0>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    82cc:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    82d0:	07d2      	lsls	r2, r2, #31
    82d2:	d50c      	bpl.n	82ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ee>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    82d4:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    82d8:	07db      	lsls	r3, r3, #31
    82da:	d508      	bpl.n	82ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ee>
		err = hci_le_set_phy(conn);
    82dc:	4628      	mov	r0, r5
    82de:	f7ff fb25 	bl	792c <hci_le_set_phy.isra.35>
		if (!err) {
    82e2:	b920      	cbnz	r0, 82ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ee>
    82e4:	2180      	movs	r1, #128	; 0x80
    82e6:	1d28      	adds	r0, r5, #4
    82e8:	f7fe fbe3 	bl	6ab2 <atomic_or>
    82ec:	e6a5      	b.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    82ee:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    82f2:	069f      	lsls	r7, r3, #26
    82f4:	f140 809b 	bpl.w	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    82f8:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    82fc:	069e      	lsls	r6, r3, #26
    82fe:	f140 8096 	bpl.w	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
		err = hci_le_set_data_len(conn);
    8302:	4628      	mov	r0, r5
    8304:	f7ff fb32 	bl	796c <hci_le_set_data_len.isra.36>
		if (!err) {
    8308:	2800      	cmp	r0, #0
    830a:	f040 8090 	bne.w	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    830e:	f44f 7180 	mov.w	r1, #256	; 0x100
    8312:	e7e8      	b.n	82e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e6>
		le_conn_param_req(buf);
    8314:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8316:	78d9      	ldrb	r1, [r3, #3]
    8318:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    831a:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    831c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8320:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    8324:	7959      	ldrb	r1, [r3, #5]
    8326:	791a      	ldrb	r2, [r3, #4]
    8328:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    832c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(evt->latency);
    8330:	799a      	ldrb	r2, [r3, #6]
    8332:	79d9      	ldrb	r1, [r3, #7]
    8334:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8338:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(evt->timeout);
    833c:	7a1a      	ldrb	r2, [r3, #8]
    833e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    8340:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8342:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    8346:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8348:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	conn = bt_conn_lookup_handle(handle);
    834c:	f001 fff2 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    8350:	4680      	mov	r8, r0
    8352:	b9d0      	cbnz	r0, 838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8354:	4b57      	ldr	r3, [pc, #348]	; (84b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b4>)
    8356:	681b      	ldr	r3, [r3, #0]
    8358:	0758      	lsls	r0, r3, #29
    835a:	d011      	beq.n	8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>
    835c:	2201      	movs	r2, #1
    835e:	f04f 0300 	mov.w	r3, #0
    8362:	f362 0302 	bfi	r3, r2, #0, #3
    8366:	4955      	ldr	r1, [pc, #340]	; (84bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4bc>)
    8368:	4a53      	ldr	r2, [pc, #332]	; (84b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b8>)
    836a:	4856      	ldr	r0, [pc, #344]	; (84c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c4>)
    836c:	1a52      	subs	r2, r2, r1
    836e:	08d2      	lsrs	r2, r2, #3
    8370:	f368 03c5 	bfi	r3, r8, #3, #3
    8374:	f362 138f 	bfi	r3, r2, #6, #10
    8378:	4954      	ldr	r1, [pc, #336]	; (84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>)
    837a:	462a      	mov	r2, r5
    837c:	f7f9 fd00 	bl	1d80 <log_2>
		return le_conn_param_neg_reply(handle,
    8380:	2102      	movs	r1, #2
    8382:	4628      	mov	r0, r5
    8384:	f7ff fc2c 	bl	7be0 <le_conn_param_neg_reply>
    8388:	e56f      	b.n	7e6a <bt_recv+0x62>
	if (!le_param_req(conn, &param)) {
    838a:	a908      	add	r1, sp, #32
    838c:	f001 fb96 	bl	9abc <le_param_req>
    8390:	b928      	cbnz	r0, 839e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39e>
		err = le_conn_param_neg_reply(handle,
    8392:	211e      	movs	r1, #30
    8394:	4628      	mov	r0, r5
    8396:	f7ff fc23 	bl	7be0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    839a:	4640      	mov	r0, r8
    839c:	e76e      	b.n	827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    839e:	210e      	movs	r1, #14
    83a0:	f242 0020 	movw	r0, #8224	; 0x2020
    83a4:	f7fe fcda 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    83a8:	4606      	mov	r6, r0
    83aa:	2800      	cmp	r0, #0
    83ac:	d0f5      	beq.n	839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
	cp = net_buf_add(buf, sizeof(*cp));
    83ae:	210e      	movs	r1, #14
    83b0:	3008      	adds	r0, #8
    83b2:	f016 f8ab 	bl	1e50c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    83b6:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    83b8:	4605      	mov	r5, r0
	(void)memset(cp, 0, sizeof(*cp));
    83ba:	2100      	movs	r1, #0
    83bc:	f7fd fd91 	bl	5ee2 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    83c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    83c4:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    83c6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    83ca:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    83cc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    83d0:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    83d2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
	cp->handle = sys_cpu_to_le16(handle);
    83d6:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    83d8:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    83da:	4631      	mov	r1, r6
    83dc:	f242 0020 	movw	r0, #8224	; 0x2020
    83e0:	f7ff f9d6 	bl	7790 <bt_hci_cmd_send>
    83e4:	e7d9      	b.n	839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    83e6:	68a3      	ldr	r3, [r4, #8]
    83e8:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    83ea:	4630      	mov	r0, r6
    83ec:	f001 ffa2 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    83f0:	4605      	mov	r5, r0
    83f2:	b9a0      	cbnz	r0, 841e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    83f4:	4b2f      	ldr	r3, [pc, #188]	; (84b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b4>)
    83f6:	681b      	ldr	r3, [r3, #0]
    83f8:	0759      	lsls	r1, r3, #29
    83fa:	f43f ad36 	beq.w	7e6a <bt_recv+0x62>
    83fe:	2201      	movs	r2, #1
    8400:	f04f 0300 	mov.w	r3, #0
    8404:	f362 0302 	bfi	r3, r2, #0, #3
    8408:	492b      	ldr	r1, [pc, #172]	; (84b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b8>)
    840a:	4a2c      	ldr	r2, [pc, #176]	; (84bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4bc>)
    840c:	1a89      	subs	r1, r1, r2
    840e:	08c9      	lsrs	r1, r1, #3
    8410:	f360 03c5 	bfi	r3, r0, #3, #3
    8414:	f361 138f 	bfi	r3, r1, #6, #10
    8418:	4632      	mov	r2, r6
    841a:	492d      	ldr	r1, [pc, #180]	; (84d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d0>)
    841c:	e715      	b.n	824a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24a>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    841e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    8422:	3004      	adds	r0, #4
    8424:	f7fe fb54 	bl	6ad0 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    8428:	05c2      	lsls	r2, r0, #23
    842a:	f57f ae06 	bpl.w	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    842e:	78eb      	ldrb	r3, [r5, #3]
    8430:	2b01      	cmp	r3, #1
    8432:	f47f ae02 	bne.w	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
		slave_update_conn_param(conn);
    8436:	4628      	mov	r0, r5
    8438:	f7fe fc6c 	bl	6d14 <slave_update_conn_param>
    843c:	e5fd      	b.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    843e:	68a3      	ldr	r3, [r4, #8]
    8440:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8444:	4630      	mov	r0, r6
    8446:	f001 ff75 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    844a:	4605      	mov	r5, r0
    844c:	b9a0      	cbnz	r0, 8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    844e:	4b19      	ldr	r3, [pc, #100]	; (84b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b4>)
    8450:	681b      	ldr	r3, [r3, #0]
    8452:	075b      	lsls	r3, r3, #29
    8454:	f43f ad09 	beq.w	7e6a <bt_recv+0x62>
    8458:	2201      	movs	r2, #1
    845a:	f04f 0300 	mov.w	r3, #0
    845e:	f362 0302 	bfi	r3, r2, #0, #3
    8462:	4915      	ldr	r1, [pc, #84]	; (84b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b8>)
    8464:	4a15      	ldr	r2, [pc, #84]	; (84bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4bc>)
    8466:	1a89      	subs	r1, r1, r2
    8468:	08c9      	lsrs	r1, r1, #3
    846a:	f360 03c5 	bfi	r3, r0, #3, #3
    846e:	f361 138f 	bfi	r3, r1, #6, #10
    8472:	4632      	mov	r2, r6
    8474:	4917      	ldr	r1, [pc, #92]	; (84d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d4>)
    8476:	e6e8      	b.n	824a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24a>
	    !atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    8478:	1d06      	adds	r6, r0, #4
    847a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    847e:	4630      	mov	r0, r6
    8480:	f7fe fb26 	bl	6ad0 <atomic_and>
	if (!IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) ||
    8484:	0607      	lsls	r7, r0, #24
    8486:	f57f add8 	bpl.w	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    848a:	4b09      	ldr	r3, [pc, #36]	; (84b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b0>)
    848c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    8490:	0698      	lsls	r0, r3, #26
    8492:	d5cc      	bpl.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    8494:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    8498:	0699      	lsls	r1, r3, #26
    849a:	d5c8      	bpl.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
		err = hci_le_set_data_len(conn);
    849c:	4628      	mov	r0, r5
    849e:	f7ff fa65 	bl	796c <hci_le_set_data_len.isra.36>
		if (!err) {
    84a2:	2800      	cmp	r0, #0
    84a4:	d1c3      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    84a6:	f44f 7180 	mov.w	r1, #256	; 0x100
    84aa:	4630      	mov	r0, r6
    84ac:	e71c      	b.n	82e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e8>
    84ae:	bf00      	nop
    84b0:	2000cc80 	.word	0x2000cc80
    84b4:	2000d74c 	.word	0x2000d74c
    84b8:	0002d070 	.word	0x0002d070
    84bc:	0002cff8 	.word	0x0002cff8
    84c0:	0002e909 	.word	0x0002e909
    84c4:	0002ef3c 	.word	0x0002ef3c
    84c8:	0002e8b5 	.word	0x0002e8b5
    84cc:	0002e8f7 	.word	0x0002e8f7
    84d0:	0002e8cd 	.word	0x0002e8cd
    84d4:	0002e8e0 	.word	0x0002e8e0
		le_ltk_request(buf);
    84d8:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    84da:	8837      	ldrh	r7, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    84dc:	4638      	mov	r0, r7
    84de:	f001 ff29 	bl	a334 <bt_conn_lookup_handle>
	if (!conn) {
    84e2:	4605      	mov	r5, r0
    84e4:	b9a0      	cbnz	r0, 8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    84e6:	4b89      	ldr	r3, [pc, #548]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    84e8:	681b      	ldr	r3, [r3, #0]
    84ea:	075a      	lsls	r2, r3, #29
    84ec:	f43f acbd 	beq.w	7e6a <bt_recv+0x62>
    84f0:	2201      	movs	r2, #1
    84f2:	f04f 0300 	mov.w	r3, #0
    84f6:	f362 0302 	bfi	r3, r2, #0, #3
    84fa:	4985      	ldr	r1, [pc, #532]	; (8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>)
    84fc:	4a85      	ldr	r2, [pc, #532]	; (8714 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x714>)
    84fe:	1a89      	subs	r1, r1, r2
    8500:	08c9      	lsrs	r1, r1, #3
    8502:	f360 03c5 	bfi	r3, r0, #3, #3
    8506:	f361 138f 	bfi	r3, r1, #6, #10
    850a:	463a      	mov	r2, r7
    850c:	4982      	ldr	r1, [pc, #520]	; (8718 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x718>)
    850e:	e69c      	b.n	824a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24a>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    8510:	f8d6 2002 	ldr.w	r2, [r6, #2]
    8514:	f8d6 3006 	ldr.w	r3, [r6, #6]
    8518:	4313      	orrs	r3, r2
    851a:	d134      	bne.n	8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
    851c:	8973      	ldrh	r3, [r6, #10]
    851e:	bb93      	cbnz	r3, 8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
    8520:	a908      	add	r1, sp, #32
    8522:	f007 feb5 	bl	10290 <bt_smp_get_tk>
    8526:	b370      	cbz	r0, 8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8528:	2112      	movs	r1, #18
    852a:	f242 001a 	movw	r0, #8218	; 0x201a
    852e:	f7fe fc15 	bl	6d5c <bt_hci_cmd_create>
		if (!buf) {
    8532:	4607      	mov	r7, r0
    8534:	b9b0      	cbnz	r0, 8564 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x564>
			BT_ERR("Out of command buffers");
    8536:	4b75      	ldr	r3, [pc, #468]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    8538:	681b      	ldr	r3, [r3, #0]
    853a:	0759      	lsls	r1, r3, #29
    853c:	f43f ad7d 	beq.w	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8540:	2301      	movs	r3, #1
    8542:	f04f 0200 	mov.w	r2, #0
    8546:	f363 0202 	bfi	r2, r3, #0, #3
    854a:	4972      	ldr	r1, [pc, #456]	; (8714 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x714>)
    854c:	4b70      	ldr	r3, [pc, #448]	; (8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>)
    854e:	1a5b      	subs	r3, r3, r1
    8550:	f367 02c5 	bfi	r2, r7, #3, #3
    8554:	08db      	lsrs	r3, r3, #3
    8556:	4970      	ldr	r1, [pc, #448]	; (8718 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x718>)
    8558:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Out of command buffers");
    855c:	486f      	ldr	r0, [pc, #444]	; (871c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x71c>)
    855e:	f7f9 fbfb 	bl	1d58 <log_1>
    8562:	e56a      	b.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
		cp = net_buf_add(buf, sizeof(*cp));
    8564:	2112      	movs	r1, #18
    8566:	3008      	adds	r0, #8
    8568:	f015 ffd0 	bl	1e50c <net_buf_simple_add>
		cp->handle = evt->handle;
    856c:	8833      	ldrh	r3, [r6, #0]
    856e:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    8572:	2210      	movs	r2, #16
    8574:	a908      	add	r1, sp, #32
    8576:	f7fd fc87 	bl	5e88 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    857a:	4639      	mov	r1, r7
    857c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8580:	f7ff f906 	bl	7790 <bt_hci_cmd_send>
    8584:	e559      	b.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	if (!conn->le.keys) {
    8586:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    8588:	2b00      	cmp	r3, #0
    858a:	f040 81ec 	bne.w	8966 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x966>
					     &conn->le.dst);
    858e:	f105 0748 	add.w	r7, r5, #72	; 0x48
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    8592:	463a      	mov	r2, r7
    8594:	7a29      	ldrb	r1, [r5, #8]
    8596:	2020      	movs	r0, #32
    8598:	f007 fefc 	bl	10394 <bt_keys_find>
    859c:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    859e:	2800      	cmp	r0, #0
    85a0:	f040 81e1 	bne.w	8966 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x966>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    85a4:	463a      	mov	r2, r7
    85a6:	7a29      	ldrb	r1, [r5, #8]
    85a8:	2001      	movs	r0, #1
    85aa:	f007 fef3 	bl	10394 <bt_keys_find>
    85ae:	6728      	str	r0, [r5, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    85b0:	2800      	cmp	r0, #0
    85b2:	d056      	beq.n	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
    85b4:	8941      	ldrh	r1, [r0, #10]
    85b6:	068b      	lsls	r3, r1, #26
    85b8:	d52c      	bpl.n	8614 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x614>
	    evt->rand == 0 && evt->ediv == 0) {
    85ba:	f8d6 2002 	ldr.w	r2, [r6, #2]
    85be:	f8d6 3006 	ldr.w	r3, [r6, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    85c2:	4313      	orrs	r3, r2
    85c4:	d126      	bne.n	8614 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x614>
	    evt->rand == 0 && evt->ediv == 0) {
    85c6:	f8b6 800a 	ldrh.w	r8, [r6, #10]
    85ca:	f1b8 0f00 	cmp.w	r8, #0
    85ce:	d121      	bne.n	8614 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x614>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    85d0:	2112      	movs	r1, #18
    85d2:	f242 001a 	movw	r0, #8218	; 0x201a
    85d6:	f7fe fbc1 	bl	6d5c <bt_hci_cmd_create>
		if (!buf) {
    85da:	4607      	mov	r7, r0
    85dc:	2800      	cmp	r0, #0
    85de:	d0aa      	beq.n	8536 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x536>
		cp = net_buf_add(buf, sizeof(*cp));
    85e0:	2112      	movs	r1, #18
    85e2:	3008      	adds	r0, #8
    85e4:	f015 ff92 	bl	1e50c <net_buf_simple_add>
		cp->handle = evt->handle;
    85e8:	8833      	ldrh	r3, [r6, #0]
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    85ea:	6f29      	ldr	r1, [r5, #112]	; 0x70
		cp->handle = evt->handle;
    85ec:	4606      	mov	r6, r0
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    85ee:	3116      	adds	r1, #22
		cp->handle = evt->handle;
    85f0:	f826 3b02 	strh.w	r3, [r6], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    85f4:	f811 2c0e 	ldrb.w	r2, [r1, #-14]
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    85f8:	4630      	mov	r0, r6
    85fa:	f7fd fc45 	bl	5e88 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    85fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    8600:	7a18      	ldrb	r0, [r3, #8]
    8602:	280f      	cmp	r0, #15
    8604:	d8b9      	bhi.n	857a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57a>
			(void)memset(cp->ltk + conn->le.keys->enc_size, 0,
    8606:	f1c0 0210 	rsb	r2, r0, #16
    860a:	4641      	mov	r1, r8
    860c:	4430      	add	r0, r6
    860e:	f7fd fc68 	bl	5ee2 <memset>
    8612:	e7b2      	b.n	857a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    8614:	07cf      	lsls	r7, r1, #31
    8616:	d524      	bpl.n	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
	    !memcmp(conn->le.keys->slave_ltk.rand, &evt->rand, 8) &&
    8618:	2208      	movs	r2, #8
    861a:	1cb1      	adds	r1, r6, #2
    861c:	3064      	adds	r0, #100	; 0x64
    861e:	f7fd fc0c 	bl	5e3a <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    8622:	b9f0      	cbnz	r0, 8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &evt->ediv, 2)) {
    8624:	6f28      	ldr	r0, [r5, #112]	; 0x70
    8626:	2202      	movs	r2, #2
    8628:	f106 010a 	add.w	r1, r6, #10
    862c:	306c      	adds	r0, #108	; 0x6c
    862e:	f7fd fc04 	bl	5e3a <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &evt->rand, 8) &&
    8632:	4680      	mov	r8, r0
    8634:	b9a8      	cbnz	r0, 8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8636:	2112      	movs	r1, #18
    8638:	f242 001a 	movw	r0, #8218	; 0x201a
    863c:	f7fe fb8e 	bl	6d5c <bt_hci_cmd_create>
		if (!buf) {
    8640:	4607      	mov	r7, r0
    8642:	2800      	cmp	r0, #0
    8644:	f43f af77 	beq.w	8536 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x536>
		cp = net_buf_add(buf, sizeof(*cp));
    8648:	2112      	movs	r1, #18
    864a:	3008      	adds	r0, #8
    864c:	f015 ff5e 	bl	1e50c <net_buf_simple_add>
		cp->handle = evt->handle;
    8650:	8833      	ldrh	r3, [r6, #0]
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    8652:	6f29      	ldr	r1, [r5, #112]	; 0x70
		cp->handle = evt->handle;
    8654:	4606      	mov	r6, r0
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    8656:	316e      	adds	r1, #110	; 0x6e
		cp->handle = evt->handle;
    8658:	f826 3b02 	strh.w	r3, [r6], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    865c:	f811 2c66 	ldrb.w	r2, [r1, #-102]
    8660:	e7ca      	b.n	85f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    8662:	2102      	movs	r1, #2
    8664:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    8668:	8837      	ldrh	r7, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    866a:	f7fe fb77 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    866e:	4606      	mov	r6, r0
    8670:	b998      	cbnz	r0, 869a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69a>
		BT_ERR("Out of command buffers");
    8672:	4b26      	ldr	r3, [pc, #152]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	075a      	lsls	r2, r3, #29
    8678:	f43f acdf 	beq.w	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    867c:	2301      	movs	r3, #1
    867e:	f04f 0200 	mov.w	r2, #0
    8682:	f363 0202 	bfi	r2, r3, #0, #3
    8686:	4923      	ldr	r1, [pc, #140]	; (8714 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x714>)
    8688:	4b21      	ldr	r3, [pc, #132]	; (8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>)
    868a:	1a5b      	subs	r3, r3, r1
    868c:	f360 02c5 	bfi	r2, r0, #3, #3
    8690:	08db      	lsrs	r3, r3, #3
    8692:	f363 128f 	bfi	r2, r3, #6, #10
    8696:	4922      	ldr	r1, [pc, #136]	; (8720 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x720>)
    8698:	e760      	b.n	855c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55c>
	cp = net_buf_add(buf, sizeof(*cp));
    869a:	2102      	movs	r1, #2
    869c:	3008      	adds	r0, #8
    869e:	f015 ff35 	bl	1e50c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    86a2:	4631      	mov	r1, r6
	cp->handle = handle;
    86a4:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    86a6:	f242 001b 	movw	r0, #8219	; 0x201b
    86aa:	e769      	b.n	8580 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x580>
		le_pkey_complete(buf);
    86ac:	68a6      	ldr	r6, [r4, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    86ae:	481d      	ldr	r0, [pc, #116]	; (8724 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x724>)
    86b0:	f06f 0120 	mvn.w	r1, #32
    86b4:	f7fe fa0c 	bl	6ad0 <atomic_and>
	if (!evt->status) {
    86b8:	7833      	ldrb	r3, [r6, #0]
    86ba:	b943      	cbnz	r3, 86ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ce>
		memcpy(pub_key, evt->key, 64);
    86bc:	1c71      	adds	r1, r6, #1
    86be:	2240      	movs	r2, #64	; 0x40
    86c0:	4819      	ldr	r0, [pc, #100]	; (8728 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x728>)
    86c2:	f7fd fbe1 	bl	5e88 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    86c6:	2110      	movs	r1, #16
    86c8:	4816      	ldr	r0, [pc, #88]	; (8724 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x724>)
    86ca:	f7fe f9f2 	bl	6ab2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    86ce:	4b17      	ldr	r3, [pc, #92]	; (872c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72c>)
    86d0:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    86d2:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    86d4:	2d00      	cmp	r5, #0
    86d6:	f43f abc8 	beq.w	7e6a <bt_recv+0x62>
		cb->func(evt->status ? NULL : evt->key);
    86da:	7832      	ldrb	r2, [r6, #0]
    86dc:	682b      	ldr	r3, [r5, #0]
    86de:	2a00      	cmp	r2, #0
    86e0:	bf0c      	ite	eq
    86e2:	4638      	moveq	r0, r7
    86e4:	2000      	movne	r0, #0
    86e6:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    86e8:	686d      	ldr	r5, [r5, #4]
    86ea:	e7f3      	b.n	86d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d4>
	if (dh_key_cb) {
    86ec:	4d10      	ldr	r5, [pc, #64]	; (8730 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x730>)
    86ee:	682a      	ldr	r2, [r5, #0]
    86f0:	2a00      	cmp	r2, #0
    86f2:	f43f abba 	beq.w	7e6a <bt_recv+0x62>
		le_dhkey_complete(buf);
    86f6:	68a0      	ldr	r0, [r4, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    86f8:	7803      	ldrb	r3, [r0, #0]
    86fa:	b92b      	cbnz	r3, 8708 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x708>
    86fc:	3001      	adds	r0, #1
    86fe:	4790      	blx	r2
		dh_key_cb = NULL;
    8700:	2300      	movs	r3, #0
    8702:	602b      	str	r3, [r5, #0]
    8704:	f7ff bbb1 	b.w	7e6a <bt_recv+0x62>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    8708:	2000      	movs	r0, #0
    870a:	e7f8      	b.n	86fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6fe>
    870c:	2000d74c 	.word	0x2000d74c
    8710:	0002d070 	.word	0x0002d070
    8714:	0002cff8 	.word	0x0002cff8
    8718:	0002e99f 	.word	0x0002e99f
    871c:	0002ef64 	.word	0x0002ef64
    8720:	0002e98e 	.word	0x0002e98e
    8724:	2000ccf0 	.word	0x2000ccf0
    8728:	200009a0 	.word	0x200009a0
    872c:	200009e0 	.word	0x200009e0
    8730:	2000099c 	.word	0x2000099c
	u8_t num_reports = net_buf_pull_u8(buf);
    8734:	4630      	mov	r0, r6
    8736:	f015 ff41 	bl	1e5bc <net_buf_simple_pull_u8>
			bt_addr_le_copy(&id_addr,
    873a:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8990 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x990>
	u8_t num_reports = net_buf_pull_u8(buf);
    873e:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    8740:	9b02      	ldr	r3, [sp, #8]
    8742:	3b01      	subs	r3, #1
    8744:	b2db      	uxtb	r3, r3
    8746:	2bff      	cmp	r3, #255	; 0xff
    8748:	9302      	str	r3, [sp, #8]
    874a:	f43f ab8e 	beq.w	7e6a <bt_recv+0x62>
		info = (void *)buf->data;
    874e:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    8750:	2109      	movs	r1, #9
    8752:	4630      	mov	r0, r6
    8754:	f015 ff2a 	bl	1e5ac <net_buf_simple_pull>
		rssi = info->data[info->length];
    8758:	7a2b      	ldrb	r3, [r5, #8]
    875a:	442b      	add	r3, r5
    875c:	f105 0901 	add.w	r9, r5, #1
    8760:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8764:	786b      	ldrb	r3, [r5, #1]
    8766:	3b02      	subs	r3, #2
    8768:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    876a:	4649      	mov	r1, r9
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    876c:	f200 809a 	bhi.w	88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
			bt_addr_le_copy(&id_addr, &info->addr);
    8770:	a808      	add	r0, sp, #32
    8772:	f7fe f99b 	bl	6aac <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8776:	f89d 3020 	ldrb.w	r3, [sp, #32]
    877a:	3b02      	subs	r3, #2
    877c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    8780:	4b7a      	ldr	r3, [pc, #488]	; (896c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96c>)
    8782:	461f      	mov	r7, r3
    8784:	681b      	ldr	r3, [r3, #0]
    8786:	b1ab      	cbz	r3, 87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8788:	4630      	mov	r0, r6
    878a:	f015 ff27 	bl	1e5dc <net_buf_simple_headroom>
	state->len = buf->len;
    878e:	89a3      	ldrh	r3, [r4, #12]
    8790:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
    8792:	7a2b      	ldrb	r3, [r5, #8]
    8794:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    8796:	683b      	ldr	r3, [r7, #0]
    8798:	782a      	ldrb	r2, [r5, #0]
	state->offset = net_buf_simple_headroom(buf);
    879a:	4682      	mov	sl, r0
    879c:	461f      	mov	r7, r3
    879e:	fa4f f18b 	sxtb.w	r1, fp
    87a2:	4633      	mov	r3, r6
    87a4:	a808      	add	r0, sp, #32
    87a6:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    87a8:	6923      	ldr	r3, [r4, #16]
    87aa:	fa13 f38a 	uxtah	r3, r3, sl
    87ae:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    87b0:	9b03      	ldr	r3, [sp, #12]
    87b2:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    87b4:	210b      	movs	r1, #11
    87b6:	486e      	ldr	r0, [pc, #440]	; (8970 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x970>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    87b8:	782b      	ldrb	r3, [r5, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    87ba:	f7fe faa1 	bl	6d00 <atomic_test_bit>
    87be:	4682      	mov	sl, r0
    87c0:	2800      	cmp	r0, #0
    87c2:	d169      	bne.n	8898 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x898>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    87c4:	2b01      	cmp	r3, #1
    87c6:	d867      	bhi.n	8898 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x898>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    87c8:	2101      	movs	r1, #1
    87ca:	a808      	add	r0, sp, #32
    87cc:	f001 fe02 	bl	a3d4 <bt_conn_lookup_state_le>
	if (!conn) {
    87d0:	4607      	mov	r7, r0
    87d2:	2800      	cmp	r0, #0
    87d4:	d060      	beq.n	8898 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x898>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    87d6:	210a      	movs	r1, #10
    87d8:	4865      	ldr	r0, [pc, #404]	; (8970 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x970>)
    87da:	f7fe fa91 	bl	6d00 <atomic_test_bit>
    87de:	2800      	cmp	r0, #0
    87e0:	d16c      	bne.n	88bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8bc>
		const bt_addr_le_t *addr = &bt_dev.id_addr[conn->id];
    87e2:	7a3b      	ldrb	r3, [r7, #8]
    87e4:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
    87e8:	eb08 0a00 	add.w	sl, r8, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    87ec:	f818 3000 	ldrb.w	r3, [r8, r0]
    87f0:	2b01      	cmp	r3, #1
    87f2:	d103      	bne.n	87fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fc>
			set_random_address(&addr->a);
    87f4:	3001      	adds	r0, #1
    87f6:	4440      	add	r0, r8
    87f8:	f7fe fbc4 	bl	6f84 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, addr);
    87fc:	4651      	mov	r1, sl
    87fe:	f107 004f 	add.w	r0, r7, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    8802:	f107 0a56 	add.w	sl, r7, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, addr);
    8806:	f7fe f951 	bl	6aac <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    880a:	4649      	mov	r1, r9
    880c:	4650      	mov	r0, sl
    880e:	f7fe f94d 	bl	6aac <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    8812:	2119      	movs	r1, #25
    8814:	f242 000d 	movw	r0, #8205	; 0x200d
    8818:	f7fe faa0 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    881c:	4683      	mov	fp, r0
    881e:	2800      	cmp	r0, #0
    8820:	d051      	beq.n	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
	cp = net_buf_add(buf, sizeof(*cp));
    8822:	2119      	movs	r1, #25
    8824:	3008      	adds	r0, #8
    8826:	f015 fe71 	bl	1e50c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    882a:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    882c:	4681      	mov	r9, r0
	(void)memset(cp, 0, sizeof(*cp));
    882e:	2100      	movs	r1, #0
    8830:	f7fd fb57 	bl	5ee2 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    8834:	2200      	movs	r2, #0
    8836:	2360      	movs	r3, #96	; 0x60
    8838:	f889 3000 	strb.w	r3, [r9]
    883c:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    8840:	f889 3002 	strb.w	r3, [r9, #2]
    8844:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    8848:	4651      	mov	r1, sl
    884a:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    884e:	9203      	str	r2, [sp, #12]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    8850:	f7fe f92c 	bl	6aac <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    8854:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
    8858:	f889 300c 	strb.w	r3, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    885c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    8860:	f8a9 300d 	strh.w	r3, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    8864:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    8868:	f8a9 300f 	strh.w	r3, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    886c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    8870:	f8a9 3011 	strh.w	r3, [r9, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    8874:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    8878:	f8a9 3013 	strh.w	r3, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    887c:	9a03      	ldr	r2, [sp, #12]
    887e:	4659      	mov	r1, fp
    8880:	f242 000d 	movw	r0, #8205	; 0x200d
    8884:	f7fe fa9a 	bl	6dbc <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    8888:	b9e8      	cbnz	r0, 88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    888a:	4638      	mov	r0, r7
    888c:	2103      	movs	r1, #3
    888e:	f001 fc61 	bl	a154 <bt_conn_set_state>
	bt_conn_unref(conn);
    8892:	4638      	mov	r0, r7
    8894:	f001 fdc0 	bl	a418 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    8898:	7a29      	ldrb	r1, [r5, #8]
    889a:	4630      	mov	r0, r6
    889c:	3101      	adds	r1, #1
    889e:	f015 fe85 	bl	1e5ac <net_buf_simple_pull>
    88a2:	e74d      	b.n	8740 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x740>
		keys = bt_keys_find_irk(id, addr);
    88a4:	f898 0008 	ldrb.w	r0, [r8, #8]
    88a8:	f007 fd9c 	bl	103e4 <bt_keys_find_irk>
		if (keys) {
    88ac:	b120      	cbz	r0, 88b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b8>
			return &keys->addr;
    88ae:	1c41      	adds	r1, r0, #1
			bt_addr_le_copy(&id_addr,
    88b0:	a808      	add	r0, sp, #32
    88b2:	f7fe f8fb 	bl	6aac <bt_addr_le_copy>
    88b6:	e763      	b.n	8780 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x780>
	return addr;
    88b8:	4649      	mov	r1, r9
    88ba:	e7f9      	b.n	88b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b0>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    88bc:	4650      	mov	r0, sl
    88be:	f7fe fb01 	bl	6ec4 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    88c2:	2800      	cmp	r0, #0
    88c4:	d08d      	beq.n	87e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e2>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    88c6:	231f      	movs	r3, #31
    88c8:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    88ca:	2100      	movs	r1, #0
    88cc:	4638      	mov	r0, r7
    88ce:	f001 fc41 	bl	a154 <bt_conn_set_state>
	bt_conn_unref(conn);
    88d2:	4638      	mov	r0, r7
    88d4:	f001 fda0 	bl	a418 <bt_conn_unref>
	bt_le_scan_update(false);
    88d8:	2000      	movs	r0, #0
    88da:	f7fe fff5 	bl	78c8 <bt_le_scan_update>
    88de:	e7db      	b.n	8898 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x898>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    88e0:	4b24      	ldr	r3, [pc, #144]	; (8974 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x974>)
    88e2:	681b      	ldr	r3, [r3, #0]
    88e4:	f003 0307 	and.w	r3, r3, #7
    88e8:	2b01      	cmp	r3, #1
    88ea:	f67f aabe 	bls.w	7e6a <bt_recv+0x62>
    88ee:	2302      	movs	r3, #2
    88f0:	f04f 0500 	mov.w	r5, #0
    88f4:	f363 0502 	bfi	r5, r3, #0, #3
    88f8:	4a1f      	ldr	r2, [pc, #124]	; (8978 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x978>)
    88fa:	4b20      	ldr	r3, [pc, #128]	; (897c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x97c>)
    88fc:	68a0      	ldr	r0, [r4, #8]
    88fe:	1ad2      	subs	r2, r2, r3
    8900:	4b1f      	ldr	r3, [pc, #124]	; (8980 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x980>)
    8902:	08d2      	lsrs	r2, r2, #3
    8904:	e9cd 3108 	strd	r3, r1, [sp, #32]
    8908:	f36f 05c5 	bfc	r5, #3, #3
    890c:	89a1      	ldrh	r1, [r4, #12]
    890e:	910a      	str	r1, [sp, #40]	; 0x28
    8910:	f362 158f 	bfi	r5, r2, #6, #10
    8914:	f7fd ff9c 	bl	6850 <bt_hex_real>
    8918:	f7f9 fbb0 	bl	207c <log_strdup>
    891c:	900b      	str	r0, [sp, #44]	; 0x2c
    891e:	4819      	ldr	r0, [pc, #100]	; (8984 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x984>)
    8920:	462b      	mov	r3, r5
    8922:	2204      	movs	r2, #4
    8924:	a908      	add	r1, sp, #32
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    8926:	f7f9 fa5e 	bl	1de6 <log_n>
    892a:	f7ff ba9e 	b.w	7e6a <bt_recv+0x62>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    892e:	4b11      	ldr	r3, [pc, #68]	; (8974 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x974>)
    8930:	681b      	ldr	r3, [r3, #0]
    8932:	075b      	lsls	r3, r3, #29
    8934:	d010      	beq.n	8958 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x958>
    8936:	2101      	movs	r1, #1
    8938:	f04f 0300 	mov.w	r3, #0
    893c:	f361 0302 	bfi	r3, r1, #0, #3
    8940:	480e      	ldr	r0, [pc, #56]	; (897c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x97c>)
    8942:	490d      	ldr	r1, [pc, #52]	; (8978 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x978>)
    8944:	1a09      	subs	r1, r1, r0
    8946:	08c9      	lsrs	r1, r1, #3
    8948:	f36f 03c5 	bfc	r3, #3, #3
    894c:	f361 138f 	bfi	r3, r1, #6, #10
    8950:	480d      	ldr	r0, [pc, #52]	; (8988 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x988>)
    8952:	490e      	ldr	r1, [pc, #56]	; (898c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98c>)
    8954:	f7f9 fa14 	bl	1d80 <log_2>
		net_buf_unref(buf);
    8958:	4620      	mov	r0, r4
    895a:	f015 fd79 	bl	1e450 <net_buf_unref>
		return -EINVAL;
    895e:	f06f 0015 	mvn.w	r0, #21
    8962:	f7ff ba86 	b.w	7e72 <bt_recv+0x6a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    8966:	6f28      	ldr	r0, [r5, #112]	; 0x70
    8968:	e624      	b.n	85b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b4>
    896a:	bf00      	nop
    896c:	200009e8 	.word	0x200009e8
    8970:	2000ccf0 	.word	0x2000ccf0
    8974:	2000d74c 	.word	0x2000d74c
    8978:	0002d070 	.word	0x0002d070
    897c:	0002cff8 	.word	0x0002cff8
    8980:	0002e9bb 	.word	0x0002e9bb
    8984:	0002ef7f 	.word	0x0002ef7f
    8988:	0002efce 	.word	0x0002efce
    898c:	0002ea2b 	.word	0x0002ea2b
    8990:	2000cc80 	.word	0x2000cc80

00008994 <bt_recv_prio>:
{
    8994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8998:	7d05      	ldrb	r5, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    899a:	f8d0 9008 	ldr.w	r9, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    899e:	2d01      	cmp	r5, #1
{
    89a0:	b085      	sub	sp, #20
    89a2:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    89a4:	d01a      	beq.n	89dc <bt_recv_prio+0x48>
    89a6:	4b88      	ldr	r3, [pc, #544]	; (8bc8 <bt_recv_prio+0x234>)
    89a8:	681b      	ldr	r3, [r3, #0]
    89aa:	075d      	lsls	r5, r3, #29
    89ac:	d010      	beq.n	89d0 <bt_recv_prio+0x3c>
    89ae:	2301      	movs	r3, #1
    89b0:	f04f 0200 	mov.w	r2, #0
    89b4:	f363 0202 	bfi	r2, r3, #0, #3
    89b8:	4984      	ldr	r1, [pc, #528]	; (8bcc <bt_recv_prio+0x238>)
    89ba:	4b85      	ldr	r3, [pc, #532]	; (8bd0 <bt_recv_prio+0x23c>)
    89bc:	4885      	ldr	r0, [pc, #532]	; (8bd4 <bt_recv_prio+0x240>)
    89be:	1a5b      	subs	r3, r3, r1
    89c0:	f36f 02c5 	bfc	r2, #3, #3
    89c4:	08db      	lsrs	r3, r3, #3
    89c6:	4984      	ldr	r1, [pc, #528]	; (8bd8 <bt_recv_prio+0x244>)
    89c8:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ASSERT(0);
    89cc:	f7f9 f9c4 	bl	1d58 <log_1>
    89d0:	4040      	eors	r0, r0
    89d2:	f380 8811 	msr	BASEPRI, r0
    89d6:	f04f 0004 	mov.w	r0, #4
    89da:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    89dc:	8983      	ldrh	r3, [r0, #12]
    89de:	2b01      	cmp	r3, #1
    89e0:	d812      	bhi.n	8a08 <bt_recv_prio+0x74>
    89e2:	4b79      	ldr	r3, [pc, #484]	; (8bc8 <bt_recv_prio+0x234>)
    89e4:	681b      	ldr	r3, [r3, #0]
    89e6:	075c      	lsls	r4, r3, #29
    89e8:	d0f2      	beq.n	89d0 <bt_recv_prio+0x3c>
    89ea:	4978      	ldr	r1, [pc, #480]	; (8bcc <bt_recv_prio+0x238>)
    89ec:	4b78      	ldr	r3, [pc, #480]	; (8bd0 <bt_recv_prio+0x23c>)
    89ee:	487b      	ldr	r0, [pc, #492]	; (8bdc <bt_recv_prio+0x248>)
    89f0:	f04f 0200 	mov.w	r2, #0
    89f4:	1a5b      	subs	r3, r3, r1
    89f6:	f365 0202 	bfi	r2, r5, #0, #3
    89fa:	f36f 02c5 	bfc	r2, #3, #3
    89fe:	08db      	lsrs	r3, r3, #3
    8a00:	f363 128f 	bfi	r2, r3, #6, #10
    8a04:	4974      	ldr	r1, [pc, #464]	; (8bd8 <bt_recv_prio+0x244>)
    8a06:	e7e1      	b.n	89cc <bt_recv_prio+0x38>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    8a08:	f899 3000 	ldrb.w	r3, [r9]
    8a0c:	2b13      	cmp	r3, #19
    8a0e:	d82c      	bhi.n	8a6a <bt_recv_prio+0xd6>
    8a10:	fa05 f303 	lsl.w	r3, r5, r3
    8a14:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    8a18:	d027      	beq.n	8a6a <bt_recv_prio+0xd6>
	net_buf_pull(buf, sizeof(*hdr));
    8a1a:	f100 0608 	add.w	r6, r0, #8
    8a1e:	2102      	movs	r1, #2
    8a20:	4630      	mov	r0, r6
    8a22:	f015 fdc3 	bl	1e5ac <net_buf_simple_pull>
	switch (hdr->evt) {
    8a26:	f899 3000 	ldrb.w	r3, [r9]
    8a2a:	2b0f      	cmp	r3, #15
    8a2c:	d031      	beq.n	8a92 <bt_recv_prio+0xfe>
    8a2e:	2b13      	cmp	r3, #19
    8a30:	d03f      	beq.n	8ab2 <bt_recv_prio+0x11e>
    8a32:	2b0e      	cmp	r3, #14
    8a34:	f040 80b0 	bne.w	8b98 <bt_recv_prio+0x204>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    8a38:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    8a3a:	2103      	movs	r1, #3
    8a3c:	4630      	mov	r0, r6
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    8a3e:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    8a42:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    8a44:	f015 fdb2 	bl	1e5ac <net_buf_simple_pull>
	status = buf->data[0];
    8a48:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    8a4a:	4622      	mov	r2, r4
    8a4c:	7819      	ldrb	r1, [r3, #0]
    8a4e:	4638      	mov	r0, r7
    8a50:	f7fe f8bc 	bl	6bcc <hci_cmd_done>
	if (ncmd) {
    8a54:	b115      	cbz	r5, 8a5c <bt_recv_prio+0xc8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8a56:	4862      	ldr	r0, [pc, #392]	; (8be0 <bt_recv_prio+0x24c>)
    8a58:	f023 fc91 	bl	2c37e <_impl_k_sem_give>
	net_buf_unref(buf);
    8a5c:	4620      	mov	r0, r4
    8a5e:	f015 fcf7 	bl	1e450 <net_buf_unref>
}
    8a62:	2000      	movs	r0, #0
    8a64:	b005      	add	sp, #20
    8a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    8a6a:	4b57      	ldr	r3, [pc, #348]	; (8bc8 <bt_recv_prio+0x234>)
    8a6c:	681b      	ldr	r3, [r3, #0]
    8a6e:	0758      	lsls	r0, r3, #29
    8a70:	d0ae      	beq.n	89d0 <bt_recv_prio+0x3c>
    8a72:	2301      	movs	r3, #1
    8a74:	f04f 0200 	mov.w	r2, #0
    8a78:	f363 0202 	bfi	r2, r3, #0, #3
    8a7c:	4953      	ldr	r1, [pc, #332]	; (8bcc <bt_recv_prio+0x238>)
    8a7e:	4b54      	ldr	r3, [pc, #336]	; (8bd0 <bt_recv_prio+0x23c>)
    8a80:	4858      	ldr	r0, [pc, #352]	; (8be4 <bt_recv_prio+0x250>)
    8a82:	1a5b      	subs	r3, r3, r1
    8a84:	f36f 02c5 	bfc	r2, #3, #3
    8a88:	08db      	lsrs	r3, r3, #3
    8a8a:	f363 128f 	bfi	r2, r3, #6, #10
    8a8e:	4952      	ldr	r1, [pc, #328]	; (8bd8 <bt_recv_prio+0x244>)
    8a90:	e79c      	b.n	89cc <bt_recv_prio+0x38>
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    8a92:	68a5      	ldr	r5, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    8a94:	f8b5 8002 	ldrh.w	r8, [r5, #2]
	u8_t ncmd = evt->ncmd;
    8a98:	786f      	ldrb	r7, [r5, #1]
	net_buf_pull(buf, sizeof(*evt));
    8a9a:	2104      	movs	r1, #4
    8a9c:	4630      	mov	r0, r6
    8a9e:	f015 fd85 	bl	1e5ac <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    8aa2:	4622      	mov	r2, r4
    8aa4:	7829      	ldrb	r1, [r5, #0]
    8aa6:	4640      	mov	r0, r8
    8aa8:	f7fe f890 	bl	6bcc <hci_cmd_done>
	if (ncmd) {
    8aac:	2f00      	cmp	r7, #0
    8aae:	d0d5      	beq.n	8a5c <bt_recv_prio+0xc8>
    8ab0:	e7d1      	b.n	8a56 <bt_recv_prio+0xc2>
		hci_num_completed_packets(buf);
    8ab2:	68a3      	ldr	r3, [r4, #8]
    8ab4:	9301      	str	r3, [sp, #4]
    8ab6:	4d46      	ldr	r5, [pc, #280]	; (8bd0 <bt_recv_prio+0x23c>)
				BT_ERR("packets count mismatch");
    8ab8:	4b44      	ldr	r3, [pc, #272]	; (8bcc <bt_recv_prio+0x238>)
    8aba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8bc8 <bt_recv_prio+0x234>
    8abe:	1aed      	subs	r5, r5, r3
    8ac0:	f3c5 03c9 	ubfx	r3, r5, #3, #10
    8ac4:	9302      	str	r3, [sp, #8]
	for (i = 0; i < evt->num_handles; i++) {
    8ac6:	2600      	movs	r6, #0
    8ac8:	9b01      	ldr	r3, [sp, #4]
    8aca:	781b      	ldrb	r3, [r3, #0]
    8acc:	429e      	cmp	r6, r3
    8ace:	dac5      	bge.n	8a5c <bt_recv_prio+0xc8>
    8ad0:	9b01      	ldr	r3, [sp, #4]
    8ad2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8ad6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    8ada:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    8ade:	f04f 0320 	mov.w	r3, #32
    8ae2:	f3ef 8b11 	mrs	fp, BASEPRI
    8ae6:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    8aea:	4610      	mov	r0, r2
    8aec:	9203      	str	r2, [sp, #12]
    8aee:	f001 fc21 	bl	a334 <bt_conn_lookup_handle>
		if (!conn) {
    8af2:	9a03      	ldr	r2, [sp, #12]
    8af4:	4682      	mov	sl, r0
    8af6:	b9a0      	cbnz	r0, 8b22 <bt_recv_prio+0x18e>
			BT_ERR("No connection for handle %u", handle);
    8af8:	f8d9 1000 	ldr.w	r1, [r9]
    8afc:	0749      	lsls	r1, r1, #29
    8afe:	d00c      	beq.n	8b1a <bt_recv_prio+0x186>
    8b00:	2101      	movs	r1, #1
    8b02:	f361 0702 	bfi	r7, r1, #0, #3
    8b06:	9b02      	ldr	r3, [sp, #8]
    8b08:	4937      	ldr	r1, [pc, #220]	; (8be8 <bt_recv_prio+0x254>)
    8b0a:	f360 07c5 	bfi	r7, r0, #3, #3
    8b0e:	f363 178f 	bfi	r7, r3, #6, #10
    8b12:	463b      	mov	r3, r7
    8b14:	4835      	ldr	r0, [pc, #212]	; (8bec <bt_recv_prio+0x258>)
    8b16:	f7f9 f933 	bl	1d80 <log_2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    8b1a:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    8b1e:	3601      	adds	r6, #1
    8b20:	e7d2      	b.n	8ac8 <bt_recv_prio+0x134>
    8b22:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    8b26:	f100 0b1c 	add.w	fp, r0, #28
		while (count--) {
    8b2a:	b1dd      	cbz	r5, 8b64 <bt_recv_prio+0x1d0>
	__asm__ volatile(
    8b2c:	f04f 0220 	mov.w	r2, #32
    8b30:	f3ef 8011 	mrs	r0, BASEPRI
    8b34:	f382 8811 	msr	BASEPRI, r2
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    8b38:	f8da 1014 	ldr.w	r1, [sl, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8b3c:	b9b1      	cbnz	r1, 8b6c <bt_recv_prio+0x1d8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    8b3e:	f380 8811 	msr	BASEPRI, r0
				BT_ERR("packets count mismatch");
    8b42:	f8d9 2000 	ldr.w	r2, [r9]
    8b46:	0752      	lsls	r2, r2, #29
    8b48:	d00c      	beq.n	8b64 <bt_recv_prio+0x1d0>
    8b4a:	2201      	movs	r2, #1
    8b4c:	f362 0802 	bfi	r8, r2, #0, #3
    8b50:	9b02      	ldr	r3, [sp, #8]
    8b52:	4827      	ldr	r0, [pc, #156]	; (8bf0 <bt_recv_prio+0x25c>)
    8b54:	f361 08c5 	bfi	r8, r1, #3, #3
    8b58:	f363 188f 	bfi	r8, r3, #6, #10
    8b5c:	4642      	mov	r2, r8
    8b5e:	4922      	ldr	r1, [pc, #136]	; (8be8 <bt_recv_prio+0x254>)
    8b60:	f7f9 f8fa 	bl	1d58 <log_1>
		bt_conn_unref(conn);
    8b64:	4650      	mov	r0, sl
    8b66:	f001 fc57 	bl	a418 <bt_conn_unref>
    8b6a:	e7d8      	b.n	8b1e <bt_recv_prio+0x18a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8b6c:	f8da 2018 	ldr.w	r2, [sl, #24]
	return node->next;
    8b70:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    8b72:	f8ca 3014 	str.w	r3, [sl, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8b76:	4291      	cmp	r1, r2
	list->tail = node;
    8b78:	bf08      	it	eq
    8b7a:	f8ca 3018 	streq.w	r3, [sl, #24]
    8b7e:	f380 8811 	msr	BASEPRI, r0
			k_fifo_put(&conn->tx_notify, node);
    8b82:	4658      	mov	r0, fp
    8b84:	f023 f8dc 	bl	2bd40 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    8b88:	4650      	mov	r0, sl
    8b8a:	f000 ff7f 	bl	9a8c <bt_conn_get_pkts>
    8b8e:	f023 fbf6 	bl	2c37e <_impl_k_sem_give>
    8b92:	1e6a      	subs	r2, r5, #1
    8b94:	b295      	uxth	r5, r2
    8b96:	e7c8      	b.n	8b2a <bt_recv_prio+0x196>
		net_buf_unref(buf);
    8b98:	4620      	mov	r0, r4
    8b9a:	f015 fc59 	bl	1e450 <net_buf_unref>
		BT_ASSERT(0);
    8b9e:	4b0a      	ldr	r3, [pc, #40]	; (8bc8 <bt_recv_prio+0x234>)
    8ba0:	681b      	ldr	r3, [r3, #0]
    8ba2:	075b      	lsls	r3, r3, #29
    8ba4:	f43f af14 	beq.w	89d0 <bt_recv_prio+0x3c>
    8ba8:	4908      	ldr	r1, [pc, #32]	; (8bcc <bt_recv_prio+0x238>)
    8baa:	4b09      	ldr	r3, [pc, #36]	; (8bd0 <bt_recv_prio+0x23c>)
    8bac:	4811      	ldr	r0, [pc, #68]	; (8bf4 <bt_recv_prio+0x260>)
    8bae:	f04f 0200 	mov.w	r2, #0
    8bb2:	1a5b      	subs	r3, r3, r1
    8bb4:	f365 0202 	bfi	r2, r5, #0, #3
    8bb8:	f36f 02c5 	bfc	r2, #3, #3
    8bbc:	08db      	lsrs	r3, r3, #3
    8bbe:	f363 128f 	bfi	r2, r3, #6, #10
    8bc2:	4905      	ldr	r1, [pc, #20]	; (8bd8 <bt_recv_prio+0x244>)
    8bc4:	e702      	b.n	89cc <bt_recv_prio+0x38>
    8bc6:	bf00      	nop
    8bc8:	2000d74c 	.word	0x2000d74c
    8bcc:	0002cff8 	.word	0x0002cff8
    8bd0:	0002d070 	.word	0x0002d070
    8bd4:	0002efe6 	.word	0x0002efe6
    8bd8:	0002ea33 	.word	0x0002ea33
    8bdc:	0002f01e 	.word	0x0002f01e
    8be0:	2000cd28 	.word	0x2000cd28
    8be4:	0002f04c 	.word	0x0002f04c
    8be8:	0002e871 	.word	0x0002e871
    8bec:	0002f07e 	.word	0x0002f07e
    8bf0:	0002f09e 	.word	0x0002f09e
    8bf4:	0002f0b9 	.word	0x0002f0b9

00008bf8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    8bf8:	4a08      	ldr	r2, [pc, #32]	; (8c1c <bt_hci_driver_register+0x24>)
    8bfa:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    8bfe:	b93b      	cbnz	r3, 8c10 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    8c00:	68c1      	ldr	r1, [r0, #12]
    8c02:	b141      	cbz	r1, 8c16 <bt_hci_driver_register+0x1e>
    8c04:	6901      	ldr	r1, [r0, #16]
    8c06:	b131      	cbz	r1, 8c16 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    8c08:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    8c0c:	4618      	mov	r0, r3
    8c0e:	4770      	bx	lr
		return -EALREADY;
    8c10:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8c14:	4770      	bx	lr
		return -EINVAL;
    8c16:	f06f 0015 	mvn.w	r0, #21
}
    8c1a:	4770      	bx	lr
    8c1c:	2000cc80 	.word	0x2000cc80

00008c20 <bt_get_name>:
}
    8c20:	4800      	ldr	r0, [pc, #0]	; (8c24 <bt_get_name+0x4>)
    8c22:	4770      	bx	lr
    8c24:	0002f23c 	.word	0x0002f23c

00008c28 <bt_id_create>:
{
    8c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8c2a:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8c2c:	4606      	mov	r6, r0
    8c2e:	b930      	cbnz	r0, 8c3e <bt_id_create+0x16>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    8c30:	2c00      	cmp	r4, #0
    8c32:	d034      	beq.n	8c9e <bt_id_create+0x76>
			return -EINVAL;
    8c34:	f06f 0415 	mvn.w	r4, #21
}
    8c38:	4620      	mov	r0, r4
    8c3a:	b002      	add	sp, #8
    8c3c:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8c3e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    8c40:	2207      	movs	r2, #7
    8c42:	4669      	mov	r1, sp
    8c44:	9300      	str	r3, [sp, #0]
    8c46:	f8cd 3003 	str.w	r3, [sp, #3]
    8c4a:	f7fd f8f6 	bl	5e3a <memcmp>
    8c4e:	2800      	cmp	r0, #0
    8c50:	d0ee      	beq.n	8c30 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    8c52:	7833      	ldrb	r3, [r6, #0]
    8c54:	2b01      	cmp	r3, #1
    8c56:	d104      	bne.n	8c62 <bt_id_create+0x3a>
    8c58:	79b3      	ldrb	r3, [r6, #6]
    8c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8c5e:	2bc0      	cmp	r3, #192	; 0xc0
    8c60:	d015      	beq.n	8c8e <bt_id_create+0x66>
			BT_ERR("Only static random identity address supported");
    8c62:	4b1c      	ldr	r3, [pc, #112]	; (8cd4 <bt_id_create+0xac>)
    8c64:	681b      	ldr	r3, [r3, #0]
    8c66:	075b      	lsls	r3, r3, #29
    8c68:	d0e4      	beq.n	8c34 <bt_id_create+0xc>
    8c6a:	2301      	movs	r3, #1
    8c6c:	f04f 0200 	mov.w	r2, #0
    8c70:	f363 0202 	bfi	r2, r3, #0, #3
    8c74:	4918      	ldr	r1, [pc, #96]	; (8cd8 <bt_id_create+0xb0>)
    8c76:	4b19      	ldr	r3, [pc, #100]	; (8cdc <bt_id_create+0xb4>)
    8c78:	4819      	ldr	r0, [pc, #100]	; (8ce0 <bt_id_create+0xb8>)
    8c7a:	1a5b      	subs	r3, r3, r1
    8c7c:	08db      	lsrs	r3, r3, #3
    8c7e:	f36f 02c5 	bfc	r2, #3, #3
    8c82:	f363 128f 	bfi	r2, r3, #6, #10
    8c86:	4917      	ldr	r1, [pc, #92]	; (8ce4 <bt_id_create+0xbc>)
    8c88:	f7f9 f866 	bl	1d58 <log_1>
    8c8c:	e7d2      	b.n	8c34 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    8c8e:	4630      	mov	r0, r6
    8c90:	f7fe f81c 	bl	6ccc <id_find>
    8c94:	2800      	cmp	r0, #0
    8c96:	dbcb      	blt.n	8c30 <bt_id_create+0x8>
			return -EALREADY;
    8c98:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8c9c:	e7cc      	b.n	8c38 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    8c9e:	4b12      	ldr	r3, [pc, #72]	; (8ce8 <bt_id_create+0xc0>)
    8ca0:	79dd      	ldrb	r5, [r3, #7]
    8ca2:	2d01      	cmp	r5, #1
    8ca4:	d013      	beq.n	8cce <bt_id_create+0xa6>
	new_id = bt_dev.id_count++;
    8ca6:	1c6a      	adds	r2, r5, #1
    8ca8:	71da      	strb	r2, [r3, #7]
    8caa:	462c      	mov	r4, r5
	if (new_id == BT_ID_DEFAULT &&
    8cac:	b955      	cbnz	r5, 8cc4 <bt_id_create+0x9c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8cae:	2101      	movs	r1, #1
    8cb0:	f103 0070 	add.w	r0, r3, #112	; 0x70
    8cb4:	f7fe f824 	bl	6d00 <atomic_test_bit>
	if (new_id == BT_ID_DEFAULT &&
    8cb8:	b920      	cbnz	r0, 8cc4 <bt_id_create+0x9c>
    8cba:	2108      	movs	r1, #8
    8cbc:	f103 0070 	add.w	r0, r3, #112	; 0x70
    8cc0:	f7fd fef7 	bl	6ab2 <atomic_or>
	id_create(new_id, addr, irk);
    8cc4:	4631      	mov	r1, r6
    8cc6:	4628      	mov	r0, r5
    8cc8:	f7fe fc84 	bl	75d4 <id_create.isra.30>
	return new_id;
    8ccc:	e7b4      	b.n	8c38 <bt_id_create+0x10>
		return -ENOMEM;
    8cce:	f06f 040b 	mvn.w	r4, #11
    8cd2:	e7b1      	b.n	8c38 <bt_id_create+0x10>
    8cd4:	2000d74c 	.word	0x2000d74c
    8cd8:	0002cff8 	.word	0x0002cff8
    8cdc:	0002d070 	.word	0x0002d070
    8ce0:	0002ec70 	.word	0x0002ec70
    8ce4:	0002ea51 	.word	0x0002ea51
    8ce8:	2000cc80 	.word	0x2000cc80

00008cec <bt_setup_id_addr>:
{
    8cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    8cf0:	4d48      	ldr	r5, [pc, #288]	; (8e14 <bt_setup_id_addr+0x128>)
    8cf2:	79ef      	ldrb	r7, [r5, #7]
{
    8cf4:	b085      	sub	sp, #20
    8cf6:	462e      	mov	r6, r5
	if (!bt_dev.id_count) {
    8cf8:	b967      	cbnz	r7, 8d14 <bt_setup_id_addr+0x28>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    8cfa:	f895 4062 	ldrb.w	r4, [r5, #98]	; 0x62
    8cfe:	f014 0401 	ands.w	r4, r4, #1
    8d02:	d11f      	bne.n	8d44 <bt_setup_id_addr+0x58>
		BT_WARN("Read Static Addresses command not available");
    8d04:	4b44      	ldr	r3, [pc, #272]	; (8e18 <bt_setup_id_addr+0x12c>)
    8d06:	681b      	ldr	r3, [r3, #0]
    8d08:	f003 0307 	and.w	r3, r3, #7
    8d0c:	2b01      	cmp	r3, #1
    8d0e:	d806      	bhi.n	8d1e <bt_setup_id_addr+0x32>
		bt_dev.id_count = bt_read_static_addr(addrs);
    8d10:	2300      	movs	r3, #0
    8d12:	71f3      	strb	r3, [r6, #7]
	return bt_id_create(NULL, NULL);
    8d14:	2100      	movs	r1, #0
    8d16:	4608      	mov	r0, r1
    8d18:	f7ff ff86 	bl	8c28 <bt_id_create>
    8d1c:	e064      	b.n	8de8 <bt_setup_id_addr+0xfc>
		BT_WARN("Read Static Addresses command not available");
    8d1e:	2302      	movs	r3, #2
    8d20:	f04f 0200 	mov.w	r2, #0
    8d24:	f363 0202 	bfi	r2, r3, #0, #3
    8d28:	493c      	ldr	r1, [pc, #240]	; (8e1c <bt_setup_id_addr+0x130>)
    8d2a:	4b3d      	ldr	r3, [pc, #244]	; (8e20 <bt_setup_id_addr+0x134>)
    8d2c:	483d      	ldr	r0, [pc, #244]	; (8e24 <bt_setup_id_addr+0x138>)
    8d2e:	1a5b      	subs	r3, r3, r1
    8d30:	08db      	lsrs	r3, r3, #3
    8d32:	f364 02c5 	bfi	r2, r4, #3, #3
    8d36:	f363 128f 	bfi	r2, r3, #6, #10
    8d3a:	493b      	ldr	r1, [pc, #236]	; (8e28 <bt_setup_id_addr+0x13c>)
    8d3c:	f7f9 f80c 	bl	1d58 <log_1>
		bt_dev.id_count = bt_read_static_addr(addrs);
    8d40:	71ec      	strb	r4, [r5, #7]
    8d42:	e7e7      	b.n	8d14 <bt_setup_id_addr+0x28>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    8d44:	aa01      	add	r2, sp, #4
    8d46:	4639      	mov	r1, r7
    8d48:	f64f 4009 	movw	r0, #64521	; 0xfc09
    8d4c:	f7fe f836 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    8d50:	4604      	mov	r4, r0
    8d52:	b1c0      	cbz	r0, 8d86 <bt_setup_id_addr+0x9a>
		BT_WARN("Failed to read static addresses");
    8d54:	4b30      	ldr	r3, [pc, #192]	; (8e18 <bt_setup_id_addr+0x12c>)
    8d56:	681b      	ldr	r3, [r3, #0]
    8d58:	f003 0307 	and.w	r3, r3, #7
    8d5c:	2b01      	cmp	r3, #1
    8d5e:	d9d7      	bls.n	8d10 <bt_setup_id_addr+0x24>
    8d60:	2302      	movs	r3, #2
    8d62:	f04f 0200 	mov.w	r2, #0
    8d66:	f363 0202 	bfi	r2, r3, #0, #3
    8d6a:	492c      	ldr	r1, [pc, #176]	; (8e1c <bt_setup_id_addr+0x130>)
    8d6c:	4b2c      	ldr	r3, [pc, #176]	; (8e20 <bt_setup_id_addr+0x134>)
    8d6e:	482f      	ldr	r0, [pc, #188]	; (8e2c <bt_setup_id_addr+0x140>)
    8d70:	1a5b      	subs	r3, r3, r1
    8d72:	08db      	lsrs	r3, r3, #3
    8d74:	f367 02c5 	bfi	r2, r7, #3, #3
    8d78:	f363 128f 	bfi	r2, r3, #6, #10
    8d7c:	492a      	ldr	r1, [pc, #168]	; (8e28 <bt_setup_id_addr+0x13c>)
    8d7e:	f7f8 ffeb 	bl	1d58 <log_1>
		bt_dev.id_count = bt_read_static_addr(addrs);
    8d82:	71ef      	strb	r7, [r5, #7]
    8d84:	e7c6      	b.n	8d14 <bt_setup_id_addr+0x28>
	rp = (void *)rsp->data;
    8d86:	9b01      	ldr	r3, [sp, #4]
    8d88:	6899      	ldr	r1, [r3, #8]
	cnt = min(rp->num_addrs, CONFIG_BT_ID_MAX);
    8d8a:	784d      	ldrb	r5, [r1, #1]
    8d8c:	1c2f      	adds	r7, r5, #0
    8d8e:	bf18      	it	ne
    8d90:	2701      	movne	r7, #1
	for (i = 0; i < cnt; i++) {
    8d92:	4603      	mov	r3, r0
		addr[i].type = BT_ADDR_LE_RANDOM;
    8d94:	f04f 0901 	mov.w	r9, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    8d98:	f101 0802 	add.w	r8, r1, #2
	for (i = 0; i < cnt; i++) {
    8d9c:	429f      	cmp	r7, r3
    8d9e:	dc26      	bgt.n	8dee <bt_setup_id_addr+0x102>
	net_buf_unref(rsp);
    8da0:	9801      	ldr	r0, [sp, #4]
    8da2:	f015 fb55 	bl	1e450 <net_buf_unref>
	if (!cnt) {
    8da6:	b9b5      	cbnz	r5, 8dd6 <bt_setup_id_addr+0xea>
		BT_WARN("No static addresses stored in controller");
    8da8:	4b1b      	ldr	r3, [pc, #108]	; (8e18 <bt_setup_id_addr+0x12c>)
    8daa:	681b      	ldr	r3, [r3, #0]
    8dac:	f003 0307 	and.w	r3, r3, #7
    8db0:	2b01      	cmp	r3, #1
    8db2:	d910      	bls.n	8dd6 <bt_setup_id_addr+0xea>
    8db4:	2302      	movs	r3, #2
    8db6:	f04f 0200 	mov.w	r2, #0
    8dba:	f363 0202 	bfi	r2, r3, #0, #3
    8dbe:	4917      	ldr	r1, [pc, #92]	; (8e1c <bt_setup_id_addr+0x130>)
    8dc0:	4b17      	ldr	r3, [pc, #92]	; (8e20 <bt_setup_id_addr+0x134>)
    8dc2:	481b      	ldr	r0, [pc, #108]	; (8e30 <bt_setup_id_addr+0x144>)
    8dc4:	1a5b      	subs	r3, r3, r1
    8dc6:	f365 02c5 	bfi	r2, r5, #3, #3
    8dca:	08db      	lsrs	r3, r3, #3
    8dcc:	f363 128f 	bfi	r2, r3, #6, #10
    8dd0:	4915      	ldr	r1, [pc, #84]	; (8e28 <bt_setup_id_addr+0x13c>)
    8dd2:	f7f8 ffc1 	bl	1d58 <log_1>
		bt_dev.id_count = bt_read_static_addr(addrs);
    8dd6:	71f7      	strb	r7, [r6, #7]
		if (bt_dev.id_count) {
    8dd8:	2d00      	cmp	r5, #0
    8dda:	d09b      	beq.n	8d14 <bt_setup_id_addr+0x28>
			for (i = 0; i < bt_dev.id_count; i++) {
    8ddc:	79f3      	ldrb	r3, [r6, #7]
    8dde:	42a3      	cmp	r3, r4
    8de0:	dc0f      	bgt.n	8e02 <bt_setup_id_addr+0x116>
			return set_random_address(&bt_dev.id_addr[0].a);
    8de2:	4814      	ldr	r0, [pc, #80]	; (8e34 <bt_setup_id_addr+0x148>)
    8de4:	f7fe f8ce 	bl	6f84 <set_random_address>
}
    8de8:	b005      	add	sp, #20
    8dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(dst, src, sizeof(*dst));
    8dee:	2206      	movs	r2, #6
    8df0:	4641      	mov	r1, r8
    8df2:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    8df6:	f88d 9008 	strb.w	r9, [sp, #8]
    8dfa:	f7fd f845 	bl	5e88 <memcpy>
	for (i = 0; i < cnt; i++) {
    8dfe:	2301      	movs	r3, #1
    8e00:	e7cc      	b.n	8d9c <bt_setup_id_addr+0xb0>
				id_create(i, &addrs[i], NULL);
    8e02:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    8e06:	ab02      	add	r3, sp, #8
    8e08:	b2e0      	uxtb	r0, r4
    8e0a:	4419      	add	r1, r3
    8e0c:	f7fe fbe2 	bl	75d4 <id_create.isra.30>
			for (i = 0; i < bt_dev.id_count; i++) {
    8e10:	3401      	adds	r4, #1
    8e12:	e7e3      	b.n	8ddc <bt_setup_id_addr+0xf0>
    8e14:	2000cc80 	.word	0x2000cc80
    8e18:	2000d74c 	.word	0x2000d74c
    8e1c:	0002cff8 	.word	0x0002cff8
    8e20:	0002d070 	.word	0x0002d070
    8e24:	0002f0d0 	.word	0x0002f0d0
    8e28:	0002ea5e 	.word	0x0002ea5e
    8e2c:	0002f100 	.word	0x0002f100
    8e30:	0002f124 	.word	0x0002f124
    8e34:	2000cc81 	.word	0x2000cc81

00008e38 <bt_init>:
{
    8e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    8e3c:	4d60      	ldr	r5, [pc, #384]	; (8fc0 <bt_init+0x188>)
    8e3e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    8e42:	6899      	ldr	r1, [r3, #8]
    8e44:	f011 0101 	ands.w	r1, r1, #1
{
    8e48:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    8e4a:	d124      	bne.n	8e96 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    8e4c:	aa08      	add	r2, sp, #32
    8e4e:	f640 4003 	movw	r0, #3075	; 0xc03
    8e52:	f7fd ffb3 	bl	6dbc <bt_hci_cmd_send_sync>
		if (err) {
    8e56:	4604      	mov	r4, r0
    8e58:	2800      	cmp	r0, #0
    8e5a:	f040 809a 	bne.w	8f92 <bt_init+0x15a>
		hci_reset_complete(rsp);
    8e5e:	9b08      	ldr	r3, [sp, #32]
	u8_t status = buf->data[0];
    8e60:	689b      	ldr	r3, [r3, #8]
	if (status) {
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	b9a3      	cbnz	r3, 8e90 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    8e66:	4a57      	ldr	r2, [pc, #348]	; (8fc4 <bt_init+0x18c>)
    8e68:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8e6a:	462b      	mov	r3, r5
    8e6c:	f3bf 8f5b 	dmb	ish
    8e70:	f853 2f70 	ldr.w	r2, [r3, #112]!
    8e74:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    8e78:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8e7c:	f3bf 8f5b 	dmb	ish
    8e80:	e853 1f00 	ldrex	r1, [r3]
    8e84:	e843 2000 	strex	r0, r2, [r3]
    8e88:	2800      	cmp	r0, #0
    8e8a:	d1f9      	bne.n	8e80 <bt_init+0x48>
    8e8c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    8e90:	9808      	ldr	r0, [sp, #32]
    8e92:	f015 fadd 	bl	1e450 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    8e96:	aa08      	add	r2, sp, #32
    8e98:	2100      	movs	r1, #0
    8e9a:	f241 0003 	movw	r0, #4099	; 0x1003
    8e9e:	f7fd ff8d 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    8ea2:	4604      	mov	r4, r0
    8ea4:	2800      	cmp	r0, #0
    8ea6:	d174      	bne.n	8f92 <bt_init+0x15a>
	read_local_features_complete(rsp);
    8ea8:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    8eaa:	4847      	ldr	r0, [pc, #284]	; (8fc8 <bt_init+0x190>)
    8eac:	6899      	ldr	r1, [r3, #8]
    8eae:	2208      	movs	r2, #8
    8eb0:	3101      	adds	r1, #1
    8eb2:	f7fc ffe9 	bl	5e88 <memcpy>
	net_buf_unref(rsp);
    8eb6:	9808      	ldr	r0, [sp, #32]
    8eb8:	f015 faca 	bl	1e450 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    8ebc:	4621      	mov	r1, r4
    8ebe:	aa08      	add	r2, sp, #32
    8ec0:	f241 0001 	movw	r0, #4097	; 0x1001
    8ec4:	f7fd ff7a 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    8ec8:	4604      	mov	r4, r0
    8eca:	2800      	cmp	r0, #0
    8ecc:	d161      	bne.n	8f92 <bt_init+0x15a>
	read_local_ver_complete(rsp);
    8ece:	9808      	ldr	r0, [sp, #32]
    8ed0:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    8ed2:	785a      	ldrb	r2, [r3, #1]
    8ed4:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    8ed6:	78d9      	ldrb	r1, [r3, #3]
    8ed8:	789a      	ldrb	r2, [r3, #2]
    8eda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8ede:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    8ee0:	791a      	ldrb	r2, [r3, #4]
    8ee2:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    8ee4:	7a19      	ldrb	r1, [r3, #8]
    8ee6:	79da      	ldrb	r2, [r3, #7]
    8ee8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8eec:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    8eee:	795a      	ldrb	r2, [r3, #5]
    8ef0:	799b      	ldrb	r3, [r3, #6]
    8ef2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    8ef6:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    8ef8:	f015 faaa 	bl	1e450 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    8efc:	2103      	movs	r1, #3
    8efe:	4833      	ldr	r0, [pc, #204]	; (8fcc <bt_init+0x194>)
    8f00:	f7fd fefe 	bl	6d00 <atomic_test_bit>
    8f04:	4601      	mov	r1, r0
    8f06:	bb48      	cbnz	r0, 8f5c <bt_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    8f08:	aa08      	add	r2, sp, #32
    8f0a:	f241 0009 	movw	r0, #4105	; 0x1009
    8f0e:	f7fd ff55 	bl	6dbc <bt_hci_cmd_send_sync>
		if (err) {
    8f12:	4604      	mov	r4, r0
    8f14:	2800      	cmp	r0, #0
    8f16:	d13c      	bne.n	8f92 <bt_init+0x15a>
		read_bdaddr_complete(rsp);
    8f18:	9b08      	ldr	r3, [sp, #32]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8f1a:	9004      	str	r0, [sp, #16]
    8f1c:	689e      	ldr	r6, [r3, #8]
    8f1e:	f8ad 0014 	strh.w	r0, [sp, #20]
    8f22:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    8f24:	2206      	movs	r2, #6
    8f26:	a904      	add	r1, sp, #16
    8f28:	4630      	mov	r0, r6
    8f2a:	f7fc ff86 	bl	5e3a <memcmp>
    8f2e:	b190      	cbz	r0, 8f56 <bt_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    8f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f34:	2206      	movs	r2, #6
    8f36:	a906      	add	r1, sp, #24
    8f38:	4630      	mov	r0, r6
    8f3a:	9306      	str	r3, [sp, #24]
    8f3c:	f8ad 301c 	strh.w	r3, [sp, #28]
    8f40:	f7fc ff7b 	bl	5e3a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8f44:	b138      	cbz	r0, 8f56 <bt_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    8f46:	2206      	movs	r2, #6
    8f48:	4631      	mov	r1, r6
    8f4a:	4821      	ldr	r0, [pc, #132]	; (8fd0 <bt_init+0x198>)
    8f4c:	f7fc ff9c 	bl	5e88 <memcpy>
	bt_dev.id_count = 1;
    8f50:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    8f52:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1;
    8f54:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    8f56:	9808      	ldr	r0, [sp, #32]
    8f58:	f015 fa7a 	bl	1e450 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    8f5c:	aa08      	add	r2, sp, #32
    8f5e:	2100      	movs	r1, #0
    8f60:	f241 0002 	movw	r0, #4098	; 0x1002
    8f64:	f7fd ff2a 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    8f68:	4604      	mov	r4, r0
    8f6a:	b990      	cbnz	r0, 8f92 <bt_init+0x15a>
	read_supported_commands_complete(rsp);
    8f6c:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.supported_commands, rp->commands,
    8f6e:	4819      	ldr	r0, [pc, #100]	; (8fd4 <bt_init+0x19c>)
    8f70:	6899      	ldr	r1, [r3, #8]
    8f72:	2240      	movs	r2, #64	; 0x40
    8f74:	3101      	adds	r1, #1
    8f76:	f7fc ff87 	bl	5e88 <memcpy>
	net_buf_unref(rsp);
    8f7a:	9808      	ldr	r0, [sp, #32]
    8f7c:	f015 fa68 	bl	1e450 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    8f80:	7f2b      	ldrb	r3, [r5, #28]
    8f82:	065e      	lsls	r6, r3, #25
    8f84:	d432      	bmi.n	8fec <bt_init+0x1b4>
		BT_ERR("Non-LE capable controller detected!");
    8f86:	4b14      	ldr	r3, [pc, #80]	; (8fd8 <bt_init+0x1a0>)
    8f88:	681b      	ldr	r3, [r3, #0]
    8f8a:	075d      	lsls	r5, r3, #29
    8f8c:	d105      	bne.n	8f9a <bt_init+0x162>
		return -ENODEV;
    8f8e:	f06f 0412 	mvn.w	r4, #18
}
    8f92:	4620      	mov	r0, r4
    8f94:	b00e      	add	sp, #56	; 0x38
    8f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Non-LE capable controller detected!");
    8f9a:	2301      	movs	r3, #1
    8f9c:	f04f 0200 	mov.w	r2, #0
    8fa0:	f363 0202 	bfi	r2, r3, #0, #3
    8fa4:	490d      	ldr	r1, [pc, #52]	; (8fdc <bt_init+0x1a4>)
    8fa6:	4b0e      	ldr	r3, [pc, #56]	; (8fe0 <bt_init+0x1a8>)
    8fa8:	480e      	ldr	r0, [pc, #56]	; (8fe4 <bt_init+0x1ac>)
    8faa:	1a5b      	subs	r3, r3, r1
    8fac:	f364 02c5 	bfi	r2, r4, #3, #3
    8fb0:	08db      	lsrs	r3, r3, #3
    8fb2:	f363 128f 	bfi	r2, r3, #6, #10
    8fb6:	490c      	ldr	r1, [pc, #48]	; (8fe8 <bt_init+0x1b0>)
    8fb8:	f7f8 fece 	bl	1d58 <log_1>
    8fbc:	e7e7      	b.n	8f8e <bt_init+0x156>
    8fbe:	bf00      	nop
    8fc0:	2000cc80 	.word	0x2000cc80
    8fc4:	200009e8 	.word	0x200009e8
    8fc8:	2000cc98 	.word	0x2000cc98
    8fcc:	2000ccf0 	.word	0x2000ccf0
    8fd0:	2000cc81 	.word	0x2000cc81
    8fd4:	2000cca0 	.word	0x2000cca0
    8fd8:	2000d74c 	.word	0x2000d74c
    8fdc:	0002cff8 	.word	0x0002cff8
    8fe0:	0002d070 	.word	0x0002d070
    8fe4:	0002ecfc 	.word	0x0002ecfc
    8fe8:	0002e9fd 	.word	0x0002e9fd
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    8fec:	4621      	mov	r1, r4
    8fee:	aa08      	add	r2, sp, #32
    8ff0:	f242 0003 	movw	r0, #8195	; 0x2003
    8ff4:	f7fd fee2 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    8ff8:	4604      	mov	r4, r0
    8ffa:	2800      	cmp	r0, #0
    8ffc:	d1c9      	bne.n	8f92 <bt_init+0x15a>
	read_le_features_complete(rsp);
    8ffe:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9000:	48a9      	ldr	r0, [pc, #676]	; (92a8 <bt_init+0x470>)
    9002:	6899      	ldr	r1, [r3, #8]
    9004:	2208      	movs	r2, #8
    9006:	3101      	adds	r1, #1
    9008:	f7fc ff3e 	bl	5e88 <memcpy>
	net_buf_unref(rsp);
    900c:	9808      	ldr	r0, [sp, #32]
    900e:	f015 fa1f 	bl	1e450 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9012:	4621      	mov	r1, r4
    9014:	aa08      	add	r2, sp, #32
    9016:	f242 0002 	movw	r0, #8194	; 0x2002
    901a:	f7fd fecf 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    901e:	4604      	mov	r4, r0
    9020:	2800      	cmp	r0, #0
    9022:	d1b6      	bne.n	8f92 <bt_init+0x15a>
	le_read_buffer_size_complete(rsp);
    9024:	9b08      	ldr	r3, [sp, #32]
    9026:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    9028:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    902c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
    9030:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    9032:	b139      	cbz	r1, 9044 <bt_init+0x20c>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    9034:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    9036:	489d      	ldr	r0, [pc, #628]	; (92ac <bt_init+0x474>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    9038:	2a03      	cmp	r2, #3
    903a:	bf28      	it	cs
    903c:	2203      	movcs	r2, #3
    903e:	4611      	mov	r1, r2
    9040:	f023 f994 	bl	2c36c <_impl_k_sem_init>
	net_buf_unref(rsp);
    9044:	9808      	ldr	r0, [sp, #32]
    9046:	f015 fa03 	bl	1e450 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    904a:	7f2c      	ldrb	r4, [r5, #28]
    904c:	f014 0420 	ands.w	r4, r4, #32
    9050:	f000 80d9 	beq.w	9206 <bt_init+0x3ce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9054:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    9058:	071c      	lsls	r4, r3, #28
    905a:	d511      	bpl.n	9080 <bt_init+0x248>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    905c:	aa08      	add	r2, sp, #32
    905e:	2100      	movs	r1, #0
    9060:	f242 001c 	movw	r0, #8220	; 0x201c
    9064:	f7fd feaa 	bl	6dbc <bt_hci_cmd_send_sync>
		if (err) {
    9068:	4604      	mov	r4, r0
    906a:	2800      	cmp	r0, #0
    906c:	d191      	bne.n	8f92 <bt_init+0x15a>
		le_read_supp_states_complete(rsp);
    906e:	9808      	ldr	r0, [sp, #32]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    9070:	6883      	ldr	r3, [r0, #8]
    9072:	f853 2f01 	ldr.w	r2, [r3, #1]!
    9076:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9078:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    907c:	f015 f9e8 	bl	1e450 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    9080:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    9084:	0698      	lsls	r0, r3, #26
    9086:	f100 80da 	bmi.w	923e <bt_init+0x406>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    908a:	2108      	movs	r1, #8
    908c:	f242 0001 	movw	r0, #8193	; 0x2001
    9090:	f7fd fe64 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    9094:	4604      	mov	r4, r0
    9096:	2800      	cmp	r0, #0
    9098:	f000 80bc 	beq.w	9214 <bt_init+0x3dc>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    909c:	2108      	movs	r1, #8
    909e:	4408      	add	r0, r1
    90a0:	f015 fa34 	bl	1e50c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    90a4:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    90a8:	f895 6079 	ldrb.w	r6, [r5, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    90ac:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    90ae:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    90b0:	bf4c      	ite	mi
    90b2:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    90b4:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    90b6:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    90b8:	bf48      	it	mi
    90ba:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    90be:	f016 0f09 	tst.w	r6, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    90c2:	bf18      	it	ne
    90c4:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    90c8:	07de      	lsls	r6, r3, #31
	if ((BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
    90ca:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
    90ce:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    90d2:	bf48      	it	mi
    90d4:	f040 0010 	orrmi.w	r0, r0, #16
	if ((BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
    90d8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    90da:	bf08      	it	eq
    90dc:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    90e0:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    90e2:	f7fd fe2b 	bl	6d3c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    90e6:	4621      	mov	r1, r4
    90e8:	2200      	movs	r2, #0
    90ea:	f242 0001 	movw	r0, #8193	; 0x2001
    90ee:	f7fd fe65 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    90f2:	4604      	mov	r4, r0
    90f4:	2800      	cmp	r0, #0
    90f6:	f47f af4c 	bne.w	8f92 <bt_init+0x15a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    90fa:	7f2b      	ldrb	r3, [r5, #28]
    90fc:	0698      	lsls	r0, r3, #26
    90fe:	d421      	bmi.n	9144 <bt_init+0x30c>
	if (bt_dev.le.mtu) {
    9100:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    9104:	b9f1      	cbnz	r1, 9144 <bt_init+0x30c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9106:	aa08      	add	r2, sp, #32
    9108:	f241 0005 	movw	r0, #4101	; 0x1005
    910c:	f7fd fe56 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    9110:	4604      	mov	r4, r0
    9112:	2800      	cmp	r0, #0
    9114:	f47f af3d 	bne.w	8f92 <bt_init+0x15a>
	if (bt_dev.le.mtu) {
    9118:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    911c:	b97b      	cbnz	r3, 913e <bt_init+0x306>
	read_buffer_size_complete(rsp);
    911e:	9b08      	ldr	r3, [sp, #32]
    9120:	4862      	ldr	r0, [pc, #392]	; (92ac <bt_init+0x474>)
    9122:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    9124:	7899      	ldrb	r1, [r3, #2]
    9126:	785a      	ldrb	r2, [r3, #1]
    9128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    912c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    9130:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    9132:	2a03      	cmp	r2, #3
    9134:	bf28      	it	cs
    9136:	2203      	movcs	r2, #3
    9138:	4611      	mov	r1, r2
    913a:	f023 f917 	bl	2c36c <_impl_k_sem_init>
	net_buf_unref(rsp);
    913e:	9808      	ldr	r0, [sp, #32]
    9140:	f015 f986 	bl	1e450 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9144:	2108      	movs	r1, #8
    9146:	f640 4001 	movw	r0, #3073	; 0xc01
    914a:	f7fd fe07 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    914e:	4604      	mov	r4, r0
    9150:	2800      	cmp	r0, #0
    9152:	d05f      	beq.n	9214 <bt_init+0x3dc>
	ev = net_buf_add(buf, sizeof(*ev));
    9154:	2108      	movs	r1, #8
    9156:	4408      	add	r0, r1
    9158:	f015 f9d8 	bl	1e50c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    915c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    9160:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    9162:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9164:	f140 8097 	bpl.w	9296 <bt_init+0x45e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9168:	a14d      	add	r1, pc, #308	; (adr r1, 92a0 <bt_init+0x468>)
    916a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    916e:	f7fd fde5 	bl	6d3c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9172:	4621      	mov	r1, r4
    9174:	2200      	movs	r2, #0
    9176:	f640 4001 	movw	r0, #3073	; 0xc01
    917a:	f7fd fe1f 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    917e:	4604      	mov	r4, r0
    9180:	2800      	cmp	r0, #0
    9182:	f47f af06 	bne.w	8f92 <bt_init+0x15a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9186:	4601      	mov	r1, r0
    9188:	aa03      	add	r2, sp, #12
    918a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    918e:	f7fd fe15 	bl	6dbc <bt_hci_cmd_send_sync>
    9192:	4e47      	ldr	r6, [pc, #284]	; (92b0 <bt_init+0x478>)
	if (err) {
    9194:	2800      	cmp	r0, #0
    9196:	f000 809b 	beq.w	92d0 <bt_init+0x498>
		BT_WARN("Vendor HCI extensions not available");
    919a:	6833      	ldr	r3, [r6, #0]
    919c:	f003 0307 	and.w	r3, r3, #7
    91a0:	2b01      	cmp	r3, #1
    91a2:	d910      	bls.n	91c6 <bt_init+0x38e>
    91a4:	2302      	movs	r3, #2
    91a6:	f04f 0200 	mov.w	r2, #0
    91aa:	f363 0202 	bfi	r2, r3, #0, #3
    91ae:	4941      	ldr	r1, [pc, #260]	; (92b4 <bt_init+0x47c>)
    91b0:	4b41      	ldr	r3, [pc, #260]	; (92b8 <bt_init+0x480>)
    91b2:	4842      	ldr	r0, [pc, #264]	; (92bc <bt_init+0x484>)
    91b4:	1a5b      	subs	r3, r3, r1
    91b6:	f364 02c5 	bfi	r2, r4, #3, #3
    91ba:	08db      	lsrs	r3, r3, #3
    91bc:	4940      	ldr	r1, [pc, #256]	; (92c0 <bt_init+0x488>)
    91be:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Failed to read supported vendor commands");
    91c2:	f7f8 fdc9 	bl	1d58 <log_1>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    91c6:	79ef      	ldrb	r7, [r5, #7]
    91c8:	2f00      	cmp	r7, #0
    91ca:	f040 8147 	bne.w	945c <bt_init+0x624>
		err = bt_setup_id_addr();
    91ce:	f7ff fd8d 	bl	8cec <bt_setup_id_addr>
		if (err) {
    91d2:	4604      	mov	r4, r0
    91d4:	2800      	cmp	r0, #0
    91d6:	f000 813f 	beq.w	9458 <bt_init+0x620>
			BT_ERR("Unable to set identity address");
    91da:	6833      	ldr	r3, [r6, #0]
    91dc:	075b      	lsls	r3, r3, #29
    91de:	f43f aed8 	beq.w	8f92 <bt_init+0x15a>
    91e2:	2301      	movs	r3, #1
    91e4:	f04f 0200 	mov.w	r2, #0
    91e8:	f363 0202 	bfi	r2, r3, #0, #3
    91ec:	4931      	ldr	r1, [pc, #196]	; (92b4 <bt_init+0x47c>)
    91ee:	4b32      	ldr	r3, [pc, #200]	; (92b8 <bt_init+0x480>)
    91f0:	4834      	ldr	r0, [pc, #208]	; (92c4 <bt_init+0x48c>)
    91f2:	1a5b      	subs	r3, r3, r1
    91f4:	f367 02c5 	bfi	r2, r7, #3, #3
    91f8:	08db      	lsrs	r3, r3, #3
    91fa:	f363 128f 	bfi	r2, r3, #6, #10
    91fe:	4932      	ldr	r1, [pc, #200]	; (92c8 <bt_init+0x490>)
    9200:	f7f8 fdaa 	bl	1d58 <log_1>
    9204:	e6c5      	b.n	8f92 <bt_init+0x15a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    9206:	2102      	movs	r1, #2
    9208:	f640 406d 	movw	r0, #3181	; 0xc6d
    920c:	f7fd fda6 	bl	6d5c <bt_hci_cmd_create>
		if (!buf) {
    9210:	4606      	mov	r6, r0
    9212:	b910      	cbnz	r0, 921a <bt_init+0x3e2>
		return -ENOBUFS;
    9214:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9218:	e6bb      	b.n	8f92 <bt_init+0x15a>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    921a:	2102      	movs	r1, #2
    921c:	3008      	adds	r0, #8
    921e:	f015 f975 	bl	1e50c <net_buf_simple_add>
		cp_le->le = 0x01;
    9222:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    9224:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    9226:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9228:	4622      	mov	r2, r4
    922a:	4631      	mov	r1, r6
    922c:	f640 406d 	movw	r0, #3181	; 0xc6d
    9230:	f7fd fdc4 	bl	6dbc <bt_hci_cmd_send_sync>
		if (err) {
    9234:	4604      	mov	r4, r0
    9236:	2800      	cmp	r0, #0
    9238:	f43f af0c 	beq.w	9054 <bt_init+0x21c>
    923c:	e6a9      	b.n	8f92 <bt_init+0x15a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    923e:	aa08      	add	r2, sp, #32
    9240:	2100      	movs	r1, #0
    9242:	f242 002f 	movw	r0, #8239	; 0x202f
    9246:	f7fd fdb9 	bl	6dbc <bt_hci_cmd_send_sync>
		if (err) {
    924a:	4604      	mov	r4, r0
    924c:	2800      	cmp	r0, #0
    924e:	f47f aea0 	bne.w	8f92 <bt_init+0x15a>
		rp = (void *)rsp->data;
    9252:	9808      	ldr	r0, [sp, #32]
    9254:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    9256:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    925a:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    925e:	f015 f8f7 	bl	1e450 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9262:	2104      	movs	r1, #4
    9264:	f242 0024 	movw	r0, #8228	; 0x2024
    9268:	f7fd fd78 	bl	6d5c <bt_hci_cmd_create>
		if (!buf) {
    926c:	4606      	mov	r6, r0
    926e:	2800      	cmp	r0, #0
    9270:	d0d0      	beq.n	9214 <bt_init+0x3dc>
		cp = net_buf_add(buf, sizeof(*cp));
    9272:	2104      	movs	r1, #4
    9274:	3008      	adds	r0, #8
    9276:	f015 f949 	bl	1e50c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    927a:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    927c:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9280:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9282:	4631      	mov	r1, r6
    9284:	f242 0024 	movw	r0, #8228	; 0x2024
    9288:	f7fd fd98 	bl	6dbc <bt_hci_cmd_send_sync>
		if (err) {
    928c:	4604      	mov	r4, r0
    928e:	2800      	cmp	r0, #0
    9290:	f43f aefb 	beq.w	908a <bt_init+0x252>
    9294:	e67d      	b.n	8f92 <bt_init+0x15a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    9296:	480d      	ldr	r0, [pc, #52]	; (92cc <bt_init+0x494>)
    9298:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    929c:	e767      	b.n	916e <bt_init+0x336>
    929e:	bf00      	nop
    92a0:	02008890 	.word	0x02008890
    92a4:	20008000 	.word	0x20008000
    92a8:	2000ccf8 	.word	0x2000ccf8
    92ac:	2000cd0c 	.word	0x2000cd0c
    92b0:	2000d74c 	.word	0x2000d74c
    92b4:	0002cff8 	.word	0x0002cff8
    92b8:	0002d070 	.word	0x0002d070
    92bc:	0002ed24 	.word	0x0002ed24
    92c0:	0002ea16 	.word	0x0002ea16
    92c4:	0002ee10 	.word	0x0002ee10
    92c8:	0002ea22 	.word	0x0002ea22
    92cc:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    92d0:	9b03      	ldr	r3, [sp, #12]
    92d2:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    92d4:	6833      	ldr	r3, [r6, #0]
    92d6:	f003 0307 	and.w	r3, r3, #7
    92da:	2b02      	cmp	r3, #2
    92dc:	d91a      	bls.n	9314 <bt_init+0x4dc>
    92de:	2303      	movs	r3, #3
    92e0:	f04f 0100 	mov.w	r1, #0
    92e4:	4a68      	ldr	r2, [pc, #416]	; (9488 <bt_init+0x650>)
    92e6:	f363 0102 	bfi	r1, r3, #0, #3
    92ea:	4b68      	ldr	r3, [pc, #416]	; (948c <bt_init+0x654>)
    92ec:	1a9b      	subs	r3, r3, r2
    92ee:	f360 01c5 	bfi	r1, r0, #3, #3
    92f2:	08db      	lsrs	r3, r3, #3
    92f4:	f363 118f 	bfi	r1, r3, #6, #10
    92f8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    92fc:	4864      	ldr	r0, [pc, #400]	; (9490 <bt_init+0x658>)
    92fe:	f8ad 1000 	strh.w	r1, [sp]
	if (platform < ARRAY_SIZE(plat_str)) {
    9302:	2b03      	cmp	r3, #3
		return plat_str[platform];
    9304:	bf96      	itet	ls
    9306:	4a63      	ldrls	r2, [pc, #396]	; (9494 <bt_init+0x65c>)
	return "unknown";
    9308:	4a63      	ldrhi	r2, [pc, #396]	; (9498 <bt_init+0x660>)
		return plat_str[platform];
    930a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    930e:	4963      	ldr	r1, [pc, #396]	; (949c <bt_init+0x664>)
    9310:	f7f8 fd4e 	bl	1db0 <log_3>
	BT_INFO("HW Variant: %s (0x%04x)",
    9314:	6833      	ldr	r3, [r6, #0]
    9316:	f003 0307 	and.w	r3, r3, #7
    931a:	2b02      	cmp	r3, #2
    931c:	d91d      	bls.n	935a <bt_init+0x522>
    931e:	2303      	movs	r3, #3
    9320:	f04f 0100 	mov.w	r1, #0
    9324:	f363 0102 	bfi	r1, r3, #0, #3
    9328:	4a57      	ldr	r2, [pc, #348]	; (9488 <bt_init+0x650>)
    932a:	4b58      	ldr	r3, [pc, #352]	; (948c <bt_init+0x654>)
    932c:	1a9b      	subs	r3, r3, r2
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    932e:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    9332:	08db      	lsrs	r3, r3, #3
	BT_INFO("HW Variant: %s (0x%04x)",
    9334:	f36f 01c5 	bfc	r1, #3, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9338:	2a02      	cmp	r2, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    933a:	f363 118f 	bfi	r1, r3, #6, #10
    933e:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9342:	d155      	bne.n	93f0 <bt_init+0x5b8>
	if (variant < ARRAY_SIZE(nordic_str)) {
    9344:	2b02      	cmp	r3, #2
    9346:	d853      	bhi.n	93f0 <bt_init+0x5b8>
		return nordic_str[variant];
    9348:	4a55      	ldr	r2, [pc, #340]	; (94a0 <bt_init+0x668>)
    934a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    934e:	f8ad 1000 	strh.w	r1, [sp]
    9352:	4854      	ldr	r0, [pc, #336]	; (94a4 <bt_init+0x66c>)
    9354:	4951      	ldr	r1, [pc, #324]	; (949c <bt_init+0x664>)
    9356:	f7f8 fd2b 	bl	1db0 <log_3>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    935a:	6833      	ldr	r3, [r6, #0]
    935c:	f003 0307 	and.w	r3, r3, #7
    9360:	2b02      	cmp	r3, #2
    9362:	d924      	bls.n	93ae <bt_init+0x576>
    9364:	2203      	movs	r2, #3
    9366:	f04f 0300 	mov.w	r3, #0
    936a:	4947      	ldr	r1, [pc, #284]	; (9488 <bt_init+0x650>)
    936c:	484e      	ldr	r0, [pc, #312]	; (94a8 <bt_init+0x670>)
    936e:	f362 0302 	bfi	r3, r2, #0, #3
    9372:	4a46      	ldr	r2, [pc, #280]	; (948c <bt_init+0x654>)
    9374:	1a52      	subs	r2, r2, r1
    9376:	08d2      	lsrs	r2, r2, #3
    9378:	f36f 03c5 	bfc	r3, #3, #3
    937c:	f362 138f 	bfi	r3, r2, #6, #10
    9380:	4a46      	ldr	r2, [pc, #280]	; (949c <bt_init+0x664>)
    9382:	9208      	str	r2, [sp, #32]
    9384:	7962      	ldrb	r2, [r4, #5]
	if (variant < ARRAY_SIZE(var_str)) {
    9386:	2a03      	cmp	r2, #3
		return var_str[variant];
    9388:	bf96      	itet	ls
    938a:	4948      	ldrls	r1, [pc, #288]	; (94ac <bt_init+0x674>)
	return "unknown";
    938c:	4942      	ldrhi	r1, [pc, #264]	; (9498 <bt_init+0x660>)
		return var_str[variant];
    938e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    9392:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    9396:	79a2      	ldrb	r2, [r4, #6]
    9398:	920b      	str	r2, [sp, #44]	; 0x2c
    939a:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    939e:	920c      	str	r2, [sp, #48]	; 0x30
    93a0:	f8d4 2009 	ldr.w	r2, [r4, #9]
    93a4:	920d      	str	r2, [sp, #52]	; 0x34
    93a6:	a908      	add	r1, sp, #32
    93a8:	2206      	movs	r2, #6
    93aa:	f7f8 fd1c 	bl	1de6 <log_n>
	net_buf_unref(rsp);
    93ae:	9803      	ldr	r0, [sp, #12]
    93b0:	f015 f84e 	bl	1e450 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    93b4:	aa03      	add	r2, sp, #12
    93b6:	2100      	movs	r1, #0
    93b8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    93bc:	f7fd fcfe 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    93c0:	4604      	mov	r4, r0
    93c2:	b1b8      	cbz	r0, 93f4 <bt_init+0x5bc>
		BT_WARN("Failed to read supported vendor features");
    93c4:	6833      	ldr	r3, [r6, #0]
    93c6:	f003 0307 	and.w	r3, r3, #7
    93ca:	2b01      	cmp	r3, #1
    93cc:	f67f aefb 	bls.w	91c6 <bt_init+0x38e>
    93d0:	2302      	movs	r3, #2
    93d2:	f04f 0200 	mov.w	r2, #0
    93d6:	f363 0202 	bfi	r2, r3, #0, #3
    93da:	492b      	ldr	r1, [pc, #172]	; (9488 <bt_init+0x650>)
    93dc:	4b2b      	ldr	r3, [pc, #172]	; (948c <bt_init+0x654>)
    93de:	4834      	ldr	r0, [pc, #208]	; (94b0 <bt_init+0x678>)
    93e0:	1a5b      	subs	r3, r3, r1
    93e2:	f36f 02c5 	bfc	r2, #3, #3
    93e6:	08db      	lsrs	r3, r3, #3
    93e8:	f363 128f 	bfi	r2, r3, #6, #10
    93ec:	492b      	ldr	r1, [pc, #172]	; (949c <bt_init+0x664>)
    93ee:	e6e8      	b.n	91c2 <bt_init+0x38a>
		return "unknown";
    93f0:	4a29      	ldr	r2, [pc, #164]	; (9498 <bt_init+0x660>)
    93f2:	e7ac      	b.n	934e <bt_init+0x516>
	rp.cmds = (void *)rsp->data;
    93f4:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    93f6:	482f      	ldr	r0, [pc, #188]	; (94b4 <bt_init+0x67c>)
    93f8:	6899      	ldr	r1, [r3, #8]
    93fa:	2202      	movs	r2, #2
    93fc:	3101      	adds	r1, #1
    93fe:	f7fc fd43 	bl	5e88 <memcpy>
	net_buf_unref(rsp);
    9402:	9803      	ldr	r0, [sp, #12]
    9404:	f015 f824 	bl	1e450 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9408:	aa03      	add	r2, sp, #12
    940a:	4621      	mov	r1, r4
    940c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9410:	f7fd fcd4 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    9414:	b1a8      	cbz	r0, 9442 <bt_init+0x60a>
		BT_WARN("Failed to read supported vendor commands");
    9416:	6833      	ldr	r3, [r6, #0]
    9418:	f003 0307 	and.w	r3, r3, #7
    941c:	2b01      	cmp	r3, #1
    941e:	f67f aed2 	bls.w	91c6 <bt_init+0x38e>
    9422:	2302      	movs	r3, #2
    9424:	f04f 0200 	mov.w	r2, #0
    9428:	f363 0202 	bfi	r2, r3, #0, #3
    942c:	4916      	ldr	r1, [pc, #88]	; (9488 <bt_init+0x650>)
    942e:	4b17      	ldr	r3, [pc, #92]	; (948c <bt_init+0x654>)
    9430:	4821      	ldr	r0, [pc, #132]	; (94b8 <bt_init+0x680>)
    9432:	1a5b      	subs	r3, r3, r1
    9434:	f364 02c5 	bfi	r2, r4, #3, #3
    9438:	08db      	lsrs	r3, r3, #3
    943a:	f363 128f 	bfi	r2, r3, #6, #10
    943e:	4917      	ldr	r1, [pc, #92]	; (949c <bt_init+0x664>)
    9440:	e6bf      	b.n	91c2 <bt_init+0x38a>
	rp.feat = (void *)rsp->data;
    9442:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    9444:	481d      	ldr	r0, [pc, #116]	; (94bc <bt_init+0x684>)
    9446:	6899      	ldr	r1, [r3, #8]
    9448:	2201      	movs	r2, #1
    944a:	4411      	add	r1, r2
    944c:	f7fc fd1c 	bl	5e88 <memcpy>
	net_buf_unref(rsp);
    9450:	9803      	ldr	r0, [sp, #12]
    9452:	f014 fffd 	bl	1e450 <net_buf_unref>
    9456:	e6b6      	b.n	91c6 <bt_init+0x38e>
		bt_dev_show_info();
    9458:	f7fe f8e8 	bl	762c <bt_dev_show_info>
		err = bt_conn_init();
    945c:	f001 fa0e 	bl	a87c <bt_conn_init>
		if (err) {
    9460:	4604      	mov	r4, r0
    9462:	2800      	cmp	r0, #0
    9464:	f47f ad95 	bne.w	8f92 <bt_init+0x15a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9468:	2102      	movs	r1, #2
    946a:	4815      	ldr	r0, [pc, #84]	; (94c0 <bt_init+0x688>)
    946c:	f7fd fb21 	bl	6ab2 <atomic_or>
		bt_le_scan_update(false);
    9470:	4620      	mov	r0, r4
    9472:	f7fe fa29 	bl	78c8 <bt_le_scan_update>
	if (bt_dev.id_count > 0) {
    9476:	79eb      	ldrb	r3, [r5, #7]
    9478:	2b00      	cmp	r3, #0
    947a:	f43f ad8a 	beq.w	8f92 <bt_init+0x15a>
    947e:	2104      	movs	r1, #4
    9480:	480f      	ldr	r0, [pc, #60]	; (94c0 <bt_init+0x688>)
    9482:	f7fd fb16 	bl	6ab2 <atomic_or>
    9486:	e584      	b.n	8f92 <bt_init+0x15a>
    9488:	0002cff8 	.word	0x0002cff8
    948c:	0002d070 	.word	0x0002d070
    9490:	0002ed4c 	.word	0x0002ed4c
    9494:	0002f29c 	.word	0x0002f29c
    9498:	0002f414 	.word	0x0002f414
    949c:	0002ea16 	.word	0x0002ea16
    94a0:	0002f290 	.word	0x0002f290
    94a4:	0002ed69 	.word	0x0002ed69
    94a8:	0002ed85 	.word	0x0002ed85
    94ac:	0002f404 	.word	0x0002f404
    94b0:	0002edb6 	.word	0x0002edb6
    94b4:	2000cce1 	.word	0x2000cce1
    94b8:	0002ede3 	.word	0x0002ede3
    94bc:	2000cce0 	.word	0x2000cce0
    94c0:	2000ccf0 	.word	0x2000ccf0

000094c4 <init_work>:
{
    94c4:	b510      	push	{r4, lr}
	err = bt_init();
    94c6:	f7ff fcb7 	bl	8e38 <bt_init>
	if (ready_cb) {
    94ca:	4b03      	ldr	r3, [pc, #12]	; (94d8 <init_work+0x14>)
    94cc:	681b      	ldr	r3, [r3, #0]
    94ce:	b113      	cbz	r3, 94d6 <init_work+0x12>
}
    94d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    94d4:	4718      	bx	r3
}
    94d6:	bd10      	pop	{r4, pc}
    94d8:	200009e4 	.word	0x200009e4

000094dc <bt_enable>:
{
    94dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.drv) {
    94de:	4e36      	ldr	r6, [pc, #216]	; (95b8 <bt_enable+0xdc>)
    94e0:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
{
    94e4:	b087      	sub	sp, #28
    94e6:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
    94e8:	b9bb      	cbnz	r3, 951a <bt_enable+0x3e>
		BT_ERR("No HCI driver registered");
    94ea:	4a34      	ldr	r2, [pc, #208]	; (95bc <bt_enable+0xe0>)
    94ec:	6812      	ldr	r2, [r2, #0]
    94ee:	0751      	lsls	r1, r2, #29
    94f0:	d010      	beq.n	9514 <bt_enable+0x38>
    94f2:	2101      	movs	r1, #1
    94f4:	f04f 0200 	mov.w	r2, #0
    94f8:	f361 0202 	bfi	r2, r1, #0, #3
    94fc:	f363 02c5 	bfi	r2, r3, #3, #3
    9500:	492f      	ldr	r1, [pc, #188]	; (95c0 <bt_enable+0xe4>)
    9502:	4b30      	ldr	r3, [pc, #192]	; (95c4 <bt_enable+0xe8>)
    9504:	4830      	ldr	r0, [pc, #192]	; (95c8 <bt_enable+0xec>)
    9506:	1a5b      	subs	r3, r3, r1
    9508:	08db      	lsrs	r3, r3, #3
    950a:	f363 128f 	bfi	r2, r3, #6, #10
    950e:	492f      	ldr	r1, [pc, #188]	; (95cc <bt_enable+0xf0>)
    9510:	f7f8 fc22 	bl	1d58 <log_1>
		return -ENODEV;
    9514:	f06f 0412 	mvn.w	r4, #18
    9518:	e034      	b.n	9584 <bt_enable+0xa8>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    951a:	2101      	movs	r1, #1
    951c:	f106 0070 	add.w	r0, r6, #112	; 0x70
    9520:	f7fd fac7 	bl	6ab2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9524:	f010 0501 	ands.w	r5, r0, #1
    9528:	d142      	bne.n	95b0 <bt_enable+0xd4>
	ready_cb = cb;
    952a:	4b29      	ldr	r3, [pc, #164]	; (95d0 <bt_enable+0xf4>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    952c:	4929      	ldr	r1, [pc, #164]	; (95d4 <bt_enable+0xf8>)
    952e:	601f      	str	r7, [r3, #0]
    9530:	f06f 0308 	mvn.w	r3, #8
    9534:	e9cd 5302 	strd	r5, r3, [sp, #8]
    9538:	f44f 7220 	mov.w	r2, #640	; 0x280
    953c:	4b26      	ldr	r3, [pc, #152]	; (95d8 <bt_enable+0xfc>)
    953e:	4827      	ldr	r0, [pc, #156]	; (95dc <bt_enable+0x100>)
    9540:	e9cd 5504 	strd	r5, r5, [sp, #16]
    9544:	e9cd 5500 	strd	r5, r5, [sp]
    9548:	f022 ffea 	bl	2c520 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    954c:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    9550:	68db      	ldr	r3, [r3, #12]
    9552:	4798      	blx	r3
	if (err) {
    9554:	4604      	mov	r4, r0
    9556:	b1c0      	cbz	r0, 958a <bt_enable+0xae>
		BT_ERR("HCI driver open failed (%d)", err);
    9558:	4b18      	ldr	r3, [pc, #96]	; (95bc <bt_enable+0xe0>)
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	075a      	lsls	r2, r3, #29
    955e:	d011      	beq.n	9584 <bt_enable+0xa8>
    9560:	2201      	movs	r2, #1
    9562:	f04f 0300 	mov.w	r3, #0
    9566:	f362 0302 	bfi	r3, r2, #0, #3
    956a:	4915      	ldr	r1, [pc, #84]	; (95c0 <bt_enable+0xe4>)
    956c:	4a15      	ldr	r2, [pc, #84]	; (95c4 <bt_enable+0xe8>)
    956e:	1a52      	subs	r2, r2, r1
    9570:	08d2      	lsrs	r2, r2, #3
    9572:	f365 03c5 	bfi	r3, r5, #3, #3
    9576:	f362 138f 	bfi	r3, r2, #6, #10
    957a:	4914      	ldr	r1, [pc, #80]	; (95cc <bt_enable+0xf0>)
    957c:	4602      	mov	r2, r0
    957e:	4818      	ldr	r0, [pc, #96]	; (95e0 <bt_enable+0x104>)
    9580:	f7f8 fbfe 	bl	1d80 <log_2>
}
    9584:	4620      	mov	r0, r4
    9586:	b007      	add	sp, #28
    9588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!cb) {
    958a:	b927      	cbnz	r7, 9596 <bt_enable+0xba>
}
    958c:	b007      	add	sp, #28
    958e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
    9592:	f7ff bc51 	b.w	8e38 <bt_init>
    9596:	2101      	movs	r1, #1
    9598:	f106 006c 	add.w	r0, r6, #108	; 0x6c
    959c:	f7fd fa89 	bl	6ab2 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    95a0:	07c3      	lsls	r3, r0, #31
    95a2:	d4ef      	bmi.n	9584 <bt_enable+0xa8>
		k_queue_append(&work_q->queue, work);
    95a4:	f106 0164 	add.w	r1, r6, #100	; 0x64
    95a8:	480e      	ldr	r0, [pc, #56]	; (95e4 <bt_enable+0x108>)
    95aa:	f022 fbc9 	bl	2bd40 <k_queue_append>
    95ae:	e7e9      	b.n	9584 <bt_enable+0xa8>
		return -EALREADY;
    95b0:	f06f 0444 	mvn.w	r4, #68	; 0x44
    95b4:	e7e6      	b.n	9584 <bt_enable+0xa8>
    95b6:	bf00      	nop
    95b8:	2000cc80 	.word	0x2000cc80
    95bc:	2000d74c 	.word	0x2000d74c
    95c0:	0002cff8 	.word	0x0002cff8
    95c4:	0002d070 	.word	0x0002d070
    95c8:	0002eb1a 	.word	0x0002eb1a
    95cc:	0002ea40 	.word	0x0002ea40
    95d0:	200009e4 	.word	0x200009e4
    95d4:	20004628 	.word	0x20004628
    95d8:	00007c15 	.word	0x00007c15
    95dc:	200009ec 	.word	0x200009ec
    95e0:	0002eb37 	.word	0x0002eb37
    95e4:	200031d8 	.word	0x200031d8

000095e8 <bt_addr_le_is_bonded>:
{
    95e8:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
    95ea:	f006 ff35 	bl	10458 <bt_keys_find_addr>
		return keys && keys->keys;
    95ee:	b118      	cbz	r0, 95f8 <bt_addr_le_is_bonded+0x10>
    95f0:	8940      	ldrh	r0, [r0, #10]
    95f2:	3000      	adds	r0, #0
    95f4:	bf18      	it	ne
    95f6:	2001      	movne	r0, #1
}
    95f8:	bd08      	pop	{r3, pc}
	...

000095fc <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    95fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (param->id >= bt_dev.id_count ||
    9600:	4e73      	ldr	r6, [pc, #460]	; (97d0 <bt_le_adv_start_internal+0x1d4>)
{
    9602:	4604      	mov	r4, r0
    9604:	4698      	mov	r8, r3
	if (param->id >= bt_dev.id_count ||
    9606:	7800      	ldrb	r0, [r0, #0]
    9608:	79f3      	ldrb	r3, [r6, #7]
{
    960a:	b088      	sub	sp, #32
	if (param->id >= bt_dev.id_count ||
    960c:	4283      	cmp	r3, r0
{
    960e:	460d      	mov	r5, r1
    9610:	4692      	mov	sl, r2
    9612:	9f11      	ldr	r7, [sp, #68]	; 0x44
	if (param->id >= bt_dev.id_count ||
    9614:	d805      	bhi.n	9622 <bt_le_adv_start_internal+0x26>
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    9616:	f06f 0515 	mvn.w	r5, #21
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
		atomic_set_bit(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE);
	}

	return 0;
}
    961a:	4628      	mov	r0, r5
    961c:	b008      	add	sp, #32
    961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    9622:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9626:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9628:	2207      	movs	r2, #7
    962a:	a902      	add	r1, sp, #8
    962c:	4430      	add	r0, r6
    962e:	9302      	str	r3, [sp, #8]
    9630:	f8cd 300b 	str.w	r3, [sp, #11]
    9634:	f7fc fc01 	bl	5e3a <memcmp>
	if (param->id >= bt_dev.id_count ||
    9638:	2800      	cmp	r0, #0
    963a:	d0ec      	beq.n	9616 <bt_le_adv_start_internal+0x1a>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    963c:	7863      	ldrb	r3, [r4, #1]
    963e:	07d8      	lsls	r0, r3, #31
    9640:	d405      	bmi.n	964e <bt_le_adv_start_internal+0x52>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    9642:	7c32      	ldrb	r2, [r6, #16]
    9644:	2a08      	cmp	r2, #8
    9646:	d802      	bhi.n	964e <bt_le_adv_start_internal+0x52>
    9648:	8862      	ldrh	r2, [r4, #2]
    964a:	2a9f      	cmp	r2, #159	; 0x9f
    964c:	d9e3      	bls.n	9616 <bt_le_adv_start_internal+0x1a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    964e:	06d9      	lsls	r1, r3, #27
    9650:	d400      	bmi.n	9654 <bt_le_adv_start_internal+0x58>
    9652:	b947      	cbnz	r7, 9666 <bt_le_adv_start_internal+0x6a>
		if (param->interval_min > param->interval_max ||
    9654:	8862      	ldrh	r2, [r4, #2]
    9656:	88a3      	ldrh	r3, [r4, #4]
    9658:	429a      	cmp	r2, r3
    965a:	d8dc      	bhi.n	9616 <bt_le_adv_start_internal+0x1a>
    965c:	2a1f      	cmp	r2, #31
    965e:	d9da      	bls.n	9616 <bt_le_adv_start_internal+0x1a>
		    param->interval_min < 0x0020 ||
    9660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9664:	d8d7      	bhi.n	9616 <bt_le_adv_start_internal+0x1a>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9666:	2106      	movs	r1, #6
    9668:	485a      	ldr	r0, [pc, #360]	; (97d4 <bt_le_adv_start_internal+0x1d8>)
    966a:	f7fd fb49 	bl	6d00 <atomic_test_bit>
    966e:	4681      	mov	r9, r0
    9670:	2800      	cmp	r0, #0
    9672:	f040 80a7 	bne.w	97c4 <bt_le_adv_start_internal+0x1c8>
	if (!dir_adv) {
    9676:	b377      	cbz	r7, 96d6 <bt_le_adv_start_internal+0xda>
	(void)memset(&set_param, 0, sizeof(set_param));
    9678:	220f      	movs	r2, #15
    967a:	2100      	movs	r1, #0
    967c:	a804      	add	r0, sp, #16
    967e:	f7fc fc30 	bl	5ee2 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9682:	8863      	ldrh	r3, [r4, #2]
	bt_dev.adv_id = param->id;
    9684:	7825      	ldrb	r5, [r4, #0]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9686:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    968a:	88a3      	ldrh	r3, [r4, #4]
	bt_dev.adv_id = param->id;
    968c:	7235      	strb	r5, [r6, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    968e:	f8ad 3012 	strh.w	r3, [sp, #18]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9692:	7863      	ldrb	r3, [r4, #1]
	set_param.channel_map  = 0x07;
    9694:	2007      	movs	r0, #7
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9696:	07da      	lsls	r2, r3, #31
	set_param.channel_map  = 0x07;
    9698:	f88d 001d 	strb.w	r0, [sp, #29]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    969c:	d42c      	bmi.n	96f8 <bt_le_adv_start_internal+0xfc>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    969e:	075f      	lsls	r7, r3, #29
    96a0:	f140 8087 	bpl.w	97b2 <bt_le_adv_start_internal+0x1b6>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    96a4:	00ef      	lsls	r7, r5, #3
    96a6:	1b7b      	subs	r3, r7, r5
    96a8:	5cf3      	ldrb	r3, [r6, r3]
    96aa:	2b01      	cmp	r3, #1
    96ac:	d105      	bne.n	96ba <bt_le_adv_start_internal+0xbe>
				err = set_random_address(&id_addr->a);
    96ae:	fb10 3005 	smlabb	r0, r0, r5, r3
    96b2:	4430      	add	r0, r6
    96b4:	f7fd fc66 	bl	6f84 <set_random_address>
    96b8:	4681      	mov	r9, r0
			set_param.own_addr_type = id_addr->type;
    96ba:	1b7d      	subs	r5, r7, r5
    96bc:	5d73      	ldrb	r3, [r6, r5]
    96be:	f88d 3015 	strb.w	r3, [sp, #21]
    96c2:	464d      	mov	r5, r9
		if (err) {
    96c4:	2d00      	cmp	r5, #0
    96c6:	d1a8      	bne.n	961a <bt_le_adv_start_internal+0x1e>
		if (sd) {
    96c8:	f1b8 0f00 	cmp.w	r8, #0
    96cc:	d078      	beq.n	97c0 <bt_le_adv_start_internal+0x1c4>
			set_param.type = BT_LE_ADV_SCAN_IND;
    96ce:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    96d0:	f88d 3014 	strb.w	r3, [sp, #20]
    96d4:	e033      	b.n	973e <bt_le_adv_start_internal+0x142>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    96d6:	7863      	ldrb	r3, [r4, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    96d8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    96dc:	f003 0301 	and.w	r3, r3, #1
    96e0:	9201      	str	r2, [sp, #4]
    96e2:	9300      	str	r3, [sp, #0]
    96e4:	4628      	mov	r0, r5
    96e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    96e8:	4642      	mov	r2, r8
    96ea:	4651      	mov	r1, sl
    96ec:	f7fd fd02 	bl	70f4 <le_adv_update>
		if (err) {
    96f0:	4605      	mov	r5, r0
    96f2:	2800      	cmp	r0, #0
    96f4:	d0c0      	beq.n	9678 <bt_le_adv_start_internal+0x7c>
    96f6:	e790      	b.n	961a <bt_le_adv_start_internal+0x1e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    96f8:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    96fc:	eba8 0305 	sub.w	r3, r8, r5
    9700:	5cf3      	ldrb	r3, [r6, r3]
    9702:	2b01      	cmp	r3, #1
    9704:	d104      	bne.n	9710 <bt_le_adv_start_internal+0x114>
				set_random_address(&id_addr->a);
    9706:	fb10 3005 	smlabb	r0, r0, r5, r3
    970a:	4430      	add	r0, r6
    970c:	f7fd fc3a 	bl	6f84 <set_random_address>
			set_param.own_addr_type = id_addr->type;
    9710:	eba8 0505 	sub.w	r5, r8, r5
    9714:	5d73      	ldrb	r3, [r6, r5]
    9716:	f88d 3015 	strb.w	r3, [sp, #21]
		if (dir_adv) {
    971a:	2f00      	cmp	r7, #0
    971c:	d046      	beq.n	97ac <bt_le_adv_start_internal+0x1b0>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    971e:	7863      	ldrb	r3, [r4, #1]
    9720:	06db      	lsls	r3, r3, #27
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    9722:	bf4c      	ite	mi
    9724:	2304      	movmi	r3, #4
				set_param.type = BT_LE_ADV_DIRECT_IND;
    9726:	2301      	movpl	r3, #1
    9728:	f88d 3014 	strb.w	r3, [sp, #20]
			set_param.direct_addr = *peer;
    972c:	683b      	ldr	r3, [r7, #0]
    972e:	f8cd 3016 	str.w	r3, [sp, #22]
    9732:	88bb      	ldrh	r3, [r7, #4]
    9734:	f8ad 301a 	strh.w	r3, [sp, #26]
    9738:	79bb      	ldrb	r3, [r7, #6]
    973a:	f88d 301c 	strb.w	r3, [sp, #28]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    973e:	210f      	movs	r1, #15
    9740:	f242 0006 	movw	r0, #8198	; 0x2006
    9744:	f7fd fb0a 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    9748:	4605      	mov	r5, r0
    974a:	2800      	cmp	r0, #0
    974c:	d03d      	beq.n	97ca <bt_le_adv_start_internal+0x1ce>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    974e:	220f      	movs	r2, #15
    9750:	a904      	add	r1, sp, #16
    9752:	3008      	adds	r0, #8
    9754:	f014 fee0 	bl	1e518 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9758:	4629      	mov	r1, r5
    975a:	2200      	movs	r2, #0
    975c:	f242 0006 	movw	r0, #8198	; 0x2006
    9760:	f7fd fb2c 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    9764:	4605      	mov	r5, r0
    9766:	2800      	cmp	r0, #0
    9768:	f47f af57 	bne.w	961a <bt_le_adv_start_internal+0x1e>
	err = set_advertise_enable(true);
    976c:	2001      	movs	r0, #1
    976e:	f7fd fbdf 	bl	6f30 <set_advertise_enable>
	if (err) {
    9772:	4605      	mov	r5, r0
    9774:	2800      	cmp	r0, #0
    9776:	f47f af50 	bne.w	961a <bt_le_adv_start_internal+0x1e>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    977a:	7863      	ldrb	r3, [r4, #1]
    977c:	0799      	lsls	r1, r3, #30
    977e:	d404      	bmi.n	978a <bt_le_adv_start_internal+0x18e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9780:	f44f 7100 	mov.w	r1, #512	; 0x200
    9784:	4813      	ldr	r0, [pc, #76]	; (97d4 <bt_le_adv_start_internal+0x1d8>)
    9786:	f7fd f994 	bl	6ab2 <atomic_or>
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
    978a:	7863      	ldrb	r3, [r4, #1]
    978c:	071a      	lsls	r2, r3, #28
    978e:	d503      	bpl.n	9798 <bt_le_adv_start_internal+0x19c>
    9790:	2180      	movs	r1, #128	; 0x80
    9792:	4810      	ldr	r0, [pc, #64]	; (97d4 <bt_le_adv_start_internal+0x1d8>)
    9794:	f7fd f98d 	bl	6ab2 <atomic_or>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9798:	7863      	ldrb	r3, [r4, #1]
    979a:	07db      	lsls	r3, r3, #31
    979c:	f57f af3d 	bpl.w	961a <bt_le_adv_start_internal+0x1e>
    97a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    97a4:	480b      	ldr	r0, [pc, #44]	; (97d4 <bt_le_adv_start_internal+0x1d8>)
    97a6:	f7fd f984 	bl	6ab2 <atomic_or>
    97aa:	e736      	b.n	961a <bt_le_adv_start_internal+0x1e>
			set_param.type = BT_LE_ADV_IND;
    97ac:	f88d 7014 	strb.w	r7, [sp, #20]
    97b0:	e7c5      	b.n	973e <bt_le_adv_start_internal+0x142>
			err = le_set_private_addr(param->id);
    97b2:	f7fd fc15 	bl	6fe0 <le_set_private_addr.isra.26>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    97b6:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    97b8:	4605      	mov	r5, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    97ba:	f88d 3015 	strb.w	r3, [sp, #21]
    97be:	e781      	b.n	96c4 <bt_le_adv_start_internal+0xc8>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    97c0:	2303      	movs	r3, #3
    97c2:	e785      	b.n	96d0 <bt_le_adv_start_internal+0xd4>
		return -EALREADY;
    97c4:	f06f 0544 	mvn.w	r5, #68	; 0x44
    97c8:	e727      	b.n	961a <bt_le_adv_start_internal+0x1e>
		return -ENOBUFS;
    97ca:	f06f 0536 	mvn.w	r5, #54	; 0x36
    97ce:	e724      	b.n	961a <bt_le_adv_start_internal+0x1e>
    97d0:	2000cc80 	.word	0x2000cc80
    97d4:	2000ccf0 	.word	0x2000ccf0

000097d8 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    97d8:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    97da:	7844      	ldrb	r4, [r0, #1]
    97dc:	f014 0410 	ands.w	r4, r4, #16
    97e0:	d106      	bne.n	97f0 <bt_le_adv_start+0x18>
		return -EINVAL;
	}

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
    97e2:	9401      	str	r4, [sp, #4]
    97e4:	9c04      	ldr	r4, [sp, #16]
    97e6:	9400      	str	r4, [sp, #0]
    97e8:	f7ff ff08 	bl	95fc <bt_le_adv_start_internal>
}
    97ec:	b002      	add	sp, #8
    97ee:	bd10      	pop	{r4, pc}
		return -EINVAL;
    97f0:	f06f 0015 	mvn.w	r0, #21
    97f4:	e7fa      	b.n	97ec <bt_le_adv_start+0x14>
	...

000097f8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    97f8:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    97fa:	f46f 7100 	mvn.w	r1, #512	; 0x200
    97fe:	4810      	ldr	r0, [pc, #64]	; (9840 <bt_le_adv_stop+0x48>)
    9800:	f7fd f966 	bl	6ad0 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9804:	2106      	movs	r1, #6
    9806:	480e      	ldr	r0, [pc, #56]	; (9840 <bt_le_adv_stop+0x48>)
    9808:	f7fd fa7a 	bl	6d00 <atomic_test_bit>
    980c:	b910      	cbnz	r0, 9814 <bt_le_adv_stop+0x1c>
		return 0;
    980e:	2400      	movs	r4, #0
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    9810:	4620      	mov	r0, r4
    9812:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    9814:	2000      	movs	r0, #0
    9816:	f7fd fb8b 	bl	6f30 <set_advertise_enable>
	if (err) {
    981a:	4604      	mov	r4, r0
    981c:	2800      	cmp	r0, #0
    981e:	d1f7      	bne.n	9810 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9820:	210a      	movs	r1, #10
    9822:	4807      	ldr	r0, [pc, #28]	; (9840 <bt_le_adv_stop+0x48>)
    9824:	f7fd fa6c 	bl	6d00 <atomic_test_bit>
    9828:	2800      	cmp	r0, #0
    982a:	d0f0      	beq.n	980e <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    982c:	210c      	movs	r1, #12
    982e:	4804      	ldr	r0, [pc, #16]	; (9840 <bt_le_adv_stop+0x48>)
    9830:	f7fd fa66 	bl	6d00 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9834:	2800      	cmp	r0, #0
    9836:	d0ea      	beq.n	980e <bt_le_adv_stop+0x16>
			le_set_private_addr(bt_dev.adv_id);
    9838:	f7fd fbd2 	bl	6fe0 <le_set_private_addr.isra.26>
    983c:	e7e8      	b.n	9810 <bt_le_adv_stop+0x18>
    983e:	bf00      	nop
    9840:	2000ccf0 	.word	0x2000ccf0

00009844 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    9844:	b538      	push	{r3, r4, r5, lr}
    9846:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    9848:	4805      	ldr	r0, [pc, #20]	; (9860 <bt_buf_get_rx+0x1c>)
    984a:	f014 fdd1 	bl	1e3f0 <net_buf_alloc_fixed>
#endif

	if (buf) {
    984e:	4604      	mov	r4, r0
    9850:	b120      	cbz	r0, 985c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9852:	2100      	movs	r1, #0
    9854:	3008      	adds	r0, #8
    9856:	f014 fdea 	bl	1e42e <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    985a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    985c:	4620      	mov	r0, r4
    985e:	bd38      	pop	{r3, r4, r5, pc}
    9860:	2000d968 	.word	0x2000d968

00009864 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    9864:	b510      	push	{r4, lr}
    9866:	4601      	mov	r1, r0
	__asm__ volatile(
    9868:	f04f 0320 	mov.w	r3, #32
    986c:	f3ef 8011 	mrs	r0, BASEPRI
    9870:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    9874:	4a0b      	ldr	r2, [pc, #44]	; (98a4 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    9876:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    9878:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    987c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9880:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    9884:	b924      	cbnz	r4, 9890 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9886:	2001      	movs	r0, #1
}
    9888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    988c:	f7ff bfda 	b.w	9844 <bt_buf_get_rx>
    9890:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9892:	f104 0008 	add.w	r0, r4, #8
    9896:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    9898:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    989a:	4619      	mov	r1, r3
    989c:	f014 fdc7 	bl	1e42e <net_buf_simple_reserve>
}
    98a0:	4620      	mov	r0, r4
    98a2:	bd10      	pop	{r4, pc}
    98a4:	2000cc80 	.word	0x2000cc80

000098a8 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    98a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    98ac:	4c33      	ldr	r4, [pc, #204]	; (997c <bt_pub_key_gen+0xd4>)
    98ae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    98b2:	f003 0306 	and.w	r3, r3, #6
    98b6:	2b06      	cmp	r3, #6
{
    98b8:	4606      	mov	r6, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    98ba:	d019      	beq.n	98f0 <bt_pub_key_gen+0x48>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    98bc:	4b30      	ldr	r3, [pc, #192]	; (9980 <bt_pub_key_gen+0xd8>)
    98be:	681b      	ldr	r3, [r3, #0]
    98c0:	f003 0307 	and.w	r3, r3, #7
    98c4:	2b01      	cmp	r3, #1
    98c6:	d910      	bls.n	98ea <bt_pub_key_gen+0x42>
    98c8:	2302      	movs	r3, #2
    98ca:	f04f 0200 	mov.w	r2, #0
    98ce:	f363 0202 	bfi	r2, r3, #0, #3
    98d2:	492c      	ldr	r1, [pc, #176]	; (9984 <bt_pub_key_gen+0xdc>)
    98d4:	4b2c      	ldr	r3, [pc, #176]	; (9988 <bt_pub_key_gen+0xe0>)
    98d6:	482d      	ldr	r0, [pc, #180]	; (998c <bt_pub_key_gen+0xe4>)
    98d8:	1a5b      	subs	r3, r3, r1
    98da:	f36f 02c5 	bfc	r2, #3, #3
    98de:	08db      	lsrs	r3, r3, #3
    98e0:	f363 128f 	bfi	r2, r3, #6, #10
    98e4:	492a      	ldr	r1, [pc, #168]	; (9990 <bt_pub_key_gen+0xe8>)
    98e6:	f7f8 fa37 	bl	1d58 <log_1>
		return -ENOTSUP;
    98ea:	f06f 0422 	mvn.w	r4, #34	; 0x22
    98ee:	e00d      	b.n	990c <bt_pub_key_gen+0x64>
	}

	new_cb->_next = pub_key_cb;
    98f0:	4d28      	ldr	r5, [pc, #160]	; (9994 <bt_pub_key_gen+0xec>)
    98f2:	682b      	ldr	r3, [r5, #0]
    98f4:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    98f6:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    98f8:	2120      	movs	r1, #32
    98fa:	f104 0070 	add.w	r0, r4, #112	; 0x70
    98fe:	f7fd f8d8 	bl	6ab2 <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9902:	f010 0820 	ands.w	r8, r0, #32
    9906:	462f      	mov	r7, r5
    9908:	d003      	beq.n	9912 <bt_pub_key_gen+0x6a>
		return 0;
    990a:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    990c:	4620      	mov	r0, r4
    990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9912:	f06f 0110 	mvn.w	r1, #16
    9916:	f104 0070 	add.w	r0, r4, #112	; 0x70
    991a:	f7fd f8d9 	bl	6ad0 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    991e:	4642      	mov	r2, r8
    9920:	4641      	mov	r1, r8
    9922:	f242 0025 	movw	r0, #8229	; 0x2025
    9926:	f7fd fa49 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    992a:	4604      	mov	r4, r0
    992c:	b1e0      	cbz	r0, 9968 <bt_pub_key_gen+0xc0>
		BT_ERR("Sending LE P256 Public Key command failed");
    992e:	4b14      	ldr	r3, [pc, #80]	; (9980 <bt_pub_key_gen+0xd8>)
    9930:	681b      	ldr	r3, [r3, #0]
    9932:	075b      	lsls	r3, r3, #29
    9934:	d010      	beq.n	9958 <bt_pub_key_gen+0xb0>
    9936:	2301      	movs	r3, #1
    9938:	f04f 0200 	mov.w	r2, #0
    993c:	f363 0202 	bfi	r2, r3, #0, #3
    9940:	4910      	ldr	r1, [pc, #64]	; (9984 <bt_pub_key_gen+0xdc>)
    9942:	4b11      	ldr	r3, [pc, #68]	; (9988 <bt_pub_key_gen+0xe0>)
    9944:	4814      	ldr	r0, [pc, #80]	; (9998 <bt_pub_key_gen+0xf0>)
    9946:	1a5b      	subs	r3, r3, r1
    9948:	f368 02c5 	bfi	r2, r8, #3, #3
    994c:	08db      	lsrs	r3, r3, #3
    994e:	f363 128f 	bfi	r2, r3, #6, #10
    9952:	490f      	ldr	r1, [pc, #60]	; (9990 <bt_pub_key_gen+0xe8>)
    9954:	f7f8 fa00 	bl	1d58 <log_1>
    9958:	f06f 0120 	mvn.w	r1, #32
    995c:	480f      	ldr	r0, [pc, #60]	; (999c <bt_pub_key_gen+0xf4>)
    995e:	f7fd f8b7 	bl	6ad0 <atomic_and>
		pub_key_cb = NULL;
    9962:	2300      	movs	r3, #0
    9964:	603b      	str	r3, [r7, #0]
		return err;
    9966:	e7d1      	b.n	990c <bt_pub_key_gen+0x64>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    9968:	682c      	ldr	r4, [r5, #0]
    996a:	2c00      	cmp	r4, #0
    996c:	d0cd      	beq.n	990a <bt_pub_key_gen+0x62>
		if (cb != new_cb) {
    996e:	42b4      	cmp	r4, r6
    9970:	d002      	beq.n	9978 <bt_pub_key_gen+0xd0>
			cb->func(NULL);
    9972:	6823      	ldr	r3, [r4, #0]
    9974:	2000      	movs	r0, #0
    9976:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    9978:	6864      	ldr	r4, [r4, #4]
    997a:	e7f6      	b.n	996a <bt_pub_key_gen+0xc2>
    997c:	2000cc80 	.word	0x2000cc80
    9980:	2000d74c 	.word	0x2000d74c
    9984:	0002cff8 	.word	0x0002cff8
    9988:	0002d070 	.word	0x0002d070
    998c:	0002ee33 	.word	0x0002ee33
    9990:	0002ea72 	.word	0x0002ea72
    9994:	200009e0 	.word	0x200009e0
    9998:	0002ee56 	.word	0x0002ee56
    999c:	2000ccf0 	.word	0x2000ccf0

000099a0 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    99a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    99a2:	4c1a      	ldr	r4, [pc, #104]	; (9a0c <bt_dh_key_gen+0x6c>)
    99a4:	6822      	ldr	r2, [r4, #0]
{
    99a6:	4607      	mov	r7, r0
    99a8:	460b      	mov	r3, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    99aa:	b112      	cbz	r2, 99b2 <bt_dh_key_gen+0x12>
		return -EBUSY;
    99ac:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    99b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    99b2:	2105      	movs	r1, #5
    99b4:	4816      	ldr	r0, [pc, #88]	; (9a10 <bt_dh_key_gen+0x70>)
    99b6:	f7fd f9a3 	bl	6d00 <atomic_test_bit>
    99ba:	4606      	mov	r6, r0
    99bc:	2800      	cmp	r0, #0
    99be:	d1f5      	bne.n	99ac <bt_dh_key_gen+0xc>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    99c0:	2104      	movs	r1, #4
    99c2:	4813      	ldr	r0, [pc, #76]	; (9a10 <bt_dh_key_gen+0x70>)
    99c4:	f7fd f99c 	bl	6d00 <atomic_test_bit>
    99c8:	b1e8      	cbz	r0, 9a06 <bt_dh_key_gen+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    99ca:	2140      	movs	r1, #64	; 0x40
    99cc:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    99d0:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    99d2:	f7fd f9c3 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    99d6:	4605      	mov	r5, r0
    99d8:	b918      	cbnz	r0, 99e2 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    99da:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    99dc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    99e0:	e7e6      	b.n	99b0 <bt_dh_key_gen+0x10>
	cp = net_buf_add(buf, sizeof(*cp));
    99e2:	2140      	movs	r1, #64	; 0x40
    99e4:	3008      	adds	r0, #8
    99e6:	f014 fd91 	bl	1e50c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    99ea:	2240      	movs	r2, #64	; 0x40
    99ec:	4639      	mov	r1, r7
    99ee:	f7fc fa4b 	bl	5e88 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    99f2:	4632      	mov	r2, r6
    99f4:	4629      	mov	r1, r5
    99f6:	f242 0026 	movw	r0, #8230	; 0x2026
    99fa:	f7fd f9df 	bl	6dbc <bt_hci_cmd_send_sync>
	if (err) {
    99fe:	2800      	cmp	r0, #0
    9a00:	d0d6      	beq.n	99b0 <bt_dh_key_gen+0x10>
		dh_key_cb = NULL;
    9a02:	6026      	str	r6, [r4, #0]
		return err;
    9a04:	e7d4      	b.n	99b0 <bt_dh_key_gen+0x10>
		return -EADDRNOTAVAIL;
    9a06:	f06f 0030 	mvn.w	r0, #48	; 0x30
    9a0a:	e7d1      	b.n	99b0 <bt_dh_key_gen+0x10>
    9a0c:	2000099c 	.word	0x2000099c
    9a10:	2000ccf0 	.word	0x2000ccf0

00009a14 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    9a14:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    9a16:	4b06      	ldr	r3, [pc, #24]	; (9a30 <notify_connected+0x1c>)
    9a18:	681c      	ldr	r4, [r3, #0]
{
    9a1a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    9a1c:	b904      	cbnz	r4, 9a20 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    9a1e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    9a20:	6823      	ldr	r3, [r4, #0]
    9a22:	b113      	cbz	r3, 9a2a <notify_connected+0x16>
			cb->connected(conn, conn->err);
    9a24:	7b29      	ldrb	r1, [r5, #12]
    9a26:	4628      	mov	r0, r5
    9a28:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9a2a:	69a4      	ldr	r4, [r4, #24]
    9a2c:	e7f6      	b.n	9a1c <notify_connected+0x8>
    9a2e:	bf00      	nop
    9a30:	20000a58 	.word	0x20000a58

00009a34 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9a34:	f3bf 8f5b 	dmb	ish
    9a38:	6800      	ldr	r0, [r0, #0]
    9a3a:	f3bf 8f5b 	dmb	ish
}
    9a3e:	4770      	bx	lr

00009a40 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    9a40:	89c3      	ldrh	r3, [r0, #14]
{
    9a42:	b510      	push	{r4, lr}
    9a44:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    9a46:	b12b      	cbz	r3, 9a54 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    9a48:	6900      	ldr	r0, [r0, #16]
    9a4a:	f014 fd01 	bl	1e450 <net_buf_unref>
	conn->rx = NULL;
    9a4e:	2300      	movs	r3, #0
    9a50:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    9a52:	81e3      	strh	r3, [r4, #14]
}
    9a54:	bd10      	pop	{r4, pc}

00009a56 <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9a56:	f3bf 8f5b 	dmb	ish
    9a5a:	e850 3f00 	ldrex	r3, [r0]
    9a5e:	1e5a      	subs	r2, r3, #1
    9a60:	e840 2100 	strex	r1, r2, [r0]
    9a64:	2900      	cmp	r1, #0
    9a66:	d1f8      	bne.n	9a5a <atomic_dec+0x4>
    9a68:	f3bf 8f5b 	dmb	ish
}
    9a6c:	4618      	mov	r0, r3
    9a6e:	4770      	bx	lr

00009a70 <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9a70:	f3bf 8f5b 	dmb	ish
    9a74:	e850 3f00 	ldrex	r3, [r0]
    9a78:	1c5a      	adds	r2, r3, #1
    9a7a:	e840 2100 	strex	r1, r2, [r0]
    9a7e:	2900      	cmp	r1, #0
    9a80:	d1f8      	bne.n	9a74 <atomic_inc+0x4>
    9a82:	f3bf 8f5b 	dmb	ish
}
    9a86:	4618      	mov	r0, r3
    9a88:	4770      	bx	lr
	...

00009a8c <bt_conn_get_pkts>:
}
    9a8c:	4800      	ldr	r0, [pc, #0]	; (9a90 <bt_conn_get_pkts+0x4>)
    9a8e:	4770      	bx	lr
    9a90:	2000cd0c 	.word	0x2000cd0c

00009a94 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    9a94:	4b08      	ldr	r3, [pc, #32]	; (9ab8 <notify_le_param_updated+0x24>)
{
    9a96:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    9a98:	681c      	ldr	r4, [r3, #0]
{
    9a9a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    9a9c:	b904      	cbnz	r4, 9aa0 <notify_le_param_updated+0xc>
}
    9a9e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    9aa0:	68e6      	ldr	r6, [r4, #12]
    9aa2:	b13e      	cbz	r6, 9ab4 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    9aa4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    9aa8:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    9aac:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    9ab0:	4628      	mov	r0, r5
    9ab2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    9ab4:	69a4      	ldr	r4, [r4, #24]
    9ab6:	e7f1      	b.n	9a9c <notify_le_param_updated+0x8>
    9ab8:	20000a58 	.word	0x20000a58

00009abc <le_param_req>:
{
    9abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9abe:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    9ac0:	4608      	mov	r0, r1
{
    9ac2:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    9ac4:	f7fd fb60 	bl	7188 <bt_le_conn_params_valid>
    9ac8:	4605      	mov	r5, r0
    9aca:	b910      	cbnz	r0, 9ad2 <le_param_req+0x16>
		return false;
    9acc:	2500      	movs	r5, #0
}
    9ace:	4628      	mov	r0, r5
    9ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    9ad2:	4b09      	ldr	r3, [pc, #36]	; (9af8 <le_param_req+0x3c>)
    9ad4:	681c      	ldr	r4, [r3, #0]
    9ad6:	2c00      	cmp	r4, #0
    9ad8:	d0f9      	beq.n	9ace <le_param_req+0x12>
		if (!cb->le_param_req) {
    9ada:	68a3      	ldr	r3, [r4, #8]
    9adc:	b90b      	cbnz	r3, 9ae2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    9ade:	69a4      	ldr	r4, [r4, #24]
    9ae0:	e7f9      	b.n	9ad6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    9ae2:	4631      	mov	r1, r6
    9ae4:	4638      	mov	r0, r7
    9ae6:	4798      	blx	r3
    9ae8:	2800      	cmp	r0, #0
    9aea:	d0ef      	beq.n	9acc <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    9aec:	4630      	mov	r0, r6
    9aee:	f7fd fb4b 	bl	7188 <bt_le_conn_params_valid>
    9af2:	2800      	cmp	r0, #0
    9af4:	d1f3      	bne.n	9ade <le_param_req+0x22>
    9af6:	e7e9      	b.n	9acc <le_param_req+0x10>
    9af8:	20000a58 	.word	0x20000a58

00009afc <bt_conn_identity_resolved>:
{
    9afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    9afe:	78c3      	ldrb	r3, [r0, #3]
{
    9b00:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    9b02:	b93b      	cbnz	r3, 9b14 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    9b04:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    9b08:	4b08      	ldr	r3, [pc, #32]	; (9b2c <bt_conn_identity_resolved+0x30>)
    9b0a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9b0c:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    9b10:	b91d      	cbnz	r5, 9b1a <bt_conn_identity_resolved+0x1e>
}
    9b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    9b14:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    9b18:	e7f6      	b.n	9b08 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    9b1a:	692b      	ldr	r3, [r5, #16]
    9b1c:	b11b      	cbz	r3, 9b26 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9b1e:	463a      	mov	r2, r7
    9b20:	4631      	mov	r1, r6
    9b22:	4620      	mov	r0, r4
    9b24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9b26:	69ad      	ldr	r5, [r5, #24]
    9b28:	e7f2      	b.n	9b10 <bt_conn_identity_resolved+0x14>
    9b2a:	bf00      	nop
    9b2c:	20000a58 	.word	0x20000a58

00009b30 <bt_conn_le_start_encryption>:
{
    9b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b34:	4682      	mov	sl, r0
    9b36:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    9b38:	f242 0019 	movw	r0, #8217	; 0x2019
    9b3c:	211c      	movs	r1, #28
{
    9b3e:	4690      	mov	r8, r2
    9b40:	461f      	mov	r7, r3
    9b42:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    9b44:	f7fd f90a 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    9b48:	4606      	mov	r6, r0
    9b4a:	b340      	cbz	r0, 9b9e <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
    9b4c:	211c      	movs	r1, #28
    9b4e:	3008      	adds	r0, #8
    9b50:	f014 fcdc 	bl	1e50c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9b54:	f8ba 3000 	ldrh.w	r3, [sl]
	cp = net_buf_add(buf, sizeof(*cp));
    9b58:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
    9b5a:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
    9b5c:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
    9b60:	4649      	mov	r1, r9
    9b62:	f7fc f991 	bl	5e88 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
    9b66:	2202      	movs	r2, #2
    9b68:	4641      	mov	r1, r8
    9b6a:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
    9b6e:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
    9b70:	f7fc f98a 	bl	5e88 <memcpy>
	memcpy(cp->ltk, ltk, len);
    9b74:	462a      	mov	r2, r5
    9b76:	4639      	mov	r1, r7
    9b78:	4620      	mov	r0, r4
    9b7a:	f7fc f985 	bl	5e88 <memcpy>
	if (len < sizeof(cp->ltk)) {
    9b7e:	2d0f      	cmp	r5, #15
    9b80:	d805      	bhi.n	9b8e <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    9b82:	f1c5 0210 	rsb	r2, r5, #16
    9b86:	2100      	movs	r1, #0
    9b88:	1960      	adds	r0, r4, r5
    9b8a:	f7fc f9aa 	bl	5ee2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    9b8e:	4631      	mov	r1, r6
    9b90:	2200      	movs	r2, #0
    9b92:	f242 0019 	movw	r0, #8217	; 0x2019
}
    9b96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    9b9a:	f7fd b90f 	b.w	6dbc <bt_hci_cmd_send_sync>
}
    9b9e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00009ba8 <bt_conn_security_changed>:
{
    9ba8:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    9baa:	4b06      	ldr	r3, [pc, #24]	; (9bc4 <bt_conn_security_changed+0x1c>)
    9bac:	681c      	ldr	r4, [r3, #0]
{
    9bae:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    9bb0:	b904      	cbnz	r4, 9bb4 <bt_conn_security_changed+0xc>
}
    9bb2:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    9bb4:	6963      	ldr	r3, [r4, #20]
    9bb6:	b113      	cbz	r3, 9bbe <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    9bb8:	7a69      	ldrb	r1, [r5, #9]
    9bba:	4628      	mov	r0, r5
    9bbc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9bbe:	69a4      	ldr	r4, [r4, #24]
    9bc0:	e7f6      	b.n	9bb0 <bt_conn_security_changed+0x8>
    9bc2:	bf00      	nop
    9bc4:	20000a58 	.word	0x20000a58

00009bc8 <bt_conn_security>:
{
    9bc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9bca:	7b45      	ldrb	r5, [r0, #13]
    9bcc:	2d04      	cmp	r5, #4
{
    9bce:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9bd0:	d144      	bne.n	9c5c <bt_conn_security+0x94>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    9bd2:	7a43      	ldrb	r3, [r0, #9]
    9bd4:	428b      	cmp	r3, r1
    9bd6:	d302      	bcc.n	9bde <bt_conn_security+0x16>
		return 0;
    9bd8:	2000      	movs	r0, #0
}
    9bda:	b002      	add	sp, #8
    9bdc:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    9bde:	7a83      	ldrb	r3, [r0, #10]
    9be0:	428b      	cmp	r3, r1
    9be2:	d2f9      	bcs.n	9bd8 <bt_conn_security+0x10>
	switch (conn->role) {
    9be4:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    9be6:	7281      	strb	r1, [r0, #10]
	switch (conn->role) {
    9be8:	b123      	cbz	r3, 9bf4 <bt_conn_security+0x2c>
    9bea:	2b01      	cmp	r3, #1
    9bec:	d033      	beq.n	9c56 <bt_conn_security+0x8e>
		return -EINVAL;
    9bee:	f06f 0015 	mvn.w	r0, #21
    9bf2:	e01b      	b.n	9c2c <bt_conn_security+0x64>
		if (!conn->le.keys) {
    9bf4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    9bf6:	2b00      	cmp	r3, #0
    9bf8:	d133      	bne.n	9c62 <bt_conn_security+0x9a>
						     conn->id, &conn->le.dst);
    9bfa:	f100 0648 	add.w	r6, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    9bfe:	7a01      	ldrb	r1, [r0, #8]
    9c00:	4632      	mov	r2, r6
    9c02:	2020      	movs	r0, #32
    9c04:	f006 fbc6 	bl	10394 <bt_keys_find>
    9c08:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    9c0a:	bb50      	cbnz	r0, 9c62 <bt_conn_security+0x9a>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    9c0c:	4632      	mov	r2, r6
    9c0e:	7a21      	ldrb	r1, [r4, #8]
    9c10:	4628      	mov	r0, r5
    9c12:	f006 fbbf 	bl	10394 <bt_keys_find>
    9c16:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys ||
    9c18:	b118      	cbz	r0, 9c22 <bt_conn_security+0x5a>
    9c1a:	8943      	ldrh	r3, [r0, #10]
    9c1c:	f003 0324 	and.w	r3, r3, #36	; 0x24
    9c20:	b93b      	cbnz	r3, 9c32 <bt_conn_security+0x6a>
			return bt_smp_send_pairing_req(conn);
    9c22:	4620      	mov	r0, r4
    9c24:	f006 f8fa 	bl	fe1c <bt_smp_send_pairing_req>
	if (err) {
    9c28:	2800      	cmp	r0, #0
    9c2a:	d0d5      	beq.n	9bd8 <bt_conn_security+0x10>
		conn->required_sec_level = conn->sec_level;
    9c2c:	7a63      	ldrb	r3, [r4, #9]
    9c2e:	72a3      	strb	r3, [r4, #10]
    9c30:	e7d3      	b.n	9bda <bt_conn_security+0x12>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    9c32:	7aa3      	ldrb	r3, [r4, #10]
    9c34:	2b02      	cmp	r3, #2
    9c36:	d902      	bls.n	9c3e <bt_conn_security+0x76>
    9c38:	7a43      	ldrb	r3, [r0, #9]
    9c3a:	07db      	lsls	r3, r3, #31
    9c3c:	d5f1      	bpl.n	9c22 <bt_conn_security+0x5a>
		return bt_conn_le_start_encryption(conn,
    9c3e:	7a03      	ldrb	r3, [r0, #8]
    9c40:	9300      	str	r3, [sp, #0]
    9c42:	f100 0214 	add.w	r2, r0, #20
    9c46:	f100 0316 	add.w	r3, r0, #22
    9c4a:	f100 010c 	add.w	r1, r0, #12
    9c4e:	4620      	mov	r0, r4
    9c50:	f7ff ff6e 	bl	9b30 <bt_conn_le_start_encryption>
    9c54:	e7e8      	b.n	9c28 <bt_conn_security+0x60>
		return bt_smp_send_security_req(conn);
    9c56:	f006 f893 	bl	fd80 <bt_smp_send_security_req>
    9c5a:	e7e5      	b.n	9c28 <bt_conn_security+0x60>
		return -ENOTCONN;
    9c5c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9c60:	e7bb      	b.n	9bda <bt_conn_security+0x12>
		if (!conn->le.keys ||
    9c62:	6f20      	ldr	r0, [r4, #112]	; 0x70
    9c64:	e7d9      	b.n	9c1a <bt_conn_security+0x52>
	...

00009c68 <bt_conn_cb_register>:
	cb->_next = callback_list;
    9c68:	4b02      	ldr	r3, [pc, #8]	; (9c74 <bt_conn_cb_register+0xc>)
    9c6a:	681a      	ldr	r2, [r3, #0]
    9c6c:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    9c6e:	6018      	str	r0, [r3, #0]
}
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	20000a58 	.word	0x20000a58

00009c78 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    9c78:	2a01      	cmp	r2, #1
{
    9c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9c7c:	4604      	mov	r4, r0
    9c7e:	460d      	mov	r5, r1
    9c80:	4616      	mov	r6, r2
	switch (flags) {
    9c82:	d028      	beq.n	9cd6 <bt_conn_recv+0x5e>
    9c84:	2a02      	cmp	r2, #2
    9c86:	f040 80a5 	bne.w	9dd4 <bt_conn_recv+0x15c>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    9c8a:	688b      	ldr	r3, [r1, #8]
    9c8c:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    9c8e:	89c3      	ldrh	r3, [r0, #14]
    9c90:	b1bb      	cbz	r3, 9cc2 <bt_conn_recv+0x4a>
			BT_ERR("Unexpected first L2CAP frame");
    9c92:	4b5f      	ldr	r3, [pc, #380]	; (9e10 <bt_conn_recv+0x198>)
    9c94:	681b      	ldr	r3, [r3, #0]
    9c96:	0759      	lsls	r1, r3, #29
    9c98:	d010      	beq.n	9cbc <bt_conn_recv+0x44>
    9c9a:	2301      	movs	r3, #1
    9c9c:	f04f 0200 	mov.w	r2, #0
    9ca0:	f363 0202 	bfi	r2, r3, #0, #3
    9ca4:	495b      	ldr	r1, [pc, #364]	; (9e14 <bt_conn_recv+0x19c>)
    9ca6:	4b5c      	ldr	r3, [pc, #368]	; (9e18 <bt_conn_recv+0x1a0>)
    9ca8:	485c      	ldr	r0, [pc, #368]	; (9e1c <bt_conn_recv+0x1a4>)
    9caa:	1a5b      	subs	r3, r3, r1
    9cac:	f36f 02c5 	bfc	r2, #3, #3
    9cb0:	08db      	lsrs	r3, r3, #3
    9cb2:	f363 128f 	bfi	r2, r3, #6, #10
    9cb6:	495a      	ldr	r1, [pc, #360]	; (9e20 <bt_conn_recv+0x1a8>)
    9cb8:	f7f8 f84e 	bl	1d58 <log_1>
			bt_conn_reset_rx_state(conn);
    9cbc:	4620      	mov	r0, r4
    9cbe:	f7ff febf 	bl	9a40 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    9cc2:	89ab      	ldrh	r3, [r5, #12]
    9cc4:	1af3      	subs	r3, r6, r3
    9cc6:	3304      	adds	r3, #4
    9cc8:	b29b      	uxth	r3, r3
    9cca:	81e3      	strh	r3, [r4, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    9ccc:	2b00      	cmp	r3, #0
    9cce:	d063      	beq.n	9d98 <bt_conn_recv+0x120>
			conn->rx = buf;
    9cd0:	6125      	str	r5, [r4, #16]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    9cd2:	b003      	add	sp, #12
    9cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!conn->rx_len) {
    9cd6:	89c3      	ldrh	r3, [r0, #14]
    9cd8:	b9e3      	cbnz	r3, 9d14 <bt_conn_recv+0x9c>
			BT_ERR("Unexpected L2CAP continuation");
    9cda:	4a4d      	ldr	r2, [pc, #308]	; (9e10 <bt_conn_recv+0x198>)
    9cdc:	6812      	ldr	r2, [r2, #0]
    9cde:	0752      	lsls	r2, r2, #29
    9ce0:	d00f      	beq.n	9d02 <bt_conn_recv+0x8a>
    9ce2:	f04f 0200 	mov.w	r2, #0
    9ce6:	f366 0202 	bfi	r2, r6, #0, #3
    9cea:	f363 02c5 	bfi	r2, r3, #3, #3
    9cee:	4949      	ldr	r1, [pc, #292]	; (9e14 <bt_conn_recv+0x19c>)
    9cf0:	4b49      	ldr	r3, [pc, #292]	; (9e18 <bt_conn_recv+0x1a0>)
    9cf2:	484c      	ldr	r0, [pc, #304]	; (9e24 <bt_conn_recv+0x1ac>)
    9cf4:	1a5b      	subs	r3, r3, r1
    9cf6:	08db      	lsrs	r3, r3, #3
    9cf8:	4949      	ldr	r1, [pc, #292]	; (9e20 <bt_conn_recv+0x1a8>)
    9cfa:	f363 128f 	bfi	r2, r3, #6, #10
    9cfe:	f7f8 f82b 	bl	1d58 <log_1>
			bt_conn_reset_rx_state(conn);
    9d02:	4620      	mov	r0, r4
    9d04:	f7ff fe9c 	bl	9a40 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    9d08:	4628      	mov	r0, r5
}
    9d0a:	b003      	add	sp, #12
    9d0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    9d10:	f014 bb9e 	b.w	1e450 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    9d14:	898f      	ldrh	r7, [r1, #12]
    9d16:	42bb      	cmp	r3, r7
    9d18:	d212      	bcs.n	9d40 <bt_conn_recv+0xc8>
			BT_ERR("L2CAP data overflow");
    9d1a:	4b3d      	ldr	r3, [pc, #244]	; (9e10 <bt_conn_recv+0x198>)
    9d1c:	681b      	ldr	r3, [r3, #0]
    9d1e:	075b      	lsls	r3, r3, #29
    9d20:	d0ef      	beq.n	9d02 <bt_conn_recv+0x8a>
    9d22:	493c      	ldr	r1, [pc, #240]	; (9e14 <bt_conn_recv+0x19c>)
    9d24:	4b3c      	ldr	r3, [pc, #240]	; (9e18 <bt_conn_recv+0x1a0>)
    9d26:	4840      	ldr	r0, [pc, #256]	; (9e28 <bt_conn_recv+0x1b0>)
    9d28:	f04f 0200 	mov.w	r2, #0
    9d2c:	1a5b      	subs	r3, r3, r1
    9d2e:	f366 0202 	bfi	r2, r6, #0, #3
    9d32:	f36f 02c5 	bfc	r2, #3, #3
    9d36:	08db      	lsrs	r3, r3, #3
    9d38:	f363 128f 	bfi	r2, r3, #6, #10
    9d3c:	4938      	ldr	r1, [pc, #224]	; (9e20 <bt_conn_recv+0x1a8>)
    9d3e:	e7de      	b.n	9cfe <bt_conn_recv+0x86>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    9d40:	6900      	ldr	r0, [r0, #16]
    9d42:	3008      	adds	r0, #8
    9d44:	f014 fc4e 	bl	1e5e4 <net_buf_simple_tailroom>
    9d48:	4287      	cmp	r7, r0
    9d4a:	d912      	bls.n	9d72 <bt_conn_recv+0xfa>
			BT_ERR("Not enough buffer space for L2CAP data");
    9d4c:	4b30      	ldr	r3, [pc, #192]	; (9e10 <bt_conn_recv+0x198>)
    9d4e:	681b      	ldr	r3, [r3, #0]
    9d50:	075f      	lsls	r7, r3, #29
    9d52:	d0d6      	beq.n	9d02 <bt_conn_recv+0x8a>
    9d54:	492f      	ldr	r1, [pc, #188]	; (9e14 <bt_conn_recv+0x19c>)
    9d56:	4b30      	ldr	r3, [pc, #192]	; (9e18 <bt_conn_recv+0x1a0>)
    9d58:	4834      	ldr	r0, [pc, #208]	; (9e2c <bt_conn_recv+0x1b4>)
    9d5a:	f04f 0200 	mov.w	r2, #0
    9d5e:	1a5b      	subs	r3, r3, r1
    9d60:	f366 0202 	bfi	r2, r6, #0, #3
    9d64:	f36f 02c5 	bfc	r2, #3, #3
    9d68:	08db      	lsrs	r3, r3, #3
    9d6a:	f363 128f 	bfi	r2, r3, #6, #10
    9d6e:	492c      	ldr	r1, [pc, #176]	; (9e20 <bt_conn_recv+0x1a8>)
    9d70:	e7c5      	b.n	9cfe <bt_conn_recv+0x86>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    9d72:	6920      	ldr	r0, [r4, #16]
    9d74:	89aa      	ldrh	r2, [r5, #12]
    9d76:	68a9      	ldr	r1, [r5, #8]
    9d78:	3008      	adds	r0, #8
    9d7a:	f014 fbcd 	bl	1e518 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    9d7e:	89e3      	ldrh	r3, [r4, #14]
    9d80:	89aa      	ldrh	r2, [r5, #12]
    9d82:	1a9b      	subs	r3, r3, r2
    9d84:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    9d86:	4628      	mov	r0, r5
    9d88:	f014 fb62 	bl	1e450 <net_buf_unref>
		if (conn->rx_len) {
    9d8c:	89e3      	ldrh	r3, [r4, #14]
    9d8e:	2b00      	cmp	r3, #0
    9d90:	d19f      	bne.n	9cd2 <bt_conn_recv+0x5a>
		buf = conn->rx;
    9d92:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0;
    9d94:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    9d96:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    9d98:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    9d9a:	881a      	ldrh	r2, [r3, #0]
    9d9c:	89ab      	ldrh	r3, [r5, #12]
    9d9e:	1d11      	adds	r1, r2, #4
    9da0:	4299      	cmp	r1, r3
    9da2:	d02d      	beq.n	9e00 <bt_conn_recv+0x188>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    9da4:	491a      	ldr	r1, [pc, #104]	; (9e10 <bt_conn_recv+0x198>)
    9da6:	6809      	ldr	r1, [r1, #0]
    9da8:	0749      	lsls	r1, r1, #29
    9daa:	d0ad      	beq.n	9d08 <bt_conn_recv+0x90>
    9dac:	2101      	movs	r1, #1
    9dae:	f04f 0000 	mov.w	r0, #0
    9db2:	f361 0002 	bfi	r0, r1, #0, #3
    9db6:	4c17      	ldr	r4, [pc, #92]	; (9e14 <bt_conn_recv+0x19c>)
    9db8:	4917      	ldr	r1, [pc, #92]	; (9e18 <bt_conn_recv+0x1a0>)
    9dba:	1b09      	subs	r1, r1, r4
    9dbc:	08c9      	lsrs	r1, r1, #3
    9dbe:	f36f 00c5 	bfc	r0, #3, #3
    9dc2:	f361 108f 	bfi	r0, r1, #6, #10
    9dc6:	f8ad 0000 	strh.w	r0, [sp]
    9dca:	4915      	ldr	r1, [pc, #84]	; (9e20 <bt_conn_recv+0x1a8>)
    9dcc:	4818      	ldr	r0, [pc, #96]	; (9e30 <bt_conn_recv+0x1b8>)
    9dce:	f7f7 ffef 	bl	1db0 <log_3>
    9dd2:	e799      	b.n	9d08 <bt_conn_recv+0x90>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    9dd4:	4b0e      	ldr	r3, [pc, #56]	; (9e10 <bt_conn_recv+0x198>)
    9dd6:	681b      	ldr	r3, [r3, #0]
    9dd8:	0758      	lsls	r0, r3, #29
    9dda:	d092      	beq.n	9d02 <bt_conn_recv+0x8a>
    9ddc:	2101      	movs	r1, #1
    9dde:	f04f 0300 	mov.w	r3, #0
    9de2:	f361 0302 	bfi	r3, r1, #0, #3
    9de6:	480b      	ldr	r0, [pc, #44]	; (9e14 <bt_conn_recv+0x19c>)
    9de8:	490b      	ldr	r1, [pc, #44]	; (9e18 <bt_conn_recv+0x1a0>)
    9dea:	1a09      	subs	r1, r1, r0
    9dec:	08c9      	lsrs	r1, r1, #3
    9dee:	f36f 03c5 	bfc	r3, #3, #3
    9df2:	f361 138f 	bfi	r3, r1, #6, #10
    9df6:	480f      	ldr	r0, [pc, #60]	; (9e34 <bt_conn_recv+0x1bc>)
    9df8:	4909      	ldr	r1, [pc, #36]	; (9e20 <bt_conn_recv+0x1a8>)
    9dfa:	f7f7 ffc1 	bl	1d80 <log_2>
    9dfe:	e780      	b.n	9d02 <bt_conn_recv+0x8a>
	bt_l2cap_recv(conn, buf);
    9e00:	4629      	mov	r1, r5
    9e02:	4620      	mov	r0, r4
}
    9e04:	b003      	add	sp, #12
    9e06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf);
    9e0a:	f001 ba91 	b.w	b330 <bt_l2cap_recv>
    9e0e:	bf00      	nop
    9e10:	2000d718 	.word	0x2000d718
    9e14:	0002cff8 	.word	0x0002cff8
    9e18:	0002d008 	.word	0x0002d008
    9e1c:	0002f468 	.word	0x0002f468
    9e20:	0002f41c 	.word	0x0002f41c
    9e24:	0002f489 	.word	0x0002f489
    9e28:	0002f4ab 	.word	0x0002f4ab
    9e2c:	0002f4c3 	.word	0x0002f4c3
    9e30:	0002f510 	.word	0x0002f510
    9e34:	0002f4ee 	.word	0x0002f4ee

00009e38 <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    9e38:	7b43      	ldrb	r3, [r0, #13]
    9e3a:	2b04      	cmp	r3, #4
{
    9e3c:	b510      	push	{r4, lr}
    9e3e:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    9e40:	d01a      	beq.n	9e78 <bt_conn_send_cb+0x40>
		BT_ERR("not connected!");
    9e42:	4b10      	ldr	r3, [pc, #64]	; (9e84 <bt_conn_send_cb+0x4c>)
    9e44:	681b      	ldr	r3, [r3, #0]
    9e46:	075b      	lsls	r3, r3, #29
    9e48:	d010      	beq.n	9e6c <bt_conn_send_cb+0x34>
    9e4a:	2301      	movs	r3, #1
    9e4c:	f04f 0200 	mov.w	r2, #0
    9e50:	f363 0202 	bfi	r2, r3, #0, #3
    9e54:	490c      	ldr	r1, [pc, #48]	; (9e88 <bt_conn_send_cb+0x50>)
    9e56:	4b0d      	ldr	r3, [pc, #52]	; (9e8c <bt_conn_send_cb+0x54>)
    9e58:	480d      	ldr	r0, [pc, #52]	; (9e90 <bt_conn_send_cb+0x58>)
    9e5a:	1a5b      	subs	r3, r3, r1
    9e5c:	f36f 02c5 	bfc	r2, #3, #3
    9e60:	08db      	lsrs	r3, r3, #3
    9e62:	f363 128f 	bfi	r2, r3, #6, #10
    9e66:	490b      	ldr	r1, [pc, #44]	; (9e94 <bt_conn_send_cb+0x5c>)
    9e68:	f7f7 ff76 	bl	1d58 <log_1>
		net_buf_unref(buf);
    9e6c:	4620      	mov	r0, r4
    9e6e:	f014 faef 	bl	1e450 <net_buf_unref>
		return -ENOTCONN;
    9e72:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    9e76:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    9e78:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    9e7a:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    9e7c:	f014 fadb 	bl	1e436 <net_buf_put>
	return 0;
    9e80:	2000      	movs	r0, #0
    9e82:	e7f8      	b.n	9e76 <bt_conn_send_cb+0x3e>
    9e84:	2000d718 	.word	0x2000d718
    9e88:	0002cff8 	.word	0x0002cff8
    9e8c:	0002d008 	.word	0x0002d008
    9e90:	0002f530 	.word	0x0002f530
    9e94:	0002f429 	.word	0x0002f429

00009e98 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    9e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Z_GENLIST_PREPEND(slist, snode)
    9e9c:	4d0d      	ldr	r5, [pc, #52]	; (9ed4 <bt_conn_notify_tx+0x3c>)
    9e9e:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    9ea0:	f100 071c 	add.w	r7, r0, #28
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    9ea4:	f04f 0800 	mov.w	r8, #0
    9ea8:	2100      	movs	r1, #0
    9eaa:	4638      	mov	r0, r7
    9eac:	f021 ff6c 	bl	2bd88 <_impl_k_queue_get>
    9eb0:	4604      	mov	r4, r0
    9eb2:	b908      	cbnz	r0, 9eb8 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    9eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    9eb8:	6863      	ldr	r3, [r4, #4]
    9eba:	b10b      	cbz	r3, 9ec0 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    9ebc:	4630      	mov	r0, r6
    9ebe:	4798      	blx	r3
    9ec0:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    9ec2:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    9ec4:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    9ec6:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    9eca:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    9ecc:	2b00      	cmp	r3, #0
    9ece:	d1eb      	bne.n	9ea8 <bt_conn_notify_tx+0x10>
	list->tail = node;
    9ed0:	606c      	str	r4, [r5, #4]
    9ed2:	e7e7      	b.n	9ea4 <bt_conn_notify_tx+0xc>
    9ed4:	20000b08 	.word	0x20000b08

00009ed8 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    9ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9edc:	4605      	mov	r5, r0
    9ede:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    9ee0:	4849      	ldr	r0, [pc, #292]	; (a008 <send_frag+0x130>)
    9ee2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9ee6:	4698      	mov	r8, r3
    9ee8:	4614      	mov	r4, r2
    9eea:	f022 fa6f 	bl	2c3cc <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    9eee:	4b47      	ldr	r3, [pc, #284]	; (a00c <send_frag+0x134>)
    9ef0:	f103 0044 	add.w	r0, r3, #68	; 0x44
    9ef4:	f7ff fd9e 	bl	9a34 <atomic_get>
    9ef8:	b130      	cbz	r0, 9f08 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    9efa:	7b5a      	ldrb	r2, [r3, #13]
    9efc:	3a04      	subs	r2, #4
    9efe:	2a01      	cmp	r2, #1
    9f00:	d802      	bhi.n	9f08 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    9f02:	4618      	mov	r0, r3
    9f04:	f7ff ffc8 	bl	9e98 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    9f08:	7b69      	ldrb	r1, [r5, #13]
    9f0a:	2904      	cmp	r1, #4
    9f0c:	d15e      	bne.n	9fcc <send_frag+0xf4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    9f0e:	f107 0008 	add.w	r0, r7, #8
    9f12:	f014 fb32 	bl	1e57a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9f16:	89bb      	ldrh	r3, [r7, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9f18:	882a      	ldrh	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9f1a:	4e3d      	ldr	r6, [pc, #244]	; (a010 <send_frag+0x138>)
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9f1c:	3b04      	subs	r3, #4
    9f1e:	8043      	strh	r3, [r0, #2]
    9f20:	6871      	ldr	r1, [r6, #4]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9f22:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    9f26:	2302      	movs	r3, #2
    9f28:	6834      	ldr	r4, [r6, #0]
    9f2a:	8002      	strh	r2, [r0, #0]

	cb = conn_tx(buf)->cb;
    9f2c:	697a      	ldr	r2, [r7, #20]
    9f2e:	753b      	strb	r3, [r7, #20]
	return node->next;
    9f30:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    9f32:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9f34:	428c      	cmp	r4, r1
	list->tail = node;
    9f36:	bf08      	it	eq
    9f38:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    9f3a:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    9f3c:	f04f 0320 	mov.w	r3, #32
    9f40:	f3ef 8211 	mrs	r2, BASEPRI
    9f44:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    9f48:	2300      	movs	r3, #0
    9f4a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    9f4c:	69ab      	ldr	r3, [r5, #24]
    9f4e:	2b00      	cmp	r3, #0
    9f50:	d14a      	bne.n	9fe8 <send_frag+0x110>
	list->head = node;
    9f52:	e9c5 4405 	strd	r4, r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9f56:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    9f5a:	4638      	mov	r0, r7
    9f5c:	f7fd fc10 	bl	7780 <bt_send>
	if (err) {
    9f60:	4602      	mov	r2, r0
    9f62:	2800      	cmp	r0, #0
    9f64:	d04c      	beq.n	a000 <send_frag+0x128>
		BT_ERR("Unable to send to driver (err %d)", err);
    9f66:	4b2b      	ldr	r3, [pc, #172]	; (a014 <send_frag+0x13c>)
    9f68:	681b      	ldr	r3, [r3, #0]
    9f6a:	075b      	lsls	r3, r3, #29
    9f6c:	d010      	beq.n	9f90 <send_frag+0xb8>
    9f6e:	2101      	movs	r1, #1
    9f70:	f04f 0300 	mov.w	r3, #0
    9f74:	f361 0302 	bfi	r3, r1, #0, #3
    9f78:	4827      	ldr	r0, [pc, #156]	; (a018 <send_frag+0x140>)
    9f7a:	4928      	ldr	r1, [pc, #160]	; (a01c <send_frag+0x144>)
    9f7c:	1a09      	subs	r1, r1, r0
    9f7e:	08c9      	lsrs	r1, r1, #3
    9f80:	f36f 03c5 	bfc	r3, #3, #3
    9f84:	f361 138f 	bfi	r3, r1, #6, #10
    9f88:	4825      	ldr	r0, [pc, #148]	; (a020 <send_frag+0x148>)
    9f8a:	4926      	ldr	r1, [pc, #152]	; (a024 <send_frag+0x14c>)
    9f8c:	f7f7 fef8 	bl	1d80 <log_2>
	__asm__ volatile(
    9f90:	f04f 0320 	mov.w	r3, #32
    9f94:	f3ef 8011 	mrs	r0, BASEPRI
    9f98:	f383 8811 	msr	BASEPRI, r3
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9f9c:	696b      	ldr	r3, [r5, #20]
    9f9e:	2200      	movs	r2, #0
    9fa0:	b153      	cbz	r3, 9fb8 <send_frag+0xe0>
    9fa2:	429c      	cmp	r4, r3
    9fa4:	6819      	ldr	r1, [r3, #0]
    9fa6:	d128      	bne.n	9ffa <send_frag+0x122>
Z_GENLIST_REMOVE(slist, snode)
    9fa8:	bb0a      	cbnz	r2, 9fee <send_frag+0x116>
    9faa:	69ab      	ldr	r3, [r5, #24]
	list->head = node;
    9fac:	6169      	str	r1, [r5, #20]
Z_GENLIST_REMOVE(slist, snode)
    9fae:	429c      	cmp	r4, r3
    9fb0:	d100      	bne.n	9fb4 <send_frag+0xdc>
	list->tail = node;
    9fb2:	61a9      	str	r1, [r5, #24]
	parent->next = child;
    9fb4:	2300      	movs	r3, #0
    9fb6:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9fb8:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    9fbc:	2300      	movs	r3, #0
    9fbe:	6063      	str	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    9fc0:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
    9fc2:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    9fc4:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    9fc6:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    9fc8:	b903      	cbnz	r3, 9fcc <send_frag+0xf4>
	list->tail = node;
    9fca:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    9fcc:	480e      	ldr	r0, [pc, #56]	; (a008 <send_frag+0x130>)
    9fce:	f022 f9d6 	bl	2c37e <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    9fd2:	f1b8 0f00 	cmp.w	r8, #0
    9fd6:	d004      	beq.n	9fe2 <send_frag+0x10a>
		net_buf_unref(buf);
    9fd8:	4638      	mov	r0, r7
    9fda:	f014 fa39 	bl	1e450 <net_buf_unref>
	}
	return false;
    9fde:	f04f 0800 	mov.w	r8, #0
}
    9fe2:	4640      	mov	r0, r8
    9fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    9fe8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9fea:	61ac      	str	r4, [r5, #24]
    9fec:	e7b3      	b.n	9f56 <send_frag+0x7e>
	parent->next = child;
    9fee:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    9ff0:	69ab      	ldr	r3, [r5, #24]
    9ff2:	429c      	cmp	r4, r3
	list->tail = node;
    9ff4:	bf08      	it	eq
    9ff6:	61aa      	streq	r2, [r5, #24]
    9ff8:	e7dc      	b.n	9fb4 <send_frag+0xdc>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ffa:	461a      	mov	r2, r3
    9ffc:	460b      	mov	r3, r1
    9ffe:	e7cf      	b.n	9fa0 <send_frag+0xc8>
	return true;
    a000:	f04f 0801 	mov.w	r8, #1
    a004:	e7ed      	b.n	9fe2 <send_frag+0x10a>
    a006:	bf00      	nop
    a008:	2000cd0c 	.word	0x2000cd0c
    a00c:	20000a74 	.word	0x20000a74
    a010:	20000b08 	.word	0x20000b08
    a014:	2000d718 	.word	0x2000d718
    a018:	0002cff8 	.word	0x0002cff8
    a01c:	0002d008 	.word	0x0002d008
    a020:	0002eb57 	.word	0x0002eb57
    a024:	0002f439 	.word	0x0002f439

0000a028 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    a028:	b538      	push	{r3, r4, r5, lr}
    a02a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a02c:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    a030:	2100      	movs	r1, #0
    a032:	4628      	mov	r0, r5
    a034:	f014 f9e2 	bl	1e3fc <net_buf_get>
    a038:	b958      	cbnz	r0, a052 <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    a03a:	4620      	mov	r0, r4
    a03c:	f7ff ff2c 	bl	9e98 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    a040:	4620      	mov	r0, r4
    a042:	f7ff fcfd 	bl	9a40 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    a046:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    a04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    a04e:	f7ff bd02 	b.w	9a56 <atomic_dec>
		net_buf_unref(buf);
    a052:	f014 f9fd 	bl	1e450 <net_buf_unref>
    a056:	e7eb      	b.n	a030 <conn_cleanup+0x8>

0000a058 <bt_conn_prepare_events>:
{
    a058:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    a05a:	4b1f      	ldr	r3, [pc, #124]	; (a0d8 <bt_conn_prepare_events+0x80>)
    a05c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a05e:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    a060:	609a      	str	r2, [r3, #8]
{
    a062:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a064:	f022 fe68 	bl	2cd38 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    a068:	4b1c      	ldr	r3, [pc, #112]	; (a0dc <bt_conn_prepare_events+0x84>)
    a06a:	f103 0044 	add.w	r0, r3, #68	; 0x44
    a06e:	f7ff fce1 	bl	9a34 <atomic_get>
    a072:	4619      	mov	r1, r3
    a074:	b908      	cbnz	r0, a07a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a076:	2001      	movs	r0, #1
}
    a078:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    a07a:	7b5a      	ldrb	r2, [r3, #13]
    a07c:	b99a      	cbnz	r2, a0a6 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a07e:	f3bf 8f5b 	dmb	ish
    a082:	1d1a      	adds	r2, r3, #4
    a084:	e852 0f00 	ldrex	r0, [r2]
    a088:	f020 0540 	bic.w	r5, r0, #64	; 0x40
    a08c:	e842 5c00 	strex	ip, r5, [r2]
    a090:	f1bc 0f00 	cmp.w	ip, #0
    a094:	d1f6      	bne.n	a084 <bt_conn_prepare_events+0x2c>
    a096:	f3bf 8f5b 	dmb	ish
    a09a:	0642      	lsls	r2, r0, #25
    a09c:	d503      	bpl.n	a0a6 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    a09e:	4618      	mov	r0, r3
    a0a0:	f7ff ffc2 	bl	a028 <conn_cleanup>
    a0a4:	e7e7      	b.n	a076 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    a0a6:	7b4d      	ldrb	r5, [r1, #13]
    a0a8:	2d04      	cmp	r5, #4
    a0aa:	d1e4      	bne.n	a076 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    a0ac:	4b0c      	ldr	r3, [pc, #48]	; (a0e0 <bt_conn_prepare_events+0x88>)
    a0ae:	2200      	movs	r2, #0
    a0b0:	4629      	mov	r1, r5
    a0b2:	f104 0014 	add.w	r0, r4, #20
    a0b6:	f022 fe3f 	bl	2cd38 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    a0ba:	2301      	movs	r3, #1
    a0bc:	f884 3020 	strb.w	r3, [r4, #32]
		k_poll_event_init(&events[ev_count],
    a0c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a0c4:	4b07      	ldr	r3, [pc, #28]	; (a0e4 <bt_conn_prepare_events+0x8c>)
    a0c6:	2200      	movs	r2, #0
    a0c8:	4629      	mov	r1, r5
    a0ca:	f022 fe35 	bl	2cd38 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    a0ce:	2302      	movs	r3, #2
    a0d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    a0d4:	2003      	movs	r0, #3
	return ev_count;
    a0d6:	e7cf      	b.n	a078 <bt_conn_prepare_events+0x20>
    a0d8:	2000cda8 	.word	0x2000cda8
    a0dc:	20000a74 	.word	0x20000a74
    a0e0:	20000a90 	.word	0x20000a90
    a0e4:	20000aa0 	.word	0x20000aa0

0000a0e8 <bt_conn_add_le>:
{
    a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    a0ec:	4c16      	ldr	r4, [pc, #88]	; (a148 <bt_conn_add_le+0x60>)
    a0ee:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    a0f2:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    a0f4:	4638      	mov	r0, r7
    a0f6:	f7ff fc9d 	bl	9a34 <atomic_get>
    a0fa:	4605      	mov	r5, r0
    a0fc:	b110      	cbz	r0, a104 <bt_conn_add_le+0x1c>
		return NULL;
    a0fe:	2000      	movs	r0, #0
}
    a100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    a104:	4601      	mov	r1, r0
    a106:	2294      	movs	r2, #148	; 0x94
    a108:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a10a:	2601      	movs	r6, #1
    a10c:	f7fb fee9 	bl	5ee2 <memset>
    a110:	f3bf 8f5b 	dmb	ish
    a114:	e857 3f00 	ldrex	r3, [r7]
    a118:	e847 6200 	strex	r2, r6, [r7]
    a11c:	2a00      	cmp	r2, #0
    a11e:	d1f9      	bne.n	a114 <bt_conn_add_le+0x2c>
    a120:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    a124:	2207      	movs	r2, #7
    a126:	4641      	mov	r1, r8
    a128:	f104 0048 	add.w	r0, r4, #72	; 0x48
    a12c:	f7fb feac 	bl	5e88 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a130:	4b06      	ldr	r3, [pc, #24]	; (a14c <bt_conn_add_le+0x64>)
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a132:	4907      	ldr	r1, [pc, #28]	; (a150 <bt_conn_add_le+0x68>)
	conn->sec_level = BT_SECURITY_LOW;
    a134:	7266      	strb	r6, [r4, #9]
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a136:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->required_sec_level = BT_SECURITY_LOW;
    a13a:	72a6      	strb	r6, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    a13c:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a13e:	6623      	str	r3, [r4, #96]	; 0x60
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a140:	f022 fae6 	bl	2c710 <k_delayed_work_init>
			conn = &conns[i];
    a144:	4620      	mov	r0, r4
	return conn;
    a146:	e7db      	b.n	a100 <bt_conn_add_le+0x18>
    a148:	20000a74 	.word	0x20000a74
    a14c:	00280018 	.word	0x00280018
    a150:	0000a64d 	.word	0x0000a64d

0000a154 <bt_conn_set_state>:
{
    a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    a158:	7b45      	ldrb	r5, [r0, #13]
    a15a:	42a9      	cmp	r1, r5
{
    a15c:	4604      	mov	r4, r0
    a15e:	460e      	mov	r6, r1
	if (conn->state == state) {
    a160:	d119      	bne.n	a196 <bt_conn_set_state+0x42>
		BT_WARN("no transition");
    a162:	4b69      	ldr	r3, [pc, #420]	; (a308 <bt_conn_set_state+0x1b4>)
    a164:	681b      	ldr	r3, [r3, #0]
    a166:	f003 0307 	and.w	r3, r3, #7
    a16a:	2b01      	cmp	r3, #1
    a16c:	f240 80a4 	bls.w	a2b8 <bt_conn_set_state+0x164>
    a170:	2302      	movs	r3, #2
    a172:	f04f 0200 	mov.w	r2, #0
    a176:	f363 0202 	bfi	r2, r3, #0, #3
    a17a:	4964      	ldr	r1, [pc, #400]	; (a30c <bt_conn_set_state+0x1b8>)
    a17c:	4b64      	ldr	r3, [pc, #400]	; (a310 <bt_conn_set_state+0x1bc>)
    a17e:	4865      	ldr	r0, [pc, #404]	; (a314 <bt_conn_set_state+0x1c0>)
    a180:	1a5b      	subs	r3, r3, r1
    a182:	f36f 02c5 	bfc	r2, #3, #3
    a186:	08db      	lsrs	r3, r3, #3
    a188:	f363 128f 	bfi	r2, r3, #6, #10
    a18c:	4962      	ldr	r1, [pc, #392]	; (a318 <bt_conn_set_state+0x1c4>)
}
    a18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no transition");
    a192:	f7f7 bde1 	b.w	1d58 <log_1>
	conn->state = state;
    a196:	7361      	strb	r1, [r4, #13]
	switch (old_state) {
    a198:	b155      	cbz	r5, a1b0 <bt_conn_set_state+0x5c>
    a19a:	2d03      	cmp	r5, #3
    a19c:	d00c      	beq.n	a1b8 <bt_conn_set_state+0x64>
	switch (conn->state) {
    a19e:	7b63      	ldrb	r3, [r4, #13]
    a1a0:	2b05      	cmp	r3, #5
    a1a2:	f200 8097 	bhi.w	a2d4 <bt_conn_set_state+0x180>
    a1a6:	e8df f003 	tbb	[pc, r3]
    a1aa:	8728      	.short	0x8728
    a1ac:	870e8987 	.word	0x870e8987
	atomic_inc(&conn->ref);
    a1b0:	3044      	adds	r0, #68	; 0x44
    a1b2:	f7ff fc5d 	bl	9a70 <atomic_inc>
    a1b6:	e7f2      	b.n	a19e <bt_conn_set_state+0x4a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a1b8:	7883      	ldrb	r3, [r0, #2]
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d1ef      	bne.n	a19e <bt_conn_set_state+0x4a>
			k_delayed_work_cancel(&conn->le.update_work);
    a1be:	3074      	adds	r0, #116	; 0x74
    a1c0:	f022 faaf 	bl	2c722 <k_delayed_work_cancel>
    a1c4:	e7eb      	b.n	a19e <bt_conn_set_state+0x4a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a1c6:	78a3      	ldrb	r3, [r4, #2]
    a1c8:	2b02      	cmp	r3, #2
    a1ca:	d075      	beq.n	a2b8 <bt_conn_set_state+0x164>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    a1cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a1d0:	f021 fdae 	bl	2bd30 <_impl_k_queue_init>
    a1d4:	f104 001c 	add.w	r0, r4, #28
    a1d8:	f021 fdaa 	bl	2bd30 <_impl_k_queue_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    a1dc:	2100      	movs	r1, #0
    a1de:	484f      	ldr	r0, [pc, #316]	; (a31c <bt_conn_set_state+0x1c8>)
    a1e0:	f022 fe5c 	bl	2ce9c <_impl_k_poll_signal>
	list->head = NULL;
    a1e4:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    a1e6:	4620      	mov	r0, r4
	list->tail = NULL;
    a1e8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    a1ec:	f000 fedc 	bl	afa8 <bt_l2cap_connected>
		notify_connected(conn);
    a1f0:	4620      	mov	r0, r4
}
    a1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    a1f6:	f7ff bc0d 	b.w	9a14 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a1fa:	78a3      	ldrb	r3, [r4, #2]
    a1fc:	2b02      	cmp	r3, #2
    a1fe:	d105      	bne.n	a20c <bt_conn_set_state+0xb8>
	atomic_dec(&conn->ref);
    a200:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    a204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_dec(&conn->ref);
    a208:	f7ff bc25 	b.w	9a56 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    a20c:	1f2b      	subs	r3, r5, #4
    a20e:	2b01      	cmp	r3, #1
    a210:	d844      	bhi.n	a29c <bt_conn_set_state+0x148>
			bt_l2cap_disconnected(conn);
    a212:	4620      	mov	r0, r4
    a214:	f000 fcd8 	bl	abc8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a218:	4b41      	ldr	r3, [pc, #260]	; (a320 <bt_conn_set_state+0x1cc>)
    a21a:	681d      	ldr	r5, [r3, #0]
    a21c:	bb25      	cbnz	r5, a268 <bt_conn_set_state+0x114>
Z_GENLIST_PREPEND(slist, snode)
    a21e:	4e41      	ldr	r6, [pc, #260]	; (a324 <bt_conn_set_state+0x1d0>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    a220:	4f41      	ldr	r7, [pc, #260]	; (a328 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
    a222:	f04f 0320 	mov.w	r3, #32
    a226:	f3ef 8211 	mrs	r2, BASEPRI
    a22a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(slist)
    a22e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a230:	bb0b      	cbnz	r3, a276 <bt_conn_set_state+0x122>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a232:	f382 8811 	msr	BASEPRI, r2
			if (conn->type == BT_CONN_TYPE_LE) {
    a236:	78a3      	ldrb	r3, [r4, #2]
    a238:	b91b      	cbnz	r3, a242 <bt_conn_set_state+0xee>
				k_delayed_work_cancel(&conn->le.update_work);
    a23a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a23e:	f022 fa70 	bl	2c722 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a242:	f3bf 8f5b 	dmb	ish
    a246:	3404      	adds	r4, #4
    a248:	e854 3f00 	ldrex	r3, [r4]
    a24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a250:	e844 3200 	strex	r2, r3, [r4]
    a254:	2a00      	cmp	r2, #0
    a256:	d1f7      	bne.n	a248 <bt_conn_set_state+0xf4>
    a258:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    a25c:	2100      	movs	r1, #0
    a25e:	482f      	ldr	r0, [pc, #188]	; (a31c <bt_conn_set_state+0x1c8>)
}
    a260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a264:	f022 be1a 	b.w	2ce9c <_impl_k_poll_signal>
		if (cb->disconnected) {
    a268:	686b      	ldr	r3, [r5, #4]
    a26a:	b113      	cbz	r3, a272 <bt_conn_set_state+0x11e>
			cb->disconnected(conn, conn->err);
    a26c:	7b21      	ldrb	r1, [r4, #12]
    a26e:	4620      	mov	r0, r4
    a270:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a272:	69ad      	ldr	r5, [r5, #24]
    a274:	e7d2      	b.n	a21c <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a276:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    a278:	6819      	ldr	r1, [r3, #0]
	list->head = node;
    a27a:	6161      	str	r1, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a27c:	4283      	cmp	r3, r0
	list->tail = node;
    a27e:	bf08      	it	eq
    a280:	61a1      	streq	r1, [r4, #24]
    a282:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_PREPEND(slist, snode)
    a286:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    a288:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    a28a:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    a28c:	605d      	str	r5, [r3, #4]
	list->head = node;
    a28e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    a290:	b902      	cbnz	r2, a294 <bt_conn_set_state+0x140>
	list->tail = node;
    a292:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    a294:	4638      	mov	r0, r7
    a296:	f022 f872 	bl	2c37e <_impl_k_sem_give>
    a29a:	e7c2      	b.n	a222 <bt_conn_set_state+0xce>
		} else if (old_state == BT_CONN_CONNECT) {
    a29c:	2d03      	cmp	r5, #3
    a29e:	d103      	bne.n	a2a8 <bt_conn_set_state+0x154>
			notify_connected(conn);
    a2a0:	4620      	mov	r0, r4
    a2a2:	f7ff fbb7 	bl	9a14 <notify_connected>
    a2a6:	e7ab      	b.n	a200 <bt_conn_set_state+0xac>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    a2a8:	2d01      	cmp	r5, #1
    a2aa:	d103      	bne.n	a2b4 <bt_conn_set_state+0x160>
			if (conn->err) {
    a2ac:	7b23      	ldrb	r3, [r4, #12]
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d0a6      	beq.n	a200 <bt_conn_set_state+0xac>
    a2b2:	e7f5      	b.n	a2a0 <bt_conn_set_state+0x14c>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    a2b4:	2d02      	cmp	r5, #2
    a2b6:	d0f9      	beq.n	a2ac <bt_conn_set_state+0x158>
}
    a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a2bc:	78a3      	ldrb	r3, [r4, #2]
    a2be:	2b00      	cmp	r3, #0
    a2c0:	d1fa      	bne.n	a2b8 <bt_conn_set_state+0x164>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a2c2:	f104 0174 	add.w	r1, r4, #116	; 0x74
    a2c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
    a2ca:	4818      	ldr	r0, [pc, #96]	; (a32c <bt_conn_set_state+0x1d8>)
}
    a2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a2d0:	f022 ba76 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    a2d4:	4b0c      	ldr	r3, [pc, #48]	; (a308 <bt_conn_set_state+0x1b4>)
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	f003 0307 	and.w	r3, r3, #7
    a2dc:	2b01      	cmp	r3, #1
    a2de:	d9eb      	bls.n	a2b8 <bt_conn_set_state+0x164>
    a2e0:	2202      	movs	r2, #2
    a2e2:	f04f 0300 	mov.w	r3, #0
    a2e6:	f362 0302 	bfi	r3, r2, #0, #3
    a2ea:	4809      	ldr	r0, [pc, #36]	; (a310 <bt_conn_set_state+0x1bc>)
    a2ec:	4a07      	ldr	r2, [pc, #28]	; (a30c <bt_conn_set_state+0x1b8>)
    a2ee:	490a      	ldr	r1, [pc, #40]	; (a318 <bt_conn_set_state+0x1c4>)
    a2f0:	1a80      	subs	r0, r0, r2
    a2f2:	08c0      	lsrs	r0, r0, #3
    a2f4:	f36f 03c5 	bfc	r3, #3, #3
    a2f8:	f360 138f 	bfi	r3, r0, #6, #10
    a2fc:	4632      	mov	r2, r6
    a2fe:	480c      	ldr	r0, [pc, #48]	; (a330 <bt_conn_set_state+0x1dc>)
}
    a300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    a304:	f7f7 bd3c 	b.w	1d80 <log_2>
    a308:	2000d718 	.word	0x2000d718
    a30c:	0002cff8 	.word	0x0002cff8
    a310:	0002d008 	.word	0x0002d008
    a314:	0002f543 	.word	0x0002f543
    a318:	0002f456 	.word	0x0002f456
    a31c:	2000cda8 	.word	0x2000cda8
    a320:	20000a58 	.word	0x20000a58
    a324:	20000b08 	.word	0x20000b08
    a328:	2000cd0c 	.word	0x2000cd0c
    a32c:	200031d8 	.word	0x200031d8
    a330:	0002f555 	.word	0x0002f555

0000a334 <bt_conn_lookup_handle>:
{
    a334:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    a336:	4c0b      	ldr	r4, [pc, #44]	; (a364 <bt_conn_lookup_handle+0x30>)
{
    a338:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    a33a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a33e:	f7ff fb79 	bl	9a34 <atomic_get>
    a342:	b158      	cbz	r0, a35c <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    a344:	7b63      	ldrb	r3, [r4, #13]
    a346:	3b04      	subs	r3, #4
    a348:	2b01      	cmp	r3, #1
    a34a:	d808      	bhi.n	a35e <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    a34c:	8823      	ldrh	r3, [r4, #0]
    a34e:	4293      	cmp	r3, r2
    a350:	d105      	bne.n	a35e <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    a352:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a356:	f7ff fb8b 	bl	9a70 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    a35a:	4620      	mov	r0, r4
}
    a35c:	bd10      	pop	{r4, pc}
	return NULL;
    a35e:	2000      	movs	r0, #0
    a360:	e7fc      	b.n	a35c <bt_conn_lookup_handle+0x28>
    a362:	bf00      	nop
    a364:	20000a74 	.word	0x20000a74

0000a368 <bt_conn_addr_le_cmp>:
{
    a368:	b538      	push	{r3, r4, r5, lr}
    a36a:	460d      	mov	r5, r1
    a36c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    a36e:	f100 0148 	add.w	r1, r0, #72	; 0x48
    a372:	2207      	movs	r2, #7
    a374:	4628      	mov	r0, r5
    a376:	f7fb fd60 	bl	5e3a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    a37a:	b160      	cbz	r0, a396 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a37c:	78e3      	ldrb	r3, [r4, #3]
    a37e:	2207      	movs	r2, #7
    a380:	b933      	cbnz	r3, a390 <bt_conn_addr_le_cmp+0x28>
    a382:	f104 0156 	add.w	r1, r4, #86	; 0x56
    a386:	4628      	mov	r0, r5
}
    a388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a38c:	f7fb bd55 	b.w	5e3a <memcmp>
    a390:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    a394:	e7f7      	b.n	a386 <bt_conn_addr_le_cmp+0x1e>
    a396:	bd38      	pop	{r3, r4, r5, pc}

0000a398 <bt_conn_lookup_addr_le>:
{
    a398:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    a39a:	4c0d      	ldr	r4, [pc, #52]	; (a3d0 <bt_conn_lookup_addr_le+0x38>)
{
    a39c:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    a39e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a3a2:	f7ff fb47 	bl	9a34 <atomic_get>
    a3a6:	b908      	cbnz	r0, a3ac <bt_conn_lookup_addr_le+0x14>
	return NULL;
    a3a8:	2000      	movs	r0, #0
}
    a3aa:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a3ac:	78a2      	ldrb	r2, [r4, #2]
    a3ae:	2a00      	cmp	r2, #0
    a3b0:	d1fa      	bne.n	a3a8 <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    a3b2:	7a22      	ldrb	r2, [r4, #8]
    a3b4:	429a      	cmp	r2, r3
    a3b6:	d1f7      	bne.n	a3a8 <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    a3b8:	4620      	mov	r0, r4
    a3ba:	f7ff ffd5 	bl	a368 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    a3be:	2800      	cmp	r0, #0
    a3c0:	d1f2      	bne.n	a3a8 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    a3c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a3c6:	f7ff fb53 	bl	9a70 <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    a3ca:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    a3cc:	e7ed      	b.n	a3aa <bt_conn_lookup_addr_le+0x12>
    a3ce:	bf00      	nop
    a3d0:	20000a74 	.word	0x20000a74

0000a3d4 <bt_conn_lookup_state_le>:
{
    a3d4:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    a3d6:	4c0e      	ldr	r4, [pc, #56]	; (a410 <bt_conn_lookup_state_le+0x3c>)
{
    a3d8:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    a3da:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    a3de:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    a3e0:	f7ff fb28 	bl	9a34 <atomic_get>
    a3e4:	b908      	cbnz	r0, a3ea <bt_conn_lookup_state_le+0x16>
	return NULL;
    a3e6:	2000      	movs	r0, #0
}
    a3e8:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a3ea:	78a2      	ldrb	r2, [r4, #2]
    a3ec:	2a00      	cmp	r2, #0
    a3ee:	d1fa      	bne.n	a3e6 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    a3f0:	b93b      	cbnz	r3, a402 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    a3f2:	7b63      	ldrb	r3, [r4, #13]
    a3f4:	42ab      	cmp	r3, r5
    a3f6:	d1f6      	bne.n	a3e6 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    a3f8:	4806      	ldr	r0, [pc, #24]	; (a414 <bt_conn_lookup_state_le+0x40>)
    a3fa:	f7ff fb39 	bl	9a70 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    a3fe:	4804      	ldr	r0, [pc, #16]	; (a410 <bt_conn_lookup_state_le+0x3c>)
    a400:	e7f2      	b.n	a3e8 <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    a402:	4619      	mov	r1, r3
    a404:	4620      	mov	r0, r4
    a406:	f7ff ffaf 	bl	a368 <bt_conn_addr_le_cmp>
    a40a:	2800      	cmp	r0, #0
    a40c:	d0f1      	beq.n	a3f2 <bt_conn_lookup_state_le+0x1e>
    a40e:	e7ea      	b.n	a3e6 <bt_conn_lookup_state_le+0x12>
    a410:	20000a74 	.word	0x20000a74
    a414:	20000ab8 	.word	0x20000ab8

0000a418 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    a418:	3044      	adds	r0, #68	; 0x44
    a41a:	f7ff bb1c 	b.w	9a56 <atomic_dec>

0000a41e <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    a41e:	b510      	push	{r4, lr}
	info->type = conn->type;
    a420:	7883      	ldrb	r3, [r0, #2]
    a422:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    a424:	78c4      	ldrb	r4, [r0, #3]
    a426:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    a428:	7a02      	ldrb	r2, [r0, #8]
    a42a:	708a      	strb	r2, [r1, #2]

	switch (conn->type) {
    a42c:	b9a3      	cbnz	r3, a458 <bt_conn_get_info+0x3a>
    a42e:	f100 0256 	add.w	r2, r0, #86	; 0x56
    a432:	f100 034f 	add.w	r3, r0, #79	; 0x4f
	case BT_CONN_TYPE_LE:
		if (conn->role == BT_HCI_ROLE_MASTER) {
    a436:	b964      	cbnz	r4, a452 <bt_conn_get_info+0x34>
			info->le.src = &conn->le.init_addr;
			info->le.dst = &conn->le.resp_addr;
    a438:	e9c1 3201 	strd	r3, r2, [r1, #4]
		} else {
			info->le.src = &conn->le.resp_addr;
			info->le.dst = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    a43c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    a440:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    a442:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    a446:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    a448:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    a44c:	820b      	strh	r3, [r1, #16]
		return 0;
    a44e:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    a450:	bd10      	pop	{r4, pc}
			info->le.dst = &conn->le.init_addr;
    a452:	e9c1 2301 	strd	r2, r3, [r1, #4]
    a456:	e7f1      	b.n	a43c <bt_conn_get_info+0x1e>
	return -EINVAL;
    a458:	f06f 0015 	mvn.w	r0, #21
    a45c:	e7f8      	b.n	a450 <bt_conn_get_info+0x32>
	...

0000a460 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    a460:	b570      	push	{r4, r5, r6, lr}
    a462:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    a464:	460d      	mov	r5, r1
    a466:	2900      	cmp	r1, #0
    a468:	d140      	bne.n	a4ec <bt_le_set_auto_conn+0x8c>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    a46a:	4631      	mov	r1, r6
    a46c:	2000      	movs	r0, #0
    a46e:	f7ff ff93 	bl	a398 <bt_conn_lookup_addr_le>
	if (!conn) {
    a472:	4604      	mov	r4, r0
    a474:	b928      	cbnz	r0, a482 <bt_le_set_auto_conn+0x22>
		conn = bt_conn_add_le(addr);
    a476:	4630      	mov	r0, r6
    a478:	f7ff fe36 	bl	a0e8 <bt_conn_add_le>
		if (!conn) {
    a47c:	4604      	mov	r4, r0
    a47e:	2800      	cmp	r0, #0
    a480:	d055      	beq.n	a52e <bt_le_set_auto_conn+0xce>
    a482:	1d23      	adds	r3, r4, #4
    a484:	f104 0644 	add.w	r6, r4, #68	; 0x44
			return -ENOMEM;
		}
	}

	if (param) {
    a488:	2d00      	cmp	r5, #0
    a48a:	d037      	beq.n	a4fc <bt_le_set_auto_conn+0x9c>
		/* Only default identity is supported */
		conn->id = BT_ID_DEFAULT;
    a48c:	2200      	movs	r2, #0
    a48e:	7222      	strb	r2, [r4, #8]
	conn->le.interval_max = param->interval_max;
    a490:	886a      	ldrh	r2, [r5, #2]
    a492:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    a496:	88aa      	ldrh	r2, [r5, #4]
    a498:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    a49c:	88ea      	ldrh	r2, [r5, #6]
    a49e:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    a4a2:	f3bf 8f5b 	dmb	ish
    a4a6:	e853 2f00 	ldrex	r2, [r3]
    a4aa:	f042 0101 	orr.w	r1, r2, #1
    a4ae:	e843 1000 	strex	r0, r1, [r3]
    a4b2:	2800      	cmp	r0, #0
    a4b4:	d1f7      	bne.n	a4a6 <bt_le_set_auto_conn+0x46>
    a4b6:	f3bf 8f5b 	dmb	ish

		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    a4ba:	07d1      	lsls	r1, r2, #31
    a4bc:	d402      	bmi.n	a4c4 <bt_le_set_auto_conn+0x64>
	atomic_inc(&conn->ref);
    a4be:	4630      	mov	r0, r6
    a4c0:	f7ff fad6 	bl	9a70 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    a4c4:	7b63      	ldrb	r3, [r4, #13]
    a4c6:	b963      	cbnz	r3, a4e2 <bt_le_set_auto_conn+0x82>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a4c8:	481a      	ldr	r0, [pc, #104]	; (a534 <bt_le_set_auto_conn+0xd4>)
    a4ca:	f7ff fab3 	bl	9a34 <atomic_get>
    a4ce:	0783      	lsls	r3, r0, #30
    a4d0:	d507      	bpl.n	a4e2 <bt_le_set_auto_conn+0x82>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    a4d2:	b11d      	cbz	r5, a4dc <bt_le_set_auto_conn+0x7c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a4d4:	2101      	movs	r1, #1
    a4d6:	4620      	mov	r0, r4
    a4d8:	f7ff fe3c 	bl	a154 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    a4dc:	2000      	movs	r0, #0
    a4de:	f7fd f9f3 	bl	78c8 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    a4e2:	4630      	mov	r0, r6
    a4e4:	f7ff fab7 	bl	9a56 <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    a4e8:	2000      	movs	r0, #0
    a4ea:	e006      	b.n	a4fa <bt_le_set_auto_conn+0x9a>
	if (param && !bt_le_conn_params_valid(param)) {
    a4ec:	4608      	mov	r0, r1
    a4ee:	f7fc fe4b 	bl	7188 <bt_le_conn_params_valid>
    a4f2:	2800      	cmp	r0, #0
    a4f4:	d1b9      	bne.n	a46a <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    a4f6:	f06f 0015 	mvn.w	r0, #21
}
    a4fa:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a4fc:	f3bf 8f5b 	dmb	ish
    a500:	e853 2f00 	ldrex	r2, [r3]
    a504:	f022 0101 	bic.w	r1, r2, #1
    a508:	e843 1000 	strex	r0, r1, [r3]
    a50c:	2800      	cmp	r0, #0
    a50e:	d1f7      	bne.n	a500 <bt_le_set_auto_conn+0xa0>
    a510:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    a514:	07d2      	lsls	r2, r2, #31
    a516:	d5d5      	bpl.n	a4c4 <bt_le_set_auto_conn+0x64>
	atomic_dec(&conn->ref);
    a518:	4630      	mov	r0, r6
    a51a:	f7ff fa9c 	bl	9a56 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    a51e:	7b63      	ldrb	r3, [r4, #13]
    a520:	2b01      	cmp	r3, #1
    a522:	d1cf      	bne.n	a4c4 <bt_le_set_auto_conn+0x64>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a524:	4629      	mov	r1, r5
    a526:	4620      	mov	r0, r4
    a528:	f7ff fe14 	bl	a154 <bt_conn_set_state>
    a52c:	e7ca      	b.n	a4c4 <bt_le_set_auto_conn+0x64>
			return -ENOMEM;
    a52e:	f06f 000b 	mvn.w	r0, #11
    a532:	e7e2      	b.n	a4fa <bt_le_set_auto_conn+0x9a>
    a534:	2000ccf0 	.word	0x2000ccf0

0000a538 <bt_conn_disconnect>:
{
    a538:	b570      	push	{r4, r5, r6, lr}
    a53a:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a53c:	7881      	ldrb	r1, [r0, #2]
{
    a53e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a540:	b911      	cbnz	r1, a548 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    a542:	3048      	adds	r0, #72	; 0x48
    a544:	f7ff ff8c 	bl	a460 <bt_le_set_auto_conn>
	switch (conn->state) {
    a548:	7b63      	ldrb	r3, [r4, #13]
    a54a:	3b01      	subs	r3, #1
    a54c:	2b04      	cmp	r3, #4
    a54e:	d804      	bhi.n	a55a <bt_conn_disconnect+0x22>
    a550:	e8df f003 	tbb	[pc, r3]
    a554:	251a1107 	.word	0x251a1107
    a558:	0f          	.byte	0x0f
    a559:	00          	.byte	0x00
		return -ENOTCONN;
    a55a:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    a55e:	4628      	mov	r0, r5
    a560:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a562:	4620      	mov	r0, r4
		conn->err = reason;
    a564:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a566:	2100      	movs	r1, #0
    a568:	f7ff fdf4 	bl	a154 <bt_conn_set_state>
			bt_le_scan_update(false);
    a56c:	2000      	movs	r0, #0
    a56e:	f7fd f9ab 	bl	78c8 <bt_le_scan_update>
		return 0;
    a572:	2500      	movs	r5, #0
    a574:	e7f3      	b.n	a55e <bt_conn_disconnect+0x26>
		conn->err = reason;
    a576:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a578:	4620      	mov	r0, r4
    a57a:	2100      	movs	r1, #0
    a57c:	f7ff fdea 	bl	a154 <bt_conn_set_state>
}
    a580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_le_adv_stop();
    a584:	f7ff b938 	b.w	97f8 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->le.update_work);
    a588:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a58c:	f022 f8c9 	bl	2c722 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    a590:	2100      	movs	r1, #0
    a592:	f242 000e 	movw	r0, #8206	; 0x200e
}
    a596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    a59a:	f7fd b8f9 	b.w	7790 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    a59e:	2103      	movs	r1, #3
    a5a0:	f240 4006 	movw	r0, #1030	; 0x406
    a5a4:	f7fc fbda 	bl	6d5c <bt_hci_cmd_create>
	if (!buf) {
    a5a8:	4605      	mov	r5, r0
    a5aa:	b198      	cbz	r0, a5d4 <bt_conn_disconnect+0x9c>
	disconn = net_buf_add(buf, sizeof(*disconn));
    a5ac:	2103      	movs	r1, #3
    a5ae:	3008      	adds	r0, #8
    a5b0:	f013 ffac 	bl	1e50c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    a5b4:	8823      	ldrh	r3, [r4, #0]
    a5b6:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    a5b8:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    a5ba:	4629      	mov	r1, r5
    a5bc:	f240 4006 	movw	r0, #1030	; 0x406
    a5c0:	f7fd f8e6 	bl	7790 <bt_hci_cmd_send>
	if (err) {
    a5c4:	4605      	mov	r5, r0
    a5c6:	2800      	cmp	r0, #0
    a5c8:	d1c9      	bne.n	a55e <bt_conn_disconnect+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    a5ca:	2105      	movs	r1, #5
    a5cc:	4620      	mov	r0, r4
    a5ce:	f7ff fdc1 	bl	a154 <bt_conn_set_state>
    a5d2:	e7c4      	b.n	a55e <bt_conn_disconnect+0x26>
		return -ENOBUFS;
    a5d4:	f06f 0536 	mvn.w	r5, #54	; 0x36
    a5d8:	e7c1      	b.n	a55e <bt_conn_disconnect+0x26>

0000a5da <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    a5da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5dc:	4607      	mov	r7, r0
    a5de:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    a5e0:	f242 0013 	movw	r0, #8211	; 0x2013
    a5e4:	210e      	movs	r1, #14
    a5e6:	f7fc fbb9 	bl	6d5c <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    a5ea:	4606      	mov	r6, r0
    a5ec:	b1c8      	cbz	r0, a622 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    a5ee:	210e      	movs	r1, #14
    a5f0:	3008      	adds	r0, #8
    a5f2:	f013 ff8b 	bl	1e50c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
    a5f6:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    a5f8:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
    a5fa:	220e      	movs	r2, #14
    a5fc:	f7fb fc71 	bl	5ee2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    a600:	883b      	ldrh	r3, [r7, #0]
    a602:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    a604:	882b      	ldrh	r3, [r5, #0]
    a606:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    a608:	886b      	ldrh	r3, [r5, #2]
    a60a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    a60c:	88ab      	ldrh	r3, [r5, #4]
    a60e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    a610:	88eb      	ldrh	r3, [r5, #6]
    a612:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    a614:	4631      	mov	r1, r6
    a616:	f242 0013 	movw	r0, #8211	; 0x2013
}
    a61a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    a61e:	f7fd b8b7 	b.w	7790 <bt_hci_cmd_send>
}
    a622:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a628 <send_conn_le_param_update>:
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a628:	4b07      	ldr	r3, [pc, #28]	; (a648 <send_conn_le_param_update+0x20>)
    a62a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    a62e:	079a      	lsls	r2, r3, #30
    a630:	d503      	bpl.n	a63a <send_conn_le_param_update+0x12>
    a632:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
    a636:	079b      	lsls	r3, r3, #30
    a638:	d401      	bmi.n	a63e <send_conn_le_param_update+0x16>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    a63a:	78c3      	ldrb	r3, [r0, #3]
    a63c:	b90b      	cbnz	r3, a642 <send_conn_le_param_update+0x1a>
		return bt_conn_le_conn_update(conn, param);
    a63e:	f7ff bfcc 	b.w	a5da <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    a642:	f000 bd25 	b.w	b090 <bt_l2cap_update_conn_param>
    a646:	bf00      	nop
    a648:	2000cc80 	.word	0x2000cc80

0000a64c <conn_le_update_timeout>:
{
    a64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a64e:	f810 1c71 	ldrb.w	r1, [r0, #-113]
    a652:	b929      	cbnz	r1, a660 <conn_le_update_timeout+0x14>
		bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL, NULL);
    a654:	f242 000e 	movw	r0, #8206	; 0x200e
    a658:	f7fd f89a 	bl	7790 <bt_hci_cmd_send>
}
    a65c:	b004      	add	sp, #16
    a65e:	bd10      	pop	{r4, pc}
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    a660:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	if (atomic_test_and_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET)) {
    a664:	f1a0 0470 	sub.w	r4, r0, #112	; 0x70
    a668:	f3bf 8f5b 	dmb	ish
    a66c:	e854 3f00 	ldrex	r3, [r4]
    a670:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
    a674:	e844 1c00 	strex	ip, r1, [r4]
    a678:	f1bc 0f00 	cmp.w	ip, #0
    a67c:	d1f6      	bne.n	a66c <conn_le_update_timeout+0x20>
    a67e:	f3bf 8f5b 	dmb	ish
    a682:	055b      	lsls	r3, r3, #21
    a684:	d520      	bpl.n	a6c8 <conn_le_update_timeout+0x7c>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a686:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    a68a:	f8ad 3000 	strh.w	r3, [sp]
    a68e:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    a692:	f8ad 3002 	strh.w	r3, [sp, #2]
    a696:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    a69a:	f8ad 3004 	strh.w	r3, [sp, #4]
    a69e:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    a6a2:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    a6a6:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    a6a8:	4610      	mov	r0, r2
    a6aa:	f7ff ffbd 	bl	a628 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a6ae:	f3bf 8f5b 	dmb	ish
    a6b2:	e854 3f00 	ldrex	r3, [r4]
    a6b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a6ba:	e844 3200 	strex	r2, r3, [r4]
    a6be:	2a00      	cmp	r2, #0
    a6c0:	d1f7      	bne.n	a6b2 <conn_le_update_timeout+0x66>
    a6c2:	f3bf 8f5b 	dmb	ish
    a6c6:	e7c9      	b.n	a65c <conn_le_update_timeout+0x10>
		param = BT_LE_CONN_PARAM(CONFIG_BT_PERIPHERAL_PREF_MIN_INT,
    a6c8:	4903      	ldr	r1, [pc, #12]	; (a6d8 <conn_le_update_timeout+0x8c>)
    a6ca:	6808      	ldr	r0, [r1, #0]
    a6cc:	6849      	ldr	r1, [r1, #4]
    a6ce:	ab02      	add	r3, sp, #8
    a6d0:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    a6d2:	a902      	add	r1, sp, #8
    a6d4:	e7e8      	b.n	a6a8 <conn_le_update_timeout+0x5c>
    a6d6:	bf00      	nop
    a6d8:	0002d244 	.word	0x0002d244

0000a6dc <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    a6dc:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    a6de:	4b08      	ldr	r3, [pc, #32]	; (a700 <bt_conn_create_pdu+0x24>)
{
    a6e0:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    a6e2:	2800      	cmp	r0, #0
    a6e4:	bf08      	it	eq
    a6e6:	4618      	moveq	r0, r3
    a6e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a6ec:	f013 fe80 	bl	1e3f0 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    a6f0:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    a6f2:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    a6f4:	3008      	adds	r0, #8
    a6f6:	f013 fe9a 	bl	1e42e <net_buf_simple_reserve>

	return buf;
}
    a6fa:	4620      	mov	r0, r4
    a6fc:	bd38      	pop	{r3, r4, r5, pc}
    a6fe:	bf00      	nop
    a700:	2000d908 	.word	0x2000d908

0000a704 <create_frag.isra.9>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a708:	4606      	mov	r6, r0
    a70a:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    a70c:	4816      	ldr	r0, [pc, #88]	; (a768 <create_frag.isra.9+0x64>)
    a70e:	2100      	movs	r1, #0
    a710:	f7ff ffe4 	bl	a6dc <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    a714:	7833      	ldrb	r3, [r6, #0]
    a716:	2b04      	cmp	r3, #4
	frag = bt_conn_create_pdu(&frag_pool, 0);
    a718:	4605      	mov	r5, r0
    a71a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    a71e:	d005      	beq.n	a72c <create_frag.isra.9+0x28>
		net_buf_unref(frag);
    a720:	f013 fe96 	bl	1e450 <net_buf_unref>
		return NULL;
    a724:	4635      	mov	r5, r6
}
    a726:	4628      	mov	r0, r5
    a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    a72c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    a72e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    a732:	4e0e      	ldr	r6, [pc, #56]	; (a76c <create_frag.isra.9+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    a734:	4638      	mov	r0, r7
    a736:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    a73a:	f013 ff53 	bl	1e5e4 <net_buf_simple_tailroom>
    a73e:	4580      	cmp	r8, r0
    a740:	d20c      	bcs.n	a75c <create_frag.isra.9+0x58>
	return bt_dev.le.mtu;
    a742:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    a746:	f854 1f08 	ldr.w	r1, [r4, #8]!
    a74a:	4632      	mov	r2, r6
    a74c:	4638      	mov	r0, r7
    a74e:	f013 fee3 	bl	1e518 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    a752:	4631      	mov	r1, r6
    a754:	4620      	mov	r0, r4
    a756:	f013 ff29 	bl	1e5ac <net_buf_simple_pull>
    a75a:	e7e4      	b.n	a726 <create_frag.isra.9+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    a75c:	4638      	mov	r0, r7
    a75e:	f013 ff41 	bl	1e5e4 <net_buf_simple_tailroom>
    a762:	b286      	uxth	r6, r0
    a764:	e7ef      	b.n	a746 <create_frag.isra.9+0x42>
    a766:	bf00      	nop
    a768:	2000d928 	.word	0x2000d928
    a76c:	2000cc80 	.word	0x2000cc80

0000a770 <bt_conn_process_tx>:
{
    a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a772:	7b43      	ldrb	r3, [r0, #13]
{
    a774:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    a776:	b993      	cbnz	r3, a79e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a778:	f3bf 8f5b 	dmb	ish
    a77c:	1d03      	adds	r3, r0, #4
    a77e:	e853 2f00 	ldrex	r2, [r3]
    a782:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a786:	e843 1400 	strex	r4, r1, [r3]
    a78a:	2c00      	cmp	r4, #0
    a78c:	d1f7      	bne.n	a77e <bt_conn_process_tx+0xe>
    a78e:	f3bf 8f5b 	dmb	ish
    a792:	0652      	lsls	r2, r2, #25
    a794:	d503      	bpl.n	a79e <bt_conn_process_tx+0x2e>
}
    a796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    a79a:	f7ff bc45 	b.w	a028 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    a79e:	2100      	movs	r1, #0
    a7a0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    a7a4:	f013 fe2a 	bl	1e3fc <net_buf_get>
	BT_ASSERT(buf);
    a7a8:	4604      	mov	r4, r0
    a7aa:	b9d0      	cbnz	r0, a7e2 <bt_conn_process_tx+0x72>
    a7ac:	4b27      	ldr	r3, [pc, #156]	; (a84c <bt_conn_process_tx+0xdc>)
    a7ae:	681b      	ldr	r3, [r3, #0]
    a7b0:	075b      	lsls	r3, r3, #29
    a7b2:	d010      	beq.n	a7d6 <bt_conn_process_tx+0x66>
    a7b4:	2301      	movs	r3, #1
    a7b6:	f04f 0200 	mov.w	r2, #0
    a7ba:	f363 0202 	bfi	r2, r3, #0, #3
    a7be:	4924      	ldr	r1, [pc, #144]	; (a850 <bt_conn_process_tx+0xe0>)
    a7c0:	4b24      	ldr	r3, [pc, #144]	; (a854 <bt_conn_process_tx+0xe4>)
    a7c2:	1a5b      	subs	r3, r3, r1
    a7c4:	f360 02c5 	bfi	r2, r0, #3, #3
    a7c8:	08db      	lsrs	r3, r3, #3
    a7ca:	f363 128f 	bfi	r2, r3, #6, #10
    a7ce:	4922      	ldr	r1, [pc, #136]	; (a858 <bt_conn_process_tx+0xe8>)
    a7d0:	4822      	ldr	r0, [pc, #136]	; (a85c <bt_conn_process_tx+0xec>)
    a7d2:	f7f7 fac1 	bl	1d58 <log_1>
    a7d6:	4040      	eors	r0, r0
    a7d8:	f380 8811 	msr	BASEPRI, r0
    a7dc:	f04f 0004 	mov.w	r0, #4
    a7e0:	df02      	svc	2
	return bt_dev.le.mtu;
    a7e2:	4e1f      	ldr	r6, [pc, #124]	; (a860 <bt_conn_process_tx+0xf0>)
	if (buf->len <= conn_mtu(conn)) {
    a7e4:	8981      	ldrh	r1, [r0, #12]
    a7e6:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    a7ea:	4291      	cmp	r1, r2
    a7ec:	d807      	bhi.n	a7fe <bt_conn_process_tx+0x8e>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    a7ee:	2300      	movs	r3, #0
    a7f0:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a7f2:	4621      	mov	r1, r4
    a7f4:	4628      	mov	r0, r5
    a7f6:	f7ff fb6f 	bl	9ed8 <send_frag>
	if (!send_buf(conn, buf)) {
    a7fa:	b140      	cbz	r0, a80e <bt_conn_process_tx+0x9e>
}
    a7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7fe:	f105 070d 	add.w	r7, r5, #13
	frag = create_frag(conn, buf);
    a802:	4601      	mov	r1, r0
    a804:	4638      	mov	r0, r7
    a806:	f7ff ff7d 	bl	a704 <create_frag.isra.9>
	if (!frag) {
    a80a:	4601      	mov	r1, r0
    a80c:	b920      	cbnz	r0, a818 <bt_conn_process_tx+0xa8>
		net_buf_unref(buf);
    a80e:	4620      	mov	r0, r4
}
    a810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    a814:	f013 be1c 	b.w	1e450 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    a818:	2301      	movs	r3, #1
    a81a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a81c:	4628      	mov	r0, r5
    a81e:	f7ff fb5b 	bl	9ed8 <send_frag>
    a822:	2800      	cmp	r0, #0
    a824:	d0f3      	beq.n	a80e <bt_conn_process_tx+0x9e>
	while (buf->len > conn_mtu(conn)) {
    a826:	89a2      	ldrh	r2, [r4, #12]
    a828:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    a82c:	429a      	cmp	r2, r3
    a82e:	d802      	bhi.n	a836 <bt_conn_process_tx+0xc6>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a830:	2300      	movs	r3, #0
    a832:	2201      	movs	r2, #1
    a834:	e7dd      	b.n	a7f2 <bt_conn_process_tx+0x82>
		frag = create_frag(conn, buf);
    a836:	4621      	mov	r1, r4
    a838:	4638      	mov	r0, r7
    a83a:	f7ff ff63 	bl	a704 <create_frag.isra.9>
		if (!frag) {
    a83e:	4601      	mov	r1, r0
    a840:	2800      	cmp	r0, #0
    a842:	d0e4      	beq.n	a80e <bt_conn_process_tx+0x9e>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a844:	2301      	movs	r3, #1
    a846:	461a      	mov	r2, r3
    a848:	e7e8      	b.n	a81c <bt_conn_process_tx+0xac>
    a84a:	bf00      	nop
    a84c:	2000d718 	.word	0x2000d718
    a850:	0002cff8 	.word	0x0002cff8
    a854:	0002d008 	.word	0x0002d008
    a858:	0002f443 	.word	0x0002f443
    a85c:	0002f1df 	.word	0x0002f1df
    a860:	2000cc80 	.word	0x2000cc80

0000a864 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    a864:	4b03      	ldr	r3, [pc, #12]	; (a874 <bt_conn_get_id+0x10>)
    a866:	1ac0      	subs	r0, r0, r3
    a868:	4b03      	ldr	r3, [pc, #12]	; (a878 <bt_conn_get_id+0x14>)
    a86a:	1080      	asrs	r0, r0, #2
    a86c:	4358      	muls	r0, r3
}
    a86e:	b2c0      	uxtb	r0, r0
    a870:	4770      	bx	lr
    a872:	bf00      	nop
    a874:	20000a74 	.word	0x20000a74
    a878:	914c1bad 	.word	0x914c1bad

0000a87c <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    a87c:	4a15      	ldr	r2, [pc, #84]	; (a8d4 <bt_conn_init+0x58>)
	parent->next = child;
    a87e:	4b16      	ldr	r3, [pc, #88]	; (a8d8 <bt_conn_init+0x5c>)
    a880:	6850      	ldr	r0, [r2, #4]
    a882:	6811      	ldr	r1, [r2, #0]
    a884:	b510      	push	{r4, lr}
    a886:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    a888:	bb10      	cbnz	r0, a8d0 <bt_conn_init+0x54>
    a88a:	2401      	movs	r4, #1
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    a88c:	4618      	mov	r0, r3
	parent->next = child;
    a88e:	4913      	ldr	r1, [pc, #76]	; (a8dc <bt_conn_init+0x60>)
    a890:	6119      	str	r1, [r3, #16]
    a892:	3108      	adds	r1, #8
    a894:	609b      	str	r3, [r3, #8]
    a896:	6011      	str	r1, [r2, #0]
    a898:	b104      	cbz	r4, a89c <bt_conn_init+0x20>
    a89a:	6050      	str	r0, [r2, #4]
	}

	bt_att_init();
    a89c:	f002 fc0c 	bl	d0b8 <bt_att_init>

	err = bt_smp_init();
    a8a0:	f005 fd24 	bl	102ec <bt_smp_init>
	if (err) {
    a8a4:	4604      	mov	r4, r0
    a8a6:	b988      	cbnz	r0, a8cc <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    a8a8:	f000 fc12 	bl	b0d0 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    a8ac:	4b0c      	ldr	r3, [pc, #48]	; (a8e0 <bt_conn_init+0x64>)
    a8ae:	f103 0044 	add.w	r0, r3, #68	; 0x44
    a8b2:	f7ff f8bf 	bl	9a34 <atomic_get>
    a8b6:	b148      	cbz	r0, a8cc <bt_conn_init+0x50>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a8b8:	1d18      	adds	r0, r3, #4
    a8ba:	f7ff f8bb 	bl	9a34 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    a8be:	07c2      	lsls	r2, r0, #31
    a8c0:	d504      	bpl.n	a8cc <bt_conn_init+0x50>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    a8c2:	721c      	strb	r4, [r3, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a8c4:	2101      	movs	r1, #1
    a8c6:	4618      	mov	r0, r3
    a8c8:	f7ff fc44 	bl	a154 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    a8cc:	4620      	mov	r0, r4
    a8ce:	bd10      	pop	{r4, pc}
Z_GENLIST_PREPEND(slist, snode)
    a8d0:	2400      	movs	r4, #0
    a8d2:	e7dc      	b.n	a88e <bt_conn_init+0x12>
    a8d4:	20000b08 	.word	0x20000b08
    a8d8:	20000a5c 	.word	0x20000a5c
    a8dc:	20000a64 	.word	0x20000a64
    a8e0:	20000a74 	.word	0x20000a74

0000a8e4 <sys_slist_append>:
	parent->next = child;
    a8e4:	2300      	movs	r3, #0
    a8e6:	600b      	str	r3, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
    a8e8:	6843      	ldr	r3, [r0, #4]
    a8ea:	b913      	cbnz	r3, a8f2 <sys_slist_append+0xe>
	list->head = node;
    a8ec:	e9c0 1100 	strd	r1, r1, [r0]
    a8f0:	4770      	bx	lr
	parent->next = child;
    a8f2:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a8f4:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    a8f6:	4770      	bx	lr

0000a8f8 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    a8f8:	6813      	ldr	r3, [r2, #0]
    a8fa:	b939      	cbnz	r1, a90c <sys_slist_remove+0x14>
    a8fc:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    a8fe:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    a900:	428a      	cmp	r2, r1
    a902:	d100      	bne.n	a906 <sys_slist_remove+0xe>
	list->tail = node;
    a904:	6043      	str	r3, [r0, #4]
	parent->next = child;
    a906:	2300      	movs	r3, #0
    a908:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a90a:	4770      	bx	lr
	parent->next = child;
    a90c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    a90e:	6843      	ldr	r3, [r0, #4]
    a910:	429a      	cmp	r2, r3
	list->tail = node;
    a912:	bf08      	it	eq
    a914:	6041      	streq	r1, [r0, #4]
    a916:	e7f6      	b.n	a906 <sys_slist_remove+0xe>

0000a918 <net_buf_frags_len>:
 *  @param buf Buffer to start off with.
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
    a918:	4603      	mov	r3, r0
	size_t bytes = 0;
    a91a:	2000      	movs	r0, #0

	while (buf) {
    a91c:	b903      	cbnz	r3, a920 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
    a91e:	4770      	bx	lr
		bytes += buf->len;
    a920:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    a922:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    a924:	4410      	add	r0, r2
    a926:	e7f9      	b.n	a91c <net_buf_frags_len+0x4>

0000a928 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    a928:	4b04      	ldr	r3, [pc, #16]	; (a93c <get_ident+0x14>)
    a92a:	781a      	ldrb	r2, [r3, #0]
    a92c:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    a92e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    a932:	bf08      	it	eq
    a934:	2201      	moveq	r2, #1
    a936:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    a938:	7818      	ldrb	r0, [r3, #0]
    a93a:	4770      	bx	lr
    a93c:	20000ba4 	.word	0x20000ba4

0000a940 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    a940:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    a942:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
    a944:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    a946:	b164      	cbz	r4, a962 <__l2cap_lookup_ident+0x22>
    a948:	3c08      	subs	r4, #8
    a94a:	2100      	movs	r1, #0
    a94c:	b14c      	cbz	r4, a962 <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
    a94e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    a952:	42ab      	cmp	r3, r5
    a954:	d107      	bne.n	a966 <__l2cap_lookup_ident+0x26>
			if (remove) {
    a956:	b122      	cbz	r2, a962 <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
    a958:	f104 0208 	add.w	r2, r4, #8
    a95c:	303c      	adds	r0, #60	; 0x3c
    a95e:	f7ff ffcb 	bl	a8f8 <sys_slist_remove>

		prev = &chan->node;
	}

	return NULL;
}
    a962:	4620      	mov	r0, r4
    a964:	bd38      	pop	{r3, r4, r5, pc}
	return node->next;
    a966:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    a968:	b123      	cbz	r3, a974 <__l2cap_lookup_ident+0x34>
		prev = &chan->node;
    a96a:	f104 0108 	add.w	r1, r4, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    a96e:	f1a3 0408 	sub.w	r4, r3, #8
    a972:	e7eb      	b.n	a94c <__l2cap_lookup_ident+0xc>
	return NULL;
    a974:	461c      	mov	r4, r3
    a976:	e7f4      	b.n	a962 <__l2cap_lookup_ident+0x22>

0000a978 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    a978:	4b05      	ldr	r3, [pc, #20]	; (a990 <l2cap_server_lookup_psm+0x18>)
{
    a97a:	4602      	mov	r2, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    a97c:	6818      	ldr	r0, [r3, #0]
    a97e:	b108      	cbz	r0, a984 <l2cap_server_lookup_psm+0xc>
    a980:	3808      	subs	r0, #8
    a982:	b900      	cbnz	r0, a986 <l2cap_server_lookup_psm+0xe>
			return server;
		}
	}

	return NULL;
}
    a984:	4770      	bx	lr
		if (server->psm == psm) {
    a986:	8803      	ldrh	r3, [r0, #0]
    a988:	4293      	cmp	r3, r2
    a98a:	d0fb      	beq.n	a984 <l2cap_server_lookup_psm+0xc>
    a98c:	6880      	ldr	r0, [r0, #8]
    a98e:	e7f6      	b.n	a97e <l2cap_server_lookup_psm+0x6>
    a990:	20000bb0 	.word	0x20000bb0

0000a994 <l2cap_remove_tx_cid>:
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static struct bt_l2cap_le_chan *l2cap_remove_tx_cid(struct bt_conn *conn,
						    u16_t cid)
{
    a994:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    a996:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    a99a:	2b3f      	cmp	r3, #63	; 0x3f
    a99c:	d815      	bhi.n	a9ca <l2cap_remove_tx_cid+0x36>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    a99e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    a9a0:	b15c      	cbz	r4, a9ba <l2cap_remove_tx_cid+0x26>
    a9a2:	3c08      	subs	r4, #8
    a9a4:	2300      	movs	r3, #0
    a9a6:	b144      	cbz	r4, a9ba <l2cap_remove_tx_cid+0x26>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    a9a8:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    a9aa:	428d      	cmp	r5, r1
    a9ac:	f104 0208 	add.w	r2, r4, #8
    a9b0:	d105      	bne.n	a9be <l2cap_remove_tx_cid+0x2a>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    a9b2:	4619      	mov	r1, r3
    a9b4:	303c      	adds	r0, #60	; 0x3c
    a9b6:	f7ff ff9f 	bl	a8f8 <sys_slist_remove>

		prev = &chan->node;
	}

	return NULL;
}
    a9ba:	4620      	mov	r0, r4
    a9bc:	bd38      	pop	{r3, r4, r5, pc}
    a9be:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    a9c0:	2c00      	cmp	r4, #0
    a9c2:	d0fa      	beq.n	a9ba <l2cap_remove_tx_cid+0x26>
    a9c4:	3c08      	subs	r4, #8
    a9c6:	4613      	mov	r3, r2
    a9c8:	e7ed      	b.n	a9a6 <l2cap_remove_tx_cid+0x12>
		return NULL;
    a9ca:	2400      	movs	r4, #0
    a9cc:	e7f5      	b.n	a9ba <l2cap_remove_tx_cid+0x26>

0000a9ce <l2cap_alloc_frag>:
static struct net_buf *l2cap_alloc_frag(s32_t timeout, void *user_data)
{
	struct bt_l2cap_le_chan *chan = user_data;
	struct net_buf *frag = NULL;

	frag = chan->chan.ops->alloc_buf(&chan->chan);
    a9ce:	684b      	ldr	r3, [r1, #4]
    a9d0:	4608      	mov	r0, r1
    a9d2:	68db      	ldr	r3, [r3, #12]
    a9d4:	4718      	bx	r3

0000a9d6 <l2cap_connected>:

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}
    a9d6:	4770      	bx	lr

0000a9d8 <l2cap_chan_destroy>:
{
    a9d8:	b570      	push	{r4, r5, r6, lr}
    a9da:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    a9dc:	3010      	adds	r0, #16
    a9de:	f021 fea0 	bl	2c722 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    a9e2:	f104 0678 	add.w	r6, r4, #120	; 0x78
    a9e6:	2100      	movs	r1, #0
    a9e8:	4630      	mov	r0, r6
    a9ea:	f013 fd07 	bl	1e3fc <net_buf_get>
    a9ee:	4605      	mov	r5, r0
    a9f0:	b948      	cbnz	r0, aa06 <l2cap_chan_destroy+0x2e>
	if (ch->_sdu) {
    a9f2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a9f6:	b128      	cbz	r0, aa04 <l2cap_chan_destroy+0x2c>
		net_buf_unref(ch->_sdu);
    a9f8:	f013 fd2a 	bl	1e450 <net_buf_unref>
		ch->_sdu = NULL;
    a9fc:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
		ch->_sdu_len = 0;
    aa00:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
}
    aa04:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    aa06:	f013 fd23 	bl	1e450 <net_buf_unref>
    aa0a:	e7ec      	b.n	a9e6 <l2cap_chan_destroy+0xe>

0000aa0c <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
    aa0c:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    aa0e:	b913      	cbnz	r3, aa16 <l2cap_chan_rx_init+0xa>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    aa10:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
    aa14:	8743      	strh	r3, [r0, #58]	; 0x3a
	if (!chan->rx.init_credits) {
    aa16:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    aa18:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    aa1a:	b94a      	cbnz	r2, aa30 <l2cap_chan_rx_init+0x24>
		if (chan->chan.ops->alloc_buf) {
    aa1c:	6842      	ldr	r2, [r0, #4]
    aa1e:	68d2      	ldr	r2, [r2, #12]
    aa20:	b19a      	cbz	r2, aa4a <l2cap_chan_rx_init+0x3e>
			chan->rx.init_credits = (chan->rx.mtu +
    aa22:	f203 12f7 	addw	r2, r3, #503	; 0x1f7
						 (L2CAP_MAX_LE_MPS - 1)) /
    aa26:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    aa2a:	fb92 f2f1 	sdiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    aa2e:	87c2      	strh	r2, [r0, #62]	; 0x3e
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    aa30:	3302      	adds	r3, #2
    aa32:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
    aa36:	bfa8      	it	ge
    aa38:	f44f 73fc 	movge.w	r3, #504	; 0x1f8
    aa3c:	8783      	strh	r3, [r0, #60]	; 0x3c
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    aa3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aa42:	2100      	movs	r1, #0
    aa44:	3040      	adds	r0, #64	; 0x40
    aa46:	f021 bc91 	b.w	2c36c <_impl_k_sem_init>
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    aa4a:	2213      	movs	r2, #19
    aa4c:	e7ef      	b.n	aa2e <l2cap_chan_rx_init+0x22>

0000aa4e <l2cap_chan_tx_init>:
{
    aa4e:	b510      	push	{r4, lr}
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    aa50:	2220      	movs	r2, #32
{
    aa52:	4604      	mov	r4, r0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    aa54:	2100      	movs	r1, #0
    aa56:	3058      	adds	r0, #88	; 0x58
    aa58:	f7fb fa43 	bl	5ee2 <memset>
    aa5c:	f104 0060 	add.w	r0, r4, #96	; 0x60
    aa60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aa64:	2100      	movs	r1, #0
    aa66:	f021 fc81 	bl	2c36c <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    aa6a:	f104 0078 	add.w	r0, r4, #120	; 0x78
}
    aa6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa72:	f021 b95d 	b.w	2bd30 <_impl_k_queue_init>
	...

0000aa78 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    aa78:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    aa7a:	4c10      	ldr	r4, [pc, #64]	; (aabc <l2cap_accept+0x44>)
{
    aa7c:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    aa7e:	6820      	ldr	r0, [r4, #0]
    aa80:	b918      	cbnz	r0, aa8a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    aa82:	4a0f      	ldr	r2, [pc, #60]	; (aac0 <l2cap_accept+0x48>)
    aa84:	6062      	str	r2, [r4, #4]
		*chan = &l2cap->chan.chan;
    aa86:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    aa88:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    aa8a:	4b0e      	ldr	r3, [pc, #56]	; (aac4 <l2cap_accept+0x4c>)
    aa8c:	681b      	ldr	r3, [r3, #0]
    aa8e:	075b      	lsls	r3, r3, #29
    aa90:	d010      	beq.n	aab4 <l2cap_accept+0x3c>
    aa92:	2101      	movs	r1, #1
    aa94:	f04f 0300 	mov.w	r3, #0
    aa98:	f361 0302 	bfi	r3, r1, #0, #3
    aa9c:	480a      	ldr	r0, [pc, #40]	; (aac8 <l2cap_accept+0x50>)
    aa9e:	490b      	ldr	r1, [pc, #44]	; (aacc <l2cap_accept+0x54>)
    aaa0:	1a09      	subs	r1, r1, r0
    aaa2:	08c9      	lsrs	r1, r1, #3
    aaa4:	f36f 03c5 	bfc	r3, #3, #3
    aaa8:	f361 138f 	bfi	r3, r1, #6, #10
    aaac:	4808      	ldr	r0, [pc, #32]	; (aad0 <l2cap_accept+0x58>)
    aaae:	4909      	ldr	r1, [pc, #36]	; (aad4 <l2cap_accept+0x5c>)
    aab0:	f7f7 f966 	bl	1d80 <log_2>
	return -ENOMEM;
    aab4:	f06f 000b 	mvn.w	r0, #11
    aab8:	e7e6      	b.n	aa88 <l2cap_accept+0x10>
    aaba:	bf00      	nop
    aabc:	20000b10 	.word	0x20000b10
    aac0:	2000cdc4 	.word	0x2000cdc4
    aac4:	2000d754 	.word	0x2000d754
    aac8:	0002cff8 	.word	0x0002cff8
    aacc:	0002d080 	.word	0x0002d080
    aad0:	0002f7b6 	.word	0x0002f7b6
    aad4:	0002f6ad 	.word	0x0002f6ad

0000aad8 <l2cap_create_le_sig_pdu.isra.10>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aada:	4607      	mov	r7, r0
    aadc:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    aade:	2000      	movs	r0, #0
    aae0:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    aae2:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    aae4:	f7ff fdfa 	bl	a6dc <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    aae8:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    aaea:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    aaec:	3008      	adds	r0, #8
    aaee:	f013 fd0d 	bl	1e50c <net_buf_simple_add>
	hdr->code = code;
    aaf2:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    aaf4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    aaf6:	8045      	strh	r5, [r0, #2]
}
    aaf8:	4620      	mov	r0, r4
    aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000aafc <l2cap_disconnected>:
    aafc:	4770      	bx	lr
	...

0000ab00 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    ab00:	f100 0108 	add.w	r1, r0, #8
    ab04:	4801      	ldr	r0, [pc, #4]	; (ab0c <bt_l2cap_le_fixed_chan_register+0xc>)
    ab06:	f7ff beed 	b.w	a8e4 <sys_slist_append>
    ab0a:	bf00      	nop
    ab0c:	20000ba8 	.word	0x20000ba8

0000ab10 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    ab10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    ab12:	b410      	push	{r4}
    ab14:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    ab16:	b113      	cbz	r3, ab1e <bt_l2cap_chan_remove+0xe>
    ab18:	3b08      	subs	r3, #8
    ab1a:	2100      	movs	r1, #0
    ab1c:	b90b      	cbnz	r3, ab22 <bt_l2cap_chan_remove+0x12>
}
    ab1e:	bc10      	pop	{r4}
    ab20:	4770      	bx	lr
		if (chan == ch) {
    ab22:	42a3      	cmp	r3, r4
    ab24:	f103 0208 	add.w	r2, r3, #8
    ab28:	d103      	bne.n	ab32 <bt_l2cap_chan_remove+0x22>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    ab2a:	303c      	adds	r0, #60	; 0x3c
}
    ab2c:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
    ab2e:	f7ff bee3 	b.w	a8f8 <sys_slist_remove>
    ab32:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    ab34:	2b00      	cmp	r3, #0
    ab36:	d0f2      	beq.n	ab1e <bt_l2cap_chan_remove+0xe>
    ab38:	3b08      	subs	r3, #8
    ab3a:	4611      	mov	r1, r2
    ab3c:	e7ee      	b.n	ab1c <bt_l2cap_chan_remove+0xc>

0000ab3e <bt_l2cap_chan_del>:
	if (!chan->conn) {
    ab3e:	6803      	ldr	r3, [r0, #0]
{
    ab40:	b510      	push	{r4, lr}
    ab42:	4604      	mov	r4, r0
	if (!chan->conn) {
    ab44:	b12b      	cbz	r3, ab52 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    ab46:	6843      	ldr	r3, [r0, #4]
    ab48:	685b      	ldr	r3, [r3, #4]
    ab4a:	b103      	cbz	r3, ab4e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    ab4c:	4798      	blx	r3
	chan->conn = NULL;
    ab4e:	2300      	movs	r3, #0
    ab50:	6023      	str	r3, [r4, #0]
	chan->state = state;
    ab52:	2300      	movs	r3, #0
    ab54:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	chan->psm = 0;
    ab58:	8663      	strh	r3, [r4, #50]	; 0x32
	if (chan->destroy) {
    ab5a:	68e3      	ldr	r3, [r4, #12]
    ab5c:	b11b      	cbz	r3, ab66 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    ab5e:	4620      	mov	r0, r4
}
    ab60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    ab64:	4718      	bx	r3
}
    ab66:	bd10      	pop	{r4, pc}

0000ab68 <l2cap_rtx_timeout>:
{
    ab68:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    ab6a:	4b12      	ldr	r3, [pc, #72]	; (abb4 <l2cap_rtx_timeout+0x4c>)
    ab6c:	681b      	ldr	r3, [r3, #0]
    ab6e:	f013 0f07 	tst.w	r3, #7
{
    ab72:	4605      	mov	r5, r0
    ab74:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    ab78:	d011      	beq.n	ab9e <l2cap_rtx_timeout+0x36>
    ab7a:	2201      	movs	r2, #1
    ab7c:	f04f 0300 	mov.w	r3, #0
    ab80:	f362 0302 	bfi	r3, r2, #0, #3
    ab84:	490c      	ldr	r1, [pc, #48]	; (abb8 <l2cap_rtx_timeout+0x50>)
    ab86:	4a0d      	ldr	r2, [pc, #52]	; (abbc <l2cap_rtx_timeout+0x54>)
    ab88:	480d      	ldr	r0, [pc, #52]	; (abc0 <l2cap_rtx_timeout+0x58>)
    ab8a:	1a52      	subs	r2, r2, r1
    ab8c:	08d2      	lsrs	r2, r2, #3
    ab8e:	f36f 03c5 	bfc	r3, #3, #3
    ab92:	f362 138f 	bfi	r3, r2, #6, #10
    ab96:	490b      	ldr	r1, [pc, #44]	; (abc4 <l2cap_rtx_timeout+0x5c>)
    ab98:	4622      	mov	r2, r4
    ab9a:	f7f7 f8f1 	bl	1d80 <log_2>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    ab9e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    aba2:	4621      	mov	r1, r4
    aba4:	f7ff ffb4 	bl	ab10 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    aba8:	4620      	mov	r0, r4
}
    abaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    abae:	f7ff bfc6 	b.w	ab3e <bt_l2cap_chan_del>
    abb2:	bf00      	nop
    abb4:	2000d754 	.word	0x2000d754
    abb8:	0002cff8 	.word	0x0002cff8
    abbc:	0002d080 	.word	0x0002d080
    abc0:	0002fa35 	.word	0x0002fa35
    abc4:	0002f5ad 	.word	0x0002f5ad

0000abc8 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    abc8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    abca:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    abcc:	b193      	cbz	r3, abf4 <bt_l2cap_disconnected+0x2c>
    abce:	f1b3 0008 	subs.w	r0, r3, #8
    abd2:	d00f      	beq.n	abf4 <bt_l2cap_disconnected+0x2c>
    abd4:	681c      	ldr	r4, [r3, #0]
    abd6:	b14c      	cbz	r4, abec <bt_l2cap_disconnected+0x24>
    abd8:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    abda:	f7ff ffb0 	bl	ab3e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    abde:	b14c      	cbz	r4, abf4 <bt_l2cap_disconnected+0x2c>
    abe0:	68a3      	ldr	r3, [r4, #8]
    abe2:	b103      	cbz	r3, abe6 <bt_l2cap_disconnected+0x1e>
    abe4:	3b08      	subs	r3, #8
{
    abe6:	4620      	mov	r0, r4
    abe8:	461c      	mov	r4, r3
    abea:	e7f6      	b.n	abda <bt_l2cap_disconnected+0x12>
}
    abec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    abf0:	f7ff bfa5 	b.w	ab3e <bt_l2cap_chan_del>
}
    abf4:	bd10      	pop	{r4, pc}

0000abf6 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    abf6:	3104      	adds	r1, #4
    abf8:	f7ff bd70 	b.w	a6dc <bt_conn_create_pdu>

0000abfc <bt_l2cap_send_cb>:
{
    abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abfe:	4614      	mov	r4, r2
    ac00:	4605      	mov	r5, r0
    ac02:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    ac04:	f102 0008 	add.w	r0, r2, #8
    ac08:	2104      	movs	r1, #4
{
    ac0a:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    ac0c:	f013 fcb5 	bl	1e57a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ac10:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    ac12:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ac14:	3904      	subs	r1, #4
    ac16:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    ac18:	4632      	mov	r2, r6
    ac1a:	4621      	mov	r1, r4
    ac1c:	4628      	mov	r0, r5
}
    ac1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    ac22:	f7ff b909 	b.w	9e38 <bt_conn_send_cb>
	...

0000ac28 <l2cap_le_conn_req>:
{
    ac28:	b538      	push	{r3, r4, r5, lr}
    ac2a:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    ac2c:	f7ff fe7c 	bl	a928 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    ac30:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    ac32:	4601      	mov	r1, r0
    ac34:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    ac38:	2014      	movs	r0, #20
    ac3a:	f7ff ff4d 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
	req = net_buf_add(buf, sizeof(*req));
    ac3e:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    ac40:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    ac42:	3008      	adds	r0, #8
    ac44:	f013 fc62 	bl	1e50c <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    ac48:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    ac4a:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    ac4c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    ac4e:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    ac50:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    ac52:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    ac54:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    ac56:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    ac58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    ac5a:	8103      	strh	r3, [r0, #8]
    ac5c:	f104 0110 	add.w	r1, r4, #16
    ac60:	f649 4240 	movw	r2, #40000	; 0x9c40
    ac64:	4805      	ldr	r0, [pc, #20]	; (ac7c <l2cap_le_conn_req+0x54>)
    ac66:	f021 fdab 	bl	2c7c0 <k_delayed_work_submit_to_queue>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    ac6a:	6820      	ldr	r0, [r4, #0]
    ac6c:	2300      	movs	r3, #0
    ac6e:	462a      	mov	r2, r5
    ac70:	2105      	movs	r1, #5
    ac72:	f7ff ffc3 	bl	abfc <bt_l2cap_send_cb>
}
    ac76:	2000      	movs	r0, #0
    ac78:	bd38      	pop	{r3, r4, r5, pc}
    ac7a:	bf00      	nop
    ac7c:	200031d8 	.word	0x200031d8

0000ac80 <bt_l2cap_encrypt_change>:
{
    ac80:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    ac82:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
    ac84:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    ac86:	b10c      	cbz	r4, ac8c <bt_l2cap_encrypt_change+0xc>
    ac88:	3c08      	subs	r4, #8
    ac8a:	b904      	cbnz	r4, ac8e <bt_l2cap_encrypt_change+0xe>
}
    ac8c:	bd38      	pop	{r3, r4, r5, pc}
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    ac8e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ac92:	2b01      	cmp	r3, #1
    ac94:	d10a      	bne.n	acac <bt_l2cap_encrypt_change+0x2c>
    ac96:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    ac9a:	b93b      	cbnz	r3, acac <bt_l2cap_encrypt_change+0x2c>
	if (status) {
    ac9c:	b175      	cbz	r5, acbc <bt_l2cap_encrypt_change+0x3c>
		bt_l2cap_chan_remove(chan->conn, chan);
    ac9e:	6820      	ldr	r0, [r4, #0]
    aca0:	4621      	mov	r1, r4
    aca2:	f7ff ff35 	bl	ab10 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    aca6:	4620      	mov	r0, r4
    aca8:	f7ff ff49 	bl	ab3e <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
    acac:	6863      	ldr	r3, [r4, #4]
    acae:	689b      	ldr	r3, [r3, #8]
    acb0:	b113      	cbz	r3, acb8 <bt_l2cap_encrypt_change+0x38>
			chan->ops->encrypt_change(chan, hci_status);
    acb2:	4629      	mov	r1, r5
    acb4:	4620      	mov	r0, r4
    acb6:	4798      	blx	r3
    acb8:	68a4      	ldr	r4, [r4, #8]
    acba:	e7e4      	b.n	ac86 <bt_l2cap_encrypt_change+0x6>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    acbc:	4620      	mov	r0, r4
    acbe:	f7ff ffb3 	bl	ac28 <l2cap_le_conn_req>
    acc2:	e7f3      	b.n	acac <bt_l2cap_encrypt_change+0x2c>

0000acc4 <l2cap_send_reject>:
{
    acc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    acc8:	f89d 7020 	ldrb.w	r7, [sp, #32]
    accc:	4691      	mov	r9, r2
    acce:	4680      	mov	r8, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    acd0:	1cba      	adds	r2, r7, #2
    acd2:	2001      	movs	r0, #1
{
    acd4:	461e      	mov	r6, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    acd6:	f7ff feff 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
	rej = net_buf_add(buf, sizeof(*rej));
    acda:	f100 0508 	add.w	r5, r0, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    acde:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    ace0:	2102      	movs	r1, #2
    ace2:	4628      	mov	r0, r5
    ace4:	f013 fc12 	bl	1e50c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    ace8:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    acec:	b126      	cbz	r6, acf8 <l2cap_send_reject+0x34>
		net_buf_add_mem(buf, data, data_len);
    acee:	463a      	mov	r2, r7
    acf0:	4631      	mov	r1, r6
    acf2:	4628      	mov	r0, r5
    acf4:	f013 fc10 	bl	1e518 <net_buf_simple_add_mem>
    acf8:	4622      	mov	r2, r4
    acfa:	4640      	mov	r0, r8
    acfc:	2300      	movs	r3, #0
    acfe:	2105      	movs	r1, #5
}
    ad00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad04:	f7ff bf7a 	b.w	abfc <bt_l2cap_send_cb>

0000ad08 <l2cap_chan_le_send>:
{
    ad08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad0c:	4607      	mov	r7, r0
    ad0e:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    ad10:	3060      	adds	r0, #96	; 0x60
    ad12:	2100      	movs	r1, #0
    ad14:	4616      	mov	r6, r2
    ad16:	f021 fb59 	bl	2c3cc <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    ad1a:	2800      	cmp	r0, #0
    ad1c:	d169      	bne.n	adf2 <l2cap_chan_le_send+0xea>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    ad1e:	89a3      	ldrh	r3, [r4, #12]
    ad20:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
    ad24:	4433      	add	r3, r6
    ad26:	4293      	cmp	r3, r2
    ad28:	f104 0908 	add.w	r9, r4, #8
    ad2c:	d820      	bhi.n	ad70 <l2cap_chan_le_send+0x68>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    ad2e:	4648      	mov	r0, r9
    ad30:	f013 fc54 	bl	1e5dc <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    ad34:	f106 0308 	add.w	r3, r6, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    ad38:	b29b      	uxth	r3, r3
    ad3a:	4298      	cmp	r0, r3
    ad3c:	d318      	bcc.n	ad70 <l2cap_chan_le_send+0x68>
    ad3e:	6823      	ldr	r3, [r4, #0]
    ad40:	b9b3      	cbnz	r3, ad70 <l2cap_chan_le_send+0x68>
		if (sdu_hdr_len) {
    ad42:	b136      	cbz	r6, ad52 <l2cap_chan_le_send+0x4a>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    ad44:	4620      	mov	r0, r4
    ad46:	f7ff fde7 	bl	a918 <net_buf_frags_len>
    ad4a:	b281      	uxth	r1, r0
    ad4c:	4648      	mov	r0, r9
    ad4e:	f013 fc1c 	bl	1e58a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    ad52:	4620      	mov	r0, r4
    ad54:	f013 fbaa 	bl	1e4ac <net_buf_ref>
    ad58:	4605      	mov	r5, r0
	if (!ch->chan.conn) {
    ad5a:	6838      	ldr	r0, [r7, #0]
    ad5c:	2800      	cmp	r0, #0
    ad5e:	d13f      	bne.n	ade0 <l2cap_chan_le_send+0xd8>
		net_buf_unref(buf);
    ad60:	4628      	mov	r0, r5
    ad62:	f013 fb75 	bl	1e450 <net_buf_unref>
		return -ECONNRESET;
    ad66:	f06f 0635 	mvn.w	r6, #53	; 0x35
}
    ad6a:	4630      	mov	r0, r6
    ad6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ad70:	79a0      	ldrb	r0, [r4, #6]
    ad72:	f013 faa9 	bl	1e2c8 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    ad76:	2100      	movs	r1, #0
    ad78:	f013 fb3a 	bl	1e3f0 <net_buf_alloc_fixed>
	if (seg) {
    ad7c:	4605      	mov	r5, r0
    ad7e:	b340      	cbz	r0, add2 <l2cap_chan_le_send+0xca>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    ad80:	2108      	movs	r1, #8
    ad82:	4408      	add	r0, r1
    ad84:	f013 fb53 	bl	1e42e <net_buf_simple_reserve>
    ad88:	f105 0808 	add.w	r8, r5, #8
	if (sdu_hdr_len) {
    ad8c:	b136      	cbz	r6, ad9c <l2cap_chan_le_send+0x94>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    ad8e:	4620      	mov	r0, r4
    ad90:	f7ff fdc2 	bl	a918 <net_buf_frags_len>
    ad94:	b281      	uxth	r1, r0
    ad96:	4640      	mov	r0, r8
    ad98:	f013 fbcf 	bl	1e53a <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    ad9c:	4640      	mov	r0, r8
    ad9e:	f013 fc21 	bl	1e5e4 <net_buf_simple_tailroom>
    ada2:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
    ada6:	1b89      	subs	r1, r1, r6
    ada8:	4288      	cmp	r0, r1
    adaa:	d217      	bcs.n	addc <l2cap_chan_le_send+0xd4>
    adac:	4640      	mov	r0, r8
    adae:	f013 fc19 	bl	1e5e4 <net_buf_simple_tailroom>
    adb2:	b280      	uxth	r0, r0
	len = min(buf->len, len);
    adb4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	net_buf_add_mem(seg, buf->data, len);
    adb8:	68a1      	ldr	r1, [r4, #8]
    adba:	4582      	cmp	sl, r0
    adbc:	bf28      	it	cs
    adbe:	4682      	movcs	sl, r0
    adc0:	4652      	mov	r2, sl
    adc2:	4640      	mov	r0, r8
    adc4:	f013 fba8 	bl	1e518 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    adc8:	4651      	mov	r1, sl
    adca:	4648      	mov	r0, r9
    adcc:	f013 fbee 	bl	1e5ac <net_buf_simple_pull>
    add0:	e7c3      	b.n	ad5a <l2cap_chan_le_send+0x52>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    add2:	2104      	movs	r1, #4
    add4:	f7ff fc82 	bl	a6dc <bt_conn_create_pdu>
    add8:	4605      	mov	r5, r0
    adda:	e7d5      	b.n	ad88 <l2cap_chan_le_send+0x80>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    addc:	b288      	uxth	r0, r1
    adde:	e7e9      	b.n	adb4 <l2cap_chan_le_send+0xac>
	len = buf->len - sdu_hdr_len;
    ade0:	89ab      	ldrh	r3, [r5, #12]
    ade2:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
    ade6:	1b9e      	subs	r6, r3, r6
    ade8:	462a      	mov	r2, r5
    adea:	2300      	movs	r3, #0
    adec:	f7ff ff06 	bl	abfc <bt_l2cap_send_cb>
    adf0:	e7bb      	b.n	ad6a <l2cap_chan_le_send+0x62>
		return -EAGAIN;
    adf2:	f06f 060a 	mvn.w	r6, #10
    adf6:	e7b8      	b.n	ad6a <l2cap_chan_le_send+0x62>

0000adf8 <l2cap_chan_le_send_sdu>:
{
    adf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	total_len = net_buf_frags_len(*buf) + sent;
    adfc:	680c      	ldr	r4, [r1, #0]
{
    adfe:	9201      	str	r2, [sp, #4]
    ae00:	4606      	mov	r6, r0
	total_len = net_buf_frags_len(*buf) + sent;
    ae02:	4620      	mov	r0, r4
{
    ae04:	460f      	mov	r7, r1
	total_len = net_buf_frags_len(*buf) + sent;
    ae06:	f7ff fd87 	bl	a918 <net_buf_frags_len>
    ae0a:	9b01      	ldr	r3, [sp, #4]
	if (total_len > ch->tx.mtu) {
    ae0c:	f8b6 205a 	ldrh.w	r2, [r6, #90]	; 0x5a
	total_len = net_buf_frags_len(*buf) + sent;
    ae10:	eb03 0800 	add.w	r8, r3, r0
	if (total_len > ch->tx.mtu) {
    ae14:	4542      	cmp	r2, r8
    ae16:	db36      	blt.n	ae86 <l2cap_chan_le_send_sdu+0x8e>
	if (!frag->len && frag->frags) {
    ae18:	89a2      	ldrh	r2, [r4, #12]
    ae1a:	b91a      	cbnz	r2, ae24 <l2cap_chan_le_send_sdu+0x2c>
    ae1c:	6822      	ldr	r2, [r4, #0]
    ae1e:	2a00      	cmp	r2, #0
    ae20:	bf18      	it	ne
    ae22:	4614      	movne	r4, r2
	if (!sent) {
    ae24:	b9b3      	cbnz	r3, ae54 <l2cap_chan_le_send_sdu+0x5c>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    ae26:	2202      	movs	r2, #2
    ae28:	4621      	mov	r1, r4
    ae2a:	4630      	mov	r0, r6
    ae2c:	f7ff ff6c 	bl	ad08 <l2cap_chan_le_send>
		if (ret < 0) {
    ae30:	1e05      	subs	r5, r0, #0
    ae32:	da0e      	bge.n	ae52 <l2cap_chan_le_send_sdu+0x5a>
			if (ret == -EAGAIN) {
    ae34:	f115 0f0b 	cmn.w	r5, #11
    ae38:	d106      	bne.n	ae48 <l2cap_chan_le_send_sdu+0x50>
				memcpy(net_buf_user_data(frag), &sent,
    ae3a:	2204      	movs	r2, #4
    ae3c:	eb0d 0102 	add.w	r1, sp, r2
    ae40:	f104 0014 	add.w	r0, r4, #20
    ae44:	f7fb f820 	bl	5e88 <memcpy>
			*buf = frag;
    ae48:	603c      	str	r4, [r7, #0]
}
    ae4a:	4628      	mov	r0, r5
    ae4c:	b002      	add	sp, #8
    ae4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = ret;
    ae52:	9501      	str	r5, [sp, #4]
	if (!frag->len && frag->frags) {
    ae54:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
    ae56:	9b01      	ldr	r3, [sp, #4]
    ae58:	4543      	cmp	r3, r8
    ae5a:	db03      	blt.n	ae64 <l2cap_chan_le_send_sdu+0x6c>
	net_buf_unref(frag);
    ae5c:	4620      	mov	r0, r4
    ae5e:	f013 faf7 	bl	1e450 <net_buf_unref>
	return ret;
    ae62:	e7f2      	b.n	ae4a <l2cap_chan_le_send_sdu+0x52>
		if (!frag->len) {
    ae64:	89a0      	ldrh	r0, [r4, #12]
    ae66:	b918      	cbnz	r0, ae70 <l2cap_chan_le_send_sdu+0x78>
			frag = net_buf_frag_del(NULL, frag);
    ae68:	4621      	mov	r1, r4
    ae6a:	f013 fb43 	bl	1e4f4 <net_buf_frag_del>
    ae6e:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
    ae70:	2200      	movs	r2, #0
    ae72:	4621      	mov	r1, r4
    ae74:	4630      	mov	r0, r6
    ae76:	f7ff ff47 	bl	ad08 <l2cap_chan_le_send>
		if (ret < 0) {
    ae7a:	1e05      	subs	r5, r0, #0
    ae7c:	dbda      	blt.n	ae34 <l2cap_chan_le_send_sdu+0x3c>
	for (ret = 0; sent < total_len; sent += ret) {
    ae7e:	9b01      	ldr	r3, [sp, #4]
    ae80:	442b      	add	r3, r5
    ae82:	9301      	str	r3, [sp, #4]
    ae84:	e7e7      	b.n	ae56 <l2cap_chan_le_send_sdu+0x5e>
		return -EMSGSIZE;
    ae86:	f06f 0523 	mvn.w	r5, #35	; 0x23
    ae8a:	e7de      	b.n	ae4a <l2cap_chan_le_send_sdu+0x52>

0000ae8c <l2cap_chan_send_credits.isra.13>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    ae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae90:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    ae92:	428e      	cmp	r6, r1
    ae94:	bf28      	it	cs
    ae96:	460e      	movcs	r6, r1
    ae98:	4605      	mov	r5, r0
	if (credits > chan->rx.init_credits) {
    ae9a:	4634      	mov	r4, r6
	while (credits--) {
    ae9c:	f64f 77ff 	movw	r7, #65535	; 0xffff
		k_sem_give(&chan->rx.credits);
    aea0:	f100 0840 	add.w	r8, r0, #64	; 0x40
	while (credits--) {
    aea4:	3c01      	subs	r4, #1
    aea6:	b2a4      	uxth	r4, r4
    aea8:	42bc      	cmp	r4, r7
    aeaa:	d116      	bne.n	aeda <l2cap_chan_send_credits.isra.13+0x4e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    aeac:	f7ff fd3c 	bl	a928 <get_ident>
    aeb0:	2204      	movs	r2, #4
    aeb2:	4601      	mov	r1, r0
    aeb4:	2016      	movs	r0, #22
    aeb6:	f7ff fe0f 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
	ev = net_buf_add(buf, sizeof(*ev));
    aeba:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    aebc:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    aebe:	3008      	adds	r0, #8
    aec0:	f013 fb24 	bl	1e50c <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    aec4:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    aec6:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    aec8:	8046      	strh	r6, [r0, #2]
    aeca:	4622      	mov	r2, r4
    aecc:	6828      	ldr	r0, [r5, #0]
    aece:	2300      	movs	r3, #0
    aed0:	2105      	movs	r1, #5
}
    aed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aed6:	f7ff be91 	b.w	abfc <bt_l2cap_send_cb>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    aeda:	4640      	mov	r0, r8
    aedc:	f021 fa4f 	bl	2c37e <_impl_k_sem_give>
    aee0:	e7e0      	b.n	aea4 <l2cap_chan_send_credits.isra.13+0x18>

0000aee2 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    aee2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    aee4:	b108      	cbz	r0, aeea <bt_l2cap_le_lookup_tx_cid+0x8>
    aee6:	3808      	subs	r0, #8
    aee8:	b900      	cbnz	r0, aeec <bt_l2cap_le_lookup_tx_cid+0xa>
}
    aeea:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    aeec:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    aef0:	428b      	cmp	r3, r1
    aef2:	d0fa      	beq.n	aeea <bt_l2cap_le_lookup_tx_cid+0x8>
    aef4:	6880      	ldr	r0, [r0, #8]
    aef6:	e7f5      	b.n	aee4 <bt_l2cap_le_lookup_tx_cid+0x2>

0000aef8 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    aef8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    aefa:	b108      	cbz	r0, af00 <bt_l2cap_le_lookup_rx_cid+0x8>
    aefc:	3808      	subs	r0, #8
    aefe:	b900      	cbnz	r0, af02 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    af00:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    af02:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    af04:	428b      	cmp	r3, r1
    af06:	d0fb      	beq.n	af00 <bt_l2cap_le_lookup_rx_cid+0x8>
    af08:	6880      	ldr	r0, [r0, #8]
    af0a:	e7f6      	b.n	aefa <bt_l2cap_le_lookup_rx_cid+0x2>

0000af0c <l2cap_chan_add>:
{
    af0c:	b570      	push	{r4, r5, r6, lr}
    af0e:	4605      	mov	r5, r0
    af10:	4616      	mov	r6, r2
	if (ch && ch->rx.cid > 0) {
    af12:	460c      	mov	r4, r1
    af14:	b109      	cbz	r1, af1a <l2cap_chan_add+0xe>
    af16:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
    af18:	b93b      	cbnz	r3, af2a <l2cap_chan_add+0x1e>
    af1a:	2240      	movs	r2, #64	; 0x40
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    af1c:	b1dc      	cbz	r4, af56 <l2cap_chan_add+0x4a>
    af1e:	4611      	mov	r1, r2
    af20:	4628      	mov	r0, r5
    af22:	f7ff ffe9 	bl	aef8 <bt_l2cap_le_lookup_rx_cid>
    af26:	b9b0      	cbnz	r0, af56 <l2cap_chan_add+0x4a>
			ch->rx.cid = cid;
    af28:	8722      	strh	r2, [r4, #56]	; 0x38
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    af2a:	4919      	ldr	r1, [pc, #100]	; (af90 <l2cap_chan_add+0x84>)
    af2c:	f104 0010 	add.w	r0, r4, #16
    af30:	f021 fbee 	bl	2c710 <k_delayed_work_init>
	sys_slist_append(&conn->channels, &chan->node);
    af34:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    af38:	f104 0108 	add.w	r1, r4, #8
    af3c:	f7ff fcd2 	bl	a8e4 <sys_slist_append>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    af40:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	chan->conn = conn;
    af42:	6025      	str	r5, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    af44:	3b40      	subs	r3, #64	; 0x40
    af46:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    af48:	60e6      	str	r6, [r4, #12]
    af4a:	f04f 0001 	mov.w	r0, #1
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    af4e:	d81d      	bhi.n	af8c <l2cap_chan_add+0x80>
	chan->state = state;
    af50:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    af54:	e01a      	b.n	af8c <l2cap_chan_add+0x80>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    af56:	3201      	adds	r2, #1
    af58:	b292      	uxth	r2, r2
    af5a:	2a80      	cmp	r2, #128	; 0x80
    af5c:	d1de      	bne.n	af1c <l2cap_chan_add+0x10>
		BT_ERR("Unable to allocate L2CAP CID");
    af5e:	4b0d      	ldr	r3, [pc, #52]	; (af94 <l2cap_chan_add+0x88>)
    af60:	6818      	ldr	r0, [r3, #0]
    af62:	f010 0007 	ands.w	r0, r0, #7
    af66:	d011      	beq.n	af8c <l2cap_chan_add+0x80>
    af68:	2301      	movs	r3, #1
    af6a:	f04f 0200 	mov.w	r2, #0
    af6e:	f363 0202 	bfi	r2, r3, #0, #3
    af72:	4909      	ldr	r1, [pc, #36]	; (af98 <l2cap_chan_add+0x8c>)
    af74:	4b09      	ldr	r3, [pc, #36]	; (af9c <l2cap_chan_add+0x90>)
    af76:	480a      	ldr	r0, [pc, #40]	; (afa0 <l2cap_chan_add+0x94>)
    af78:	1a5b      	subs	r3, r3, r1
    af7a:	08db      	lsrs	r3, r3, #3
    af7c:	f36f 02c5 	bfc	r2, #3, #3
    af80:	f363 128f 	bfi	r2, r3, #6, #10
    af84:	4907      	ldr	r1, [pc, #28]	; (afa4 <l2cap_chan_add+0x98>)
    af86:	f7f6 fee7 	bl	1d58 <log_1>
    af8a:	2000      	movs	r0, #0
}
    af8c:	bd70      	pop	{r4, r5, r6, pc}
    af8e:	bf00      	nop
    af90:	0000ab69 	.word	0x0000ab69
    af94:	2000d754 	.word	0x2000d754
    af98:	0002cff8 	.word	0x0002cff8
    af9c:	0002d080 	.word	0x0002d080
    afa0:	0002f7e1 	.word	0x0002f7e1
    afa4:	0002f5bf 	.word	0x0002f5bf

0000afa8 <bt_l2cap_connected>:
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    afa8:	4b10      	ldr	r3, [pc, #64]	; (afec <bt_l2cap_connected+0x44>)
{
    afaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    afac:	681c      	ldr	r4, [r3, #0]
{
    afae:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    afb0:	b10c      	cbz	r4, afb6 <bt_l2cap_connected+0xe>
    afb2:	3c08      	subs	r4, #8
    afb4:	b90c      	cbnz	r4, afba <bt_l2cap_connected+0x12>
}
    afb6:	b003      	add	sp, #12
    afb8:	bd30      	pop	{r4, r5, pc}
		if (fchan->accept(conn, &chan) < 0) {
    afba:	6863      	ldr	r3, [r4, #4]
    afbc:	a901      	add	r1, sp, #4
    afbe:	4628      	mov	r0, r5
    afc0:	4798      	blx	r3
    afc2:	2800      	cmp	r0, #0
    afc4:	db0f      	blt.n	afe6 <bt_l2cap_connected+0x3e>
		ch = BT_L2CAP_LE_CHAN(chan);
    afc6:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    afc8:	8823      	ldrh	r3, [r4, #0]
    afca:	870b      	strh	r3, [r1, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    afcc:	f8a1 3058 	strh.w	r3, [r1, #88]	; 0x58
		if (!l2cap_chan_add(conn, chan, NULL)) {
    afd0:	2200      	movs	r2, #0
    afd2:	4628      	mov	r0, r5
    afd4:	f7ff ff9a 	bl	af0c <l2cap_chan_add>
    afd8:	2800      	cmp	r0, #0
    afda:	d0ec      	beq.n	afb6 <bt_l2cap_connected+0xe>
		if (chan->ops->connected) {
    afdc:	9801      	ldr	r0, [sp, #4]
    afde:	6843      	ldr	r3, [r0, #4]
    afe0:	681b      	ldr	r3, [r3, #0]
    afe2:	b103      	cbz	r3, afe6 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
    afe4:	4798      	blx	r3
    afe6:	68a4      	ldr	r4, [r4, #8]
    afe8:	e7e2      	b.n	afb0 <bt_l2cap_connected+0x8>
    afea:	bf00      	nop
    afec:	20000ba8 	.word	0x20000ba8

0000aff0 <bt_l2cap_server_register>:
	if (!server->accept) {
    aff0:	6843      	ldr	r3, [r0, #4]
{
    aff2:	b510      	push	{r4, lr}
    aff4:	4601      	mov	r1, r0
	if (!server->accept) {
    aff6:	b913      	cbnz	r3, affe <bt_l2cap_server_register+0xe>
		return -EINVAL;
    aff8:	f06f 0015 	mvn.w	r0, #21
}
    affc:	bd10      	pop	{r4, pc}
	if (server->psm) {
    affe:	8800      	ldrh	r0, [r0, #0]
    b000:	b140      	cbz	r0, b014 <bt_l2cap_server_register+0x24>
		if (server->psm < L2CAP_LE_PSM_FIXED_START ||
    b002:	1e43      	subs	r3, r0, #1
    b004:	2bfe      	cmp	r3, #254	; 0xfe
    b006:	d8f7      	bhi.n	aff8 <bt_l2cap_server_register+0x8>
		if (l2cap_server_lookup_psm(server->psm)) {
    b008:	f7ff fcb6 	bl	a978 <l2cap_server_lookup_psm>
    b00c:	b338      	cbz	r0, b05e <bt_l2cap_server_register+0x6e>
			return -EADDRINUSE;
    b00e:	f06f 002f 	mvn.w	r0, #47	; 0x2f
    b012:	e7f3      	b.n	affc <bt_l2cap_server_register+0xc>
		for (psm = L2CAP_LE_PSM_DYN_START;
    b014:	2480      	movs	r4, #128	; 0x80
			if (!l2cap_server_lookup_psm(psm)) {
    b016:	4620      	mov	r0, r4
    b018:	f7ff fcae 	bl	a978 <l2cap_server_lookup_psm>
    b01c:	b1f0      	cbz	r0, b05c <bt_l2cap_server_register+0x6c>
		     psm <= L2CAP_LE_PSM_DYN_END; psm++) {
    b01e:	3401      	adds	r4, #1
    b020:	b2a4      	uxth	r4, r4
		for (psm = L2CAP_LE_PSM_DYN_START;
    b022:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    b026:	d1f6      	bne.n	b016 <bt_l2cap_server_register+0x26>
			BT_WARN("No free dynamic PSMs available");
    b028:	4b13      	ldr	r3, [pc, #76]	; (b078 <bt_l2cap_server_register+0x88>)
    b02a:	681b      	ldr	r3, [r3, #0]
    b02c:	f003 0307 	and.w	r3, r3, #7
    b030:	2b01      	cmp	r3, #1
    b032:	d910      	bls.n	b056 <bt_l2cap_server_register+0x66>
    b034:	2302      	movs	r3, #2
    b036:	f04f 0200 	mov.w	r2, #0
    b03a:	f363 0202 	bfi	r2, r3, #0, #3
    b03e:	490f      	ldr	r1, [pc, #60]	; (b07c <bt_l2cap_server_register+0x8c>)
    b040:	4b0f      	ldr	r3, [pc, #60]	; (b080 <bt_l2cap_server_register+0x90>)
    b042:	4810      	ldr	r0, [pc, #64]	; (b084 <bt_l2cap_server_register+0x94>)
    b044:	1a5b      	subs	r3, r3, r1
    b046:	f36f 02c5 	bfc	r2, #3, #3
    b04a:	08db      	lsrs	r3, r3, #3
    b04c:	f363 128f 	bfi	r2, r3, #6, #10
    b050:	490d      	ldr	r1, [pc, #52]	; (b088 <bt_l2cap_server_register+0x98>)
    b052:	f7f6 fe81 	bl	1d58 <log_1>
			return -EADDRNOTAVAIL;
    b056:	f06f 0030 	mvn.w	r0, #48	; 0x30
    b05a:	e7cf      	b.n	affc <bt_l2cap_server_register+0xc>
		server->psm = psm;
    b05c:	800c      	strh	r4, [r1, #0]
	if (server->sec_level > BT_SECURITY_FIPS) {
    b05e:	788b      	ldrb	r3, [r1, #2]
    b060:	2b04      	cmp	r3, #4
    b062:	d8c9      	bhi.n	aff8 <bt_l2cap_server_register+0x8>
	} else if (server->sec_level < BT_SECURITY_LOW) {
    b064:	b90b      	cbnz	r3, b06a <bt_l2cap_server_register+0x7a>
		server->sec_level = BT_SECURITY_LOW;
    b066:	2301      	movs	r3, #1
    b068:	708b      	strb	r3, [r1, #2]
	sys_slist_append(&servers, &server->node);
    b06a:	4808      	ldr	r0, [pc, #32]	; (b08c <bt_l2cap_server_register+0x9c>)
    b06c:	3108      	adds	r1, #8
    b06e:	f7ff fc39 	bl	a8e4 <sys_slist_append>
	return 0;
    b072:	2000      	movs	r0, #0
    b074:	e7c2      	b.n	affc <bt_l2cap_server_register+0xc>
    b076:	bf00      	nop
    b078:	2000d754 	.word	0x2000d754
    b07c:	0002cff8 	.word	0x0002cff8
    b080:	0002d080 	.word	0x0002d080
    b084:	0002f793 	.word	0x0002f793
    b088:	0002f5f9 	.word	0x0002f5f9
    b08c:	20000bb0 	.word	0x20000bb0

0000b090 <bt_l2cap_update_conn_param>:
{
    b090:	b570      	push	{r4, r5, r6, lr}
    b092:	460c      	mov	r4, r1
    b094:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b096:	f7ff fc47 	bl	a928 <get_ident>
    b09a:	2208      	movs	r2, #8
    b09c:	4601      	mov	r1, r0
    b09e:	2012      	movs	r0, #18
    b0a0:	f7ff fd1a 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
	req = net_buf_add(buf, sizeof(*req));
    b0a4:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b0a6:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    b0a8:	4408      	add	r0, r1
    b0aa:	f013 fa2f 	bl	1e50c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    b0ae:	8823      	ldrh	r3, [r4, #0]
    b0b0:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    b0b2:	8863      	ldrh	r3, [r4, #2]
    b0b4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    b0b6:	88a3      	ldrh	r3, [r4, #4]
    b0b8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    b0ba:	88e3      	ldrh	r3, [r4, #6]
    b0bc:	80c3      	strh	r3, [r0, #6]
    b0be:	462a      	mov	r2, r5
    b0c0:	4630      	mov	r0, r6
    b0c2:	2300      	movs	r3, #0
    b0c4:	2105      	movs	r1, #5
    b0c6:	f7ff fd99 	bl	abfc <bt_l2cap_send_cb>
}
    b0ca:	2000      	movs	r0, #0
    b0cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b0d0 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    b0d0:	4801      	ldr	r0, [pc, #4]	; (b0d8 <bt_l2cap_init+0x8>)
    b0d2:	f7ff bd15 	b.w	ab00 <bt_l2cap_le_fixed_chan_register>
    b0d6:	bf00      	nop
    b0d8:	2000cdb8 	.word	0x2000cdb8

0000b0dc <bt_l2cap_chan_connect>:
	return l2cap_le_conn_req(ch);
}

int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
    b0dc:	b570      	push	{r4, r5, r6, lr}
    b0de:	460c      	mov	r4, r1
    b0e0:	4616      	mov	r6, r2
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    b0e2:	4605      	mov	r5, r0
    b0e4:	b318      	cbz	r0, b12e <bt_l2cap_chan_connect+0x52>
    b0e6:	7b43      	ldrb	r3, [r0, #13]
    b0e8:	2b04      	cmp	r3, #4
    b0ea:	d120      	bne.n	b12e <bt_l2cap_chan_connect+0x52>
		return -ENOTCONN;
	}

	if (!chan) {
    b0ec:	b911      	cbnz	r1, b0f4 <bt_l2cap_chan_connect+0x18>
		return -EINVAL;
    b0ee:	f06f 0015 	mvn.w	r0, #21
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
		chan->required_sec_level = BT_SECURITY_LOW;
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}
    b0f2:	bd70      	pop	{r4, r5, r6, pc}
	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    b0f4:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
    b0f8:	2b04      	cmp	r3, #4
    b0fa:	d8f8      	bhi.n	b0ee <bt_l2cap_chan_connect+0x12>
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    b0fc:	b913      	cbnz	r3, b104 <bt_l2cap_chan_connect+0x28>
		chan->required_sec_level = BT_SECURITY_LOW;
    b0fe:	2301      	movs	r3, #1
    b100:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
	if (psm < L2CAP_LE_PSM_FIXED_START || psm > L2CAP_LE_PSM_DYN_END) {
    b104:	1e73      	subs	r3, r6, #1
    b106:	2bfe      	cmp	r3, #254	; 0xfe
    b108:	d8f1      	bhi.n	b0ee <bt_l2cap_chan_connect+0x12>
	l2cap_chan_tx_init(ch);
    b10a:	4620      	mov	r0, r4
    b10c:	f7ff fc9f 	bl	aa4e <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    b110:	4620      	mov	r0, r4
    b112:	f7ff fc7b 	bl	aa0c <l2cap_chan_rx_init>
	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    b116:	4a09      	ldr	r2, [pc, #36]	; (b13c <bt_l2cap_chan_connect+0x60>)
    b118:	4621      	mov	r1, r4
    b11a:	4628      	mov	r0, r5
    b11c:	f7ff fef6 	bl	af0c <l2cap_chan_add>
    b120:	b140      	cbz	r0, b134 <bt_l2cap_chan_connect+0x58>
	ch->chan.psm = psm;
    b122:	8666      	strh	r6, [r4, #50]	; 0x32
	return l2cap_le_conn_req(ch);
    b124:	4620      	mov	r0, r4
}
    b126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return l2cap_le_conn_req(ch);
    b12a:	f7ff bd7d 	b.w	ac28 <l2cap_le_conn_req>
		return -ENOTCONN;
    b12e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b132:	e7de      	b.n	b0f2 <bt_l2cap_chan_connect+0x16>
		return -ENOMEM;
    b134:	f06f 000b 	mvn.w	r0, #11
    b138:	e7db      	b.n	b0f2 <bt_l2cap_chan_connect+0x16>
    b13a:	bf00      	nop
    b13c:	0000a9d9 	.word	0x0000a9d9

0000b140 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    b140:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    b142:	6803      	ldr	r3, [r0, #0]
{
    b144:	4604      	mov	r4, r0
	if (!conn) {
    b146:	b323      	cbz	r3, b192 <bt_l2cap_chan_disconnect+0x52>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    b148:	f7ff fbee 	bl	a928 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    b14c:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    b14e:	4601      	mov	r1, r0
    b150:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    b154:	2006      	movs	r0, #6
    b156:	f7ff fcbf 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    b15a:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    b15c:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    b15e:	3008      	adds	r0, #8
    b160:	f013 f9d4 	bl	1e50c <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    b164:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    b168:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    b16a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    b16c:	8043      	strh	r3, [r0, #2]
    b16e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    b172:	f104 0110 	add.w	r1, r4, #16
    b176:	4808      	ldr	r0, [pc, #32]	; (b198 <bt_l2cap_chan_disconnect+0x58>)
    b178:	f021 fb22 	bl	2c7c0 <k_delayed_work_submit_to_queue>
    b17c:	2300      	movs	r3, #0
    b17e:	6820      	ldr	r0, [r4, #0]
    b180:	462a      	mov	r2, r5
    b182:	2105      	movs	r1, #5
    b184:	f7ff fd3a 	bl	abfc <bt_l2cap_send_cb>
	chan->state = state;
    b188:	2304      	movs	r3, #4
    b18a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    b18e:	2000      	movs	r0, #0
}
    b190:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    b192:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b196:	e7fb      	b.n	b190 <bt_l2cap_chan_disconnect+0x50>
    b198:	200031d8 	.word	0x200031d8

0000b19c <l2cap_chan_le_recv_seg>:
{
    b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b19e:	460e      	mov	r6, r1
	len = net_buf_frags_len(chan->_sdu);
    b1a0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
{
    b1a4:	b085      	sub	sp, #20
	u16_t seg = 0;
    b1a6:	2300      	movs	r3, #0
{
    b1a8:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    b1aa:	4608      	mov	r0, r1
	u16_t seg = 0;
    b1ac:	f8ad 300e 	strh.w	r3, [sp, #14]
	len = net_buf_frags_len(chan->_sdu);
    b1b0:	f7ff fbb2 	bl	a918 <net_buf_frags_len>
	if (len) {
    b1b4:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    b1b6:	4605      	mov	r5, r0
	if (len) {
    b1b8:	b12b      	cbz	r3, b1c6 <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    b1ba:	2202      	movs	r2, #2
    b1bc:	3114      	adds	r1, #20
    b1be:	f10d 000e 	add.w	r0, sp, #14
    b1c2:	f7fa fe61 	bl	5e88 <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    b1c6:	89b3      	ldrh	r3, [r6, #12]
    b1c8:	fa13 f585 	uxtah	r5, r3, r5
    b1cc:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    b1d0:	429d      	cmp	r5, r3
    b1d2:	dd19      	ble.n	b208 <l2cap_chan_le_recv_seg+0x6c>
		BT_ERR("SDU length mismatch");
    b1d4:	4b4d      	ldr	r3, [pc, #308]	; (b30c <l2cap_chan_le_recv_seg+0x170>)
    b1d6:	681b      	ldr	r3, [r3, #0]
    b1d8:	0759      	lsls	r1, r3, #29
    b1da:	d010      	beq.n	b1fe <l2cap_chan_le_recv_seg+0x62>
    b1dc:	2301      	movs	r3, #1
    b1de:	f04f 0200 	mov.w	r2, #0
    b1e2:	f363 0202 	bfi	r2, r3, #0, #3
    b1e6:	494a      	ldr	r1, [pc, #296]	; (b310 <l2cap_chan_le_recv_seg+0x174>)
    b1e8:	4b4a      	ldr	r3, [pc, #296]	; (b314 <l2cap_chan_le_recv_seg+0x178>)
    b1ea:	484b      	ldr	r0, [pc, #300]	; (b318 <l2cap_chan_le_recv_seg+0x17c>)
    b1ec:	1a5b      	subs	r3, r3, r1
    b1ee:	f36f 02c5 	bfc	r2, #3, #3
    b1f2:	08db      	lsrs	r3, r3, #3
    b1f4:	4949      	ldr	r1, [pc, #292]	; (b31c <l2cap_chan_le_recv_seg+0x180>)
    b1f6:	f363 128f 	bfi	r2, r3, #6, #10
    b1fa:	f7f6 fdad 	bl	1d58 <log_1>
		bt_l2cap_chan_disconnect(&chan->chan);
    b1fe:	4620      	mov	r0, r4
    b200:	f7ff ff9e 	bl	b140 <bt_l2cap_chan_disconnect>
}
    b204:	b005      	add	sp, #20
    b206:	bdf0      	pop	{r4, r5, r6, r7, pc}
	seg++;
    b208:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	return (void *)buf->user_data;
    b20c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b210:	a904      	add	r1, sp, #16
    b212:	3301      	adds	r3, #1
    b214:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    b218:	2202      	movs	r2, #2
    b21a:	3014      	adds	r0, #20
    b21c:	f7fa fe34 	bl	5e88 <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    b220:	4b3f      	ldr	r3, [pc, #252]	; (b320 <l2cap_chan_le_recv_seg+0x184>)
    b222:	89b1      	ldrh	r1, [r6, #12]
    b224:	9300      	str	r3, [sp, #0]
    b226:	9401      	str	r4, [sp, #4]
    b228:	2300      	movs	r3, #0
    b22a:	68b2      	ldr	r2, [r6, #8]
    b22c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b230:	f013 f9e0 	bl	1e5f4 <net_buf_append_bytes>
	if (len != buf->len) {
    b234:	89b3      	ldrh	r3, [r6, #12]
    b236:	b280      	uxth	r0, r0
    b238:	4283      	cmp	r3, r0
    b23a:	d013      	beq.n	b264 <l2cap_chan_le_recv_seg+0xc8>
		BT_ERR("Unable to store SDU");
    b23c:	4b33      	ldr	r3, [pc, #204]	; (b30c <l2cap_chan_le_recv_seg+0x170>)
    b23e:	681b      	ldr	r3, [r3, #0]
    b240:	075a      	lsls	r2, r3, #29
    b242:	d0dc      	beq.n	b1fe <l2cap_chan_le_recv_seg+0x62>
    b244:	2301      	movs	r3, #1
    b246:	f04f 0200 	mov.w	r2, #0
    b24a:	f363 0202 	bfi	r2, r3, #0, #3
    b24e:	4930      	ldr	r1, [pc, #192]	; (b310 <l2cap_chan_le_recv_seg+0x174>)
    b250:	4b30      	ldr	r3, [pc, #192]	; (b314 <l2cap_chan_le_recv_seg+0x178>)
    b252:	4834      	ldr	r0, [pc, #208]	; (b324 <l2cap_chan_le_recv_seg+0x188>)
    b254:	1a5b      	subs	r3, r3, r1
    b256:	f36f 02c5 	bfc	r2, #3, #3
    b25a:	08db      	lsrs	r3, r3, #3
    b25c:	f363 128f 	bfi	r2, r3, #6, #10
    b260:	492e      	ldr	r1, [pc, #184]	; (b31c <l2cap_chan_le_recv_seg+0x180>)
    b262:	e7ca      	b.n	b1fa <l2cap_chan_le_recv_seg+0x5e>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    b264:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    b268:	4638      	mov	r0, r7
    b26a:	f7ff fb55 	bl	a918 <net_buf_frags_len>
    b26e:	f8b4 5090 	ldrh.w	r5, [r4, #144]	; 0x90
    b272:	42a8      	cmp	r0, r5
    b274:	d218      	bcs.n	b2a8 <l2cap_chan_le_recv_seg+0x10c>
		if (!k_sem_count_get(&chan->rx.credits) &&
    b276:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b278:	2b00      	cmp	r3, #0
    b27a:	d1c3      	bne.n	b204 <l2cap_chan_le_recv_seg+0x68>
    b27c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b27e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b282:	429a      	cmp	r2, r3
    b284:	d1be      	bne.n	b204 <l2cap_chan_le_recv_seg+0x68>
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    b286:	4630      	mov	r0, r6
    b288:	f7ff fb46 	bl	a918 <net_buf_frags_len>
    b28c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    b28e:	440d      	add	r5, r1
    b290:	3d01      	subs	r5, #1
    b292:	1a28      	subs	r0, r5, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    b294:	fbb0 f1f1 	udiv	r1, r0, r1
	if (credits <= 0) {
    b298:	b20b      	sxth	r3, r1
    b29a:	2b00      	cmp	r3, #0
    b29c:	ddb2      	ble.n	b204 <l2cap_chan_le_recv_seg+0x68>
	l2cap_chan_send_credits(chan, buf, credits);
    b29e:	b289      	uxth	r1, r1
    b2a0:	4620      	mov	r0, r4
    b2a2:	f7ff fdf3 	bl	ae8c <l2cap_chan_send_credits.isra.13>
    b2a6:	e7ad      	b.n	b204 <l2cap_chan_le_recv_seg+0x68>
	err = chan->chan.ops->recv(&chan->chan, buf);
    b2a8:	6863      	ldr	r3, [r4, #4]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    b2aa:	f8bd 600e 	ldrh.w	r6, [sp, #14]
	err = chan->chan.ops->recv(&chan->chan, buf);
    b2ae:	691b      	ldr	r3, [r3, #16]
	chan->_sdu = NULL;
    b2b0:	2500      	movs	r5, #0
    b2b2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
	chan->_sdu_len = 0;
    b2b6:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
	err = chan->chan.ops->recv(&chan->chan, buf);
    b2ba:	4639      	mov	r1, r7
    b2bc:	4620      	mov	r0, r4
    b2be:	4798      	blx	r3
	if (err < 0) {
    b2c0:	1e02      	subs	r2, r0, #0
    b2c2:	da1e      	bge.n	b302 <l2cap_chan_le_recv_seg+0x166>
		if (err != -EINPROGRESS) {
    b2c4:	f112 0f44 	cmn.w	r2, #68	; 0x44
    b2c8:	d09c      	beq.n	b204 <l2cap_chan_le_recv_seg+0x68>
			BT_ERR("err %d", err);
    b2ca:	4b10      	ldr	r3, [pc, #64]	; (b30c <l2cap_chan_le_recv_seg+0x170>)
    b2cc:	681b      	ldr	r3, [r3, #0]
    b2ce:	075b      	lsls	r3, r3, #29
    b2d0:	d010      	beq.n	b2f4 <l2cap_chan_le_recv_seg+0x158>
    b2d2:	2101      	movs	r1, #1
    b2d4:	f04f 0300 	mov.w	r3, #0
    b2d8:	f361 0302 	bfi	r3, r1, #0, #3
    b2dc:	480c      	ldr	r0, [pc, #48]	; (b310 <l2cap_chan_le_recv_seg+0x174>)
    b2de:	490d      	ldr	r1, [pc, #52]	; (b314 <l2cap_chan_le_recv_seg+0x178>)
    b2e0:	1a09      	subs	r1, r1, r0
    b2e2:	08c9      	lsrs	r1, r1, #3
    b2e4:	f365 03c5 	bfi	r3, r5, #3, #3
    b2e8:	f361 138f 	bfi	r3, r1, #6, #10
    b2ec:	480e      	ldr	r0, [pc, #56]	; (b328 <l2cap_chan_le_recv_seg+0x18c>)
    b2ee:	490f      	ldr	r1, [pc, #60]	; (b32c <l2cap_chan_le_recv_seg+0x190>)
    b2f0:	f7f6 fd46 	bl	1d80 <log_2>
			bt_l2cap_chan_disconnect(&chan->chan);
    b2f4:	4620      	mov	r0, r4
    b2f6:	f7ff ff23 	bl	b140 <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    b2fa:	4638      	mov	r0, r7
    b2fc:	f013 f8a8 	bl	1e450 <net_buf_unref>
    b300:	e780      	b.n	b204 <l2cap_chan_le_recv_seg+0x68>
	l2cap_chan_send_credits(chan, buf, seg);
    b302:	4631      	mov	r1, r6
    b304:	4620      	mov	r0, r4
    b306:	f7ff fdc1 	bl	ae8c <l2cap_chan_send_credits.isra.13>
    b30a:	e7f6      	b.n	b2fa <l2cap_chan_le_recv_seg+0x15e>
    b30c:	2000d754 	.word	0x2000d754
    b310:	0002cff8 	.word	0x0002cff8
    b314:	0002d080 	.word	0x0002d080
    b318:	0002f802 	.word	0x0002f802
    b31c:	0002f675 	.word	0x0002f675
    b320:	0000a9cf 	.word	0x0000a9cf
    b324:	0002f81a 	.word	0x0002f81a
    b328:	0002f832 	.word	0x0002f832
    b32c:	0002f65e 	.word	0x0002f65e

0000b330 <bt_l2cap_recv>:
{
    b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    b332:	898b      	ldrh	r3, [r1, #12]
    b334:	2b03      	cmp	r3, #3
{
    b336:	4604      	mov	r4, r0
    b338:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b33a:	d819      	bhi.n	b370 <bt_l2cap_recv+0x40>
		BT_ERR("Too small L2CAP PDU received");
    b33c:	4b67      	ldr	r3, [pc, #412]	; (b4dc <bt_l2cap_recv+0x1ac>)
    b33e:	681b      	ldr	r3, [r3, #0]
    b340:	075c      	lsls	r4, r3, #29
    b342:	d010      	beq.n	b366 <bt_l2cap_recv+0x36>
    b344:	2301      	movs	r3, #1
    b346:	f04f 0200 	mov.w	r2, #0
    b34a:	f363 0202 	bfi	r2, r3, #0, #3
    b34e:	4964      	ldr	r1, [pc, #400]	; (b4e0 <bt_l2cap_recv+0x1b0>)
    b350:	4b64      	ldr	r3, [pc, #400]	; (b4e4 <bt_l2cap_recv+0x1b4>)
    b352:	4865      	ldr	r0, [pc, #404]	; (b4e8 <bt_l2cap_recv+0x1b8>)
    b354:	1a5b      	subs	r3, r3, r1
    b356:	f36f 02c5 	bfc	r2, #3, #3
    b35a:	08db      	lsrs	r3, r3, #3
    b35c:	f363 128f 	bfi	r2, r3, #6, #10
    b360:	4962      	ldr	r1, [pc, #392]	; (b4ec <bt_l2cap_recv+0x1bc>)
    b362:	f7f6 fcf9 	bl	1d58 <log_1>
		net_buf_unref(buf);
    b366:	4628      	mov	r0, r5
}
    b368:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    b36c:	f013 b870 	b.w	1e450 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    b370:	460e      	mov	r6, r1
	net_buf_pull(buf, sizeof(*hdr));
    b372:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    b374:	f856 3f08 	ldr.w	r3, [r6, #8]!
    b378:	885f      	ldrh	r7, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    b37a:	4630      	mov	r0, r6
    b37c:	f013 f916 	bl	1e5ac <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    b380:	4620      	mov	r0, r4
    b382:	4639      	mov	r1, r7
    b384:	f7ff fdb8 	bl	aef8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b388:	4604      	mov	r4, r0
    b38a:	b9c0      	cbnz	r0, b3be <bt_l2cap_recv+0x8e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    b38c:	4b53      	ldr	r3, [pc, #332]	; (b4dc <bt_l2cap_recv+0x1ac>)
    b38e:	681b      	ldr	r3, [r3, #0]
    b390:	f003 0307 	and.w	r3, r3, #7
    b394:	2b01      	cmp	r3, #1
    b396:	d9e6      	bls.n	b366 <bt_l2cap_recv+0x36>
    b398:	2202      	movs	r2, #2
    b39a:	f04f 0300 	mov.w	r3, #0
    b39e:	f362 0302 	bfi	r3, r2, #0, #3
    b3a2:	494f      	ldr	r1, [pc, #316]	; (b4e0 <bt_l2cap_recv+0x1b0>)
    b3a4:	4a4f      	ldr	r2, [pc, #316]	; (b4e4 <bt_l2cap_recv+0x1b4>)
    b3a6:	1a52      	subs	r2, r2, r1
    b3a8:	f360 03c5 	bfi	r3, r0, #3, #3
    b3ac:	08d2      	lsrs	r2, r2, #3
    b3ae:	f362 138f 	bfi	r3, r2, #6, #10
    b3b2:	494e      	ldr	r1, [pc, #312]	; (b4ec <bt_l2cap_recv+0x1bc>)
    b3b4:	484e      	ldr	r0, [pc, #312]	; (b4f0 <bt_l2cap_recv+0x1c0>)
    b3b6:	463a      	mov	r2, r7
    b3b8:	f7f6 fce2 	bl	1d80 <log_2>
    b3bc:	e7d3      	b.n	b366 <bt_l2cap_recv+0x36>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b3be:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    b3c0:	3b40      	subs	r3, #64	; 0x40
    b3c2:	2b3f      	cmp	r3, #63	; 0x3f
    b3c4:	f200 8085 	bhi.w	b4d2 <bt_l2cap_recv+0x1a2>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    b3c8:	2100      	movs	r1, #0
    b3ca:	3040      	adds	r0, #64	; 0x40
    b3cc:	f020 fffe 	bl	2c3cc <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    b3d0:	b1c0      	cbz	r0, b404 <bt_l2cap_recv+0xd4>
		BT_ERR("No credits to receive packet");
    b3d2:	4b42      	ldr	r3, [pc, #264]	; (b4dc <bt_l2cap_recv+0x1ac>)
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	0758      	lsls	r0, r3, #29
    b3d8:	d010      	beq.n	b3fc <bt_l2cap_recv+0xcc>
    b3da:	2301      	movs	r3, #1
    b3dc:	f04f 0200 	mov.w	r2, #0
    b3e0:	f363 0202 	bfi	r2, r3, #0, #3
    b3e4:	493e      	ldr	r1, [pc, #248]	; (b4e0 <bt_l2cap_recv+0x1b0>)
    b3e6:	4b3f      	ldr	r3, [pc, #252]	; (b4e4 <bt_l2cap_recv+0x1b4>)
    b3e8:	4842      	ldr	r0, [pc, #264]	; (b4f4 <bt_l2cap_recv+0x1c4>)
    b3ea:	1a5b      	subs	r3, r3, r1
    b3ec:	f36f 02c5 	bfc	r2, #3, #3
    b3f0:	08db      	lsrs	r3, r3, #3
    b3f2:	4941      	ldr	r1, [pc, #260]	; (b4f8 <bt_l2cap_recv+0x1c8>)
    b3f4:	f363 128f 	bfi	r2, r3, #6, #10
			BT_ERR("Unable to allocate buffer for SDU");
    b3f8:	f7f6 fcae 	bl	1d58 <log_1>
			bt_l2cap_chan_disconnect(&chan->chan);
    b3fc:	4620      	mov	r0, r4
    b3fe:	f7ff fe9f 	bl	b140 <bt_l2cap_chan_disconnect>
    b402:	e7b0      	b.n	b366 <bt_l2cap_recv+0x36>
	if (chan->_sdu) {
    b404:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    b408:	b127      	cbz	r7, b414 <bt_l2cap_recv+0xe4>
		l2cap_chan_le_recv_seg(chan, buf);
    b40a:	4629      	mov	r1, r5
    b40c:	4620      	mov	r0, r4
    b40e:	f7ff fec5 	bl	b19c <l2cap_chan_le_recv_seg>
    b412:	e7a8      	b.n	b366 <bt_l2cap_recv+0x36>
	sdu_len = net_buf_pull_le16(buf);
    b414:	4630      	mov	r0, r6
    b416:	f013 f8d9 	bl	1e5cc <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    b41a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    b41c:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    b41e:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    b420:	d213      	bcs.n	b44a <bt_l2cap_recv+0x11a>
		BT_ERR("Invalid SDU length");
    b422:	4b2e      	ldr	r3, [pc, #184]	; (b4dc <bt_l2cap_recv+0x1ac>)
    b424:	681b      	ldr	r3, [r3, #0]
    b426:	0759      	lsls	r1, r3, #29
    b428:	d0e8      	beq.n	b3fc <bt_l2cap_recv+0xcc>
    b42a:	2301      	movs	r3, #1
    b42c:	f04f 0200 	mov.w	r2, #0
    b430:	f363 0202 	bfi	r2, r3, #0, #3
    b434:	492a      	ldr	r1, [pc, #168]	; (b4e0 <bt_l2cap_recv+0x1b0>)
    b436:	4b2b      	ldr	r3, [pc, #172]	; (b4e4 <bt_l2cap_recv+0x1b4>)
    b438:	4830      	ldr	r0, [pc, #192]	; (b4fc <bt_l2cap_recv+0x1cc>)
    b43a:	1a5b      	subs	r3, r3, r1
    b43c:	f367 02c5 	bfi	r2, r7, #3, #3
    b440:	08db      	lsrs	r3, r3, #3
    b442:	f363 128f 	bfi	r2, r3, #6, #10
    b446:	492c      	ldr	r1, [pc, #176]	; (b4f8 <bt_l2cap_recv+0x1c8>)
    b448:	e7d6      	b.n	b3f8 <bt_l2cap_recv+0xc8>
	if (chan->chan.ops->alloc_buf) {
    b44a:	6863      	ldr	r3, [r4, #4]
    b44c:	68da      	ldr	r2, [r3, #12]
    b44e:	b1da      	cbz	r2, b488 <bt_l2cap_recv+0x158>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    b450:	4620      	mov	r0, r4
    b452:	4790      	blx	r2
    b454:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		if (!chan->_sdu) {
    b458:	b998      	cbnz	r0, b482 <bt_l2cap_recv+0x152>
			BT_ERR("Unable to allocate buffer for SDU");
    b45a:	4b20      	ldr	r3, [pc, #128]	; (b4dc <bt_l2cap_recv+0x1ac>)
    b45c:	681b      	ldr	r3, [r3, #0]
    b45e:	075a      	lsls	r2, r3, #29
    b460:	d0cc      	beq.n	b3fc <bt_l2cap_recv+0xcc>
    b462:	2301      	movs	r3, #1
    b464:	f04f 0200 	mov.w	r2, #0
    b468:	f363 0202 	bfi	r2, r3, #0, #3
    b46c:	491c      	ldr	r1, [pc, #112]	; (b4e0 <bt_l2cap_recv+0x1b0>)
    b46e:	4b1d      	ldr	r3, [pc, #116]	; (b4e4 <bt_l2cap_recv+0x1b4>)
    b470:	1a5b      	subs	r3, r3, r1
    b472:	f360 02c5 	bfi	r2, r0, #3, #3
    b476:	08db      	lsrs	r3, r3, #3
    b478:	f363 128f 	bfi	r2, r3, #6, #10
    b47c:	491e      	ldr	r1, [pc, #120]	; (b4f8 <bt_l2cap_recv+0x1c8>)
    b47e:	4820      	ldr	r0, [pc, #128]	; (b500 <bt_l2cap_recv+0x1d0>)
    b480:	e7ba      	b.n	b3f8 <bt_l2cap_recv+0xc8>
		chan->_sdu_len = sdu_len;
    b482:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    b486:	e7c0      	b.n	b40a <bt_l2cap_recv+0xda>
	err = chan->chan.ops->recv(&chan->chan, buf);
    b488:	691b      	ldr	r3, [r3, #16]
    b48a:	4629      	mov	r1, r5
    b48c:	4620      	mov	r0, r4
    b48e:	4798      	blx	r3
	if (err) {
    b490:	4602      	mov	r2, r0
    b492:	b1c8      	cbz	r0, b4c8 <bt_l2cap_recv+0x198>
		if (err != -EINPROGRESS) {
    b494:	f110 0f44 	cmn.w	r0, #68	; 0x44
    b498:	f43f af65 	beq.w	b366 <bt_l2cap_recv+0x36>
			BT_ERR("err %d", err);
    b49c:	4b0f      	ldr	r3, [pc, #60]	; (b4dc <bt_l2cap_recv+0x1ac>)
    b49e:	681b      	ldr	r3, [r3, #0]
    b4a0:	075b      	lsls	r3, r3, #29
    b4a2:	d0ab      	beq.n	b3fc <bt_l2cap_recv+0xcc>
    b4a4:	2101      	movs	r1, #1
    b4a6:	f04f 0300 	mov.w	r3, #0
    b4aa:	f361 0302 	bfi	r3, r1, #0, #3
    b4ae:	480c      	ldr	r0, [pc, #48]	; (b4e0 <bt_l2cap_recv+0x1b0>)
    b4b0:	490c      	ldr	r1, [pc, #48]	; (b4e4 <bt_l2cap_recv+0x1b4>)
    b4b2:	1a09      	subs	r1, r1, r0
    b4b4:	08c9      	lsrs	r1, r1, #3
    b4b6:	f36f 03c5 	bfc	r3, #3, #3
    b4ba:	f361 138f 	bfi	r3, r1, #6, #10
    b4be:	4811      	ldr	r0, [pc, #68]	; (b504 <bt_l2cap_recv+0x1d4>)
    b4c0:	490d      	ldr	r1, [pc, #52]	; (b4f8 <bt_l2cap_recv+0x1c8>)
    b4c2:	f7f6 fc5d 	bl	1d80 <log_2>
    b4c6:	e799      	b.n	b3fc <bt_l2cap_recv+0xcc>
	l2cap_chan_send_credits(chan, buf, 1);
    b4c8:	2101      	movs	r1, #1
    b4ca:	4620      	mov	r0, r4
    b4cc:	f7ff fcde 	bl	ae8c <l2cap_chan_send_credits.isra.13>
    b4d0:	e749      	b.n	b366 <bt_l2cap_recv+0x36>
	chan->ops->recv(chan, buf);
    b4d2:	6843      	ldr	r3, [r0, #4]
    b4d4:	4629      	mov	r1, r5
    b4d6:	691b      	ldr	r3, [r3, #16]
    b4d8:	4798      	blx	r3
    b4da:	e744      	b.n	b366 <bt_l2cap_recv+0x36>
    b4dc:	2000d754 	.word	0x2000d754
    b4e0:	0002cff8 	.word	0x0002cff8
    b4e4:	0002d080 	.word	0x0002d080
    b4e8:	0002f6eb 	.word	0x0002f6eb
    b4ec:	0002f69f 	.word	0x0002f69f
    b4f0:	0002f70c 	.word	0x0002f70c
    b4f4:	0002f735 	.word	0x0002f735
    b4f8:	0002f68c 	.word	0x0002f68c
    b4fc:	0002f756 	.word	0x0002f756
    b500:	0002f76d 	.word	0x0002f76d
    b504:	0002f832 	.word	0x0002f832

0000b508 <l2cap_recv>:
{
    b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    b50c:	898b      	ldrh	r3, [r1, #12]
    b50e:	2b03      	cmp	r3, #3
{
    b510:	b087      	sub	sp, #28
    b512:	4606      	mov	r6, r0
    b514:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b516:	d815      	bhi.n	b544 <l2cap_recv+0x3c>
		BT_ERR("Too small L2CAP signaling PDU");
    b518:	4baa      	ldr	r3, [pc, #680]	; (b7c4 <l2cap_recv+0x2bc>)
    b51a:	681b      	ldr	r3, [r3, #0]
    b51c:	075f      	lsls	r7, r3, #29
    b51e:	d033      	beq.n	b588 <l2cap_recv+0x80>
    b520:	2301      	movs	r3, #1
    b522:	f04f 0200 	mov.w	r2, #0
    b526:	f363 0202 	bfi	r2, r3, #0, #3
    b52a:	49a7      	ldr	r1, [pc, #668]	; (b7c8 <l2cap_recv+0x2c0>)
    b52c:	4ba7      	ldr	r3, [pc, #668]	; (b7cc <l2cap_recv+0x2c4>)
    b52e:	48a8      	ldr	r0, [pc, #672]	; (b7d0 <l2cap_recv+0x2c8>)
    b530:	1a5b      	subs	r3, r3, r1
    b532:	f36f 02c5 	bfc	r2, #3, #3
    b536:	08db      	lsrs	r3, r3, #3
    b538:	49a6      	ldr	r1, [pc, #664]	; (b7d4 <l2cap_recv+0x2cc>)
    b53a:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Too small LE Credits packet size");
    b53e:	f7f6 fc0b 	bl	1d58 <log_1>
    b542:	e021      	b.n	b588 <l2cap_recv+0x80>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    b544:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    b546:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    b548:	f850 7f08 	ldr.w	r7, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    b54c:	887c      	ldrh	r4, [r7, #2]
	net_buf_pull(buf, sizeof(*hdr));
    b54e:	f013 f82d 	bl	1e5ac <net_buf_simple_pull>
	if (buf->len != len) {
    b552:	89aa      	ldrh	r2, [r5, #12]
    b554:	4294      	cmp	r4, r2
    b556:	d01b      	beq.n	b590 <l2cap_recv+0x88>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b558:	4b9a      	ldr	r3, [pc, #616]	; (b7c4 <l2cap_recv+0x2bc>)
    b55a:	681b      	ldr	r3, [r3, #0]
    b55c:	075e      	lsls	r6, r3, #29
    b55e:	d013      	beq.n	b588 <l2cap_recv+0x80>
    b560:	2301      	movs	r3, #1
    b562:	f04f 0000 	mov.w	r0, #0
    b566:	f363 0002 	bfi	r0, r3, #0, #3
    b56a:	4998      	ldr	r1, [pc, #608]	; (b7cc <l2cap_recv+0x2c4>)
    b56c:	4b96      	ldr	r3, [pc, #600]	; (b7c8 <l2cap_recv+0x2c0>)
    b56e:	1ac9      	subs	r1, r1, r3
    b570:	08c9      	lsrs	r1, r1, #3
    b572:	f36f 00c5 	bfc	r0, #3, #3
    b576:	f361 108f 	bfi	r0, r1, #6, #10
    b57a:	f8ad 0000 	strh.w	r0, [sp]
    b57e:	4623      	mov	r3, r4
    b580:	4994      	ldr	r1, [pc, #592]	; (b7d4 <l2cap_recv+0x2cc>)
    b582:	4895      	ldr	r0, [pc, #596]	; (b7d8 <l2cap_recv+0x2d0>)
    b584:	f7f6 fc14 	bl	1db0 <log_3>
}
    b588:	2000      	movs	r0, #0
    b58a:	b007      	add	sp, #28
    b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    b590:	787c      	ldrb	r4, [r7, #1]
    b592:	b99c      	cbnz	r4, b5bc <l2cap_recv+0xb4>
		BT_ERR("Invalid ident value in L2CAP PDU");
    b594:	4b8b      	ldr	r3, [pc, #556]	; (b7c4 <l2cap_recv+0x2bc>)
    b596:	681b      	ldr	r3, [r3, #0]
    b598:	075d      	lsls	r5, r3, #29
    b59a:	d0f5      	beq.n	b588 <l2cap_recv+0x80>
    b59c:	2301      	movs	r3, #1
    b59e:	f04f 0200 	mov.w	r2, #0
    b5a2:	f363 0202 	bfi	r2, r3, #0, #3
    b5a6:	4988      	ldr	r1, [pc, #544]	; (b7c8 <l2cap_recv+0x2c0>)
    b5a8:	4b88      	ldr	r3, [pc, #544]	; (b7cc <l2cap_recv+0x2c4>)
    b5aa:	488c      	ldr	r0, [pc, #560]	; (b7dc <l2cap_recv+0x2d4>)
    b5ac:	1a5b      	subs	r3, r3, r1
    b5ae:	f364 02c5 	bfi	r2, r4, #3, #3
    b5b2:	08db      	lsrs	r3, r3, #3
    b5b4:	f363 128f 	bfi	r2, r3, #6, #10
    b5b8:	4986      	ldr	r1, [pc, #536]	; (b7d4 <l2cap_recv+0x2cc>)
    b5ba:	e7c0      	b.n	b53e <l2cap_recv+0x36>
	switch (hdr->code) {
    b5bc:	7838      	ldrb	r0, [r7, #0]
    b5be:	1e43      	subs	r3, r0, #1
    b5c0:	2b15      	cmp	r3, #21
    b5c2:	f200 8319 	bhi.w	bbf8 <l2cap_recv+0x6f0>
    b5c6:	e8df f013 	tbh	[pc, r3, lsl #1]
    b5ca:	0311      	.short	0x0311
    b5cc:	03170317 	.word	0x03170317
    b5d0:	03170317 	.word	0x03170317
    b5d4:	025b0213 	.word	0x025b0213
    b5d8:	03170317 	.word	0x03170317
    b5dc:	03170317 	.word	0x03170317
    b5e0:	03170317 	.word	0x03170317
    b5e4:	03170317 	.word	0x03170317
    b5e8:	03170317 	.word	0x03170317
    b5ec:	0016002c 	.word	0x0016002c
    b5f0:	0175008b 	.word	0x0175008b
    b5f4:	027a      	.short	0x027a
	if (buf->len < sizeof(*rsp)) {
    b5f6:	2a01      	cmp	r2, #1
    b5f8:	d8c6      	bhi.n	b588 <l2cap_recv+0x80>
		BT_ERR("Too small LE conn param rsp");
    b5fa:	4b72      	ldr	r3, [pc, #456]	; (b7c4 <l2cap_recv+0x2bc>)
    b5fc:	681b      	ldr	r3, [r3, #0]
    b5fe:	0758      	lsls	r0, r3, #29
    b600:	d0c2      	beq.n	b588 <l2cap_recv+0x80>
    b602:	2301      	movs	r3, #1
    b604:	f04f 0200 	mov.w	r2, #0
    b608:	f363 0202 	bfi	r2, r3, #0, #3
    b60c:	496e      	ldr	r1, [pc, #440]	; (b7c8 <l2cap_recv+0x2c0>)
    b60e:	4b6f      	ldr	r3, [pc, #444]	; (b7cc <l2cap_recv+0x2c4>)
    b610:	4873      	ldr	r0, [pc, #460]	; (b7e0 <l2cap_recv+0x2d8>)
    b612:	1a5b      	subs	r3, r3, r1
    b614:	f36f 02c5 	bfc	r2, #3, #3
    b618:	08db      	lsrs	r3, r3, #3
    b61a:	f363 128f 	bfi	r2, r3, #6, #10
    b61e:	4971      	ldr	r1, [pc, #452]	; (b7e4 <l2cap_recv+0x2dc>)
    b620:	e78d      	b.n	b53e <l2cap_recv+0x36>
	if (buf->len < sizeof(*req)) {
    b622:	2a07      	cmp	r2, #7
    b624:	d813      	bhi.n	b64e <l2cap_recv+0x146>
		BT_ERR("Too small LE conn update param req");
    b626:	4b67      	ldr	r3, [pc, #412]	; (b7c4 <l2cap_recv+0x2bc>)
    b628:	681b      	ldr	r3, [r3, #0]
    b62a:	0759      	lsls	r1, r3, #29
    b62c:	d0ac      	beq.n	b588 <l2cap_recv+0x80>
    b62e:	2301      	movs	r3, #1
    b630:	f04f 0200 	mov.w	r2, #0
    b634:	f363 0202 	bfi	r2, r3, #0, #3
    b638:	4963      	ldr	r1, [pc, #396]	; (b7c8 <l2cap_recv+0x2c0>)
    b63a:	4b64      	ldr	r3, [pc, #400]	; (b7cc <l2cap_recv+0x2c4>)
    b63c:	486a      	ldr	r0, [pc, #424]	; (b7e8 <l2cap_recv+0x2e0>)
    b63e:	1a5b      	subs	r3, r3, r1
    b640:	f36f 02c5 	bfc	r2, #3, #3
    b644:	08db      	lsrs	r3, r3, #3
    b646:	f363 128f 	bfi	r2, r3, #6, #10
    b64a:	4968      	ldr	r1, [pc, #416]	; (b7ec <l2cap_recv+0x2e4>)
    b64c:	e777      	b.n	b53e <l2cap_recv+0x36>
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    b64e:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    b650:	78f7      	ldrb	r7, [r6, #3]
    b652:	b13f      	cbz	r7, b664 <l2cap_recv+0x15c>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    b654:	2300      	movs	r3, #0
    b656:	9300      	str	r3, [sp, #0]
    b658:	461a      	mov	r2, r3
    b65a:	4621      	mov	r1, r4
    b65c:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    b65e:	f7ff fb31 	bl	acc4 <l2cap_send_reject>
		break;
    b662:	e791      	b.n	b588 <l2cap_recv+0x80>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    b664:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    b666:	7859      	ldrb	r1, [r3, #1]
    b668:	781a      	ldrb	r2, [r3, #0]
    b66a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    b66e:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    b672:	78d9      	ldrb	r1, [r3, #3]
    b674:	789a      	ldrb	r2, [r3, #2]
    b676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    b67a:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    b67e:	7959      	ldrb	r1, [r3, #5]
    b680:	791a      	ldrb	r2, [r3, #4]
    b682:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    b686:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    b68a:	799a      	ldrb	r2, [r3, #6]
    b68c:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b68e:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    b690:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b694:	2013      	movs	r0, #19
    b696:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    b698:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b69c:	f7ff fa1c 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
	accepted = le_param_req(conn, &param);
    b6a0:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b6a2:	4605      	mov	r5, r0
	accepted = le_param_req(conn, &param);
    b6a4:	4630      	mov	r0, r6
    b6a6:	f7fe fa09 	bl	9abc <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    b6aa:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    b6ac:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b6ae:	f105 0008 	add.w	r0, r5, #8
    b6b2:	f012 ff2b 	bl	1e50c <net_buf_simple_add>
	if (accepted) {
    b6b6:	b17c      	cbz	r4, b6d8 <l2cap_recv+0x1d0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    b6b8:	7007      	strb	r7, [r0, #0]
    b6ba:	7047      	strb	r7, [r0, #1]
    b6bc:	2300      	movs	r3, #0
    b6be:	462a      	mov	r2, r5
    b6c0:	2105      	movs	r1, #5
    b6c2:	4630      	mov	r0, r6
    b6c4:	f7ff fa9a 	bl	abfc <bt_l2cap_send_cb>
	if (accepted) {
    b6c8:	2c00      	cmp	r4, #0
    b6ca:	f43f af5d 	beq.w	b588 <l2cap_recv+0x80>
		bt_conn_le_conn_update(conn, &param);
    b6ce:	a904      	add	r1, sp, #16
    b6d0:	4630      	mov	r0, r6
    b6d2:	f7fe ff82 	bl	a5da <bt_conn_le_conn_update>
    b6d6:	e757      	b.n	b588 <l2cap_recv+0x80>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    b6d8:	2301      	movs	r3, #1
    b6da:	7003      	strb	r3, [r0, #0]
    b6dc:	7044      	strb	r4, [r0, #1]
    b6de:	e7ed      	b.n	b6bc <l2cap_recv+0x1b4>
	if (buf->len < sizeof(*req)) {
    b6e0:	2a09      	cmp	r2, #9
    b6e2:	d814      	bhi.n	b70e <l2cap_recv+0x206>
		BT_ERR("Too small LE conn req packet size");
    b6e4:	4b37      	ldr	r3, [pc, #220]	; (b7c4 <l2cap_recv+0x2bc>)
    b6e6:	681b      	ldr	r3, [r3, #0]
    b6e8:	075a      	lsls	r2, r3, #29
    b6ea:	f43f af4d 	beq.w	b588 <l2cap_recv+0x80>
    b6ee:	2301      	movs	r3, #1
    b6f0:	f04f 0200 	mov.w	r2, #0
    b6f4:	f363 0202 	bfi	r2, r3, #0, #3
    b6f8:	4933      	ldr	r1, [pc, #204]	; (b7c8 <l2cap_recv+0x2c0>)
    b6fa:	4b34      	ldr	r3, [pc, #208]	; (b7cc <l2cap_recv+0x2c4>)
    b6fc:	1a5b      	subs	r3, r3, r1
    b6fe:	f36f 02c5 	bfc	r2, #3, #3
    b702:	08db      	lsrs	r3, r3, #3
    b704:	493a      	ldr	r1, [pc, #232]	; (b7f0 <l2cap_recv+0x2e8>)
    b706:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Too small LE conn req packet size");
    b70a:	483a      	ldr	r0, [pc, #232]	; (b7f4 <l2cap_recv+0x2ec>)
    b70c:	e717      	b.n	b53e <l2cap_recv+0x36>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    b70e:	68aa      	ldr	r2, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    b710:	f8b2 9004 	ldrh.w	r9, [r2, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    b714:	f1b9 0f16 	cmp.w	r9, #22
    b718:	d904      	bls.n	b724 <l2cap_recv+0x21c>
	mps = sys_le16_to_cpu(req->mps);
    b71a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    b71e:	f1ba 0f16 	cmp.w	sl, #22
    b722:	d814      	bhi.n	b74e <l2cap_recv+0x246>
		BT_ERR("Invalid LE-Conn Req params");
    b724:	4b27      	ldr	r3, [pc, #156]	; (b7c4 <l2cap_recv+0x2bc>)
    b726:	681b      	ldr	r3, [r3, #0]
    b728:	075b      	lsls	r3, r3, #29
    b72a:	f43f af2d 	beq.w	b588 <l2cap_recv+0x80>
    b72e:	2301      	movs	r3, #1
    b730:	f04f 0200 	mov.w	r2, #0
    b734:	f363 0202 	bfi	r2, r3, #0, #3
    b738:	4923      	ldr	r1, [pc, #140]	; (b7c8 <l2cap_recv+0x2c0>)
    b73a:	4b24      	ldr	r3, [pc, #144]	; (b7cc <l2cap_recv+0x2c4>)
    b73c:	482e      	ldr	r0, [pc, #184]	; (b7f8 <l2cap_recv+0x2f0>)
    b73e:	1a5b      	subs	r3, r3, r1
    b740:	f36f 02c5 	bfc	r2, #3, #3
    b744:	08db      	lsrs	r3, r3, #3
    b746:	f363 128f 	bfi	r2, r3, #6, #10
    b74a:	4929      	ldr	r1, [pc, #164]	; (b7f0 <l2cap_recv+0x2e8>)
    b74c:	e6f7      	b.n	b53e <l2cap_recv+0x36>
	credits = sys_le16_to_cpu(req->credits);
    b74e:	8913      	ldrh	r3, [r2, #8]
	scid = sys_le16_to_cpu(req->scid);
    b750:	f8b2 b002 	ldrh.w	fp, [r2, #2]
		le_conn_req(l2cap, hdr->ident, buf);
    b754:	6835      	ldr	r5, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    b756:	8816      	ldrh	r6, [r2, #0]
	credits = sys_le16_to_cpu(req->credits);
    b758:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    b75c:	220a      	movs	r2, #10
    b75e:	4621      	mov	r1, r4
    b760:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    b762:	b29f      	uxth	r7, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    b764:	f7ff f9b8 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
	rsp = net_buf_add(buf, sizeof(*rsp));
    b768:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    b76a:	9002      	str	r0, [sp, #8]
	rsp = net_buf_add(buf, sizeof(*rsp));
    b76c:	3008      	adds	r0, #8
    b76e:	f012 fecd 	bl	1e50c <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    b772:	220a      	movs	r2, #10
    b774:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b776:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    b778:	f7fa fbb3 	bl	5ee2 <memset>
	server = l2cap_server_lookup_psm(psm);
    b77c:	4630      	mov	r0, r6
    b77e:	f7ff f8fb 	bl	a978 <l2cap_server_lookup_psm>
	scid = sys_le16_to_cpu(req->scid);
    b782:	fa1f f88b 	uxth.w	r8, fp
	if (!server) {
    b786:	4606      	mov	r6, r0
    b788:	b940      	cbnz	r0, b79c <l2cap_recv+0x294>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_PSM_NOT_SUPP);
    b78a:	2302      	movs	r3, #2
    b78c:	9a02      	ldr	r2, [sp, #8]
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    b78e:	8123      	strh	r3, [r4, #8]
    b790:	2105      	movs	r1, #5
    b792:	2300      	movs	r3, #0
    b794:	4628      	mov	r0, r5
    b796:	f7ff fa31 	bl	abfc <bt_l2cap_send_cb>
    b79a:	e6f5      	b.n	b588 <l2cap_recv+0x80>
	if (conn->sec_level < server->sec_level) {
    b79c:	7a69      	ldrb	r1, [r5, #9]
    b79e:	7882      	ldrb	r2, [r0, #2]
    b7a0:	4291      	cmp	r1, r2
    b7a2:	d201      	bcs.n	b7a8 <l2cap_recv+0x2a0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    b7a4:	2305      	movs	r3, #5
    b7a6:	e7f1      	b.n	b78c <l2cap_recv+0x284>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    b7a8:	f1a8 0240 	sub.w	r2, r8, #64	; 0x40
    b7ac:	2a3f      	cmp	r2, #63	; 0x3f
    b7ae:	d901      	bls.n	b7b4 <l2cap_recv+0x2ac>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_INVALID_SCID);
    b7b0:	2309      	movs	r3, #9
    b7b2:	e7eb      	b.n	b78c <l2cap_recv+0x284>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    b7b4:	4641      	mov	r1, r8
    b7b6:	4628      	mov	r0, r5
    b7b8:	f7ff fb93 	bl	aee2 <bt_l2cap_le_lookup_tx_cid>
    b7bc:	9004      	str	r0, [sp, #16]
	if (chan) {
    b7be:	b1e8      	cbz	r0, b7fc <l2cap_recv+0x2f4>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_SCID_IN_USE);
    b7c0:	230a      	movs	r3, #10
    b7c2:	e7e3      	b.n	b78c <l2cap_recv+0x284>
    b7c4:	2000d754 	.word	0x2000d754
    b7c8:	0002cff8 	.word	0x0002cff8
    b7cc:	0002d080 	.word	0x0002d080
    b7d0:	0002f83d 	.word	0x0002f83d
    b7d4:	0002f653 	.word	0x0002f653
    b7d8:	0002f85f 	.word	0x0002f85f
    b7dc:	0002f884 	.word	0x0002f884
    b7e0:	0002f8a9 	.word	0x0002f8a9
    b7e4:	0002f5ce 	.word	0x0002f5ce
    b7e8:	0002f8c9 	.word	0x0002f8c9
    b7ec:	0002f5e0 	.word	0x0002f5e0
    b7f0:	0002f612 	.word	0x0002f612
    b7f4:	0002f8f0 	.word	0x0002f8f0
    b7f8:	0002f916 	.word	0x0002f916
	err = server->accept(conn, &chan);
    b7fc:	6873      	ldr	r3, [r6, #4]
    b7fe:	a904      	add	r1, sp, #16
    b800:	4628      	mov	r0, r5
    b802:	4798      	blx	r3
	if (err < 0) {
    b804:	2800      	cmp	r0, #0
    b806:	da05      	bge.n	b814 <l2cap_recv+0x30c>
    b808:	300d      	adds	r0, #13
    b80a:	bf2a      	itet	cs
    b80c:	4bb7      	ldrcs	r3, [pc, #732]	; (baec <l2cap_recv+0x5e4>)
	switch (err) {
    b80e:	230b      	movcc	r3, #11
    b810:	5c1b      	ldrbcs	r3, [r3, r0]
    b812:	e7bb      	b.n	b78c <l2cap_recv+0x284>
	chan->required_sec_level = server->sec_level;
    b814:	9904      	ldr	r1, [sp, #16]
    b816:	78b3      	ldrb	r3, [r6, #2]
    b818:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    b81c:	4ab4      	ldr	r2, [pc, #720]	; (baf0 <l2cap_recv+0x5e8>)
    b81e:	4628      	mov	r0, r5
    b820:	f7ff fb74 	bl	af0c <l2cap_chan_add>
    b824:	2800      	cmp	r0, #0
    b826:	d043      	beq.n	b8b0 <l2cap_recv+0x3a8>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    b828:	f8dd 8010 	ldr.w	r8, [sp, #16]
		l2cap_chan_tx_init(ch);
    b82c:	4640      	mov	r0, r8
    b82e:	f7ff f90e 	bl	aa4e <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    b832:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		ch->tx.mps = mps;
    b836:	f8a8 a05c 	strh.w	sl, [r8, #92]	; 0x5c
		ch->tx.mtu = mtu;
    b83a:	f8a8 905a 	strh.w	r9, [r8, #90]	; 0x5a
		ch->tx.cid = scid;
    b83e:	f8a8 b058 	strh.w	fp, [r8, #88]	; 0x58
		ch->tx.init_credits = credits;
    b842:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
	while (credits--) {
    b846:	f64f 79ff 	movw	r9, #65535	; 0xffff
		k_sem_give(&chan->tx.credits);
    b84a:	f108 0a60 	add.w	sl, r8, #96	; 0x60
	while (credits--) {
    b84e:	3f01      	subs	r7, #1
    b850:	b2bf      	uxth	r7, r7
    b852:	454f      	cmp	r7, r9
    b854:	d124      	bne.n	b8a0 <l2cap_recv+0x398>
		l2cap_chan_rx_init(ch);
    b856:	4640      	mov	r0, r8
    b858:	f7ff f8d8 	bl	aa0c <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    b85c:	f8b8 703e 	ldrh.w	r7, [r8, #62]	; 0x3e
	while (credits--) {
    b860:	f64f 79ff 	movw	r9, #65535	; 0xffff
		k_sem_give(&chan->rx.credits);
    b864:	f108 0a40 	add.w	sl, r8, #64	; 0x40
	while (credits--) {
    b868:	3f01      	subs	r7, #1
    b86a:	b2bf      	uxth	r7, r7
    b86c:	454f      	cmp	r7, r9
    b86e:	d11b      	bne.n	b8a8 <l2cap_recv+0x3a0>
		chan->psm = server->psm;
    b870:	9804      	ldr	r0, [sp, #16]
    b872:	8832      	ldrh	r2, [r6, #0]
    b874:	8642      	strh	r2, [r0, #50]	; 0x32
	chan->state = state;
    b876:	2203      	movs	r2, #3
    b878:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
		if (chan->ops->connected) {
    b87c:	6842      	ldr	r2, [r0, #4]
    b87e:	6812      	ldr	r2, [r2, #0]
    b880:	b102      	cbz	r2, b884 <l2cap_recv+0x37c>
			chan->ops->connected(chan);
    b882:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    b884:	f8b8 2038 	ldrh.w	r2, [r8, #56]	; 0x38
    b888:	8022      	strh	r2, [r4, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    b88a:	f8b8 203c 	ldrh.w	r2, [r8, #60]	; 0x3c
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    b88e:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    b892:	80a2      	strh	r2, [r4, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    b894:	f8b8 203a 	ldrh.w	r2, [r8, #58]	; 0x3a
    b898:	8062      	strh	r2, [r4, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    b89a:	80e3      	strh	r3, [r4, #6]
		rsp->result = BT_L2CAP_LE_SUCCESS;
    b89c:	2300      	movs	r3, #0
    b89e:	e775      	b.n	b78c <l2cap_recv+0x284>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    b8a0:	4650      	mov	r0, sl
    b8a2:	f020 fd6c 	bl	2c37e <_impl_k_sem_give>
    b8a6:	e7d2      	b.n	b84e <l2cap_recv+0x346>
    b8a8:	4650      	mov	r0, sl
    b8aa:	f020 fd68 	bl	2c37e <_impl_k_sem_give>
    b8ae:	e7db      	b.n	b868 <l2cap_recv+0x360>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    b8b0:	2304      	movs	r3, #4
    b8b2:	e76b      	b.n	b78c <l2cap_recv+0x284>
	if (buf->len < sizeof(*rsp)) {
    b8b4:	2a09      	cmp	r2, #9
    b8b6:	d814      	bhi.n	b8e2 <l2cap_recv+0x3da>
		BT_ERR("Too small LE conn rsp packet size");
    b8b8:	4b8e      	ldr	r3, [pc, #568]	; (baf4 <l2cap_recv+0x5ec>)
    b8ba:	681b      	ldr	r3, [r3, #0]
    b8bc:	075f      	lsls	r7, r3, #29
    b8be:	f43f ae63 	beq.w	b588 <l2cap_recv+0x80>
    b8c2:	2301      	movs	r3, #1
    b8c4:	f04f 0200 	mov.w	r2, #0
    b8c8:	f363 0202 	bfi	r2, r3, #0, #3
    b8cc:	498a      	ldr	r1, [pc, #552]	; (baf8 <l2cap_recv+0x5f0>)
    b8ce:	4b8b      	ldr	r3, [pc, #556]	; (bafc <l2cap_recv+0x5f4>)
    b8d0:	488b      	ldr	r0, [pc, #556]	; (bb00 <l2cap_recv+0x5f8>)
    b8d2:	1a5b      	subs	r3, r3, r1
    b8d4:	f36f 02c5 	bfc	r2, #3, #3
    b8d8:	08db      	lsrs	r3, r3, #3
    b8da:	f363 128f 	bfi	r2, r3, #6, #10
    b8de:	4989      	ldr	r1, [pc, #548]	; (bb04 <l2cap_recv+0x5fc>)
    b8e0:	e62d      	b.n	b53e <l2cap_recv+0x36>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    b8e2:	68ab      	ldr	r3, [r5, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    b8e4:	f8d6 8000 	ldr.w	r8, [r6]
	result = sys_le16_to_cpu(rsp->result);
    b8e8:	891f      	ldrh	r7, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    b8ea:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    b8ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    b8f2:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    b8f6:	88de      	ldrh	r6, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    b8f8:	f027 0308 	bic.w	r3, r7, #8
    b8fc:	b2a1      	uxth	r1, r4
    b8fe:	b10b      	cbz	r3, b904 <l2cap_recv+0x3fc>
    b900:	2f05      	cmp	r7, #5
    b902:	d11d      	bne.n	b940 <l2cap_recv+0x438>
		chan = l2cap_lookup_ident(conn, ident);
    b904:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    b906:	4640      	mov	r0, r8
    b908:	f7ff f81a 	bl	a940 <__l2cap_lookup_ident>
    b90c:	4605      	mov	r5, r0
	if (!chan) {
    b90e:	b9c8      	cbnz	r0, b944 <l2cap_recv+0x43c>
		BT_ERR("Cannot find channel for ident %u", ident);
    b910:	4b78      	ldr	r3, [pc, #480]	; (baf4 <l2cap_recv+0x5ec>)
    b912:	681b      	ldr	r3, [r3, #0]
    b914:	075e      	lsls	r6, r3, #29
    b916:	f43f ae37 	beq.w	b588 <l2cap_recv+0x80>
    b91a:	2201      	movs	r2, #1
    b91c:	f04f 0300 	mov.w	r3, #0
    b920:	f362 0302 	bfi	r3, r2, #0, #3
    b924:	4974      	ldr	r1, [pc, #464]	; (baf8 <l2cap_recv+0x5f0>)
    b926:	4a75      	ldr	r2, [pc, #468]	; (bafc <l2cap_recv+0x5f4>)
    b928:	1a52      	subs	r2, r2, r1
    b92a:	f360 03c5 	bfi	r3, r0, #3, #3
    b92e:	08d2      	lsrs	r2, r2, #3
    b930:	f362 138f 	bfi	r3, r2, #6, #10
    b934:	4973      	ldr	r1, [pc, #460]	; (bb04 <l2cap_recv+0x5fc>)
    b936:	4874      	ldr	r0, [pc, #464]	; (bb08 <l2cap_recv+0x600>)
    b938:	4622      	mov	r2, r4
    b93a:	f7f6 fa21 	bl	1d80 <log_2>
    b93e:	e623      	b.n	b588 <l2cap_recv+0x80>
		chan = l2cap_remove_ident(conn, ident);
    b940:	2201      	movs	r2, #1
    b942:	e7e0      	b.n	b906 <l2cap_recv+0x3fe>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    b944:	3010      	adds	r0, #16
    b946:	f020 feec 	bl	2c722 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    b94a:	2300      	movs	r3, #0
	switch (result) {
    b94c:	2f05      	cmp	r7, #5
	chan->chan.ident = 0;
    b94e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	switch (result) {
    b952:	d041      	beq.n	b9d8 <l2cap_recv+0x4d0>
    b954:	2f08      	cmp	r7, #8
    b956:	d028      	beq.n	b9aa <l2cap_recv+0x4a2>
    b958:	2f00      	cmp	r7, #0
    b95a:	d139      	bne.n	b9d0 <l2cap_recv+0x4c8>
	chan->state = state;
    b95c:	2303      	movs	r3, #3
    b95e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		if (chan->chan.ops->connected) {
    b962:	686b      	ldr	r3, [r5, #4]
		chan->tx.cid = dcid;
    b964:	f8a5 b058 	strh.w	fp, [r5, #88]	; 0x58
		if (chan->chan.ops->connected) {
    b968:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    b96a:	f8a5 a05a 	strh.w	sl, [r5, #90]	; 0x5a
		chan->tx.mps = mps;
    b96e:	f8a5 905c 	strh.w	r9, [r5, #92]	; 0x5c
		if (chan->chan.ops->connected) {
    b972:	b10b      	cbz	r3, b978 <l2cap_recv+0x470>
			chan->chan.ops->connected(&chan->chan);
    b974:	4628      	mov	r0, r5
    b976:	4798      	blx	r3
	while (credits--) {
    b978:	f64f 74ff 	movw	r4, #65535	; 0xffff
		k_sem_give(&chan->tx.credits);
    b97c:	f105 0760 	add.w	r7, r5, #96	; 0x60
	while (credits--) {
    b980:	3e01      	subs	r6, #1
    b982:	b2b6      	uxth	r6, r6
    b984:	42a6      	cmp	r6, r4
    b986:	d10c      	bne.n	b9a2 <l2cap_recv+0x49a>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    b988:	8fec      	ldrh	r4, [r5, #62]	; 0x3e
	while (credits--) {
    b98a:	f64f 76ff 	movw	r6, #65535	; 0xffff
		k_sem_give(&chan->rx.credits);
    b98e:	3540      	adds	r5, #64	; 0x40
	while (credits--) {
    b990:	3c01      	subs	r4, #1
    b992:	b2a4      	uxth	r4, r4
    b994:	42b4      	cmp	r4, r6
    b996:	f43f adf7 	beq.w	b588 <l2cap_recv+0x80>
    b99a:	4628      	mov	r0, r5
    b99c:	f020 fcef 	bl	2c37e <_impl_k_sem_give>
    b9a0:	e7f6      	b.n	b990 <l2cap_recv+0x488>
    b9a2:	4638      	mov	r0, r7
    b9a4:	f020 fceb 	bl	2c37e <_impl_k_sem_give>
    b9a8:	e7ea      	b.n	b980 <l2cap_recv+0x478>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    b9aa:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    b9ae:	2b01      	cmp	r3, #1
    b9b0:	d80a      	bhi.n	b9c8 <l2cap_recv+0x4c0>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    b9b2:	2302      	movs	r3, #2
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    b9b4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    b9b8:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
    b9bc:	6828      	ldr	r0, [r5, #0]
    b9be:	f7fe f903 	bl	9bc8 <bt_conn_security>
		if (l2cap_change_security(chan, result) == 0) {
    b9c2:	2800      	cmp	r0, #0
    b9c4:	f43f ade0 	beq.w	b588 <l2cap_recv+0x80>
		bt_l2cap_chan_remove(conn, &chan->chan);
    b9c8:	4629      	mov	r1, r5
    b9ca:	4640      	mov	r0, r8
    b9cc:	f7ff f8a0 	bl	ab10 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    b9d0:	4628      	mov	r0, r5
	bt_l2cap_chan_del(&chan->chan);
    b9d2:	f7ff f8b4 	bl	ab3e <bt_l2cap_chan_del>
    b9d6:	e5d7      	b.n	b588 <l2cap_recv+0x80>
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    b9d8:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    b9dc:	2b01      	cmp	r3, #1
    b9de:	d9e8      	bls.n	b9b2 <l2cap_recv+0x4aa>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    b9e0:	2b02      	cmp	r3, #2
    b9e2:	d101      	bne.n	b9e8 <l2cap_recv+0x4e0>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    b9e4:	2303      	movs	r3, #3
    b9e6:	e7e5      	b.n	b9b4 <l2cap_recv+0x4ac>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    b9e8:	2b03      	cmp	r3, #3
    b9ea:	d1ed      	bne.n	b9c8 <l2cap_recv+0x4c0>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    b9ec:	2304      	movs	r3, #4
    b9ee:	e7e1      	b.n	b9b4 <l2cap_recv+0x4ac>
	if (buf->len < sizeof(*req)) {
    b9f0:	2a03      	cmp	r2, #3
    b9f2:	d813      	bhi.n	ba1c <l2cap_recv+0x514>
		BT_ERR("Too small LE conn req packet size");
    b9f4:	4b3f      	ldr	r3, [pc, #252]	; (baf4 <l2cap_recv+0x5ec>)
    b9f6:	681b      	ldr	r3, [r3, #0]
    b9f8:	075c      	lsls	r4, r3, #29
    b9fa:	f43f adc5 	beq.w	b588 <l2cap_recv+0x80>
    b9fe:	2301      	movs	r3, #1
    ba00:	f04f 0200 	mov.w	r2, #0
    ba04:	f363 0202 	bfi	r2, r3, #0, #3
    ba08:	493b      	ldr	r1, [pc, #236]	; (baf8 <l2cap_recv+0x5f0>)
    ba0a:	4b3c      	ldr	r3, [pc, #240]	; (bafc <l2cap_recv+0x5f4>)
    ba0c:	1a5b      	subs	r3, r3, r1
    ba0e:	f36f 02c5 	bfc	r2, #3, #3
    ba12:	08db      	lsrs	r3, r3, #3
    ba14:	f363 128f 	bfi	r2, r3, #6, #10
    ba18:	493c      	ldr	r1, [pc, #240]	; (bb0c <l2cap_recv+0x604>)
    ba1a:	e676      	b.n	b70a <l2cap_recv+0x202>
		le_disconn_req(l2cap, hdr->ident, buf);
    ba1c:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    ba1e:	68ad      	ldr	r5, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, scid);
    ba20:	4638      	mov	r0, r7
    ba22:	8869      	ldrh	r1, [r5, #2]
    ba24:	f7fe ffb6 	bl	a994 <l2cap_remove_tx_cid>
	if (!chan) {
    ba28:	4606      	mov	r6, r0
    ba2a:	b990      	cbnz	r0, ba52 <l2cap_recv+0x54a>
		data.scid = req->scid;
    ba2c:	78ea      	ldrb	r2, [r5, #3]
    ba2e:	78ab      	ldrb	r3, [r5, #2]
    ba30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ba34:	f8ad 3010 	strh.w	r3, [sp, #16]
		data.dcid = req->dcid;
    ba38:	786a      	ldrb	r2, [r5, #1]
    ba3a:	782b      	ldrb	r3, [r5, #0]
    ba3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ba40:	f8ad 3012 	strh.w	r3, [sp, #18]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    ba44:	2304      	movs	r3, #4
    ba46:	9300      	str	r3, [sp, #0]
    ba48:	2202      	movs	r2, #2
    ba4a:	ab04      	add	r3, sp, #16
    ba4c:	4621      	mov	r1, r4
    ba4e:	4638      	mov	r0, r7
    ba50:	e605      	b.n	b65e <l2cap_recv+0x156>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    ba52:	2204      	movs	r2, #4
    ba54:	4621      	mov	r1, r4
    ba56:	2007      	movs	r0, #7
    ba58:	f7ff f83e 	bl	aad8 <l2cap_create_le_sig_pdu.isra.10>
	rsp = net_buf_add(buf, sizeof(*rsp));
    ba5c:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    ba5e:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    ba60:	3008      	adds	r0, #8
    ba62:	f012 fd53 	bl	1e50c <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    ba66:	8f33      	ldrh	r3, [r6, #56]	; 0x38
    ba68:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    ba6a:	f8b6 3058 	ldrh.w	r3, [r6, #88]	; 0x58
    ba6e:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    ba70:	4630      	mov	r0, r6
    ba72:	f7ff f864 	bl	ab3e <bt_l2cap_chan_del>
    ba76:	2300      	movs	r3, #0
    ba78:	4622      	mov	r2, r4
    ba7a:	2105      	movs	r1, #5
    ba7c:	4638      	mov	r0, r7
    ba7e:	e68a      	b.n	b796 <l2cap_recv+0x28e>
	if (buf->len < sizeof(*rsp)) {
    ba80:	2a03      	cmp	r2, #3
    ba82:	d814      	bhi.n	baae <l2cap_recv+0x5a6>
		BT_ERR("Too small LE disconn rsp packet size");
    ba84:	4b1b      	ldr	r3, [pc, #108]	; (baf4 <l2cap_recv+0x5ec>)
    ba86:	681b      	ldr	r3, [r3, #0]
    ba88:	0758      	lsls	r0, r3, #29
    ba8a:	f43f ad7d 	beq.w	b588 <l2cap_recv+0x80>
    ba8e:	2301      	movs	r3, #1
    ba90:	f04f 0200 	mov.w	r2, #0
    ba94:	f363 0202 	bfi	r2, r3, #0, #3
    ba98:	4917      	ldr	r1, [pc, #92]	; (baf8 <l2cap_recv+0x5f0>)
    ba9a:	4b18      	ldr	r3, [pc, #96]	; (bafc <l2cap_recv+0x5f4>)
    ba9c:	481c      	ldr	r0, [pc, #112]	; (bb10 <l2cap_recv+0x608>)
    ba9e:	1a5b      	subs	r3, r3, r1
    baa0:	f36f 02c5 	bfc	r2, #3, #3
    baa4:	08db      	lsrs	r3, r3, #3
    baa6:	f363 128f 	bfi	r2, r3, #6, #10
    baaa:	491a      	ldr	r1, [pc, #104]	; (bb14 <l2cap_recv+0x60c>)
    baac:	e547      	b.n	b53e <l2cap_recv+0x36>
	dcid = sys_le16_to_cpu(rsp->dcid);
    baae:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, dcid);
    bab0:	6830      	ldr	r0, [r6, #0]
    bab2:	8819      	ldrh	r1, [r3, #0]
    bab4:	f7fe ff6e 	bl	a994 <l2cap_remove_tx_cid>
	if (!chan) {
    bab8:	2800      	cmp	r0, #0
    baba:	d18a      	bne.n	b9d2 <l2cap_recv+0x4ca>
    babc:	e564      	b.n	b588 <l2cap_recv+0x80>
	if (buf->len < sizeof(*ev)) {
    babe:	2a03      	cmp	r2, #3
    bac0:	d82e      	bhi.n	bb20 <l2cap_recv+0x618>
		BT_ERR("Too small LE Credits packet size");
    bac2:	4b0c      	ldr	r3, [pc, #48]	; (baf4 <l2cap_recv+0x5ec>)
    bac4:	681b      	ldr	r3, [r3, #0]
    bac6:	0759      	lsls	r1, r3, #29
    bac8:	f43f ad5e 	beq.w	b588 <l2cap_recv+0x80>
    bacc:	2301      	movs	r3, #1
    bace:	f04f 0200 	mov.w	r2, #0
    bad2:	f363 0202 	bfi	r2, r3, #0, #3
    bad6:	4908      	ldr	r1, [pc, #32]	; (baf8 <l2cap_recv+0x5f0>)
    bad8:	4b08      	ldr	r3, [pc, #32]	; (bafc <l2cap_recv+0x5f4>)
    bada:	480f      	ldr	r0, [pc, #60]	; (bb18 <l2cap_recv+0x610>)
    badc:	1a5b      	subs	r3, r3, r1
    bade:	f36f 02c5 	bfc	r2, #3, #3
    bae2:	08db      	lsrs	r3, r3, #3
    bae4:	f363 128f 	bfi	r2, r3, #6, #10
    bae8:	490c      	ldr	r1, [pc, #48]	; (bb1c <l2cap_recv+0x614>)
    baea:	e528      	b.n	b53e <l2cap_recv+0x36>
    baec:	0002f5a0 	.word	0x0002f5a0
    baf0:	0000a9d9 	.word	0x0000a9d9
    baf4:	2000d754 	.word	0x2000d754
    baf8:	0002cff8 	.word	0x0002cff8
    bafc:	0002d080 	.word	0x0002d080
    bb00:	0002f935 	.word	0x0002f935
    bb04:	0002f62d 	.word	0x0002f62d
    bb08:	0002f95b 	.word	0x0002f95b
    bb0c:	0002f61e 	.word	0x0002f61e
    bb10:	0002f980 	.word	0x0002f980
    bb14:	0002f639 	.word	0x0002f639
    bb18:	0002f9a9 	.word	0x0002f9a9
    bb1c:	0002f648 	.word	0x0002f648
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    bb20:	68aa      	ldr	r2, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    bb22:	6830      	ldr	r0, [r6, #0]
    bb24:	8811      	ldrh	r1, [r2, #0]
    bb26:	f7ff f9dc 	bl	aee2 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    bb2a:	4604      	mov	r4, r0
    bb2c:	b9a0      	cbnz	r0, bb58 <l2cap_recv+0x650>
		BT_ERR("Unable to find channel of LE Credits packet");
    bb2e:	4b41      	ldr	r3, [pc, #260]	; (bc34 <l2cap_recv+0x72c>)
    bb30:	681b      	ldr	r3, [r3, #0]
    bb32:	075a      	lsls	r2, r3, #29
    bb34:	f43f ad28 	beq.w	b588 <l2cap_recv+0x80>
    bb38:	2301      	movs	r3, #1
    bb3a:	f04f 0200 	mov.w	r2, #0
    bb3e:	f363 0202 	bfi	r2, r3, #0, #3
    bb42:	493d      	ldr	r1, [pc, #244]	; (bc38 <l2cap_recv+0x730>)
    bb44:	4b3d      	ldr	r3, [pc, #244]	; (bc3c <l2cap_recv+0x734>)
    bb46:	1a5b      	subs	r3, r3, r1
    bb48:	f360 02c5 	bfi	r2, r0, #3, #3
    bb4c:	08db      	lsrs	r3, r3, #3
    bb4e:	f363 128f 	bfi	r2, r3, #6, #10
    bb52:	493b      	ldr	r1, [pc, #236]	; (bc40 <l2cap_recv+0x738>)
    bb54:	483b      	ldr	r0, [pc, #236]	; (bc44 <l2cap_recv+0x73c>)
    bb56:	e4f2      	b.n	b53e <l2cap_recv+0x36>
	credits = sys_le16_to_cpu(ev->credits);
    bb58:	8855      	ldrh	r5, [r2, #2]
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    bb5a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    bb5c:	442b      	add	r3, r5
    bb5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bb62:	d221      	bcs.n	bba8 <l2cap_recv+0x6a0>
	while (credits--) {
    bb64:	f64f 76ff 	movw	r6, #65535	; 0xffff
		k_sem_give(&chan->tx.credits);
    bb68:	f100 0760 	add.w	r7, r0, #96	; 0x60
	while (credits--) {
    bb6c:	3d01      	subs	r5, #1
    bb6e:	b2ad      	uxth	r5, r5
    bb70:	42b5      	cmp	r5, r6
    bb72:	d132      	bne.n	bbda <l2cap_recv+0x6d2>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    bb74:	f104 0578 	add.w	r5, r4, #120	; 0x78
		ch->tx_buf = NULL;
    bb78:	2600      	movs	r6, #0
	if (ch->tx_buf) {
    bb7a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    bb7e:	b381      	cbz	r1, bbe2 <l2cap_recv+0x6da>
		ch->tx_buf = NULL;
    bb80:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    bb84:	9104      	str	r1, [sp, #16]
    bb86:	2900      	cmp	r1, #0
    bb88:	f43f acfe 	beq.w	b588 <l2cap_recv+0x80>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    bb8c:	694a      	ldr	r2, [r1, #20]
    bb8e:	4620      	mov	r0, r4
    bb90:	a904      	add	r1, sp, #16
    bb92:	f7ff f931 	bl	adf8 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    bb96:	2800      	cmp	r0, #0
    bb98:	daef      	bge.n	bb7a <l2cap_recv+0x672>
			if (sent == -EAGAIN) {
    bb9a:	300b      	adds	r0, #11
    bb9c:	f47f acf4 	bne.w	b588 <l2cap_recv+0x80>
				ch->tx_buf = buf;
    bba0:	9b04      	ldr	r3, [sp, #16]
    bba2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    bba6:	e4ef      	b.n	b588 <l2cap_recv+0x80>
		BT_ERR("Credits overflow");
    bba8:	4b22      	ldr	r3, [pc, #136]	; (bc34 <l2cap_recv+0x72c>)
    bbaa:	681b      	ldr	r3, [r3, #0]
    bbac:	075b      	lsls	r3, r3, #29
    bbae:	d010      	beq.n	bbd2 <l2cap_recv+0x6ca>
    bbb0:	2301      	movs	r3, #1
    bbb2:	f04f 0200 	mov.w	r2, #0
    bbb6:	f363 0202 	bfi	r2, r3, #0, #3
    bbba:	491f      	ldr	r1, [pc, #124]	; (bc38 <l2cap_recv+0x730>)
    bbbc:	4b1f      	ldr	r3, [pc, #124]	; (bc3c <l2cap_recv+0x734>)
    bbbe:	4822      	ldr	r0, [pc, #136]	; (bc48 <l2cap_recv+0x740>)
    bbc0:	1a5b      	subs	r3, r3, r1
    bbc2:	f36f 02c5 	bfc	r2, #3, #3
    bbc6:	08db      	lsrs	r3, r3, #3
    bbc8:	f363 128f 	bfi	r2, r3, #6, #10
    bbcc:	491c      	ldr	r1, [pc, #112]	; (bc40 <l2cap_recv+0x738>)
    bbce:	f7f6 f8c3 	bl	1d58 <log_1>
		bt_l2cap_chan_disconnect(chan);
    bbd2:	4620      	mov	r0, r4
    bbd4:	f7ff fab4 	bl	b140 <bt_l2cap_chan_disconnect>
    bbd8:	e4d6      	b.n	b588 <l2cap_recv+0x80>
    bbda:	4638      	mov	r0, r7
    bbdc:	f020 fbcf 	bl	2c37e <_impl_k_sem_give>
    bbe0:	e7c4      	b.n	bb6c <l2cap_recv+0x664>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    bbe2:	4628      	mov	r0, r5
    bbe4:	f012 fc0a 	bl	1e3fc <net_buf_get>
    bbe8:	4601      	mov	r1, r0
    bbea:	e7cb      	b.n	bb84 <l2cap_recv+0x67c>
	chan = l2cap_remove_ident(conn, ident);
    bbec:	2201      	movs	r2, #1
    bbee:	4621      	mov	r1, r4
    bbf0:	6830      	ldr	r0, [r6, #0]
    bbf2:	f7fe fea5 	bl	a940 <__l2cap_lookup_ident>
    bbf6:	e75f      	b.n	bab8 <l2cap_recv+0x5b0>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    bbf8:	4b0e      	ldr	r3, [pc, #56]	; (bc34 <l2cap_recv+0x72c>)
    bbfa:	681b      	ldr	r3, [r3, #0]
    bbfc:	f003 0307 	and.w	r3, r3, #7
    bc00:	2b01      	cmp	r3, #1
    bc02:	d911      	bls.n	bc28 <l2cap_recv+0x720>
    bc04:	2202      	movs	r2, #2
    bc06:	f04f 0300 	mov.w	r3, #0
    bc0a:	f362 0302 	bfi	r3, r2, #0, #3
    bc0e:	490b      	ldr	r1, [pc, #44]	; (bc3c <l2cap_recv+0x734>)
    bc10:	4a09      	ldr	r2, [pc, #36]	; (bc38 <l2cap_recv+0x730>)
    bc12:	1a89      	subs	r1, r1, r2
    bc14:	08c9      	lsrs	r1, r1, #3
    bc16:	f36f 03c5 	bfc	r3, #3, #3
    bc1a:	f361 138f 	bfi	r3, r1, #6, #10
    bc1e:	4602      	mov	r2, r0
    bc20:	490a      	ldr	r1, [pc, #40]	; (bc4c <l2cap_recv+0x744>)
    bc22:	480b      	ldr	r0, [pc, #44]	; (bc50 <l2cap_recv+0x748>)
    bc24:	f7f6 f8ac 	bl	1d80 <log_2>
		l2cap_send_reject(chan->conn, hdr->ident,
    bc28:	2300      	movs	r3, #0
    bc2a:	7879      	ldrb	r1, [r7, #1]
    bc2c:	9300      	str	r3, [sp, #0]
    bc2e:	461a      	mov	r2, r3
    bc30:	6830      	ldr	r0, [r6, #0]
    bc32:	e514      	b.n	b65e <l2cap_recv+0x156>
    bc34:	2000d754 	.word	0x2000d754
    bc38:	0002cff8 	.word	0x0002cff8
    bc3c:	0002d080 	.word	0x0002d080
    bc40:	0002f648 	.word	0x0002f648
    bc44:	0002f9ce 	.word	0x0002f9ce
    bc48:	0002f9fe 	.word	0x0002f9fe
    bc4c:	0002f653 	.word	0x0002f653
    bc50:	0002fa13 	.word	0x0002fa13

0000bc54 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    bc54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bc56:	4605      	mov	r5, r0
    bc58:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    bc5a:	b371      	cbz	r1, bcba <bt_l2cap_chan_send+0x66>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    bc5c:	6803      	ldr	r3, [r0, #0]
    bc5e:	b37b      	cbz	r3, bcc0 <bt_l2cap_chan_send+0x6c>
    bc60:	7b5b      	ldrb	r3, [r3, #13]
    bc62:	2b04      	cmp	r3, #4
    bc64:	d12c      	bne.n	bcc0 <bt_l2cap_chan_send+0x6c>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    bc66:	2200      	movs	r2, #0
    bc68:	a901      	add	r1, sp, #4
    bc6a:	f7ff f8c5 	bl	adf8 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    bc6e:	1e04      	subs	r4, r0, #0
    bc70:	da09      	bge.n	bc86 <bt_l2cap_chan_send+0x32>
		if (err == -EAGAIN) {
    bc72:	f114 0f0b 	cmn.w	r4, #11
    bc76:	d109      	bne.n	bc8c <bt_l2cap_chan_send+0x38>
			/* Queue buffer to be sent later */
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    bc78:	9901      	ldr	r1, [sp, #4]
    bc7a:	f105 0078 	add.w	r0, r5, #120	; 0x78
    bc7e:	f012 fbda 	bl	1e436 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    bc82:	9b01      	ldr	r3, [sp, #4]
    bc84:	695c      	ldr	r4, [r3, #20]
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    bc86:	4620      	mov	r0, r4
    bc88:	b003      	add	sp, #12
    bc8a:	bd30      	pop	{r4, r5, pc}
		BT_ERR("failed to send message %d", err);
    bc8c:	4b0e      	ldr	r3, [pc, #56]	; (bcc8 <bt_l2cap_chan_send+0x74>)
    bc8e:	681b      	ldr	r3, [r3, #0]
    bc90:	075b      	lsls	r3, r3, #29
    bc92:	d0f8      	beq.n	bc86 <bt_l2cap_chan_send+0x32>
    bc94:	2201      	movs	r2, #1
    bc96:	f04f 0300 	mov.w	r3, #0
    bc9a:	f362 0302 	bfi	r3, r2, #0, #3
    bc9e:	490b      	ldr	r1, [pc, #44]	; (bccc <bt_l2cap_chan_send+0x78>)
    bca0:	4a0b      	ldr	r2, [pc, #44]	; (bcd0 <bt_l2cap_chan_send+0x7c>)
    bca2:	480c      	ldr	r0, [pc, #48]	; (bcd4 <bt_l2cap_chan_send+0x80>)
    bca4:	1a52      	subs	r2, r2, r1
    bca6:	08d2      	lsrs	r2, r2, #3
    bca8:	f36f 03c5 	bfc	r3, #3, #3
    bcac:	f362 138f 	bfi	r3, r2, #6, #10
    bcb0:	4909      	ldr	r1, [pc, #36]	; (bcd8 <bt_l2cap_chan_send+0x84>)
    bcb2:	4622      	mov	r2, r4
    bcb4:	f7f6 f864 	bl	1d80 <log_2>
    bcb8:	e7e5      	b.n	bc86 <bt_l2cap_chan_send+0x32>
		return -EINVAL;
    bcba:	f06f 0415 	mvn.w	r4, #21
    bcbe:	e7e2      	b.n	bc86 <bt_l2cap_chan_send+0x32>
		return -ENOTCONN;
    bcc0:	f06f 0438 	mvn.w	r4, #56	; 0x38
    bcc4:	e7df      	b.n	bc86 <bt_l2cap_chan_send+0x32>
    bcc6:	bf00      	nop
    bcc8:	2000d754 	.word	0x2000d754
    bccc:	0002cff8 	.word	0x0002cff8
    bcd0:	0002d080 	.word	0x0002d080
    bcd4:	0002f6cd 	.word	0x0002f6cd
    bcd8:	0002f6ba 	.word	0x0002f6ba

0000bcdc <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    bcdc:	2006      	movs	r0, #6
    bcde:	4770      	bx	lr

0000bce0 <att_op_get_type>:
		att_signed_write_cmd },
#endif /* CONFIG_BT_SIGNING */
};

static att_type_t att_op_get_type(u8_t op)
{
    bce0:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    bce2:	4a0a      	ldr	r2, [pc, #40]	; (bd0c <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    bce4:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    bce6:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    bcea:	4284      	cmp	r4, r0
    bcec:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    bcf0:	d102      	bne.n	bcf8 <att_op_get_type+0x18>
			return handlers[i].type;
    bcf2:	440a      	add	r2, r1
    bcf4:	7890      	ldrb	r0, [r2, #2]
	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
}
    bcf6:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    bcf8:	3301      	adds	r3, #1
    bcfa:	2b1c      	cmp	r3, #28
    bcfc:	d1f3      	bne.n	bce6 <att_op_get_type+0x6>
	return ATT_UNKNOWN;
    bcfe:	f010 0f40 	tst.w	r0, #64	; 0x40
    bd02:	bf14      	ite	ne
    bd04:	2000      	movne	r0, #0
    bd06:	2006      	moveq	r0, #6
    bd08:	e7f5      	b.n	bcf6 <att_op_get_type+0x16>
    bd0a:	bf00      	nop
    bd0c:	0002fc98 	.word	0x0002fc98

0000bd10 <att_req_destroy>:
{
    bd10:	b510      	push	{r4, lr}
    bd12:	4604      	mov	r4, r0
	if (req->buf) {
    bd14:	6900      	ldr	r0, [r0, #16]
    bd16:	b108      	cbz	r0, bd1c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    bd18:	f012 fb9a 	bl	1e450 <net_buf_unref>
	if (req->destroy) {
    bd1c:	68a3      	ldr	r3, [r4, #8]
    bd1e:	b10b      	cbz	r3, bd24 <att_req_destroy+0x14>
		req->destroy(req);
    bd20:	4620      	mov	r0, r4
    bd22:	4798      	blx	r3
	(void)memset(req, 0, sizeof(*req));
    bd24:	4620      	mov	r0, r4
    bd26:	2218      	movs	r2, #24
    bd28:	2100      	movs	r1, #0
}
    bd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(req, 0, sizeof(*req));
    bd2e:	f7fa b8d8 	b.w	5ee2 <memset>

0000bd32 <att_notify>:
{
    bd32:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    bd34:	f101 0008 	add.w	r0, r1, #8
    bd38:	f012 fc48 	bl	1e5cc <net_buf_simple_pull_le16>
}
    bd3c:	2000      	movs	r0, #0
    bd3e:	bd08      	pop	{r3, pc}

0000bd40 <read_group_cb>:
{
    bd40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    bd44:	680c      	ldr	r4, [r1, #0]
{
    bd46:	4606      	mov	r6, r0
    bd48:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bd4a:	f04f 0800 	mov.w	r8, #0
    bd4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bd52:	a902      	add	r1, sp, #8
    bd54:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    bd56:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bd58:	f88d 8008 	strb.w	r8, [sp, #8]
    bd5c:	f8ad 300a 	strh.w	r3, [sp, #10]
    bd60:	f7fa fe5e 	bl	6a20 <bt_uuid_cmp>
    bd64:	b198      	cbz	r0, bd8e <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bd66:	f642 0301 	movw	r3, #10241	; 0x2801
    bd6a:	a903      	add	r1, sp, #12
    bd6c:	6830      	ldr	r0, [r6, #0]
    bd6e:	f88d 800c 	strb.w	r8, [sp, #12]
    bd72:	f8ad 300e 	strh.w	r3, [sp, #14]
    bd76:	f7fa fe53 	bl	6a20 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bd7a:	b140      	cbz	r0, bd8e <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    bd7c:	692b      	ldr	r3, [r5, #16]
    bd7e:	b123      	cbz	r3, bd8a <read_group_cb+0x4a>
    bd80:	8a32      	ldrh	r2, [r6, #16]
    bd82:	8859      	ldrh	r1, [r3, #2]
    bd84:	4291      	cmp	r1, r2
    bd86:	d200      	bcs.n	bd8a <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    bd88:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    bd8a:	2001      	movs	r0, #1
    bd8c:	e012      	b.n	bdb4 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bd8e:	6869      	ldr	r1, [r5, #4]
    bd90:	6830      	ldr	r0, [r6, #0]
    bd92:	f7fa fe45 	bl	6a20 <bt_uuid_cmp>
    bd96:	b110      	cbz	r0, bd9e <read_group_cb+0x5e>
		data->group = NULL;
    bd98:	2300      	movs	r3, #0
    bd9a:	612b      	str	r3, [r5, #16]
    bd9c:	e7f5      	b.n	bd8a <read_group_cb+0x4a>
	if (data->rsp->len &&
    bd9e:	68eb      	ldr	r3, [r5, #12]
    bda0:	68a8      	ldr	r0, [r5, #8]
    bda2:	781a      	ldrb	r2, [r3, #0]
    bda4:	b14a      	cbz	r2, bdba <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    bda6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    bdaa:	8981      	ldrh	r1, [r0, #12]
    bdac:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    bdae:	4293      	cmp	r3, r2
    bdb0:	da03      	bge.n	bdba <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    bdb2:	2000      	movs	r0, #0
}
    bdb4:	b004      	add	sp, #16
    bdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    bdba:	2104      	movs	r1, #4
    bdbc:	3008      	adds	r0, #8
    bdbe:	f012 fba5 	bl	1e50c <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    bdc2:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    bdc4:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    bdc6:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    bdc8:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    bdca:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    bdcc:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    bdce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    bdd2:	6889      	ldr	r1, [r1, #8]
    bdd4:	2400      	movs	r4, #0
    bdd6:	1a9b      	subs	r3, r3, r2
    bdd8:	9400      	str	r4, [sp, #0]
    bdda:	440a      	add	r2, r1
    bddc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    bde0:	4631      	mov	r1, r6
    bde2:	b29b      	uxth	r3, r3
    bde4:	4638      	mov	r0, r7
    bde6:	47c0      	blx	r8
	if (read < 0) {
    bde8:	1e01      	subs	r1, r0, #0
    bdea:	dbe2      	blt.n	bdb2 <read_group_cb+0x72>
	if (!data->rsp->len) {
    bdec:	68ee      	ldr	r6, [r5, #12]
    bdee:	68ab      	ldr	r3, [r5, #8]
    bdf0:	7830      	ldrb	r0, [r6, #0]
    bdf2:	1d0a      	adds	r2, r1, #4
    bdf4:	b928      	cbnz	r0, be02 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
    bdf6:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
    bdf8:	f103 0008 	add.w	r0, r3, #8
    bdfc:	f012 fb86 	bl	1e50c <net_buf_simple_add>
    be00:	e7c3      	b.n	bd8a <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    be02:	4290      	cmp	r0, r2
    be04:	d0f8      	beq.n	bdf8 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
    be06:	899a      	ldrh	r2, [r3, #12]
    be08:	3a04      	subs	r2, #4
    be0a:	819a      	strh	r2, [r3, #12]
    be0c:	e7d1      	b.n	bdb2 <read_group_cb+0x72>

0000be0e <find_info_cb>:
	if (!data->rsp) {
    be0e:	688b      	ldr	r3, [r1, #8]
{
    be10:	b570      	push	{r4, r5, r6, lr}
    be12:	4605      	mov	r5, r0
    be14:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    be16:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    be18:	b963      	cbnz	r3, be34 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    be1a:	6848      	ldr	r0, [r1, #4]
    be1c:	2101      	movs	r1, #1
    be1e:	3008      	adds	r0, #8
    be20:	f012 fb74 	bl	1e50c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    be24:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    be26:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    be28:	781b      	ldrb	r3, [r3, #0]
    be2a:	2b00      	cmp	r3, #0
    be2c:	bf0c      	ite	eq
    be2e:	2301      	moveq	r3, #1
    be30:	2302      	movne	r3, #2
    be32:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    be34:	68a3      	ldr	r3, [r4, #8]
    be36:	781b      	ldrb	r3, [r3, #0]
    be38:	2b01      	cmp	r3, #1
    be3a:	d003      	beq.n	be44 <find_info_cb+0x36>
    be3c:	2b02      	cmp	r3, #2
    be3e:	d01a      	beq.n	be76 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    be40:	2000      	movs	r0, #0
    be42:	e017      	b.n	be74 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    be44:	682b      	ldr	r3, [r5, #0]
    be46:	781b      	ldrb	r3, [r3, #0]
    be48:	2b00      	cmp	r3, #0
    be4a:	d1f9      	bne.n	be40 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    be4c:	6860      	ldr	r0, [r4, #4]
    be4e:	2104      	movs	r1, #4
    be50:	3008      	adds	r0, #8
    be52:	f012 fb5b 	bl	1e50c <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    be56:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    be58:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    be5a:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    be5c:	682b      	ldr	r3, [r5, #0]
    be5e:	885b      	ldrh	r3, [r3, #2]
    be60:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    be62:	6863      	ldr	r3, [r4, #4]
    be64:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    be68:	899b      	ldrh	r3, [r3, #12]
    be6a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    be6c:	2804      	cmp	r0, #4
    be6e:	bf94      	ite	ls
    be70:	2000      	movls	r0, #0
    be72:	2001      	movhi	r0, #1
}
    be74:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    be76:	682b      	ldr	r3, [r5, #0]
    be78:	781b      	ldrb	r3, [r3, #0]
    be7a:	2b02      	cmp	r3, #2
    be7c:	d1e0      	bne.n	be40 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    be7e:	6860      	ldr	r0, [r4, #4]
    be80:	2112      	movs	r1, #18
    be82:	3008      	adds	r0, #8
    be84:	f012 fb42 	bl	1e50c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    be88:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    be8a:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    be8c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    be8e:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    be90:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    be94:	3101      	adds	r1, #1
    be96:	f7f9 fff7 	bl	5e88 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    be9a:	6863      	ldr	r3, [r4, #4]
    be9c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    bea0:	899b      	ldrh	r3, [r3, #12]
    bea2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    bea4:	2812      	cmp	r0, #18
    bea6:	e7e2      	b.n	be6e <find_info_cb+0x60>

0000bea8 <find_type_cb>:
{
    bea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    beac:	680e      	ldr	r6, [r1, #0]
{
    beae:	b088      	sub	sp, #32
    beb0:	4605      	mov	r5, r0
    beb2:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    beb4:	2700      	movs	r7, #0
    beb6:	f642 0301 	movw	r3, #10241	; 0x2801
    beba:	a902      	add	r1, sp, #8
    bebc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    bebe:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bec2:	f88d 7008 	strb.w	r7, [sp, #8]
    bec6:	f8ad 300a 	strh.w	r3, [sp, #10]
    beca:	f7fa fda9 	bl	6a20 <bt_uuid_cmp>
    bece:	b928      	cbnz	r0, bedc <find_type_cb+0x34>
		data->group = NULL;
    bed0:	2300      	movs	r3, #0
    bed2:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    bed4:	2001      	movs	r0, #1
}
    bed6:	b008      	add	sp, #32
    bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    bedc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bee0:	a903      	add	r1, sp, #12
    bee2:	6828      	ldr	r0, [r5, #0]
    bee4:	f88d 700c 	strb.w	r7, [sp, #12]
    bee8:	f8ad 300e 	strh.w	r3, [sp, #14]
    beec:	f7fa fd98 	bl	6a20 <bt_uuid_cmp>
    bef0:	b140      	cbz	r0, bf04 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    bef2:	68a3      	ldr	r3, [r4, #8]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d0ed      	beq.n	bed4 <find_type_cb+0x2c>
    bef8:	8a2a      	ldrh	r2, [r5, #16]
    befa:	8859      	ldrh	r1, [r3, #2]
    befc:	4291      	cmp	r1, r2
    befe:	d2e9      	bcs.n	bed4 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    bf00:	805a      	strh	r2, [r3, #2]
    bf02:	e7e7      	b.n	bed4 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    bf04:	6862      	ldr	r2, [r4, #4]
    bf06:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    bf0a:	8992      	ldrh	r2, [r2, #12]
    bf0c:	1a9b      	subs	r3, r3, r2
    bf0e:	2b03      	cmp	r3, #3
    bf10:	d9e1      	bls.n	bed6 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    bf12:	2310      	movs	r3, #16
    bf14:	9000      	str	r0, [sp, #0]
    bf16:	686e      	ldr	r6, [r5, #4]
    bf18:	eb0d 0203 	add.w	r2, sp, r3
    bf1c:	4629      	mov	r1, r5
    bf1e:	4640      	mov	r0, r8
    bf20:	47b0      	blx	r6
	if (read < 0) {
    bf22:	2800      	cmp	r0, #0
    bf24:	dbd4      	blt.n	bed0 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    bf26:	7c22      	ldrb	r2, [r4, #16]
    bf28:	4282      	cmp	r2, r0
    bf2a:	d1d1      	bne.n	bed0 <find_type_cb+0x28>
    bf2c:	a904      	add	r1, sp, #16
    bf2e:	68e0      	ldr	r0, [r4, #12]
    bf30:	f7f9 ff83 	bl	5e3a <memcmp>
    bf34:	2800      	cmp	r0, #0
    bf36:	d1cb      	bne.n	bed0 <find_type_cb+0x28>
	data->err = 0x00;
    bf38:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    bf3a:	6860      	ldr	r0, [r4, #4]
    bf3c:	2104      	movs	r1, #4
    bf3e:	3008      	adds	r0, #8
    bf40:	f012 fae4 	bl	1e50c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    bf44:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    bf46:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    bf48:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    bf4a:	8043      	strh	r3, [r0, #2]
    bf4c:	e7c2      	b.n	bed4 <find_type_cb+0x2c>
	...

0000bf50 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    bf50:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bf52:	2317      	movs	r3, #23
{
    bf54:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bf56:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bf5a:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    bf5c:	4905      	ldr	r1, [pc, #20]	; (bf74 <bt_att_connected+0x24>)
    bf5e:	30a4      	adds	r0, #164	; 0xa4
    bf60:	f020 fbd6 	bl	2c710 <k_delayed_work_init>
	list->head = NULL;
    bf64:	2300      	movs	r3, #0
	list->tail = NULL;
    bf66:	e9c4 3327 	strd	r3, r3, [r4, #156]	; 0x9c
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    bf6a:	6820      	ldr	r0, [r4, #0]
}
    bf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    bf70:	f001 be24 	b.w	dbbc <bt_gatt_connected>
    bf74:	0000c599 	.word	0x0000c599

0000bf78 <check_perm>:
{
    bf78:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    bf7a:	07d4      	lsls	r4, r2, #31
    bf7c:	7c8b      	ldrb	r3, [r1, #18]
    bf7e:	d504      	bpl.n	bf8a <check_perm+0x12>
    bf80:	f013 0f15 	tst.w	r3, #21
    bf84:	d018      	beq.n	bfb8 <check_perm+0x40>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    bf86:	684c      	ldr	r4, [r1, #4]
    bf88:	b1b4      	cbz	r4, bfb8 <check_perm+0x40>
	if ((mask & BT_GATT_PERM_WRITE) &&
    bf8a:	0794      	lsls	r4, r2, #30
    bf8c:	d504      	bpl.n	bf98 <check_perm+0x20>
    bf8e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    bf92:	d013      	beq.n	bfbc <check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    bf94:	6889      	ldr	r1, [r1, #8]
    bf96:	b189      	cbz	r1, bfbc <check_perm+0x44>
	mask &= attr->perm;
    bf98:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    bf9a:	f012 0f30 	tst.w	r2, #48	; 0x30
    bf9e:	d002      	beq.n	bfa6 <check_perm+0x2e>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    bfa0:	7a43      	ldrb	r3, [r0, #9]
    bfa2:	2b02      	cmp	r3, #2
    bfa4:	d90c      	bls.n	bfc0 <check_perm+0x48>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    bfa6:	f012 020c 	ands.w	r2, r2, #12
    bfaa:	d00b      	beq.n	bfc4 <check_perm+0x4c>
		if (!conn->encrypt) {
    bfac:	7ac3      	ldrb	r3, [r0, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    bfae:	2b00      	cmp	r3, #0
    bfb0:	bf14      	ite	ne
    bfb2:	2000      	movne	r0, #0
    bfb4:	200f      	moveq	r0, #15
}
    bfb6:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    bfb8:	2002      	movs	r0, #2
    bfba:	e7fc      	b.n	bfb6 <check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    bfbc:	2003      	movs	r0, #3
    bfbe:	e7fa      	b.n	bfb6 <check_perm+0x3e>
			return BT_ATT_ERR_AUTHENTICATION;
    bfc0:	2005      	movs	r0, #5
    bfc2:	e7f8      	b.n	bfb6 <check_perm+0x3e>
	return 0;
    bfc4:	4610      	mov	r0, r2
    bfc6:	e7f6      	b.n	bfb6 <check_perm+0x3e>

0000bfc8 <read_type_cb>:
{
    bfc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    bfcc:	680f      	ldr	r7, [r1, #0]
{
    bfce:	4605      	mov	r5, r0
    bfd0:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bfd2:	6800      	ldr	r0, [r0, #0]
    bfd4:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    bfd6:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bfda:	f7fa fd21 	bl	6a20 <bt_uuid_cmp>
    bfde:	4680      	mov	r8, r0
    bfe0:	2800      	cmp	r0, #0
    bfe2:	d14c      	bne.n	c07e <read_type_cb+0xb6>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    bfe4:	2215      	movs	r2, #21
    bfe6:	4629      	mov	r1, r5
    bfe8:	4648      	mov	r0, r9
    bfea:	f7ff ffc5 	bl	bf78 <check_perm>
    bfee:	4604      	mov	r4, r0
    bff0:	7530      	strb	r0, [r6, #20]
	if (data->err) {
    bff2:	b148      	cbz	r0, c008 <read_type_cb+0x40>
		if (data->rsp->len) {
    bff4:	68f3      	ldr	r3, [r6, #12]
    bff6:	781c      	ldrb	r4, [r3, #0]
    bff8:	b114      	cbz	r4, c000 <read_type_cb+0x38>
			data->err = 0x00;
    bffa:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
    bffe:	4644      	mov	r4, r8
}
    c000:	4620      	mov	r0, r4
    c002:	b003      	add	sp, #12
    c004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    c008:	68b0      	ldr	r0, [r6, #8]
    c00a:	2102      	movs	r1, #2
    c00c:	3008      	adds	r0, #8
    c00e:	f012 fa7d 	bl	1e50c <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c012:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c014:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c016:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    c018:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c01a:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c01c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    c020:	6889      	ldr	r1, [r1, #8]
    c022:	9400      	str	r4, [sp, #0]
    c024:	1a9b      	subs	r3, r3, r2
    c026:	f8d5 8004 	ldr.w	r8, [r5, #4]
    c02a:	440a      	add	r2, r1
    c02c:	b29b      	uxth	r3, r3
    c02e:	4629      	mov	r1, r5
    c030:	4648      	mov	r0, r9
    c032:	47c0      	blx	r8
	if (read < 0) {
    c034:	1e01      	subs	r1, r0, #0
    c036:	da07      	bge.n	c048 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    c038:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
    c03c:	bf26      	itte	cs
    c03e:	4249      	negcs	r1, r1
    c040:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    c042:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
    c044:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
    c046:	e7db      	b.n	c000 <read_type_cb+0x38>
	if (!data->rsp->len) {
    c048:	68f5      	ldr	r5, [r6, #12]
    c04a:	68b0      	ldr	r0, [r6, #8]
    c04c:	782a      	ldrb	r2, [r5, #0]
    c04e:	1c8b      	adds	r3, r1, #2
    c050:	b97a      	cbnz	r2, c072 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    c052:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
    c054:	3008      	adds	r0, #8
    c056:	f012 fa59 	bl	1e50c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    c05a:	68b3      	ldr	r3, [r6, #8]
    c05c:	f8b7 405a 	ldrh.w	r4, [r7, #90]	; 0x5a
    c060:	899b      	ldrh	r3, [r3, #12]
    c062:	1ae4      	subs	r4, r4, r3
    c064:	68f3      	ldr	r3, [r6, #12]
    c066:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c068:	429c      	cmp	r4, r3
    c06a:	bfd4      	ite	le
    c06c:	2400      	movle	r4, #0
    c06e:	2401      	movgt	r4, #1
    c070:	e7c6      	b.n	c000 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    c072:	429a      	cmp	r2, r3
    c074:	d0ee      	beq.n	c054 <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    c076:	8983      	ldrh	r3, [r0, #12]
    c078:	3b02      	subs	r3, #2
    c07a:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
    c07c:	e7c0      	b.n	c000 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    c07e:	2401      	movs	r4, #1
    c080:	e7be      	b.n	c000 <read_type_cb+0x38>
	...

0000c084 <att_cb.isra.6>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    c084:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    c086:	7800      	ldrb	r0, [r0, #0]
    c088:	f7ff fe2a 	bl	bce0 <att_op_get_type>
    c08c:	3801      	subs	r0, #1
    c08e:	b2c0      	uxtb	r0, r0
    c090:	2804      	cmp	r0, #4
    c092:	bf96      	itet	ls
    c094:	4b02      	ldrls	r3, [pc, #8]	; (c0a0 <att_cb.isra.6+0x1c>)
    c096:	4803      	ldrhi	r0, [pc, #12]	; (c0a4 <att_cb.isra.6+0x20>)
    c098:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    c09c:	bd08      	pop	{r3, pc}
    c09e:	bf00      	nop
    c0a0:	0002fa54 	.word	0x0002fa54
    c0a4:	0000c255 	.word	0x0000c255

0000c0a8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    c0a8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    c0aa:	4d16      	ldr	r5, [pc, #88]	; (c104 <bt_att_accept+0x5c>)
    c0ac:	682c      	ldr	r4, [r5, #0]
{
    c0ae:	4602      	mov	r2, r0
    c0b0:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    c0b2:	b97c      	cbnz	r4, c0d4 <bt_att_accept+0x2c>
			continue;
		}

		(void)memset(att, 0, sizeof(*att));
    c0b4:	22dc      	movs	r2, #220	; 0xdc
    c0b6:	4621      	mov	r1, r4
    c0b8:	4628      	mov	r0, r5
    c0ba:	f7f9 ff12 	bl	5ee2 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    c0be:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    c0c0:	4b11      	ldr	r3, [pc, #68]	; (c108 <bt_att_accept+0x60>)
    c0c2:	606b      	str	r3, [r5, #4]
    c0c4:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    c0c8:	4611      	mov	r1, r2
    c0ca:	f020 f94f 	bl	2c36c <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    c0ce:	6035      	str	r5, [r6, #0]

		return 0;
    c0d0:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    c0d2:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    c0d4:	4b0d      	ldr	r3, [pc, #52]	; (c10c <bt_att_accept+0x64>)
    c0d6:	681b      	ldr	r3, [r3, #0]
    c0d8:	075b      	lsls	r3, r3, #29
    c0da:	d010      	beq.n	c0fe <bt_att_accept+0x56>
    c0dc:	2101      	movs	r1, #1
    c0de:	f04f 0300 	mov.w	r3, #0
    c0e2:	f361 0302 	bfi	r3, r1, #0, #3
    c0e6:	480a      	ldr	r0, [pc, #40]	; (c110 <bt_att_accept+0x68>)
    c0e8:	490a      	ldr	r1, [pc, #40]	; (c114 <bt_att_accept+0x6c>)
    c0ea:	1a09      	subs	r1, r1, r0
    c0ec:	08c9      	lsrs	r1, r1, #3
    c0ee:	f36f 03c5 	bfc	r3, #3, #3
    c0f2:	f361 138f 	bfi	r3, r1, #6, #10
    c0f6:	4808      	ldr	r0, [pc, #32]	; (c118 <bt_att_accept+0x70>)
    c0f8:	4908      	ldr	r1, [pc, #32]	; (c11c <bt_att_accept+0x74>)
    c0fa:	f7f5 fe41 	bl	1d80 <log_2>
	return -ENOMEM;
    c0fe:	f06f 000b 	mvn.w	r0, #11
    c102:	e7e6      	b.n	c0d2 <bt_att_accept+0x2a>
    c104:	20000bb8 	.word	0x20000bb8
    c108:	2000cde4 	.word	0x2000cde4
    c10c:	2000d714 	.word	0x2000d714
    c110:	0002cff8 	.word	0x0002cff8
    c114:	0002d000 	.word	0x0002d000
    c118:	0002fba2 	.word	0x0002fba2
    c11c:	0002fab5 	.word	0x0002fab5

0000c120 <uuid_create>:
	switch (buf->len) {
    c120:	898a      	ldrh	r2, [r1, #12]
    c122:	2a02      	cmp	r2, #2
{
    c124:	b510      	push	{r4, lr}
    c126:	4604      	mov	r4, r0
	switch (buf->len) {
    c128:	d003      	beq.n	c132 <uuid_create+0x12>
    c12a:	2a10      	cmp	r2, #16
    c12c:	d00a      	beq.n	c144 <uuid_create+0x24>
	return false;
    c12e:	2000      	movs	r0, #0
    c130:	e007      	b.n	c142 <uuid_create+0x22>
		uuid->type = BT_UUID_TYPE_16;
    c132:	2300      	movs	r3, #0
    c134:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    c136:	f101 0008 	add.w	r0, r1, #8
    c13a:	f012 fa47 	bl	1e5cc <net_buf_simple_pull_le16>
    c13e:	8060      	strh	r0, [r4, #2]
		return true;
    c140:	2001      	movs	r0, #1
}
    c142:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    c144:	2302      	movs	r3, #2
    c146:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    c14a:	6889      	ldr	r1, [r1, #8]
    c14c:	f7f9 fe9c 	bl	5e88 <memcpy>
    c150:	e7f6      	b.n	c140 <uuid_create+0x20>
	...

0000c154 <att_req_sent>:
{
    c154:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c156:	2104      	movs	r1, #4
    c158:	f7fe fec3 	bl	aee2 <bt_l2cap_le_lookup_tx_cid>
    c15c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    c15e:	30c4      	adds	r0, #196	; 0xc4
    c160:	f020 f90d 	bl	2c37e <_impl_k_sem_give>
	if (att->req) {
    c164:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    c168:	b143      	cbz	r3, c17c <att_req_sent+0x28>
    c16a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    c16e:	f247 5230 	movw	r2, #30000	; 0x7530
    c172:	4803      	ldr	r0, [pc, #12]	; (c180 <att_req_sent+0x2c>)
}
    c174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c178:	f020 bb22 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
    c17c:	bd10      	pop	{r4, pc}
    c17e:	bf00      	nop
    c180:	200031d8 	.word	0x200031d8

0000c184 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    c184:	7b41      	ldrb	r1, [r0, #13]
    c186:	2904      	cmp	r1, #4
{
    c188:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    c18a:	d019      	beq.n	c1c0 <att_chan_get+0x3c>
		BT_WARN("Not connected");
    c18c:	4b29      	ldr	r3, [pc, #164]	; (c234 <att_chan_get+0xb0>)
    c18e:	681b      	ldr	r3, [r3, #0]
    c190:	f003 0307 	and.w	r3, r3, #7
    c194:	2b01      	cmp	r3, #1
    c196:	d801      	bhi.n	c19c <att_chan_get+0x18>
		return NULL;
    c198:	2400      	movs	r4, #0
    c19a:	e02a      	b.n	c1f2 <att_chan_get+0x6e>
		BT_WARN("Not connected");
    c19c:	2302      	movs	r3, #2
    c19e:	f04f 0200 	mov.w	r2, #0
    c1a2:	f363 0202 	bfi	r2, r3, #0, #3
    c1a6:	4924      	ldr	r1, [pc, #144]	; (c238 <att_chan_get+0xb4>)
    c1a8:	4b24      	ldr	r3, [pc, #144]	; (c23c <att_chan_get+0xb8>)
    c1aa:	4825      	ldr	r0, [pc, #148]	; (c240 <att_chan_get+0xbc>)
    c1ac:	1a5b      	subs	r3, r3, r1
    c1ae:	f36f 02c5 	bfc	r2, #3, #3
    c1b2:	08db      	lsrs	r3, r3, #3
    c1b4:	4923      	ldr	r1, [pc, #140]	; (c244 <att_chan_get+0xc0>)
    c1b6:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    c1ba:	f7f5 fdcd 	bl	1d58 <log_1>
    c1be:	e7eb      	b.n	c198 <att_chan_get+0x14>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c1c0:	f7fe fe9a 	bl	aef8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c1c4:	4604      	mov	r4, r0
    c1c6:	b9b0      	cbnz	r0, c1f6 <att_chan_get+0x72>
		BT_ERR("Unable to find ATT channel");
    c1c8:	4b1a      	ldr	r3, [pc, #104]	; (c234 <att_chan_get+0xb0>)
    c1ca:	681b      	ldr	r3, [r3, #0]
    c1cc:	075a      	lsls	r2, r3, #29
    c1ce:	d0e3      	beq.n	c198 <att_chan_get+0x14>
    c1d0:	2301      	movs	r3, #1
    c1d2:	f04f 0200 	mov.w	r2, #0
    c1d6:	f363 0202 	bfi	r2, r3, #0, #3
    c1da:	4917      	ldr	r1, [pc, #92]	; (c238 <att_chan_get+0xb4>)
    c1dc:	4b17      	ldr	r3, [pc, #92]	; (c23c <att_chan_get+0xb8>)
    c1de:	1a5b      	subs	r3, r3, r1
    c1e0:	f360 02c5 	bfi	r2, r0, #3, #3
    c1e4:	08db      	lsrs	r3, r3, #3
    c1e6:	f363 128f 	bfi	r2, r3, #6, #10
    c1ea:	4916      	ldr	r1, [pc, #88]	; (c244 <att_chan_get+0xc0>)
    c1ec:	4816      	ldr	r0, [pc, #88]	; (c248 <att_chan_get+0xc4>)
    c1ee:	f7f5 fdb3 	bl	1d58 <log_1>
}
    c1f2:	4620      	mov	r0, r4
    c1f4:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c1f6:	f3bf 8f5b 	dmb	ish
    c1fa:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    c1fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    c202:	075b      	lsls	r3, r3, #29
    c204:	d5f5      	bpl.n	c1f2 <att_chan_get+0x6e>
		BT_WARN("ATT context flagged as disconnected");
    c206:	4b0b      	ldr	r3, [pc, #44]	; (c234 <att_chan_get+0xb0>)
    c208:	681b      	ldr	r3, [r3, #0]
    c20a:	f003 0307 	and.w	r3, r3, #7
    c20e:	2b01      	cmp	r3, #1
    c210:	d9c2      	bls.n	c198 <att_chan_get+0x14>
    c212:	2302      	movs	r3, #2
    c214:	f04f 0200 	mov.w	r2, #0
    c218:	f363 0202 	bfi	r2, r3, #0, #3
    c21c:	4906      	ldr	r1, [pc, #24]	; (c238 <att_chan_get+0xb4>)
    c21e:	4b07      	ldr	r3, [pc, #28]	; (c23c <att_chan_get+0xb8>)
    c220:	480a      	ldr	r0, [pc, #40]	; (c24c <att_chan_get+0xc8>)
    c222:	1a5b      	subs	r3, r3, r1
    c224:	f36f 02c5 	bfc	r2, #3, #3
    c228:	08db      	lsrs	r3, r3, #3
    c22a:	f363 128f 	bfi	r2, r3, #6, #10
    c22e:	4905      	ldr	r1, [pc, #20]	; (c244 <att_chan_get+0xc0>)
    c230:	e7c3      	b.n	c1ba <att_chan_get+0x36>
    c232:	bf00      	nop
    c234:	2000d714 	.word	0x2000d714
    c238:	0002cff8 	.word	0x0002cff8
    c23c:	0002d000 	.word	0x0002d000
    c240:	0002faf4 	.word	0x0002faf4
    c244:	0002fa74 	.word	0x0002fa74
    c248:	0002fb06 	.word	0x0002fb06
    c24c:	0002fb25 	.word	0x0002fb25

0000c250 <att_exec_write_req>:
    c250:	2006      	movs	r0, #6
    c252:	4770      	bx	lr

0000c254 <att_pdu_sent>:
{
    c254:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c256:	2104      	movs	r1, #4
    c258:	f7fe fe43 	bl	aee2 <bt_l2cap_le_lookup_tx_cid>
}
    c25c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c260:	30c4      	adds	r0, #196	; 0xc4
    c262:	f020 b88c 	b.w	2c37e <_impl_k_sem_give>

0000c266 <att_rsp_sent>:
{
    c266:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c268:	2104      	movs	r1, #4
    c26a:	f7fe fe3a 	bl	aee2 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c26e:	f3bf 8f5b 	dmb	ish
    c272:	f100 0394 	add.w	r3, r0, #148	; 0x94
    c276:	e853 2f00 	ldrex	r2, [r3]
    c27a:	f022 0201 	bic.w	r2, r2, #1
    c27e:	e843 2100 	strex	r1, r2, [r3]
    c282:	2900      	cmp	r1, #0
    c284:	d1f7      	bne.n	c276 <att_rsp_sent+0x10>
    c286:	f3bf 8f5b 	dmb	ish
    c28a:	30c4      	adds	r0, #196	; 0xc4
}
    c28c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c290:	f020 b875 	b.w	2c37e <_impl_k_sem_give>

0000c294 <att_cfm_sent>:
{
    c294:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c296:	2104      	movs	r1, #4
    c298:	f7fe fe23 	bl	aee2 <bt_l2cap_le_lookup_tx_cid>
    c29c:	f3bf 8f5b 	dmb	ish
    c2a0:	f100 0394 	add.w	r3, r0, #148	; 0x94
    c2a4:	e853 2f00 	ldrex	r2, [r3]
    c2a8:	f022 0202 	bic.w	r2, r2, #2
    c2ac:	e843 2100 	strex	r1, r2, [r3]
    c2b0:	2900      	cmp	r1, #0
    c2b2:	d1f7      	bne.n	c2a4 <att_cfm_sent+0x10>
    c2b4:	f3bf 8f5b 	dmb	ish
    c2b8:	30c4      	adds	r0, #196	; 0xc4
}
    c2ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c2be:	f020 b85e 	b.w	2c37e <_impl_k_sem_give>

0000c2c2 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    c2c2:	6803      	ldr	r3, [r0, #0]
    c2c4:	7b5b      	ldrb	r3, [r3, #13]
    c2c6:	2b04      	cmp	r3, #4
    c2c8:	d10a      	bne.n	c2e0 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c2ca:	f3bf 8f5b 	dmb	ish
    c2ce:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    c2d2:	f3bf 8f5b 	dmb	ish
    c2d6:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    c2da:	f000 0001 	and.w	r0, r0, #1
    c2de:	4770      	bx	lr
    c2e0:	2001      	movs	r0, #1
}
    c2e2:	4770      	bx	lr

0000c2e4 <att_send_req>:
{
    c2e4:	b570      	push	{r4, r5, r6, lr}
    c2e6:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    c2e8:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
	att->req = req;
    c2ec:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    c2f0:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    c2f2:	4630      	mov	r0, r6
    c2f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c2f8:	f020 f868 	bl	2c3cc <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    c2fc:	4628      	mov	r0, r5
    c2fe:	f7ff ffe0 	bl	c2c2 <att_is_connected>
    c302:	b9e0      	cbnz	r0, c33e <att_send_req+0x5a>
		BT_WARN("Disconnected");
    c304:	4b1a      	ldr	r3, [pc, #104]	; (c370 <att_send_req+0x8c>)
    c306:	681b      	ldr	r3, [r3, #0]
    c308:	f003 0307 	and.w	r3, r3, #7
    c30c:	2b01      	cmp	r3, #1
    c30e:	d910      	bls.n	c332 <att_send_req+0x4e>
    c310:	2302      	movs	r3, #2
    c312:	f04f 0200 	mov.w	r2, #0
    c316:	f363 0202 	bfi	r2, r3, #0, #3
    c31a:	4916      	ldr	r1, [pc, #88]	; (c374 <att_send_req+0x90>)
    c31c:	4b16      	ldr	r3, [pc, #88]	; (c378 <att_send_req+0x94>)
    c31e:	1a5b      	subs	r3, r3, r1
    c320:	f360 02c5 	bfi	r2, r0, #3, #3
    c324:	08db      	lsrs	r3, r3, #3
    c326:	f363 128f 	bfi	r2, r3, #6, #10
    c32a:	4914      	ldr	r1, [pc, #80]	; (c37c <att_send_req+0x98>)
    c32c:	4814      	ldr	r0, [pc, #80]	; (c380 <att_send_req+0x9c>)
    c32e:	f7f5 fd13 	bl	1d58 <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    c332:	4630      	mov	r0, r6
    c334:	f020 f823 	bl	2c37e <_impl_k_sem_give>
		return -ENOTCONN;
    c338:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    c33c:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    c33e:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    c340:	f106 0008 	add.w	r0, r6, #8
    c344:	f012 f94a 	bl	1e5dc <net_buf_simple_headroom>
	state->len = buf->len;
    c348:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    c34a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    c34c:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    c34e:	6920      	ldr	r0, [r4, #16]
    c350:	682d      	ldr	r5, [r5, #0]
    c352:	f012 f8ab 	bl	1e4ac <net_buf_ref>
    c356:	6923      	ldr	r3, [r4, #16]
    c358:	4606      	mov	r6, r0
    c35a:	6898      	ldr	r0, [r3, #8]
    c35c:	f7ff fe92 	bl	c084 <att_cb.isra.6>
    c360:	4632      	mov	r2, r6
    c362:	4603      	mov	r3, r0
    c364:	2104      	movs	r1, #4
    c366:	4628      	mov	r0, r5
    c368:	f7fe fc48 	bl	abfc <bt_l2cap_send_cb>
	return 0;
    c36c:	2000      	movs	r0, #0
    c36e:	e7e5      	b.n	c33c <att_send_req+0x58>
    c370:	2000d714 	.word	0x2000d714
    c374:	0002cff8 	.word	0x0002cff8
    c378:	0002d000 	.word	0x0002d000
    c37c:	0002fac3 	.word	0x0002fac3
    c380:	0002fb68 	.word	0x0002fb68

0000c384 <att_handle_rsp>:
{
    c384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c388:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    c38a:	30a4      	adds	r0, #164	; 0xa4
{
    c38c:	461e      	mov	r6, r3
    c38e:	460f      	mov	r7, r1
    c390:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    c392:	f020 f9c6 	bl	2c722 <k_delayed_work_cancel>
	if (!att->req) {
    c396:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    c39a:	bb4b      	cbnz	r3, c3f0 <att_handle_rsp+0x6c>
		BT_WARN("No pending ATT request");
    c39c:	4a23      	ldr	r2, [pc, #140]	; (c42c <att_handle_rsp+0xa8>)
    c39e:	6812      	ldr	r2, [r2, #0]
    c3a0:	f002 0207 	and.w	r2, r2, #7
    c3a4:	2a01      	cmp	r2, #1
    c3a6:	d910      	bls.n	c3ca <att_handle_rsp+0x46>
    c3a8:	2102      	movs	r1, #2
    c3aa:	f04f 0200 	mov.w	r2, #0
    c3ae:	f361 0202 	bfi	r2, r1, #0, #3
    c3b2:	f363 02c5 	bfi	r2, r3, #3, #3
    c3b6:	491e      	ldr	r1, [pc, #120]	; (c430 <att_handle_rsp+0xac>)
    c3b8:	4b1e      	ldr	r3, [pc, #120]	; (c434 <att_handle_rsp+0xb0>)
    c3ba:	481f      	ldr	r0, [pc, #124]	; (c438 <att_handle_rsp+0xb4>)
    c3bc:	1a5b      	subs	r3, r3, r1
    c3be:	08db      	lsrs	r3, r3, #3
    c3c0:	f363 128f 	bfi	r2, r3, #6, #10
    c3c4:	491d      	ldr	r1, [pc, #116]	; (c43c <att_handle_rsp+0xb8>)
    c3c6:	f7f5 fcc7 	bl	1d58 <log_1>
Z_GENLIST_IS_EMPTY(slist)
    c3ca:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode)
    c3ce:	b159      	cbz	r1, c3e8 <att_handle_rsp+0x64>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c3d0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    c3d4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    c3d6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c3da:	4291      	cmp	r1, r2
	list->tail = node;
    c3dc:	bf08      	it	eq
    c3de:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    c3e2:	4620      	mov	r0, r4
    c3e4:	f7ff ff7e 	bl	c2e4 <att_send_req>
}
    c3e8:	2000      	movs	r0, #0
    c3ea:	b003      	add	sp, #12
    c3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    c3f0:	6918      	ldr	r0, [r3, #16]
    c3f2:	b128      	cbz	r0, c400 <att_handle_rsp+0x7c>
		net_buf_unref(att->req->buf);
    c3f4:	f012 f82c 	bl	1e450 <net_buf_unref>
		att->req->buf = NULL;
    c3f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    c3fc:	2200      	movs	r2, #0
    c3fe:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    c400:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    c404:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    c406:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    c40a:	2500      	movs	r5, #0
    c40c:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    c40e:	463a      	mov	r2, r7
    c410:	9300      	str	r3, [sp, #0]
    c412:	4631      	mov	r1, r6
    c414:	4643      	mov	r3, r8
    c416:	47c8      	blx	r9
	if (!att->req->func) {
    c418:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c41c:	6843      	ldr	r3, [r0, #4]
    c41e:	b90b      	cbnz	r3, c424 <att_handle_rsp+0xa0>
		att_req_destroy(att->req);
    c420:	f7ff fc76 	bl	bd10 <att_req_destroy>
	att->req = NULL;
    c424:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    c428:	e7cf      	b.n	c3ca <att_handle_rsp+0x46>
    c42a:	bf00      	nop
    c42c:	2000d714 	.word	0x2000d714
    c430:	0002cff8 	.word	0x0002cff8
    c434:	0002d000 	.word	0x0002d000
    c438:	0002fb4d 	.word	0x0002fb4d
    c43c:	0002fad0 	.word	0x0002fad0

0000c440 <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    c440:	898a      	ldrh	r2, [r1, #12]
    c442:	6889      	ldr	r1, [r1, #8]
    c444:	2300      	movs	r3, #0
    c446:	f7ff bf9d 	b.w	c384 <att_handle_rsp>

0000c44a <att_handle_find_type_rsp>:
    c44a:	f7ff bff9 	b.w	c440 <att_handle_find_info_rsp>

0000c44e <att_handle_read_type_rsp>:
    c44e:	f7ff bff7 	b.w	c440 <att_handle_find_info_rsp>

0000c452 <att_handle_read_rsp>:
    c452:	f7ff bff5 	b.w	c440 <att_handle_find_info_rsp>

0000c456 <att_handle_read_blob_rsp>:
    c456:	f7ff bff3 	b.w	c440 <att_handle_find_info_rsp>

0000c45a <att_handle_read_mult_rsp>:
    c45a:	f7ff bff1 	b.w	c440 <att_handle_find_info_rsp>

0000c45e <att_handle_read_group_rsp>:
    c45e:	f7ff bfef 	b.w	c440 <att_handle_find_info_rsp>

0000c462 <att_handle_write_rsp>:
    c462:	f7ff bfed 	b.w	c440 <att_handle_find_info_rsp>

0000c466 <att_handle_prepare_write_rsp>:
    c466:	f7ff bfeb 	b.w	c440 <att_handle_find_info_rsp>

0000c46a <att_handle_exec_write_rsp>:
    c46a:	f7ff bfe9 	b.w	c440 <att_handle_find_info_rsp>

0000c46e <att_confirm>:
    c46e:	f7ff bfe7 	b.w	c440 <att_handle_find_info_rsp>

0000c472 <att_mtu_rsp>:
{
    c472:	b410      	push	{r4}
    c474:	460a      	mov	r2, r1
	if (!att) {
    c476:	b190      	cbz	r0, c49e <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
    c478:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    c47a:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    c47c:	2b16      	cmp	r3, #22
    c47e:	d805      	bhi.n	c48c <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    c480:	2200      	movs	r2, #0
    c482:	2304      	movs	r3, #4
    c484:	4611      	mov	r1, r2
}
    c486:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    c488:	f7ff bf7c 	b.w	c384 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    c48c:	2b41      	cmp	r3, #65	; 0x41
    c48e:	bf28      	it	cs
    c490:	2341      	movcs	r3, #65	; 0x41
    c492:	8743      	strh	r3, [r0, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    c494:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	return att_handle_rsp(att, rsp, buf->len, 0);
    c498:	8992      	ldrh	r2, [r2, #12]
    c49a:	2300      	movs	r3, #0
    c49c:	e7f3      	b.n	c486 <att_mtu_rsp+0x14>
}
    c49e:	bc10      	pop	{r4}
    c4a0:	4770      	bx	lr

0000c4a2 <att_error_rsp>:
{
    c4a2:	b570      	push	{r4, r5, r6, lr}
    c4a4:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    c4a6:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    c4a8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    c4ac:	b332      	cbz	r2, c4fc <att_error_rsp+0x5a>
	if (att->req->buf) {
    c4ae:	6913      	ldr	r3, [r2, #16]
    c4b0:	b12b      	cbz	r3, c4be <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    c4b2:	8995      	ldrh	r5, [r2, #12]
    c4b4:	6919      	ldr	r1, [r3, #16]
    c4b6:	4429      	add	r1, r5
    c4b8:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    c4ba:	89d1      	ldrh	r1, [r2, #14]
    c4bc:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    c4be:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    c4c0:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    c4c2:	b9e3      	cbnz	r3, c4fe <att_error_rsp+0x5c>
	switch (err) {
    c4c4:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    c4c6:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    c4c8:	d006      	beq.n	c4d8 <att_error_rsp+0x36>
    c4ca:	2d0f      	cmp	r5, #15
    c4cc:	d117      	bne.n	c4fe <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    c4ce:	7a43      	ldrb	r3, [r0, #9]
    c4d0:	2b01      	cmp	r3, #1
    c4d2:	d814      	bhi.n	c4fe <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    c4d4:	2102      	movs	r1, #2
    c4d6:	e007      	b.n	c4e8 <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    c4d8:	7a43      	ldrb	r3, [r0, #9]
    c4da:	2b01      	cmp	r3, #1
    c4dc:	d9fa      	bls.n	c4d4 <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    c4de:	2b02      	cmp	r3, #2
    c4e0:	d00a      	beq.n	c4f8 <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    c4e2:	2b03      	cmp	r3, #3
    c4e4:	d10b      	bne.n	c4fe <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    c4e6:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    c4e8:	f7fd fb6e 	bl	9bc8 <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    c4ec:	b938      	cbnz	r0, c4fe <att_error_rsp+0x5c>
		att->req->retrying = true;
    c4ee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    c4f2:	2201      	movs	r2, #1
    c4f4:	751a      	strb	r2, [r3, #20]
}
    c4f6:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    c4f8:	2103      	movs	r1, #3
    c4fa:	e7f5      	b.n	c4e8 <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    c4fc:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    c4fe:	2200      	movs	r2, #0
    c500:	462b      	mov	r3, r5
    c502:	4620      	mov	r0, r4
    c504:	4611      	mov	r1, r2
}
    c506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    c50a:	f7ff bf3b 	b.w	c384 <att_handle_rsp>

0000c50e <att_reset>:
{
    c50e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c510:	f100 0394 	add.w	r3, r0, #148	; 0x94
    c514:	4604      	mov	r4, r0
    c516:	f3bf 8f5b 	dmb	ish
    c51a:	e853 2f00 	ldrex	r2, [r3]
    c51e:	f042 0204 	orr.w	r2, r2, #4
    c522:	e843 2100 	strex	r1, r2, [r3]
    c526:	2900      	cmp	r1, #0
    c528:	d1f7      	bne.n	c51a <att_reset+0xc>
    c52a:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    c52e:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    c532:	4628      	mov	r0, r5
    c534:	f01f ff23 	bl	2c37e <_impl_k_sem_give>
    c538:	4628      	mov	r0, r5
    c53a:	f01f ff20 	bl	2c37e <_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c53e:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
    c542:	b17d      	cbz	r5, c564 <att_reset+0x56>
	return node->next;
    c544:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    c546:	686f      	ldr	r7, [r5, #4]
    c548:	b12f      	cbz	r7, c556 <att_reset+0x48>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    c54a:	2300      	movs	r3, #0
    c54c:	9500      	str	r5, [sp, #0]
    c54e:	461a      	mov	r2, r3
    c550:	210e      	movs	r1, #14
    c552:	4618      	mov	r0, r3
    c554:	47b8      	blx	r7
		att_req_destroy(req);
    c556:	4628      	mov	r0, r5
    c558:	f7ff fbda 	bl	bd10 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c55c:	b116      	cbz	r6, c564 <att_reset+0x56>
    c55e:	4635      	mov	r5, r6
    c560:	6836      	ldr	r6, [r6, #0]
    c562:	e7f0      	b.n	c546 <att_reset+0x38>
	if (!att->req) {
    c564:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	list->head = NULL;
    c568:	2200      	movs	r2, #0
	list->tail = NULL;
    c56a:	e9c4 2227 	strd	r2, r2, [r4, #156]	; 0x9c
    c56e:	b13b      	cbz	r3, c580 <att_reset+0x72>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    c570:	230e      	movs	r3, #14
    c572:	4611      	mov	r1, r2
    c574:	4620      	mov	r0, r4
}
    c576:	b003      	add	sp, #12
    c578:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    c57c:	f7ff bf02 	b.w	c384 <att_handle_rsp>
}
    c580:	b003      	add	sp, #12
    c582:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c584 <bt_att_disconnected>:
{
    c584:	b510      	push	{r4, lr}
    c586:	4604      	mov	r4, r0
	att_reset(att);
    c588:	f7ff ffc1 	bl	c50e <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    c58c:	6820      	ldr	r0, [r4, #0]
}
    c58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    c592:	f001 bb1d 	b.w	dbd0 <bt_gatt_disconnected>
	...

0000c598 <att_timeout>:
{
    c598:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("ATT Timeout");
    c59a:	4b11      	ldr	r3, [pc, #68]	; (c5e0 <att_timeout+0x48>)
    c59c:	681b      	ldr	r3, [r3, #0]
    c59e:	075b      	lsls	r3, r3, #29
{
    c5a0:	4604      	mov	r4, r0
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
    c5a2:	f1a0 05a4 	sub.w	r5, r0, #164	; 0xa4
	BT_ERR("ATT Timeout");
    c5a6:	d010      	beq.n	c5ca <att_timeout+0x32>
    c5a8:	2301      	movs	r3, #1
    c5aa:	f04f 0200 	mov.w	r2, #0
    c5ae:	f363 0202 	bfi	r2, r3, #0, #3
    c5b2:	490c      	ldr	r1, [pc, #48]	; (c5e4 <att_timeout+0x4c>)
    c5b4:	4b0c      	ldr	r3, [pc, #48]	; (c5e8 <att_timeout+0x50>)
    c5b6:	480d      	ldr	r0, [pc, #52]	; (c5ec <att_timeout+0x54>)
    c5b8:	1a5b      	subs	r3, r3, r1
    c5ba:	f36f 02c5 	bfc	r2, #3, #3
    c5be:	08db      	lsrs	r3, r3, #3
    c5c0:	f363 128f 	bfi	r2, r3, #6, #10
    c5c4:	490a      	ldr	r1, [pc, #40]	; (c5f0 <att_timeout+0x58>)
    c5c6:	f7f5 fbc7 	bl	1d58 <log_1>
	att_reset(att);
    c5ca:	4628      	mov	r0, r5
    c5cc:	f7ff ff9f 	bl	c50e <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    c5d0:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    c5d4:	f001 fafc 	bl	dbd0 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    c5d8:	2300      	movs	r3, #0
    c5da:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    c5de:	bd38      	pop	{r3, r4, r5, pc}
    c5e0:	2000d714 	.word	0x2000d714
    c5e4:	0002cff8 	.word	0x0002cff8
    c5e8:	0002d000 	.word	0x0002d000
    c5ec:	0002fb92 	.word	0x0002fb92
    c5f0:	0002fa93 	.word	0x0002fa93

0000c5f4 <bt_att_encrypt_change>:
{
    c5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5f8:	4604      	mov	r4, r0
	if (hci_status) {
    c5fa:	460e      	mov	r6, r1
    c5fc:	b131      	cbz	r1, c60c <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    c5fe:	2200      	movs	r2, #0
    c600:	2305      	movs	r3, #5
    c602:	4611      	mov	r1, r2
}
    c604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    c608:	f7ff bebc 	b.w	c384 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    c60c:	6807      	ldr	r7, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    c60e:	7a7b      	ldrb	r3, [r7, #9]
    c610:	2b01      	cmp	r3, #1
    c612:	d03b      	beq.n	c68c <bt_att_encrypt_change+0x98>
	if (!att->req || !att->req->retrying) {
    c614:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    c618:	2b00      	cmp	r3, #0
    c61a:	d037      	beq.n	c68c <bt_att_encrypt_change+0x98>
    c61c:	7d1b      	ldrb	r3, [r3, #20]
    c61e:	b3ab      	cbz	r3, c68c <bt_att_encrypt_change+0x98>
	k_sem_take(&att->tx_sem, K_FOREVER);
    c620:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    c624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c628:	4628      	mov	r0, r5
    c62a:	f01f fecf 	bl	2c3cc <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    c62e:	4620      	mov	r0, r4
    c630:	f7ff fe47 	bl	c2c2 <att_is_connected>
    c634:	b9d8      	cbnz	r0, c66e <bt_att_encrypt_change+0x7a>
		BT_WARN("Disconnected");
    c636:	4b16      	ldr	r3, [pc, #88]	; (c690 <bt_att_encrypt_change+0x9c>)
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	f003 0307 	and.w	r3, r3, #7
    c63e:	2b01      	cmp	r3, #1
    c640:	d910      	bls.n	c664 <bt_att_encrypt_change+0x70>
    c642:	2302      	movs	r3, #2
    c644:	f04f 0200 	mov.w	r2, #0
    c648:	f363 0202 	bfi	r2, r3, #0, #3
    c64c:	4911      	ldr	r1, [pc, #68]	; (c694 <bt_att_encrypt_change+0xa0>)
    c64e:	4b12      	ldr	r3, [pc, #72]	; (c698 <bt_att_encrypt_change+0xa4>)
    c650:	1a5b      	subs	r3, r3, r1
    c652:	f360 02c5 	bfi	r2, r0, #3, #3
    c656:	08db      	lsrs	r3, r3, #3
    c658:	f363 128f 	bfi	r2, r3, #6, #10
    c65c:	490f      	ldr	r1, [pc, #60]	; (c69c <bt_att_encrypt_change+0xa8>)
    c65e:	4810      	ldr	r0, [pc, #64]	; (c6a0 <bt_att_encrypt_change+0xac>)
    c660:	f7f5 fb7a 	bl	1d58 <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    c664:	4628      	mov	r0, r5
}
    c666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c66a:	f01f be88 	b.w	2c37e <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    c66e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    c672:	691d      	ldr	r5, [r3, #16]
    c674:	68a8      	ldr	r0, [r5, #8]
    c676:	f7ff fd05 	bl	c084 <att_cb.isra.6>
    c67a:	462a      	mov	r2, r5
    c67c:	4603      	mov	r3, r0
    c67e:	2104      	movs	r1, #4
    c680:	4638      	mov	r0, r7
    c682:	f7fe fabb 	bl	abfc <bt_l2cap_send_cb>
	att->req->buf = NULL;
    c686:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    c68a:	611e      	str	r6, [r3, #16]
}
    c68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c690:	2000d714 	.word	0x2000d714
    c694:	0002cff8 	.word	0x0002cff8
    c698:	0002d000 	.word	0x0002d000
    c69c:	0002fa9f 	.word	0x0002fa9f
    c6a0:	0002fb68 	.word	0x0002fb68

0000c6a4 <write_cb>:
{
    c6a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    c6a8:	680f      	ldr	r7, [r1, #0]
{
    c6aa:	460c      	mov	r4, r1
    c6ac:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    c6ae:	4601      	mov	r1, r0
    c6b0:	222a      	movs	r2, #42	; 0x2a
    c6b2:	4638      	mov	r0, r7
    c6b4:	f7ff fc60 	bl	bf78 <check_perm>
    c6b8:	4605      	mov	r5, r0
    c6ba:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c6bc:	b9e0      	cbnz	r0, c6f8 <write_cb+0x54>
	write = attr->write(data->conn, attr, data->value, data->len,
    c6be:	8a62      	ldrh	r2, [r4, #18]
    c6c0:	9001      	str	r0, [sp, #4]
    c6c2:	9200      	str	r2, [sp, #0]
    c6c4:	7c23      	ldrb	r3, [r4, #16]
    c6c6:	f8d6 8008 	ldr.w	r8, [r6, #8]
    c6ca:	68e2      	ldr	r2, [r4, #12]
    c6cc:	4631      	mov	r1, r6
    c6ce:	4638      	mov	r0, r7
    c6d0:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    c6d2:	2800      	cmp	r0, #0
    c6d4:	db02      	blt.n	c6dc <write_cb+0x38>
    c6d6:	7c23      	ldrb	r3, [r4, #16]
    c6d8:	4298      	cmp	r0, r3
    c6da:	d00a      	beq.n	c6f2 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
    c6dc:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c6e0:	bf26      	itte	cs
    c6e2:	4240      	negcs	r0, r0
    c6e4:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c6e6:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
    c6e8:	7520      	strb	r0, [r4, #20]
}
    c6ea:	4628      	mov	r0, r5
    c6ec:	b002      	add	sp, #8
    c6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    c6f2:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    c6f4:	2501      	movs	r5, #1
    c6f6:	e7f8      	b.n	c6ea <write_cb+0x46>
		return BT_GATT_ITER_STOP;
    c6f8:	2500      	movs	r5, #0
    c6fa:	e7f6      	b.n	c6ea <write_cb+0x46>

0000c6fc <read_cb>:
{
    c6fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c700:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c702:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    c704:	f8d1 9000 	ldr.w	r9, [r1]
{
    c708:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c70a:	3008      	adds	r0, #8
    c70c:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    c70e:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c712:	f011 fefb 	bl	1e50c <net_buf_simple_add>
	data->err = 0x00;
    c716:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    c718:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    c71a:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c71c:	2215      	movs	r2, #21
    c71e:	4631      	mov	r1, r6
    c720:	4640      	mov	r0, r8
    c722:	f7ff fc29 	bl	bf78 <check_perm>
    c726:	4605      	mov	r5, r0
    c728:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    c72a:	bb00      	cbnz	r0, c76e <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    c72c:	68a1      	ldr	r1, [r4, #8]
    c72e:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    c732:	898a      	ldrh	r2, [r1, #12]
    c734:	6889      	ldr	r1, [r1, #8]
    c736:	88a0      	ldrh	r0, [r4, #4]
    c738:	9000      	str	r0, [sp, #0]
    c73a:	1a9b      	subs	r3, r3, r2
    c73c:	6877      	ldr	r7, [r6, #4]
    c73e:	440a      	add	r2, r1
    c740:	b29b      	uxth	r3, r3
    c742:	4631      	mov	r1, r6
    c744:	4640      	mov	r0, r8
    c746:	47b8      	blx	r7
	if (read < 0) {
    c748:	1e01      	subs	r1, r0, #0
    c74a:	da0a      	bge.n	c762 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    c74c:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
    c750:	bf26      	itte	cs
    c752:	4249      	negcs	r1, r1
    c754:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    c756:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
    c758:	7421      	strb	r1, [r4, #16]
}
    c75a:	4628      	mov	r0, r5
    c75c:	b003      	add	sp, #12
    c75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    c762:	68a0      	ldr	r0, [r4, #8]
    c764:	3008      	adds	r0, #8
    c766:	f011 fed1 	bl	1e50c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    c76a:	2501      	movs	r5, #1
    c76c:	e7f5      	b.n	c75a <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    c76e:	463d      	mov	r5, r7
    c770:	e7f3      	b.n	c75a <read_cb+0x5e>
	...

0000c774 <bt_att_create_pdu>:
{
    c774:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c776:	460d      	mov	r5, r1
    c778:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    c77a:	f7ff fd03 	bl	c184 <att_chan_get>
	if (!att) {
    c77e:	b1e8      	cbz	r0, c7bc <bt_att_create_pdu+0x48>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    c780:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    c784:	1c63      	adds	r3, r4, #1
    c786:	4293      	cmp	r3, r2
    c788:	d91a      	bls.n	c7c0 <bt_att_create_pdu+0x4c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    c78a:	4914      	ldr	r1, [pc, #80]	; (c7dc <bt_att_create_pdu+0x68>)
    c78c:	6809      	ldr	r1, [r1, #0]
    c78e:	f001 0107 	and.w	r1, r1, #7
    c792:	2901      	cmp	r1, #1
    c794:	d912      	bls.n	c7bc <bt_att_create_pdu+0x48>
    c796:	2102      	movs	r1, #2
    c798:	f04f 0000 	mov.w	r0, #0
    c79c:	f361 0002 	bfi	r0, r1, #0, #3
    c7a0:	4c0f      	ldr	r4, [pc, #60]	; (c7e0 <bt_att_create_pdu+0x6c>)
    c7a2:	4910      	ldr	r1, [pc, #64]	; (c7e4 <bt_att_create_pdu+0x70>)
    c7a4:	1b09      	subs	r1, r1, r4
    c7a6:	08c9      	lsrs	r1, r1, #3
    c7a8:	f36f 00c5 	bfc	r0, #3, #3
    c7ac:	f361 108f 	bfi	r0, r1, #6, #10
    c7b0:	f8ad 0000 	strh.w	r0, [sp]
    c7b4:	490c      	ldr	r1, [pc, #48]	; (c7e8 <bt_att_create_pdu+0x74>)
    c7b6:	480d      	ldr	r0, [pc, #52]	; (c7ec <bt_att_create_pdu+0x78>)
    c7b8:	f7f5 fafa 	bl	1db0 <log_3>
		return NULL;
    c7bc:	2400      	movs	r4, #0
    c7be:	e009      	b.n	c7d4 <bt_att_create_pdu+0x60>
	buf = bt_l2cap_create_pdu(NULL, 0);
    c7c0:	2100      	movs	r1, #0
    c7c2:	4608      	mov	r0, r1
    c7c4:	f7fe fa17 	bl	abf6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    c7c8:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    c7ca:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    c7cc:	3008      	adds	r0, #8
    c7ce:	f011 fe9d 	bl	1e50c <net_buf_simple_add>
	hdr->code = op;
    c7d2:	7005      	strb	r5, [r0, #0]
}
    c7d4:	4620      	mov	r0, r4
    c7d6:	b003      	add	sp, #12
    c7d8:	bd30      	pop	{r4, r5, pc}
    c7da:	bf00      	nop
    c7dc:	2000d714 	.word	0x2000d714
    c7e0:	0002cff8 	.word	0x0002cff8
    c7e4:	0002d000 	.word	0x0002d000
    c7e8:	0002fa81 	.word	0x0002fa81
    c7ec:	0002fbcb 	.word	0x0002fbcb

0000c7f0 <att_indicate>:
{
    c7f0:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    c7f2:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    c7f4:	f101 0008 	add.w	r0, r1, #8
    c7f8:	f011 fee8 	bl	1e5cc <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    c7fc:	2200      	movs	r2, #0
    c7fe:	211e      	movs	r1, #30
    c800:	4620      	mov	r0, r4
    c802:	f7ff ffb7 	bl	c774 <bt_att_create_pdu>
	if (!buf) {
    c806:	4602      	mov	r2, r0
    c808:	b120      	cbz	r0, c814 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    c80a:	4b03      	ldr	r3, [pc, #12]	; (c818 <att_indicate+0x28>)
    c80c:	2104      	movs	r1, #4
    c80e:	4620      	mov	r0, r4
    c810:	f7fe f9f4 	bl	abfc <bt_l2cap_send_cb>
}
    c814:	2000      	movs	r0, #0
    c816:	bd10      	pop	{r4, pc}
    c818:	0000c295 	.word	0x0000c295

0000c81c <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    c81c:	688b      	ldr	r3, [r1, #8]
{
    c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    c822:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    c824:	2d16      	cmp	r5, #22
{
    c826:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    c828:	d91f      	bls.n	c86a <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
    c82a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    c82e:	2202      	movs	r2, #2
    c830:	2103      	movs	r1, #3
    c832:	4640      	mov	r0, r8
    c834:	f7ff ff9e 	bl	c774 <bt_att_create_pdu>
	if (!pdu) {
    c838:	4607      	mov	r7, r0
    c83a:	b1c0      	cbz	r0, c86e <att_mtu_req+0x52>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    c83c:	2102      	movs	r1, #2
    c83e:	3008      	adds	r0, #8
    c840:	f011 fe64 	bl	1e50c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    c844:	2400      	movs	r4, #0
    c846:	2341      	movs	r3, #65	; 0x41
    c848:	7003      	strb	r3, [r0, #0]
    c84a:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    c84c:	4b09      	ldr	r3, [pc, #36]	; (c874 <att_mtu_req+0x58>)
    c84e:	4640      	mov	r0, r8
    c850:	463a      	mov	r2, r7
    c852:	2104      	movs	r1, #4
    c854:	f7fe f9d2 	bl	abfc <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    c858:	2d41      	cmp	r5, #65	; 0x41
    c85a:	bf28      	it	cs
    c85c:	2541      	movcs	r5, #65	; 0x41
    c85e:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    c860:	f8a6 505a 	strh.w	r5, [r6, #90]	; 0x5a
	return 0;
    c864:	4620      	mov	r0, r4
}
    c866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    c86a:	2004      	movs	r0, #4
    c86c:	e7fb      	b.n	c866 <att_mtu_req+0x4a>
		return BT_ATT_ERR_UNLIKELY;
    c86e:	200e      	movs	r0, #14
    c870:	e7f9      	b.n	c866 <att_mtu_req+0x4a>
    c872:	bf00      	nop
    c874:	0000c267 	.word	0x0000c267

0000c878 <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    c878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c87c:	4688      	mov	r8, r1
    c87e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    c880:	2101      	movs	r1, #1
    c882:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    c884:	4605      	mov	r5, r0
    c886:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    c888:	f7ff ff74 	bl	c774 <bt_att_create_pdu>
	if (!buf) {
    c88c:	4604      	mov	r4, r0
    c88e:	b180      	cbz	r0, c8b2 <send_err_rsp.part.12+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c890:	2104      	movs	r1, #4
    c892:	3008      	adds	r0, #8
    c894:	f011 fe3a 	bl	1e50c <net_buf_simple_add>
	rsp->request = req;
    c898:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    c89c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    c89e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    c8a2:	4622      	mov	r2, r4
    c8a4:	4628      	mov	r0, r5
    c8a6:	4b04      	ldr	r3, [pc, #16]	; (c8b8 <send_err_rsp.part.12+0x40>)
    c8a8:	2104      	movs	r1, #4
}
    c8aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    c8ae:	f7fe b9a5 	b.w	abfc <bt_l2cap_send_cb>
}
    c8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8b6:	bf00      	nop
    c8b8:	0000c267 	.word	0x0000c267

0000c8bc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    c8bc:	898b      	ldrh	r3, [r1, #12]
{
    c8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c8c0:	4604      	mov	r4, r0
    c8c2:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    c8c4:	b9bb      	cbnz	r3, c8f6 <bt_att_recv+0x3a>
		BT_ERR("Too small ATT PDU received");
    c8c6:	4a6d      	ldr	r2, [pc, #436]	; (ca7c <bt_att_recv+0x1c0>)
    c8c8:	6812      	ldr	r2, [r2, #0]
    c8ca:	0750      	lsls	r0, r2, #29
    c8cc:	d010      	beq.n	c8f0 <bt_att_recv+0x34>
    c8ce:	2101      	movs	r1, #1
    c8d0:	f04f 0200 	mov.w	r2, #0
    c8d4:	f361 0202 	bfi	r2, r1, #0, #3
    c8d8:	f363 02c5 	bfi	r2, r3, #3, #3
    c8dc:	4968      	ldr	r1, [pc, #416]	; (ca80 <bt_att_recv+0x1c4>)
    c8de:	4b69      	ldr	r3, [pc, #420]	; (ca84 <bt_att_recv+0x1c8>)
    c8e0:	4869      	ldr	r0, [pc, #420]	; (ca88 <bt_att_recv+0x1cc>)
    c8e2:	1a5b      	subs	r3, r3, r1
    c8e4:	08db      	lsrs	r3, r3, #3
    c8e6:	4969      	ldr	r1, [pc, #420]	; (ca8c <bt_att_recv+0x1d0>)
    c8e8:	f363 128f 	bfi	r2, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    c8ec:	f7f5 fa34 	bl	1d58 <log_1>
}
    c8f0:	2000      	movs	r0, #0
    c8f2:	b003      	add	sp, #12
    c8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    c8f6:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    c8f8:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    c8fa:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    c8fe:	f011 fe55 	bl	1e5ac <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    c902:	4963      	ldr	r1, [pc, #396]	; (ca90 <bt_att_recv+0x1d4>)
    c904:	782a      	ldrb	r2, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c906:	2300      	movs	r3, #0
    c908:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    c90a:	f811 6033 	ldrb.w	r6, [r1, r3, lsl #3]
    c90e:	4296      	cmp	r6, r2
    c910:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    c914:	d12a      	bne.n	c96c <bt_att_recv+0xb0>
		if (handler->type == ATT_REQUEST &&
    c916:	4461      	add	r1, ip
    c918:	788e      	ldrb	r6, [r1, #2]
    c91a:	2e01      	cmp	r6, #1
    c91c:	d14f      	bne.n	c9be <bt_att_recv+0x102>
    c91e:	f3bf 8f5b 	dmb	ish
    c922:	f104 0294 	add.w	r2, r4, #148	; 0x94
    c926:	e852 3f00 	ldrex	r3, [r2]
    c92a:	f043 0101 	orr.w	r1, r3, #1
    c92e:	e842 1e00 	strex	lr, r1, [r2]
    c932:	f1be 0f00 	cmp.w	lr, #0
    c936:	d1f6      	bne.n	c926 <bt_att_recv+0x6a>
    c938:	f3bf 8f5b 	dmb	ish
    c93c:	07d9      	lsls	r1, r3, #31
    c93e:	d568      	bpl.n	ca12 <bt_att_recv+0x156>
			BT_WARN("Ignoring unexpected request");
    c940:	4b4e      	ldr	r3, [pc, #312]	; (ca7c <bt_att_recv+0x1c0>)
    c942:	681b      	ldr	r3, [r3, #0]
    c944:	f003 0307 	and.w	r3, r3, #7
    c948:	2b01      	cmp	r3, #1
    c94a:	d9d1      	bls.n	c8f0 <bt_att_recv+0x34>
    c94c:	2302      	movs	r3, #2
    c94e:	f04f 0200 	mov.w	r2, #0
    c952:	f363 0202 	bfi	r2, r3, #0, #3
    c956:	494a      	ldr	r1, [pc, #296]	; (ca80 <bt_att_recv+0x1c4>)
    c958:	4b4a      	ldr	r3, [pc, #296]	; (ca84 <bt_att_recv+0x1c8>)
    c95a:	484e      	ldr	r0, [pc, #312]	; (ca94 <bt_att_recv+0x1d8>)
    c95c:	1a5b      	subs	r3, r3, r1
    c95e:	f36f 02c5 	bfc	r2, #3, #3
    c962:	08db      	lsrs	r3, r3, #3
    c964:	f363 128f 	bfi	r2, r3, #6, #10
    c968:	4948      	ldr	r1, [pc, #288]	; (ca8c <bt_att_recv+0x1d0>)
    c96a:	e7bf      	b.n	c8ec <bt_att_recv+0x30>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c96c:	3301      	adds	r3, #1
    c96e:	2b1c      	cmp	r3, #28
    c970:	d1cb      	bne.n	c90a <bt_att_recv+0x4e>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    c972:	4b42      	ldr	r3, [pc, #264]	; (ca7c <bt_att_recv+0x1c0>)
    c974:	681b      	ldr	r3, [r3, #0]
    c976:	f003 0307 	and.w	r3, r3, #7
    c97a:	2b01      	cmp	r3, #1
    c97c:	d910      	bls.n	c9a0 <bt_att_recv+0xe4>
    c97e:	2102      	movs	r1, #2
    c980:	f04f 0300 	mov.w	r3, #0
    c984:	f361 0302 	bfi	r3, r1, #0, #3
    c988:	483d      	ldr	r0, [pc, #244]	; (ca80 <bt_att_recv+0x1c4>)
    c98a:	493e      	ldr	r1, [pc, #248]	; (ca84 <bt_att_recv+0x1c8>)
    c98c:	1a09      	subs	r1, r1, r0
    c98e:	08c9      	lsrs	r1, r1, #3
    c990:	f36f 03c5 	bfc	r3, #3, #3
    c994:	f361 138f 	bfi	r3, r1, #6, #10
    c998:	483f      	ldr	r0, [pc, #252]	; (ca98 <bt_att_recv+0x1dc>)
    c99a:	493c      	ldr	r1, [pc, #240]	; (ca8c <bt_att_recv+0x1d0>)
    c99c:	f7f5 f9f0 	bl	1d80 <log_2>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    c9a0:	782d      	ldrb	r5, [r5, #0]
    c9a2:	4628      	mov	r0, r5
    c9a4:	f7ff f99c 	bl	bce0 <att_op_get_type>
    c9a8:	2800      	cmp	r0, #0
    c9aa:	d0a1      	beq.n	c8f0 <bt_att_recv+0x34>
	if (!req) {
    c9ac:	2d00      	cmp	r5, #0
    c9ae:	d09f      	beq.n	c8f0 <bt_att_recv+0x34>
    c9b0:	2306      	movs	r3, #6
    c9b2:	2200      	movs	r2, #0
    c9b4:	4629      	mov	r1, r5
    c9b6:	6820      	ldr	r0, [r4, #0]
    c9b8:	f7ff ff5e 	bl	c878 <send_err_rsp.part.12>
    c9bc:	e798      	b.n	c8f0 <bt_att_recv+0x34>
		} else if (handler->type == ATT_INDICATION &&
    c9be:	2e05      	cmp	r6, #5
    c9c0:	d127      	bne.n	ca12 <bt_att_recv+0x156>
    c9c2:	f3bf 8f5b 	dmb	ish
    c9c6:	f104 0294 	add.w	r2, r4, #148	; 0x94
    c9ca:	e852 3f00 	ldrex	r3, [r2]
    c9ce:	f043 0102 	orr.w	r1, r3, #2
    c9d2:	e842 1e00 	strex	lr, r1, [r2]
    c9d6:	f1be 0f00 	cmp.w	lr, #0
    c9da:	d1f6      	bne.n	c9ca <bt_att_recv+0x10e>
    c9dc:	f3bf 8f5b 	dmb	ish
    c9e0:	079a      	lsls	r2, r3, #30
    c9e2:	d516      	bpl.n	ca12 <bt_att_recv+0x156>
			BT_WARN("Ignoring unexpected indication");
    c9e4:	4b25      	ldr	r3, [pc, #148]	; (ca7c <bt_att_recv+0x1c0>)
    c9e6:	681b      	ldr	r3, [r3, #0]
    c9e8:	f003 0307 	and.w	r3, r3, #7
    c9ec:	2b01      	cmp	r3, #1
    c9ee:	f67f af7f 	bls.w	c8f0 <bt_att_recv+0x34>
    c9f2:	2302      	movs	r3, #2
    c9f4:	f04f 0200 	mov.w	r2, #0
    c9f8:	f363 0202 	bfi	r2, r3, #0, #3
    c9fc:	4920      	ldr	r1, [pc, #128]	; (ca80 <bt_att_recv+0x1c4>)
    c9fe:	4b21      	ldr	r3, [pc, #132]	; (ca84 <bt_att_recv+0x1c8>)
    ca00:	4826      	ldr	r0, [pc, #152]	; (ca9c <bt_att_recv+0x1e0>)
    ca02:	1a5b      	subs	r3, r3, r1
    ca04:	f36f 02c5 	bfc	r2, #3, #3
    ca08:	08db      	lsrs	r3, r3, #3
    ca0a:	f363 128f 	bfi	r2, r3, #6, #10
    ca0e:	491f      	ldr	r1, [pc, #124]	; (ca8c <bt_att_recv+0x1d0>)
    ca10:	e76c      	b.n	c8ec <bt_att_recv+0x30>
	if (buf->len < handler->expect_len) {
    ca12:	eb00 030c 	add.w	r3, r0, ip
    ca16:	89ba      	ldrh	r2, [r7, #12]
    ca18:	7859      	ldrb	r1, [r3, #1]
    ca1a:	4291      	cmp	r1, r2
    ca1c:	d91c      	bls.n	ca58 <bt_att_recv+0x19c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    ca1e:	4b17      	ldr	r3, [pc, #92]	; (ca7c <bt_att_recv+0x1c0>)
    ca20:	681b      	ldr	r3, [r3, #0]
    ca22:	075b      	lsls	r3, r3, #29
    ca24:	d013      	beq.n	ca4e <bt_att_recv+0x192>
    ca26:	2301      	movs	r3, #1
    ca28:	f04f 0100 	mov.w	r1, #0
    ca2c:	f363 0102 	bfi	r1, r3, #0, #3
    ca30:	4813      	ldr	r0, [pc, #76]	; (ca80 <bt_att_recv+0x1c4>)
    ca32:	4b14      	ldr	r3, [pc, #80]	; (ca84 <bt_att_recv+0x1c8>)
    ca34:	1a1b      	subs	r3, r3, r0
    ca36:	08db      	lsrs	r3, r3, #3
    ca38:	f36f 01c5 	bfc	r1, #3, #3
    ca3c:	f363 118f 	bfi	r1, r3, #6, #10
    ca40:	4817      	ldr	r0, [pc, #92]	; (caa0 <bt_att_recv+0x1e4>)
    ca42:	782b      	ldrb	r3, [r5, #0]
    ca44:	f8ad 1000 	strh.w	r1, [sp]
    ca48:	4910      	ldr	r1, [pc, #64]	; (ca8c <bt_att_recv+0x1d0>)
    ca4a:	f7f5 f9b1 	bl	1db0 <log_3>
	if (handler->type == ATT_REQUEST && err) {
    ca4e:	2e01      	cmp	r6, #1
    ca50:	f47f af4e 	bne.w	c8f0 <bt_att_recv+0x34>
    ca54:	2304      	movs	r3, #4
    ca56:	e00a      	b.n	ca6e <bt_att_recv+0x1b2>
		err = handler->func(att, buf);
    ca58:	685b      	ldr	r3, [r3, #4]
    ca5a:	4639      	mov	r1, r7
    ca5c:	4620      	mov	r0, r4
    ca5e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    ca60:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    ca62:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    ca64:	f47f af44 	bne.w	c8f0 <bt_att_recv+0x34>
    ca68:	2800      	cmp	r0, #0
    ca6a:	f43f af41 	beq.w	c8f0 <bt_att_recv+0x34>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    ca6e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    ca70:	2900      	cmp	r1, #0
    ca72:	f43f af3d 	beq.w	c8f0 <bt_att_recv+0x34>
    ca76:	2200      	movs	r2, #0
    ca78:	e79d      	b.n	c9b6 <bt_att_recv+0xfa>
    ca7a:	bf00      	nop
    ca7c:	2000d714 	.word	0x2000d714
    ca80:	0002cff8 	.word	0x0002cff8
    ca84:	0002d000 	.word	0x0002d000
    ca88:	0002fbf4 	.word	0x0002fbf4
    ca8c:	0002fa68 	.word	0x0002fa68
    ca90:	0002fc98 	.word	0x0002fc98
    ca94:	0002fc2f 	.word	0x0002fc2f
    ca98:	0002fc13 	.word	0x0002fc13
    ca9c:	0002fc4f 	.word	0x0002fc4f
    caa0:	0002fc72 	.word	0x0002fc72

0000caa4 <att_read_group_req>:
{
    caa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    caa8:	898b      	ldrh	r3, [r1, #12]
    caaa:	2b06      	cmp	r3, #6
{
    caac:	b08d      	sub	sp, #52	; 0x34
    caae:	4681      	mov	r9, r0
    cab0:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    cab2:	d001      	beq.n	cab8 <att_read_group_req+0x14>
    cab4:	2b14      	cmp	r3, #20
    cab6:	d16e      	bne.n	cb96 <att_read_group_req+0xf2>
	req = (void *)buf->data;
    cab8:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    caba:	2104      	movs	r1, #4
	req = (void *)buf->data;
    cabc:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    cac0:	f8d9 8000 	ldr.w	r8, [r9]
	start_handle = sys_le16_to_cpu(req->start_handle);
    cac4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cac6:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    cac8:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    caca:	f011 fd6f 	bl	1e5ac <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    cace:	4621      	mov	r1, r4
    cad0:	4638      	mov	r0, r7
    cad2:	f7ff fb25 	bl	c120 <uuid_create>
    cad6:	2800      	cmp	r0, #0
    cad8:	d05f      	beq.n	cb9a <att_read_group_req+0xf6>
	if (!start || !end) {
    cada:	2d00      	cmp	r5, #0
    cadc:	d036      	beq.n	cb4c <att_read_group_req+0xa8>
    cade:	2400      	movs	r4, #0
    cae0:	b39e      	cbz	r6, cb4a <att_read_group_req+0xa6>
	if (start > end) {
    cae2:	42b5      	cmp	r5, r6
    cae4:	d832      	bhi.n	cb4c <att_read_group_req+0xa8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cae6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    caea:	4669      	mov	r1, sp
    caec:	4638      	mov	r0, r7
    caee:	f88d 4000 	strb.w	r4, [sp]
    caf2:	f8ad 3002 	strh.w	r3, [sp, #2]
    caf6:	f7f9 ff93 	bl	6a20 <bt_uuid_cmp>
    cafa:	bb90      	cbnz	r0, cb62 <att_read_group_req+0xbe>
	struct bt_conn *conn = att->chan.chan.conn;
    cafc:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    cb00:	2214      	movs	r2, #20
    cb02:	2100      	movs	r1, #0
    cb04:	a807      	add	r0, sp, #28
    cb06:	f7f9 f9ec 	bl	5ee2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    cb0a:	2201      	movs	r2, #1
    cb0c:	2111      	movs	r1, #17
    cb0e:	4640      	mov	r0, r8
    cb10:	f7ff fe30 	bl	c774 <bt_att_create_pdu>
    cb14:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    cb16:	2800      	cmp	r0, #0
    cb18:	d03f      	beq.n	cb9a <att_read_group_req+0xf6>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb1a:	2101      	movs	r1, #1
    cb1c:	3008      	adds	r0, #8
	data.uuid = uuid;
    cb1e:	e9cd 9707 	strd	r9, r7, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb22:	f011 fcf3 	bl	1e50c <net_buf_simple_add>
	data.rsp->len = 0;
    cb26:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb28:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb2a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    cb2c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb2e:	4a1c      	ldr	r2, [pc, #112]	; (cba0 <att_read_group_req+0xfc>)
	data.group = NULL;
    cb30:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb32:	4631      	mov	r1, r6
    cb34:	4628      	mov	r0, r5
    cb36:	f000 ff4d 	bl	d9d4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    cb3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb3c:	781c      	ldrb	r4, [r3, #0]
    cb3e:	bb1c      	cbnz	r4, cb88 <att_read_group_req+0xe4>
		net_buf_unref(data.buf);
    cb40:	9809      	ldr	r0, [sp, #36]	; 0x24
    cb42:	f011 fc85 	bl	1e450 <net_buf_unref>
    cb46:	230a      	movs	r3, #10
    cb48:	e018      	b.n	cb7c <att_read_group_req+0xd8>
			*err = 0;
    cb4a:	4635      	mov	r5, r6
    cb4c:	2301      	movs	r3, #1
    cb4e:	462a      	mov	r2, r5
    cb50:	2110      	movs	r1, #16
    cb52:	4640      	mov	r0, r8
    cb54:	f7ff fe90 	bl	c878 <send_err_rsp.part.12>
		return 0;
    cb58:	2400      	movs	r4, #0
}
    cb5a:	4620      	mov	r0, r4
    cb5c:	b00d      	add	sp, #52	; 0x34
    cb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    cb62:	f642 0301 	movw	r3, #10241	; 0x2801
    cb66:	a901      	add	r1, sp, #4
    cb68:	4638      	mov	r0, r7
    cb6a:	f88d 4004 	strb.w	r4, [sp, #4]
    cb6e:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb72:	f7f9 ff55 	bl	6a20 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cb76:	2800      	cmp	r0, #0
    cb78:	d0c0      	beq.n	cafc <att_read_group_req+0x58>
    cb7a:	2310      	movs	r3, #16
    cb7c:	462a      	mov	r2, r5
    cb7e:	2110      	movs	r1, #16
    cb80:	4640      	mov	r0, r8
    cb82:	f7ff fe79 	bl	c878 <send_err_rsp.part.12>
    cb86:	e7e8      	b.n	cb5a <att_read_group_req+0xb6>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    cb88:	4b06      	ldr	r3, [pc, #24]	; (cba4 <att_read_group_req+0x100>)
    cb8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb8c:	2104      	movs	r1, #4
    cb8e:	4640      	mov	r0, r8
    cb90:	f7fe f834 	bl	abfc <bt_l2cap_send_cb>
    cb94:	e7e0      	b.n	cb58 <att_read_group_req+0xb4>
		return BT_ATT_ERR_INVALID_PDU;
    cb96:	2404      	movs	r4, #4
    cb98:	e7df      	b.n	cb5a <att_read_group_req+0xb6>
		return BT_ATT_ERR_UNLIKELY;
    cb9a:	240e      	movs	r4, #14
    cb9c:	e7dd      	b.n	cb5a <att_read_group_req+0xb6>
    cb9e:	bf00      	nop
    cba0:	0000bd41 	.word	0x0000bd41
    cba4:	0000c267 	.word	0x0000c267

0000cba8 <att_read_mult_req>:
{
    cba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    cbac:	6804      	ldr	r4, [r0, #0]
{
    cbae:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    cbb0:	2214      	movs	r2, #20
{
    cbb2:	4606      	mov	r6, r0
    cbb4:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    cbb6:	a801      	add	r0, sp, #4
    cbb8:	2100      	movs	r1, #0
    cbba:	f7f9 f992 	bl	5ee2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    cbbe:	2200      	movs	r2, #0
    cbc0:	210f      	movs	r1, #15
    cbc2:	4620      	mov	r0, r4
    cbc4:	f7ff fdd6 	bl	c774 <bt_att_create_pdu>
    cbc8:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    cbca:	b368      	cbz	r0, cc28 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cbcc:	f8df 9060 	ldr.w	r9, [pc, #96]	; cc30 <att_read_mult_req+0x88>
	data.att = att;
    cbd0:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    cbd2:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cbd6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    cbda:	89ab      	ldrh	r3, [r5, #12]
    cbdc:	2b01      	cmp	r3, #1
    cbde:	d806      	bhi.n	cbee <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    cbe0:	4b12      	ldr	r3, [pc, #72]	; (cc2c <att_read_mult_req+0x84>)
    cbe2:	9a03      	ldr	r2, [sp, #12]
    cbe4:	2104      	movs	r1, #4
    cbe6:	4620      	mov	r0, r4
    cbe8:	f7fe f808 	bl	abfc <bt_l2cap_send_cb>
    cbec:	e018      	b.n	cc20 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    cbee:	4638      	mov	r0, r7
    cbf0:	f011 fcec 	bl	1e5cc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cbf4:	ab01      	add	r3, sp, #4
    cbf6:	464a      	mov	r2, r9
    cbf8:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    cbfa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cbfc:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc00:	f000 fee8 	bl	d9d4 <bt_gatt_foreach_attr>
		if (data.err) {
    cc04:	f89d 3014 	ldrb.w	r3, [sp, #20]
    cc08:	2b00      	cmp	r3, #0
    cc0a:	d0e6      	beq.n	cbda <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    cc0c:	9803      	ldr	r0, [sp, #12]
    cc0e:	f011 fc1f 	bl	1e450 <net_buf_unref>
    cc12:	f89d 3014 	ldrb.w	r3, [sp, #20]
    cc16:	4632      	mov	r2, r6
    cc18:	210e      	movs	r1, #14
    cc1a:	4620      	mov	r0, r4
    cc1c:	f7ff fe2c 	bl	c878 <send_err_rsp.part.12>
	return 0;
    cc20:	2000      	movs	r0, #0
}
    cc22:	b007      	add	sp, #28
    cc24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    cc28:	200e      	movs	r0, #14
    cc2a:	e7fa      	b.n	cc22 <att_read_mult_req+0x7a>
    cc2c:	0000c267 	.word	0x0000c267
    cc30:	0000c6fd 	.word	0x0000c6fd

0000cc34 <att_read_rsp>:
{
    cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc38:	4604      	mov	r4, r0
    cc3a:	b086      	sub	sp, #24
    cc3c:	460f      	mov	r7, r1
    cc3e:	4690      	mov	r8, r2
	if (!handle) {
    cc40:	461d      	mov	r5, r3
    cc42:	b39b      	cbz	r3, ccac <att_read_rsp+0x78>
	struct bt_conn *conn = att->chan.chan.conn;
    cc44:	6806      	ldr	r6, [r0, #0]
	(void)memset(&data, 0, sizeof(data));
    cc46:	2214      	movs	r2, #20
    cc48:	2100      	movs	r1, #0
    cc4a:	a801      	add	r0, sp, #4
    cc4c:	f7f9 f949 	bl	5ee2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    cc50:	2200      	movs	r2, #0
    cc52:	4641      	mov	r1, r8
    cc54:	4630      	mov	r0, r6
    cc56:	f7ff fd8d 	bl	c774 <bt_att_create_pdu>
    cc5a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    cc5c:	b340      	cbz	r0, ccb0 <att_read_rsp+0x7c>
	data.offset = offset;
    cc5e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    cc62:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    cc66:	2301      	movs	r3, #1
    cc68:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc6c:	4a11      	ldr	r2, [pc, #68]	; (ccb4 <att_read_rsp+0x80>)
	data.att = att;
    cc6e:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc70:	ab01      	add	r3, sp, #4
    cc72:	4629      	mov	r1, r5
    cc74:	4628      	mov	r0, r5
    cc76:	f000 fead 	bl	d9d4 <bt_gatt_foreach_attr>
	if (data.err) {
    cc7a:	f89d 4014 	ldrb.w	r4, [sp, #20]
    cc7e:	b174      	cbz	r4, cc9e <att_read_rsp+0x6a>
		net_buf_unref(data.buf);
    cc80:	9803      	ldr	r0, [sp, #12]
    cc82:	f011 fbe5 	bl	1e450 <net_buf_unref>
    cc86:	f89d 3014 	ldrb.w	r3, [sp, #20]
    cc8a:	462a      	mov	r2, r5
    cc8c:	4639      	mov	r1, r7
    cc8e:	4630      	mov	r0, r6
    cc90:	f7ff fdf2 	bl	c878 <send_err_rsp.part.12>
		return 0;
    cc94:	2400      	movs	r4, #0
}
    cc96:	4620      	mov	r0, r4
    cc98:	b006      	add	sp, #24
    cc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    cc9e:	4b06      	ldr	r3, [pc, #24]	; (ccb8 <att_read_rsp+0x84>)
    cca0:	9a03      	ldr	r2, [sp, #12]
    cca2:	2104      	movs	r1, #4
    cca4:	4630      	mov	r0, r6
    cca6:	f7fd ffa9 	bl	abfc <bt_l2cap_send_cb>
	return 0;
    ccaa:	e7f4      	b.n	cc96 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    ccac:	2401      	movs	r4, #1
    ccae:	e7f2      	b.n	cc96 <att_read_rsp+0x62>
		return BT_ATT_ERR_UNLIKELY;
    ccb0:	240e      	movs	r4, #14
    ccb2:	e7f0      	b.n	cc96 <att_read_rsp+0x62>
    ccb4:	0000c6fd 	.word	0x0000c6fd
    ccb8:	0000c267 	.word	0x0000c267

0000ccbc <att_read_blob_req>:
{
    ccbc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    ccbe:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    ccc0:	8813      	ldrh	r3, [r2, #0]
    ccc2:	8852      	ldrh	r2, [r2, #2]
    ccc4:	9200      	str	r2, [sp, #0]
    ccc6:	210c      	movs	r1, #12
    ccc8:	220d      	movs	r2, #13
    ccca:	f7ff ffb3 	bl	cc34 <att_read_rsp>
}
    ccce:	b003      	add	sp, #12
    ccd0:	f85d fb04 	ldr.w	pc, [sp], #4

0000ccd4 <att_read_req>:
{
    ccd4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    ccd6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    ccd8:	2200      	movs	r2, #0
    ccda:	881b      	ldrh	r3, [r3, #0]
    ccdc:	9200      	str	r2, [sp, #0]
    ccde:	210a      	movs	r1, #10
    cce0:	220b      	movs	r2, #11
    cce2:	f7ff ffa7 	bl	cc34 <att_read_rsp>
}
    cce6:	b003      	add	sp, #12
    cce8:	f85d fb04 	ldr.w	pc, [sp], #4

0000ccec <att_read_type_req>:
{
    ccec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    ccf0:	898b      	ldrh	r3, [r1, #12]
    ccf2:	2b06      	cmp	r3, #6
{
    ccf4:	b08d      	sub	sp, #52	; 0x34
    ccf6:	4607      	mov	r7, r0
    ccf8:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    ccfa:	d001      	beq.n	cd00 <att_read_type_req+0x14>
    ccfc:	2b14      	cmp	r3, #20
    ccfe:	d155      	bne.n	cdac <att_read_type_req+0xc0>
	req = (void *)buf->data;
    cd00:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    cd02:	2104      	movs	r1, #4
	req = (void *)buf->data;
    cd04:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    cd08:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    cd0c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cd0e:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    cd10:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    cd14:	f011 fc4a 	bl	1e5ac <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    cd18:	4631      	mov	r1, r6
    cd1a:	4640      	mov	r0, r8
    cd1c:	f7ff fa00 	bl	c120 <uuid_create>
    cd20:	b188      	cbz	r0, cd46 <att_read_type_req+0x5a>
	if (!start || !end) {
    cd22:	b19d      	cbz	r5, cd4c <att_read_type_req+0x60>
    cd24:	b18c      	cbz	r4, cd4a <att_read_type_req+0x5e>
	if (start > end) {
    cd26:	42a5      	cmp	r5, r4
    cd28:	d810      	bhi.n	cd4c <att_read_type_req+0x60>
	(void)memset(&data, 0, sizeof(data));
    cd2a:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    cd2c:	683e      	ldr	r6, [r7, #0]
	(void)memset(&data, 0, sizeof(data));
    cd2e:	2100      	movs	r1, #0
    cd30:	eb0d 0002 	add.w	r0, sp, r2
    cd34:	f7f9 f8d5 	bl	5ee2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    cd38:	2201      	movs	r2, #1
    cd3a:	2109      	movs	r1, #9
    cd3c:	4630      	mov	r0, r6
    cd3e:	f7ff fd19 	bl	c774 <bt_att_create_pdu>
    cd42:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    cd44:	b968      	cbnz	r0, cd62 <att_read_type_req+0x76>
		return BT_ATT_ERR_UNLIKELY;
    cd46:	240e      	movs	r4, #14
    cd48:	e007      	b.n	cd5a <att_read_type_req+0x6e>
			*err = 0;
    cd4a:	4625      	mov	r5, r4
    cd4c:	2301      	movs	r3, #1
    cd4e:	462a      	mov	r2, r5
    cd50:	2108      	movs	r1, #8
    cd52:	4648      	mov	r0, r9
    cd54:	f7ff fd90 	bl	c878 <send_err_rsp.part.12>
		return 0;
    cd58:	2400      	movs	r4, #0
}
    cd5a:	4620      	mov	r0, r4
    cd5c:	b00d      	add	sp, #52	; 0x34
    cd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cd62:	2101      	movs	r1, #1
    cd64:	3008      	adds	r0, #8
	data.uuid = uuid;
    cd66:	e9cd 7806 	strd	r7, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cd6a:	f011 fbcf 	bl	1e50c <net_buf_simple_add>
	data.rsp->len = 0;
    cd6e:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cd70:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cd72:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd74:	4621      	mov	r1, r4
	data.rsp->len = 0;
    cd76:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd78:	4a0d      	ldr	r2, [pc, #52]	; (cdb0 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cd7a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd7e:	4628      	mov	r0, r5
    cd80:	ab06      	add	r3, sp, #24
    cd82:	f000 fe27 	bl	d9d4 <bt_gatt_foreach_attr>
	if (data.err) {
    cd86:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    cd8a:	b144      	cbz	r4, cd9e <att_read_type_req+0xb2>
		net_buf_unref(data.buf);
    cd8c:	9808      	ldr	r0, [sp, #32]
    cd8e:	f011 fb5f 	bl	1e450 <net_buf_unref>
    cd92:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    cd96:	462a      	mov	r2, r5
    cd98:	2108      	movs	r1, #8
    cd9a:	4630      	mov	r0, r6
    cd9c:	e7da      	b.n	cd54 <att_read_type_req+0x68>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    cd9e:	4b05      	ldr	r3, [pc, #20]	; (cdb4 <att_read_type_req+0xc8>)
    cda0:	9a08      	ldr	r2, [sp, #32]
    cda2:	2104      	movs	r1, #4
    cda4:	4630      	mov	r0, r6
    cda6:	f7fd ff29 	bl	abfc <bt_l2cap_send_cb>
    cdaa:	e7d6      	b.n	cd5a <att_read_type_req+0x6e>
		return BT_ATT_ERR_INVALID_PDU;
    cdac:	2404      	movs	r4, #4
    cdae:	e7d4      	b.n	cd5a <att_read_type_req+0x6e>
    cdb0:	0000bfc9 	.word	0x0000bfc9
    cdb4:	0000c267 	.word	0x0000c267

0000cdb8 <att_find_type_req>:
{
    cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    cdbc:	f8d0 b000 	ldr.w	fp, [r0]
{
    cdc0:	4681      	mov	r9, r0
	req = (void *)buf->data;
    cdc2:	4608      	mov	r0, r1
{
    cdc4:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    cdc6:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    cdca:	4688      	mov	r8, r1
	value = net_buf_pull(buf, sizeof(*req));
    cdcc:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    cdce:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cdd0:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    cdd2:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    cdd4:	f011 fbea 	bl	1e5ac <net_buf_simple_pull>
    cdd8:	4682      	mov	sl, r0
	if (!start || !end) {
    cdda:	b1dd      	cbz	r5, ce14 <att_find_type_req+0x5c>
    cddc:	2400      	movs	r4, #0
    cdde:	b1c7      	cbz	r7, ce12 <att_find_type_req+0x5a>
	if (start > end) {
    cde0:	42bd      	cmp	r5, r7
    cde2:	d817      	bhi.n	ce14 <att_find_type_req+0x5c>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    cde4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cde8:	a902      	add	r1, sp, #8
    cdea:	a801      	add	r0, sp, #4
    cdec:	f8ad 6006 	strh.w	r6, [sp, #6]
    cdf0:	f88d 4004 	strb.w	r4, [sp, #4]
    cdf4:	f88d 4008 	strb.w	r4, [sp, #8]
    cdf8:	f8ad 300a 	strh.w	r3, [sp, #10]
    cdfc:	f7f9 fe10 	bl	6a20 <bt_uuid_cmp>
    ce00:	4606      	mov	r6, r0
    ce02:	b190      	cbz	r0, ce2a <att_find_type_req+0x72>
    ce04:	230a      	movs	r3, #10
    ce06:	462a      	mov	r2, r5
    ce08:	2106      	movs	r1, #6
    ce0a:	4658      	mov	r0, fp
    ce0c:	f7ff fd34 	bl	c878 <send_err_rsp.part.12>
		return 0;
    ce10:	e007      	b.n	ce22 <att_find_type_req+0x6a>
			*err = 0;
    ce12:	463d      	mov	r5, r7
    ce14:	2301      	movs	r3, #1
    ce16:	462a      	mov	r2, r5
    ce18:	2106      	movs	r1, #6
    ce1a:	4658      	mov	r0, fp
    ce1c:	f7ff fd2c 	bl	c878 <send_err_rsp.part.12>
		return 0;
    ce20:	2400      	movs	r4, #0
}
    ce22:	4620      	mov	r0, r4
    ce24:	b009      	add	sp, #36	; 0x24
    ce26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				 buf->len);
    ce2a:	f8b8 400c 	ldrh.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    ce2e:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    ce32:	4601      	mov	r1, r0
    ce34:	2214      	movs	r2, #20
    ce36:	a803      	add	r0, sp, #12
    ce38:	f7f9 f853 	bl	5ee2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    ce3c:	4632      	mov	r2, r6
    ce3e:	2107      	movs	r1, #7
    ce40:	4640      	mov	r0, r8
    ce42:	f7ff fc97 	bl	c774 <bt_att_create_pdu>
    ce46:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    ce48:	b308      	cbz	r0, ce8e <att_find_type_req+0xd6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ce4a:	230a      	movs	r3, #10
    ce4c:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce50:	4a10      	ldr	r2, [pc, #64]	; (ce94 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    ce52:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce56:	ab03      	add	r3, sp, #12
    ce58:	4639      	mov	r1, r7
    ce5a:	4628      	mov	r0, r5
	data.att = att;
    ce5c:	f8cd 900c 	str.w	r9, [sp, #12]
	data.value = value;
    ce60:	e9cd 6a05 	strd	r6, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce64:	f000 fdb6 	bl	d9d4 <bt_gatt_foreach_attr>
	if (data.err) {
    ce68:	f89d 401d 	ldrb.w	r4, [sp, #29]
    ce6c:	b144      	cbz	r4, ce80 <att_find_type_req+0xc8>
		net_buf_unref(data.buf);
    ce6e:	9804      	ldr	r0, [sp, #16]
    ce70:	f011 faee 	bl	1e450 <net_buf_unref>
    ce74:	f89d 301d 	ldrb.w	r3, [sp, #29]
    ce78:	462a      	mov	r2, r5
    ce7a:	2106      	movs	r1, #6
    ce7c:	4640      	mov	r0, r8
    ce7e:	e7cd      	b.n	ce1c <att_find_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    ce80:	4b05      	ldr	r3, [pc, #20]	; (ce98 <att_find_type_req+0xe0>)
    ce82:	9a04      	ldr	r2, [sp, #16]
    ce84:	2104      	movs	r1, #4
    ce86:	4640      	mov	r0, r8
    ce88:	f7fd feb8 	bl	abfc <bt_l2cap_send_cb>
    ce8c:	e7c9      	b.n	ce22 <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    ce8e:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    ce90:	e7c7      	b.n	ce22 <att_find_type_req+0x6a>
    ce92:	bf00      	nop
    ce94:	0000bea9 	.word	0x0000bea9
    ce98:	0000c267 	.word	0x0000c267

0000ce9c <att_find_info_req>:
{
    ce9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    ce9e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    cea0:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    cea2:	881d      	ldrh	r5, [r3, #0]
{
    cea4:	b085      	sub	sp, #20
    cea6:	4607      	mov	r7, r0
	if (!start || !end) {
    cea8:	b195      	cbz	r5, ced0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    ceaa:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    ceac:	b17c      	cbz	r4, cece <att_find_info_req+0x32>
	if (start > end) {
    ceae:	42a5      	cmp	r5, r4
    ceb0:	d80e      	bhi.n	ced0 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    ceb2:	2210      	movs	r2, #16
    ceb4:	2100      	movs	r1, #0
    ceb6:	4668      	mov	r0, sp
    ceb8:	f7f9 f813 	bl	5ee2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    cebc:	2200      	movs	r2, #0
    cebe:	2105      	movs	r1, #5
    cec0:	4630      	mov	r0, r6
    cec2:	f7ff fc57 	bl	c774 <bt_att_create_pdu>
    cec6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    cec8:	b958      	cbnz	r0, cee2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    ceca:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    cecc:	e007      	b.n	cede <att_find_info_req+0x42>
			*err = 0;
    cece:	4625      	mov	r5, r4
    ced0:	2301      	movs	r3, #1
    ced2:	462a      	mov	r2, r5
    ced4:	2104      	movs	r1, #4
    ced6:	4630      	mov	r0, r6
    ced8:	f7ff fcce 	bl	c878 <send_err_rsp.part.12>
	return 0;
    cedc:	2000      	movs	r0, #0
}
    cede:	b005      	add	sp, #20
    cee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cee2:	4621      	mov	r1, r4
    cee4:	466b      	mov	r3, sp
    cee6:	4a09      	ldr	r2, [pc, #36]	; (cf0c <att_find_info_req+0x70>)
	data.att = att;
    cee8:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    ceea:	4628      	mov	r0, r5
    ceec:	f000 fd72 	bl	d9d4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    cef0:	9c02      	ldr	r4, [sp, #8]
    cef2:	b924      	cbnz	r4, cefe <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    cef4:	9801      	ldr	r0, [sp, #4]
    cef6:	f011 faab 	bl	1e450 <net_buf_unref>
    cefa:	230a      	movs	r3, #10
    cefc:	e7e9      	b.n	ced2 <att_find_info_req+0x36>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    cefe:	4b04      	ldr	r3, [pc, #16]	; (cf10 <att_find_info_req+0x74>)
    cf00:	9a01      	ldr	r2, [sp, #4]
    cf02:	2104      	movs	r1, #4
    cf04:	4630      	mov	r0, r6
    cf06:	f7fd fe79 	bl	abfc <bt_l2cap_send_cb>
    cf0a:	e7e7      	b.n	cedc <att_find_info_req+0x40>
    cf0c:	0000be0f 	.word	0x0000be0f
    cf10:	0000c267 	.word	0x0000c267

0000cf14 <att_write_rsp.part.13.constprop.19>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    cf14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf18:	b087      	sub	sp, #28
    cf1a:	4690      	mov	r8, r2
    cf1c:	4605      	mov	r5, r0
    cf1e:	460e      	mov	r6, r1
	(void)memset(&data, 0, sizeof(data));
    cf20:	2218      	movs	r2, #24
    cf22:	2100      	movs	r1, #0
    cf24:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    cf26:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
    cf28:	f7f8 ffdb 	bl	5ee2 <memset>
	if (rsp) {
    cf2c:	f1b8 0f00 	cmp.w	r8, #0
    cf30:	d120      	bne.n	cf74 <att_write_rsp.part.13.constprop.19+0x60>
	data.value = value;
    cf32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf34:	9303      	str	r3, [sp, #12]
	data.len = len;
    cf36:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    cf3a:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    cf3e:	2301      	movs	r3, #1
    cf40:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    cf44:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    cf48:	466b      	mov	r3, sp
    cf4a:	4a1a      	ldr	r2, [pc, #104]	; (cfb4 <att_write_rsp.part.13.constprop.19+0xa0>)
	data.conn = conn;
    cf4c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    cf4e:	4639      	mov	r1, r7
    cf50:	4638      	mov	r0, r7
	data.op = op;
    cf52:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    cf56:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    cf5a:	f000 fd3b 	bl	d9d4 <bt_gatt_foreach_attr>
	if (data.err) {
    cf5e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    cf62:	b98c      	cbnz	r4, cf88 <att_write_rsp.part.13.constprop.19+0x74>
	if (data.buf) {
    cf64:	9a01      	ldr	r2, [sp, #4]
    cf66:	b192      	cbz	r2, cf8e <att_write_rsp.part.13.constprop.19+0x7a>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    cf68:	4b13      	ldr	r3, [pc, #76]	; (cfb8 <att_write_rsp.part.13.constprop.19+0xa4>)
    cf6a:	2104      	movs	r1, #4
    cf6c:	4628      	mov	r0, r5
    cf6e:	f7fd fe45 	bl	abfc <bt_l2cap_send_cb>
    cf72:	e00d      	b.n	cf90 <att_write_rsp.part.13.constprop.19+0x7c>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    cf74:	2200      	movs	r2, #0
    cf76:	4641      	mov	r1, r8
    cf78:	4628      	mov	r0, r5
    cf7a:	f7ff fbfb 	bl	c774 <bt_att_create_pdu>
    cf7e:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    cf80:	2800      	cmp	r0, #0
    cf82:	d1d6      	bne.n	cf32 <att_write_rsp.part.13.constprop.19+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    cf84:	240e      	movs	r4, #14
    cf86:	e003      	b.n	cf90 <att_write_rsp.part.13.constprop.19+0x7c>
		if (rsp) {
    cf88:	f1b8 0f00 	cmp.w	r8, #0
    cf8c:	d104      	bne.n	cf98 <att_write_rsp.part.13.constprop.19+0x84>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    cf8e:	2400      	movs	r4, #0
}
    cf90:	4620      	mov	r0, r4
    cf92:	b007      	add	sp, #28
    cf94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			net_buf_unref(data.buf);
    cf98:	9801      	ldr	r0, [sp, #4]
    cf9a:	f011 fa59 	bl	1e450 <net_buf_unref>
	if (!req) {
    cf9e:	2e00      	cmp	r6, #0
    cfa0:	d0f5      	beq.n	cf8e <att_write_rsp.part.13.constprop.19+0x7a>
    cfa2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    cfa6:	463a      	mov	r2, r7
    cfa8:	4631      	mov	r1, r6
    cfaa:	4628      	mov	r0, r5
    cfac:	f7ff fc64 	bl	c878 <send_err_rsp.part.12>
    cfb0:	e7ed      	b.n	cf8e <att_write_rsp.part.13.constprop.19+0x7a>
    cfb2:	bf00      	nop
    cfb4:	0000c6a5 	.word	0x0000c6a5
    cfb8:	0000c267 	.word	0x0000c267

0000cfbc <att_signed_write_cmd>:
{
    cfbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    cfc0:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    cfc2:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    cfc4:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    cfc8:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    cfca:	4620      	mov	r0, r4
    cfcc:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    cfce:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    cfd2:	f011 fad2 	bl	1e57a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    cfd6:	4629      	mov	r1, r5
    cfd8:	4630      	mov	r0, r6
    cfda:	f003 f823 	bl	10024 <bt_smp_sign_verify>
	if (err) {
    cfde:	4607      	mov	r7, r0
    cfe0:	b1c8      	cbz	r0, d016 <att_signed_write_cmd+0x5a>
		BT_ERR("Error verifying data");
    cfe2:	4b1a      	ldr	r3, [pc, #104]	; (d04c <att_signed_write_cmd+0x90>)
    cfe4:	6818      	ldr	r0, [r3, #0]
    cfe6:	f010 0007 	ands.w	r0, r0, #7
    cfea:	d011      	beq.n	d010 <att_signed_write_cmd+0x54>
    cfec:	2301      	movs	r3, #1
    cfee:	f04f 0200 	mov.w	r2, #0
    cff2:	f363 0202 	bfi	r2, r3, #0, #3
    cff6:	4916      	ldr	r1, [pc, #88]	; (d050 <att_signed_write_cmd+0x94>)
    cff8:	4b16      	ldr	r3, [pc, #88]	; (d054 <att_signed_write_cmd+0x98>)
    cffa:	4817      	ldr	r0, [pc, #92]	; (d058 <att_signed_write_cmd+0x9c>)
    cffc:	1a5b      	subs	r3, r3, r1
    cffe:	08db      	lsrs	r3, r3, #3
    d000:	f36f 02c5 	bfc	r2, #3, #3
    d004:	f363 128f 	bfi	r2, r3, #6, #10
    d008:	4914      	ldr	r1, [pc, #80]	; (d05c <att_signed_write_cmd+0xa0>)
    d00a:	f7f4 fea5 	bl	1d58 <log_1>
    d00e:	2000      	movs	r0, #0
}
    d010:	b002      	add	sp, #8
    d012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    d016:	2101      	movs	r1, #1
    d018:	4620      	mov	r0, r4
    d01a:	f011 fac7 	bl	1e5ac <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    d01e:	2102      	movs	r1, #2
    d020:	4620      	mov	r0, r4
    d022:	f011 fac3 	bl	1e5ac <net_buf_simple_pull>
	if (!handle) {
    d026:	f1b8 0f00 	cmp.w	r8, #0
    d02a:	d00c      	beq.n	d046 <att_signed_write_cmd+0x8a>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    d02c:	7b2b      	ldrb	r3, [r5, #12]
    d02e:	3b0c      	subs	r3, #12
    d030:	b2db      	uxtb	r3, r3
    d032:	9301      	str	r3, [sp, #4]
    d034:	68ab      	ldr	r3, [r5, #8]
    d036:	9300      	str	r3, [sp, #0]
    d038:	463a      	mov	r2, r7
    d03a:	4643      	mov	r3, r8
    d03c:	4639      	mov	r1, r7
    d03e:	4630      	mov	r0, r6
    d040:	f7ff ff68 	bl	cf14 <att_write_rsp.part.13.constprop.19>
    d044:	e7e4      	b.n	d010 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    d046:	2001      	movs	r0, #1
    d048:	e7e2      	b.n	d010 <att_signed_write_cmd+0x54>
    d04a:	bf00      	nop
    d04c:	2000d714 	.word	0x2000d714
    d050:	0002cff8 	.word	0x0002cff8
    d054:	0002d000 	.word	0x0002d000
    d058:	0002fb79 	.word	0x0002fb79
    d05c:	0002fadf 	.word	0x0002fadf

0000d060 <att_write_cmd>:
{
    d060:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    d062:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    d064:	f101 0008 	add.w	r0, r1, #8
{
    d068:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    d06a:	f011 faaf 	bl	1e5cc <net_buf_simple_pull_le16>
	if (!handle) {
    d06e:	4603      	mov	r3, r0
    d070:	b150      	cbz	r0, d088 <att_write_cmd+0x28>
    d072:	7b22      	ldrb	r2, [r4, #12]
    d074:	9201      	str	r2, [sp, #4]
    d076:	68a2      	ldr	r2, [r4, #8]
    d078:	9200      	str	r2, [sp, #0]
    d07a:	2200      	movs	r2, #0
    d07c:	4611      	mov	r1, r2
    d07e:	4628      	mov	r0, r5
    d080:	f7ff ff48 	bl	cf14 <att_write_rsp.part.13.constprop.19>
}
    d084:	b003      	add	sp, #12
    d086:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    d088:	2001      	movs	r0, #1
    d08a:	e7fb      	b.n	d084 <att_write_cmd+0x24>

0000d08c <att_write_req>:
{
    d08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    d08e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    d090:	f101 0008 	add.w	r0, r1, #8
{
    d094:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    d096:	f011 fa99 	bl	1e5cc <net_buf_simple_pull_le16>
	if (!handle) {
    d09a:	4603      	mov	r3, r0
    d09c:	b150      	cbz	r0, d0b4 <att_write_req+0x28>
    d09e:	7b22      	ldrb	r2, [r4, #12]
    d0a0:	9201      	str	r2, [sp, #4]
    d0a2:	68a2      	ldr	r2, [r4, #8]
    d0a4:	9200      	str	r2, [sp, #0]
    d0a6:	2112      	movs	r1, #18
    d0a8:	2213      	movs	r2, #19
    d0aa:	4628      	mov	r0, r5
    d0ac:	f7ff ff32 	bl	cf14 <att_write_rsp.part.13.constprop.19>
}
    d0b0:	b003      	add	sp, #12
    d0b2:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    d0b4:	2001      	movs	r0, #1
    d0b6:	e7fb      	b.n	d0b0 <att_write_req+0x24>

0000d0b8 <bt_att_init>:

void bt_att_init(void)
{
    d0b8:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    d0ba:	4803      	ldr	r0, [pc, #12]	; (d0c8 <bt_att_init+0x10>)
    d0bc:	f7fd fd20 	bl	ab00 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    d0c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    d0c4:	f000 bc2a 	b.w	d91c <bt_gatt_init>
    d0c8:	2000cdd8 	.word	0x2000cdd8

0000d0cc <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    d0cc:	b510      	push	{r4, lr}
    d0ce:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    d0d0:	b1c8      	cbz	r0, d106 <bt_att_req_send+0x3a>
    d0d2:	b1c1      	cbz	r1, d106 <bt_att_req_send+0x3a>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    d0d4:	f7ff f856 	bl	c184 <att_chan_get>
	if (!att) {
    d0d8:	4603      	mov	r3, r0
    d0da:	b1b8      	cbz	r0, d10c <bt_att_req_send+0x40>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    d0dc:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    d0e0:	b162      	cbz	r2, d0fc <bt_att_req_send+0x30>
	parent->next = child;
    d0e2:	2000      	movs	r0, #0
    d0e4:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    d0e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    d0ea:	b91a      	cbnz	r2, d0f4 <bt_att_req_send+0x28>
	list->head = node;
    d0ec:	e9c3 4427 	strd	r4, r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    d0f0:	4610      	mov	r0, r2
	}

	return att_send_req(att, req);
}
    d0f2:	bd10      	pop	{r4, pc}
	parent->next = child;
    d0f4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    d0f6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    d0fa:	e7fa      	b.n	d0f2 <bt_att_req_send+0x26>
	return att_send_req(att, req);
    d0fc:	4621      	mov	r1, r4
}
    d0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    d102:	f7ff b8ef 	b.w	c2e4 <att_send_req>
		return -EINVAL;
    d106:	f06f 0015 	mvn.w	r0, #21
    d10a:	e7f2      	b.n	d0f2 <bt_att_req_send+0x26>
		return -ENOTCONN;
    d10c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    d110:	e7ef      	b.n	d0f2 <bt_att_req_send+0x26>

0000d112 <sc_ccc_cfg_changed>:

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
	BT_DBG("value 0x%04x", value);
}
    d112:	4770      	bx	lr

0000d114 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    d114:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    d116:	2000      	movs	r0, #0
    d118:	4770      	bx	lr

0000d11a <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    d11a:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    d11c:	2300      	movs	r3, #0
    d11e:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    d120:	461a      	mov	r2, r3
    d122:	42aa      	cmp	r2, r5
    d124:	d108      	bne.n	d138 <gatt_ccc_changed+0x1e>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    d126:	890a      	ldrh	r2, [r1, #8]
    d128:	429a      	cmp	r2, r3
    d12a:	d00e      	beq.n	d14a <gatt_ccc_changed+0x30>
		ccc->value = value;
		if (ccc->cfg_changed) {
    d12c:	68ca      	ldr	r2, [r1, #12]
		ccc->value = value;
    d12e:	810b      	strh	r3, [r1, #8]
		if (ccc->cfg_changed) {
    d130:	b15a      	cbz	r2, d14a <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
    d132:	4619      	mov	r1, r3
		}
	}
}
    d134:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
    d136:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    d138:	680c      	ldr	r4, [r1, #0]
    d13a:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    d13e:	3201      	adds	r2, #1
    d140:	8924      	ldrh	r4, [r4, #8]
    d142:	42a3      	cmp	r3, r4
    d144:	bf38      	it	cc
    d146:	4623      	movcc	r3, r4
    d148:	e7eb      	b.n	d122 <gatt_ccc_changed+0x8>
}
    d14a:	bc30      	pop	{r4, r5}
    d14c:	4770      	bx	lr

0000d14e <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    d14e:	b410      	push	{r4}
    d150:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    d152:	69dc      	ldr	r4, [r3, #28]
    d154:	460a      	mov	r2, r1
    d156:	6999      	ldr	r1, [r3, #24]
    d158:	4623      	mov	r3, r4
}
    d15a:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    d15c:	4718      	bx	r3
	...

0000d160 <gatt_notify>:
{
    d160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d164:	468a      	mov	sl, r1
    d166:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    d168:	211b      	movs	r1, #27
    d16a:	1c9a      	adds	r2, r3, #2
{
    d16c:	4680      	mov	r8, r0
    d16e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    d170:	f7ff fb00 	bl	c774 <bt_att_create_pdu>
	if (!buf) {
    d174:	4604      	mov	r4, r0
    d176:	b9c8      	cbnz	r0, d1ac <gatt_notify+0x4c>
		BT_WARN("No buffer available to send notification");
    d178:	4b1a      	ldr	r3, [pc, #104]	; (d1e4 <gatt_notify+0x84>)
    d17a:	681b      	ldr	r3, [r3, #0]
    d17c:	f003 0307 	and.w	r3, r3, #7
    d180:	2b01      	cmp	r3, #1
    d182:	d910      	bls.n	d1a6 <gatt_notify+0x46>
    d184:	2302      	movs	r3, #2
    d186:	f04f 0200 	mov.w	r2, #0
    d18a:	f363 0202 	bfi	r2, r3, #0, #3
    d18e:	4916      	ldr	r1, [pc, #88]	; (d1e8 <gatt_notify+0x88>)
    d190:	4b16      	ldr	r3, [pc, #88]	; (d1ec <gatt_notify+0x8c>)
    d192:	1a5b      	subs	r3, r3, r1
    d194:	f360 02c5 	bfi	r2, r0, #3, #3
    d198:	08db      	lsrs	r3, r3, #3
    d19a:	f363 128f 	bfi	r2, r3, #6, #10
    d19e:	4914      	ldr	r1, [pc, #80]	; (d1f0 <gatt_notify+0x90>)
    d1a0:	4814      	ldr	r0, [pc, #80]	; (d1f4 <gatt_notify+0x94>)
    d1a2:	f7f4 fdd9 	bl	1d58 <log_1>
		return -ENOMEM;
    d1a6:	f06f 000b 	mvn.w	r0, #11
    d1aa:	e018      	b.n	d1de <gatt_notify+0x7e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    d1ac:	f100 0708 	add.w	r7, r0, #8
    d1b0:	2102      	movs	r1, #2
    d1b2:	4638      	mov	r0, r7
    d1b4:	f011 f9aa 	bl	1e50c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    d1b8:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    d1ba:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    d1bc:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    d1c0:	4638      	mov	r0, r7
    d1c2:	f011 f9a3 	bl	1e50c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    d1c6:	4632      	mov	r2, r6
    d1c8:	4649      	mov	r1, r9
    d1ca:	4628      	mov	r0, r5
    d1cc:	f7f8 fe5c 	bl	5e88 <memcpy>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb);
    d1d0:	4640      	mov	r0, r8
    d1d2:	9b08      	ldr	r3, [sp, #32]
    d1d4:	4622      	mov	r2, r4
    d1d6:	2104      	movs	r1, #4
    d1d8:	f7fd fd10 	bl	abfc <bt_l2cap_send_cb>
	return 0;
    d1dc:	2000      	movs	r0, #0
}
    d1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d1e2:	bf00      	nop
    d1e4:	2000d748 	.word	0x2000d748
    d1e8:	0002cff8 	.word	0x0002cff8
    d1ec:	0002d068 	.word	0x0002d068
    d1f0:	0002fd7f 	.word	0x0002fd7f
    d1f4:	0002fe70 	.word	0x0002fe70

0000d1f8 <gatt_register>:
Z_GENLIST_IS_EMPTY(slist)
    d1f8:	4923      	ldr	r1, [pc, #140]	; (d288 <gatt_register+0x90>)
	if (sys_slist_is_empty(&db)) {
    d1fa:	680b      	ldr	r3, [r1, #0]
{
    d1fc:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    d1fe:	e9d0 4500 	ldrd	r4, r5, [r0]
	if (sys_slist_is_empty(&db)) {
    d202:	b14b      	cbz	r3, d218 <gatt_register+0x20>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    d204:	684b      	ldr	r3, [r1, #4]
    d206:	2b00      	cmp	r3, #0
    d208:	d03c      	beq.n	d284 <gatt_register+0x8c>
	handle = last->attrs[last->attr_count - 1].handle;
    d20a:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    d20e:	2614      	movs	r6, #20
    d210:	fb06 3302 	mla	r3, r6, r2, r3
    d214:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    d218:	b2ad      	uxth	r5, r5
    d21a:	2214      	movs	r2, #20
    d21c:	fb02 4505 	mla	r5, r2, r5, r4
	for (; attrs && count; attrs++, count--) {
    d220:	b10c      	cbz	r4, d226 <gatt_register+0x2e>
    d222:	42ac      	cmp	r4, r5
    d224:	d108      	bne.n	d238 <gatt_register+0x40>
	parent->next = child;
    d226:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    d228:	f100 0208 	add.w	r2, r0, #8
    d22c:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    d22e:	6848      	ldr	r0, [r1, #4]
    d230:	bb20      	cbnz	r0, d27c <gatt_register+0x84>
	list->head = node;
    d232:	e9c1 2200 	strd	r2, r2, [r1]
}
    d236:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    d238:	8a22      	ldrh	r2, [r4, #16]
    d23a:	b92a      	cbnz	r2, d248 <gatt_register+0x50>
			attrs->handle = ++handle;
    d23c:	3301      	adds	r3, #1
    d23e:	b29a      	uxth	r2, r3
    d240:	8222      	strh	r2, [r4, #16]
	for (; attrs && count; attrs++, count--) {
    d242:	3414      	adds	r4, #20
    d244:	4613      	mov	r3, r2
    d246:	e7eb      	b.n	d220 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    d248:	429a      	cmp	r2, r3
    d24a:	d8fa      	bhi.n	d242 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    d24c:	4b0f      	ldr	r3, [pc, #60]	; (d28c <gatt_register+0x94>)
    d24e:	681b      	ldr	r3, [r3, #0]
    d250:	075b      	lsls	r3, r3, #29
    d252:	d010      	beq.n	d276 <gatt_register+0x7e>
    d254:	2101      	movs	r1, #1
    d256:	f04f 0300 	mov.w	r3, #0
    d25a:	f361 0302 	bfi	r3, r1, #0, #3
    d25e:	480c      	ldr	r0, [pc, #48]	; (d290 <gatt_register+0x98>)
    d260:	490c      	ldr	r1, [pc, #48]	; (d294 <gatt_register+0x9c>)
    d262:	1a09      	subs	r1, r1, r0
    d264:	08c9      	lsrs	r1, r1, #3
    d266:	f36f 03c5 	bfc	r3, #3, #3
    d26a:	f361 138f 	bfi	r3, r1, #6, #10
    d26e:	480a      	ldr	r0, [pc, #40]	; (d298 <gatt_register+0xa0>)
    d270:	490a      	ldr	r1, [pc, #40]	; (d29c <gatt_register+0xa4>)
    d272:	f7f4 fd85 	bl	1d80 <log_2>
			return -EINVAL;
    d276:	f06f 0015 	mvn.w	r0, #21
    d27a:	e7dc      	b.n	d236 <gatt_register+0x3e>
	parent->next = child;
    d27c:	6002      	str	r2, [r0, #0]
	list->tail = node;
    d27e:	604a      	str	r2, [r1, #4]
	return 0;
    d280:	4618      	mov	r0, r3
    d282:	e7d8      	b.n	d236 <gatt_register+0x3e>
	handle = last->attrs[last->attr_count - 1].handle;
    d284:	681b      	ldr	r3, [r3, #0]
    d286:	deff      	udf	#255	; 0xff
    d288:	20000c94 	.word	0x20000c94
    d28c:	2000d748 	.word	0x2000d748
    d290:	0002cff8 	.word	0x0002cff8
    d294:	0002d068 	.word	0x0002d068
    d298:	0002fe9d 	.word	0x0002fe9d
    d29c:	0002fda3 	.word	0x0002fda3

0000d2a0 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    d2a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    d2a4:	698b      	ldr	r3, [r1, #24]
{
    d2a6:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    d2a8:	8a1e      	ldrh	r6, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    d2aa:	6818      	ldr	r0, [r3, #0]
    d2ac:	2300      	movs	r3, #0
{
    d2ae:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    d2b0:	f88d 3004 	strb.w	r3, [sp, #4]
    d2b4:	a901      	add	r1, sp, #4
    d2b6:	f642 0303 	movw	r3, #10243	; 0x2803
    d2ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    d2be:	f7f9 fbaf 	bl	6a20 <bt_uuid_cmp>
    d2c2:	b930      	cbnz	r0, d2d2 <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    d2c4:	69a3      	ldr	r3, [r4, #24]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    d2c6:	68db      	ldr	r3, [r3, #12]
    d2c8:	791b      	ldrb	r3, [r3, #4]
    d2ca:	069a      	lsls	r2, r3, #26
    d2cc:	d55d      	bpl.n	d38a <gatt_indicate+0xea>
			return -EINVAL;
		}

		value_handle += 1;
    d2ce:	3601      	adds	r6, #1
    d2d0:	b2b6      	uxth	r6, r6
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    d2d2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d2d4:	211d      	movs	r1, #29
    d2d6:	3202      	adds	r2, #2
    d2d8:	4648      	mov	r0, r9
    d2da:	f7ff fa4b 	bl	c774 <bt_att_create_pdu>
	if (!buf) {
    d2de:	4605      	mov	r5, r0
    d2e0:	b9c8      	cbnz	r0, d316 <gatt_indicate+0x76>
		BT_WARN("No buffer available to send indication");
    d2e2:	4b2b      	ldr	r3, [pc, #172]	; (d390 <gatt_indicate+0xf0>)
    d2e4:	681b      	ldr	r3, [r3, #0]
    d2e6:	f003 0307 	and.w	r3, r3, #7
    d2ea:	2b01      	cmp	r3, #1
    d2ec:	d910      	bls.n	d310 <gatt_indicate+0x70>
    d2ee:	2302      	movs	r3, #2
    d2f0:	f04f 0200 	mov.w	r2, #0
    d2f4:	f363 0202 	bfi	r2, r3, #0, #3
    d2f8:	4926      	ldr	r1, [pc, #152]	; (d394 <gatt_indicate+0xf4>)
    d2fa:	4b27      	ldr	r3, [pc, #156]	; (d398 <gatt_indicate+0xf8>)
    d2fc:	1a5b      	subs	r3, r3, r1
    d2fe:	f360 02c5 	bfi	r2, r0, #3, #3
    d302:	08db      	lsrs	r3, r3, #3
    d304:	f363 128f 	bfi	r2, r3, #6, #10
    d308:	4924      	ldr	r1, [pc, #144]	; (d39c <gatt_indicate+0xfc>)
    d30a:	4825      	ldr	r0, [pc, #148]	; (d3a0 <gatt_indicate+0x100>)
    d30c:	f7f4 fd24 	bl	1d58 <log_1>
		return -ENOMEM;
    d310:	f06f 040b 	mvn.w	r4, #11
    d314:	e035      	b.n	d382 <gatt_indicate+0xe2>
	}

	BT_DBG("conn %p handle 0x%04x", conn, value_handle);

	ind = net_buf_add(buf, sizeof(*ind));
    d316:	f100 0708 	add.w	r7, r0, #8
    d31a:	2102      	movs	r1, #2
    d31c:	4638      	mov	r0, r7
    d31e:	f011 f8f5 	bl	1e50c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    d322:	4680      	mov	r8, r0

	net_buf_add(buf, params->len);
    d324:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(value_handle);
    d326:	f828 6b02 	strh.w	r6, [r8], #2
	net_buf_add(buf, params->len);
    d32a:	4638      	mov	r0, r7
    d32c:	f011 f8ee 	bl	1e50c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d330:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    d332:	6a21      	ldr	r1, [r4, #32]
    d334:	4640      	mov	r0, r8
    d336:	f7f8 fda7 	bl	5e88 <memcpy>
		req->destroy = destroy;
    d33a:	2600      	movs	r6, #0
		req->func = func;
    d33c:	4b19      	ldr	r3, [pc, #100]	; (d3a4 <gatt_indicate+0x104>)
		req->buf = buf;
    d33e:	6125      	str	r5, [r4, #16]
		req->func = func;
    d340:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    d342:	60a6      	str	r6, [r4, #8]
		err = bt_att_req_send(conn, req);
    d344:	4621      	mov	r1, r4
    d346:	4648      	mov	r0, r9
    d348:	f7ff fec0 	bl	d0cc <bt_att_req_send>
	if (err) {
    d34c:	4604      	mov	r4, r0
    d34e:	b1c0      	cbz	r0, d382 <gatt_indicate+0xe2>
		BT_ERR("Error sending ATT PDU: %d", err);
    d350:	4b0f      	ldr	r3, [pc, #60]	; (d390 <gatt_indicate+0xf0>)
    d352:	681b      	ldr	r3, [r3, #0]
    d354:	075b      	lsls	r3, r3, #29
    d356:	d011      	beq.n	d37c <gatt_indicate+0xdc>
    d358:	2201      	movs	r2, #1
    d35a:	f04f 0300 	mov.w	r3, #0
    d35e:	f362 0302 	bfi	r3, r2, #0, #3
    d362:	490c      	ldr	r1, [pc, #48]	; (d394 <gatt_indicate+0xf4>)
    d364:	4a0c      	ldr	r2, [pc, #48]	; (d398 <gatt_indicate+0xf8>)
    d366:	1a52      	subs	r2, r2, r1
    d368:	08d2      	lsrs	r2, r2, #3
    d36a:	f366 03c5 	bfi	r3, r6, #3, #3
    d36e:	f362 138f 	bfi	r3, r2, #6, #10
    d372:	490d      	ldr	r1, [pc, #52]	; (d3a8 <gatt_indicate+0x108>)
    d374:	4602      	mov	r2, r0
    d376:	480d      	ldr	r0, [pc, #52]	; (d3ac <gatt_indicate+0x10c>)
    d378:	f7f4 fd02 	bl	1d80 <log_2>
		net_buf_unref(buf);
    d37c:	4628      	mov	r0, r5
    d37e:	f011 f867 	bl	1e450 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    d382:	4620      	mov	r0, r4
    d384:	b003      	add	sp, #12
    d386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    d38a:	f06f 0415 	mvn.w	r4, #21
    d38e:	e7f8      	b.n	d382 <gatt_indicate+0xe2>
    d390:	2000d748 	.word	0x2000d748
    d394:	0002cff8 	.word	0x0002cff8
    d398:	0002d068 	.word	0x0002d068
    d39c:	0002fd95 	.word	0x0002fd95
    d3a0:	0002fe27 	.word	0x0002fe27
    d3a4:	0000d14f 	.word	0x0000d14f
    d3a8:	0002fd8b 	.word	0x0002fd8b
    d3ac:	0002fe52 	.word	0x0002fe52

0000d3b0 <sc_indicate.constprop.15>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    d3b0:	b510      	push	{r4, lr}
    d3b2:	4b16      	ldr	r3, [pc, #88]	; (d40c <sc_indicate.constprop.15+0x5c>)
    d3b4:	f3bf 8f5b 	dmb	ish
    d3b8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    d3bc:	e852 4f00 	ldrex	r4, [r2]
    d3c0:	f044 0c01 	orr.w	ip, r4, #1
    d3c4:	e842 ce00 	strex	lr, ip, [r2]
    d3c8:	f1be 0f00 	cmp.w	lr, #0
    d3cc:	d1f6      	bne.n	d3bc <sc_indicate.constprop.15+0xc>
    d3ce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    d3d2:	07e2      	lsls	r2, r4, #31
    d3d4:	d402      	bmi.n	d3dc <sc_indicate.constprop.15+0x2c>
		sc->start = start;
    d3d6:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    d3d8:	8559      	strh	r1, [r3, #42]	; 0x2a
    d3da:	e009      	b.n	d3f0 <sc_indicate.constprop.15+0x40>
	if (new_start >= *start && new_end <= *end) {
    d3dc:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    d3de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    d3e0:	4284      	cmp	r4, r0
    d3e2:	d802      	bhi.n	d3ea <sc_indicate.constprop.15+0x3a>
    d3e4:	4291      	cmp	r1, r2
    d3e6:	d8f7      	bhi.n	d3d8 <sc_indicate.constprop.15+0x28>
}
    d3e8:	bd10      	pop	{r4, pc}
	if (*end < new_end) {
    d3ea:	4291      	cmp	r1, r2
		*start = new_start;
    d3ec:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    d3ee:	d8f3      	bhi.n	d3d8 <sc_indicate.constprop.15+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d3f0:	f3bf 8f5b 	dmb	ish
    d3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d3f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    d3fa:	079b      	lsls	r3, r3, #30
    d3fc:	d4f4      	bmi.n	d3e8 <sc_indicate.constprop.15+0x38>
    d3fe:	220a      	movs	r2, #10
    d400:	4903      	ldr	r1, [pc, #12]	; (d410 <sc_indicate.constprop.15+0x60>)
    d402:	4804      	ldr	r0, [pc, #16]	; (d414 <sc_indicate.constprop.15+0x64>)
}
    d404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d408:	f01f b9da 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
    d40c:	20000c9c 	.word	0x20000c9c
    d410:	20000cc8 	.word	0x20000cc8
    d414:	200031d8 	.word	0x200031d8

0000d418 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    d418:	6882      	ldr	r2, [r0, #8]
    d41a:	4b19      	ldr	r3, [pc, #100]	; (d480 <connected_cb+0x68>)
    d41c:	429a      	cmp	r2, r3
{
    d41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d422:	4607      	mov	r7, r0
    d424:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    d426:	d126      	bne.n	d476 <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    d428:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    d42a:	2600      	movs	r6, #0
    d42c:	686b      	ldr	r3, [r5, #4]
    d42e:	429e      	cmp	r6, r3
    d430:	d221      	bcs.n	d476 <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    d432:	6829      	ldr	r1, [r5, #0]
    d434:	ea4f 1806 	mov.w	r8, r6, lsl #4
    d438:	4441      	add	r1, r8
    d43a:	3101      	adds	r1, #1
    d43c:	4620      	mov	r0, r4
    d43e:	f7fc ff93 	bl	a368 <bt_conn_addr_le_cmp>
    d442:	b9d8      	cbnz	r0, d47c <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    d444:	682b      	ldr	r3, [r5, #0]
    d446:	4443      	add	r3, r8
    d448:	891b      	ldrh	r3, [r3, #8]
    d44a:	b1bb      	cbz	r3, d47c <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    d44c:	4629      	mov	r1, r5
    d44e:	4638      	mov	r0, r7
    d450:	f7ff fe63 	bl	d11a <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    d454:	682c      	ldr	r4, [r5, #0]
    d456:	4b0b      	ldr	r3, [pc, #44]	; (d484 <connected_cb+0x6c>)
    d458:	429c      	cmp	r4, r3
    d45a:	d10c      	bne.n	d476 <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    d45c:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    d45e:	89a0      	ldrh	r0, [r4, #12]
    d460:	89e1      	ldrh	r1, [r4, #14]
    d462:	b900      	cbnz	r0, d466 <connected_cb+0x4e>
    d464:	b139      	cbz	r1, d476 <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    d466:	f7ff ffa3 	bl	d3b0 <sc_indicate.constprop.15>
	(void)memset(cfg->data, 0, sizeof(cfg->data));
    d46a:	2204      	movs	r2, #4
    d46c:	2100      	movs	r1, #0
    d46e:	f104 000c 	add.w	r0, r4, #12
    d472:	f7f8 fd36 	bl	5ee2 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    d476:	2001      	movs	r0, #1
    d478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    d47c:	3601      	adds	r6, #1
    d47e:	e7d5      	b.n	d42c <connected_cb+0x14>
    d480:	0000d639 	.word	0x0000d639
    d484:	20000cf0 	.word	0x20000cf0

0000d488 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d488:	490d      	ldr	r1, [pc, #52]	; (d4c0 <sc_indicate_rsp+0x38>)
    d48a:	f3bf 8f5b 	dmb	ish
    d48e:	f101 034c 	add.w	r3, r1, #76	; 0x4c
    d492:	e853 2f00 	ldrex	r2, [r3]
    d496:	f022 0202 	bic.w	r2, r2, #2
    d49a:	e843 2000 	strex	r0, r2, [r3]
    d49e:	2800      	cmp	r0, #0
    d4a0:	d1f7      	bne.n	d492 <sc_indicate_rsp+0xa>
    d4a2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d4a6:	f3bf 8f5b 	dmb	ish
    d4aa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    d4ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d4b0:	07db      	lsls	r3, r3, #31
    d4b2:	d504      	bpl.n	d4be <sc_indicate_rsp+0x36>
    d4b4:	2200      	movs	r2, #0
    d4b6:	312c      	adds	r1, #44	; 0x2c
    d4b8:	4802      	ldr	r0, [pc, #8]	; (d4c4 <sc_indicate_rsp+0x3c>)
    d4ba:	f01f b981 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
}
    d4be:	4770      	bx	lr
    d4c0:	20000c9c 	.word	0x20000c9c
    d4c4:	200031d8 	.word	0x200031d8

0000d4c8 <read_appearance>:
{
    d4c8:	b513      	push	{r0, r1, r4, lr}
    d4ca:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    d4ce:	4610      	mov	r0, r2
	if (offset > value_len) {
    d4d0:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    d4d2:	f04f 0200 	mov.w	r2, #0
    d4d6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    d4da:	d80d      	bhi.n	d4f8 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    d4dc:	f1c1 0402 	rsb	r4, r1, #2
    d4e0:	429c      	cmp	r4, r3
    d4e2:	bfa8      	it	ge
    d4e4:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    d4e6:	f10d 0306 	add.w	r3, sp, #6
    d4ea:	4622      	mov	r2, r4
    d4ec:	4419      	add	r1, r3
    d4ee:	f7f8 fccb 	bl	5e88 <memcpy>
}
    d4f2:	4620      	mov	r0, r4
    d4f4:	b002      	add	sp, #8
    d4f6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d4f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    d4fc:	e7f9      	b.n	d4f2 <read_appearance+0x2a>
	...

0000d500 <read_ppcp>:
{
    d500:	b513      	push	{r0, r1, r4, lr}
    d502:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
    d506:	4c0b      	ldr	r4, [pc, #44]	; (d534 <read_ppcp+0x34>)
{
    d508:	4610      	mov	r0, r2
	if (offset > value_len) {
    d50a:	2908      	cmp	r1, #8
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
    d50c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    d510:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    d514:	d80b      	bhi.n	d52e <read_ppcp+0x2e>
	len = min(buf_len, value_len - offset);
    d516:	f1c1 0408 	rsb	r4, r1, #8
    d51a:	429c      	cmp	r4, r3
    d51c:	bfa8      	it	ge
    d51e:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    d520:	4622      	mov	r2, r4
    d522:	4469      	add	r1, sp
    d524:	f7f8 fcb0 	bl	5e88 <memcpy>
}
    d528:	4620      	mov	r0, r4
    d52a:	b002      	add	sp, #8
    d52c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d52e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    d532:	e7f9      	b.n	d528 <read_ppcp+0x28>
    d534:	00280018 	.word	0x00280018

0000d538 <read_name>:
{
    d538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d53c:	4698      	mov	r8, r3
    d53e:	4616      	mov	r6, r2
    d540:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
    d544:	f7fb fb6c 	bl	8c20 <bt_get_name>
    d548:	4607      	mov	r7, r0
				 strlen(name));
    d54a:	f7f8 fc47 	bl	5ddc <strlen>
	if (offset > value_len) {
    d54e:	b283      	uxth	r3, r0
    d550:	42ab      	cmp	r3, r5
    d552:	d30d      	bcc.n	d570 <read_name+0x38>
	len = min(buf_len, value_len - offset);
    d554:	1b5c      	subs	r4, r3, r5
    d556:	4544      	cmp	r4, r8
    d558:	4623      	mov	r3, r4
    d55a:	bfa8      	it	ge
    d55c:	4643      	movge	r3, r8
    d55e:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    d560:	4622      	mov	r2, r4
    d562:	1979      	adds	r1, r7, r5
    d564:	4630      	mov	r0, r6
    d566:	f7f8 fc8f 	bl	5e88 <memcpy>
}
    d56a:	4620      	mov	r0, r4
    d56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d570:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
    d574:	e7f9      	b.n	d56a <read_name+0x32>

0000d576 <bt_gatt_attr_read_ccc>:
{
    d576:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d57a:	68ce      	ldr	r6, [r1, #12]
{
    d57c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    d580:	4604      	mov	r4, r0
    d582:	4690      	mov	r8, r2
    d584:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    d586:	2500      	movs	r5, #0
    d588:	6873      	ldr	r3, [r6, #4]
    d58a:	42ab      	cmp	r3, r5
    d58c:	d90f      	bls.n	d5ae <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    d58e:	6831      	ldr	r1, [r6, #0]
    d590:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    d594:	4451      	add	r1, sl
    d596:	3101      	adds	r1, #1
    d598:	4620      	mov	r0, r4
    d59a:	f7fc fee5 	bl	a368 <bt_conn_addr_le_cmp>
    d59e:	b108      	cbz	r0, d5a4 <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    d5a0:	3501      	adds	r5, #1
    d5a2:	e7f1      	b.n	d588 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    d5a4:	6832      	ldr	r2, [r6, #0]
    d5a6:	4452      	add	r2, sl
    d5a8:	8913      	ldrh	r3, [r2, #8]
    d5aa:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    d5ae:	6873      	ldr	r3, [r6, #4]
    d5b0:	42ab      	cmp	r3, r5
		value = 0x0000;
    d5b2:	bf04      	itt	eq
    d5b4:	2300      	moveq	r3, #0
    d5b6:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    d5ba:	2f02      	cmp	r7, #2
    d5bc:	d80f      	bhi.n	d5de <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    d5be:	f1c7 0402 	rsb	r4, r7, #2
    d5c2:	454c      	cmp	r4, r9
    d5c4:	bfa8      	it	ge
    d5c6:	464c      	movge	r4, r9
	memcpy(buf, (u8_t *)value + offset, len);
    d5c8:	f10d 0306 	add.w	r3, sp, #6
    d5cc:	4622      	mov	r2, r4
    d5ce:	19d9      	adds	r1, r3, r7
    d5d0:	4640      	mov	r0, r8
    d5d2:	f7f8 fc59 	bl	5e88 <memcpy>
}
    d5d6:	4620      	mov	r0, r4
    d5d8:	b002      	add	sp, #8
    d5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d5de:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    d5e2:	e7f8      	b.n	d5d6 <bt_gatt_attr_read_ccc+0x60>

0000d5e4 <bt_gatt_attr_read_service>:
{
    d5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    d5e6:	68c9      	ldr	r1, [r1, #12]
{
    d5e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    d5ec:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    d5ee:	780a      	ldrb	r2, [r1, #0]
    d5f0:	b992      	cbnz	r2, d618 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    d5f2:	884a      	ldrh	r2, [r1, #2]
    d5f4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    d5f8:	2d02      	cmp	r5, #2
    d5fa:	d819      	bhi.n	d630 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    d5fc:	f1c5 0402 	rsb	r4, r5, #2
    d600:	429c      	cmp	r4, r3
    d602:	bfa8      	it	ge
    d604:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    d606:	f10d 0306 	add.w	r3, sp, #6
    d60a:	4622      	mov	r2, r4
    d60c:	1959      	adds	r1, r3, r5
    d60e:	f7f8 fc3b 	bl	5e88 <memcpy>
}
    d612:	4620      	mov	r0, r4
    d614:	b003      	add	sp, #12
    d616:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    d618:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    d61a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    d61e:	d807      	bhi.n	d630 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    d620:	f1c5 0410 	rsb	r4, r5, #16
    d624:	429c      	cmp	r4, r3
    d626:	bfa8      	it	ge
    d628:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    d62a:	4622      	mov	r2, r4
    d62c:	4429      	add	r1, r5
    d62e:	e7ee      	b.n	d60e <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d630:	f06f 0406 	mvn.w	r4, #6
    d634:	e7ed      	b.n	d612 <bt_gatt_attr_read_service+0x2e>
	...

0000d638 <bt_gatt_attr_write_ccc>:
{
    d638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d63c:	b085      	sub	sp, #20
    d63e:	4688      	mov	r8, r1
    d640:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d644:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    d648:	2902      	cmp	r1, #2
{
    d64a:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    d64c:	d871      	bhi.n	d732 <bt_gatt_attr_write_ccc+0xfa>
	if (offset + len > sizeof(u16_t)) {
    d64e:	4419      	add	r1, r3
    d650:	2902      	cmp	r1, #2
    d652:	461f      	mov	r7, r3
    d654:	dc70      	bgt.n	d738 <bt_gatt_attr_write_ccc+0x100>
	return ((u16_t)src[1] << 8) | src[0];
    d656:	7853      	ldrb	r3, [r2, #1]
    d658:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    d65a:	2400      	movs	r4, #0
    d65c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    d660:	686b      	ldr	r3, [r5, #4]
    d662:	42a3      	cmp	r3, r4
    d664:	d907      	bls.n	d676 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    d666:	6829      	ldr	r1, [r5, #0]
    d668:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    d66c:	3101      	adds	r1, #1
    d66e:	4648      	mov	r0, r9
    d670:	f7fc fe7a 	bl	a368 <bt_conn_addr_le_cmp>
    d674:	b9c8      	cbnz	r0, d6aa <bt_gatt_attr_write_ccc+0x72>
	if (i == ccc->cfg_len) {
    d676:	686b      	ldr	r3, [r5, #4]
    d678:	42a3      	cmp	r3, r4
    d67a:	d13d      	bne.n	d6f8 <bt_gatt_attr_write_ccc+0xc0>
		if (!value) {
    d67c:	2e00      	cmp	r6, #0
    d67e:	d054      	beq.n	d72a <bt_gatt_attr_write_ccc+0xf2>
		for (i = 0; i < ccc->cfg_len; i++) {
    d680:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    d682:	46a3      	mov	fp, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    d684:	686b      	ldr	r3, [r5, #4]
    d686:	42a3      	cmp	r3, r4
    d688:	d919      	bls.n	d6be <bt_gatt_attr_write_ccc+0x86>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    d68a:	6828      	ldr	r0, [r5, #0]
    d68c:	f8cd b000 	str.w	fp, [sp]
    d690:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    d694:	4450      	add	r0, sl
    d696:	2207      	movs	r2, #7
    d698:	4669      	mov	r1, sp
    d69a:	3001      	adds	r0, #1
    d69c:	f8cd b003 	str.w	fp, [sp, #3]
    d6a0:	f7f8 fbcb 	bl	5e3a <memcmp>
    d6a4:	b118      	cbz	r0, d6ae <bt_gatt_attr_write_ccc+0x76>
		for (i = 0; i < ccc->cfg_len; i++) {
    d6a6:	3401      	adds	r4, #1
    d6a8:	e7ec      	b.n	d684 <bt_gatt_attr_write_ccc+0x4c>
	for (i = 0; i < ccc->cfg_len; i++) {
    d6aa:	3401      	adds	r4, #1
    d6ac:	e7d8      	b.n	d660 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    d6ae:	6828      	ldr	r0, [r5, #0]
    d6b0:	4450      	add	r0, sl
	memcpy(dst, src, sizeof(*dst));
    d6b2:	2207      	movs	r2, #7
    d6b4:	f109 0148 	add.w	r1, r9, #72	; 0x48
    d6b8:	3001      	adds	r0, #1
    d6ba:	f7f8 fbe5 	bl	5e88 <memcpy>
		if (i == ccc->cfg_len) {
    d6be:	686b      	ldr	r3, [r5, #4]
    d6c0:	42a3      	cmp	r3, r4
    d6c2:	d119      	bne.n	d6f8 <bt_gatt_attr_write_ccc+0xc0>
			BT_WARN("No space to store CCC cfg");
    d6c4:	4b1e      	ldr	r3, [pc, #120]	; (d740 <bt_gatt_attr_write_ccc+0x108>)
    d6c6:	681b      	ldr	r3, [r3, #0]
    d6c8:	f003 0307 	and.w	r3, r3, #7
    d6cc:	2b01      	cmp	r3, #1
    d6ce:	d910      	bls.n	d6f2 <bt_gatt_attr_write_ccc+0xba>
    d6d0:	2302      	movs	r3, #2
    d6d2:	f04f 0200 	mov.w	r2, #0
    d6d6:	f363 0202 	bfi	r2, r3, #0, #3
    d6da:	491a      	ldr	r1, [pc, #104]	; (d744 <bt_gatt_attr_write_ccc+0x10c>)
    d6dc:	4b1a      	ldr	r3, [pc, #104]	; (d748 <bt_gatt_attr_write_ccc+0x110>)
    d6de:	481b      	ldr	r0, [pc, #108]	; (d74c <bt_gatt_attr_write_ccc+0x114>)
    d6e0:	1a5b      	subs	r3, r3, r1
    d6e2:	f36f 02c5 	bfc	r2, #3, #3
    d6e6:	08db      	lsrs	r3, r3, #3
    d6e8:	f363 128f 	bfi	r2, r3, #6, #10
    d6ec:	4918      	ldr	r1, [pc, #96]	; (d750 <bt_gatt_attr_write_ccc+0x118>)
    d6ee:	f7f4 fb33 	bl	1d58 <log_1>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d6f2:	f06f 0710 	mvn.w	r7, #16
    d6f6:	e018      	b.n	d72a <bt_gatt_attr_write_ccc+0xf2>
	ccc->cfg[i].value = value;
    d6f8:	682b      	ldr	r3, [r5, #0]
    d6fa:	0124      	lsls	r4, r4, #4
    d6fc:	4423      	add	r3, r4
    d6fe:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    d700:	892b      	ldrh	r3, [r5, #8]
    d702:	42b3      	cmp	r3, r6
    d704:	d003      	beq.n	d70e <bt_gatt_attr_write_ccc+0xd6>
		gatt_ccc_changed(attr, ccc);
    d706:	4629      	mov	r1, r5
    d708:	4640      	mov	r0, r8
    d70a:	f7ff fd06 	bl	d11a <gatt_ccc_changed>
	if (!value) {
    d70e:	b966      	cbnz	r6, d72a <bt_gatt_attr_write_ccc+0xf2>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    d710:	6828      	ldr	r0, [r5, #0]
    d712:	9602      	str	r6, [sp, #8]
    d714:	4420      	add	r0, r4
    d716:	2207      	movs	r2, #7
    d718:	a902      	add	r1, sp, #8
    d71a:	3001      	adds	r0, #1
    d71c:	f8cd 600b 	str.w	r6, [sp, #11]
    d720:	f7f8 fbb2 	bl	5e88 <memcpy>
		ccc->cfg[i].value = 0;
    d724:	682b      	ldr	r3, [r5, #0]
    d726:	441c      	add	r4, r3
    d728:	8126      	strh	r6, [r4, #8]
}
    d72a:	4638      	mov	r0, r7
    d72c:	b005      	add	sp, #20
    d72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d732:	f06f 0706 	mvn.w	r7, #6
    d736:	e7f8      	b.n	d72a <bt_gatt_attr_write_ccc+0xf2>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d738:	f06f 070c 	mvn.w	r7, #12
    d73c:	e7f5      	b.n	d72a <bt_gatt_attr_write_ccc+0xf2>
    d73e:	bf00      	nop
    d740:	2000d748 	.word	0x2000d748
    d744:	0002cff8 	.word	0x0002cff8
    d748:	0002d068 	.word	0x0002d068
    d74c:	0002fe09 	.word	0x0002fe09
    d750:	0002fdc8 	.word	0x0002fdc8

0000d754 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    d758:	6882      	ldr	r2, [r0, #8]
    d75a:	4b2f      	ldr	r3, [pc, #188]	; (d818 <disconnected_cb+0xc4>)
    d75c:	429a      	cmp	r2, r3
{
    d75e:	b085      	sub	sp, #20
    d760:	4681      	mov	r9, r0
    d762:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    d764:	d14b      	bne.n	d7fe <disconnected_cb+0xaa>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    d766:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    d768:	8923      	ldrh	r3, [r4, #8]
    d76a:	2b00      	cmp	r3, #0
    d76c:	d047      	beq.n	d7fe <disconnected_cb+0xaa>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    d76e:	2500      	movs	r5, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d770:	f101 0b48 	add.w	fp, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    d774:	6863      	ldr	r3, [r4, #4]
    d776:	429d      	cmp	r5, r3
    d778:	d30c      	bcc.n	d794 <disconnected_cb+0x40>
			}
		}
	}

	/* Reset value while disconnected */
	(void)memset(&ccc->value, 0, sizeof(ccc->value));
    d77a:	2202      	movs	r2, #2
    d77c:	2100      	movs	r1, #0
    d77e:	f104 0008 	add.w	r0, r4, #8
    d782:	f7f8 fbae 	bl	5ee2 <memset>
	if (ccc->cfg_changed) {
    d786:	68e3      	ldr	r3, [r4, #12]
    d788:	2b00      	cmp	r3, #0
    d78a:	d038      	beq.n	d7fe <disconnected_cb+0xaa>
		ccc->cfg_changed(attr, ccc->value);
    d78c:	8921      	ldrh	r1, [r4, #8]
    d78e:	4648      	mov	r0, r9
    d790:	4798      	blx	r3
    d792:	e034      	b.n	d7fe <disconnected_cb+0xaa>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    d794:	6823      	ldr	r3, [r4, #0]
    d796:	ea4f 1805 	mov.w	r8, r5, lsl #4
    d79a:	eb03 0a08 	add.w	sl, r3, r8
		if (!cfg->value) {
    d79e:	f8ba 2008 	ldrh.w	r2, [sl, #8]
    d7a2:	b162      	cbz	r2, d7be <disconnected_cb+0x6a>
		if (conn->id != cfg->id ||
    d7a4:	7a31      	ldrb	r1, [r6, #8]
    d7a6:	f813 2008 	ldrb.w	r2, [r3, r8]
    d7aa:	4291      	cmp	r1, r2
    d7ac:	f10a 0701 	add.w	r7, sl, #1
    d7b0:	d007      	beq.n	d7c2 <disconnected_cb+0x6e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d7b2:	4639      	mov	r1, r7
    d7b4:	f813 0008 	ldrb.w	r0, [r3, r8]
    d7b8:	f7fc fdee 	bl	a398 <bt_conn_lookup_addr_le>
			if (tmp) {
    d7bc:	b9d0      	cbnz	r0, d7f4 <disconnected_cb+0xa0>
	for (i = 0; i < ccc->cfg_len; i++) {
    d7be:	3501      	adds	r5, #1
    d7c0:	e7d8      	b.n	d774 <disconnected_cb+0x20>
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    d7c2:	4639      	mov	r1, r7
    d7c4:	4630      	mov	r0, r6
    d7c6:	9301      	str	r3, [sp, #4]
    d7c8:	f7fc fdce 	bl	a368 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	2800      	cmp	r0, #0
    d7d0:	d1ef      	bne.n	d7b2 <disconnected_cb+0x5e>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d7d2:	4659      	mov	r1, fp
    d7d4:	7a30      	ldrb	r0, [r6, #8]
    d7d6:	f7fb ff07 	bl	95e8 <bt_addr_le_is_bonded>
    d7da:	4680      	mov	r8, r0
    d7dc:	b9b0      	cbnz	r0, d80c <disconnected_cb+0xb8>
				bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d7de:	9002      	str	r0, [sp, #8]
    d7e0:	2207      	movs	r2, #7
    d7e2:	f8cd 000b 	str.w	r0, [sp, #11]
    d7e6:	a902      	add	r1, sp, #8
    d7e8:	4638      	mov	r0, r7
    d7ea:	f7f8 fb4d 	bl	5e88 <memcpy>
				cfg->value = 0;
    d7ee:	f8aa 8008 	strh.w	r8, [sl, #8]
    d7f2:	e7e4      	b.n	d7be <disconnected_cb+0x6a>
				if (tmp->state == BT_CONN_CONNECTED) {
    d7f4:	7b43      	ldrb	r3, [r0, #13]
    d7f6:	2b04      	cmp	r3, #4
    d7f8:	d105      	bne.n	d806 <disconnected_cb+0xb2>
					bt_conn_unref(tmp);
    d7fa:	f7fc fe0d 	bl	a418 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    d7fe:	2001      	movs	r0, #1
    d800:	b005      	add	sp, #20
    d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				bt_conn_unref(tmp);
    d806:	f7fc fe07 	bl	a418 <bt_conn_unref>
    d80a:	e7d8      	b.n	d7be <disconnected_cb+0x6a>
    d80c:	2207      	movs	r2, #7
    d80e:	4659      	mov	r1, fp
    d810:	4638      	mov	r0, r7
    d812:	f7f8 fb39 	bl	5e88 <memcpy>
    d816:	e7d2      	b.n	d7be <disconnected_cb+0x6a>
    d818:	0000d639 	.word	0x0000d639

0000d81c <notify_cb>:
{
    d81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d820:	4605      	mov	r5, r0
    d822:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    d824:	2600      	movs	r6, #0
    d826:	f642 1302 	movw	r3, #10498	; 0x2902
    d82a:	a902      	add	r1, sp, #8
    d82c:	6800      	ldr	r0, [r0, #0]
    d82e:	f88d 6008 	strb.w	r6, [sp, #8]
    d832:	f8ad 300a 	strh.w	r3, [sp, #10]
    d836:	f7f9 f8f3 	bl	6a20 <bt_uuid_cmp>
    d83a:	b178      	cbz	r0, d85c <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    d83c:	f642 0303 	movw	r3, #10243	; 0x2803
    d840:	6828      	ldr	r0, [r5, #0]
    d842:	f88d 600c 	strb.w	r6, [sp, #12]
    d846:	a903      	add	r1, sp, #12
    d848:	f8ad 300e 	strh.w	r3, [sp, #14]
    d84c:	f7f9 f8e8 	bl	6a20 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    d850:	1b80      	subs	r0, r0, r6
    d852:	bf18      	it	ne
    d854:	2001      	movne	r0, #1
}
    d856:	b004      	add	sp, #16
    d858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d85c:	68aa      	ldr	r2, [r5, #8]
    d85e:	4b2d      	ldr	r3, [pc, #180]	; (d914 <notify_cb+0xf8>)
    d860:	429a      	cmp	r2, r3
    d862:	d001      	beq.n	d868 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    d864:	2001      	movs	r0, #1
    d866:	e7f6      	b.n	d856 <notify_cb+0x3a>
	ccc = attr->user_data;
    d868:	68ef      	ldr	r7, [r5, #12]
			if (ccc->cfg == sc_ccc_cfg) {
    d86a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d918 <notify_cb+0xfc>
	for (i = 0; i < ccc->cfg_len; i++) {
    d86e:	4606      	mov	r6, r0
    d870:	4680      	mov	r8, r0
    d872:	687b      	ldr	r3, [r7, #4]
    d874:	429e      	cmp	r6, r3
    d876:	d2f5      	bcs.n	d864 <notify_cb+0x48>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    d878:	683a      	ldr	r2, [r7, #0]
		if (cfg->value != data->type) {
    d87a:	88a1      	ldrh	r1, [r4, #4]
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    d87c:	0133      	lsls	r3, r6, #4
    d87e:	18d5      	adds	r5, r2, r3
		if (cfg->value != data->type) {
    d880:	8928      	ldrh	r0, [r5, #8]
    d882:	4288      	cmp	r0, r1
    d884:	d116      	bne.n	d8b4 <notify_cb+0x98>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d886:	1c69      	adds	r1, r5, #1
    d888:	5cd0      	ldrb	r0, [r2, r3]
    d88a:	f7fc fd85 	bl	a398 <bt_conn_lookup_addr_le>
		if (!conn) {
    d88e:	4682      	mov	sl, r0
    d890:	bb00      	cbnz	r0, d8d4 <notify_cb+0xb8>
			if (ccc->cfg == sc_ccc_cfg) {
    d892:	683b      	ldr	r3, [r7, #0]
    d894:	454b      	cmp	r3, r9
    d896:	d10d      	bne.n	d8b4 <notify_cb+0x98>
				sc_save(cfg, data->params);
    d898:	69a3      	ldr	r3, [r4, #24]
	memcpy(&data, params->data, params->len);
    d89a:	a803      	add	r0, sp, #12
    d89c:	6a19      	ldr	r1, [r3, #32]
    d89e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    d8a0:	f7f8 faf2 	bl	5e88 <memcpy>
	if (!stored->start && !stored->end) {
    d8a4:	89a9      	ldrh	r1, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    d8a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!stored->start && !stored->end) {
    d8aa:	b929      	cbnz	r1, d8b8 <notify_cb+0x9c>
    d8ac:	89ea      	ldrh	r2, [r5, #14]
    d8ae:	b93a      	cbnz	r2, d8c0 <notify_cb+0xa4>
		*stored = data;
    d8b0:	9803      	ldr	r0, [sp, #12]
    d8b2:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    d8b4:	3601      	adds	r6, #1
    d8b6:	e7dc      	b.n	d872 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    d8b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (new_start >= *start && new_end <= *end) {
    d8bc:	428a      	cmp	r2, r1
    d8be:	d307      	bcc.n	d8d0 <notify_cb+0xb4>
    d8c0:	89ea      	ldrh	r2, [r5, #14]
    d8c2:	429a      	cmp	r2, r3
    d8c4:	d2f6      	bcs.n	d8b4 <notify_cb+0x98>
	if (*end < new_end) {
    d8c6:	89ea      	ldrh	r2, [r5, #14]
    d8c8:	429a      	cmp	r2, r3
    d8ca:	d2f3      	bcs.n	d8b4 <notify_cb+0x98>
		*end = new_end;
    d8cc:	81eb      	strh	r3, [r5, #14]
    d8ce:	e7f1      	b.n	d8b4 <notify_cb+0x98>
		*start = new_start;
    d8d0:	81aa      	strh	r2, [r5, #12]
    d8d2:	e7f8      	b.n	d8c6 <notify_cb+0xaa>
		if (conn->state != BT_CONN_CONNECTED) {
    d8d4:	7b43      	ldrb	r3, [r0, #13]
    d8d6:	2b04      	cmp	r3, #4
    d8d8:	d002      	beq.n	d8e0 <notify_cb+0xc4>
			bt_conn_unref(conn);
    d8da:	f7fc fd9d 	bl	a418 <bt_conn_unref>
    d8de:	e7e9      	b.n	d8b4 <notify_cb+0x98>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d8e0:	88a3      	ldrh	r3, [r4, #4]
    d8e2:	2b02      	cmp	r3, #2
    d8e4:	d10b      	bne.n	d8fe <notify_cb+0xe2>
			err = gatt_indicate(conn, data->params);
    d8e6:	69a1      	ldr	r1, [r4, #24]
    d8e8:	f7ff fcda 	bl	d2a0 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    d8ec:	4605      	mov	r5, r0
		bt_conn_unref(conn);
    d8ee:	4650      	mov	r0, sl
    d8f0:	f7fc fd92 	bl	a418 <bt_conn_unref>
		if (err < 0) {
    d8f4:	2d00      	cmp	r5, #0
    d8f6:	db0b      	blt.n	d910 <notify_cb+0xf4>
		data->err = 0;
    d8f8:	f8c4 8000 	str.w	r8, [r4]
    d8fc:	e7da      	b.n	d8b4 <notify_cb+0x98>
			err = gatt_notify(conn, data->attr->handle,
    d8fe:	68a2      	ldr	r2, [r4, #8]
    d900:	8aa3      	ldrh	r3, [r4, #20]
    d902:	8a11      	ldrh	r1, [r2, #16]
    d904:	68e2      	ldr	r2, [r4, #12]
    d906:	9200      	str	r2, [sp, #0]
    d908:	6922      	ldr	r2, [r4, #16]
    d90a:	f7ff fc29 	bl	d160 <gatt_notify>
    d90e:	e7ed      	b.n	d8ec <notify_cb+0xd0>
			return BT_GATT_ITER_STOP;
    d910:	2000      	movs	r0, #0
    d912:	e7a0      	b.n	d856 <notify_cb+0x3a>
    d914:	0000d639 	.word	0x0000d639
    d918:	20000cf0 	.word	0x20000cf0

0000d91c <bt_gatt_init>:
{
    d91c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d91e:	4b0e      	ldr	r3, [pc, #56]	; (d958 <bt_gatt_init+0x3c>)
    d920:	f3bf 8f5b 	dmb	ish
    d924:	2201      	movs	r2, #1
    d926:	e853 1f00 	ldrex	r1, [r3]
    d92a:	2900      	cmp	r1, #0
    d92c:	d103      	bne.n	d936 <bt_gatt_init+0x1a>
    d92e:	e843 2000 	strex	r0, r2, [r3]
    d932:	2800      	cmp	r0, #0
    d934:	d1f7      	bne.n	d926 <bt_gatt_init+0xa>
    d936:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    d93a:	d10b      	bne.n	d954 <bt_gatt_init+0x38>
	gatt_register(&gap_svc);
    d93c:	4807      	ldr	r0, [pc, #28]	; (d95c <bt_gatt_init+0x40>)
    d93e:	f7ff fc5b 	bl	d1f8 <gatt_register>
	gatt_register(&gatt_svc);
    d942:	4807      	ldr	r0, [pc, #28]	; (d960 <bt_gatt_init+0x44>)
    d944:	f7ff fc58 	bl	d1f8 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    d948:	4906      	ldr	r1, [pc, #24]	; (d964 <bt_gatt_init+0x48>)
    d94a:	4807      	ldr	r0, [pc, #28]	; (d968 <bt_gatt_init+0x4c>)
}
    d94c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    d950:	f01e bede 	b.w	2c710 <k_delayed_work_init>
}
    d954:	bd08      	pop	{r3, pc}
    d956:	bf00      	nop
    d958:	20000cec 	.word	0x20000cec
    d95c:	2000cef8 	.word	0x2000cef8
    d960:	2000cf54 	.word	0x2000cf54
    d964:	0000da59 	.word	0x0000da59
    d968:	20000cc8 	.word	0x20000cc8

0000d96c <bt_gatt_service_register>:
{
    d96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d96e:	4604      	mov	r4, r0
	bt_gatt_init();
    d970:	f7ff ffd4 	bl	d91c <bt_gatt_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    d974:	6823      	ldr	r3, [r4, #0]
    d976:	2500      	movs	r5, #0
    d978:	6818      	ldr	r0, [r3, #0]
    d97a:	f88d 5000 	strb.w	r5, [sp]
    d97e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    d982:	4669      	mov	r1, sp
    d984:	f8ad 3002 	strh.w	r3, [sp, #2]
    d988:	f7f9 f84a 	bl	6a20 <bt_uuid_cmp>
    d98c:	b918      	cbnz	r0, d996 <bt_gatt_service_register+0x2a>
		return -EALREADY;
    d98e:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    d992:	b003      	add	sp, #12
    d994:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    d996:	6823      	ldr	r3, [r4, #0]
    d998:	a901      	add	r1, sp, #4
    d99a:	6818      	ldr	r0, [r3, #0]
    d99c:	f88d 5004 	strb.w	r5, [sp, #4]
    d9a0:	f641 0301 	movw	r3, #6145	; 0x1801
    d9a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    d9a8:	f7f9 f83a 	bl	6a20 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    d9ac:	2800      	cmp	r0, #0
    d9ae:	d0ee      	beq.n	d98e <bt_gatt_service_register+0x22>
	err = gatt_register(svc);
    d9b0:	4620      	mov	r0, r4
    d9b2:	f7ff fc21 	bl	d1f8 <gatt_register>
	if (err < 0) {
    d9b6:	2800      	cmp	r0, #0
    d9b8:	dbeb      	blt.n	d992 <bt_gatt_service_register+0x26>
		    svc->attrs[svc->attr_count - 1].handle);
    d9ba:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    d9be:	2114      	movs	r1, #20
    d9c0:	fb01 2303 	mla	r3, r1, r3, r2
    d9c4:	8a10      	ldrh	r0, [r2, #16]
    d9c6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    d9ca:	f7ff fcf1 	bl	d3b0 <sc_indicate.constprop.15>
	return 0;
    d9ce:	4628      	mov	r0, r5
    d9d0:	e7df      	b.n	d992 <bt_gatt_service_register+0x26>
	...

0000d9d4 <bt_gatt_foreach_attr>:
{
    d9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9d8:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    d9da:	4b12      	ldr	r3, [pc, #72]	; (da24 <bt_gatt_foreach_attr+0x50>)
    d9dc:	681c      	ldr	r4, [r3, #0]
{
    d9de:	4605      	mov	r5, r0
    d9e0:	460e      	mov	r6, r1
    d9e2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    d9e4:	b1dc      	cbz	r4, da1e <bt_gatt_foreach_attr+0x4a>
    d9e6:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    d9e8:	f04f 0914 	mov.w	r9, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    d9ec:	b1bc      	cbz	r4, da1e <bt_gatt_foreach_attr+0x4a>
		for (i = 0; i < svc->attr_count; i++) {
    d9ee:	f04f 0a00 	mov.w	sl, #0
    d9f2:	e007      	b.n	da04 <bt_gatt_foreach_attr+0x30>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    d9f4:	6820      	ldr	r0, [r4, #0]
    d9f6:	fb09 000a 	mla	r0, r9, sl, r0
			if (attr->handle < start_handle ||
    d9fa:	8a01      	ldrh	r1, [r0, #16]
    d9fc:	42a9      	cmp	r1, r5
    d9fe:	d208      	bcs.n	da12 <bt_gatt_foreach_attr+0x3e>
		for (i = 0; i < svc->attr_count; i++) {
    da00:	f10a 0a01 	add.w	sl, sl, #1
    da04:	6863      	ldr	r3, [r4, #4]
    da06:	4553      	cmp	r3, sl
    da08:	d8f4      	bhi.n	d9f4 <bt_gatt_foreach_attr+0x20>
	return node->next;
    da0a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    da0c:	b13c      	cbz	r4, da1e <bt_gatt_foreach_attr+0x4a>
    da0e:	3c08      	subs	r4, #8
    da10:	e7ec      	b.n	d9ec <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    da12:	42b1      	cmp	r1, r6
    da14:	d8f4      	bhi.n	da00 <bt_gatt_foreach_attr+0x2c>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    da16:	4641      	mov	r1, r8
    da18:	47b8      	blx	r7
    da1a:	2800      	cmp	r0, #0
    da1c:	d1f0      	bne.n	da00 <bt_gatt_foreach_attr+0x2c>
}
    da1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da22:	bf00      	nop
    da24:	20000c94 	.word	0x20000c94

0000da28 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    da28:	b500      	push	{lr}
    da2a:	b089      	sub	sp, #36	; 0x24
	nfy.err = -ENOTCONN;
    da2c:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    da30:	9007      	str	r0, [sp, #28]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    da32:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    da34:	9301      	str	r3, [sp, #4]
	nfy.type = BT_GATT_CCC_INDICATE;
    da36:	2302      	movs	r3, #2
    da38:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    da3c:	4a05      	ldr	r2, [pc, #20]	; (da54 <bt_gatt_indicate.part.10+0x2c>)
    da3e:	8a00      	ldrh	r0, [r0, #16]
    da40:	ab01      	add	r3, sp, #4
    da42:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da46:	f7ff ffc5 	bl	d9d4 <bt_gatt_foreach_attr>
}
    da4a:	9801      	ldr	r0, [sp, #4]
    da4c:	b009      	add	sp, #36	; 0x24
    da4e:	f85d fb04 	ldr.w	pc, [sp], #4
    da52:	bf00      	nop
    da54:	0000d81d 	.word	0x0000d81d

0000da58 <sc_process>:
{
    da58:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    da5a:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    da5e:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    da62:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    da64:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    da68:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    da6c:	382c      	subs	r0, #44	; 0x2c
    da6e:	f103 0420 	add.w	r4, r3, #32
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    da72:	f3bf 8f5b 	dmb	ish
    da76:	e854 2f00 	ldrex	r2, [r4]
    da7a:	f022 0201 	bic.w	r2, r2, #1
    da7e:	e844 2100 	strex	r1, r2, [r4]
    da82:	2900      	cmp	r1, #0
    da84:	d1f7      	bne.n	da76 <sc_process+0x1e>
    da86:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    da8a:	2200      	movs	r2, #0
    da8c:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    da90:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    da94:	4a0e      	ldr	r2, [pc, #56]	; (dad0 <sc_process+0x78>)
    da96:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    da9a:	4a0e      	ldr	r2, [pc, #56]	; (dad4 <sc_process+0x7c>)
    da9c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    daa0:	aa01      	add	r2, sp, #4
    daa2:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    daa6:	2204      	movs	r2, #4
    daa8:	f823 2c08 	strh.w	r2, [r3, #-8]
    daac:	f7ff ffbc 	bl	da28 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    dab0:	b958      	cbnz	r0, daca <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dab2:	f3bf 8f5b 	dmb	ish
    dab6:	e854 3f00 	ldrex	r3, [r4]
    daba:	f043 0302 	orr.w	r3, r3, #2
    dabe:	e844 3200 	strex	r2, r3, [r4]
    dac2:	2a00      	cmp	r2, #0
    dac4:	d1f7      	bne.n	dab6 <sc_process+0x5e>
    dac6:	f3bf 8f5b 	dmb	ish
}
    daca:	b002      	add	sp, #8
    dacc:	bd10      	pop	{r4, pc}
    dace:	bf00      	nop
    dad0:	2000cf2c 	.word	0x2000cf2c
    dad4:	0000d489 	.word	0x0000d489

0000dad8 <bt_gatt_attr_next>:
{
    dad8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    dada:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    dadc:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    dade:	3101      	adds	r1, #1
    dae0:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    dae2:	2200      	movs	r2, #0
    dae4:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    dae8:	4608      	mov	r0, r1
    daea:	4a03      	ldr	r2, [pc, #12]	; (daf8 <bt_gatt_attr_next+0x20>)
    daec:	f7ff ff72 	bl	d9d4 <bt_gatt_foreach_attr>
}
    daf0:	9801      	ldr	r0, [sp, #4]
    daf2:	b003      	add	sp, #12
    daf4:	f85d fb04 	ldr.w	pc, [sp], #4
    daf8:	0000d115 	.word	0x0000d115

0000dafc <bt_gatt_attr_read_chrc>:
{
    dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    db00:	68cf      	ldr	r7, [r1, #12]
{
    db02:	b086      	sub	sp, #24
    db04:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    db06:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    db08:	793b      	ldrb	r3, [r7, #4]
{
    db0a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    db0e:	f88d 3004 	strb.w	r3, [sp, #4]
{
    db12:	4688      	mov	r8, r1
    db14:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    db16:	f7ff ffdf 	bl	dad8 <bt_gatt_attr_next>
	if (!next) {
    db1a:	2800      	cmp	r0, #0
    db1c:	d135      	bne.n	db8a <bt_gatt_attr_read_chrc+0x8e>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    db1e:	4b22      	ldr	r3, [pc, #136]	; (dba8 <bt_gatt_attr_read_chrc+0xac>)
    db20:	681b      	ldr	r3, [r3, #0]
    db22:	f003 0307 	and.w	r3, r3, #7
    db26:	2b01      	cmp	r3, #1
    db28:	d912      	bls.n	db50 <bt_gatt_attr_read_chrc+0x54>
    db2a:	2202      	movs	r2, #2
    db2c:	f04f 0300 	mov.w	r3, #0
    db30:	f362 0302 	bfi	r3, r2, #0, #3
    db34:	491d      	ldr	r1, [pc, #116]	; (dbac <bt_gatt_attr_read_chrc+0xb0>)
    db36:	4a1e      	ldr	r2, [pc, #120]	; (dbb0 <bt_gatt_attr_read_chrc+0xb4>)
    db38:	1a52      	subs	r2, r2, r1
    db3a:	f360 03c5 	bfi	r3, r0, #3, #3
    db3e:	08d2      	lsrs	r2, r2, #3
    db40:	f362 138f 	bfi	r3, r2, #6, #10
    db44:	491b      	ldr	r1, [pc, #108]	; (dbb4 <bt_gatt_attr_read_chrc+0xb8>)
    db46:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    db4a:	481b      	ldr	r0, [pc, #108]	; (dbb8 <bt_gatt_attr_read_chrc+0xbc>)
    db4c:	f7f4 f918 	bl	1d80 <log_2>
		pdu.value_handle = 0x0000;
    db50:	2300      	movs	r3, #0
    db52:	f88d 3005 	strb.w	r3, [sp, #5]
    db56:	f88d 3006 	strb.w	r3, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    db5a:	6839      	ldr	r1, [r7, #0]
    db5c:	780b      	ldrb	r3, [r1, #0]
    db5e:	b9c3      	cbnz	r3, db92 <bt_gatt_attr_read_chrc+0x96>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    db60:	884b      	ldrh	r3, [r1, #2]
    db62:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    db66:	2305      	movs	r3, #5
	if (offset > value_len) {
    db68:	42ab      	cmp	r3, r5
    db6a:	d31a      	bcc.n	dba2 <bt_gatt_attr_read_chrc+0xa6>
	len = min(buf_len, value_len - offset);
    db6c:	1b5b      	subs	r3, r3, r5
    db6e:	42a3      	cmp	r3, r4
    db70:	bfa8      	it	ge
    db72:	4623      	movge	r3, r4
    db74:	b29c      	uxth	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    db76:	ab01      	add	r3, sp, #4
    db78:	4622      	mov	r2, r4
    db7a:	1959      	adds	r1, r3, r5
    db7c:	4630      	mov	r0, r6
    db7e:	f7f8 f983 	bl	5e88 <memcpy>
}
    db82:	4620      	mov	r0, r4
    db84:	b006      	add	sp, #24
    db86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    db8a:	8a03      	ldrh	r3, [r0, #16]
    db8c:	f8ad 3005 	strh.w	r3, [sp, #5]
    db90:	e7e3      	b.n	db5a <bt_gatt_attr_read_chrc+0x5e>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    db92:	2210      	movs	r2, #16
    db94:	3101      	adds	r1, #1
    db96:	f10d 0007 	add.w	r0, sp, #7
    db9a:	f7f8 f975 	bl	5e88 <memcpy>
		value_len += 16;
    db9e:	2313      	movs	r3, #19
    dba0:	e7e2      	b.n	db68 <bt_gatt_attr_read_chrc+0x6c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    dba2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    dba6:	e7ec      	b.n	db82 <bt_gatt_attr_read_chrc+0x86>
    dba8:	2000d748 	.word	0x2000d748
    dbac:	0002cff8 	.word	0x0002cff8
    dbb0:	0002d068 	.word	0x0002d068
    dbb4:	0002fdb1 	.word	0x0002fdb1
    dbb8:	0002fddf 	.word	0x0002fddf

0000dbbc <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    dbbc:	4603      	mov	r3, r0
    dbbe:	4a03      	ldr	r2, [pc, #12]	; (dbcc <bt_gatt_connected+0x10>)
    dbc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dbc4:	2001      	movs	r0, #1
    dbc6:	f7ff bf05 	b.w	d9d4 <bt_gatt_foreach_attr>
    dbca:	bf00      	nop
    dbcc:	0000d419 	.word	0x0000d419

0000dbd0 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    dbd0:	4603      	mov	r3, r0
    dbd2:	4a03      	ldr	r2, [pc, #12]	; (dbe0 <bt_gatt_disconnected+0x10>)
    dbd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dbd8:	2001      	movs	r0, #1
    dbda:	f7ff befb 	b.w	d9d4 <bt_gatt_foreach_attr>
    dbde:	bf00      	nop
    dbe0:	0000d755 	.word	0x0000d755

0000dbe4 <sys_memcpy_swap>:
 * @param dst A valid pointer on a memory area where to copy the data in
 * @param src A valid pointer on a memory area where to copy the data from
 * @param length Size of both dst and src memory areas
 */
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
    dbe4:	b510      	push	{r4, lr}

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
    dbe6:	1e53      	subs	r3, r2, #1
    dbe8:	4419      	add	r1, r3
    dbea:	3801      	subs	r0, #1
    dbec:	460b      	mov	r3, r1

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
    dbee:	f813 4901 	ldrb.w	r4, [r3], #-1
    dbf2:	f800 4f01 	strb.w	r4, [r0, #1]!
	for (; length > 0; length--) {
    dbf6:	189c      	adds	r4, r3, r2
    dbf8:	42a1      	cmp	r1, r4
    dbfa:	d1f8      	bne.n	dbee <sys_memcpy_swap+0xa>
	}
}
    dbfc:	bd10      	pop	{r4, pc}

0000dbfe <sys_mem_swap>:
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
    dbfe:	b510      	push	{r4, lr}
    dc00:	1843      	adds	r3, r0, r1
    dc02:	eb00 0151 	add.w	r1, r0, r1, lsr #1
	size_t i;

	for (i = 0; i < (length/2); i++) {
    dc06:	4288      	cmp	r0, r1
    dc08:	d100      	bne.n	dc0c <sys_mem_swap+0xe>
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
		((u8_t *)buf)[length - 1 - i] = tmp;
	}
}
    dc0a:	bd10      	pop	{r4, pc}
		u8_t tmp = ((u8_t *)buf)[i];
    dc0c:	7802      	ldrb	r2, [r0, #0]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    dc0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    dc12:	f800 4b01 	strb.w	r4, [r0], #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    dc16:	701a      	strb	r2, [r3, #0]
    dc18:	e7f5      	b.n	dc06 <sys_mem_swap+0x8>
	...

0000dc1c <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    dc1c:	4b10      	ldr	r3, [pc, #64]	; (dc60 <get_io_capa+0x44>)
    dc1e:	681b      	ldr	r3, [r3, #0]
    dc20:	b1ab      	cbz	r3, dc4e <get_io_capa+0x32>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    dc22:	681a      	ldr	r2, [r3, #0]
    dc24:	b132      	cbz	r2, dc34 <get_io_capa+0x18>
    dc26:	6859      	ldr	r1, [r3, #4]
    dc28:	b121      	cbz	r1, dc34 <get_io_capa+0x18>
    dc2a:	6899      	ldr	r1, [r3, #8]
    dc2c:	b989      	cbnz	r1, dc52 <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    dc2e:	490d      	ldr	r1, [pc, #52]	; (dc64 <get_io_capa+0x48>)
    dc30:	7809      	ldrb	r1, [r1, #0]
    dc32:	b171      	cbz	r1, dc52 <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    dc34:	490b      	ldr	r1, [pc, #44]	; (dc64 <get_io_capa+0x48>)
    dc36:	7809      	ldrb	r1, [r1, #0]
    dc38:	b111      	cbz	r1, dc40 <get_io_capa+0x24>
    dc3a:	b10a      	cbz	r2, dc40 <get_io_capa+0x24>
    dc3c:	6899      	ldr	r1, [r3, #8]
    dc3e:	b951      	cbnz	r1, dc56 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    dc40:	685b      	ldr	r3, [r3, #4]
    dc42:	b953      	cbnz	r3, dc5a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    dc44:	2a00      	cmp	r2, #0
    dc46:	bf0c      	ite	eq
    dc48:	2003      	moveq	r0, #3
    dc4a:	2000      	movne	r0, #0
    dc4c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    dc4e:	2003      	movs	r0, #3
    dc50:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    dc52:	2004      	movs	r0, #4
    dc54:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    dc56:	2001      	movs	r0, #1
    dc58:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    dc5a:	2002      	movs	r0, #2
	}
}
    dc5c:	4770      	bx	lr
    dc5e:	bf00      	nop
    dc60:	2000309c 	.word	0x2000309c
    dc64:	20000ee5 	.word	0x20000ee5

0000dc68 <get_auth>:
	bondable = enable;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    dc68:	4b0c      	ldr	r3, [pc, #48]	; (dc9c <get_auth+0x34>)
    dc6a:	781b      	ldrb	r3, [r3, #0]
{
    dc6c:	b510      	push	{r4, lr}
	if (sc_supported) {
    dc6e:	b17b      	cbz	r3, dc90 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    dc70:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    dc74:	f7ff ffd2 	bl	dc1c <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
    dc78:	4b09      	ldr	r3, [pc, #36]	; (dca0 <get_auth+0x38>)
    dc7a:	781b      	ldrb	r3, [r3, #0]
	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    dc7c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    dc7e:	bf0c      	ite	eq
    dc80:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    dc84:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    dc88:	b12b      	cbz	r3, dc96 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    dc8a:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
    dc8e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    dc90:	f000 0407 	and.w	r4, r0, #7
    dc94:	e7ee      	b.n	dc74 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    dc96:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    dc9a:	e7f8      	b.n	dc8e <get_auth+0x26>
    dc9c:	20000ee5 	.word	0x20000ee5
    dca0:	2000cf60 	.word	0x2000cf60

0000dca4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dca4:	f3bf 8f5b 	dmb	ish
    dca8:	6800      	ldr	r0, [r0, #0]
    dcaa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    dcae:	4108      	asrs	r0, r1
}
    dcb0:	f000 0001 	and.w	r0, r0, #1
    dcb4:	4770      	bx	lr

0000dcb6 <bt_smp_aes_cmac>:
{
    dcb6:	b570      	push	{r4, r5, r6, lr}
    dcb8:	b0c2      	sub	sp, #264	; 0x108
    dcba:	460d      	mov	r5, r1
    dcbc:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    dcbe:	4601      	mov	r1, r0
    dcc0:	aa16      	add	r2, sp, #88	; 0x58
    dcc2:	4668      	mov	r0, sp
{
    dcc4:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    dcc6:	f7f3 fc26 	bl	1516 <tc_cmac_setup>
    dcca:	b918      	cbnz	r0, dcd4 <bt_smp_aes_cmac+0x1e>
		return -EIO;
    dccc:	f06f 0004 	mvn.w	r0, #4
}
    dcd0:	b042      	add	sp, #264	; 0x108
    dcd2:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    dcd4:	4632      	mov	r2, r6
    dcd6:	4629      	mov	r1, r5
    dcd8:	4668      	mov	r0, sp
    dcda:	f7f3 fc47 	bl	156c <tc_cmac_update>
    dcde:	2800      	cmp	r0, #0
    dce0:	d0f4      	beq.n	dccc <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    dce2:	4669      	mov	r1, sp
    dce4:	4620      	mov	r0, r4
    dce6:	f7f3 fca6 	bl	1636 <tc_cmac_final>
    dcea:	2800      	cmp	r0, #0
    dcec:	d0ee      	beq.n	dccc <bt_smp_aes_cmac+0x16>
	return 0;
    dcee:	2000      	movs	r0, #0
    dcf0:	e7ee      	b.n	dcd0 <bt_smp_aes_cmac+0x1a>
	...

0000dcf4 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    dcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    dcf6:	188f      	adds	r7, r1, r2
{
    dcf8:	b08b      	sub	sp, #44	; 0x2c
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    dcfa:	1d14      	adds	r4, r2, #4
{
    dcfc:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    dcfe:	683b      	ldr	r3, [r7, #0]
    dd00:	9301      	str	r3, [sp, #4]
{
    dd02:	4606      	mov	r6, r0
	sys_mem_swap(m, len + sizeof(cnt));
    dd04:	4621      	mov	r1, r4
    dd06:	4628      	mov	r0, r5
    dd08:	f7ff ff79 	bl	dbfe <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    dd0c:	4631      	mov	r1, r6
    dd0e:	2210      	movs	r2, #16
    dd10:	a802      	add	r0, sp, #8
    dd12:	f7ff ff67 	bl	dbe4 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    dd16:	ab06      	add	r3, sp, #24
    dd18:	4622      	mov	r2, r4
    dd1a:	4629      	mov	r1, r5
    dd1c:	a802      	add	r0, sp, #8
    dd1e:	f7ff ffca 	bl	dcb6 <bt_smp_aes_cmac>
	if (err) {
    dd22:	4606      	mov	r6, r0
    dd24:	b1b8      	cbz	r0, dd56 <smp_sign_buf+0x62>
		BT_ERR("Data signing failed");
    dd26:	4b16      	ldr	r3, [pc, #88]	; (dd80 <smp_sign_buf+0x8c>)
    dd28:	681b      	ldr	r3, [r3, #0]
    dd2a:	075b      	lsls	r3, r3, #29
    dd2c:	d010      	beq.n	dd50 <smp_sign_buf+0x5c>
    dd2e:	2301      	movs	r3, #1
    dd30:	f04f 0200 	mov.w	r2, #0
    dd34:	f363 0202 	bfi	r2, r3, #0, #3
    dd38:	4912      	ldr	r1, [pc, #72]	; (dd84 <smp_sign_buf+0x90>)
    dd3a:	4b13      	ldr	r3, [pc, #76]	; (dd88 <smp_sign_buf+0x94>)
    dd3c:	4813      	ldr	r0, [pc, #76]	; (dd8c <smp_sign_buf+0x98>)
    dd3e:	1a5b      	subs	r3, r3, r1
    dd40:	f36f 02c5 	bfc	r2, #3, #3
    dd44:	08db      	lsrs	r3, r3, #3
    dd46:	f363 128f 	bfi	r2, r3, #6, #10
    dd4a:	4911      	ldr	r1, [pc, #68]	; (dd90 <smp_sign_buf+0x9c>)
    dd4c:	f7f4 f804 	bl	1d58 <log_1>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    dd50:	4630      	mov	r0, r6
    dd52:	b00b      	add	sp, #44	; 0x2c
    dd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    dd56:	a806      	add	r0, sp, #24
    dd58:	2110      	movs	r1, #16
    dd5a:	f7ff ff50 	bl	dbfe <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    dd5e:	2204      	movs	r2, #4
    dd60:	eb0d 0102 	add.w	r1, sp, r2
    dd64:	a807      	add	r0, sp, #28
    dd66:	f7f8 f88f 	bl	5e88 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    dd6a:	4621      	mov	r1, r4
    dd6c:	4628      	mov	r0, r5
    dd6e:	f7ff ff46 	bl	dbfe <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    dd72:	220c      	movs	r2, #12
    dd74:	a907      	add	r1, sp, #28
    dd76:	4638      	mov	r0, r7
    dd78:	f7f8 f886 	bl	5e88 <memcpy>
	return 0;
    dd7c:	e7e8      	b.n	dd50 <smp_sign_buf+0x5c>
    dd7e:	bf00      	nop
    dd80:	2000d75c 	.word	0x2000d75c
    dd84:	0002cff8 	.word	0x0002cff8
    dd88:	0002d090 	.word	0x0002d090
    dd8c:	0003045b 	.word	0x0003045b
    dd90:	0002ffe4 	.word	0x0002ffe4

0000dd94 <smp_f4>:
{
    dd94:	b570      	push	{r4, r5, r6, lr}
    dd96:	b096      	sub	sp, #88	; 0x58
    dd98:	4614      	mov	r4, r2
    dd9a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    dd9c:	2220      	movs	r2, #32
    dd9e:	4601      	mov	r1, r0
    dda0:	a805      	add	r0, sp, #20
{
    dda2:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    dda4:	f7ff ff1e 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    dda8:	2220      	movs	r2, #32
    ddaa:	4631      	mov	r1, r6
    ddac:	a80d      	add	r0, sp, #52	; 0x34
    ddae:	f7ff ff19 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    ddb2:	4621      	mov	r1, r4
    ddb4:	2210      	movs	r2, #16
    ddb6:	a801      	add	r0, sp, #4
	m[64] = z;
    ddb8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    ddbc:	f7ff ff12 	bl	dbe4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    ddc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ddc2:	2241      	movs	r2, #65	; 0x41
    ddc4:	a905      	add	r1, sp, #20
    ddc6:	a801      	add	r0, sp, #4
    ddc8:	f7ff ff75 	bl	dcb6 <bt_smp_aes_cmac>
	if (err) {
    ddcc:	4604      	mov	r4, r0
    ddce:	b918      	cbnz	r0, ddd8 <smp_f4+0x44>
	sys_mem_swap(res, 16);
    ddd0:	2110      	movs	r1, #16
    ddd2:	981a      	ldr	r0, [sp, #104]	; 0x68
    ddd4:	f7ff ff13 	bl	dbfe <sys_mem_swap>
}
    ddd8:	4620      	mov	r0, r4
    ddda:	b016      	add	sp, #88	; 0x58
    dddc:	bd70      	pop	{r4, r5, r6, pc}
	...

0000dde0 <sc_smp_check_confirm>:
{
    dde0:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    dde2:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
{
    dde6:	b087      	sub	sp, #28
    dde8:	4604      	mov	r4, r0
	switch (smp->method) {
    ddea:	2b03      	cmp	r3, #3
    ddec:	d825      	bhi.n	de3a <sc_smp_check_confirm+0x5a>
    ddee:	e8df f003 	tbb	[pc, r3]
    ddf2:	0222      	.short	0x0222
    ddf4:	2202      	.short	0x2202
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ddf6:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
    ddfa:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c
    ddfe:	40d3      	lsrs	r3, r2
    de00:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    de04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    de08:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    de0a:	ad02      	add	r5, sp, #8
    de0c:	9500      	str	r5, [sp, #0]
    de0e:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
    de12:	490b      	ldr	r1, [pc, #44]	; (de40 <sc_smp_check_confirm+0x60>)
    de14:	f104 00eb 	add.w	r0, r4, #235	; 0xeb
    de18:	f7ff ffbc 	bl	dd94 <smp_f4>
    de1c:	b968      	cbnz	r0, de3a <sc_smp_check_confirm+0x5a>
	if (memcmp(smp->pcnf, cfm, 16)) {
    de1e:	2210      	movs	r2, #16
    de20:	4629      	mov	r1, r5
    de22:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    de26:	f7f8 f808 	bl	5e3a <memcmp>
    de2a:	2800      	cmp	r0, #0
	return 0;
    de2c:	bf14      	ite	ne
    de2e:	2004      	movne	r0, #4
    de30:	2000      	moveq	r0, #0
}
    de32:	b007      	add	sp, #28
    de34:	bd30      	pop	{r4, r5, pc}
		r = 0;
    de36:	2300      	movs	r3, #0
    de38:	e7e7      	b.n	de0a <sc_smp_check_confirm+0x2a>
		return BT_SMP_ERR_UNSPECIFIED;
    de3a:	2008      	movs	r0, #8
    de3c:	e7f9      	b.n	de32 <sc_smp_check_confirm+0x52>
    de3e:	bf00      	nop
    de40:	20000ea5 	.word	0x20000ea5

0000de44 <smp_f5>:
{
    de44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de48:	b09a      	sub	sp, #104	; 0x68
    de4a:	4604      	mov	r4, r0
    de4c:	4688      	mov	r8, r1
    de4e:	4617      	mov	r7, r2
	u8_t m[53] = { 0x00, /* counter */
    de50:	2100      	movs	r1, #0
    de52:	2235      	movs	r2, #53	; 0x35
    de54:	a80c      	add	r0, sp, #48	; 0x30
{
    de56:	461d      	mov	r5, r3
	u8_t m[53] = { 0x00, /* counter */
    de58:	f7f8 f843 	bl	5ee2 <memset>
    de5c:	2362      	movs	r3, #98	; 0x62
    de5e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    de62:	2374      	movs	r3, #116	; 0x74
    de64:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    de68:	236c      	movs	r3, #108	; 0x6c
	sys_memcpy_swap(ws, w, 32);
    de6a:	4621      	mov	r1, r4
	u8_t m[53] = { 0x00, /* counter */
    de6c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	sys_memcpy_swap(ws, w, 32);
    de70:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    de72:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    de74:	a804      	add	r0, sp, #16
	u8_t m[53] = { 0x00, /* counter */
    de76:	2601      	movs	r6, #1
    de78:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    de7c:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
	sys_memcpy_swap(ws, w, 32);
    de80:	f7ff feb0 	bl	dbe4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    de84:	466b      	mov	r3, sp
    de86:	2220      	movs	r2, #32
    de88:	a904      	add	r1, sp, #16
    de8a:	4822      	ldr	r0, [pc, #136]	; (df14 <smp_f5+0xd0>)
    de8c:	f7ff ff13 	bl	dcb6 <bt_smp_aes_cmac>
	if (err) {
    de90:	4604      	mov	r4, r0
    de92:	2800      	cmp	r0, #0
    de94:	d139      	bne.n	df0a <smp_f5+0xc6>
	sys_memcpy_swap(m + 5, n1, 16);
    de96:	2210      	movs	r2, #16
    de98:	4641      	mov	r1, r8
    de9a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    de9e:	f7ff fea1 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    dea2:	2210      	movs	r2, #16
    dea4:	4639      	mov	r1, r7
    dea6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    deaa:	f7ff fe9b 	bl	dbe4 <sys_memcpy_swap>
	m[37] = a1->type;
    deae:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    deb0:	2206      	movs	r2, #6
	m[37] = a1->type;
    deb2:	f811 3b01 	ldrb.w	r3, [r1], #1
    deb6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    deba:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    debe:	f7ff fe91 	bl	dbe4 <sys_memcpy_swap>
	m[44] = a2->type;
    dec2:	9920      	ldr	r1, [sp, #128]	; 0x80
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    dec4:	2206      	movs	r2, #6
	m[44] = a2->type;
    dec6:	f811 3b01 	ldrb.w	r3, [r1], #1
    deca:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    dece:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    ded2:	f7ff fe87 	bl	dbe4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ded6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ded8:	2235      	movs	r2, #53	; 0x35
    deda:	a90c      	add	r1, sp, #48	; 0x30
    dedc:	4668      	mov	r0, sp
    dede:	f7ff feea 	bl	dcb6 <bt_smp_aes_cmac>
	if (err) {
    dee2:	4604      	mov	r4, r0
    dee4:	b988      	cbnz	r0, df0a <smp_f5+0xc6>
	sys_mem_swap(mackey, 16);
    dee6:	2110      	movs	r1, #16
    dee8:	9821      	ldr	r0, [sp, #132]	; 0x84
    deea:	f7ff fe88 	bl	dbfe <sys_mem_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    deee:	9b22      	ldr	r3, [sp, #136]	; 0x88
	m[0] = 0x01;
    def0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    def4:	2235      	movs	r2, #53	; 0x35
    def6:	a90c      	add	r1, sp, #48	; 0x30
    def8:	4668      	mov	r0, sp
    defa:	f7ff fedc 	bl	dcb6 <bt_smp_aes_cmac>
	if (err) {
    defe:	4604      	mov	r4, r0
    df00:	b918      	cbnz	r0, df0a <smp_f5+0xc6>
	sys_mem_swap(ltk, 16);
    df02:	2110      	movs	r1, #16
    df04:	9822      	ldr	r0, [sp, #136]	; 0x88
    df06:	f7ff fe7a 	bl	dbfe <sys_mem_swap>
}
    df0a:	4620      	mov	r0, r4
    df0c:	b01a      	add	sp, #104	; 0x68
    df0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df12:	bf00      	nop
    df14:	000302fd 	.word	0x000302fd

0000df18 <smp_f6>:
{
    df18:	b570      	push	{r4, r5, r6, lr}
    df1a:	b096      	sub	sp, #88	; 0x58
    df1c:	4605      	mov	r5, r0
    df1e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    df20:	a805      	add	r0, sp, #20
    df22:	2210      	movs	r2, #16
{
    df24:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    df26:	f7ff fe5d 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    df2a:	2210      	movs	r2, #16
    df2c:	4631      	mov	r1, r6
    df2e:	a809      	add	r0, sp, #36	; 0x24
    df30:	f7ff fe58 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    df34:	4621      	mov	r1, r4
    df36:	2210      	movs	r2, #16
    df38:	a80d      	add	r0, sp, #52	; 0x34
    df3a:	f7ff fe53 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    df3e:	2203      	movs	r2, #3
    df40:	991a      	ldr	r1, [sp, #104]	; 0x68
    df42:	a811      	add	r0, sp, #68	; 0x44
    df44:	f7ff fe4e 	bl	dbe4 <sys_memcpy_swap>
	m[51] = a1->type;
    df48:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    df4a:	f814 3b01 	ldrb.w	r3, [r4], #1
    df4e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    df52:	4621      	mov	r1, r4
    df54:	2206      	movs	r2, #6
    df56:	a812      	add	r0, sp, #72	; 0x48
    df58:	f7f7 ff96 	bl	5e88 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    df5c:	4621      	mov	r1, r4
    df5e:	2206      	movs	r2, #6
    df60:	a812      	add	r0, sp, #72	; 0x48
    df62:	f7ff fe3f 	bl	dbe4 <sys_memcpy_swap>
	m[58] = a2->type;
    df66:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    df68:	f814 3b01 	ldrb.w	r3, [r4], #1
    df6c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    df70:	4621      	mov	r1, r4
    df72:	2206      	movs	r2, #6
    df74:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    df78:	f7f7 ff86 	bl	5e88 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    df7c:	4621      	mov	r1, r4
    df7e:	2206      	movs	r2, #6
    df80:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    df84:	f7ff fe2e 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    df88:	2210      	movs	r2, #16
    df8a:	4629      	mov	r1, r5
    df8c:	a801      	add	r0, sp, #4
    df8e:	f7ff fe29 	bl	dbe4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    df92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    df94:	2241      	movs	r2, #65	; 0x41
    df96:	a905      	add	r1, sp, #20
    df98:	a801      	add	r0, sp, #4
    df9a:	f7ff fe8c 	bl	dcb6 <bt_smp_aes_cmac>
	if (err) {
    df9e:	4604      	mov	r4, r0
    dfa0:	b918      	cbnz	r0, dfaa <smp_f6+0x92>
	sys_mem_swap(check, 16);
    dfa2:	2110      	movs	r1, #16
    dfa4:	981d      	ldr	r0, [sp, #116]	; 0x74
    dfa6:	f7ff fe2a 	bl	dbfe <sys_mem_swap>
}
    dfaa:	4620      	mov	r0, r4
    dfac:	b016      	add	sp, #88	; 0x58
    dfae:	bd70      	pop	{r4, r5, r6, pc}

0000dfb0 <smp_g2>:
{
    dfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfb2:	b099      	sub	sp, #100	; 0x64
    dfb4:	4615      	mov	r5, r2
    dfb6:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
    dfb8:	2220      	movs	r2, #32
    dfba:	4601      	mov	r1, r0
    dfbc:	a804      	add	r0, sp, #16
{
    dfbe:	461e      	mov	r6, r3
    dfc0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    dfc2:	f7ff fe0f 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    dfc6:	2220      	movs	r2, #32
    dfc8:	4639      	mov	r1, r7
    dfca:	a80c      	add	r0, sp, #48	; 0x30
    dfcc:	f7ff fe0a 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    dfd0:	2210      	movs	r2, #16
    dfd2:	4631      	mov	r1, r6
    dfd4:	a814      	add	r0, sp, #80	; 0x50
    dfd6:	f7ff fe05 	bl	dbe4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    dfda:	4629      	mov	r1, r5
    dfdc:	2210      	movs	r2, #16
    dfde:	4668      	mov	r0, sp
    dfe0:	f7ff fe00 	bl	dbe4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    dfe4:	466b      	mov	r3, sp
    dfe6:	2250      	movs	r2, #80	; 0x50
    dfe8:	a904      	add	r1, sp, #16
    dfea:	4618      	mov	r0, r3
    dfec:	f7ff fe63 	bl	dcb6 <bt_smp_aes_cmac>
	if (err) {
    dff0:	4605      	mov	r5, r0
    dff2:	b960      	cbnz	r0, e00e <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
    dff4:	2204      	movs	r2, #4
    dff6:	a903      	add	r1, sp, #12
    dff8:	4620      	mov	r0, r4
    dffa:	f7f7 ff45 	bl	5e88 <memcpy>
    dffe:	6823      	ldr	r3, [r4, #0]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    e000:	4904      	ldr	r1, [pc, #16]	; (e014 <smp_g2+0x64>)
    e002:	ba1b      	rev	r3, r3
    e004:	fbb3 f2f1 	udiv	r2, r3, r1
    e008:	fb01 3312 	mls	r3, r1, r2, r3
    e00c:	6023      	str	r3, [r4, #0]
}
    e00e:	4628      	mov	r0, r5
    e010:	b019      	add	sp, #100	; 0x64
    e012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e014:	000f4240 	.word	0x000f4240

0000e018 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    e018:	2301      	movs	r3, #1
    e01a:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e01e:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e020:	f3bf 8f5b 	dmb	ish
    e024:	e850 3f00 	ldrex	r3, [r0]
    e028:	400b      	ands	r3, r1
    e02a:	e840 3200 	strex	r2, r3, [r0]
    e02e:	2a00      	cmp	r2, #0
    e030:	d1f8      	bne.n	e024 <atomic_clear_bit+0xc>
    e032:	f3bf 8f5b 	dmb	ish
}
    e036:	4770      	bx	lr

0000e038 <bt_smp_disconnected>:
{
    e038:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    e03a:	6803      	ldr	r3, [r0, #0]
    e03c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    e03e:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    e040:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    e044:	f01e fb6d 	bl	2c722 <k_delayed_work_cancel>
	if (keys) {
    e048:	b13c      	cbz	r4, e05a <bt_smp_disconnected+0x22>
		if (!keys->keys || (keys->flags & BT_KEYS_DEBUG)) {
    e04a:	8963      	ldrh	r3, [r4, #10]
    e04c:	b113      	cbz	r3, e054 <bt_smp_disconnected+0x1c>
    e04e:	7a63      	ldrb	r3, [r4, #9]
    e050:	079b      	lsls	r3, r3, #30
    e052:	d502      	bpl.n	e05a <bt_smp_disconnected+0x22>
			bt_keys_clear(keys);
    e054:	4620      	mov	r0, r4
    e056:	f002 fa13 	bl	10480 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
    e05a:	4628      	mov	r0, r5
    e05c:	f44f 72ca 	mov.w	r2, #404	; 0x194
    e060:	2100      	movs	r1, #0
}
    e062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
    e066:	f7f7 bf3c 	b.w	5ee2 <memset>
	...

0000e06c <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    e06c:	2904      	cmp	r1, #4
{
    e06e:	b538      	push	{r3, r4, r5, lr}
    e070:	4605      	mov	r5, r0
    e072:	460c      	mov	r4, r1
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    e074:	d817      	bhi.n	e0a6 <legacy_get_pair_method+0x3a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e076:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
    e07a:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
    e07e:	4318      	orrs	r0, r3
    e080:	f010 0004 	ands.w	r0, r0, #4
    e084:	d00e      	beq.n	e0a4 <legacy_get_pair_method+0x38>
	method = gen_method_legacy[remote_io][get_io_capa()];
    e086:	f7ff fdc9 	bl	dc1c <get_io_capa>
    e08a:	4908      	ldr	r1, [pc, #32]	; (e0ac <legacy_get_pair_method+0x40>)
    e08c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e090:	440c      	add	r4, r1
    e092:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    e094:	2804      	cmp	r0, #4
    e096:	d105      	bne.n	e0a4 <legacy_get_pair_method+0x38>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e098:	682b      	ldr	r3, [r5, #0]
    e09a:	78db      	ldrb	r3, [r3, #3]
    e09c:	2b00      	cmp	r3, #0
			method = PASSKEY_INPUT;
    e09e:	bf0c      	ite	eq
    e0a0:	2002      	moveq	r0, #2
    e0a2:	2001      	movne	r0, #1
}
    e0a4:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    e0a6:	2000      	movs	r0, #0
    e0a8:	e7fc      	b.n	e0a4 <legacy_get_pair_method+0x38>
    e0aa:	bf00      	nop
    e0ac:	00030208 	.word	0x00030208

0000e0b0 <sec_level_reachable.isra.3>:
	switch (conn->required_sec_level) {
    e0b0:	3801      	subs	r0, #1
static bool sec_level_reachable(struct bt_conn *conn)
    e0b2:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    e0b4:	2803      	cmp	r0, #3
    e0b6:	d803      	bhi.n	e0c0 <sec_level_reachable.isra.3+0x10>
    e0b8:	e8df f000 	tbb	[pc, r0]
    e0bc:	0a041414 	.word	0x0a041414
		return false;
    e0c0:	2000      	movs	r0, #0
}
    e0c2:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    e0c4:	f7ff fdaa 	bl	dc1c <get_io_capa>
    e0c8:	3803      	subs	r0, #3
    e0ca:	bf18      	it	ne
    e0cc:	2001      	movne	r0, #1
    e0ce:	e7f8      	b.n	e0c2 <sec_level_reachable.isra.3+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    e0d0:	f7ff fda4 	bl	dc1c <get_io_capa>
    e0d4:	2803      	cmp	r0, #3
    e0d6:	bf1a      	itte	ne
    e0d8:	4b03      	ldrne	r3, [pc, #12]	; (e0e8 <sec_level_reachable.isra.3+0x38>)
    e0da:	7818      	ldrbne	r0, [r3, #0]
    e0dc:	2000      	moveq	r0, #0
    e0de:	f000 0001 	and.w	r0, r0, #1
    e0e2:	e7ee      	b.n	e0c2 <sec_level_reachable.isra.3+0x12>
		return true;
    e0e4:	2001      	movs	r0, #1
    e0e6:	e7ec      	b.n	e0c2 <sec_level_reachable.isra.3+0x12>
    e0e8:	20000ee5 	.word	0x20000ee5

0000e0ec <smp_chan_get>:
{
    e0ec:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e0ee:	2106      	movs	r1, #6
    e0f0:	f7fc ff02 	bl	aef8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e0f4:	4604      	mov	r4, r0
    e0f6:	b9a0      	cbnz	r0, e122 <smp_chan_get+0x36>
		BT_ERR("Unable to find SMP channel");
    e0f8:	4b0b      	ldr	r3, [pc, #44]	; (e128 <smp_chan_get+0x3c>)
    e0fa:	681b      	ldr	r3, [r3, #0]
    e0fc:	075b      	lsls	r3, r3, #29
    e0fe:	d010      	beq.n	e122 <smp_chan_get+0x36>
    e100:	2301      	movs	r3, #1
    e102:	f04f 0200 	mov.w	r2, #0
    e106:	f363 0202 	bfi	r2, r3, #0, #3
    e10a:	4908      	ldr	r1, [pc, #32]	; (e12c <smp_chan_get+0x40>)
    e10c:	4b08      	ldr	r3, [pc, #32]	; (e130 <smp_chan_get+0x44>)
    e10e:	1a5b      	subs	r3, r3, r1
    e110:	f360 02c5 	bfi	r2, r0, #3, #3
    e114:	08db      	lsrs	r3, r3, #3
    e116:	f363 128f 	bfi	r2, r3, #6, #10
    e11a:	4906      	ldr	r1, [pc, #24]	; (e134 <smp_chan_get+0x48>)
    e11c:	4806      	ldr	r0, [pc, #24]	; (e138 <smp_chan_get+0x4c>)
    e11e:	f7f3 fe1b 	bl	1d58 <log_1>
}
    e122:	4620      	mov	r0, r4
    e124:	bd10      	pop	{r4, pc}
    e126:	bf00      	nop
    e128:	2000d75c 	.word	0x2000d75c
    e12c:	0002cff8 	.word	0x0002cff8
    e130:	0002d090 	.word	0x0002d090
    e134:	0002ff4e 	.word	0x0002ff4e
    e138:	0003034d 	.word	0x0003034d

0000e13c <smp_create_pdu.isra.6>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    e13c:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    e13e:	b538      	push	{r3, r4, r5, lr}
    e140:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    e142:	4608      	mov	r0, r1
    e144:	f7fc fd57 	bl	abf6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    e148:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    e14a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    e14c:	3008      	adds	r0, #8
    e14e:	f010 f9dd 	bl	1e50c <net_buf_simple_add>
	hdr->code = op;
    e152:	7005      	strb	r5, [r0, #0]
}
    e154:	4620      	mov	r0, r4
    e156:	bd38      	pop	{r3, r4, r5, pc}

0000e158 <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    e158:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    e15a:	4c10      	ldr	r4, [pc, #64]	; (e19c <bt_smp_accept+0x44>)
{
    e15c:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    e15e:	6820      	ldr	r0, [r4, #0]
    e160:	b918      	cbnz	r0, e16a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    e162:	4a0f      	ldr	r2, [pc, #60]	; (e1a0 <bt_smp_accept+0x48>)
    e164:	6062      	str	r2, [r4, #4]

		*chan = &smp->chan.chan;
    e166:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    e168:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    e16a:	4b0e      	ldr	r3, [pc, #56]	; (e1a4 <bt_smp_accept+0x4c>)
    e16c:	681b      	ldr	r3, [r3, #0]
    e16e:	075b      	lsls	r3, r3, #29
    e170:	d010      	beq.n	e194 <bt_smp_accept+0x3c>
    e172:	2101      	movs	r1, #1
    e174:	f04f 0300 	mov.w	r3, #0
    e178:	f361 0302 	bfi	r3, r1, #0, #3
    e17c:	480a      	ldr	r0, [pc, #40]	; (e1a8 <bt_smp_accept+0x50>)
    e17e:	490b      	ldr	r1, [pc, #44]	; (e1ac <bt_smp_accept+0x54>)
    e180:	1a09      	subs	r1, r1, r0
    e182:	08c9      	lsrs	r1, r1, #3
    e184:	f36f 03c5 	bfc	r3, #3, #3
    e188:	f361 138f 	bfi	r3, r1, #6, #10
    e18c:	4808      	ldr	r0, [pc, #32]	; (e1b0 <bt_smp_accept+0x58>)
    e18e:	4909      	ldr	r1, [pc, #36]	; (e1b4 <bt_smp_accept+0x5c>)
    e190:	f7f3 fdf6 	bl	1d80 <log_2>
	return -ENOMEM;
    e194:	f06f 000b 	mvn.w	r0, #11
    e198:	e7e6      	b.n	e168 <bt_smp_accept+0x10>
    e19a:	bf00      	nop
    e19c:	20000d10 	.word	0x20000d10
    e1a0:	2000cf70 	.word	0x2000cf70
    e1a4:	2000d75c 	.word	0x2000d75c
    e1a8:	0002cff8 	.word	0x0002cff8
    e1ac:	0002d090 	.word	0x0002d090
    e1b0:	00030025 	.word	0x00030025
    e1b4:	00030017 	.word	0x00030017

0000e1b8 <smp_send>:
{
    e1b8:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    e1ba:	4613      	mov	r3, r2
{
    e1bc:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    e1be:	460a      	mov	r2, r1
    e1c0:	6800      	ldr	r0, [r0, #0]
    e1c2:	2106      	movs	r1, #6
    e1c4:	f7fc fd1a 	bl	abfc <bt_l2cap_send_cb>
    e1c8:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    e1cc:	f247 5230 	movw	r2, #30000	; 0x7530
    e1d0:	4802      	ldr	r0, [pc, #8]	; (e1dc <smp_send+0x24>)
}
    e1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1d6:	f01e baf3 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
    e1da:	bf00      	nop
    e1dc:	200031d8 	.word	0x200031d8

0000e1e0 <sc_smp_send_dhkey_check>:
{
    e1e0:	b570      	push	{r4, r5, r6, lr}
    e1e2:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    e1e4:	200d      	movs	r0, #13
{
    e1e6:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    e1e8:	f7ff ffa8 	bl	e13c <smp_create_pdu.isra.6>
	if (!buf) {
    e1ec:	4604      	mov	r4, r0
    e1ee:	b170      	cbz	r0, e20e <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
    e1f0:	2110      	movs	r1, #16
    e1f2:	3008      	adds	r0, #8
    e1f4:	f010 f98a 	bl	1e50c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    e1f8:	2210      	movs	r2, #16
    e1fa:	4631      	mov	r1, r6
    e1fc:	f7f7 fe44 	bl	5e88 <memcpy>
	smp_send(smp, buf, NULL);
    e200:	4628      	mov	r0, r5
    e202:	2200      	movs	r2, #0
    e204:	4621      	mov	r1, r4
    e206:	f7ff ffd7 	bl	e1b8 <smp_send>
	return 0;
    e20a:	2000      	movs	r0, #0
}
    e20c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e20e:	2008      	movs	r0, #8
    e210:	e7fc      	b.n	e20c <sc_smp_send_dhkey_check+0x2c>
	...

0000e214 <sc_send_public_key>:
{
    e214:	b570      	push	{r4, r5, r6, lr}
    e216:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    e218:	200c      	movs	r0, #12
    e21a:	f7ff ff8f 	bl	e13c <smp_create_pdu.isra.6>
	if (!req_buf) {
    e21e:	4604      	mov	r4, r0
    e220:	b1a0      	cbz	r0, e24c <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    e222:	2140      	movs	r1, #64	; 0x40
    e224:	3008      	adds	r0, #8
    e226:	f010 f971 	bl	1e50c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    e22a:	2220      	movs	r2, #32
    e22c:	4908      	ldr	r1, [pc, #32]	; (e250 <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    e22e:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    e230:	f7f7 fe2a 	bl	5e88 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    e234:	2220      	movs	r2, #32
    e236:	4907      	ldr	r1, [pc, #28]	; (e254 <sc_send_public_key+0x40>)
    e238:	18b0      	adds	r0, r6, r2
    e23a:	f7f7 fe25 	bl	5e88 <memcpy>
	smp_send(smp, req_buf, NULL);
    e23e:	4628      	mov	r0, r5
    e240:	2200      	movs	r2, #0
    e242:	4621      	mov	r1, r4
    e244:	f7ff ffb8 	bl	e1b8 <smp_send>
	return 0;
    e248:	2000      	movs	r0, #0
}
    e24a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e24c:	2008      	movs	r0, #8
    e24e:	e7fc      	b.n	e24a <sc_send_public_key+0x36>
    e250:	20000ea5 	.word	0x20000ea5
    e254:	20000ec5 	.word	0x20000ec5

0000e258 <send_pairing_rsp>:
{
    e258:	b538      	push	{r3, r4, r5, lr}
    e25a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    e25c:	2002      	movs	r0, #2
    e25e:	f7ff ff6d 	bl	e13c <smp_create_pdu.isra.6>
	if (!rsp_buf) {
    e262:	4604      	mov	r4, r0
    e264:	b178      	cbz	r0, e286 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    e266:	2106      	movs	r1, #6
    e268:	3008      	adds	r0, #8
    e26a:	f010 f94f 	bl	1e50c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    e26e:	2206      	movs	r2, #6
    e270:	f105 01a5 	add.w	r1, r5, #165	; 0xa5
    e274:	f7f7 fe08 	bl	5e88 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    e278:	4628      	mov	r0, r5
    e27a:	2200      	movs	r2, #0
    e27c:	4621      	mov	r1, r4
    e27e:	f7ff ff9b 	bl	e1b8 <smp_send>
	return 0;
    e282:	2000      	movs	r0, #0
}
    e284:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e286:	2008      	movs	r0, #8
    e288:	e7fc      	b.n	e284 <send_pairing_rsp+0x2c>

0000e28a <smp_send_pairing_random>:
{
    e28a:	b538      	push	{r3, r4, r5, lr}
    e28c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    e28e:	2004      	movs	r0, #4
    e290:	f7ff ff54 	bl	e13c <smp_create_pdu.isra.6>
	if (!rsp_buf) {
    e294:	4604      	mov	r4, r0
    e296:	b178      	cbz	r0, e2b8 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
    e298:	2110      	movs	r1, #16
    e29a:	3008      	adds	r0, #8
    e29c:	f010 f936 	bl	1e50c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    e2a0:	2210      	movs	r2, #16
    e2a2:	f105 01bb 	add.w	r1, r5, #187	; 0xbb
    e2a6:	f7f7 fdef 	bl	5e88 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    e2aa:	4628      	mov	r0, r5
    e2ac:	2200      	movs	r2, #0
    e2ae:	4621      	mov	r1, r4
    e2b0:	f7ff ff82 	bl	e1b8 <smp_send>
	return 0;
    e2b4:	2000      	movs	r0, #0
}
    e2b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e2b8:	2008      	movs	r0, #8
    e2ba:	e7fc      	b.n	e2b6 <smp_send_pairing_random+0x2c>

0000e2bc <smp_send_pairing_confirm>:
{
    e2bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    e2be:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
{
    e2c2:	4605      	mov	r5, r0
	switch (smp->method) {
    e2c4:	2b03      	cmp	r3, #3
    e2c6:	d824      	bhi.n	e312 <smp_send_pairing_confirm+0x56>
    e2c8:	e8df f003 	tbb	[pc, r3]
    e2cc:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    e2d0:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    e2d4:	f8d0 416c 	ldr.w	r4, [r0, #364]	; 0x16c
    e2d8:	40dc      	lsrs	r4, r3
    e2da:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    e2de:	f064 047f 	orn	r4, r4, #127	; 0x7f
    e2e2:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    e2e4:	2003      	movs	r0, #3
    e2e6:	f7ff ff29 	bl	e13c <smp_create_pdu.isra.6>
	if (!buf) {
    e2ea:	4606      	mov	r6, r0
    e2ec:	b188      	cbz	r0, e312 <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    e2ee:	2110      	movs	r1, #16
    e2f0:	3008      	adds	r0, #8
    e2f2:	f010 f90b 	bl	1e50c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    e2f6:	4623      	mov	r3, r4
    e2f8:	9000      	str	r0, [sp, #0]
    e2fa:	f105 02bb 	add.w	r2, r5, #187	; 0xbb
    e2fe:	f105 01eb 	add.w	r1, r5, #235	; 0xeb
    e302:	480c      	ldr	r0, [pc, #48]	; (e334 <smp_send_pairing_confirm+0x78>)
    e304:	f7ff fd46 	bl	dd94 <smp_f4>
    e308:	4604      	mov	r4, r0
    e30a:	b130      	cbz	r0, e31a <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    e30c:	4630      	mov	r0, r6
    e30e:	f010 f89f 	bl	1e450 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    e312:	2008      	movs	r0, #8
    e314:	e00c      	b.n	e330 <smp_send_pairing_confirm+0x74>
		r = 0;
    e316:	2400      	movs	r4, #0
    e318:	e7e4      	b.n	e2e4 <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    e31a:	4602      	mov	r2, r0
    e31c:	4631      	mov	r1, r6
    e31e:	4628      	mov	r0, r5
    e320:	f7ff ff4a 	bl	e1b8 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    e324:	f105 0098 	add.w	r0, r5, #152	; 0x98
    e328:	4621      	mov	r1, r4
    e32a:	f7ff fe75 	bl	e018 <atomic_clear_bit>
	return 0;
    e32e:	4620      	mov	r0, r4
}
    e330:	b002      	add	sp, #8
    e332:	bd70      	pop	{r4, r5, r6, pc}
    e334:	20000ea5 	.word	0x20000ea5

0000e338 <bt_smp_distribute_keys>:
{
    e338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e33c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    e33e:	6800      	ldr	r0, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    e340:	6f06      	ldr	r6, [r0, #112]	; 0x70
{
    e342:	b088      	sub	sp, #32
	if (!keys) {
    e344:	b9f6      	cbnz	r6, e384 <bt_smp_distribute_keys+0x4c>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    e346:	4b7c      	ldr	r3, [pc, #496]	; (e538 <bt_smp_distribute_keys+0x200>)
    e348:	681b      	ldr	r3, [r3, #0]
    e34a:	075f      	lsls	r7, r3, #29
    e34c:	d017      	beq.n	e37e <bt_smp_distribute_keys+0x46>
    e34e:	2301      	movs	r3, #1
    e350:	f04f 0400 	mov.w	r4, #0
    e354:	f363 0402 	bfi	r4, r3, #0, #3
    e358:	4a78      	ldr	r2, [pc, #480]	; (e53c <bt_smp_distribute_keys+0x204>)
    e35a:	4b79      	ldr	r3, [pc, #484]	; (e540 <bt_smp_distribute_keys+0x208>)
    e35c:	1ad2      	subs	r2, r2, r3
    e35e:	08d2      	lsrs	r2, r2, #3
    e360:	f366 04c5 	bfi	r4, r6, #3, #3
    e364:	3048      	adds	r0, #72	; 0x48
    e366:	f362 148f 	bfi	r4, r2, #6, #10
    e36a:	f7f8 fa95 	bl	6898 <bt_addr_le_str_real>
    e36e:	f7f3 fe85 	bl	207c <log_strdup>
    e372:	4623      	mov	r3, r4
    e374:	4602      	mov	r2, r0
    e376:	4973      	ldr	r1, [pc, #460]	; (e544 <bt_smp_distribute_keys+0x20c>)
    e378:	4873      	ldr	r0, [pc, #460]	; (e548 <bt_smp_distribute_keys+0x210>)
    e37a:	f7f3 fd01 	bl	1d80 <log_2>
}
    e37e:	b008      	add	sp, #32
    e380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e384:	f104 0798 	add.w	r7, r4, #152	; 0x98
    e388:	2105      	movs	r1, #5
    e38a:	4638      	mov	r0, r7
    e38c:	f7ff fc8a 	bl	dca4 <atomic_test_bit>
    e390:	4681      	mov	r9, r0
    e392:	bb70      	cbnz	r0, e3f2 <bt_smp_distribute_keys+0xba>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    e394:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    e398:	07dd      	lsls	r5, r3, #31
    e39a:	d52a      	bpl.n	e3f2 <bt_smp_distribute_keys+0xba>
	struct bt_keys *keys = conn->le.keys;
    e39c:	6823      	ldr	r3, [r4, #0]
		bt_rand(key, sizeof(key));
    e39e:	2110      	movs	r1, #16
    e3a0:	eb0d 0001 	add.w	r0, sp, r1
	struct bt_keys *keys = conn->le.keys;
    e3a4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    e3a6:	f00d fe0d 	bl	1bfc4 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    e3aa:	2108      	movs	r1, #8
    e3ac:	eb0d 0001 	add.w	r0, sp, r1
    e3b0:	f00d fe08 	bl	1bfc4 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    e3b4:	2102      	movs	r1, #2
    e3b6:	a801      	add	r0, sp, #4
    e3b8:	f00d fe04 	bl	1bfc4 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    e3bc:	2006      	movs	r0, #6
    e3be:	f7ff febd 	bl	e13c <smp_create_pdu.isra.6>
		if (!buf) {
    e3c2:	4680      	mov	r8, r0
    e3c4:	2800      	cmp	r0, #0
    e3c6:	d134      	bne.n	e432 <bt_smp_distribute_keys+0xfa>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    e3c8:	4b5b      	ldr	r3, [pc, #364]	; (e538 <bt_smp_distribute_keys+0x200>)
    e3ca:	681b      	ldr	r3, [r3, #0]
    e3cc:	0758      	lsls	r0, r3, #29
    e3ce:	d010      	beq.n	e3f2 <bt_smp_distribute_keys+0xba>
    e3d0:	2301      	movs	r3, #1
    e3d2:	f04f 0200 	mov.w	r2, #0
    e3d6:	f363 0202 	bfi	r2, r3, #0, #3
    e3da:	4959      	ldr	r1, [pc, #356]	; (e540 <bt_smp_distribute_keys+0x208>)
    e3dc:	4b57      	ldr	r3, [pc, #348]	; (e53c <bt_smp_distribute_keys+0x204>)
    e3de:	485b      	ldr	r0, [pc, #364]	; (e54c <bt_smp_distribute_keys+0x214>)
    e3e0:	1a5b      	subs	r3, r3, r1
    e3e2:	f368 02c5 	bfi	r2, r8, #3, #3
    e3e6:	08db      	lsrs	r3, r3, #3
    e3e8:	4959      	ldr	r1, [pc, #356]	; (e550 <bt_smp_distribute_keys+0x218>)
    e3ea:	f363 128f 	bfi	r2, r3, #6, #10
			BT_ERR("Unable to allocate Master Ident buffer");
    e3ee:	f7f3 fcb3 	bl	1d58 <log_1>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    e3f2:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    e3f6:	075a      	lsls	r2, r3, #29
    e3f8:	d5c1      	bpl.n	e37e <bt_smp_distribute_keys+0x46>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    e3fa:	200a      	movs	r0, #10
    e3fc:	f7ff fe9e 	bl	e13c <smp_create_pdu.isra.6>
		if (!buf) {
    e400:	4605      	mov	r5, r0
    e402:	2800      	cmp	r0, #0
    e404:	d179      	bne.n	e4fa <bt_smp_distribute_keys+0x1c2>
			BT_ERR("Unable to allocate Signing Info buffer");
    e406:	4b4c      	ldr	r3, [pc, #304]	; (e538 <bt_smp_distribute_keys+0x200>)
    e408:	681b      	ldr	r3, [r3, #0]
    e40a:	075b      	lsls	r3, r3, #29
    e40c:	d0b7      	beq.n	e37e <bt_smp_distribute_keys+0x46>
    e40e:	2301      	movs	r3, #1
    e410:	f04f 0200 	mov.w	r2, #0
    e414:	f363 0202 	bfi	r2, r3, #0, #3
    e418:	4949      	ldr	r1, [pc, #292]	; (e540 <bt_smp_distribute_keys+0x208>)
    e41a:	4b48      	ldr	r3, [pc, #288]	; (e53c <bt_smp_distribute_keys+0x204>)
    e41c:	1a5b      	subs	r3, r3, r1
    e41e:	f360 02c5 	bfi	r2, r0, #3, #3
    e422:	08db      	lsrs	r3, r3, #3
    e424:	f363 128f 	bfi	r2, r3, #6, #10
    e428:	4946      	ldr	r1, [pc, #280]	; (e544 <bt_smp_distribute_keys+0x20c>)
    e42a:	484a      	ldr	r0, [pc, #296]	; (e554 <bt_smp_distribute_keys+0x21c>)
    e42c:	f7f3 fc94 	bl	1d58 <log_1>
    e430:	e7a5      	b.n	e37e <bt_smp_distribute_keys+0x46>
		info = net_buf_add(buf, sizeof(*info));
    e432:	2110      	movs	r1, #16
    e434:	3008      	adds	r0, #8
    e436:	f010 f869 	bl	1e50c <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    e43a:	7a2a      	ldrb	r2, [r5, #8]
    e43c:	a904      	add	r1, sp, #16
		info = net_buf_add(buf, sizeof(*info));
    e43e:	4682      	mov	sl, r0
		memcpy(info->ltk, key, keys->enc_size);
    e440:	f7f7 fd22 	bl	5e88 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    e444:	7a28      	ldrb	r0, [r5, #8]
    e446:	280f      	cmp	r0, #15
    e448:	d805      	bhi.n	e456 <bt_smp_distribute_keys+0x11e>
			(void)memset(info->ltk + keys->enc_size, 0,
    e44a:	f1c0 0210 	rsb	r2, r0, #16
    e44e:	4649      	mov	r1, r9
    e450:	4450      	add	r0, sl
    e452:	f7f7 fd46 	bl	5ee2 <memset>
		smp_send(smp, buf, NULL);
    e456:	4641      	mov	r1, r8
    e458:	2200      	movs	r2, #0
    e45a:	4620      	mov	r0, r4
    e45c:	f7ff feac 	bl	e1b8 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    e460:	2007      	movs	r0, #7
    e462:	f7ff fe6b 	bl	e13c <smp_create_pdu.isra.6>
		if (!buf) {
    e466:	4680      	mov	r8, r0
    e468:	b998      	cbnz	r0, e492 <bt_smp_distribute_keys+0x15a>
			BT_ERR("Unable to allocate Master Ident buffer");
    e46a:	4b33      	ldr	r3, [pc, #204]	; (e538 <bt_smp_distribute_keys+0x200>)
    e46c:	681b      	ldr	r3, [r3, #0]
    e46e:	0759      	lsls	r1, r3, #29
    e470:	d0bf      	beq.n	e3f2 <bt_smp_distribute_keys+0xba>
    e472:	2301      	movs	r3, #1
    e474:	f04f 0200 	mov.w	r2, #0
    e478:	f363 0202 	bfi	r2, r3, #0, #3
    e47c:	4930      	ldr	r1, [pc, #192]	; (e540 <bt_smp_distribute_keys+0x208>)
    e47e:	4b2f      	ldr	r3, [pc, #188]	; (e53c <bt_smp_distribute_keys+0x204>)
    e480:	1a5b      	subs	r3, r3, r1
    e482:	f360 02c5 	bfi	r2, r0, #3, #3
    e486:	08db      	lsrs	r3, r3, #3
    e488:	f363 128f 	bfi	r2, r3, #6, #10
    e48c:	4930      	ldr	r1, [pc, #192]	; (e550 <bt_smp_distribute_keys+0x218>)
    e48e:	4832      	ldr	r0, [pc, #200]	; (e558 <bt_smp_distribute_keys+0x220>)
    e490:	e7ad      	b.n	e3ee <bt_smp_distribute_keys+0xb6>
		ident = net_buf_add(buf, sizeof(*ident));
    e492:	210a      	movs	r1, #10
    e494:	3008      	adds	r0, #8
    e496:	f010 f839 	bl	1e50c <net_buf_simple_add>
		memcpy(ident->rand, rand, sizeof(ident->rand));
    e49a:	2208      	movs	r2, #8
    e49c:	eb0d 0102 	add.w	r1, sp, r2
		ident = net_buf_add(buf, sizeof(*ident));
    e4a0:	4681      	mov	r9, r0
		memcpy(ident->rand, rand, sizeof(ident->rand));
    e4a2:	3002      	adds	r0, #2
    e4a4:	f7f7 fcf0 	bl	5e88 <memcpy>
		memcpy(ident->ediv, ediv, sizeof(ident->ediv));
    e4a8:	2202      	movs	r2, #2
    e4aa:	a901      	add	r1, sp, #4
    e4ac:	4648      	mov	r0, r9
    e4ae:	f7f7 fceb 	bl	5e88 <memcpy>
		smp_send(smp, buf, ident_sent);
    e4b2:	4641      	mov	r1, r8
    e4b4:	4620      	mov	r0, r4
    e4b6:	4a29      	ldr	r2, [pc, #164]	; (e55c <bt_smp_distribute_keys+0x224>)
    e4b8:	f7ff fe7e 	bl	e1b8 <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e4bc:	210b      	movs	r1, #11
    e4be:	4638      	mov	r0, r7
    e4c0:	f7ff fbf0 	bl	dca4 <atomic_test_bit>
    e4c4:	2800      	cmp	r0, #0
    e4c6:	d094      	beq.n	e3f2 <bt_smp_distribute_keys+0xba>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    e4c8:	4628      	mov	r0, r5
    e4ca:	2101      	movs	r1, #1
    e4cc:	f001 ffd4 	bl	10478 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    e4d0:	2210      	movs	r2, #16
    e4d2:	eb0d 0102 	add.w	r1, sp, r2
    e4d6:	f105 006e 	add.w	r0, r5, #110	; 0x6e
    e4da:	f7f7 fcd5 	bl	5e88 <memcpy>
			memcpy(keys->slave_ltk.rand, rand, sizeof(rand));
    e4de:	2208      	movs	r2, #8
    e4e0:	eb0d 0102 	add.w	r1, sp, r2
    e4e4:	f105 0064 	add.w	r0, r5, #100	; 0x64
    e4e8:	f7f7 fcce 	bl	5e88 <memcpy>
			memcpy(keys->slave_ltk.ediv, ediv,
    e4ec:	2202      	movs	r2, #2
    e4ee:	a901      	add	r1, sp, #4
    e4f0:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    e4f4:	f7f7 fcc8 	bl	5e88 <memcpy>
    e4f8:	e77b      	b.n	e3f2 <bt_smp_distribute_keys+0xba>
		info = net_buf_add(buf, sizeof(*info));
    e4fa:	2110      	movs	r1, #16
    e4fc:	3008      	adds	r0, #8
    e4fe:	f010 f805 	bl	1e50c <net_buf_simple_add>
		bt_rand(info->csrk, sizeof(info->csrk));
    e502:	2110      	movs	r1, #16
		info = net_buf_add(buf, sizeof(*info));
    e504:	4680      	mov	r8, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    e506:	f00d fd5d 	bl	1bfc4 <bt_rand>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e50a:	210b      	movs	r1, #11
    e50c:	4638      	mov	r0, r7
    e50e:	f7ff fbc9 	bl	dca4 <atomic_test_bit>
    e512:	b158      	cbz	r0, e52c <bt_smp_distribute_keys+0x1f4>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    e514:	2108      	movs	r1, #8
    e516:	4630      	mov	r0, r6
    e518:	f001 ffae 	bl	10478 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    e51c:	2210      	movs	r2, #16
    e51e:	4641      	mov	r1, r8
    e520:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    e524:	f7f7 fcb0 	bl	5e88 <memcpy>
			keys->local_csrk.cnt = 0;
    e528:	2300      	movs	r3, #0
    e52a:	64f3      	str	r3, [r6, #76]	; 0x4c
		smp_send(smp, buf, sign_info_sent);
    e52c:	4a0c      	ldr	r2, [pc, #48]	; (e560 <bt_smp_distribute_keys+0x228>)
    e52e:	4629      	mov	r1, r5
    e530:	4620      	mov	r0, r4
    e532:	f7ff fe41 	bl	e1b8 <smp_send>
    e536:	e722      	b.n	e37e <bt_smp_distribute_keys+0x46>
    e538:	2000d75c 	.word	0x2000d75c
    e53c:	0002d090 	.word	0x0002d090
    e540:	0002cff8 	.word	0x0002cff8
    e544:	0002feed 	.word	0x0002feed
    e548:	0003004e 	.word	0x0003004e
    e54c:	00030067 	.word	0x00030067
    e550:	0002fed6 	.word	0x0002fed6
    e554:	000300bd 	.word	0x000300bd
    e558:	00030092 	.word	0x00030092
    e55c:	0000f36d 	.word	0x0000f36d
    e560:	0000f287 	.word	0x0000f287

0000e564 <atomic_test_and_clear_bit>:
{
    e564:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    e566:	2301      	movs	r3, #1
    e568:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e56c:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e56e:	f3bf 8f5b 	dmb	ish
    e572:	e850 3f00 	ldrex	r3, [r0]
    e576:	ea03 0c02 	and.w	ip, r3, r2
    e57a:	e840 ce00 	strex	lr, ip, [r0]
    e57e:	f1be 0f00 	cmp.w	lr, #0
    e582:	d1f6      	bne.n	e572 <atomic_test_and_clear_bit+0xe>
    e584:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    e588:	420b      	tst	r3, r1
}
    e58a:	bf14      	ite	ne
    e58c:	2001      	movne	r0, #1
    e58e:	2000      	moveq	r0, #0
    e590:	f85d fb04 	ldr.w	pc, [sp], #4

0000e594 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    e594:	2301      	movs	r3, #1
    e596:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e59a:	f3bf 8f5b 	dmb	ish
    e59e:	e850 3f00 	ldrex	r3, [r0]
    e5a2:	430b      	orrs	r3, r1
    e5a4:	e840 3200 	strex	r2, r3, [r0]
    e5a8:	2a00      	cmp	r2, #0
    e5aa:	d1f8      	bne.n	e59e <atomic_set_bit+0xa>
    e5ac:	f3bf 8f5b 	dmb	ish
}
    e5b0:	4770      	bx	lr

0000e5b2 <_smp_init>:
{
    e5b2:	b538      	push	{r3, r4, r5, lr}
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    e5b4:	f100 0594 	add.w	r5, r0, #148	; 0x94
{
    e5b8:	4604      	mov	r4, r0
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    e5ba:	22e0      	movs	r2, #224	; 0xe0
    e5bc:	2100      	movs	r1, #0
    e5be:	4628      	mov	r0, r5
    e5c0:	f7f7 fc8f 	bl	5ee2 <memset>
	if (bt_rand(smp->prnd, 16)) {
    e5c4:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
    e5c8:	2110      	movs	r1, #16
    e5ca:	f00d fcfb 	bl	1bfc4 <bt_rand>
    e5ce:	4604      	mov	r4, r0
    e5d0:	b928      	cbnz	r0, e5de <_smp_init+0x2c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e5d2:	2105      	movs	r1, #5
    e5d4:	4628      	mov	r0, r5
    e5d6:	f7ff ffdd 	bl	e594 <atomic_set_bit>
}
    e5da:	4620      	mov	r0, r4
    e5dc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e5de:	2408      	movs	r4, #8
    e5e0:	e7fb      	b.n	e5da <_smp_init+0x28>
	...

0000e5e4 <display_passkey>:
{
    e5e4:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e5e6:	2104      	movs	r1, #4
{
    e5e8:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e5ea:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    e5ee:	f00d fce9 	bl	1bfc4 <bt_rand>
    e5f2:	4605      	mov	r5, r0
    e5f4:	b9e0      	cbnz	r0, e630 <display_passkey+0x4c>
	if (bt_auth && bt_auth->passkey_display) {
    e5f6:	4e0f      	ldr	r6, [pc, #60]	; (e634 <display_passkey+0x50>)
		smp->passkey %= 1000000;
    e5f8:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
    e5fc:	4a0e      	ldr	r2, [pc, #56]	; (e638 <display_passkey+0x54>)
	smp->passkey_round = 0;
    e5fe:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	if (bt_auth && bt_auth->passkey_display) {
    e602:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
    e604:	fbb1 f3f2 	udiv	r3, r1, r2
    e608:	fb02 1313 	mls	r3, r2, r3, r1
    e60c:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
	if (bt_auth && bt_auth->passkey_display) {
    e610:	b168      	cbz	r0, e62e <display_passkey+0x4a>
    e612:	6800      	ldr	r0, [r0, #0]
    e614:	b158      	cbz	r0, e62e <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e616:	210a      	movs	r1, #10
    e618:	f104 0098 	add.w	r0, r4, #152	; 0x98
    e61c:	f7ff ffba 	bl	e594 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    e620:	6833      	ldr	r3, [r6, #0]
    e622:	6820      	ldr	r0, [r4, #0]
    e624:	681b      	ldr	r3, [r3, #0]
    e626:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
    e62a:	4798      	blx	r3
    e62c:	4628      	mov	r0, r5
}
    e62e:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    e630:	2008      	movs	r0, #8
    e632:	e7fc      	b.n	e62e <display_passkey+0x4a>
    e634:	2000309c 	.word	0x2000309c
    e638:	000f4240 	.word	0x000f4240

0000e63c <compute_and_send_master_dhcheck>:
{
    e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e640:	4604      	mov	r4, r0
    e642:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
    e644:	2210      	movs	r2, #16
    e646:	2100      	movs	r1, #0
    e648:	a808      	add	r0, sp, #32
    e64a:	f7f7 fc4a 	bl	5ee2 <memset>
	switch (smp->method) {
    e64e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    e652:	2b03      	cmp	r3, #3
    e654:	d81f      	bhi.n	e696 <compute_and_send_master_dhcheck+0x5a>
    e656:	e8df f003 	tbb	[pc, r3]
    e65a:	0208      	.short	0x0208
    e65c:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    e65e:	2204      	movs	r2, #4
    e660:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    e664:	a808      	add	r0, sp, #32
    e666:	f7f7 fc0f 	bl	5e88 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    e66a:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    e66c:	f104 02db 	add.w	r2, r4, #219	; 0xdb
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    e670:	f204 155b 	addw	r5, r4, #347	; 0x15b
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    e674:	f104 07bb 	add.w	r7, r4, #187	; 0xbb
    e678:	f104 08cb 	add.w	r8, r4, #203	; 0xcb
    e67c:	e9cd 5201 	strd	r5, r2, [sp, #4]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    e680:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    e684:	9200      	str	r2, [sp, #0]
    e686:	334f      	adds	r3, #79	; 0x4f
    e688:	4642      	mov	r2, r8
    e68a:	4639      	mov	r1, r7
    e68c:	f204 102b 	addw	r0, r4, #299	; 0x12b
    e690:	f7ff fbd8 	bl	de44 <smp_f5>
    e694:	b108      	cbz	r0, e69a <compute_and_send_master_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    e696:	2008      	movs	r0, #8
    e698:	e01d      	b.n	e6d6 <compute_and_send_master_dhcheck+0x9a>
		   &smp->chan.chan.conn->le.init_addr,
    e69a:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    e69c:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    e69e:	f852 3b9e 	ldr.w	r3, [r2], #158
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    e6a2:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    e6a4:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    e6a8:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    e6aa:	e9cd 2300 	strd	r2, r3, [sp]
    e6ae:	9102      	str	r1, [sp, #8]
    e6b0:	4628      	mov	r0, r5
    e6b2:	ab08      	add	r3, sp, #32
    e6b4:	4642      	mov	r2, r8
    e6b6:	4639      	mov	r1, r7
    e6b8:	f7ff fc2e 	bl	df18 <smp_f6>
    e6bc:	4605      	mov	r5, r0
    e6be:	2800      	cmp	r0, #0
    e6c0:	d1e9      	bne.n	e696 <compute_and_send_master_dhcheck+0x5a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    e6c2:	210d      	movs	r1, #13
    e6c4:	f104 0094 	add.w	r0, r4, #148	; 0x94
    e6c8:	f7ff ff64 	bl	e594 <atomic_set_bit>
	sc_smp_send_dhkey_check(smp, e);
    e6cc:	4631      	mov	r1, r6
    e6ce:	4620      	mov	r0, r4
    e6d0:	f7ff fd86 	bl	e1e0 <sc_smp_send_dhkey_check>
	return 0;
    e6d4:	4628      	mov	r0, r5
}
    e6d6:	b00c      	add	sp, #48	; 0x30
    e6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e6dc <compute_and_check_and_send_slave_dhcheck>:
{
    e6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e6e0:	4604      	mov	r4, r0
    e6e2:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
    e6e4:	2210      	movs	r2, #16
    e6e6:	2100      	movs	r1, #0
    e6e8:	a80c      	add	r0, sp, #48	; 0x30
    e6ea:	f7f7 fbfa 	bl	5ee2 <memset>
	switch (smp->method) {
    e6ee:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    e6f2:	2b03      	cmp	r3, #3
    e6f4:	d81f      	bhi.n	e736 <compute_and_check_and_send_slave_dhcheck+0x5a>
    e6f6:	e8df f003 	tbb	[pc, r3]
    e6fa:	0208      	.short	0x0208
    e6fc:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    e6fe:	2204      	movs	r2, #4
    e700:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    e704:	a80c      	add	r0, sp, #48	; 0x30
    e706:	f7f7 fbbf 	bl	5e88 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    e70a:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    e70c:	f104 02db 	add.w	r2, r4, #219	; 0xdb
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    e710:	f204 155b 	addw	r5, r4, #347	; 0x15b
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    e714:	f104 06cb 	add.w	r6, r4, #203	; 0xcb
    e718:	f104 08bb 	add.w	r8, r4, #187	; 0xbb
    e71c:	e9cd 5201 	strd	r5, r2, [sp, #4]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    e720:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    e724:	9200      	str	r2, [sp, #0]
    e726:	334f      	adds	r3, #79	; 0x4f
    e728:	4642      	mov	r2, r8
    e72a:	4631      	mov	r1, r6
    e72c:	f204 102b 	addw	r0, r4, #299	; 0x12b
    e730:	f7ff fb88 	bl	de44 <smp_f5>
    e734:	b108      	cbz	r0, e73a <compute_and_check_and_send_slave_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    e736:	2008      	movs	r0, #8
    e738:	e039      	b.n	e7ae <compute_and_check_and_send_slave_dhcheck+0xd2>
		   &smp->chan.chan.conn->le.resp_addr,
    e73a:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e73c:	af08      	add	r7, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
    e73e:	f852 3ba5 	ldr.w	r3, [r2], #165
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e742:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    e744:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    e748:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e74a:	e9cd 2300 	strd	r2, r3, [sp]
    e74e:	9102      	str	r1, [sp, #8]
    e750:	ab0c      	add	r3, sp, #48	; 0x30
    e752:	4632      	mov	r2, r6
    e754:	4641      	mov	r1, r8
    e756:	4628      	mov	r0, r5
    e758:	f7ff fbde 	bl	df18 <smp_f6>
    e75c:	2800      	cmp	r0, #0
    e75e:	d1ea      	bne.n	e736 <compute_and_check_and_send_slave_dhcheck+0x5a>
		   &smp->chan.chan.conn->le.init_addr,
    e760:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e762:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    e766:	f852 3b9e 	ldr.w	r3, [r2], #158
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e76a:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    e76e:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    e772:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e774:	e9cd 2300 	strd	r2, r3, [sp]
    e778:	9102      	str	r1, [sp, #8]
    e77a:	ab0c      	add	r3, sp, #48	; 0x30
    e77c:	4642      	mov	r2, r8
    e77e:	4631      	mov	r1, r6
    e780:	4628      	mov	r0, r5
    e782:	f7ff fbc9 	bl	df18 <smp_f6>
    e786:	2800      	cmp	r0, #0
    e788:	d1d5      	bne.n	e736 <compute_and_check_and_send_slave_dhcheck+0x5a>
	if (memcmp(smp->e, re, 16)) {
    e78a:	2210      	movs	r2, #16
    e78c:	4649      	mov	r1, r9
    e78e:	f204 104b 	addw	r0, r4, #331	; 0x14b
    e792:	f7f7 fb52 	bl	5e3a <memcmp>
    e796:	4605      	mov	r5, r0
    e798:	b960      	cbnz	r0, e7b4 <compute_and_check_and_send_slave_dhcheck+0xd8>
	sc_smp_send_dhkey_check(smp, e);
    e79a:	4639      	mov	r1, r7
    e79c:	4620      	mov	r0, r4
    e79e:	f7ff fd1f 	bl	e1e0 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e7a2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    e7a6:	2101      	movs	r1, #1
    e7a8:	f7ff fef4 	bl	e594 <atomic_set_bit>
	return 0;
    e7ac:	4628      	mov	r0, r5
}
    e7ae:	b011      	add	sp, #68	; 0x44
    e7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    e7b4:	200b      	movs	r0, #11
    e7b6:	e7fa      	b.n	e7ae <compute_and_check_and_send_slave_dhcheck+0xd2>

0000e7b8 <smp_dhkey_check>:
{
    e7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e7ba:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    e7bc:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e7be:	78dd      	ldrb	r5, [r3, #3]
{
    e7c0:	b091      	sub	sp, #68	; 0x44
    e7c2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e7c4:	2d00      	cmp	r5, #0
    e7c6:	d156      	bne.n	e876 <smp_dhkey_check+0xbe>
		(void)memset(r, 0, sizeof(r));
    e7c8:	2210      	movs	r2, #16
    e7ca:	4629      	mov	r1, r5
    e7cc:	a80c      	add	r0, sp, #48	; 0x30
    e7ce:	f7f7 fb88 	bl	5ee2 <memset>
		switch (smp->method) {
    e7d2:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    e7d6:	2b03      	cmp	r3, #3
    e7d8:	d81e      	bhi.n	e818 <smp_dhkey_check+0x60>
    e7da:	e8df f003 	tbb	[pc, r3]
    e7de:	0208      	.short	0x0208
    e7e0:	0802      	.short	0x0802
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    e7e2:	2204      	movs	r2, #4
    e7e4:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    e7e8:	a80c      	add	r0, sp, #48	; 0x30
    e7ea:	f7f7 fb4d 	bl	5e88 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    e7ee:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    e7f0:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.resp_addr,
    e7f2:	f852 3bbb 	ldr.w	r3, [r2], #187
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    e7f6:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
    e7f8:	f103 014f 	add.w	r1, r3, #79	; 0x4f
			   &smp->chan.chan.conn->le.resp_addr,
    e7fc:	3356      	adds	r3, #86	; 0x56
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    e7fe:	9301      	str	r3, [sp, #4]
    e800:	f104 03a5 	add.w	r3, r4, #165	; 0xa5
    e804:	9102      	str	r1, [sp, #8]
    e806:	9300      	str	r3, [sp, #0]
    e808:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
    e80c:	ab0c      	add	r3, sp, #48	; 0x30
    e80e:	f204 105b 	addw	r0, r4, #347	; 0x15b
    e812:	f7ff fb81 	bl	df18 <smp_f6>
    e816:	b118      	cbz	r0, e820 <smp_dhkey_check+0x68>
			return BT_SMP_ERR_UNSPECIFIED;
    e818:	2508      	movs	r5, #8
}
    e81a:	4628      	mov	r0, r5
    e81c:	b011      	add	sp, #68	; 0x44
    e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (memcmp(e, req->e, 16)) {
    e820:	4639      	mov	r1, r7
    e822:	2210      	movs	r2, #16
    e824:	4630      	mov	r0, r6
    e826:	f7f7 fb08 	bl	5e3a <memcmp>
    e82a:	4607      	mov	r7, r0
    e82c:	bb08      	cbnz	r0, e872 <smp_dhkey_check+0xba>
	return min(req->max_key_size, rsp->max_key_size);
    e82e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
    e832:	f894 60a8 	ldrb.w	r6, [r4, #168]	; 0xa8
		(void)memset(ediv, 0, sizeof(ediv));
    e836:	4601      	mov	r1, r0
	return min(req->max_key_size, rsp->max_key_size);
    e838:	429e      	cmp	r6, r3
		(void)memset(ediv, 0, sizeof(ediv));
    e83a:	f04f 0202 	mov.w	r2, #2
    e83e:	a805      	add	r0, sp, #20
	return min(req->max_key_size, rsp->max_key_size);
    e840:	bf28      	it	cs
    e842:	461e      	movcs	r6, r3
		(void)memset(ediv, 0, sizeof(ediv));
    e844:	f7f7 fb4d 	bl	5ee2 <memset>
		(void)memset(rand, 0, sizeof(rand));
    e848:	2208      	movs	r2, #8
    e84a:	4639      	mov	r1, r7
    e84c:	a806      	add	r0, sp, #24
    e84e:	f7f7 fb48 	bl	5ee2 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    e852:	9600      	str	r6, [sp, #0]
    e854:	f104 03db 	add.w	r3, r4, #219	; 0xdb
    e858:	aa05      	add	r2, sp, #20
    e85a:	a906      	add	r1, sp, #24
    e85c:	6820      	ldr	r0, [r4, #0]
    e85e:	f7fb f967 	bl	9b30 <bt_conn_le_start_encryption>
    e862:	2800      	cmp	r0, #0
    e864:	dbd8      	blt.n	e818 <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e866:	2101      	movs	r1, #1
    e868:	f104 0098 	add.w	r0, r4, #152	; 0x98
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    e86c:	f7ff fe92 	bl	e594 <atomic_set_bit>
			return 0;
    e870:	e7d3      	b.n	e81a <smp_dhkey_check+0x62>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    e872:	250b      	movs	r5, #11
    e874:	e7d1      	b.n	e81a <smp_dhkey_check+0x62>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    e876:	2d01      	cmp	r5, #1
    e878:	d115      	bne.n	e8a6 <smp_dhkey_check+0xee>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    e87a:	f100 0698 	add.w	r6, r0, #152	; 0x98
    e87e:	210e      	movs	r1, #14
    e880:	4630      	mov	r0, r6
    e882:	f7ff fbc9 	bl	e018 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
    e886:	2210      	movs	r2, #16
    e888:	4639      	mov	r1, r7
    e88a:	f204 104b 	addw	r0, r4, #331	; 0x14b
    e88e:	f7f7 fafb 	bl	5e88 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    e892:	2107      	movs	r1, #7
    e894:	4630      	mov	r0, r6
    e896:	f7ff fa05 	bl	dca4 <atomic_test_bit>
    e89a:	4605      	mov	r5, r0
    e89c:	b128      	cbz	r0, e8aa <smp_dhkey_check+0xf2>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    e89e:	2108      	movs	r1, #8
    e8a0:	4630      	mov	r0, r6
    e8a2:	f7ff fe77 	bl	e594 <atomic_set_bit>
	return 0;
    e8a6:	2500      	movs	r5, #0
    e8a8:	e7b7      	b.n	e81a <smp_dhkey_check+0x62>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    e8aa:	2109      	movs	r1, #9
    e8ac:	4630      	mov	r0, r6
    e8ae:	f7ff f9f9 	bl	dca4 <atomic_test_bit>
    e8b2:	b110      	cbz	r0, e8ba <smp_dhkey_check+0x102>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    e8b4:	2108      	movs	r1, #8
    e8b6:	4630      	mov	r0, r6
    e8b8:	e7d8      	b.n	e86c <smp_dhkey_check+0xb4>
		return compute_and_check_and_send_slave_dhcheck(smp);
    e8ba:	4620      	mov	r0, r4
    e8bc:	f7ff ff0e 	bl	e6dc <compute_and_check_and_send_slave_dhcheck>
    e8c0:	4605      	mov	r5, r0
    e8c2:	e7aa      	b.n	e81a <smp_dhkey_check+0x62>

0000e8c4 <smp_ident_info>:
{
    e8c4:	b570      	push	{r4, r5, r6, lr}
    e8c6:	460b      	mov	r3, r1
    e8c8:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e8ca:	210b      	movs	r1, #11
    e8cc:	3098      	adds	r0, #152	; 0x98
    e8ce:	f7ff f9e9 	bl	dca4 <atomic_test_bit>
    e8d2:	b360      	cbz	r0, e92e <smp_ident_info+0x6a>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e8d4:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e8d6:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e8d8:	f103 0548 	add.w	r5, r3, #72	; 0x48
    e8dc:	462a      	mov	r2, r5
    e8de:	7a19      	ldrb	r1, [r3, #8]
    e8e0:	2002      	movs	r0, #2
    e8e2:	f001 fd6f 	bl	103c4 <bt_keys_get_type>
		if (!keys) {
    e8e6:	b9e8      	cbnz	r0, e924 <smp_ident_info+0x60>
			BT_ERR("Unable to get keys for %s",
    e8e8:	4b14      	ldr	r3, [pc, #80]	; (e93c <smp_ident_info+0x78>)
    e8ea:	681b      	ldr	r3, [r3, #0]
    e8ec:	075b      	lsls	r3, r3, #29
    e8ee:	d017      	beq.n	e920 <smp_ident_info+0x5c>
    e8f0:	2301      	movs	r3, #1
    e8f2:	f04f 0400 	mov.w	r4, #0
    e8f6:	f363 0402 	bfi	r4, r3, #0, #3
    e8fa:	4a11      	ldr	r2, [pc, #68]	; (e940 <smp_ident_info+0x7c>)
    e8fc:	4b11      	ldr	r3, [pc, #68]	; (e944 <smp_ident_info+0x80>)
    e8fe:	1ad2      	subs	r2, r2, r3
    e900:	08d2      	lsrs	r2, r2, #3
    e902:	f360 04c5 	bfi	r4, r0, #3, #3
    e906:	4628      	mov	r0, r5
    e908:	f362 148f 	bfi	r4, r2, #6, #10
    e90c:	f7f7 ffc4 	bl	6898 <bt_addr_le_str_real>
    e910:	f7f3 fbb4 	bl	207c <log_strdup>
    e914:	4623      	mov	r3, r4
    e916:	4602      	mov	r2, r0
    e918:	490b      	ldr	r1, [pc, #44]	; (e948 <smp_ident_info+0x84>)
    e91a:	480c      	ldr	r0, [pc, #48]	; (e94c <smp_ident_info+0x88>)
    e91c:	f7f3 fa30 	bl	1d80 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    e920:	2008      	movs	r0, #8
    e922:	e00a      	b.n	e93a <smp_ident_info+0x76>
		memcpy(keys->irk.val, req->irk, 16);
    e924:	2210      	movs	r2, #16
    e926:	4631      	mov	r1, r6
    e928:	3026      	adds	r0, #38	; 0x26
    e92a:	f7f7 faad 	bl	5e88 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e92e:	f104 0094 	add.w	r0, r4, #148	; 0x94
    e932:	2109      	movs	r1, #9
    e934:	f7ff fe2e 	bl	e594 <atomic_set_bit>
	return 0;
    e938:	2000      	movs	r0, #0
}
    e93a:	bd70      	pop	{r4, r5, r6, pc}
    e93c:	2000d75c 	.word	0x2000d75c
    e940:	0002d090 	.word	0x0002d090
    e944:	0002cff8 	.word	0x0002cff8
    e948:	0002ff6e 	.word	0x0002ff6e
    e94c:	0003038b 	.word	0x0003038b

0000e950 <smp_encrypt_info>:
{
    e950:	b570      	push	{r4, r5, r6, lr}
    e952:	460b      	mov	r3, r1
    e954:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e956:	210b      	movs	r1, #11
    e958:	3098      	adds	r0, #152	; 0x98
    e95a:	f7ff f9a3 	bl	dca4 <atomic_test_bit>
    e95e:	b360      	cbz	r0, e9ba <smp_encrypt_info+0x6a>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e960:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e962:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e964:	f103 0548 	add.w	r5, r3, #72	; 0x48
    e968:	462a      	mov	r2, r5
    e96a:	7a19      	ldrb	r1, [r3, #8]
    e96c:	2004      	movs	r0, #4
    e96e:	f001 fd29 	bl	103c4 <bt_keys_get_type>
		if (!keys) {
    e972:	b9e8      	cbnz	r0, e9b0 <smp_encrypt_info+0x60>
			BT_ERR("Unable to get keys for %s",
    e974:	4b14      	ldr	r3, [pc, #80]	; (e9c8 <smp_encrypt_info+0x78>)
    e976:	681b      	ldr	r3, [r3, #0]
    e978:	075b      	lsls	r3, r3, #29
    e97a:	d017      	beq.n	e9ac <smp_encrypt_info+0x5c>
    e97c:	2301      	movs	r3, #1
    e97e:	f04f 0400 	mov.w	r4, #0
    e982:	f363 0402 	bfi	r4, r3, #0, #3
    e986:	4a11      	ldr	r2, [pc, #68]	; (e9cc <smp_encrypt_info+0x7c>)
    e988:	4b11      	ldr	r3, [pc, #68]	; (e9d0 <smp_encrypt_info+0x80>)
    e98a:	1ad2      	subs	r2, r2, r3
    e98c:	08d2      	lsrs	r2, r2, #3
    e98e:	f360 04c5 	bfi	r4, r0, #3, #3
    e992:	4628      	mov	r0, r5
    e994:	f362 148f 	bfi	r4, r2, #6, #10
    e998:	f7f7 ff7e 	bl	6898 <bt_addr_le_str_real>
    e99c:	f7f3 fb6e 	bl	207c <log_strdup>
    e9a0:	4623      	mov	r3, r4
    e9a2:	4602      	mov	r2, r0
    e9a4:	490b      	ldr	r1, [pc, #44]	; (e9d4 <smp_encrypt_info+0x84>)
    e9a6:	480c      	ldr	r0, [pc, #48]	; (e9d8 <smp_encrypt_info+0x88>)
    e9a8:	f7f3 f9ea 	bl	1d80 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    e9ac:	2008      	movs	r0, #8
    e9ae:	e00a      	b.n	e9c6 <smp_encrypt_info+0x76>
		memcpy(keys->ltk.val, req->ltk, 16);
    e9b0:	2210      	movs	r2, #16
    e9b2:	4631      	mov	r1, r6
    e9b4:	3016      	adds	r0, #22
    e9b6:	f7f7 fa67 	bl	5e88 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e9ba:	f104 0094 	add.w	r0, r4, #148	; 0x94
    e9be:	2107      	movs	r1, #7
    e9c0:	f7ff fde8 	bl	e594 <atomic_set_bit>
	return 0;
    e9c4:	2000      	movs	r0, #0
}
    e9c6:	bd70      	pop	{r4, r5, r6, pc}
    e9c8:	2000d75c 	.word	0x2000d75c
    e9cc:	0002d090 	.word	0x0002d090
    e9d0:	0002cff8 	.word	0x0002cff8
    e9d4:	0002ff2c 	.word	0x0002ff2c
    e9d8:	0003038b 	.word	0x0003038b

0000e9dc <legacy_request_tk>:
{
    e9dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    e9de:	6805      	ldr	r5, [r0, #0]
{
    e9e0:	4604      	mov	r4, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    e9e2:	f105 0148 	add.w	r1, r5, #72	; 0x48
    e9e6:	7a28      	ldrb	r0, [r5, #8]
    e9e8:	f001 fd36 	bl	10458 <bt_keys_find_addr>
    e9ec:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    e9f0:	b1e8      	cbz	r0, ea2e <legacy_request_tk+0x52>
    e9f2:	7a43      	ldrb	r3, [r0, #9]
    e9f4:	07d8      	lsls	r0, r3, #31
    e9f6:	d51a      	bpl.n	ea2e <legacy_request_tk+0x52>
    e9f8:	b9ca      	cbnz	r2, ea2e <legacy_request_tk+0x52>
		BT_ERR("JustWorks failed, authenticated keys present");
    e9fa:	4b36      	ldr	r3, [pc, #216]	; (ead4 <legacy_request_tk+0xf8>)
    e9fc:	681b      	ldr	r3, [r3, #0]
    e9fe:	0759      	lsls	r1, r3, #29
    ea00:	d102      	bne.n	ea08 <legacy_request_tk+0x2c>
		return BT_SMP_ERR_UNSPECIFIED;
    ea02:	2008      	movs	r0, #8
}
    ea04:	b002      	add	sp, #8
    ea06:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("JustWorks failed, authenticated keys present");
    ea08:	2301      	movs	r3, #1
    ea0a:	f04f 0100 	mov.w	r1, #0
    ea0e:	f363 0102 	bfi	r1, r3, #0, #3
    ea12:	f362 01c5 	bfi	r1, r2, #3, #3
    ea16:	4b30      	ldr	r3, [pc, #192]	; (ead8 <legacy_request_tk+0xfc>)
    ea18:	4a30      	ldr	r2, [pc, #192]	; (eadc <legacy_request_tk+0x100>)
    ea1a:	4831      	ldr	r0, [pc, #196]	; (eae0 <legacy_request_tk+0x104>)
    ea1c:	1a9b      	subs	r3, r3, r2
    ea1e:	08db      	lsrs	r3, r3, #3
    ea20:	f363 118f 	bfi	r1, r3, #6, #10
    ea24:	460a      	mov	r2, r1
    ea26:	492f      	ldr	r1, [pc, #188]	; (eae4 <legacy_request_tk+0x108>)
    ea28:	f7f3 f996 	bl	1d58 <log_1>
    ea2c:	e7e9      	b.n	ea02 <legacy_request_tk+0x26>
	switch (smp->method) {
    ea2e:	2a01      	cmp	r2, #1
    ea30:	d02e      	beq.n	ea90 <legacy_request_tk+0xb4>
    ea32:	d32b      	bcc.n	ea8c <legacy_request_tk+0xb0>
    ea34:	2a02      	cmp	r2, #2
    ea36:	d136      	bne.n	eaa6 <legacy_request_tk+0xca>
			if (bt_rand(&passkey, sizeof(passkey))) {
    ea38:	2104      	movs	r1, #4
    ea3a:	eb0d 0001 	add.w	r0, sp, r1
    ea3e:	f00d fac1 	bl	1bfc4 <bt_rand>
    ea42:	2800      	cmp	r0, #0
    ea44:	d1dd      	bne.n	ea02 <legacy_request_tk+0x26>
			passkey %= 1000000;
    ea46:	9901      	ldr	r1, [sp, #4]
    ea48:	4a27      	ldr	r2, [pc, #156]	; (eae8 <legacy_request_tk+0x10c>)
		if (bt_auth && bt_auth->passkey_display) {
    ea4a:	4e28      	ldr	r6, [pc, #160]	; (eaec <legacy_request_tk+0x110>)
			passkey %= 1000000;
    ea4c:	fbb1 f3f2 	udiv	r3, r1, r2
    ea50:	fb02 1313 	mls	r3, r2, r3, r1
    ea54:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    ea56:	6833      	ldr	r3, [r6, #0]
    ea58:	b15b      	cbz	r3, ea72 <legacy_request_tk+0x96>
    ea5a:	681b      	ldr	r3, [r3, #0]
    ea5c:	b14b      	cbz	r3, ea72 <legacy_request_tk+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    ea5e:	210a      	movs	r1, #10
    ea60:	f104 0098 	add.w	r0, r4, #152	; 0x98
    ea64:	f7ff fd96 	bl	e594 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    ea68:	6833      	ldr	r3, [r6, #0]
    ea6a:	9901      	ldr	r1, [sp, #4]
    ea6c:	681b      	ldr	r3, [r3, #0]
    ea6e:	4628      	mov	r0, r5
    ea70:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    ea72:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    ea74:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
	dst[1] = val >> 8;
    ea78:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    ea7c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ea7e:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	dst[1] = val >> 8;
    ea82:	0a1b      	lsrs	r3, r3, #8
    ea84:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
    ea88:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
	return 0;
    ea8c:	2000      	movs	r0, #0
    ea8e:	e7b9      	b.n	ea04 <legacy_request_tk+0x28>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ea90:	f104 0098 	add.w	r0, r4, #152	; 0x98
    ea94:	2109      	movs	r1, #9
    ea96:	f7ff fd7d 	bl	e594 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    ea9a:	4b14      	ldr	r3, [pc, #80]	; (eaec <legacy_request_tk+0x110>)
    ea9c:	681b      	ldr	r3, [r3, #0]
    ea9e:	4628      	mov	r0, r5
    eaa0:	685b      	ldr	r3, [r3, #4]
    eaa2:	4798      	blx	r3
    eaa4:	e7f2      	b.n	ea8c <legacy_request_tk+0xb0>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    eaa6:	4b0b      	ldr	r3, [pc, #44]	; (ead4 <legacy_request_tk+0xf8>)
    eaa8:	681b      	ldr	r3, [r3, #0]
    eaaa:	075b      	lsls	r3, r3, #29
    eaac:	d0a9      	beq.n	ea02 <legacy_request_tk+0x26>
    eaae:	2101      	movs	r1, #1
    eab0:	f04f 0300 	mov.w	r3, #0
    eab4:	f361 0302 	bfi	r3, r1, #0, #3
    eab8:	4808      	ldr	r0, [pc, #32]	; (eadc <legacy_request_tk+0x100>)
    eaba:	4907      	ldr	r1, [pc, #28]	; (ead8 <legacy_request_tk+0xfc>)
    eabc:	1a09      	subs	r1, r1, r0
    eabe:	08c9      	lsrs	r1, r1, #3
    eac0:	f36f 03c5 	bfc	r3, #3, #3
    eac4:	f361 138f 	bfi	r3, r1, #6, #10
    eac8:	4809      	ldr	r0, [pc, #36]	; (eaf0 <legacy_request_tk+0x114>)
    eaca:	4906      	ldr	r1, [pc, #24]	; (eae4 <legacy_request_tk+0x108>)
    eacc:	f7f3 f958 	bl	1d80 <log_2>
    ead0:	e797      	b.n	ea02 <legacy_request_tk+0x26>
    ead2:	bf00      	nop
    ead4:	2000d75c 	.word	0x2000d75c
    ead8:	0002d090 	.word	0x0002d090
    eadc:	0002cff8 	.word	0x0002cff8
    eae0:	000302ac 	.word	0x000302ac
    eae4:	0002ff04 	.word	0x0002ff04
    eae8:	000f4240 	.word	0x000f4240
    eaec:	2000309c 	.word	0x2000309c
    eaf0:	000302dd 	.word	0x000302dd

0000eaf4 <smp_pairing_req>:
{
    eaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    eaf8:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    eafa:	78fb      	ldrb	r3, [r7, #3]
    eafc:	3b07      	subs	r3, #7
    eafe:	2b09      	cmp	r3, #9
{
    eb00:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    eb02:	d903      	bls.n	eb0c <smp_pairing_req+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    eb04:	2506      	movs	r5, #6
}
    eb06:	4628      	mov	r0, r5
    eb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    eb0c:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    eb0e:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
    eb10:	f856 8b98 	ldr.w	r8, [r6], #152
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    eb14:	4630      	mov	r0, r6
    eb16:	f7ff f8c5 	bl	dca4 <atomic_test_bit>
    eb1a:	b928      	cbnz	r0, eb28 <smp_pairing_req+0x34>
		int ret = _smp_init(smp);
    eb1c:	4620      	mov	r0, r4
    eb1e:	f7ff fd48 	bl	e5b2 <_smp_init>
		if (ret) {
    eb22:	b108      	cbz	r0, eb28 <smp_pairing_req+0x34>
			return ret;
    eb24:	b2c5      	uxtb	r5, r0
    eb26:	e7ee      	b.n	eb06 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    eb28:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    eb2a:	2206      	movs	r2, #6
    eb2c:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    eb2e:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	memcpy(smp->preq + 1, req, sizeof(*req));
    eb32:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    eb36:	f7f7 f9a7 	bl	5e88 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    eb3a:	2302      	movs	r3, #2
    eb3c:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	rsp->auth_req = get_auth(req->auth_req);
    eb40:	78b8      	ldrb	r0, [r7, #2]
    eb42:	f7ff f891 	bl	dc68 <get_auth>
    eb46:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
    eb4a:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    eb4c:	f7ff f866 	bl	dc1c <get_io_capa>
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    eb50:	2300      	movs	r3, #0
    eb52:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    eb56:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa();
    eb58:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    eb5c:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    eb60:	793b      	ldrb	r3, [r7, #4]
    eb62:	f003 0307 	and.w	r3, r3, #7
    eb66:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    eb6a:	797b      	ldrb	r3, [r7, #5]
    eb6c:	f003 0305 	and.w	r3, r3, #5
    eb70:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    eb74:	072b      	lsls	r3, r5, #28
    eb76:	d512      	bpl.n	eb9e <smp_pairing_req+0xaa>
    eb78:	78bb      	ldrb	r3, [r7, #2]
    eb7a:	071d      	lsls	r5, r3, #28
    eb7c:	d50f      	bpl.n	eb9e <smp_pairing_req+0xaa>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    eb7e:	2105      	movs	r1, #5
    eb80:	4630      	mov	r0, r6
    eb82:	f7ff fd07 	bl	e594 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    eb86:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    eb8a:	f003 0306 	and.w	r3, r3, #6
    eb8e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
		rsp->resp_key_dist &= SEND_KEYS_SC;
    eb92:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    eb96:	f003 0304 	and.w	r3, r3, #4
    eb9a:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    eb9e:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
    eba2:	0698      	lsls	r0, r3, #26
    eba4:	d506      	bpl.n	ebb4 <smp_pairing_req+0xc0>
    eba6:	78bb      	ldrb	r3, [r7, #2]
    eba8:	0699      	lsls	r1, r3, #26
    ebaa:	d503      	bpl.n	ebb4 <smp_pairing_req+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ebac:	2112      	movs	r1, #18
    ebae:	4630      	mov	r0, r6
    ebb0:	f7ff fcf0 	bl	e594 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    ebb4:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    ebb8:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	smp->remote_dist = rsp->init_key_dist;
    ebbc:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    ebc0:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    ebc4:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
    ebc8:	07da      	lsls	r2, r3, #31
    ebca:	d506      	bpl.n	ebda <smp_pairing_req+0xe6>
    ebcc:	78bb      	ldrb	r3, [r7, #2]
    ebce:	07db      	lsls	r3, r3, #31
    ebd0:	d503      	bpl.n	ebda <smp_pairing_req+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    ebd2:	210b      	movs	r1, #11
    ebd4:	4630      	mov	r0, r6
    ebd6:	f7ff fcdd 	bl	e594 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    ebda:	2103      	movs	r1, #3
    ebdc:	4630      	mov	r0, r6
    ebde:	f7ff fcd9 	bl	e594 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ebe2:	2105      	movs	r1, #5
    ebe4:	f7ff f85e 	bl	dca4 <atomic_test_bit>
    ebe8:	783f      	ldrb	r7, [r7, #0]
    ebea:	bb58      	cbnz	r0, ec44 <smp_pairing_req+0x150>
	smp->method = legacy_get_pair_method(smp, remote_io);
    ebec:	4639      	mov	r1, r7
    ebee:	4620      	mov	r0, r4
    ebf0:	f7ff fa3c 	bl	e06c <legacy_get_pair_method>
    ebf4:	4605      	mov	r5, r0
    ebf6:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ebfa:	b990      	cbnz	r0, ec22 <smp_pairing_req+0x12e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ebfc:	210d      	movs	r1, #13
    ebfe:	4630      	mov	r0, r6
    ec00:	f7ff f850 	bl	dca4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ec04:	b968      	cbnz	r0, ec22 <smp_pairing_req+0x12e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ec06:	4f2f      	ldr	r7, [pc, #188]	; (ecc4 <smp_pairing_req+0x1d0>)
    ec08:	683b      	ldr	r3, [r7, #0]
    ec0a:	b153      	cbz	r3, ec22 <smp_pairing_req+0x12e>
	    bt_auth && bt_auth->pairing_confirm) {
    ec0c:	691b      	ldr	r3, [r3, #16]
    ec0e:	b143      	cbz	r3, ec22 <smp_pairing_req+0x12e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec10:	4630      	mov	r0, r6
    ec12:	2109      	movs	r1, #9
    ec14:	f7ff fcbe 	bl	e594 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    ec18:	683b      	ldr	r3, [r7, #0]
    ec1a:	6820      	ldr	r0, [r4, #0]
    ec1c:	691b      	ldr	r3, [r3, #16]
    ec1e:	4798      	blx	r3
		return 0;
    ec20:	e771      	b.n	eb06 <smp_pairing_req+0x12>
	ret = send_pairing_rsp(smp);
    ec22:	4620      	mov	r0, r4
    ec24:	f7ff fb18 	bl	e258 <send_pairing_rsp>
	if (ret) {
    ec28:	4605      	mov	r5, r0
    ec2a:	2800      	cmp	r0, #0
    ec2c:	f47f af6b 	bne.w	eb06 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ec30:	f104 0094 	add.w	r0, r4, #148	; 0x94
    ec34:	2103      	movs	r1, #3
    ec36:	f7ff fcad 	bl	e594 <atomic_set_bit>
	return legacy_request_tk(smp);
    ec3a:	4620      	mov	r0, r4
}
    ec3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
    ec40:	f7ff becc 	b.w	e9dc <legacy_request_tk>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    ec44:	2f04      	cmp	r7, #4
    ec46:	d829      	bhi.n	ec9c <smp_pairing_req+0x1a8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ec48:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
    ec4c:	f894 00a7 	ldrb.w	r0, [r4, #167]	; 0xa7
    ec50:	4305      	orrs	r5, r0
    ec52:	f015 0504 	ands.w	r5, r5, #4
    ec56:	d006      	beq.n	ec66 <smp_pairing_req+0x172>
	return gen_method_sc[remote_io][get_io_capa()];
    ec58:	f7fe ffe0 	bl	dc1c <get_io_capa>
    ec5c:	491a      	ldr	r1, [pc, #104]	; (ecc8 <smp_pairing_req+0x1d4>)
    ec5e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    ec62:	440f      	add	r7, r1
    ec64:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    ec66:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    ec6a:	f898 300a 	ldrb.w	r3, [r8, #10]
    ec6e:	2b04      	cmp	r3, #4
    ec70:	d116      	bne.n	eca0 <smp_pairing_req+0x1ac>
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    ec72:	b32d      	cbz	r5, ecc0 <smp_pairing_req+0x1cc>
	return min(req->max_key_size, rsp->max_key_size);
    ec74:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
    ec78:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    ec7c:	4293      	cmp	r3, r2
    ec7e:	bf28      	it	cs
    ec80:	4613      	movcs	r3, r2
    ec82:	2b10      	cmp	r3, #16
    ec84:	f47f af3e 	bne.w	eb04 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ec88:	f104 0094 	add.w	r0, r4, #148	; 0x94
    ec8c:	210c      	movs	r1, #12
    ec8e:	f7ff fc81 	bl	e594 <atomic_set_bit>
	return send_pairing_rsp(smp);
    ec92:	4620      	mov	r0, r4
}
    ec94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    ec98:	f7ff bade 	b.w	e258 <send_pairing_rsp>
		return JUST_WORKS;
    ec9c:	2500      	movs	r5, #0
    ec9e:	e7e2      	b.n	ec66 <smp_pairing_req+0x172>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eca0:	2d00      	cmp	r5, #0
    eca2:	d1f1      	bne.n	ec88 <smp_pairing_req+0x194>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eca4:	210d      	movs	r1, #13
    eca6:	4630      	mov	r0, r6
    eca8:	f7fe fffc 	bl	dca4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ecac:	2800      	cmp	r0, #0
    ecae:	d1eb      	bne.n	ec88 <smp_pairing_req+0x194>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ecb0:	4f04      	ldr	r7, [pc, #16]	; (ecc4 <smp_pairing_req+0x1d0>)
    ecb2:	683b      	ldr	r3, [r7, #0]
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d0e7      	beq.n	ec88 <smp_pairing_req+0x194>
	    bt_auth && bt_auth->pairing_confirm) {
    ecb8:	691b      	ldr	r3, [r3, #16]
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d0e4      	beq.n	ec88 <smp_pairing_req+0x194>
    ecbe:	e7a7      	b.n	ec10 <smp_pairing_req+0x11c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ecc0:	2503      	movs	r5, #3
    ecc2:	e720      	b.n	eb06 <smp_pairing_req+0x12>
    ecc4:	2000309c 	.word	0x2000309c
    ecc8:	00030221 	.word	0x00030221

0000eccc <smp_reset>:
{
    eccc:	b538      	push	{r3, r4, r5, lr}
    ecce:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ecd0:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    ecd2:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    ecd6:	f01d fd24 	bl	2c722 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    ecda:	2300      	movs	r3, #0
    ecdc:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
	atomic_set(&smp->allowed_cmds, 0);
    ece0:	f104 0094 	add.w	r0, r4, #148	; 0x94
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ece4:	f3bf 8f5b 	dmb	ish
    ece8:	e850 2f00 	ldrex	r2, [r0]
    ecec:	e840 3100 	strex	r1, r3, [r0]
    ecf0:	2900      	cmp	r1, #0
    ecf2:	d1f9      	bne.n	ece8 <smp_reset+0x1c>
    ecf4:	f3bf 8f5b 	dmb	ish
    ecf8:	f3bf 8f5b 	dmb	ish
    ecfc:	3498      	adds	r4, #152	; 0x98
    ecfe:	e854 2f00 	ldrex	r2, [r4]
    ed02:	e844 3100 	strex	r1, r3, [r4]
    ed06:	2900      	cmp	r1, #0
    ed08:	d1f9      	bne.n	ecfe <smp_reset+0x32>
    ed0a:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    ed0e:	7a6b      	ldrb	r3, [r5, #9]
    ed10:	7aaa      	ldrb	r2, [r5, #10]
    ed12:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    ed14:	bf18      	it	ne
    ed16:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ed18:	78eb      	ldrb	r3, [r5, #3]
    ed1a:	b923      	cbnz	r3, ed26 <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    ed1c:	210b      	movs	r1, #11
}
    ed1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    ed22:	f7ff bc37 	b.w	e594 <atomic_set_bit>
    ed26:	2101      	movs	r1, #1
    ed28:	e7f9      	b.n	ed1e <smp_reset+0x52>
	...

0000ed2c <smp_pairing_complete>:
{
    ed2c:	b510      	push	{r4, lr}
    ed2e:	4b0f      	ldr	r3, [pc, #60]	; (ed6c <smp_pairing_complete+0x40>)
    ed30:	4604      	mov	r4, r0
	if (!status) {
    ed32:	b989      	cbnz	r1, ed58 <smp_pairing_complete+0x2c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ed34:	210b      	movs	r1, #11
    ed36:	3098      	adds	r0, #152	; 0x98
    ed38:	f7fe ffb4 	bl	dca4 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    ed3c:	681b      	ldr	r3, [r3, #0]
    ed3e:	b133      	cbz	r3, ed4e <smp_pairing_complete+0x22>
    ed40:	695b      	ldr	r3, [r3, #20]
    ed42:	b123      	cbz	r3, ed4e <smp_pairing_complete+0x22>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    ed44:	1c01      	adds	r1, r0, #0
    ed46:	bf18      	it	ne
    ed48:	2101      	movne	r1, #1
    ed4a:	6820      	ldr	r0, [r4, #0]
    ed4c:	4798      	blx	r3
	smp_reset(smp);
    ed4e:	4620      	mov	r0, r4
}
    ed50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    ed54:	f7ff bfba 	b.w	eccc <smp_reset>
	} else if (bt_auth && bt_auth->pairing_failed) {
    ed58:	681b      	ldr	r3, [r3, #0]
    ed5a:	2b00      	cmp	r3, #0
    ed5c:	d0f7      	beq.n	ed4e <smp_pairing_complete+0x22>
    ed5e:	699b      	ldr	r3, [r3, #24]
    ed60:	2b00      	cmp	r3, #0
    ed62:	d0f4      	beq.n	ed4e <smp_pairing_complete+0x22>
		bt_auth->pairing_failed(smp->chan.chan.conn);
    ed64:	6800      	ldr	r0, [r0, #0]
    ed66:	4798      	blx	r3
    ed68:	e7f1      	b.n	ed4e <smp_pairing_complete+0x22>
    ed6a:	bf00      	nop
    ed6c:	2000309c 	.word	0x2000309c

0000ed70 <smp_error>:
{
    ed70:	b570      	push	{r4, r5, r6, lr}
    ed72:	4605      	mov	r5, r0
    ed74:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    ed76:	f7ff ffd9 	bl	ed2c <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    ed7a:	2005      	movs	r0, #5
    ed7c:	f7ff f9de 	bl	e13c <smp_create_pdu.isra.6>
	if (!buf) {
    ed80:	4604      	mov	r4, r0
    ed82:	b160      	cbz	r0, ed9e <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    ed84:	2101      	movs	r1, #1
    ed86:	3008      	adds	r0, #8
    ed88:	f00f fbc0 	bl	1e50c <net_buf_simple_add>
	rsp->reason = reason;
    ed8c:	7006      	strb	r6, [r0, #0]
    ed8e:	6828      	ldr	r0, [r5, #0]
    ed90:	2300      	movs	r3, #0
    ed92:	4622      	mov	r2, r4
    ed94:	2106      	movs	r1, #6
    ed96:	f7fb ff31 	bl	abfc <bt_l2cap_send_cb>
	return 0;
    ed9a:	2000      	movs	r0, #0
}
    ed9c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    ed9e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    eda2:	e7fb      	b.n	ed9c <smp_error+0x2c>

0000eda4 <bt_smp_dhkey_ready>:
{
    eda4:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    eda6:	4c1d      	ldr	r4, [pc, #116]	; (ee1c <bt_smp_dhkey_ready+0x78>)
{
    eda8:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    edaa:	2107      	movs	r1, #7
    edac:	f104 0098 	add.w	r0, r4, #152	; 0x98
    edb0:	f7ff fbd8 	bl	e564 <atomic_test_and_clear_bit>
    edb4:	b370      	cbz	r0, ee14 <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    edb6:	b92d      	cbnz	r5, edc4 <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    edb8:	210b      	movs	r1, #11
			smp_error(smp, err);
    edba:	4620      	mov	r0, r4
}
    edbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_error(smp, err);
    edc0:	f7ff bfd6 	b.w	ed70 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    edc4:	4629      	mov	r1, r5
    edc6:	2220      	movs	r2, #32
    edc8:	f204 102b 	addw	r0, r4, #299	; 0x12b
    edcc:	f7f7 f85c 	bl	5e88 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    edd0:	2109      	movs	r1, #9
    edd2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    edd6:	f7fe ff65 	bl	dca4 <atomic_test_bit>
    edda:	b128      	cbz	r0, ede8 <bt_smp_dhkey_ready+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    eddc:	2108      	movs	r1, #8
    edde:	4810      	ldr	r0, [pc, #64]	; (ee20 <bt_smp_dhkey_ready+0x7c>)
}
    ede0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    ede4:	f7ff bbd6 	b.w	e594 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    ede8:	210e      	movs	r1, #14
    edea:	f104 0098 	add.w	r0, r4, #152	; 0x98
    edee:	f7fe ff59 	bl	dca4 <atomic_test_bit>
    edf2:	2800      	cmp	r0, #0
    edf4:	d1f2      	bne.n	eddc <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    edf6:	2108      	movs	r1, #8
    edf8:	f104 0098 	add.w	r0, r4, #152	; 0x98
    edfc:	f7fe ff52 	bl	dca4 <atomic_test_bit>
    ee00:	b140      	cbz	r0, ee14 <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ee02:	6823      	ldr	r3, [r4, #0]
    ee04:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    ee06:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ee08:	b92b      	cbnz	r3, ee16 <bt_smp_dhkey_ready+0x72>
			err = compute_and_send_master_dhcheck(smp);
    ee0a:	f7ff fc17 	bl	e63c <compute_and_send_master_dhcheck>
		if (err) {
    ee0e:	4601      	mov	r1, r0
    ee10:	2800      	cmp	r0, #0
    ee12:	d1d2      	bne.n	edba <bt_smp_dhkey_ready+0x16>
}
    ee14:	bd38      	pop	{r3, r4, r5, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    ee16:	f7ff fc61 	bl	e6dc <compute_and_check_and_send_slave_dhcheck>
    ee1a:	e7f8      	b.n	ee0e <bt_smp_dhkey_ready+0x6a>
    ee1c:	20000d10 	.word	0x20000d10
    ee20:	20000da8 	.word	0x20000da8

0000ee24 <bt_smp_recv>:
	if (buf->len < sizeof(*hdr)) {
    ee24:	898b      	ldrh	r3, [r1, #12]
{
    ee26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ee2a:	4604      	mov	r4, r0
    ee2c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    ee2e:	b9c3      	cbnz	r3, ee62 <bt_smp_recv+0x3e>
		BT_ERR("Too small SMP PDU received");
    ee30:	4a57      	ldr	r2, [pc, #348]	; (ef90 <bt_smp_recv+0x16c>)
    ee32:	6812      	ldr	r2, [r2, #0]
    ee34:	0752      	lsls	r2, r2, #29
    ee36:	d010      	beq.n	ee5a <bt_smp_recv+0x36>
    ee38:	2101      	movs	r1, #1
    ee3a:	f04f 0200 	mov.w	r2, #0
    ee3e:	f361 0202 	bfi	r2, r1, #0, #3
    ee42:	f363 02c5 	bfi	r2, r3, #3, #3
    ee46:	4953      	ldr	r1, [pc, #332]	; (ef94 <bt_smp_recv+0x170>)
    ee48:	4b53      	ldr	r3, [pc, #332]	; (ef98 <bt_smp_recv+0x174>)
    ee4a:	4854      	ldr	r0, [pc, #336]	; (ef9c <bt_smp_recv+0x178>)
    ee4c:	1a5b      	subs	r3, r3, r1
    ee4e:	08db      	lsrs	r3, r3, #3
    ee50:	f363 128f 	bfi	r2, r3, #6, #10
    ee54:	4952      	ldr	r1, [pc, #328]	; (efa0 <bt_smp_recv+0x17c>)
    ee56:	f7f2 ff7f 	bl	1d58 <log_1>
}
    ee5a:	2000      	movs	r0, #0
    ee5c:	b002      	add	sp, #8
    ee5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    ee62:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    ee64:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    ee66:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    ee6a:	f00f fb9f 	bl	1e5ac <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    ee6e:	2104      	movs	r1, #4
    ee70:	f104 0098 	add.w	r0, r4, #152	; 0x98
    ee74:	f7fe ff16 	bl	dca4 <atomic_test_bit>
    ee78:	4680      	mov	r8, r0
    ee7a:	b1c0      	cbz	r0, eeae <bt_smp_recv+0x8a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    ee7c:	4b44      	ldr	r3, [pc, #272]	; (ef90 <bt_smp_recv+0x16c>)
    ee7e:	681b      	ldr	r3, [r3, #0]
    ee80:	f003 0307 	and.w	r3, r3, #7
    ee84:	2b01      	cmp	r3, #1
    ee86:	d9e8      	bls.n	ee5a <bt_smp_recv+0x36>
    ee88:	2202      	movs	r2, #2
    ee8a:	f04f 0300 	mov.w	r3, #0
    ee8e:	f362 0302 	bfi	r3, r2, #0, #3
    ee92:	4940      	ldr	r1, [pc, #256]	; (ef94 <bt_smp_recv+0x170>)
    ee94:	4a40      	ldr	r2, [pc, #256]	; (ef98 <bt_smp_recv+0x174>)
    ee96:	4843      	ldr	r0, [pc, #268]	; (efa4 <bt_smp_recv+0x180>)
    ee98:	1a52      	subs	r2, r2, r1
    ee9a:	08d2      	lsrs	r2, r2, #3
    ee9c:	f36f 03c5 	bfc	r3, #3, #3
    eea0:	f362 138f 	bfi	r3, r2, #6, #10
    eea4:	493e      	ldr	r1, [pc, #248]	; (efa0 <bt_smp_recv+0x17c>)
    eea6:	782a      	ldrb	r2, [r5, #0]
    eea8:	f7f2 ff6a 	bl	1d80 <log_2>
    eeac:	e7d5      	b.n	ee5a <bt_smp_recv+0x36>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    eeae:	782a      	ldrb	r2, [r5, #0]
    eeb0:	2a0d      	cmp	r2, #13
    eeb2:	d803      	bhi.n	eebc <bt_smp_recv+0x98>
    eeb4:	4f3c      	ldr	r7, [pc, #240]	; (efa8 <bt_smp_recv+0x184>)
    eeb6:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
    eeba:	b9db      	cbnz	r3, eef4 <bt_smp_recv+0xd0>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    eebc:	4b34      	ldr	r3, [pc, #208]	; (ef90 <bt_smp_recv+0x16c>)
    eebe:	681b      	ldr	r3, [r3, #0]
    eec0:	f003 0307 	and.w	r3, r3, #7
    eec4:	2b01      	cmp	r3, #1
    eec6:	d910      	bls.n	eeea <bt_smp_recv+0xc6>
    eec8:	2102      	movs	r1, #2
    eeca:	f04f 0300 	mov.w	r3, #0
    eece:	f361 0302 	bfi	r3, r1, #0, #3
    eed2:	4831      	ldr	r0, [pc, #196]	; (ef98 <bt_smp_recv+0x174>)
    eed4:	492f      	ldr	r1, [pc, #188]	; (ef94 <bt_smp_recv+0x170>)
    eed6:	1a40      	subs	r0, r0, r1
    eed8:	08c0      	lsrs	r0, r0, #3
    eeda:	f36f 03c5 	bfc	r3, #3, #3
    eede:	f360 138f 	bfi	r3, r0, #6, #10
    eee2:	492f      	ldr	r1, [pc, #188]	; (efa0 <bt_smp_recv+0x17c>)
    eee4:	4831      	ldr	r0, [pc, #196]	; (efac <bt_smp_recv+0x188>)
    eee6:	f7f2 ff4b 	bl	1d80 <log_2>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    eeea:	2107      	movs	r1, #7
		smp_error(smp, err);
    eeec:	4620      	mov	r0, r4
    eeee:	f7ff ff3f 	bl	ed70 <smp_error>
    eef2:	e7b2      	b.n	ee5a <bt_smp_recv+0x36>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    eef4:	4611      	mov	r1, r2
    eef6:	f104 0094 	add.w	r0, r4, #148	; 0x94
    eefa:	f7ff fb33 	bl	e564 <atomic_test_and_clear_bit>
    eefe:	782a      	ldrb	r2, [r5, #0]
    ef00:	b9d8      	cbnz	r0, ef3a <bt_smp_recv+0x116>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    ef02:	4b23      	ldr	r3, [pc, #140]	; (ef90 <bt_smp_recv+0x16c>)
    ef04:	681b      	ldr	r3, [r3, #0]
    ef06:	f003 0307 	and.w	r3, r3, #7
    ef0a:	2b01      	cmp	r3, #1
    ef0c:	d910      	bls.n	ef30 <bt_smp_recv+0x10c>
    ef0e:	2102      	movs	r1, #2
    ef10:	f04f 0300 	mov.w	r3, #0
    ef14:	f361 0302 	bfi	r3, r1, #0, #3
    ef18:	f360 03c5 	bfi	r3, r0, #3, #3
    ef1c:	491e      	ldr	r1, [pc, #120]	; (ef98 <bt_smp_recv+0x174>)
    ef1e:	481d      	ldr	r0, [pc, #116]	; (ef94 <bt_smp_recv+0x170>)
    ef20:	1a09      	subs	r1, r1, r0
    ef22:	08c9      	lsrs	r1, r1, #3
    ef24:	f361 138f 	bfi	r3, r1, #6, #10
    ef28:	4821      	ldr	r0, [pc, #132]	; (efb0 <bt_smp_recv+0x18c>)
    ef2a:	491d      	ldr	r1, [pc, #116]	; (efa0 <bt_smp_recv+0x17c>)
    ef2c:	f7f2 ff28 	bl	1d80 <log_2>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    ef30:	782b      	ldrb	r3, [r5, #0]
    ef32:	2b05      	cmp	r3, #5
    ef34:	d091      	beq.n	ee5a <bt_smp_recv+0x36>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ef36:	2108      	movs	r1, #8
    ef38:	e7d8      	b.n	eeec <bt_smp_recv+0xc8>
	if (buf->len != handlers[hdr->code].expect_len) {
    ef3a:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    ef3e:	89b0      	ldrh	r0, [r6, #12]
    ef40:	791b      	ldrb	r3, [r3, #4]
    ef42:	4283      	cmp	r3, r0
    ef44:	d01a      	beq.n	ef7c <bt_smp_recv+0x158>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    ef46:	4b12      	ldr	r3, [pc, #72]	; (ef90 <bt_smp_recv+0x16c>)
    ef48:	681b      	ldr	r3, [r3, #0]
    ef4a:	075b      	lsls	r3, r3, #29
    ef4c:	d014      	beq.n	ef78 <bt_smp_recv+0x154>
    ef4e:	2301      	movs	r3, #1
    ef50:	f04f 0100 	mov.w	r1, #0
    ef54:	f363 0102 	bfi	r1, r3, #0, #3
    ef58:	4d0e      	ldr	r5, [pc, #56]	; (ef94 <bt_smp_recv+0x170>)
    ef5a:	4b0f      	ldr	r3, [pc, #60]	; (ef98 <bt_smp_recv+0x174>)
    ef5c:	1b5b      	subs	r3, r3, r5
    ef5e:	08db      	lsrs	r3, r3, #3
    ef60:	f368 01c5 	bfi	r1, r8, #3, #3
    ef64:	f363 118f 	bfi	r1, r3, #6, #10
    ef68:	f8ad 1000 	strh.w	r1, [sp]
    ef6c:	4613      	mov	r3, r2
    ef6e:	490c      	ldr	r1, [pc, #48]	; (efa0 <bt_smp_recv+0x17c>)
    ef70:	4602      	mov	r2, r0
    ef72:	4810      	ldr	r0, [pc, #64]	; (efb4 <bt_smp_recv+0x190>)
    ef74:	f7f2 ff1c 	bl	1db0 <log_3>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    ef78:	210a      	movs	r1, #10
    ef7a:	e7b7      	b.n	eeec <bt_smp_recv+0xc8>
	err = handlers[hdr->code].func(smp, buf);
    ef7c:	4631      	mov	r1, r6
    ef7e:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
    ef82:	4620      	mov	r0, r4
    ef84:	4798      	blx	r3
	if (err) {
    ef86:	4601      	mov	r1, r0
    ef88:	2800      	cmp	r0, #0
    ef8a:	f43f af66 	beq.w	ee5a <bt_smp_recv+0x36>
    ef8e:	e7ad      	b.n	eeec <bt_smp_recv+0xc8>
    ef90:	2000d75c 	.word	0x2000d75c
    ef94:	0002cff8 	.word	0x0002cff8
    ef98:	0002d090 	.word	0x0002d090
    ef9c:	00030105 	.word	0x00030105
    efa0:	0002ffc6 	.word	0x0002ffc6
    efa4:	00030124 	.word	0x00030124
    efa8:	0003023c 	.word	0x0003023c
    efac:	00030159 	.word	0x00030159
    efb0:	00030177 	.word	0x00030177
    efb4:	0002fc72 	.word	0x0002fc72

0000efb8 <smp_pairing_failed>:
{
    efb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ERR("reason 0x%x", req->reason);
    efba:	4b20      	ldr	r3, [pc, #128]	; (f03c <smp_pairing_failed+0x84>)
	struct bt_conn *conn = smp->chan.chan.conn;
    efbc:	6807      	ldr	r7, [r0, #0]
	BT_ERR("reason 0x%x", req->reason);
    efbe:	681b      	ldr	r3, [r3, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    efc0:	688e      	ldr	r6, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
    efc2:	075b      	lsls	r3, r3, #29
{
    efc4:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    efc6:	d011      	beq.n	efec <smp_pairing_failed+0x34>
    efc8:	2201      	movs	r2, #1
    efca:	f04f 0300 	mov.w	r3, #0
    efce:	f362 0302 	bfi	r3, r2, #0, #3
    efd2:	491b      	ldr	r1, [pc, #108]	; (f040 <smp_pairing_failed+0x88>)
    efd4:	4a1b      	ldr	r2, [pc, #108]	; (f044 <smp_pairing_failed+0x8c>)
    efd6:	481c      	ldr	r0, [pc, #112]	; (f048 <smp_pairing_failed+0x90>)
    efd8:	1a52      	subs	r2, r2, r1
    efda:	08d2      	lsrs	r2, r2, #3
    efdc:	f36f 03c5 	bfc	r3, #3, #3
    efe0:	f362 138f 	bfi	r3, r2, #6, #10
    efe4:	4919      	ldr	r1, [pc, #100]	; (f04c <smp_pairing_failed+0x94>)
    efe6:	7832      	ldrb	r2, [r6, #0]
    efe8:	f7f2 feca 	bl	1d80 <log_2>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    efec:	f104 0598 	add.w	r5, r4, #152	; 0x98
    eff0:	2109      	movs	r1, #9
    eff2:	4628      	mov	r0, r5
    eff4:	f7ff fab6 	bl	e564 <atomic_test_and_clear_bit>
    eff8:	b190      	cbz	r0, f020 <smp_pairing_failed+0x68>
		if (bt_auth && bt_auth->cancel) {
    effa:	4b15      	ldr	r3, [pc, #84]	; (f050 <smp_pairing_failed+0x98>)
    effc:	681b      	ldr	r3, [r3, #0]
    effe:	b9b3      	cbnz	r3, f02e <smp_pairing_failed+0x76>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    f000:	2102      	movs	r1, #2
    f002:	4628      	mov	r0, r5
    f004:	f7fe fe4e 	bl	dca4 <atomic_test_bit>
    f008:	b120      	cbz	r0, f014 <smp_pairing_failed+0x5c>
	    smp->chan.chan.conn->le.keys) {
    f00a:	6823      	ldr	r3, [r4, #0]
    f00c:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    f00e:	b108      	cbz	r0, f014 <smp_pairing_failed+0x5c>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    f010:	f001 fa36 	bl	10480 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    f014:	4620      	mov	r0, r4
    f016:	7831      	ldrb	r1, [r6, #0]
    f018:	f7ff fe88 	bl	ed2c <smp_pairing_complete>
}
    f01c:	2000      	movs	r0, #0
    f01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    f020:	210a      	movs	r1, #10
    f022:	4628      	mov	r0, r5
    f024:	f7ff fa9e 	bl	e564 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    f028:	2800      	cmp	r0, #0
    f02a:	d1e6      	bne.n	effa <smp_pairing_failed+0x42>
    f02c:	e7e8      	b.n	f000 <smp_pairing_failed+0x48>
		if (bt_auth && bt_auth->cancel) {
    f02e:	68db      	ldr	r3, [r3, #12]
    f030:	2b00      	cmp	r3, #0
    f032:	d0e5      	beq.n	f000 <smp_pairing_failed+0x48>
			bt_auth->cancel(conn);
    f034:	4638      	mov	r0, r7
    f036:	4798      	blx	r3
    f038:	e7e2      	b.n	f000 <smp_pairing_failed+0x48>
    f03a:	bf00      	nop
    f03c:	2000d75c 	.word	0x2000d75c
    f040:	0002cff8 	.word	0x0002cff8
    f044:	0002d090 	.word	0x0002d090
    f048:	000303a9 	.word	0x000303a9
    f04c:	0002ff5b 	.word	0x0002ff5b
    f050:	2000309c 	.word	0x2000309c

0000f054 <smp_timeout>:
{
    f054:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("SMP Timeout");
    f056:	4b16      	ldr	r3, [pc, #88]	; (f0b0 <smp_timeout+0x5c>)
    f058:	681b      	ldr	r3, [r3, #0]
    f05a:	075b      	lsls	r3, r3, #29
{
    f05c:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    f05e:	f5a0 75ba 	sub.w	r5, r0, #372	; 0x174
	BT_ERR("SMP Timeout");
    f062:	d010      	beq.n	f086 <smp_timeout+0x32>
    f064:	2301      	movs	r3, #1
    f066:	f04f 0200 	mov.w	r2, #0
    f06a:	f363 0202 	bfi	r2, r3, #0, #3
    f06e:	4911      	ldr	r1, [pc, #68]	; (f0b4 <smp_timeout+0x60>)
    f070:	4b11      	ldr	r3, [pc, #68]	; (f0b8 <smp_timeout+0x64>)
    f072:	4812      	ldr	r0, [pc, #72]	; (f0bc <smp_timeout+0x68>)
    f074:	1a5b      	subs	r3, r3, r1
    f076:	f36f 02c5 	bfc	r2, #3, #3
    f07a:	08db      	lsrs	r3, r3, #3
    f07c:	f363 128f 	bfi	r2, r3, #6, #10
    f080:	490f      	ldr	r1, [pc, #60]	; (f0c0 <smp_timeout+0x6c>)
    f082:	f7f2 fe69 	bl	1d58 <log_1>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    f086:	3cdc      	subs	r4, #220	; 0xdc
    f088:	2102      	movs	r1, #2
    f08a:	4620      	mov	r0, r4
    f08c:	f7fe fe0a 	bl	dca4 <atomic_test_bit>
    f090:	b120      	cbz	r0, f09c <smp_timeout+0x48>
	    smp->chan.chan.conn->le.keys) {
    f092:	682b      	ldr	r3, [r5, #0]
    f094:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    f096:	b108      	cbz	r0, f09c <smp_timeout+0x48>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    f098:	f001 f9f2 	bl	10480 <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    f09c:	4628      	mov	r0, r5
    f09e:	2108      	movs	r1, #8
    f0a0:	f7ff fe44 	bl	ed2c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f0a4:	4620      	mov	r0, r4
    f0a6:	2104      	movs	r1, #4
}
    f0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f0ac:	f7ff ba72 	b.w	e594 <atomic_set_bit>
    f0b0:	2000d75c 	.word	0x2000d75c
    f0b4:	0002cff8 	.word	0x0002cff8
    f0b8:	0002d090 	.word	0x0002d090
    f0bc:	00030473 	.word	0x00030473
    f0c0:	0002feca 	.word	0x0002feca

0000f0c4 <smp_signing_info>:
{
    f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0c6:	4605      	mov	r5, r0
    f0c8:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    f0ca:	f850 4b98 	ldr.w	r4, [r0], #152
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f0ce:	210b      	movs	r1, #11
    f0d0:	f7fe fde8 	bl	dca4 <atomic_test_bit>
    f0d4:	b358      	cbz	r0, f12e <smp_signing_info+0x6a>
					&conn->le.dst);
    f0d6:	f104 0648 	add.w	r6, r4, #72	; 0x48
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    f0da:	4632      	mov	r2, r6
    f0dc:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    f0de:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    f0e0:	2010      	movs	r0, #16
    f0e2:	f001 f96f 	bl	103c4 <bt_keys_get_type>
		if (!keys) {
    f0e6:	b9e8      	cbnz	r0, f124 <smp_signing_info+0x60>
			BT_ERR("Unable to get keys for %s",
    f0e8:	4b1d      	ldr	r3, [pc, #116]	; (f160 <smp_signing_info+0x9c>)
    f0ea:	681b      	ldr	r3, [r3, #0]
    f0ec:	075b      	lsls	r3, r3, #29
    f0ee:	d017      	beq.n	f120 <smp_signing_info+0x5c>
    f0f0:	2301      	movs	r3, #1
    f0f2:	f04f 0400 	mov.w	r4, #0
    f0f6:	f363 0402 	bfi	r4, r3, #0, #3
    f0fa:	4a1a      	ldr	r2, [pc, #104]	; (f164 <smp_signing_info+0xa0>)
    f0fc:	4b1a      	ldr	r3, [pc, #104]	; (f168 <smp_signing_info+0xa4>)
    f0fe:	1ad2      	subs	r2, r2, r3
    f100:	08d2      	lsrs	r2, r2, #3
    f102:	f360 04c5 	bfi	r4, r0, #3, #3
    f106:	4630      	mov	r0, r6
    f108:	f362 148f 	bfi	r4, r2, #6, #10
    f10c:	f7f7 fbc4 	bl	6898 <bt_addr_le_str_real>
    f110:	f7f2 ffb4 	bl	207c <log_strdup>
    f114:	4623      	mov	r3, r4
    f116:	4602      	mov	r2, r0
    f118:	4914      	ldr	r1, [pc, #80]	; (f16c <smp_signing_info+0xa8>)
    f11a:	4815      	ldr	r0, [pc, #84]	; (f170 <smp_signing_info+0xac>)
    f11c:	f7f2 fe30 	bl	1d80 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    f120:	2008      	movs	r0, #8
}
    f122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    f124:	2210      	movs	r2, #16
    f126:	4639      	mov	r1, r7
    f128:	3050      	adds	r0, #80	; 0x50
    f12a:	f7f6 fead 	bl	5e88 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    f12e:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    f132:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f136:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f13a:	78e2      	ldrb	r2, [r4, #3]
    f13c:	b91a      	cbnz	r2, f146 <smp_signing_info+0x82>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    f13e:	b913      	cbnz	r3, f146 <smp_signing_info+0x82>
		bt_smp_distribute_keys(smp);
    f140:	4628      	mov	r0, r5
    f142:	f7ff f8f9 	bl	e338 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    f146:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
    f14a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    f14e:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    f152:	b91c      	cbnz	r4, f15c <smp_signing_info+0x98>
		smp_pairing_complete(smp, 0);
    f154:	4621      	mov	r1, r4
    f156:	4628      	mov	r0, r5
    f158:	f7ff fde8 	bl	ed2c <smp_pairing_complete>
	return 0;
    f15c:	2000      	movs	r0, #0
    f15e:	e7e0      	b.n	f122 <smp_signing_info+0x5e>
    f160:	2000d75c 	.word	0x2000d75c
    f164:	0002d090 	.word	0x0002d090
    f168:	0002cff8 	.word	0x0002cff8
    f16c:	0002ff91 	.word	0x0002ff91
    f170:	0003038b 	.word	0x0003038b

0000f174 <smp_master_ident>:
{
    f174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f178:	460b      	mov	r3, r1
    f17a:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f17c:	210b      	movs	r1, #11
	struct bt_conn *conn = smp->chan.chan.conn;
    f17e:	f850 6b98 	ldr.w	r6, [r0], #152
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f182:	f7fe fd8f 	bl	dca4 <atomic_test_bit>
    f186:	2800      	cmp	r0, #0
    f188:	d039      	beq.n	f1fe <smp_master_ident+0x8a>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f18a:	f106 0848 	add.w	r8, r6, #72	; 0x48
    f18e:	4642      	mov	r2, r8
    f190:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    f192:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f194:	2004      	movs	r0, #4
    f196:	f001 f915 	bl	103c4 <bt_keys_get_type>
		if (!keys) {
    f19a:	4604      	mov	r4, r0
    f19c:	b9f0      	cbnz	r0, f1dc <smp_master_ident+0x68>
			BT_ERR("Unable to get keys for %s",
    f19e:	4b29      	ldr	r3, [pc, #164]	; (f244 <smp_master_ident+0xd0>)
    f1a0:	681b      	ldr	r3, [r3, #0]
    f1a2:	0759      	lsls	r1, r3, #29
    f1a4:	d017      	beq.n	f1d6 <smp_master_ident+0x62>
    f1a6:	2301      	movs	r3, #1
    f1a8:	f04f 0500 	mov.w	r5, #0
    f1ac:	f363 0502 	bfi	r5, r3, #0, #3
    f1b0:	4a25      	ldr	r2, [pc, #148]	; (f248 <smp_master_ident+0xd4>)
    f1b2:	4b26      	ldr	r3, [pc, #152]	; (f24c <smp_master_ident+0xd8>)
    f1b4:	1ad2      	subs	r2, r2, r3
    f1b6:	08d2      	lsrs	r2, r2, #3
    f1b8:	f360 05c5 	bfi	r5, r0, #3, #3
    f1bc:	4640      	mov	r0, r8
    f1be:	f362 158f 	bfi	r5, r2, #6, #10
    f1c2:	f7f7 fb69 	bl	6898 <bt_addr_le_str_real>
    f1c6:	f7f2 ff59 	bl	207c <log_strdup>
    f1ca:	462b      	mov	r3, r5
    f1cc:	4602      	mov	r2, r0
    f1ce:	4920      	ldr	r1, [pc, #128]	; (f250 <smp_master_ident+0xdc>)
    f1d0:	4820      	ldr	r0, [pc, #128]	; (f254 <smp_master_ident+0xe0>)
    f1d2:	f7f2 fdd5 	bl	1d80 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    f1d6:	2008      	movs	r0, #8
}
    f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    f1dc:	2202      	movs	r2, #2
    f1de:	4639      	mov	r1, r7
    f1e0:	3014      	adds	r0, #20
    f1e2:	f7f6 fe51 	bl	5e88 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    f1e6:	2208      	movs	r2, #8
    f1e8:	1cb9      	adds	r1, r7, #2
    f1ea:	f104 000c 	add.w	r0, r4, #12
    f1ee:	f7f6 fe4b 	bl	5e88 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    f1f2:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    f1f6:	f023 0301 	bic.w	r3, r3, #1
    f1fa:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    f1fe:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    f202:	079a      	lsls	r2, r3, #30
    f204:	d519      	bpl.n	f23a <smp_master_ident+0xc6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    f206:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f208:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f20c:	f7ff f9c2 	bl	e594 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f210:	78f3      	ldrb	r3, [r6, #3]
    f212:	b92b      	cbnz	r3, f220 <smp_master_ident+0xac>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    f214:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    f218:	b913      	cbnz	r3, f220 <smp_master_ident+0xac>
		bt_smp_distribute_keys(smp);
    f21a:	4628      	mov	r0, r5
    f21c:	f7ff f88c 	bl	e338 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    f220:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
    f224:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    f228:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    f22c:	b91c      	cbnz	r4, f236 <smp_master_ident+0xc2>
		smp_pairing_complete(smp, 0);
    f22e:	4621      	mov	r1, r4
    f230:	4628      	mov	r0, r5
    f232:	f7ff fd7b 	bl	ed2c <smp_pairing_complete>
	return 0;
    f236:	2000      	movs	r0, #0
    f238:	e7ce      	b.n	f1d8 <smp_master_ident+0x64>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f23a:	075b      	lsls	r3, r3, #29
    f23c:	d5e8      	bpl.n	f210 <smp_master_ident+0x9c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f23e:	210a      	movs	r1, #10
    f240:	e7e2      	b.n	f208 <smp_master_ident+0x94>
    f242:	bf00      	nop
    f244:	2000d75c 	.word	0x2000d75c
    f248:	0002d090 	.word	0x0002d090
    f24c:	0002cff8 	.word	0x0002cff8
    f250:	0002ff3d 	.word	0x0002ff3d
    f254:	0003038b 	.word	0x0003038b

0000f258 <smp_check_complete.part.13>:
static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
    f258:	b510      	push	{r4, lr}
    f25a:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    f25c:	2106      	movs	r1, #6
    f25e:	f7fb fe40 	bl	aee2 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    f262:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    f266:	ea21 0104 	bic.w	r1, r1, r4
    f26a:	f880 1171 	strb.w	r1, [r0, #369]	; 0x171
		if (!smp->local_dist && !smp->remote_dist) {
    f26e:	f8d0 1170 	ldr.w	r1, [r0, #368]	; 0x170
    f272:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f276:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    f27a:	b919      	cbnz	r1, f284 <smp_check_complete.part.13+0x2c>
}
    f27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
    f280:	f7ff bd54 	b.w	ed2c <smp_pairing_complete>
}
    f284:	bd10      	pop	{r4, pc}

0000f286 <sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
    f286:	7883      	ldrb	r3, [r0, #2]
    f288:	b913      	cbnz	r3, f290 <sign_info_sent+0xa>
    f28a:	2104      	movs	r1, #4
    f28c:	f7ff bfe4 	b.w	f258 <smp_check_complete.part.13>
}
    f290:	4770      	bx	lr

0000f292 <bt_smp_encrypt_change>:
{
    f292:	b570      	push	{r4, r5, r6, lr}
    f294:	4604      	mov	r4, r0
	if (hci_status) {
    f296:	2900      	cmp	r1, #0
    f298:	d158      	bne.n	f34c <bt_smp_encrypt_change+0xba>
	struct bt_conn *conn = chan->conn;
    f29a:	6806      	ldr	r6, [r0, #0]
	if (!conn->encrypt) {
    f29c:	7af3      	ldrb	r3, [r6, #11]
    f29e:	2b00      	cmp	r3, #0
    f2a0:	d054      	beq.n	f34c <bt_smp_encrypt_change+0xba>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f2a2:	f100 0598 	add.w	r5, r0, #152	; 0x98
    f2a6:	2103      	movs	r1, #3
    f2a8:	4628      	mov	r0, r5
    f2aa:	f7fe fcfb 	bl	dca4 <atomic_test_bit>
    f2ae:	b920      	cbnz	r0, f2ba <bt_smp_encrypt_change+0x28>
		smp_reset(smp);
    f2b0:	4620      	mov	r0, r4
}
    f2b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_reset(smp);
    f2b6:	f7ff bd09 	b.w	eccc <smp_reset>
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f2ba:	2101      	movs	r1, #1
    f2bc:	4628      	mov	r0, r5
    f2be:	f7fe feab 	bl	e018 <atomic_clear_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f2c2:	2105      	movs	r1, #5
    f2c4:	f7fe fcee 	bl	dca4 <atomic_test_bit>
    f2c8:	b1b8      	cbz	r0, f2fa <bt_smp_encrypt_change+0x68>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    f2ca:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    f2ce:	071b      	lsls	r3, r3, #28
    f2d0:	d507      	bpl.n	f2e2 <bt_smp_encrypt_change+0x50>
    f2d2:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    f2d6:	0718      	lsls	r0, r3, #28
    f2d8:	d503      	bpl.n	f2e2 <bt_smp_encrypt_change+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    f2da:	210f      	movs	r1, #15
    f2dc:	4628      	mov	r0, r5
    f2de:	f7ff f959 	bl	e594 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    f2e2:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    f2e6:	f023 0308 	bic.w	r3, r3, #8
    f2ea:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    f2ee:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    f2f2:	f023 0308 	bic.w	r3, r3, #8
    f2f6:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    f2fa:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    f2fe:	07d9      	lsls	r1, r3, #31
    f300:	d51c      	bpl.n	f33c <bt_smp_encrypt_change+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    f302:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f304:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f308:	f7ff f944 	bl	e594 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    f30c:	2102      	movs	r1, #2
    f30e:	4628      	mov	r0, r5
    f310:	f7ff f940 	bl	e594 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f314:	78f3      	ldrb	r3, [r6, #3]
    f316:	b913      	cbnz	r3, f31e <bt_smp_encrypt_change+0x8c>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    f318:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    f31c:	b9b3      	cbnz	r3, f34c <bt_smp_encrypt_change+0xba>
	bt_smp_distribute_keys(smp);
    f31e:	4620      	mov	r0, r4
    f320:	f7ff f80a 	bl	e338 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    f324:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    f328:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f32c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    f330:	b961      	cbnz	r1, f34c <bt_smp_encrypt_change+0xba>
		smp_pairing_complete(smp, 0);
    f332:	4620      	mov	r0, r4
}
    f334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_pairing_complete(smp, 0);
    f338:	f7ff bcf8 	b.w	ed2c <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    f33c:	079a      	lsls	r2, r3, #30
    f33e:	d501      	bpl.n	f344 <bt_smp_encrypt_change+0xb2>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    f340:	2108      	movs	r1, #8
    f342:	e7df      	b.n	f304 <bt_smp_encrypt_change+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f344:	075b      	lsls	r3, r3, #29
    f346:	d5e1      	bpl.n	f30c <bt_smp_encrypt_change+0x7a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f348:	210a      	movs	r1, #10
    f34a:	e7db      	b.n	f304 <bt_smp_encrypt_change+0x72>
}
    f34c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f350 <bt_smp_connected>:
{
    f350:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    f352:	4905      	ldr	r1, [pc, #20]	; (f368 <bt_smp_connected+0x18>)
{
    f354:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    f356:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    f35a:	f01d f9d9 	bl	2c710 <k_delayed_work_init>
	smp_reset(smp);
    f35e:	4620      	mov	r0, r4
}
    f360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    f364:	f7ff bcb2 	b.w	eccc <smp_reset>
    f368:	0000f055 	.word	0x0000f055

0000f36c <ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
    f36c:	7883      	ldrb	r3, [r0, #2]
    f36e:	b913      	cbnz	r3, f376 <ident_sent+0xa>
    f370:	2101      	movs	r1, #1
    f372:	f7ff bf71 	b.w	f258 <smp_check_complete.part.13>
}
    f376:	4770      	bx	lr

0000f378 <smp_c1>:
{
    f378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f37c:	b089      	sub	sp, #36	; 0x24
    f37e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    f382:	461f      	mov	r7, r3
	p1[0] = ia->type;
    f384:	f898 3000 	ldrb.w	r3, [r8]
    f388:	f88d 3000 	strb.w	r3, [sp]
{
    f38c:	4606      	mov	r6, r0
	p1[1] = ra->type;
    f38e:	f899 3000 	ldrb.w	r3, [r9]
    f392:	f88d 3001 	strb.w	r3, [sp, #1]
{
    f396:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
    f398:	f10d 0002 	add.w	r0, sp, #2
{
    f39c:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
    f39e:	2207      	movs	r2, #7
{
    f3a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
    f3a2:	f7f6 fd71 	bl	5e88 <memcpy>
	memcpy(p1 + 9, pres, 7);
    f3a6:	2207      	movs	r2, #7
    f3a8:	4639      	mov	r1, r7
    f3aa:	f10d 0009 	add.w	r0, sp, #9
    f3ae:	f7f6 fd6b 	bl	5e88 <memcpy>
    f3b2:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
    f3b4:	5ce2      	ldrb	r2, [r4, r3]
    f3b6:	f81d 1003 	ldrb.w	r1, [sp, r3]
    f3ba:	404a      	eors	r2, r1
    f3bc:	54ea      	strb	r2, [r5, r3]
    f3be:	3301      	adds	r3, #1
	while (len--) {
    f3c0:	2b10      	cmp	r3, #16
    f3c2:	d1f7      	bne.n	f3b4 <smp_c1+0x3c>
	err = bt_encrypt_le(k, enc_data, enc_data);
    f3c4:	462a      	mov	r2, r5
    f3c6:	4629      	mov	r1, r5
    f3c8:	4630      	mov	r0, r6
    f3ca:	f00c fe15 	bl	1bff8 <bt_encrypt_le>
	if (err) {
    f3ce:	4604      	mov	r4, r0
    f3d0:	bb10      	cbnz	r0, f418 <smp_c1+0xa0>
	memcpy(p2, ra->a.val, 6);
    f3d2:	af04      	add	r7, sp, #16
    f3d4:	2206      	movs	r2, #6
    f3d6:	f109 0101 	add.w	r1, r9, #1
    f3da:	4638      	mov	r0, r7
    f3dc:	f7f6 fd54 	bl	5e88 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    f3e0:	2206      	movs	r2, #6
    f3e2:	f108 0101 	add.w	r1, r8, #1
    f3e6:	f10d 0016 	add.w	r0, sp, #22
    f3ea:	f7f6 fd4d 	bl	5e88 <memcpy>
	(void)memset(p2 + 12, 0, 4);
    f3ee:	2204      	movs	r2, #4
    f3f0:	4621      	mov	r1, r4
    f3f2:	a807      	add	r0, sp, #28
    f3f4:	f7f6 fd75 	bl	5ee2 <memset>
    f3f8:	462b      	mov	r3, r5
		*r++ = *p++ ^ *q++;
    f3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
    f3fe:	5d39      	ldrb	r1, [r7, r4]
    f400:	3401      	adds	r4, #1
    f402:	404a      	eors	r2, r1
	while (len--) {
    f404:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    f406:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
    f40a:	d1f6      	bne.n	f3fa <smp_c1+0x82>
	return bt_encrypt_le(k, enc_data, enc_data);
    f40c:	462a      	mov	r2, r5
    f40e:	4629      	mov	r1, r5
    f410:	4630      	mov	r0, r6
    f412:	f00c fdf1 	bl	1bff8 <bt_encrypt_le>
    f416:	4604      	mov	r4, r0
}
    f418:	4620      	mov	r0, r4
    f41a:	b009      	add	sp, #36	; 0x24
    f41c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000f420 <legacy_send_pairing_confirm>:
{
    f420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f422:	6804      	ldr	r4, [r0, #0]
{
    f424:	4605      	mov	r5, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    f426:	2003      	movs	r0, #3
    f428:	f7fe fe88 	bl	e13c <smp_create_pdu.isra.6>
	if (!buf) {
    f42c:	4606      	mov	r6, r0
    f42e:	b1c0      	cbz	r0, f462 <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
    f430:	2110      	movs	r1, #16
    f432:	3008      	adds	r0, #8
    f434:	f00f f86a 	bl	1e50c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    f438:	f104 0356 	add.w	r3, r4, #86	; 0x56
    f43c:	344f      	adds	r4, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    f43e:	9002      	str	r0, [sp, #8]
    f440:	9301      	str	r3, [sp, #4]
    f442:	9400      	str	r4, [sp, #0]
    f444:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
    f448:	f105 029d 	add.w	r2, r5, #157	; 0x9d
    f44c:	f105 01bb 	add.w	r1, r5, #187	; 0xbb
    f450:	f105 00db 	add.w	r0, r5, #219	; 0xdb
    f454:	f7ff ff90 	bl	f378 <smp_c1>
    f458:	4604      	mov	r4, r0
    f45a:	b120      	cbz	r0, f466 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
    f45c:	4630      	mov	r0, r6
    f45e:	f00e fff7 	bl	1e450 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f462:	2008      	movs	r0, #8
    f464:	e00a      	b.n	f47c <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL);
    f466:	4602      	mov	r2, r0
    f468:	4631      	mov	r1, r6
    f46a:	4628      	mov	r0, r5
    f46c:	f7fe fea4 	bl	e1b8 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f470:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f474:	4621      	mov	r1, r4
    f476:	f7fe fdcf 	bl	e018 <atomic_clear_bit>
	return 0;
    f47a:	4620      	mov	r0, r4
}
    f47c:	b004      	add	sp, #16
    f47e:	bd70      	pop	{r4, r5, r6, pc}

0000f480 <legacy_pairing_confirm>:
{
    f480:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f482:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f484:	78db      	ldrb	r3, [r3, #3]
{
    f486:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f488:	b94b      	cbnz	r3, f49e <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f48a:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
    f48c:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f490:	f7ff f880 	bl	e594 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
    f494:	4620      	mov	r0, r4
}
    f496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
    f49a:	f7ff bfc1 	b.w	f420 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f49e:	f100 0398 	add.w	r3, r0, #152	; 0x98
    f4a2:	2109      	movs	r1, #9
    f4a4:	4618      	mov	r0, r3
    f4a6:	f7fe fbfd 	bl	dca4 <atomic_test_bit>
    f4aa:	b908      	cbnz	r0, f4b0 <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
    f4ac:	2104      	movs	r1, #4
    f4ae:	e7ed      	b.n	f48c <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f4b0:	4618      	mov	r0, r3
    f4b2:	2100      	movs	r1, #0
    f4b4:	f7ff f86e 	bl	e594 <atomic_set_bit>
}
    f4b8:	2000      	movs	r0, #0
    f4ba:	bd10      	pop	{r4, pc}

0000f4bc <smp_pairing_confirm>:
{
    f4bc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    f4be:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f4c0:	f100 0598 	add.w	r5, r0, #152	; 0x98
{
    f4c4:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f4c6:	210a      	movs	r1, #10
    f4c8:	4628      	mov	r0, r5
    f4ca:	f7fe fda5 	bl	e018 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    f4ce:	2210      	movs	r2, #16
    f4d0:	4631      	mov	r1, r6
    f4d2:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    f4d6:	f7f6 fcd7 	bl	5e88 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f4da:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f4dc:	78db      	ldrb	r3, [r3, #3]
    f4de:	b94b      	cbnz	r3, f4f4 <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f4e0:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f4e4:	2104      	movs	r1, #4
    f4e6:	f7ff f855 	bl	e594 <atomic_set_bit>
		return smp_send_pairing_random(smp);
    f4ea:	4620      	mov	r0, r4
}
    f4ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
    f4f0:	f7fe becb 	b.w	e28a <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f4f4:	2105      	movs	r1, #5
    f4f6:	4628      	mov	r0, r5
    f4f8:	f7fe fbd4 	bl	dca4 <atomic_test_bit>
    f4fc:	b920      	cbnz	r0, f508 <smp_pairing_confirm+0x4c>
		return legacy_pairing_confirm(smp);
    f4fe:	4620      	mov	r0, r4
}
    f500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    f504:	f7ff bfbc 	b.w	f480 <legacy_pairing_confirm>
	switch (smp->method) {
    f508:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    f50c:	2b01      	cmp	r3, #1
    f50e:	d00b      	beq.n	f528 <smp_pairing_confirm+0x6c>
    f510:	2b02      	cmp	r3, #2
    f512:	d115      	bne.n	f540 <smp_pairing_confirm+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f514:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f518:	2104      	movs	r1, #4
    f51a:	f7ff f83b 	bl	e594 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    f51e:	4620      	mov	r0, r4
}
    f520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    f524:	f7fe beca 	b.w	e2bc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f528:	2109      	movs	r1, #9
    f52a:	4628      	mov	r0, r5
    f52c:	f7fe fbba 	bl	dca4 <atomic_test_bit>
    f530:	2800      	cmp	r0, #0
    f532:	d0ef      	beq.n	f514 <smp_pairing_confirm+0x58>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f534:	4628      	mov	r0, r5
    f536:	2100      	movs	r1, #0
    f538:	f7ff f82c 	bl	e594 <atomic_set_bit>
			return 0;
    f53c:	2000      	movs	r0, #0
}
    f53e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f540:	2008      	movs	r0, #8
    f542:	e7fc      	b.n	f53e <smp_pairing_confirm+0x82>

0000f544 <smp_public_key_slave.part.11>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    f544:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    f546:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
static u8_t smp_public_key_slave(struct bt_smp *smp)
    f54a:	4605      	mov	r5, r0
	switch (smp->method) {
    f54c:	2b03      	cmp	r3, #3
    f54e:	d832      	bhi.n	f5b6 <smp_public_key_slave.part.11+0x72>
    f550:	e8df f003 	tbb	[pc, r3]
    f554:	020b2202 	.word	0x020b2202
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f558:	3094      	adds	r0, #148	; 0x94
    f55a:	2104      	movs	r1, #4
    f55c:	f7ff f81a 	bl	e594 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    f560:	4628      	mov	r0, r5
    f562:	f7fe feab 	bl	e2bc <smp_send_pairing_confirm>
		if (err) {
    f566:	b148      	cbz	r0, f57c <smp_public_key_slave.part.11+0x38>
}
    f568:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
    f56a:	f7ff f83b 	bl	e5e4 <display_passkey>
		if (err) {
    f56e:	2800      	cmp	r0, #0
    f570:	d1fa      	bne.n	f568 <smp_public_key_slave.part.11+0x24>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f572:	2103      	movs	r1, #3
    f574:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f578:	f7ff f80c 	bl	e594 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    f57c:	490f      	ldr	r1, [pc, #60]	; (f5bc <smp_public_key_slave.part.11+0x78>)
    f57e:	f105 00eb 	add.w	r0, r5, #235	; 0xeb
    f582:	f7fa fa0d 	bl	99a0 <bt_dh_key_gen>
    f586:	4604      	mov	r4, r0
    f588:	b9a8      	cbnz	r0, f5b6 <smp_public_key_slave.part.11+0x72>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    f58a:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f58e:	2107      	movs	r1, #7
    f590:	f7ff f800 	bl	e594 <atomic_set_bit>
	return 0;
    f594:	4620      	mov	r0, r4
    f596:	e7e7      	b.n	f568 <smp_public_key_slave.part.11+0x24>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f598:	2103      	movs	r1, #3
    f59a:	3094      	adds	r0, #148	; 0x94
    f59c:	f7fe fffa 	bl	e594 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f5a0:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f5a4:	2109      	movs	r1, #9
    f5a6:	f7fe fff5 	bl	e594 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    f5aa:	4b05      	ldr	r3, [pc, #20]	; (f5c0 <smp_public_key_slave.part.11+0x7c>)
    f5ac:	6828      	ldr	r0, [r5, #0]
    f5ae:	681b      	ldr	r3, [r3, #0]
    f5b0:	685b      	ldr	r3, [r3, #4]
    f5b2:	4798      	blx	r3
    f5b4:	e7e2      	b.n	f57c <smp_public_key_slave.part.11+0x38>
		return BT_SMP_ERR_UNSPECIFIED;
    f5b6:	2008      	movs	r0, #8
    f5b8:	e7d6      	b.n	f568 <smp_public_key_slave.part.11+0x24>
    f5ba:	bf00      	nop
    f5bc:	0000eda5 	.word	0x0000eda5
    f5c0:	2000309c 	.word	0x2000309c

0000f5c4 <smp_public_key>:
{
    f5c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    f5c6:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    f5c8:	f100 04eb 	add.w	r4, r0, #235	; 0xeb
{
    f5cc:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    f5ce:	2220      	movs	r2, #32
    f5d0:	4631      	mov	r1, r6
    f5d2:	4620      	mov	r0, r4
    f5d4:	f7f6 fc58 	bl	5e88 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    f5d8:	2220      	movs	r2, #32
    f5da:	18b1      	adds	r1, r6, r2
    f5dc:	f205 100b 	addw	r0, r5, #267	; 0x10b
    f5e0:	f7f6 fc52 	bl	5e88 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    f5e4:	2240      	movs	r2, #64	; 0x40
    f5e6:	4934      	ldr	r1, [pc, #208]	; (f6b8 <smp_public_key+0xf4>)
    f5e8:	4620      	mov	r0, r4
    f5ea:	f7f6 fc26 	bl	5e3a <memcmp>
    f5ee:	b9d8      	cbnz	r0, f628 <smp_public_key+0x64>
		BT_INFO("Remote is using Debug Public key");
    f5f0:	4b32      	ldr	r3, [pc, #200]	; (f6bc <smp_public_key+0xf8>)
    f5f2:	681b      	ldr	r3, [r3, #0]
    f5f4:	f003 0307 	and.w	r3, r3, #7
    f5f8:	2b02      	cmp	r3, #2
    f5fa:	d910      	bls.n	f61e <smp_public_key+0x5a>
    f5fc:	2303      	movs	r3, #3
    f5fe:	f04f 0200 	mov.w	r2, #0
    f602:	f363 0202 	bfi	r2, r3, #0, #3
    f606:	492e      	ldr	r1, [pc, #184]	; (f6c0 <smp_public_key+0xfc>)
    f608:	4b2e      	ldr	r3, [pc, #184]	; (f6c4 <smp_public_key+0x100>)
    f60a:	1a5b      	subs	r3, r3, r1
    f60c:	f360 02c5 	bfi	r2, r0, #3, #3
    f610:	08db      	lsrs	r3, r3, #3
    f612:	f363 128f 	bfi	r2, r3, #6, #10
    f616:	492c      	ldr	r1, [pc, #176]	; (f6c8 <smp_public_key+0x104>)
    f618:	482c      	ldr	r0, [pc, #176]	; (f6cc <smp_public_key+0x108>)
    f61a:	f7f2 fb9d 	bl	1d58 <log_1>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f61e:	210c      	movs	r1, #12
    f620:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f624:	f7fe ffb6 	bl	e594 <atomic_set_bit>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f628:	682b      	ldr	r3, [r5, #0]
    f62a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f62c:	bb9b      	cbnz	r3, f696 <smp_public_key+0xd2>
		switch (smp->method) {
    f62e:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    f632:	2b03      	cmp	r3, #3
    f634:	d83e      	bhi.n	f6b4 <smp_public_key+0xf0>
    f636:	e8df f003 	tbb	[pc, r3]
    f63a:	2302      	.short	0x2302
    f63c:	0214      	.short	0x0214
			atomic_set_bit(&smp->allowed_cmds,
    f63e:	2103      	movs	r1, #3
    f640:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f644:	f7fe ffa6 	bl	e594 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    f648:	4620      	mov	r0, r4
    f64a:	4921      	ldr	r1, [pc, #132]	; (f6d0 <smp_public_key+0x10c>)
    f64c:	f7fa f9a8 	bl	99a0 <bt_dh_key_gen>
    f650:	4604      	mov	r4, r0
    f652:	bb78      	cbnz	r0, f6b4 <smp_public_key+0xf0>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    f654:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f656:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f65a:	f7fe ff9b 	bl	e594 <atomic_set_bit>
		return 0;
    f65e:	4620      	mov	r0, r4
    f660:	e00d      	b.n	f67e <smp_public_key+0xba>
			err = display_passkey(smp);
    f662:	4628      	mov	r0, r5
    f664:	f7fe ffbe 	bl	e5e4 <display_passkey>
			if (err) {
    f668:	b948      	cbnz	r0, f67e <smp_public_key+0xba>
			atomic_set_bit(&smp->allowed_cmds,
    f66a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f66e:	2103      	movs	r1, #3
    f670:	f7fe ff90 	bl	e594 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    f674:	4628      	mov	r0, r5
    f676:	f7fe fe21 	bl	e2bc <smp_send_pairing_confirm>
			if (err) {
    f67a:	2800      	cmp	r0, #0
    f67c:	d0e4      	beq.n	f648 <smp_public_key+0x84>
}
    f67e:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f680:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f684:	2109      	movs	r1, #9
    f686:	f7fe ff85 	bl	e594 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    f68a:	4b12      	ldr	r3, [pc, #72]	; (f6d4 <smp_public_key+0x110>)
    f68c:	6828      	ldr	r0, [r5, #0]
    f68e:	681b      	ldr	r3, [r3, #0]
    f690:	685b      	ldr	r3, [r3, #4]
    f692:	4798      	blx	r3
			break;
    f694:	e7d8      	b.n	f648 <smp_public_key+0x84>
	if (!sc_local_pkey_valid) {
    f696:	4b10      	ldr	r3, [pc, #64]	; (f6d8 <smp_public_key+0x114>)
    f698:	781c      	ldrb	r4, [r3, #0]
    f69a:	b90c      	cbnz	r4, f6a0 <smp_public_key+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f69c:	2106      	movs	r1, #6
    f69e:	e7da      	b.n	f656 <smp_public_key+0x92>
	err = sc_send_public_key(smp);
    f6a0:	4628      	mov	r0, r5
    f6a2:	f7fe fdb7 	bl	e214 <sc_send_public_key>
	if (err) {
    f6a6:	2800      	cmp	r0, #0
    f6a8:	d1e9      	bne.n	f67e <smp_public_key+0xba>
    f6aa:	4628      	mov	r0, r5
}
    f6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6b0:	f7ff bf48 	b.w	f544 <smp_public_key_slave.part.11>
		return BT_SMP_ERR_UNSPECIFIED;
    f6b4:	2008      	movs	r0, #8
    f6b6:	e7e2      	b.n	f67e <smp_public_key+0xba>
    f6b8:	0003030d 	.word	0x0003030d
    f6bc:	2000d75c 	.word	0x2000d75c
    f6c0:	0002cff8 	.word	0x0002cff8
    f6c4:	0002d090 	.word	0x0002d090
    f6c8:	0002ffb7 	.word	0x0002ffb7
    f6cc:	000303d8 	.word	0x000303d8
    f6d0:	0000eda5 	.word	0x0000eda5
    f6d4:	2000309c 	.word	0x2000309c
    f6d8:	20000ea4 	.word	0x20000ea4

0000f6dc <bt_smp_pkey_ready>:
{
    f6dc:	b510      	push	{r4, lr}
	if (!pkey) {
    f6de:	4601      	mov	r1, r0
    f6e0:	4c28      	ldr	r4, [pc, #160]	; (f784 <bt_smp_pkey_ready+0xa8>)
    f6e2:	b9c8      	cbnz	r0, f718 <bt_smp_pkey_ready+0x3c>
		BT_WARN("Public key not available");
    f6e4:	4b28      	ldr	r3, [pc, #160]	; (f788 <bt_smp_pkey_ready+0xac>)
    f6e6:	681b      	ldr	r3, [r3, #0]
    f6e8:	f003 0307 	and.w	r3, r3, #7
    f6ec:	2b01      	cmp	r3, #1
    f6ee:	d910      	bls.n	f712 <bt_smp_pkey_ready+0x36>
    f6f0:	2302      	movs	r3, #2
    f6f2:	f04f 0200 	mov.w	r2, #0
    f6f6:	f363 0202 	bfi	r2, r3, #0, #3
    f6fa:	4924      	ldr	r1, [pc, #144]	; (f78c <bt_smp_pkey_ready+0xb0>)
    f6fc:	4b24      	ldr	r3, [pc, #144]	; (f790 <bt_smp_pkey_ready+0xb4>)
    f6fe:	1a5b      	subs	r3, r3, r1
    f700:	f360 02c5 	bfi	r2, r0, #3, #3
    f704:	08db      	lsrs	r3, r3, #3
    f706:	f363 128f 	bfi	r2, r3, #6, #10
    f70a:	4922      	ldr	r1, [pc, #136]	; (f794 <bt_smp_pkey_ready+0xb8>)
    f70c:	4822      	ldr	r0, [pc, #136]	; (f798 <bt_smp_pkey_ready+0xbc>)
    f70e:	f7f2 fb23 	bl	1d58 <log_1>
		sc_local_pkey_valid = false;
    f712:	2300      	movs	r3, #0
    f714:	7023      	strb	r3, [r4, #0]
}
    f716:	bd10      	pop	{r4, pc}
	memcpy(sc_public_key, pkey, 64);
    f718:	2240      	movs	r2, #64	; 0x40
    f71a:	4820      	ldr	r0, [pc, #128]	; (f79c <bt_smp_pkey_ready+0xc0>)
    f71c:	f7f6 fbb4 	bl	5e88 <memcpy>
	sc_local_pkey_valid = true;
    f720:	2301      	movs	r3, #1
    f722:	7023      	strb	r3, [r4, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    f724:	4c1e      	ldr	r4, [pc, #120]	; (f7a0 <bt_smp_pkey_ready+0xc4>)
    f726:	2106      	movs	r1, #6
    f728:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f72c:	f7fe faba 	bl	dca4 <atomic_test_bit>
    f730:	2800      	cmp	r0, #0
    f732:	d0f0      	beq.n	f716 <bt_smp_pkey_ready+0x3a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f734:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f736:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    f738:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f73a:	b9a3      	cbnz	r3, f766 <bt_smp_pkey_ready+0x8a>
			err = sc_send_public_key(smp);
    f73c:	f7fe fd6a 	bl	e214 <sc_send_public_key>
			if (err) {
    f740:	4601      	mov	r1, r0
    f742:	b110      	cbz	r0, f74a <bt_smp_pkey_ready+0x6e>
				smp_error(smp, err);
    f744:	4620      	mov	r0, r4
    f746:	f7ff fb13 	bl	ed70 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f74a:	f3bf 8f5b 	dmb	ish
    f74e:	4b15      	ldr	r3, [pc, #84]	; (f7a4 <bt_smp_pkey_ready+0xc8>)
    f750:	e853 2f00 	ldrex	r2, [r3]
    f754:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    f758:	e843 2100 	strex	r1, r2, [r3]
    f75c:	2900      	cmp	r1, #0
    f75e:	d1f7      	bne.n	f750 <bt_smp_pkey_ready+0x74>
    f760:	f3bf 8f5b 	dmb	ish
    f764:	e7d7      	b.n	f716 <bt_smp_pkey_ready+0x3a>
	err = sc_send_public_key(smp);
    f766:	f7fe fd55 	bl	e214 <sc_send_public_key>
	if (err) {
    f76a:	b920      	cbnz	r0, f776 <bt_smp_pkey_ready+0x9a>
    f76c:	4620      	mov	r0, r4
    f76e:	f7ff fee9 	bl	f544 <smp_public_key_slave.part.11>
		if (err) {
    f772:	2800      	cmp	r0, #0
    f774:	d0cf      	beq.n	f716 <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
    f776:	4601      	mov	r1, r0
}
    f778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    f77c:	4808      	ldr	r0, [pc, #32]	; (f7a0 <bt_smp_pkey_ready+0xc4>)
    f77e:	f7ff baf7 	b.w	ed70 <smp_error>
    f782:	bf00      	nop
    f784:	20000ea4 	.word	0x20000ea4
    f788:	2000d75c 	.word	0x2000d75c
    f78c:	0002cff8 	.word	0x0002cff8
    f790:	0002d090 	.word	0x0002d090
    f794:	0002ffd2 	.word	0x0002ffd2
    f798:	000300e8 	.word	0x000300e8
    f79c:	20000ea5 	.word	0x20000ea5
    f7a0:	20000d10 	.word	0x20000d10
    f7a4:	20000da4 	.word	0x20000da4

0000f7a8 <smp_ident_addr_info>:
{
    f7a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    f7ac:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f7ae:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    f7b0:	783b      	ldrb	r3, [r7, #0]
{
    f7b2:	4605      	mov	r5, r0
    f7b4:	b36b      	cbz	r3, f812 <smp_ident_addr_info+0x6a>
	if (!bt_addr_le_is_identity(&req->addr)) {
    f7b6:	79bb      	ldrb	r3, [r7, #6]
    f7b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f7bc:	2bc0      	cmp	r3, #192	; 0xc0
    f7be:	d028      	beq.n	f812 <smp_ident_addr_info+0x6a>
		BT_ERR("Invalid identity %s for %s",
    f7c0:	4b53      	ldr	r3, [pc, #332]	; (f910 <smp_ident_addr_info+0x168>)
    f7c2:	681b      	ldr	r3, [r3, #0]
    f7c4:	0759      	lsls	r1, r3, #29
    f7c6:	d020      	beq.n	f80a <smp_ident_addr_info+0x62>
    f7c8:	2301      	movs	r3, #1
    f7ca:	f04f 0500 	mov.w	r5, #0
    f7ce:	4a51      	ldr	r2, [pc, #324]	; (f914 <smp_ident_addr_info+0x16c>)
    f7d0:	f363 0502 	bfi	r5, r3, #0, #3
    f7d4:	4b50      	ldr	r3, [pc, #320]	; (f918 <smp_ident_addr_info+0x170>)
    f7d6:	1a9b      	subs	r3, r3, r2
    f7d8:	08db      	lsrs	r3, r3, #3
    f7da:	f36f 05c5 	bfc	r5, #3, #3
    f7de:	4638      	mov	r0, r7
    f7e0:	f363 158f 	bfi	r5, r3, #6, #10
    f7e4:	f7f7 f858 	bl	6898 <bt_addr_le_str_real>
    f7e8:	f7f2 fc48 	bl	207c <log_strdup>
    f7ec:	4606      	mov	r6, r0
    f7ee:	f104 0048 	add.w	r0, r4, #72	; 0x48
    f7f2:	f7f7 f851 	bl	6898 <bt_addr_le_str_real>
    f7f6:	f7f2 fc41 	bl	207c <log_strdup>
    f7fa:	f8ad 5000 	strh.w	r5, [sp]
    f7fe:	4603      	mov	r3, r0
    f800:	4632      	mov	r2, r6
    f802:	4946      	ldr	r1, [pc, #280]	; (f91c <smp_ident_addr_info+0x174>)
    f804:	4846      	ldr	r0, [pc, #280]	; (f920 <smp_ident_addr_info+0x178>)
    f806:	f7f2 fad3 	bl	1db0 <log_3>
		return BT_SMP_ERR_INVALID_PARAMS;
    f80a:	200a      	movs	r0, #10
}
    f80c:	b002      	add	sp, #8
    f80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f812:	210b      	movs	r1, #11
    f814:	f105 0098 	add.w	r0, r5, #152	; 0x98
    f818:	f7fe fa44 	bl	dca4 <atomic_test_bit>
    f81c:	2800      	cmp	r0, #0
    f81e:	d052      	beq.n	f8c6 <smp_ident_addr_info+0x11e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    f820:	f104 0848 	add.w	r8, r4, #72	; 0x48
    f824:	4642      	mov	r2, r8
    f826:	7a21      	ldrb	r1, [r4, #8]
    f828:	2002      	movs	r0, #2
    f82a:	f000 fdcb 	bl	103c4 <bt_keys_get_type>
		if (!keys) {
    f82e:	4606      	mov	r6, r0
    f830:	b9e8      	cbnz	r0, f86e <smp_ident_addr_info+0xc6>
			BT_ERR("Unable to get keys for %s",
    f832:	4b37      	ldr	r3, [pc, #220]	; (f910 <smp_ident_addr_info+0x168>)
    f834:	681b      	ldr	r3, [r3, #0]
    f836:	075a      	lsls	r2, r3, #29
    f838:	d017      	beq.n	f86a <smp_ident_addr_info+0xc2>
    f83a:	2301      	movs	r3, #1
    f83c:	f04f 0400 	mov.w	r4, #0
    f840:	f363 0402 	bfi	r4, r3, #0, #3
    f844:	4a34      	ldr	r2, [pc, #208]	; (f918 <smp_ident_addr_info+0x170>)
    f846:	4b33      	ldr	r3, [pc, #204]	; (f914 <smp_ident_addr_info+0x16c>)
    f848:	1ad2      	subs	r2, r2, r3
    f84a:	08d2      	lsrs	r2, r2, #3
    f84c:	f360 04c5 	bfi	r4, r0, #3, #3
    f850:	4640      	mov	r0, r8
    f852:	f362 148f 	bfi	r4, r2, #6, #10
    f856:	f7f7 f81f 	bl	6898 <bt_addr_le_str_real>
    f85a:	f7f2 fc0f 	bl	207c <log_strdup>
    f85e:	4623      	mov	r3, r4
    f860:	4602      	mov	r2, r0
    f862:	492e      	ldr	r1, [pc, #184]	; (f91c <smp_ident_addr_info+0x174>)
    f864:	482f      	ldr	r0, [pc, #188]	; (f924 <smp_ident_addr_info+0x17c>)
    f866:	f7f2 fa8b 	bl	1d80 <log_2>
			return BT_SMP_ERR_UNSPECIFIED;
    f86a:	2008      	movs	r0, #8
    f86c:	e7ce      	b.n	f80c <smp_ident_addr_info+0x64>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    f86e:	78e3      	ldrb	r3, [r4, #3]
    f870:	2b00      	cmp	r3, #0
    f872:	d14a      	bne.n	f90a <smp_ident_addr_info+0x162>
			dst = &conn->le.resp_addr;
    f874:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    f878:	780b      	ldrb	r3, [r1, #0]
    f87a:	2b01      	cmp	r3, #1
    f87c:	d120      	bne.n	f8c0 <smp_ident_addr_info+0x118>
		if (bt_addr_le_is_rpa(dst)) {
    f87e:	798b      	ldrb	r3, [r1, #6]
    f880:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f884:	2b40      	cmp	r3, #64	; 0x40
    f886:	d11b      	bne.n	f8c0 <smp_ident_addr_info+0x118>
	memcpy(dst, src, sizeof(*dst));
    f888:	2206      	movs	r2, #6
    f88a:	3101      	adds	r1, #1
    f88c:	f106 0036 	add.w	r0, r6, #54	; 0x36
    f890:	f7f6 fafa 	bl	5e88 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    f894:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    f898:	b193      	cbz	r3, f8c0 <smp_ident_addr_info+0x118>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    f89a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    f89e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f8a2:	2bc0      	cmp	r3, #192	; 0xc0
    f8a4:	d00c      	beq.n	f8c0 <smp_ident_addr_info+0x118>
	memcpy(dst, src, sizeof(*dst));
    f8a6:	2207      	movs	r2, #7
    f8a8:	4639      	mov	r1, r7
    f8aa:	1c70      	adds	r0, r6, #1
    f8ac:	f7f6 faec 	bl	5e88 <memcpy>
    f8b0:	2207      	movs	r2, #7
    f8b2:	4639      	mov	r1, r7
    f8b4:	4640      	mov	r0, r8
    f8b6:	f7f6 fae7 	bl	5e88 <memcpy>
				bt_conn_identity_resolved(conn);
    f8ba:	4620      	mov	r0, r4
    f8bc:	f7fa f91e 	bl	9afc <bt_conn_identity_resolved>
		bt_id_add(keys);
    f8c0:	4630      	mov	r0, r6
    f8c2:	f7f7 fc81 	bl	71c8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    f8c6:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    f8ca:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f8ce:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    f8d0:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f8d4:	d504      	bpl.n	f8e0 <smp_ident_addr_info+0x138>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f8d6:	210a      	movs	r1, #10
    f8d8:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f8dc:	f7fe fe5a 	bl	e594 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f8e0:	78e3      	ldrb	r3, [r4, #3]
    f8e2:	b92b      	cbnz	r3, f8f0 <smp_ident_addr_info+0x148>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    f8e4:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    f8e8:	b913      	cbnz	r3, f8f0 <smp_ident_addr_info+0x148>
		bt_smp_distribute_keys(smp);
    f8ea:	4628      	mov	r0, r5
    f8ec:	f7fe fd24 	bl	e338 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    f8f0:	f8d5 0170 	ldr.w	r0, [r5, #368]	; 0x170
    f8f4:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    f8f8:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    f8fc:	b91c      	cbnz	r4, f906 <smp_ident_addr_info+0x15e>
		smp_pairing_complete(smp, 0);
    f8fe:	4621      	mov	r1, r4
    f900:	4628      	mov	r0, r5
    f902:	f7ff fa13 	bl	ed2c <smp_pairing_complete>
	return 0;
    f906:	2000      	movs	r0, #0
    f908:	e780      	b.n	f80c <smp_ident_addr_info+0x64>
			dst = &conn->le.init_addr;
    f90a:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    f90e:	e7b3      	b.n	f878 <smp_ident_addr_info+0xd0>
    f910:	2000d75c 	.word	0x2000d75c
    f914:	0002cff8 	.word	0x0002cff8
    f918:	0002d090 	.word	0x0002d090
    f91c:	0002ff7d 	.word	0x0002ff7d
    f920:	0003036c 	.word	0x0003036c
    f924:	0003038b 	.word	0x0003038b

0000f928 <smp_pairing_rsp>:
{
    f928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    f92c:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f92e:	78eb      	ldrb	r3, [r5, #3]
    f930:	3b07      	subs	r3, #7
    f932:	2b09      	cmp	r3, #9
{
    f934:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f936:	d903      	bls.n	f940 <smp_pairing_rsp+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    f938:	2506      	movs	r5, #6
}
    f93a:	4628      	mov	r0, r5
    f93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
    f940:	792a      	ldrb	r2, [r5, #4]
    f942:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
	struct bt_conn *conn = smp->chan.chan.conn;
    f946:	6807      	ldr	r7, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    f948:	4013      	ands	r3, r2
    f94a:	f880 3171 	strb.w	r3, [r0, #369]	; 0x171
	smp->remote_dist &= rsp->resp_key_dist;
    f94e:	796a      	ldrb	r2, [r5, #5]
    f950:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
    f954:	4013      	ands	r3, r2
    f956:	f880 3172 	strb.w	r3, [r0, #370]	; 0x172
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    f95a:	2302      	movs	r3, #2
    f95c:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    f960:	2206      	movs	r2, #6
    f962:	4629      	mov	r1, r5
    f964:	30a5      	adds	r0, #165	; 0xa5
    f966:	f7f6 fa8f 	bl	5e88 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    f96a:	78ab      	ldrb	r3, [r5, #2]
    f96c:	071a      	lsls	r2, r3, #28
    f96e:	f104 0698 	add.w	r6, r4, #152	; 0x98
    f972:	d507      	bpl.n	f984 <smp_pairing_rsp+0x5c>
    f974:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    f978:	071b      	lsls	r3, r3, #28
    f97a:	d503      	bpl.n	f984 <smp_pairing_rsp+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    f97c:	2105      	movs	r1, #5
    f97e:	4630      	mov	r0, r6
    f980:	f7fe fe08 	bl	e594 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    f984:	78ab      	ldrb	r3, [r5, #2]
    f986:	0698      	lsls	r0, r3, #26
    f988:	d507      	bpl.n	f99a <smp_pairing_rsp+0x72>
    f98a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    f98e:	0699      	lsls	r1, r3, #26
    f990:	d503      	bpl.n	f99a <smp_pairing_rsp+0x72>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    f992:	2112      	movs	r1, #18
    f994:	4630      	mov	r0, r6
    f996:	f7fe fdfd 	bl	e594 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    f99a:	78ab      	ldrb	r3, [r5, #2]
    f99c:	07da      	lsls	r2, r3, #31
    f99e:	d507      	bpl.n	f9b0 <smp_pairing_rsp+0x88>
    f9a0:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    f9a4:	07db      	lsls	r3, r3, #31
    f9a6:	d503      	bpl.n	f9b0 <smp_pairing_rsp+0x88>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    f9a8:	210b      	movs	r1, #11
    f9aa:	4630      	mov	r0, r6
    f9ac:	f7fe fdf2 	bl	e594 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f9b0:	2105      	movs	r1, #5
    f9b2:	4630      	mov	r0, r6
    f9b4:	f7fe f976 	bl	dca4 <atomic_test_bit>
    f9b8:	f895 8000 	ldrb.w	r8, [r5]
    f9bc:	bba0      	cbnz	r0, fa28 <smp_pairing_rsp+0x100>
	smp->method = legacy_get_pair_method(smp, remote_io);
    f9be:	4641      	mov	r1, r8
    f9c0:	4620      	mov	r0, r4
    f9c2:	f7fe fb53 	bl	e06c <legacy_get_pair_method>
    f9c6:	4605      	mov	r5, r0
    f9c8:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f9cc:	b990      	cbnz	r0, f9f4 <smp_pairing_rsp+0xcc>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f9ce:	210d      	movs	r1, #13
    f9d0:	4630      	mov	r0, r6
    f9d2:	f7fe f967 	bl	dca4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f9d6:	b168      	cbz	r0, f9f4 <smp_pairing_rsp+0xcc>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f9d8:	4f3a      	ldr	r7, [pc, #232]	; (fac4 <smp_pairing_rsp+0x19c>)
    f9da:	683b      	ldr	r3, [r7, #0]
    f9dc:	b153      	cbz	r3, f9f4 <smp_pairing_rsp+0xcc>
	    bt_auth && bt_auth->pairing_confirm) {
    f9de:	691b      	ldr	r3, [r3, #16]
    f9e0:	b143      	cbz	r3, f9f4 <smp_pairing_rsp+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f9e2:	4630      	mov	r0, r6
    f9e4:	2109      	movs	r1, #9
    f9e6:	f7fe fdd5 	bl	e594 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    f9ea:	683b      	ldr	r3, [r7, #0]
    f9ec:	6820      	ldr	r0, [r4, #0]
    f9ee:	691b      	ldr	r3, [r3, #16]
    f9f0:	4798      	blx	r3
		return 0;
    f9f2:	e7a2      	b.n	f93a <smp_pairing_rsp+0x12>
	ret = legacy_request_tk(smp);
    f9f4:	4620      	mov	r0, r4
    f9f6:	f7fe fff1 	bl	e9dc <legacy_request_tk>
	if (ret) {
    f9fa:	4605      	mov	r5, r0
    f9fc:	2800      	cmp	r0, #0
    f9fe:	d19c      	bne.n	f93a <smp_pairing_rsp+0x12>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    fa00:	2109      	movs	r1, #9
    fa02:	4630      	mov	r0, r6
    fa04:	f7fe f94e 	bl	dca4 <atomic_test_bit>
    fa08:	b948      	cbnz	r0, fa1e <smp_pairing_rsp+0xf6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    fa0a:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fa0e:	2103      	movs	r1, #3
    fa10:	f7fe fdc0 	bl	e594 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    fa14:	4620      	mov	r0, r4
}
    fa16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
    fa1a:	f7ff bd01 	b.w	f420 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    fa1e:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    fa20:	4630      	mov	r0, r6
    fa22:	f7fe fdb7 	bl	e594 <atomic_set_bit>
		return 0;
    fa26:	e788      	b.n	f93a <smp_pairing_rsp+0x12>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    fa28:	f1b8 0f04 	cmp.w	r8, #4
    fa2c:	d83c      	bhi.n	faa8 <smp_pairing_rsp+0x180>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    fa2e:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
    fa32:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
    fa36:	431d      	orrs	r5, r3
    fa38:	f015 0504 	ands.w	r5, r5, #4
    fa3c:	d007      	beq.n	fa4e <smp_pairing_rsp+0x126>
	return gen_method_sc[remote_io][get_io_capa()];
    fa3e:	f7fe f8ed 	bl	dc1c <get_io_capa>
    fa42:	4921      	ldr	r1, [pc, #132]	; (fac8 <smp_pairing_rsp+0x1a0>)
    fa44:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    fa48:	4488      	add	r8, r1
    fa4a:	f818 5000 	ldrb.w	r5, [r8, r0]
	smp->method = get_pair_method(smp, rsp->io_capability);
    fa4e:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    fa52:	7abb      	ldrb	r3, [r7, #10]
    fa54:	2b04      	cmp	r3, #4
    fa56:	d10a      	bne.n	fa6e <smp_pairing_rsp+0x146>
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    fa58:	b395      	cbz	r5, fac0 <smp_pairing_rsp+0x198>
	return min(req->max_key_size, rsp->max_key_size);
    fa5a:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
    fa5e:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
	     conn->required_sec_level == BT_SECURITY_FIPS) &&
    fa62:	4293      	cmp	r3, r2
    fa64:	bf28      	it	cs
    fa66:	4613      	movcs	r3, r2
    fa68:	2b10      	cmp	r3, #16
    fa6a:	f47f af65 	bne.w	f938 <smp_pairing_rsp+0x10>
	smp->local_dist &= SEND_KEYS_SC;
    fa6e:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    fa72:	f003 0304 	and.w	r3, r3, #4
    fa76:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	smp->remote_dist &= RECV_KEYS_SC;
    fa7a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    fa7e:	f003 0306 	and.w	r3, r3, #6
    fa82:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fa86:	b955      	cbnz	r5, fa9e <smp_pairing_rsp+0x176>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fa88:	210d      	movs	r1, #13
    fa8a:	4630      	mov	r0, r6
    fa8c:	f7fe f90a 	bl	dca4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fa90:	b128      	cbz	r0, fa9e <smp_pairing_rsp+0x176>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fa92:	4f0c      	ldr	r7, [pc, #48]	; (fac4 <smp_pairing_rsp+0x19c>)
    fa94:	683b      	ldr	r3, [r7, #0]
    fa96:	b113      	cbz	r3, fa9e <smp_pairing_rsp+0x176>
	    bt_auth && bt_auth->pairing_confirm) {
    fa98:	691b      	ldr	r3, [r3, #16]
    fa9a:	2b00      	cmp	r3, #0
    fa9c:	d1a1      	bne.n	f9e2 <smp_pairing_rsp+0xba>
	if (!sc_local_pkey_valid) {
    fa9e:	4b0b      	ldr	r3, [pc, #44]	; (facc <smp_pairing_rsp+0x1a4>)
    faa0:	781d      	ldrb	r5, [r3, #0]
    faa2:	b91d      	cbnz	r5, faac <smp_pairing_rsp+0x184>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    faa4:	2106      	movs	r1, #6
    faa6:	e7bb      	b.n	fa20 <smp_pairing_rsp+0xf8>
		return JUST_WORKS;
    faa8:	2500      	movs	r5, #0
    faaa:	e7d0      	b.n	fa4e <smp_pairing_rsp+0x126>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    faac:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fab0:	210c      	movs	r1, #12
    fab2:	f7fe fd6f 	bl	e594 <atomic_set_bit>
	return sc_send_public_key(smp);
    fab6:	4620      	mov	r0, r4
}
    fab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
    fabc:	f7fe bbaa 	b.w	e214 <sc_send_public_key>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    fac0:	2503      	movs	r5, #3
    fac2:	e73a      	b.n	f93a <smp_pairing_rsp+0x12>
    fac4:	2000309c 	.word	0x2000309c
    fac8:	00030221 	.word	0x00030221
    facc:	20000ea4 	.word	0x20000ea4

0000fad0 <smp_pairing_random>:
{
    fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fad4:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    fad6:	f100 08cb 	add.w	r8, r0, #203	; 0xcb
{
    fada:	b08d      	sub	sp, #52	; 0x34
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    fadc:	2210      	movs	r2, #16
    fade:	6889      	ldr	r1, [r1, #8]
    fae0:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fae2:	f104 0698 	add.w	r6, r4, #152	; 0x98
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    fae6:	f7f6 f9cf 	bl	5e88 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    faea:	2105      	movs	r1, #5
    faec:	4630      	mov	r0, r6
    faee:	f7fe f8d9 	bl	dca4 <atomic_test_bit>
    faf2:	f8d4 9000 	ldr.w	r9, [r4]
    faf6:	2800      	cmp	r0, #0
    faf8:	f040 808b 	bne.w	fc12 <smp_pairing_random+0x142>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    fafc:	f109 0356 	add.w	r3, r9, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    fb00:	f104 0adb 	add.w	sl, r4, #219	; 0xdb
    fb04:	af08      	add	r7, sp, #32
    fb06:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    fb08:	f109 034f 	add.w	r3, r9, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    fb0c:	9300      	str	r3, [sp, #0]
    fb0e:	9702      	str	r7, [sp, #8]
    fb10:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    fb14:	f104 029d 	add.w	r2, r4, #157	; 0x9d
    fb18:	4641      	mov	r1, r8
    fb1a:	4650      	mov	r0, sl
    fb1c:	f7ff fc2c 	bl	f378 <smp_c1>
	if (err) {
    fb20:	b108      	cbz	r0, fb26 <smp_pairing_random+0x56>
				return BT_SMP_ERR_UNSPECIFIED;
    fb22:	2508      	movs	r5, #8
    fb24:	e06f      	b.n	fc06 <smp_pairing_random+0x136>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    fb26:	2210      	movs	r2, #16
    fb28:	4639      	mov	r1, r7
    fb2a:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    fb2e:	f7f6 f984 	bl	5e3a <memcmp>
    fb32:	2800      	cmp	r0, #0
    fb34:	d16b      	bne.n	fc0e <smp_pairing_random+0x13e>
	    conn->role == BT_HCI_ROLE_MASTER) {
    fb36:	f899 5003 	ldrb.w	r5, [r9, #3]
    fb3a:	f104 0bbb 	add.w	fp, r4, #187	; 0xbb
	memcpy(out, r2, 8);
    fb3e:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fb40:	2d00      	cmp	r5, #0
    fb42:	d143      	bne.n	fbcc <smp_pairing_random+0xfc>
	memcpy(out, r2, 8);
    fb44:	4659      	mov	r1, fp
    fb46:	4638      	mov	r0, r7
    fb48:	f7f6 f99e 	bl	5e88 <memcpy>
	memcpy(out + 8, r1, 8);
    fb4c:	2208      	movs	r2, #8
    fb4e:	4641      	mov	r1, r8
    fb50:	a80a      	add	r0, sp, #40	; 0x28
    fb52:	f7f6 f999 	bl	5e88 <memcpy>
	return bt_encrypt_le(k, out, out);
    fb56:	463a      	mov	r2, r7
    fb58:	4639      	mov	r1, r7
    fb5a:	4650      	mov	r0, sl
    fb5c:	f00c fa4c 	bl	1bff8 <bt_encrypt_le>
		if (err) {
    fb60:	2800      	cmp	r0, #0
    fb62:	d1de      	bne.n	fb22 <smp_pairing_random+0x52>
		(void)memset(ediv, 0, sizeof(ediv));
    fb64:	2202      	movs	r2, #2
    fb66:	4629      	mov	r1, r5
    fb68:	a805      	add	r0, sp, #20
    fb6a:	f7f6 f9ba 	bl	5ee2 <memset>
		(void)memset(rand, 0, sizeof(rand));
    fb6e:	2208      	movs	r2, #8
    fb70:	4629      	mov	r1, r5
    fb72:	a806      	add	r0, sp, #24
    fb74:	f7f6 f9b5 	bl	5ee2 <memset>
	return min(req->max_key_size, rsp->max_key_size);
    fb78:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    fb7c:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    fb80:	429a      	cmp	r2, r3
    fb82:	bf94      	ite	ls
    fb84:	9200      	strls	r2, [sp, #0]
    fb86:	9300      	strhi	r3, [sp, #0]
    fb88:	a906      	add	r1, sp, #24
    fb8a:	463b      	mov	r3, r7
    fb8c:	aa05      	add	r2, sp, #20
    fb8e:	4648      	mov	r0, r9
    fb90:	f7f9 ffce 	bl	9b30 <bt_conn_le_start_encryption>
    fb94:	b1a8      	cbz	r0, fbc2 <smp_pairing_random+0xf2>
			BT_ERR("Failed to start encryption");
    fb96:	4b73      	ldr	r3, [pc, #460]	; (fd64 <smp_pairing_random+0x294>)
    fb98:	681b      	ldr	r3, [r3, #0]
    fb9a:	075b      	lsls	r3, r3, #29
    fb9c:	d0c1      	beq.n	fb22 <smp_pairing_random+0x52>
    fb9e:	2301      	movs	r3, #1
    fba0:	f04f 0200 	mov.w	r2, #0
    fba4:	f363 0202 	bfi	r2, r3, #0, #3
    fba8:	496f      	ldr	r1, [pc, #444]	; (fd68 <smp_pairing_random+0x298>)
    fbaa:	4b70      	ldr	r3, [pc, #448]	; (fd6c <smp_pairing_random+0x29c>)
    fbac:	4870      	ldr	r0, [pc, #448]	; (fd70 <smp_pairing_random+0x2a0>)
    fbae:	1a5b      	subs	r3, r3, r1
    fbb0:	f365 02c5 	bfi	r2, r5, #3, #3
    fbb4:	08db      	lsrs	r3, r3, #3
    fbb6:	f363 128f 	bfi	r2, r3, #6, #10
    fbba:	496e      	ldr	r1, [pc, #440]	; (fd74 <smp_pairing_random+0x2a4>)
    fbbc:	f7f2 f8cc 	bl	1d58 <log_1>
    fbc0:	e7af      	b.n	fb22 <smp_pairing_random+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fbc2:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    fbc4:	4630      	mov	r0, r6
    fbc6:	f7fe fce5 	bl	e594 <atomic_set_bit>
			return 0;
    fbca:	e01c      	b.n	fc06 <smp_pairing_random+0x136>
	memcpy(out, r2, 8);
    fbcc:	4641      	mov	r1, r8
    fbce:	4638      	mov	r0, r7
    fbd0:	f7f6 f95a 	bl	5e88 <memcpy>
	memcpy(out + 8, r1, 8);
    fbd4:	2208      	movs	r2, #8
    fbd6:	4659      	mov	r1, fp
    fbd8:	a80a      	add	r0, sp, #40	; 0x28
    fbda:	f7f6 f955 	bl	5e88 <memcpy>
	return bt_encrypt_le(k, out, out);
    fbde:	463a      	mov	r2, r7
    fbe0:	4639      	mov	r1, r7
    fbe2:	4650      	mov	r0, sl
    fbe4:	f00c fa08 	bl	1bff8 <bt_encrypt_le>
		if (err) {
    fbe8:	4605      	mov	r5, r0
    fbea:	2800      	cmp	r0, #0
    fbec:	d199      	bne.n	fb22 <smp_pairing_random+0x52>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    fbee:	2210      	movs	r2, #16
    fbf0:	4639      	mov	r1, r7
    fbf2:	4650      	mov	r0, sl
    fbf4:	f7f6 f948 	bl	5e88 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fbf8:	4630      	mov	r0, r6
    fbfa:	2101      	movs	r1, #1
    fbfc:	f7fe fcca 	bl	e594 <atomic_set_bit>
		smp_send_pairing_random(smp);
    fc00:	4620      	mov	r0, r4
    fc02:	f7fe fb42 	bl	e28a <smp_send_pairing_random>
}
    fc06:	4628      	mov	r0, r5
    fc08:	b00d      	add	sp, #52	; 0x34
    fc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
    fc0e:	2504      	movs	r5, #4
		return legacy_pairing_random(smp);
    fc10:	e7f9      	b.n	fc06 <smp_pairing_random+0x136>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    fc12:	f899 3003 	ldrb.w	r3, [r9, #3]
    fc16:	2b00      	cmp	r3, #0
    fc18:	d14e      	bne.n	fcb8 <smp_pairing_random+0x1e8>
		err = sc_smp_check_confirm(smp);
    fc1a:	4620      	mov	r0, r4
    fc1c:	f7fe f8e0 	bl	dde0 <sc_smp_check_confirm>
		if (err) {
    fc20:	4605      	mov	r5, r0
    fc22:	2800      	cmp	r0, #0
    fc24:	d1ef      	bne.n	fc06 <smp_pairing_random+0x136>
		switch (smp->method) {
    fc26:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    fc2a:	2b03      	cmp	r3, #3
    fc2c:	f63f af79 	bhi.w	fb22 <smp_pairing_random+0x52>
    fc30:	e8df f003 	tbb	[pc, r3]
    fc34:	021d1d36 	.word	0x021d1d36
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    fc38:	ab08      	add	r3, sp, #32
    fc3a:	9300      	str	r3, [sp, #0]
    fc3c:	f104 02bb 	add.w	r2, r4, #187	; 0xbb
    fc40:	4643      	mov	r3, r8
    fc42:	f104 01eb 	add.w	r1, r4, #235	; 0xeb
    fc46:	484c      	ldr	r0, [pc, #304]	; (fd78 <smp_pairing_random+0x2a8>)
    fc48:	f7fe f9b2 	bl	dfb0 <smp_g2>
    fc4c:	2800      	cmp	r0, #0
    fc4e:	f47f af68 	bne.w	fb22 <smp_pairing_random+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fc52:	4630      	mov	r0, r6
    fc54:	2109      	movs	r1, #9
    fc56:	f7fe fc9d 	bl	e594 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fc5a:	2108      	movs	r1, #8
    fc5c:	f7fe fc9a 	bl	e594 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    fc60:	4b46      	ldr	r3, [pc, #280]	; (fd7c <smp_pairing_random+0x2ac>)
    fc62:	9908      	ldr	r1, [sp, #32]
    fc64:	681b      	ldr	r3, [r3, #0]
    fc66:	6820      	ldr	r0, [r4, #0]
    fc68:	689b      	ldr	r3, [r3, #8]
    fc6a:	4798      	blx	r3
			return 0;
    fc6c:	e7cb      	b.n	fc06 <smp_pairing_random+0x136>
			smp->passkey_round++;
    fc6e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    fc72:	3301      	adds	r3, #1
    fc74:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20) {
    fc76:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    fc78:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
			if (smp->passkey_round == 20) {
    fc7c:	d010      	beq.n	fca0 <smp_pairing_random+0x1d0>
			if (bt_rand(smp->prnd, 16)) {
    fc7e:	2110      	movs	r1, #16
    fc80:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
    fc84:	f00c f99e 	bl	1bfc4 <bt_rand>
    fc88:	2800      	cmp	r0, #0
    fc8a:	f47f af4a 	bne.w	fb22 <smp_pairing_random+0x52>
			atomic_set_bit(&smp->allowed_cmds,
    fc8e:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fc92:	2103      	movs	r1, #3
    fc94:	f7fe fc7e 	bl	e594 <atomic_set_bit>
			smp_send_pairing_confirm(smp);
    fc98:	4620      	mov	r0, r4
    fc9a:	f7fe fb0f 	bl	e2bc <smp_send_pairing_confirm>
			return 0;
    fc9e:	e7b2      	b.n	fc06 <smp_pairing_random+0x136>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    fca0:	2107      	movs	r1, #7
    fca2:	4630      	mov	r0, r6
    fca4:	f7fd fffe 	bl	dca4 <atomic_test_bit>
    fca8:	b108      	cbz	r0, fcae <smp_pairing_random+0x1de>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fcaa:	2108      	movs	r1, #8
    fcac:	e78a      	b.n	fbc4 <smp_pairing_random+0xf4>
		return compute_and_send_master_dhcheck(smp);
    fcae:	4620      	mov	r0, r4
    fcb0:	f7fe fcc4 	bl	e63c <compute_and_send_master_dhcheck>
    fcb4:	4605      	mov	r5, r0
    fcb6:	e7a6      	b.n	fc06 <smp_pairing_random+0x136>
	switch (smp->method) {
    fcb8:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    fcbc:	2b03      	cmp	r3, #3
    fcbe:	f63f af30 	bhi.w	fb22 <smp_pairing_random+0x52>
    fcc2:	e8df f003 	tbb	[pc, r3]
    fcc6:	2719      	.short	0x2719
    fcc8:	0227      	.short	0x0227
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    fcca:	ab08      	add	r3, sp, #32
    fccc:	9300      	str	r3, [sp, #0]
    fcce:	4642      	mov	r2, r8
    fcd0:	f104 03bb 	add.w	r3, r4, #187	; 0xbb
    fcd4:	4928      	ldr	r1, [pc, #160]	; (fd78 <smp_pairing_random+0x2a8>)
    fcd6:	f104 00eb 	add.w	r0, r4, #235	; 0xeb
    fcda:	f7fe f969 	bl	dfb0 <smp_g2>
    fcde:	2800      	cmp	r0, #0
    fce0:	f47f af1f 	bne.w	fb22 <smp_pairing_random+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fce4:	2109      	movs	r1, #9
    fce6:	4630      	mov	r0, r6
    fce8:	f7fe fc54 	bl	e594 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    fcec:	4b23      	ldr	r3, [pc, #140]	; (fd7c <smp_pairing_random+0x2ac>)
    fcee:	9908      	ldr	r1, [sp, #32]
    fcf0:	681b      	ldr	r3, [r3, #0]
    fcf2:	6820      	ldr	r0, [r4, #0]
    fcf4:	689b      	ldr	r3, [r3, #8]
    fcf6:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    fcf8:	210d      	movs	r1, #13
    fcfa:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fcfe:	f7fe fc49 	bl	e594 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    fd02:	210e      	movs	r1, #14
    fd04:	4630      	mov	r0, r6
    fd06:	f7fe fc45 	bl	e594 <atomic_set_bit>
	smp_send_pairing_random(smp);
    fd0a:	4620      	mov	r0, r4
    fd0c:	f7fe fabd 	bl	e28a <smp_send_pairing_random>
	return 0;
    fd10:	2500      	movs	r5, #0
    fd12:	e778      	b.n	fc06 <smp_pairing_random+0x136>
		err = sc_smp_check_confirm(smp);
    fd14:	4620      	mov	r0, r4
    fd16:	f7fe f863 	bl	dde0 <sc_smp_check_confirm>
		if (err) {
    fd1a:	4605      	mov	r5, r0
    fd1c:	2800      	cmp	r0, #0
    fd1e:	f47f af72 	bne.w	fc06 <smp_pairing_random+0x136>
		atomic_set_bit(&smp->allowed_cmds,
    fd22:	f104 0794 	add.w	r7, r4, #148	; 0x94
    fd26:	2103      	movs	r1, #3
    fd28:	4638      	mov	r0, r7
    fd2a:	f7fe fc33 	bl	e594 <atomic_set_bit>
		smp_send_pairing_random(smp);
    fd2e:	4620      	mov	r0, r4
    fd30:	f7fe faab 	bl	e28a <smp_send_pairing_random>
		smp->passkey_round++;
    fd34:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    fd38:	3301      	adds	r3, #1
    fd3a:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
    fd3c:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    fd3e:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
		if (smp->passkey_round == 20) {
    fd42:	d105      	bne.n	fd50 <smp_pairing_random+0x280>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    fd44:	210d      	movs	r1, #13
    fd46:	4638      	mov	r0, r7
    fd48:	f7fe fc24 	bl	e594 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    fd4c:	210e      	movs	r1, #14
    fd4e:	e739      	b.n	fbc4 <smp_pairing_random+0xf4>
		if (bt_rand(smp->prnd, 16)) {
    fd50:	2110      	movs	r1, #16
    fd52:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
    fd56:	f00c f935 	bl	1bfc4 <bt_rand>
    fd5a:	2800      	cmp	r0, #0
    fd5c:	f43f af53 	beq.w	fc06 <smp_pairing_random+0x136>
    fd60:	e6df      	b.n	fb22 <smp_pairing_random+0x52>
    fd62:	bf00      	nop
    fd64:	2000d75c 	.word	0x2000d75c
    fd68:	0002cff8 	.word	0x0002cff8
    fd6c:	0002d090 	.word	0x0002d090
    fd70:	000303b9 	.word	0x000303b9
    fd74:	0002ff16 	.word	0x0002ff16
    fd78:	20000ea5 	.word	0x20000ea5
    fd7c:	2000309c 	.word	0x2000309c

0000fd80 <bt_smp_send_security_req>:
{
    fd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fd84:	4680      	mov	r8, r0
	smp = smp_chan_get(conn);
    fd86:	f7fe f9b1 	bl	e0ec <smp_chan_get>
	if (!smp) {
    fd8a:	4605      	mov	r5, r0
    fd8c:	b3d0      	cbz	r0, fe04 <bt_smp_send_security_req+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    fd8e:	f100 0698 	add.w	r6, r0, #152	; 0x98
    fd92:	2104      	movs	r1, #4
    fd94:	4630      	mov	r0, r6
    fd96:	f7fd ff85 	bl	dca4 <atomic_test_bit>
    fd9a:	bbb0      	cbnz	r0, fe0a <bt_smp_send_security_req+0x8a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fd9c:	2103      	movs	r1, #3
    fd9e:	4630      	mov	r0, r6
    fda0:	f7fd ff80 	bl	dca4 <atomic_test_bit>
    fda4:	bba0      	cbnz	r0, fe10 <bt_smp_send_security_req+0x90>
	if (!sec_level_reachable(conn)) {
    fda6:	f898 000a 	ldrb.w	r0, [r8, #10]
    fdaa:	f7fe f981 	bl	e0b0 <sec_level_reachable.isra.3>
    fdae:	b390      	cbz	r0, fe16 <bt_smp_send_security_req+0x96>
	if (_smp_init(smp) != 0) {
    fdb0:	4628      	mov	r0, r5
    fdb2:	f7fe fbfe 	bl	e5b2 <_smp_init>
    fdb6:	4604      	mov	r4, r0
    fdb8:	b120      	cbz	r0, fdc4 <bt_smp_send_security_req+0x44>
		return -ENOBUFS;
    fdba:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
    fdbe:	4620      	mov	r0, r4
    fdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    fdc4:	200b      	movs	r0, #11
    fdc6:	f7fe f9b9 	bl	e13c <smp_create_pdu.isra.6>
	if (!req_buf) {
    fdca:	4607      	mov	r7, r0
    fdcc:	2800      	cmp	r0, #0
    fdce:	d0f4      	beq.n	fdba <bt_smp_send_security_req+0x3a>
	req = net_buf_add(req_buf, sizeof(*req));
    fdd0:	2101      	movs	r1, #1
    fdd2:	3008      	adds	r0, #8
    fdd4:	f00e fb9a 	bl	1e50c <net_buf_simple_add>
    fdd8:	4681      	mov	r9, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    fdda:	2009      	movs	r0, #9
    fddc:	f7fd ff44 	bl	dc68 <get_auth>
    fde0:	4623      	mov	r3, r4
    fde2:	f889 0000 	strb.w	r0, [r9]
    fde6:	463a      	mov	r2, r7
    fde8:	4640      	mov	r0, r8
    fdea:	2106      	movs	r1, #6
    fdec:	f7fa ff06 	bl	abfc <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    fdf0:	4630      	mov	r0, r6
    fdf2:	210d      	movs	r1, #13
    fdf4:	f7fe fbce 	bl	e594 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    fdf8:	2101      	movs	r1, #1
    fdfa:	f105 0094 	add.w	r0, r5, #148	; 0x94
    fdfe:	f7fe fbc9 	bl	e594 <atomic_set_bit>
	return 0;
    fe02:	e7dc      	b.n	fdbe <bt_smp_send_security_req+0x3e>
		return -ENOTCONN;
    fe04:	f06f 0438 	mvn.w	r4, #56	; 0x38
    fe08:	e7d9      	b.n	fdbe <bt_smp_send_security_req+0x3e>
		return -EIO;
    fe0a:	f06f 0404 	mvn.w	r4, #4
    fe0e:	e7d6      	b.n	fdbe <bt_smp_send_security_req+0x3e>
		return -EBUSY;
    fe10:	f06f 040f 	mvn.w	r4, #15
    fe14:	e7d3      	b.n	fdbe <bt_smp_send_security_req+0x3e>
		return -EINVAL;
    fe16:	f06f 0415 	mvn.w	r4, #21
    fe1a:	e7d0      	b.n	fdbe <bt_smp_send_security_req+0x3e>

0000fe1c <bt_smp_send_pairing_req>:
{
    fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe20:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    fe22:	f7fe f963 	bl	e0ec <smp_chan_get>
	if (!smp) {
    fe26:	4605      	mov	r5, r0
    fe28:	2800      	cmp	r0, #0
    fe2a:	d051      	beq.n	fed0 <bt_smp_send_pairing_req+0xb4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    fe2c:	f100 0798 	add.w	r7, r0, #152	; 0x98
    fe30:	2104      	movs	r1, #4
    fe32:	4638      	mov	r0, r7
    fe34:	f7fd ff36 	bl	dca4 <atomic_test_bit>
    fe38:	2800      	cmp	r0, #0
    fe3a:	d14c      	bne.n	fed6 <bt_smp_send_pairing_req+0xba>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fe3c:	2103      	movs	r1, #3
    fe3e:	4638      	mov	r0, r7
    fe40:	f7fd ff30 	bl	dca4 <atomic_test_bit>
    fe44:	2800      	cmp	r0, #0
    fe46:	d149      	bne.n	fedc <bt_smp_send_pairing_req+0xc0>
	if (!sec_level_reachable(conn)) {
    fe48:	7aa0      	ldrb	r0, [r4, #10]
    fe4a:	f7fe f931 	bl	e0b0 <sec_level_reachable.isra.3>
    fe4e:	2800      	cmp	r0, #0
    fe50:	d047      	beq.n	fee2 <bt_smp_send_pairing_req+0xc6>
	if (_smp_init(smp)) {
    fe52:	4628      	mov	r0, r5
    fe54:	f7fe fbad 	bl	e5b2 <_smp_init>
    fe58:	4604      	mov	r4, r0
    fe5a:	b120      	cbz	r0, fe66 <bt_smp_send_pairing_req+0x4a>
		return -ENOBUFS;
    fe5c:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
    fe60:	4620      	mov	r0, r4
    fe62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    fe66:	2001      	movs	r0, #1
    fe68:	f7fe f968 	bl	e13c <smp_create_pdu.isra.6>
	if (!req_buf) {
    fe6c:	4680      	mov	r8, r0
    fe6e:	2800      	cmp	r0, #0
    fe70:	d0f4      	beq.n	fe5c <bt_smp_send_pairing_req+0x40>
	req = net_buf_add(req_buf, sizeof(*req));
    fe72:	2106      	movs	r1, #6
    fe74:	3008      	adds	r0, #8
    fe76:	f00e fb49 	bl	1e50c <net_buf_simple_add>
    fe7a:	4606      	mov	r6, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    fe7c:	2009      	movs	r0, #9
    fe7e:	f7fd fef3 	bl	dc68 <get_auth>
    fe82:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    fe84:	f7fd feca 	bl	dc1c <get_io_capa>
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    fe88:	2310      	movs	r3, #16
    fe8a:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
    fe8c:	2205      	movs	r2, #5
	req->resp_key_dist = RECV_KEYS;
    fe8e:	2307      	movs	r3, #7
	req->io_capability = get_io_capa();
    fe90:	7030      	strb	r0, [r6, #0]
	req->init_key_dist = SEND_KEYS;
    fe92:	7132      	strb	r2, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
    fe94:	7173      	strb	r3, [r6, #5]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    fe96:	7074      	strb	r4, [r6, #1]
	smp->remote_dist = RECV_KEYS;
    fe98:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    fe9c:	2301      	movs	r3, #1
    fe9e:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	smp->local_dist = SEND_KEYS;
    fea2:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
	memcpy(smp->preq + 1, req, sizeof(*req));
    fea6:	4631      	mov	r1, r6
    fea8:	2206      	movs	r2, #6
    feaa:	f105 009e 	add.w	r0, r5, #158	; 0x9e
    feae:	f7f5 ffeb 	bl	5e88 <memcpy>
	smp_send(smp, req_buf, NULL);
    feb2:	4622      	mov	r2, r4
    feb4:	4641      	mov	r1, r8
    feb6:	4628      	mov	r0, r5
    feb8:	f7fe f97e 	bl	e1b8 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    febc:	f105 0094 	add.w	r0, r5, #148	; 0x94
    fec0:	2102      	movs	r1, #2
    fec2:	f7fe fb67 	bl	e594 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    fec6:	2103      	movs	r1, #3
    fec8:	4638      	mov	r0, r7
    feca:	f7fe fb63 	bl	e594 <atomic_set_bit>
	return 0;
    fece:	e7c7      	b.n	fe60 <bt_smp_send_pairing_req+0x44>
		return -ENOTCONN;
    fed0:	f06f 0438 	mvn.w	r4, #56	; 0x38
    fed4:	e7c4      	b.n	fe60 <bt_smp_send_pairing_req+0x44>
		return -EIO;
    fed6:	f06f 0404 	mvn.w	r4, #4
    feda:	e7c1      	b.n	fe60 <bt_smp_send_pairing_req+0x44>
		return -EBUSY;
    fedc:	f06f 040f 	mvn.w	r4, #15
    fee0:	e7be      	b.n	fe60 <bt_smp_send_pairing_req+0x44>
		return -EINVAL;
    fee2:	f06f 0415 	mvn.w	r4, #21
    fee6:	e7bb      	b.n	fe60 <bt_smp_send_pairing_req+0x44>

0000fee8 <smp_security_request>:
{
    fee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    feea:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    feec:	6804      	ldr	r4, [r0, #0]
    feee:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
    fef0:	4b45      	ldr	r3, [pc, #276]	; (10008 <__kernel_ram_size+0x8>)
    fef2:	781b      	ldrb	r3, [r3, #0]
{
    fef4:	4606      	mov	r6, r0
	if (sc_supported) {
    fef6:	b153      	cbz	r3, ff0e <smp_security_request+0x26>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    fef8:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    fefc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    fefe:	b14b      	cbz	r3, ff14 <smp_security_request+0x2c>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    ff00:	895b      	ldrh	r3, [r3, #10]
    ff02:	f003 0324 	and.w	r3, r3, #36	; 0x24
    ff06:	2b00      	cmp	r3, #0
    ff08:	d04b      	beq.n	ffa2 <smp_security_request+0xba>
	if (!conn->le.keys) {
    ff0a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ff0c:	e014      	b.n	ff38 <smp_security_request+0x50>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    ff0e:	f005 0507 	and.w	r5, r5, #7
    ff12:	e7f3      	b.n	fefc <smp_security_request+0x14>
					     &conn->le.dst);
    ff14:	f104 0748 	add.w	r7, r4, #72	; 0x48
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    ff18:	463a      	mov	r2, r7
    ff1a:	7a21      	ldrb	r1, [r4, #8]
    ff1c:	2020      	movs	r0, #32
    ff1e:	f000 fa39 	bl	10394 <bt_keys_find>
    ff22:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    ff24:	2800      	cmp	r0, #0
    ff26:	d1f0      	bne.n	ff0a <smp_security_request+0x22>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    ff28:	463a      	mov	r2, r7
    ff2a:	7a21      	ldrb	r1, [r4, #8]
    ff2c:	2004      	movs	r0, #4
    ff2e:	f000 fa31 	bl	10394 <bt_keys_find>
    ff32:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    ff34:	2800      	cmp	r0, #0
    ff36:	d034      	beq.n	ffa2 <smp_security_request+0xba>
	if ((auth & BT_SMP_AUTH_MITM) &&
    ff38:	076a      	lsls	r2, r5, #29
    ff3a:	d539      	bpl.n	ffb0 <smp_security_request+0xc8>
    ff3c:	7a47      	ldrb	r7, [r0, #9]
    ff3e:	f017 0701 	ands.w	r7, r7, #1
    ff42:	d135      	bne.n	ffb0 <smp_security_request+0xc8>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    ff44:	f7fd fe6a 	bl	dc1c <get_io_capa>
    ff48:	4b30      	ldr	r3, [pc, #192]	; (1000c <__kernel_ram_size+0xc>)
    ff4a:	681b      	ldr	r3, [r3, #0]
    ff4c:	2803      	cmp	r0, #3
    ff4e:	f003 0307 	and.w	r3, r3, #7
    ff52:	d012      	beq.n	ff7a <smp_security_request+0x92>
			BT_INFO("New auth requirements: 0x%x, repairing",
    ff54:	2b02      	cmp	r3, #2
    ff56:	d924      	bls.n	ffa2 <smp_security_request+0xba>
    ff58:	f04f 0300 	mov.w	r3, #0
    ff5c:	2203      	movs	r2, #3
    ff5e:	f362 0302 	bfi	r3, r2, #0, #3
    ff62:	f367 03c5 	bfi	r3, r7, #3, #3
    ff66:	492a      	ldr	r1, [pc, #168]	; (10010 <__kernel_ram_size+0x10>)
    ff68:	4a2a      	ldr	r2, [pc, #168]	; (10014 <__kernel_ram_size+0x14>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    ff6a:	482b      	ldr	r0, [pc, #172]	; (10018 <__kernel_ram_size+0x18>)
    ff6c:	1a52      	subs	r2, r2, r1
    ff6e:	08d2      	lsrs	r2, r2, #3
    ff70:	f362 138f 	bfi	r3, r2, #6, #10
    ff74:	4929      	ldr	r1, [pc, #164]	; (1001c <__kernel_ram_size+0x1c>)
    ff76:	462a      	mov	r2, r5
    ff78:	e011      	b.n	ff9e <smp_security_request+0xb6>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    ff7a:	2b01      	cmp	r3, #1
    ff7c:	d911      	bls.n	ffa2 <smp_security_request+0xba>
    ff7e:	2202      	movs	r2, #2
    ff80:	f04f 0300 	mov.w	r3, #0
    ff84:	f362 0302 	bfi	r3, r2, #0, #3
    ff88:	4921      	ldr	r1, [pc, #132]	; (10010 <__kernel_ram_size+0x10>)
    ff8a:	4a22      	ldr	r2, [pc, #136]	; (10014 <__kernel_ram_size+0x14>)
    ff8c:	4824      	ldr	r0, [pc, #144]	; (10020 <__kernel_ram_size+0x20>)
    ff8e:	1a52      	subs	r2, r2, r1
    ff90:	08d2      	lsrs	r2, r2, #3
    ff92:	f367 03c5 	bfi	r3, r7, #3, #3
    ff96:	4921      	ldr	r1, [pc, #132]	; (1001c <__kernel_ram_size+0x1c>)
    ff98:	f362 138f 	bfi	r3, r2, #6, #10
    ff9c:	462a      	mov	r2, r5
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    ff9e:	f7f1 feef 	bl	1d80 <log_2>
	if (bt_smp_send_pairing_req(conn) < 0) {
    ffa2:	4620      	mov	r0, r4
    ffa4:	f7ff ff3a 	bl	fe1c <bt_smp_send_pairing_req>
    ffa8:	2800      	cmp	r0, #0
    ffaa:	db22      	blt.n	fff2 <smp_security_request+0x10a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    ffac:	210d      	movs	r1, #13
    ffae:	e024      	b.n	fffa <smp_security_request+0x112>
	if ((auth & BT_SMP_AUTH_SC) &&
    ffb0:	072b      	lsls	r3, r5, #28
    ffb2:	d511      	bpl.n	ffd8 <smp_security_request+0xf0>
    ffb4:	8943      	ldrh	r3, [r0, #10]
    ffb6:	f013 0220 	ands.w	r2, r3, #32
    ffba:	d10d      	bne.n	ffd8 <smp_security_request+0xf0>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    ffbc:	4b13      	ldr	r3, [pc, #76]	; (1000c <__kernel_ram_size+0xc>)
    ffbe:	681b      	ldr	r3, [r3, #0]
    ffc0:	f003 0307 	and.w	r3, r3, #7
    ffc4:	2b02      	cmp	r3, #2
    ffc6:	d9ec      	bls.n	ffa2 <smp_security_request+0xba>
    ffc8:	f04f 0300 	mov.w	r3, #0
    ffcc:	2103      	movs	r1, #3
    ffce:	f361 0302 	bfi	r3, r1, #0, #3
    ffd2:	f362 03c5 	bfi	r3, r2, #3, #3
    ffd6:	e7c6      	b.n	ff66 <smp_security_request+0x7e>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    ffd8:	7a03      	ldrb	r3, [r0, #8]
    ffda:	9300      	str	r3, [sp, #0]
    ffdc:	f100 0214 	add.w	r2, r0, #20
    ffe0:	f100 0316 	add.w	r3, r0, #22
    ffe4:	f100 010c 	add.w	r1, r0, #12
    ffe8:	4620      	mov	r0, r4
    ffea:	f7f9 fda1 	bl	9b30 <bt_conn_le_start_encryption>
    ffee:	2800      	cmp	r0, #0
    fff0:	da02      	bge.n	fff8 <smp_security_request+0x110>
		return BT_SMP_ERR_UNSPECIFIED;
    fff2:	2008      	movs	r0, #8
}
    fff4:	b003      	add	sp, #12
    fff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fff8:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    fffa:	f106 0098 	add.w	r0, r6, #152	; 0x98
    fffe:	f7fe fac9 	bl	e594 <atomic_set_bit>
	return 0;
   10002:	2000      	movs	r0, #0
   10004:	e7f6      	b.n	fff4 <smp_security_request+0x10c>
   10006:	bf00      	nop
   10008:	20000ee5 	.word	0x20000ee5
   1000c:	2000d75c 	.word	0x2000d75c
   10010:	0002cff8 	.word	0x0002cff8
   10014:	0002d090 	.word	0x0002d090
   10018:	000303fd 	.word	0x000303fd
   1001c:	0002ffa2 	.word	0x0002ffa2
   10020:	00030428 	.word	0x00030428

00010024 <bt_smp_sign_verify>:
{
   10024:	b5f0      	push	{r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   10026:	898b      	ldrh	r3, [r1, #12]
   10028:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1002a:	6889      	ldr	r1, [r1, #8]
{
   1002c:	4605      	mov	r5, r0
   1002e:	b085      	sub	sp, #20
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   10030:	3b0c      	subs	r3, #12
   10032:	4419      	add	r1, r3
   10034:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   10036:	f105 0648 	add.w	r6, r5, #72	; 0x48
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1003a:	a801      	add	r0, sp, #4
   1003c:	f7f5 ff24 	bl	5e88 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   10040:	7a29      	ldrb	r1, [r5, #8]
   10042:	4632      	mov	r2, r6
   10044:	2010      	movs	r0, #16
   10046:	f000 f9a5 	bl	10394 <bt_keys_find>
	if (!keys) {
   1004a:	4605      	mov	r5, r0
   1004c:	b9f0      	cbnz	r0, 1008c <bt_smp_sign_verify+0x68>
		BT_ERR("Unable to find Remote CSRK for %s",
   1004e:	4b40      	ldr	r3, [pc, #256]	; (10150 <bt_smp_sign_verify+0x12c>)
   10050:	681b      	ldr	r3, [r3, #0]
   10052:	0759      	lsls	r1, r3, #29
   10054:	d017      	beq.n	10086 <bt_smp_sign_verify+0x62>
   10056:	2301      	movs	r3, #1
   10058:	f04f 0400 	mov.w	r4, #0
   1005c:	f363 0402 	bfi	r4, r3, #0, #3
   10060:	4a3c      	ldr	r2, [pc, #240]	; (10154 <bt_smp_sign_verify+0x130>)
   10062:	4b3d      	ldr	r3, [pc, #244]	; (10158 <bt_smp_sign_verify+0x134>)
   10064:	1ad2      	subs	r2, r2, r3
   10066:	08d2      	lsrs	r2, r2, #3
   10068:	f360 04c5 	bfi	r4, r0, #3, #3
   1006c:	4630      	mov	r0, r6
   1006e:	f362 148f 	bfi	r4, r2, #6, #10
   10072:	f7f6 fc11 	bl	6898 <bt_addr_le_str_real>
   10076:	f7f2 f801 	bl	207c <log_strdup>
   1007a:	4623      	mov	r3, r4
   1007c:	4602      	mov	r2, r0
   1007e:	4937      	ldr	r1, [pc, #220]	; (1015c <bt_smp_sign_verify+0x138>)
   10080:	4837      	ldr	r0, [pc, #220]	; (10160 <bt_smp_sign_verify+0x13c>)
   10082:	f7f1 fe7d 	bl	1d80 <log_2>
		return -ENOENT;
   10086:	f06f 0001 	mvn.w	r0, #1
   1008a:	e05e      	b.n	1014a <bt_smp_sign_verify+0x126>
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1008c:	a904      	add	r1, sp, #16
   1008e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   10090:	f841 3d10 	str.w	r3, [r1, #-16]!
   10094:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   10096:	68a0      	ldr	r0, [r4, #8]
   10098:	3b0c      	subs	r3, #12
   1009a:	2204      	movs	r2, #4
   1009c:	4418      	add	r0, r3
   1009e:	f7f5 fef3 	bl	5e88 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   100a2:	89a2      	ldrh	r2, [r4, #12]
   100a4:	68a1      	ldr	r1, [r4, #8]
   100a6:	3a0c      	subs	r2, #12
   100a8:	b292      	uxth	r2, r2
   100aa:	f105 0050 	add.w	r0, r5, #80	; 0x50
   100ae:	f7fd fe21 	bl	dcf4 <smp_sign_buf>
	if (err) {
   100b2:	4607      	mov	r7, r0
   100b4:	b1f0      	cbz	r0, 100f4 <bt_smp_sign_verify+0xd0>
		BT_ERR("Unable to create signature for %s",
   100b6:	4b26      	ldr	r3, [pc, #152]	; (10150 <bt_smp_sign_verify+0x12c>)
   100b8:	681b      	ldr	r3, [r3, #0]
   100ba:	075a      	lsls	r2, r3, #29
   100bc:	d017      	beq.n	100ee <bt_smp_sign_verify+0xca>
   100be:	2301      	movs	r3, #1
   100c0:	f04f 0400 	mov.w	r4, #0
   100c4:	f363 0402 	bfi	r4, r3, #0, #3
   100c8:	4a22      	ldr	r2, [pc, #136]	; (10154 <bt_smp_sign_verify+0x130>)
   100ca:	4b23      	ldr	r3, [pc, #140]	; (10158 <bt_smp_sign_verify+0x134>)
   100cc:	1ad2      	subs	r2, r2, r3
   100ce:	08d2      	lsrs	r2, r2, #3
   100d0:	f36f 04c5 	bfc	r4, #3, #3
   100d4:	4630      	mov	r0, r6
   100d6:	f362 148f 	bfi	r4, r2, #6, #10
   100da:	f7f6 fbdd 	bl	6898 <bt_addr_le_str_real>
   100de:	f7f1 ffcd 	bl	207c <log_strdup>
   100e2:	4623      	mov	r3, r4
   100e4:	4602      	mov	r2, r0
   100e6:	491d      	ldr	r1, [pc, #116]	; (1015c <bt_smp_sign_verify+0x138>)
   100e8:	481e      	ldr	r0, [pc, #120]	; (10164 <bt_smp_sign_verify+0x140>)
   100ea:	f7f1 fe49 	bl	1d80 <log_2>
		return -EIO;
   100ee:	f06f 0004 	mvn.w	r0, #4
   100f2:	e02a      	b.n	1014a <bt_smp_sign_verify+0x126>
   100f4:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   100f6:	68a1      	ldr	r1, [r4, #8]
   100f8:	3b0c      	subs	r3, #12
   100fa:	220c      	movs	r2, #12
   100fc:	4419      	add	r1, r3
   100fe:	a801      	add	r0, sp, #4
   10100:	f7f5 fe9b 	bl	5e3a <memcmp>
   10104:	b1f0      	cbz	r0, 10144 <bt_smp_sign_verify+0x120>
		BT_ERR("Unable to verify signature for %s",
   10106:	4b12      	ldr	r3, [pc, #72]	; (10150 <bt_smp_sign_verify+0x12c>)
   10108:	681b      	ldr	r3, [r3, #0]
   1010a:	075b      	lsls	r3, r3, #29
   1010c:	d017      	beq.n	1013e <bt_smp_sign_verify+0x11a>
   1010e:	2301      	movs	r3, #1
   10110:	f04f 0400 	mov.w	r4, #0
   10114:	f363 0402 	bfi	r4, r3, #0, #3
   10118:	4a0e      	ldr	r2, [pc, #56]	; (10154 <bt_smp_sign_verify+0x130>)
   1011a:	4b0f      	ldr	r3, [pc, #60]	; (10158 <bt_smp_sign_verify+0x134>)
   1011c:	1ad2      	subs	r2, r2, r3
   1011e:	08d2      	lsrs	r2, r2, #3
   10120:	f367 04c5 	bfi	r4, r7, #3, #3
   10124:	4630      	mov	r0, r6
   10126:	f362 148f 	bfi	r4, r2, #6, #10
   1012a:	f7f6 fbb5 	bl	6898 <bt_addr_le_str_real>
   1012e:	f7f1 ffa5 	bl	207c <log_strdup>
   10132:	4623      	mov	r3, r4
   10134:	4602      	mov	r2, r0
   10136:	4909      	ldr	r1, [pc, #36]	; (1015c <bt_smp_sign_verify+0x138>)
   10138:	480b      	ldr	r0, [pc, #44]	; (10168 <bt_smp_sign_verify+0x144>)
   1013a:	f7f1 fe21 	bl	1d80 <log_2>
		return -EBADMSG;
   1013e:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   10142:	e002      	b.n	1014a <bt_smp_sign_verify+0x126>
	keys->remote_csrk.cnt++;
   10144:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   10146:	3301      	adds	r3, #1
   10148:	662b      	str	r3, [r5, #96]	; 0x60
}
   1014a:	b005      	add	sp, #20
   1014c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1014e:	bf00      	nop
   10150:	2000d75c 	.word	0x2000d75c
   10154:	0002d090 	.word	0x0002d090
   10158:	0002cff8 	.word	0x0002cff8
   1015c:	0002fff1 	.word	0x0002fff1
   10160:	00030196 	.word	0x00030196
   10164:	000301bc 	.word	0x000301bc
   10168:	000301e2 	.word	0x000301e2

0001016c <bt_smp_update_keys>:
{
   1016c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1016e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   10170:	f7fd ffbc 	bl	e0ec <smp_chan_get>
	if (!smp) {
   10174:	4605      	mov	r5, r0
   10176:	2800      	cmp	r0, #0
   10178:	d07e      	beq.n	10278 <bt_smp_update_keys+0x10c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1017a:	f100 0698 	add.w	r6, r0, #152	; 0x98
   1017e:	2103      	movs	r1, #3
   10180:	4630      	mov	r0, r6
   10182:	f7fd fd8f 	bl	dca4 <atomic_test_bit>
   10186:	2800      	cmp	r0, #0
   10188:	d076      	beq.n	10278 <bt_smp_update_keys+0x10c>
	if (conn->le.keys) {
   1018a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1018c:	b108      	cbz	r0, 10192 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1018e:	f000 f977 	bl	10480 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   10192:	f104 0748 	add.w	r7, r4, #72	; 0x48
   10196:	4639      	mov	r1, r7
   10198:	7a20      	ldrb	r0, [r4, #8]
   1019a:	f000 f8c3 	bl	10324 <bt_keys_get_addr>
   1019e:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
   101a0:	bb08      	cbnz	r0, 101e6 <bt_smp_update_keys+0x7a>
		BT_ERR("Unable to get keys for %s",
   101a2:	4b36      	ldr	r3, [pc, #216]	; (1027c <bt_smp_update_keys+0x110>)
   101a4:	681b      	ldr	r3, [r3, #0]
   101a6:	075b      	lsls	r3, r3, #29
   101a8:	d017      	beq.n	101da <bt_smp_update_keys+0x6e>
   101aa:	2301      	movs	r3, #1
   101ac:	f04f 0400 	mov.w	r4, #0
   101b0:	f363 0402 	bfi	r4, r3, #0, #3
   101b4:	4a32      	ldr	r2, [pc, #200]	; (10280 <bt_smp_update_keys+0x114>)
   101b6:	4b33      	ldr	r3, [pc, #204]	; (10284 <bt_smp_update_keys+0x118>)
   101b8:	1ad2      	subs	r2, r2, r3
   101ba:	08d2      	lsrs	r2, r2, #3
   101bc:	f360 04c5 	bfi	r4, r0, #3, #3
   101c0:	4638      	mov	r0, r7
   101c2:	f362 148f 	bfi	r4, r2, #6, #10
   101c6:	f7f6 fb67 	bl	6898 <bt_addr_le_str_real>
   101ca:	f7f1 ff57 	bl	207c <log_strdup>
   101ce:	4623      	mov	r3, r4
   101d0:	4602      	mov	r2, r0
   101d2:	492d      	ldr	r1, [pc, #180]	; (10288 <bt_smp_update_keys+0x11c>)
   101d4:	482d      	ldr	r0, [pc, #180]	; (1028c <bt_smp_update_keys+0x120>)
   101d6:	f7f1 fdd3 	bl	1d80 <log_2>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   101da:	4628      	mov	r0, r5
   101dc:	2108      	movs	r1, #8
}
   101de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   101e2:	f7fe bdc5 	b.w	ed70 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   101e6:	210c      	movs	r1, #12
   101e8:	4630      	mov	r0, r6
   101ea:	f7fd fd5b 	bl	dca4 <atomic_test_bit>
   101ee:	b120      	cbz	r0, 101fa <bt_smp_update_keys+0x8e>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   101f0:	6f22      	ldr	r2, [r4, #112]	; 0x70
   101f2:	7a53      	ldrb	r3, [r2, #9]
   101f4:	f043 0302 	orr.w	r3, r3, #2
   101f8:	7253      	strb	r3, [r2, #9]
   101fa:	6f22      	ldr	r2, [r4, #112]	; 0x70
	switch (smp->method) {
   101fc:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
   10200:	7a53      	ldrb	r3, [r2, #9]
   10202:	3901      	subs	r1, #1
   10204:	2902      	cmp	r1, #2
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10206:	bf94      	ite	ls
   10208:	f043 0301 	orrls.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1020c:	f023 0301 	bichi.w	r3, r3, #1
   10210:	7253      	strb	r3, [r2, #9]
	return min(req->max_key_size, rsp->max_key_size);
   10212:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   10216:	f895 10a1 	ldrb.w	r1, [r5, #161]	; 0xa1
   1021a:	428b      	cmp	r3, r1
   1021c:	bf28      	it	cs
   1021e:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   10220:	7213      	strb	r3, [r2, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10222:	2105      	movs	r1, #5
   10224:	4630      	mov	r0, r6
   10226:	f7fd fd3d 	bl	dca4 <atomic_test_bit>
   1022a:	6f23      	ldr	r3, [r4, #112]	; 0x70
		conn->le.keys->flags |= BT_KEYS_SC;
   1022c:	7a5a      	ldrb	r2, [r3, #9]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1022e:	b300      	cbz	r0, 10272 <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_SC;
   10230:	f042 0210 	orr.w	r2, r2, #16
   10234:	725a      	strb	r2, [r3, #9]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10236:	210b      	movs	r1, #11
   10238:	4630      	mov	r0, r6
   1023a:	f7fd fd33 	bl	dca4 <atomic_test_bit>
   1023e:	b1d8      	cbz	r0, 10278 <bt_smp_update_keys+0x10c>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   10240:	6f20      	ldr	r0, [r4, #112]	; 0x70
   10242:	2120      	movs	r1, #32
   10244:	f000 f918 	bl	10478 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   10248:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1024a:	f105 01db 	add.w	r1, r5, #219	; 0xdb
   1024e:	2210      	movs	r2, #16
   10250:	3016      	adds	r0, #22
   10252:	f7f5 fe19 	bl	5e88 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   10256:	6f20      	ldr	r0, [r4, #112]	; 0x70
   10258:	2208      	movs	r2, #8
   1025a:	2100      	movs	r1, #0
   1025c:	300c      	adds	r0, #12
   1025e:	f7f5 fe40 	bl	5ee2 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10262:	6f20      	ldr	r0, [r4, #112]	; 0x70
   10264:	2202      	movs	r2, #2
   10266:	2100      	movs	r1, #0
   10268:	3014      	adds	r0, #20
}
   1026a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1026e:	f7f5 be38 	b.w	5ee2 <memset>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   10272:	f022 0210 	bic.w	r2, r2, #16
   10276:	725a      	strb	r2, [r3, #9]
}
   10278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1027a:	bf00      	nop
   1027c:	2000d75c 	.word	0x2000d75c
   10280:	0002d090 	.word	0x0002d090
   10284:	0002cff8 	.word	0x0002cff8
   10288:	00030004 	.word	0x00030004
   1028c:	0003038b 	.word	0x0003038b

00010290 <bt_smp_get_tk>:
{
   10290:	b538      	push	{r3, r4, r5, lr}
   10292:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
   10294:	f7fd ff2a 	bl	e0ec <smp_chan_get>
	if (!smp) {
   10298:	4603      	mov	r3, r0
   1029a:	b908      	cbnz	r0, 102a0 <bt_smp_get_tk+0x10>
		return false;
   1029c:	2000      	movs	r0, #0
}
   1029e:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   102a0:	f100 0298 	add.w	r2, r0, #152	; 0x98
   102a4:	2103      	movs	r1, #3
   102a6:	4610      	mov	r0, r2
   102a8:	f7fd fcfc 	bl	dca4 <atomic_test_bit>
   102ac:	2800      	cmp	r0, #0
   102ae:	d0f5      	beq.n	1029c <bt_smp_get_tk+0xc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   102b0:	2101      	movs	r1, #1
   102b2:	4610      	mov	r0, r2
   102b4:	f7fd fcf6 	bl	dca4 <atomic_test_bit>
   102b8:	2800      	cmp	r0, #0
   102ba:	d0ef      	beq.n	1029c <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
   102bc:	f893 40a8 	ldrb.w	r4, [r3, #168]	; 0xa8
   102c0:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
   102c4:	4294      	cmp	r4, r2
   102c6:	bf28      	it	cs
   102c8:	4614      	movcs	r4, r2
	memcpy(tk, smp->tk, enc_size);
   102ca:	4622      	mov	r2, r4
   102cc:	f103 01db 	add.w	r1, r3, #219	; 0xdb
   102d0:	4628      	mov	r0, r5
   102d2:	f7f5 fdd9 	bl	5e88 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
   102d6:	2c0f      	cmp	r4, #15
   102d8:	d805      	bhi.n	102e6 <bt_smp_get_tk+0x56>
		(void)memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
   102da:	f1c4 0210 	rsb	r2, r4, #16
   102de:	2100      	movs	r1, #0
   102e0:	1928      	adds	r0, r5, r4
   102e2:	f7f5 fdfe 	bl	5ee2 <memset>
	return true;
   102e6:	2001      	movs	r0, #1
   102e8:	e7d9      	b.n	1029e <bt_smp_get_tk+0xe>
	...

000102ec <bt_smp_init>:
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

int bt_smp_init(void)
{
   102ec:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   102ee:	4b09      	ldr	r3, [pc, #36]	; (10314 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
		BT_ERR("SC Pair Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
   102f0:	4809      	ldr	r0, [pc, #36]	; (10318 <bt_smp_init+0x2c>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   102f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   102f6:	f003 0306 	and.w	r3, r3, #6
   102fa:	1f9a      	subs	r2, r3, #6
   102fc:	4253      	negs	r3, r2
   102fe:	4153      	adcs	r3, r2
   10300:	4a06      	ldr	r2, [pc, #24]	; (1031c <bt_smp_init+0x30>)
   10302:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
   10304:	f7fa fbfc 	bl	ab00 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
   10308:	4805      	ldr	r0, [pc, #20]	; (10320 <bt_smp_init+0x34>)
   1030a:	f7f9 facd 	bl	98a8 <bt_pub_key_gen>

	return smp_self_test();
}
   1030e:	2000      	movs	r0, #0
   10310:	bd08      	pop	{r3, pc}
   10312:	bf00      	nop
   10314:	2000cc80 	.word	0x2000cc80
   10318:	2000cf64 	.word	0x2000cf64
   1031c:	20000ee5 	.word	0x20000ee5
   10320:	2000cf84 	.word	0x2000cf84

00010324 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
   10324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10326:	4c11      	ldr	r4, [pc, #68]	; (1036c <bt_keys_get_addr+0x48>)
   10328:	7823      	ldrb	r3, [r4, #0]
   1032a:	4283      	cmp	r3, r0
{
   1032c:	4605      	mov	r5, r0
   1032e:	460e      	mov	r6, r1
   10330:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10332:	d00b      	beq.n	1034c <bt_keys_get_addr+0x28>
			return keys;
		}

		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   10334:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   10336:	2207      	movs	r2, #7
   10338:	4669      	mov	r1, sp
   1033a:	480d      	ldr	r0, [pc, #52]	; (10370 <bt_keys_get_addr+0x4c>)
   1033c:	9400      	str	r4, [sp, #0]
   1033e:	f8cd 4003 	str.w	r4, [sp, #3]
   10342:	f7f5 fd7a 	bl	5e3a <memcmp>
   10346:	b140      	cbz	r0, 1035a <bt_keys_get_addr+0x36>
		keys = &key_pool[i];
   10348:	4620      	mov	r0, r4
   1034a:	e00d      	b.n	10368 <bt_keys_get_addr+0x44>
   1034c:	2207      	movs	r2, #7
   1034e:	1c60      	adds	r0, r4, #1
   10350:	f7f5 fd73 	bl	5e3a <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10354:	2800      	cmp	r0, #0
   10356:	d1ed      	bne.n	10334 <bt_keys_get_addr+0x10>
   10358:	e7f6      	b.n	10348 <bt_keys_get_addr+0x24>
			keys->id = id;
   1035a:	703d      	strb	r5, [r7, #0]
	memcpy(dst, src, sizeof(*dst));
   1035c:	2207      	movs	r2, #7
   1035e:	4631      	mov	r1, r6
   10360:	4803      	ldr	r0, [pc, #12]	; (10370 <bt_keys_get_addr+0x4c>)
   10362:	f7f5 fd91 	bl	5e88 <memcpy>
		keys = &key_pool[i];
   10366:	4801      	ldr	r0, [pc, #4]	; (1036c <bt_keys_get_addr+0x48>)
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   10368:	b003      	add	sp, #12
   1036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1036c:	20000ee8 	.word	0x20000ee8
   10370:	20000ee9 	.word	0x20000ee9

00010374 <bt_keys_foreach>:
		     void *data)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   10374:	4b06      	ldr	r3, [pc, #24]	; (10390 <bt_keys_foreach+0x1c>)
{
   10376:	b410      	push	{r4}
   10378:	460c      	mov	r4, r1
		if ((key_pool[i].keys & type)) {
   1037a:	8959      	ldrh	r1, [r3, #10]
   1037c:	4201      	tst	r1, r0
   1037e:	d004      	beq.n	1038a <bt_keys_foreach+0x16>
			func(&key_pool[i], data);
   10380:	4618      	mov	r0, r3
   10382:	4611      	mov	r1, r2
   10384:	4623      	mov	r3, r4
		}
	}
}
   10386:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   10388:	4718      	bx	r3
}
   1038a:	bc10      	pop	{r4}
   1038c:	4770      	bx	lr
   1038e:	bf00      	nop
   10390:	20000ee8 	.word	0x20000ee8

00010394 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, u8_t id, const bt_addr_le_t *addr)
{
   10394:	b538      	push	{r3, r4, r5, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   10396:	4c0a      	ldr	r4, [pc, #40]	; (103c0 <bt_keys_find+0x2c>)
   10398:	8963      	ldrh	r3, [r4, #10]
   1039a:	4018      	ands	r0, r3
{
   1039c:	460d      	mov	r5, r1
   1039e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   103a0:	d00a      	beq.n	103b8 <bt_keys_find+0x24>
   103a2:	7823      	ldrb	r3, [r4, #0]
   103a4:	42ab      	cmp	r3, r5
   103a6:	d108      	bne.n	103ba <bt_keys_find+0x26>
	return memcmp(a, b, sizeof(*a));
   103a8:	2207      	movs	r2, #7
   103aa:	1c60      	adds	r0, r4, #1
   103ac:	f7f5 fd45 	bl	5e3a <memcmp>
   103b0:	2800      	cmp	r0, #0
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   103b2:	bf0c      	ite	eq
   103b4:	4620      	moveq	r0, r4
   103b6:	2000      	movne	r0, #0
		}
	}

	return NULL;
}
   103b8:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   103ba:	2000      	movs	r0, #0
   103bc:	e7fc      	b.n	103b8 <bt_keys_find+0x24>
   103be:	bf00      	nop
   103c0:	20000ee8 	.word	0x20000ee8

000103c4 <bt_keys_get_type>:

struct bt_keys *bt_keys_get_type(int type, u8_t id, const bt_addr_le_t *addr)
{
   103c4:	b570      	push	{r4, r5, r6, lr}
   103c6:	4604      	mov	r4, r0
   103c8:	460d      	mov	r5, r1
   103ca:	4616      	mov	r6, r2
	struct bt_keys *keys;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	keys = bt_keys_find(type, id, addr);
   103cc:	f7ff ffe2 	bl	10394 <bt_keys_find>
	if (keys) {
   103d0:	b938      	cbnz	r0, 103e2 <bt_keys_get_type+0x1e>
		return keys;
	}

	keys = bt_keys_get_addr(id, addr);
   103d2:	4631      	mov	r1, r6
   103d4:	4628      	mov	r0, r5
   103d6:	f7ff ffa5 	bl	10324 <bt_keys_get_addr>
	if (!keys) {
   103da:	b110      	cbz	r0, 103e2 <bt_keys_get_type+0x1e>
	return NULL;
}

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   103dc:	8943      	ldrh	r3, [r0, #10]
   103de:	431c      	orrs	r4, r3
   103e0:	8144      	strh	r4, [r0, #10]
}
   103e2:	bd70      	pop	{r4, r5, r6, pc}

000103e4 <bt_keys_find_irk>:
{
   103e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   103e6:	780b      	ldrb	r3, [r1, #0]
   103e8:	2b01      	cmp	r3, #1
   103ea:	4606      	mov	r6, r0
   103ec:	460d      	mov	r5, r1
   103ee:	d001      	beq.n	103f4 <bt_keys_find_irk+0x10>
		return NULL;
   103f0:	2000      	movs	r0, #0
}
   103f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   103f4:	798b      	ldrb	r3, [r1, #6]
   103f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   103fa:	2b40      	cmp	r3, #64	; 0x40
   103fc:	d1f8      	bne.n	103f0 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   103fe:	4c13      	ldr	r4, [pc, #76]	; (1044c <bt_keys_find_irk+0x68>)
   10400:	8963      	ldrh	r3, [r4, #10]
   10402:	f013 0f02 	tst.w	r3, #2
   10406:	4627      	mov	r7, r4
   10408:	d00b      	beq.n	10422 <bt_keys_find_irk+0x3e>
		if (key_pool[i].id == id &&
   1040a:	7823      	ldrb	r3, [r4, #0]
   1040c:	4283      	cmp	r3, r0
   1040e:	d108      	bne.n	10422 <bt_keys_find_irk+0x3e>
	return memcmp(a, b, sizeof(*a));
   10410:	2206      	movs	r2, #6
   10412:	f104 0136 	add.w	r1, r4, #54	; 0x36
   10416:	1c68      	adds	r0, r5, #1
   10418:	f7f5 fd0f 	bl	5e3a <memcmp>
   1041c:	b908      	cbnz	r0, 10422 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1041e:	4620      	mov	r0, r4
   10420:	e7e7      	b.n	103f2 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10422:	897b      	ldrh	r3, [r7, #10]
   10424:	079b      	lsls	r3, r3, #30
   10426:	d5e3      	bpl.n	103f0 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   10428:	783b      	ldrb	r3, [r7, #0]
   1042a:	42b3      	cmp	r3, r6
   1042c:	d1e0      	bne.n	103f0 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1042e:	3501      	adds	r5, #1
   10430:	4629      	mov	r1, r5
   10432:	4807      	ldr	r0, [pc, #28]	; (10450 <bt_keys_find_irk+0x6c>)
   10434:	f7f6 fa8b 	bl	694e <bt_rpa_irk_matches>
   10438:	2800      	cmp	r0, #0
   1043a:	d0d9      	beq.n	103f0 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1043c:	2206      	movs	r2, #6
   1043e:	4629      	mov	r1, r5
   10440:	4804      	ldr	r0, [pc, #16]	; (10454 <bt_keys_find_irk+0x70>)
   10442:	f7f5 fd21 	bl	5e88 <memcpy>
			return &key_pool[i];
   10446:	4801      	ldr	r0, [pc, #4]	; (1044c <bt_keys_find_irk+0x68>)
   10448:	e7d3      	b.n	103f2 <bt_keys_find_irk+0xe>
   1044a:	bf00      	nop
   1044c:	20000ee8 	.word	0x20000ee8
   10450:	20000f0e 	.word	0x20000f0e
   10454:	20000f1e 	.word	0x20000f1e

00010458 <bt_keys_find_addr>:
{
   10458:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1045a:	4c06      	ldr	r4, [pc, #24]	; (10474 <bt_keys_find_addr+0x1c>)
   1045c:	7823      	ldrb	r3, [r4, #0]
   1045e:	4283      	cmp	r3, r0
   10460:	d104      	bne.n	1046c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   10462:	2207      	movs	r2, #7
   10464:	1c60      	adds	r0, r4, #1
   10466:	f7f5 fce8 	bl	5e3a <memcmp>
   1046a:	b108      	cbz	r0, 10470 <bt_keys_find_addr+0x18>
	return NULL;
   1046c:	2000      	movs	r0, #0
}
   1046e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   10470:	4620      	mov	r0, r4
   10472:	e7fc      	b.n	1046e <bt_keys_find_addr+0x16>
   10474:	20000ee8 	.word	0x20000ee8

00010478 <bt_keys_add_type>:
	keys->keys |= type;
   10478:	8943      	ldrh	r3, [r0, #10]
   1047a:	4319      	orrs	r1, r3
   1047c:	8141      	strh	r1, [r0, #10]
}
   1047e:	4770      	bx	lr

00010480 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->keys & BT_KEYS_IRK) {
   10480:	8943      	ldrh	r3, [r0, #10]
   10482:	079b      	lsls	r3, r3, #30
{
   10484:	b510      	push	{r4, lr}
   10486:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
   10488:	d501      	bpl.n	1048e <bt_keys_clear+0xe>
		bt_id_del(keys);
   1048a:	f7f6 ffc5 	bl	7418 <bt_id_del>

		BT_DBG("Deleting key %s", key);
		settings_save_one(key, NULL);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1048e:	4620      	mov	r0, r4
   10490:	2280      	movs	r2, #128	; 0x80
   10492:	2100      	movs	r1, #0
}
   10494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   10498:	f7f5 bd23 	b.w	5ee2 <memset>

0001049c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   1049c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   1049e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   104a0:	1dc3      	adds	r3, r0, #7
   104a2:	f023 0303 	bic.w	r3, r3, #3
{
   104a6:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   104a8:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   104aa:	3a01      	subs	r2, #1
   104ac:	b294      	uxth	r4, r2
{
   104ae:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   104b0:	2204      	movs	r2, #4
   104b2:	2100      	movs	r1, #0
   104b4:	fb06 0004 	mla	r0, r6, r4, r0
   104b8:	f7f5 fd13 	bl	5ee2 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   104bc:	f64f 77ff 	movw	r7, #65535	; 0xffff
   104c0:	3c01      	subs	r4, #1
   104c2:	b2a4      	uxth	r4, r4
   104c4:	42bc      	cmp	r4, r7
   104c6:	d101      	bne.n	104cc <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   104c8:	b003      	add	sp, #12
   104ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   104cc:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   104d0:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   104d2:	2204      	movs	r2, #4
   104d4:	1b80      	subs	r0, r0, r6
   104d6:	eb0d 0102 	add.w	r1, sp, r2
   104da:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   104dc:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   104de:	f7f5 fcd3 	bl	5e88 <memcpy>
   104e2:	e7ed      	b.n	104c0 <mem_init+0x24>

000104e4 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   104e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   104e6:	6804      	ldr	r4, [r0, #0]
{
   104e8:	4606      	mov	r6, r0
	if (*mem_head) {
   104ea:	b18c      	cbz	r4, 10510 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   104ec:	1de3      	adds	r3, r4, #7
   104ee:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   104f2:	2204      	movs	r2, #4
   104f4:	4621      	mov	r1, r4
   104f6:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   104fa:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   104fc:	f7f5 fcc4 	bl	5e88 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	b123      	cbz	r3, 1050e <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   10504:	1dda      	adds	r2, r3, #7
   10506:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1050a:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1050c:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1050e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   10510:	4620      	mov	r0, r4
   10512:	b002      	add	sp, #8
   10514:	bd70      	pop	{r4, r5, r6, pc}

00010516 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   10516:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   10518:	680c      	ldr	r4, [r1, #0]
{
   1051a:	4606      	mov	r6, r0
   1051c:	460d      	mov	r5, r1
	if (*mem_head) {
   1051e:	b11c      	cbz	r4, 10528 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   10520:	1de3      	adds	r3, r4, #7
   10522:	f023 0303 	bic.w	r3, r3, #3
   10526:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   10528:	2204      	movs	r2, #4
   1052a:	4629      	mov	r1, r5
   1052c:	4630      	mov	r0, r6
   1052e:	f7f5 fcab 	bl	5e88 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   10532:	1df2      	adds	r2, r6, #7
   10534:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   10538:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1053a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   1053c:	602e      	str	r6, [r5, #0]
}
   1053e:	bd70      	pop	{r4, r5, r6, pc}

00010540 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
   10540:	b118      	cbz	r0, 1054a <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
   10542:	3007      	adds	r0, #7
   10544:	f020 0003 	bic.w	r0, r0, #3
   10548:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
   1054a:	4770      	bx	lr

0001054c <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   1054c:	fb02 0001 	mla	r0, r2, r1, r0
   10550:	4770      	bx	lr

00010552 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   10552:	1a40      	subs	r0, r0, r1
   10554:	b280      	uxth	r0, r0
}
   10556:	fbb0 f0f2 	udiv	r0, r0, r2
   1055a:	4770      	bx	lr

0001055c <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   1055c:	b510      	push	{r4, lr}
	src += len;
   1055e:	4411      	add	r1, r2
   10560:	3801      	subs	r0, #1
	while (len--) {
   10562:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10566:	3a01      	subs	r2, #1
   10568:	b292      	uxth	r2, r2
   1056a:	429a      	cmp	r2, r3
   1056c:	d100      	bne.n	10570 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1056e:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   10570:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   10574:	f800 4f01 	strb.w	r4, [r0, #1]!
   10578:	e7f5      	b.n	10566 <mem_rcopy+0xa>

0001057a <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
   1057a:	4401      	add	r1, r0
	while (len--) {
   1057c:	4288      	cmp	r0, r1
   1057e:	d101      	bne.n	10584 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   10580:	2000      	movs	r0, #0
   10582:	4770      	bx	lr
		if (*src++) {
   10584:	f810 3b01 	ldrb.w	r3, [r0], #1
   10588:	2b00      	cmp	r3, #0
   1058a:	d0f7      	beq.n	1057c <mem_nz+0x2>
			return 1;
   1058c:	2001      	movs	r0, #1
}
   1058e:	4770      	bx	lr

00010590 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
   10590:	6010      	str	r0, [r2, #0]
   10592:	6008      	str	r0, [r1, #0]

	return link;
}
   10594:	4770      	bx	lr

00010596 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   10596:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
   10598:	6814      	ldr	r4, [r2, #0]
   1059a:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
   1059c:	6814      	ldr	r4, [r2, #0]
   1059e:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
   105a0:	6010      	str	r0, [r2, #0]

	return link;
}
   105a2:	bd10      	pop	{r4, pc}

000105a4 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
   105a4:	4288      	cmp	r0, r1
   105a6:	d003      	beq.n	105b0 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
   105a8:	b11a      	cbz	r2, 105b2 <memq_peek+0xe>
		*mem = head->mem;
   105aa:	6843      	ldr	r3, [r0, #4]
   105ac:	6013      	str	r3, [r2, #0]
   105ae:	4770      	bx	lr
		return NULL;
   105b0:	2000      	movs	r0, #0
	}

	return head;
}
   105b2:	4770      	bx	lr

000105b4 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
   105b4:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   105b6:	4283      	cmp	r3, r0
   105b8:	d007      	beq.n	105ca <memq_dequeue+0x16>
	if (mem) {
   105ba:	b10a      	cbz	r2, 105c0 <memq_dequeue+0xc>
		*mem = head->mem;
   105bc:	6858      	ldr	r0, [r3, #4]
   105be:	6010      	str	r0, [r2, #0]
	if (!link) {
   105c0:	b10b      	cbz	r3, 105c6 <memq_dequeue+0x12>
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
   105c2:	681a      	ldr	r2, [r3, #0]
   105c4:	600a      	str	r2, [r1, #0]

	return link;
}
   105c6:	4618      	mov	r0, r3
   105c8:	4770      	bx	lr
		return NULL;
   105ca:	2300      	movs	r3, #0
   105cc:	e7fb      	b.n	105c6 <memq_dequeue+0x12>
	...

000105d0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
   105d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   105d4:	4f11      	ldr	r7, [pc, #68]	; (1061c <mayfly_init+0x4c>)
   105d6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 10620 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   105da:	2604      	movs	r6, #4
	while (callee_id--) {
   105dc:	3e01      	subs	r6, #1
   105de:	b2f6      	uxtb	r6, r6
   105e0:	2eff      	cmp	r6, #255	; 0xff
   105e2:	d019      	beq.n	10618 <mayfly_init+0x48>
   105e4:	b233      	sxth	r3, r6
   105e6:	ea4f 0883 	mov.w	r8, r3, lsl #2
   105ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   105ee:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   105f0:	2404      	movs	r4, #4
   105f2:	f04f 0a0c 	mov.w	sl, #12
   105f6:	e00a      	b.n	1060e <mayfly_init+0x3e>
   105f8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
   105fc:	1d0a      	adds	r2, r1, #4
   105fe:	eb04 0008 	add.w	r0, r4, r8
   10602:	443a      	add	r2, r7
   10604:	4439      	add	r1, r7
   10606:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   1060a:	f7ff ffc1 	bl	10590 <memq_init>
		while (caller_id--) {
   1060e:	3c01      	subs	r4, #1
   10610:	b2e4      	uxtb	r4, r4
   10612:	2cff      	cmp	r4, #255	; 0xff
   10614:	d1f0      	bne.n	105f8 <mayfly_init+0x28>
   10616:	e7e1      	b.n	105dc <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   10618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1061c:	20000fe8 	.word	0x20000fe8
   10620:	20000f68 	.word	0x20000f68

00010624 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   10624:	b4f0      	push	{r4, r5, r6, r7}
   10626:	4b12      	ldr	r3, [pc, #72]	; (10670 <mayfly_enable+0x4c>)
   10628:	4605      	mov	r5, r0
   1062a:	460f      	mov	r7, r1
   1062c:	260c      	movs	r6, #12
   1062e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
   10630:	b172      	cbz	r2, 10650 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   10632:	4361      	muls	r1, r4
   10634:	fb06 1400 	mla	r4, r6, r0, r1
   10638:	4423      	add	r3, r4
   1063a:	7a59      	ldrb	r1, [r3, #9]
   1063c:	7a18      	ldrb	r0, [r3, #8]
   1063e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   10640:	bf04      	itt	eq
   10642:	3101      	addeq	r1, #1
   10644:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   10646:	4628      	mov	r0, r5
   10648:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1064a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   1064c:	f00d bcee 	b.w	1e02c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10650:	434c      	muls	r4, r1
   10652:	fb06 4400 	mla	r4, r6, r0, r4
   10656:	4423      	add	r3, r4
   10658:	7a9c      	ldrb	r4, [r3, #10]
   1065a:	7ada      	ldrb	r2, [r3, #11]
   1065c:	42a2      	cmp	r2, r4
   1065e:	d104      	bne.n	1066a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
   10660:	3201      	adds	r2, #1
   10662:	729a      	strb	r2, [r3, #10]
}
   10664:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   10666:	f00d bd55 	b.w	1e114 <mayfly_pend>
}
   1066a:	bcf0      	pop	{r4, r5, r6, r7}
   1066c:	4770      	bx	lr
   1066e:	bf00      	nop
   10670:	20000fe8 	.word	0x20000fe8

00010674 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
   10674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10676:	4605      	mov	r5, r0
   10678:	460e      	mov	r6, r1
   1067a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   1067c:	b18a      	cbz	r2, 106a2 <mayfly_enqueue+0x2e>
   1067e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   10680:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   10682:	7820      	ldrb	r0, [r4, #0]
   10684:	1a80      	subs	r0, r0, r2
	if (state != 0) {
   10686:	f010 0703 	ands.w	r7, r0, #3
   1068a:	d029      	beq.n	106e0 <mayfly_enqueue+0x6c>
		if (chain) {
   1068c:	b303      	cbz	r3, 106d0 <mayfly_enqueue+0x5c>
			if (state != 1) {
   1068e:	2f01      	cmp	r7, #1
   10690:	d039      	beq.n	10706 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
   10692:	3201      	adds	r2, #1
   10694:	b2d2      	uxtb	r2, r2
   10696:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   10698:	4631      	mov	r1, r6
   1069a:	4628      	mov	r0, r5
   1069c:	f00d fd3a 	bl	1e114 <mayfly_pend>
   106a0:	e01c      	b.n	106dc <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   106a2:	f00d fd25 	bl	1e0f0 <mayfly_prio_is_equal>
   106a6:	2800      	cmp	r0, #0
   106a8:	d0e9      	beq.n	1067e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   106aa:	4631      	mov	r1, r6
   106ac:	4628      	mov	r0, r5
   106ae:	f00d fcef 	bl	1e090 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   106b2:	2800      	cmp	r0, #0
   106b4:	d0e3      	beq.n	1067e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   106b6:	2330      	movs	r3, #48	; 0x30
   106b8:	220c      	movs	r2, #12
   106ba:	4373      	muls	r3, r6
   106bc:	fb02 3305 	mla	r3, r2, r5, r3
   106c0:	4a12      	ldr	r2, [pc, #72]	; (1070c <mayfly_enqueue+0x98>)
   106c2:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   106c4:	7a93      	ldrb	r3, [r2, #10]
   106c6:	7ad2      	ldrb	r2, [r2, #11]
   106c8:	1a9b      	subs	r3, r3, r2
   106ca:	bf18      	it	ne
   106cc:	2301      	movne	r3, #1
   106ce:	e7d7      	b.n	10680 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   106d0:	3202      	adds	r2, #2
   106d2:	b2d2      	uxtb	r2, r2
   106d4:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   106d6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   106da:	4798      	blx	r3
		return 0;
   106dc:	2000      	movs	r0, #0

	return 0;
}
   106de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
   106e0:	2b00      	cmp	r3, #0
   106e2:	d0f8      	beq.n	106d6 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
   106e4:	3201      	adds	r2, #1
   106e6:	b2d2      	uxtb	r2, r2
   106e8:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   106ea:	2304      	movs	r3, #4
   106ec:	2230      	movs	r2, #48	; 0x30
   106ee:	fb12 3206 	smlabb	r2, r2, r6, r3
   106f2:	230c      	movs	r3, #12
   106f4:	fb13 2305 	smlabb	r3, r3, r5, r2
   106f8:	4a04      	ldr	r2, [pc, #16]	; (1070c <mayfly_enqueue+0x98>)
   106fa:	6860      	ldr	r0, [r4, #4]
   106fc:	441a      	add	r2, r3
   106fe:	4621      	mov	r1, r4
   10700:	f7ff ff49 	bl	10596 <memq_enqueue>
   10704:	e7c8      	b.n	10698 <mayfly_enqueue+0x24>
			return 1;
   10706:	4638      	mov	r0, r7
   10708:	e7e9      	b.n	106de <mayfly_enqueue+0x6a>
   1070a:	bf00      	nop
   1070c:	20000fe8 	.word	0x20000fe8

00010710 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
   10710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10714:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   10718:	b089      	sub	sp, #36	; 0x24
   1071a:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
   1071c:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   10720:	4e43      	ldr	r6, [pc, #268]	; (10830 <mayfly_run+0x120>)
   10722:	9304      	str	r3, [sp, #16]
{
   10724:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
   10726:	2404      	movs	r4, #4
	u8_t disable = 0;
   10728:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
   1072c:	3c01      	subs	r4, #1
   1072e:	b2e4      	uxtb	r4, r4
   10730:	2cff      	cmp	r4, #255	; 0xff
   10732:	d10b      	bne.n	1074c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   10734:	9b01      	ldr	r3, [sp, #4]
   10736:	2b00      	cmp	r3, #0
   10738:	d072      	beq.n	10820 <mayfly_run+0x110>
   1073a:	f1b8 0f00 	cmp.w	r8, #0
   1073e:	d16f      	bne.n	10820 <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10740:	4642      	mov	r2, r8
   10742:	4629      	mov	r1, r5
   10744:	4628      	mov	r0, r5
   10746:	f00d fc71 	bl	1e02c <mayfly_enable_cb>
   1074a:	e069      	b.n	10820 <mayfly_run+0x110>
		struct mayfly *m = 0;
   1074c:	f10d 0b20 	add.w	fp, sp, #32
   10750:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   10752:	270c      	movs	r7, #12
		struct mayfly *m = 0;
   10754:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
   10758:	f04f 0930 	mov.w	r9, #48	; 0x30
   1075c:	fb07 f304 	mul.w	r3, r7, r4
   10760:	fb09 3005 	mla	r0, r9, r5, r3
   10764:	1831      	adds	r1, r6, r0
   10766:	465a      	mov	r2, fp
   10768:	6849      	ldr	r1, [r1, #4]
   1076a:	5830      	ldr	r0, [r6, r0]
   1076c:	9302      	str	r3, [sp, #8]
   1076e:	f7ff ff19 	bl	105a4 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
   10772:	9b04      	ldr	r3, [sp, #16]
   10774:	fb17 3704 	smlabb	r7, r7, r4, r3
   10778:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
   1077a:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
   1077c:	9303      	str	r3, [sp, #12]
		while (link) {
   1077e:	f1ba 0f00 	cmp.w	sl, #0
   10782:	d032      	beq.n	107ea <mayfly_run+0xda>
			req = m->_req;
   10784:	9b07      	ldr	r3, [sp, #28]
   10786:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
   10788:	785a      	ldrb	r2, [r3, #1]
   1078a:	1abf      	subs	r7, r7, r2
   1078c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
   10790:	2f01      	cmp	r7, #1
   10792:	d104      	bne.n	1079e <mayfly_run+0x8e>
				m->_ack--;
   10794:	3a01      	subs	r2, #1
   10796:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   10798:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   1079c:	4790      	blx	r2
			req = m->_req;
   1079e:	9a07      	ldr	r2, [sp, #28]
   107a0:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
   107a2:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
   107a4:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
   107a6:	1a9a      	subs	r2, r3, r2
   107a8:	f002 0203 	and.w	r2, r2, #3
   107ac:	2a01      	cmp	r2, #1
   107ae:	9305      	str	r3, [sp, #20]
   107b0:	d00d      	beq.n	107ce <mayfly_run+0xbe>
				memq_dequeue(mft[callee_id][caller_id].tail,
   107b2:	9b02      	ldr	r3, [sp, #8]
   107b4:	9903      	ldr	r1, [sp, #12]
   107b6:	fb09 3005 	mla	r0, r9, r5, r3
   107ba:	4430      	add	r0, r6
   107bc:	2200      	movs	r2, #0
   107be:	6840      	ldr	r0, [r0, #4]
   107c0:	f7ff fef8 	bl	105b4 <memq_dequeue>
				m->_link = link;
   107c4:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
   107c6:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
   107c8:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
   107cc:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
   107ce:	9b02      	ldr	r3, [sp, #8]
   107d0:	fb09 3305 	mla	r3, r9, r5, r3
   107d4:	18f1      	adds	r1, r6, r3
   107d6:	465a      	mov	r2, fp
   107d8:	6849      	ldr	r1, [r1, #4]
   107da:	58f0      	ldr	r0, [r6, r3]
   107dc:	f7ff fee2 	bl	105a4 <memq_peek>
			if (state == 1) {
   107e0:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   107e2:	4682      	mov	sl, r0
			if (state == 1) {
   107e4:	d1cb      	bne.n	1077e <mayfly_run+0x6e>
				if (caller_id || link) {
   107e6:	b9bc      	cbnz	r4, 10818 <mayfly_run+0x108>
   107e8:	b9b0      	cbnz	r0, 10818 <mayfly_run+0x108>
		if (mft[callee_id][caller_id].disable_req !=
   107ea:	2230      	movs	r2, #48	; 0x30
   107ec:	230c      	movs	r3, #12
   107ee:	436a      	muls	r2, r5
   107f0:	fb03 2204 	mla	r2, r3, r4, r2
   107f4:	4432      	add	r2, r6
   107f6:	7a91      	ldrb	r1, [r2, #10]
   107f8:	7ad0      	ldrb	r0, [r2, #11]
   107fa:	4288      	cmp	r0, r1
   107fc:	d113      	bne.n	10826 <mayfly_run+0x116>
		if (mft[callee_id][caller_id].enable_req !=
   107fe:	2230      	movs	r2, #48	; 0x30
   10800:	436a      	muls	r2, r5
   10802:	fb03 2304 	mla	r3, r3, r4, r2
   10806:	4433      	add	r3, r6
   10808:	7a1a      	ldrb	r2, [r3, #8]
   1080a:	7a59      	ldrb	r1, [r3, #9]
   1080c:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   1080e:	bf1c      	itt	ne
   10810:	725a      	strbne	r2, [r3, #9]
			enable = 1;
   10812:	f04f 0801 	movne.w	r8, #1
   10816:	e789      	b.n	1072c <mayfly_run+0x1c>
					mayfly_pend(callee_id, callee_id);
   10818:	4629      	mov	r1, r5
   1081a:	4628      	mov	r0, r5
   1081c:	f00d fc7a 	bl	1e114 <mayfly_pend>
	}
}
   10820:	b009      	add	sp, #36	; 0x24
   10822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   10826:	72d1      	strb	r1, [r2, #11]
			disable = 1;
   10828:	2201      	movs	r2, #1
   1082a:	9201      	str	r2, [sp, #4]
   1082c:	e7e7      	b.n	107fe <mayfly_run+0xee>
   1082e:	bf00      	nop
   10830:	20000fe8 	.word	0x20000fe8

00010834 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   10834:	b510      	push	{r4, lr}
   10836:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
   10838:	2000      	movs	r0, #0

	while (octets_len--) {
   1083a:	3901      	subs	r1, #1
   1083c:	b2c9      	uxtb	r1, r1
   1083e:	29ff      	cmp	r1, #255	; 0xff
   10840:	d100      	bne.n	10844 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   10842:	bd10      	pop	{r4, pc}
		bite = *octets;
   10844:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   10848:	2b00      	cmp	r3, #0
   1084a:	d0f6      	beq.n	1083a <util_ones_count_get+0x6>
			bite &= (bite - 1);
   1084c:	1e5c      	subs	r4, r3, #1
			one_count++;
   1084e:	3001      	adds	r0, #1
			bite &= (bite - 1);
   10850:	4023      	ands	r3, r4
			one_count++;
   10852:	b2c0      	uxtb	r0, r0
   10854:	e7f8      	b.n	10848 <util_ones_count_get+0x14>

00010856 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   10856:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
   10858:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
   1085a:	6804      	ldr	r4, [r0, #0]
{
   1085c:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
   1085e:	4613      	mov	r3, r2
	current = previous;
	total = 0;
   10860:	2000      	movs	r0, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
   10862:	2aff      	cmp	r2, #255	; 0xff
   10864:	d101      	bne.n	1086a <ticker_dequeue+0x14>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
   10866:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   10868:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   1086a:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   1086e:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
   10872:	428a      	cmp	r2, r1
   10874:	f8d7 c008 	ldr.w	ip, [r7, #8]
   10878:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   1087c:	4460      	add	r0, ip
   1087e:	d002      	beq.n	10886 <ticker_dequeue+0x30>
   10880:	4613      	mov	r3, r2
   10882:	462a      	mov	r2, r5
   10884:	e7ed      	b.n	10862 <ticker_dequeue+0xc>
	if (previous == current) {
   10886:	4293      	cmp	r3, r2
   10888:	d100      	bne.n	1088c <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   1088a:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
   1088c:	b21b      	sxth	r3, r3
   1088e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10892:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
   10896:	783b      	ldrb	r3, [r7, #0]
   10898:	2bff      	cmp	r3, #255	; 0xff
   1089a:	d0e5      	beq.n	10868 <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
   1089c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   108a0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   108a4:	68a3      	ldr	r3, [r4, #8]
   108a6:	4463      	add	r3, ip
   108a8:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   108aa:	e7dd      	b.n	10868 <ticker_dequeue+0x12>

000108ac <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
   108ac:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
   108ae:	1a55      	subs	r5, r2, r1
   108b0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   108b4:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   108b6:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
   108b8:	d109      	bne.n	108ce <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   108ba:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   108be:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   108c0:	42a2      	cmp	r2, r4
   108c2:	d90e      	bls.n	108e2 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   108c4:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
   108c6:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   108c8:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   108ca:	6144      	str	r4, [r0, #20]
}
   108cc:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   108ce:	1a8a      	subs	r2, r1, r2
   108d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   108d4:	4293      	cmp	r3, r2
   108d6:	d901      	bls.n	108dc <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   108d8:	1a9a      	subs	r2, r3, r2
   108da:	e7f1      	b.n	108c0 <ticks_to_expire_prep+0x14>
   108dc:	4422      	add	r2, r4
			ticks_to_expire_minus +=
   108de:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
   108e0:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   108e2:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
   108e4:	2200      	movs	r2, #0
   108e6:	e7ef      	b.n	108c8 <ticks_to_expire_prep+0x1c>

000108e8 <ticker_job_op_cb>:
{
   108e8:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   108ea:	2200      	movs	r2, #0
   108ec:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   108ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   108f0:	6259      	str	r1, [r3, #36]	; 0x24
{
   108f2:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   108f4:	b10a      	cbz	r2, 108fa <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   108f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   108f8:	4710      	bx	r2
}
   108fa:	4770      	bx	lr

000108fc <ticker_worker>:
{
   108fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   10900:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
   10902:	2301      	movs	r3, #1
{
   10904:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
   10906:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   10908:	b91d      	cbnz	r5, 10912 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
   1090a:	7f43      	ldrb	r3, [r0, #29]
   1090c:	2bff      	cmp	r3, #255	; 0xff
   1090e:	d102      	bne.n	10916 <ticker_worker+0x1a>
		instance->worker_trigger = 0;
   10910:	77c5      	strb	r5, [r0, #31]
}
   10912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10916:	f00c fee9 	bl	1d6ec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   1091a:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   1091c:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
   1091e:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10922:	1bc7      	subs	r7, r0, r7
   10924:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   10928:	2eff      	cmp	r6, #255	; 0xff
   1092a:	d006      	beq.n	1093a <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
   1092c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   10930:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   10934:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10936:	429f      	cmp	r7, r3
   10938:	d218      	bcs.n	1096c <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1093a:	7aa2      	ldrb	r2, [r4, #10]
   1093c:	7ae3      	ldrb	r3, [r4, #11]
   1093e:	4293      	cmp	r3, r2
   10940:	d105      	bne.n	1094e <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
   10942:	3301      	adds	r3, #1
   10944:	b2db      	uxtb	r3, r3
			last = 0;
   10946:	2b02      	cmp	r3, #2
   10948:	bf08      	it	eq
   1094a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
   1094c:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1094e:	7ae3      	ldrb	r3, [r4, #11]
   10950:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10954:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10956:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10958:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
   1095a:	2300      	movs	r3, #0
   1095c:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1095e:	46ac      	mov	ip, r5
   10960:	4623      	mov	r3, r4
   10962:	2104      	movs	r1, #4
   10964:	2003      	movs	r0, #3
}
   10966:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1096a:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
   1096c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   1096e:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   10970:	788a      	ldrb	r2, [r1, #2]
   10972:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
   10974:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   10978:	1a9b      	subs	r3, r3, r2
   1097a:	b2db      	uxtb	r3, r3
   1097c:	2b01      	cmp	r3, #1
   1097e:	d1d3      	bne.n	10928 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
   10980:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   10984:	3a01      	subs	r2, #1
   10986:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   10988:	f1b9 0f00 	cmp.w	r9, #0
   1098c:	d0cc      	beq.n	10928 <ticker_worker+0x2c>
					   ticks_expired -
   1098e:	6948      	ldr	r0, [r1, #20]
   10990:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   10992:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
   10994:	1a28      	subs	r0, r5, r0
   10996:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   10998:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1099c:	690b      	ldr	r3, [r1, #16]
   1099e:	6a49      	ldr	r1, [r1, #36]	; 0x24
   109a0:	47c8      	blx	r9
   109a2:	e7c1      	b.n	10928 <ticker_worker+0x2c>

000109a4 <ticker_job>:
{
   109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
   109a8:	7fc2      	ldrb	r2, [r0, #31]
{
   109aa:	b093      	sub	sp, #76	; 0x4c
   109ac:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
   109ae:	2a00      	cmp	r2, #0
   109b0:	f040 83c2 	bne.w	11138 <ticker_job+0x794>
	ticks_previous = instance->ticks_current;
   109b4:	6943      	ldr	r3, [r0, #20]
   109b6:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1;
   109b8:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   109ba:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
   109bc:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   109be:	7ac0      	ldrb	r0, [r0, #11]
   109c0:	4298      	cmp	r0, r3
   109c2:	f000 808c 	beq.w	10ade <ticker_job+0x13a>
		first = instance->ticks_elapsed_first + 1;
   109c6:	440b      	add	r3, r1
   109c8:	b2db      	uxtb	r3, r3
			first = 0;
   109ca:	2b02      	cmp	r3, #2
   109cc:	bf08      	it	eq
   109ce:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
   109d0:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
   109d4:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
   109d8:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
   109da:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
   109de:	9b04      	ldr	r3, [sp, #16]
   109e0:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
   109e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   109e6:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
   109ea:	f89b 301d 	ldrb.w	r3, [fp, #29]
   109ee:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
   109f0:	f8db 3000 	ldr.w	r3, [fp]
   109f4:	9305      	str	r3, [sp, #20]
	users = &instance->user[0];
   109f6:	f8db 3004 	ldr.w	r3, [fp, #4]
   109fa:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   109fc:	f89b 3009 	ldrb.w	r3, [fp, #9]
   10a00:	9302      	str	r3, [sp, #8]
	pending = 0;
   10a02:	2300      	movs	r3, #0
   10a04:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
   10a06:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
   10a0a:	9b02      	ldr	r3, [sp, #8]
   10a0c:	3b01      	subs	r3, #1
   10a0e:	b2db      	uxtb	r3, r3
   10a10:	2bff      	cmp	r3, #255	; 0xff
   10a12:	9302      	str	r3, [sp, #8]
   10a14:	d166      	bne.n	10ae4 <ticker_job+0x140>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10a16:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
   10a1a:	9a03      	ldr	r2, [sp, #12]
   10a1c:	1a9b      	subs	r3, r3, r2
   10a1e:	bf18      	it	ne
   10a20:	2301      	movne	r3, #1
   10a22:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
   10a24:	9b01      	ldr	r3, [sp, #4]
   10a26:	b1cb      	cbz	r3, 10a5c <ticker_job+0xb8>
   10a28:	f8db 9000 	ldr.w	r9, [fp]
	ticks_expired = 0;
   10a2c:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   10a2e:	f89b 501d 	ldrb.w	r5, [fp, #29]
   10a32:	2dff      	cmp	r5, #255	; 0xff
   10a34:	d00b      	beq.n	10a4e <ticker_job+0xaa>
		ticker = &node[id_expired];
   10a36:	b22e      	sxth	r6, r5
   10a38:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   10a3c:	eb09 04c6 	add.w	r4, r9, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   10a40:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10a42:	4543      	cmp	r3, r8
   10a44:	f240 8132 	bls.w	10cac <ticker_job+0x308>
			ticker->ticks_to_expire -= ticks_elapsed;
   10a48:	eba3 0308 	sub.w	r3, r3, r8
   10a4c:	60a3      	str	r3, [r4, #8]
			flag_compare_update = 1;
   10a4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   10a52:	9903      	ldr	r1, [sp, #12]
   10a54:	42a9      	cmp	r1, r5
   10a56:	bf18      	it	ne
   10a58:	4613      	movne	r3, r2
   10a5a:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
   10a5c:	f8db 3000 	ldr.w	r3, [fp]
   10a60:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
   10a62:	f8db 3004 	ldr.w	r3, [fp, #4]
   10a66:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
   10a68:	f89b 3009 	ldrb.w	r3, [fp, #9]
   10a6c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   10a6e:	9b01      	ldr	r3, [sp, #4]
   10a70:	3b01      	subs	r3, #1
   10a72:	b2db      	uxtb	r3, r3
   10a74:	2bff      	cmp	r3, #255	; 0xff
   10a76:	9301      	str	r3, [sp, #4]
   10a78:	f040 8168 	bne.w	10d4c <ticker_job+0x3a8>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10a7c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   10a80:	9a03      	ldr	r2, [sp, #12]
   10a82:	4293      	cmp	r3, r2
	if (!pending) {
   10a84:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   10a86:	f040 834c 	bne.w	11122 <ticker_job+0x77e>
	if (!pending) {
   10a8a:	b94b      	cbnz	r3, 10aa0 <ticker_job+0xfc>
	users = &instance->user[0];
   10a8c:	f8db 3004 	ldr.w	r3, [fp, #4]
	count_user = instance->count_user;
   10a90:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
   10a94:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   10a96:	3c01      	subs	r4, #1
   10a98:	b2e4      	uxtb	r4, r4
   10a9a:	2cff      	cmp	r4, #255	; 0xff
   10a9c:	f040 829c 	bne.w	10fd8 <ticker_job+0x634>
	instance->job_guard = 0;
   10aa0:	2300      	movs	r3, #0
   10aa2:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10aa6:	9b02      	ldr	r3, [sp, #8]
   10aa8:	b14b      	cbz	r3, 10abe <ticker_job+0x11a>
	if (instance->ticker_id_head == TICKER_NULL) {
   10aaa:	f89b 301d 	ldrb.w	r3, [fp, #29]
   10aae:	2bff      	cmp	r3, #255	; 0xff
   10ab0:	f040 82e6 	bne.w	11080 <ticker_job+0x6dc>
		if (cntr_stop() == 0) {
   10ab4:	f00c fde2 	bl	1d67c <cntr_stop>
   10ab8:	b908      	cbnz	r0, 10abe <ticker_job+0x11a>
			instance->ticks_slot_previous = 0;
   10aba:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
   10abe:	f89b 301f 	ldrb.w	r3, [fp, #31]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	f000 8338 	beq.w	11138 <ticker_job+0x794>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10ac8:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   10acc:	465b      	mov	r3, fp
   10ace:	2201      	movs	r2, #1
   10ad0:	2103      	movs	r1, #3
   10ad2:	2004      	movs	r0, #4
   10ad4:	46a4      	mov	ip, r4
}
   10ad6:	b013      	add	sp, #76	; 0x4c
   10ad8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10adc:	4760      	bx	ip
		flag_elapsed = 0;
   10ade:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
   10ae0:	4690      	mov	r8, r2
   10ae2:	e782      	b.n	109ea <ticker_job+0x46>
		user = &users[count_user];
   10ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ae6:	9a02      	ldr	r2, [sp, #8]
   10ae8:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   10aec:	687b      	ldr	r3, [r7, #4]
   10aee:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
   10af0:	78f9      	ldrb	r1, [r7, #3]
   10af2:	78be      	ldrb	r6, [r7, #2]
   10af4:	428e      	cmp	r6, r1
   10af6:	d088      	beq.n	10a0a <ticker_job+0x66>
			user_op = &user_ops[user->middle];
   10af8:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
   10afa:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
   10afc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   10b00:	0112      	lsls	r2, r2, #4
   10b02:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
   10b04:	1c73      	adds	r3, r6, #1
   10b06:	b2db      	uxtb	r3, r3
				middle = 0;
   10b08:	4298      	cmp	r0, r3
   10b0a:	bf08      	it	eq
   10b0c:	2300      	moveq	r3, #0
			user->middle = middle;
   10b0e:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10b10:	9b06      	ldr	r3, [sp, #24]
   10b12:	5c9a      	ldrb	r2, [r3, r2]
   10b14:	2a03      	cmp	r2, #3
   10b16:	d9ec      	bls.n	10af2 <ticker_job+0x14e>
			ticker = &node[user_op->id];
   10b18:	7869      	ldrb	r1, [r5, #1]
   10b1a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   10b1e:	930a      	str	r3, [sp, #40]	; 0x28
   10b20:	980a      	ldr	r0, [sp, #40]	; 0x28
   10b22:	9b05      	ldr	r3, [sp, #20]
   10b24:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   10b28:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
   10b2a:	7863      	ldrb	r3, [r4, #1]
   10b2c:	78a0      	ldrb	r0, [r4, #2]
   10b2e:	eba3 0300 	sub.w	r3, r3, r0
   10b32:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   10b34:	d80a      	bhi.n	10b4c <ticker_job+0x1a8>
   10b36:	b14b      	cbz	r3, 10b4c <ticker_job+0x1a8>
			    (state == 0) ||
   10b38:	2a04      	cmp	r2, #4
   10b3a:	d10c      	bne.n	10b56 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   10b3c:	686a      	ldr	r2, [r5, #4]
   10b3e:	b952      	cbnz	r2, 10b56 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   10b40:	68aa      	ldr	r2, [r5, #8]
   10b42:	b942      	cbnz	r2, 10b56 <ticker_job+0x1b2>
			     (user_op->params.update.lazy == 0) &&
   10b44:	68ea      	ldr	r2, [r5, #12]
   10b46:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10b4a:	d104      	bne.n	10b56 <ticker_job+0x1b2>
				ticker_job_op_cb(user_op,
   10b4c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   10b4e:	4628      	mov	r0, r5
   10b50:	f7ff feca 	bl	108e8 <ticker_job_op_cb>
   10b54:	e7cc      	b.n	10af0 <ticker_job+0x14c>
			if (state == 1) {
   10b56:	2b01      	cmp	r3, #1
   10b58:	f040 809d 	bne.w	10c96 <ticker_job+0x2f2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10b5c:	4658      	mov	r0, fp
   10b5e:	f7ff fe7a 	bl	10856 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10b62:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10b64:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10b66:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10b68:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10b6a:	f040 8086 	bne.w	10c7a <ticker_job+0x2d6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10b6e:	f8db 3014 	ldr.w	r3, [fp, #20]
   10b72:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   10b74:	f00c fdba 	bl	1d6ec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10b78:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   10b7a:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10b7c:	1ac3      	subs	r3, r0, r3
   10b7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10b82:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
   10b84:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10b86:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10b88:	bf9e      	ittt	ls
   10b8a:	6962      	ldrls	r2, [r4, #20]
   10b8c:	1b92      	subls	r2, r2, r6
   10b8e:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
   10b90:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10b92:	bf96      	itet	ls
   10b94:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
   10b96:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
   10b98:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
   10b9a:	2a00      	cmp	r2, #0
   10b9c:	d049      	beq.n	10c32 <ticker_job+0x28e>
	    (user_op->params.update.lazy != 0)) {
   10b9e:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
   10ba0:	2900      	cmp	r1, #0
   10ba2:	d046      	beq.n	10c32 <ticker_job+0x28e>
		user_op->params.update.lazy--;
   10ba4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   10ba8:	fa1f fc8c 	uxth.w	ip, ip
   10bac:	f8a5 c00c 	strh.w	ip, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10bb0:	429a      	cmp	r2, r3
   10bb2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   10bb6:	d201      	bcs.n	10bbc <ticker_job+0x218>
   10bb8:	45f4      	cmp	ip, lr
   10bba:	d302      	bcc.n	10bc2 <ticker_job+0x21e>
		ticker->remainder_current -= 30517578UL;
   10bbc:	f8df 9274 	ldr.w	r9, [pc, #628]	; 10e34 <ticker_job+0x490>
   10bc0:	e031      	b.n	10c26 <ticker_job+0x282>
	if ((ticker->remainder_current >= BIT(31)) ||
   10bc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10bc4:	4e99      	ldr	r6, [pc, #612]	; (10e2c <ticker_job+0x488>)
   10bc6:	489a      	ldr	r0, [pc, #616]	; (10e30 <ticker_job+0x48c>)
   10bc8:	198e      	adds	r6, r1, r6
   10bca:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
   10bcc:	bf81      	itttt	hi
   10bce:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   10bd2:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   10bd6:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   10bda:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   10bdc:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
   10be0:	bf8c      	ite	hi
   10be2:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
   10be6:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   10bea:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
   10bec:	4491      	add	r9, r2
			ticker->lazy_current--;
   10bee:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   10bf2:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   10bf4:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
   10bf8:	f8a4 e01e 	strh.w	lr, [r4, #30]
   10bfc:	e7d8      	b.n	10bb0 <ticker_job+0x20c>
	ticker->remainder_current += ticker->remainder_periodic;
   10bfe:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
   10c02:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
   10c04:	4989      	ldr	r1, [pc, #548]	; (10e2c <ticker_job+0x488>)
   10c06:	488a      	ldr	r0, [pc, #552]	; (10e30 <ticker_job+0x48c>)
   10c08:	1871      	adds	r1, r6, r1
   10c0a:	4281      	cmp	r1, r0
	return 0;
   10c0c:	bf8e      	itee	hi
   10c0e:	2100      	movhi	r1, #0
		return 1;
   10c10:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
   10c12:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
   10c14:	4411      	add	r1, r2
			ticker->lazy_current++;
   10c16:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   10c1a:	bf8c      	ite	hi
   10c1c:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
   10c1e:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   10c20:	440b      	add	r3, r1
			ticker->lazy_current++;
   10c22:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10c26:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   10c2a:	45f4      	cmp	ip, lr
   10c2c:	d8e7      	bhi.n	10bfe <ticker_job+0x25a>
		ticker->lazy_periodic = user_op->params.update.lazy;
   10c2e:	f8a4 c01c 	strh.w	ip, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   10c32:	88aa      	ldrh	r2, [r5, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   10c34:	4413      	add	r3, r2
   10c36:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   10c38:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
   10c3a:	6963      	ldr	r3, [r4, #20]
   10c3c:	4413      	add	r3, r2
   10c3e:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   10c40:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   10c44:	4620      	mov	r0, r4
   10c46:	f7ff fe31 	bl	108ac <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10c4a:	69a2      	ldr	r2, [r4, #24]
   10c4c:	892b      	ldrh	r3, [r5, #8]
   10c4e:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10c50:	896a      	ldrh	r2, [r5, #10]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10c52:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10c54:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10c56:	bf8c      	ite	hi
   10c58:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
   10c5a:	2300      	movls	r3, #0
   10c5c:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
   10c5e:	7bab      	ldrb	r3, [r5, #14]
   10c60:	b103      	cbz	r3, 10c64 <ticker_job+0x2c0>
		ticker->force = user_op->params.update.force;
   10c62:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
   10c64:	9b05      	ldr	r3, [sp, #20]
   10c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10c68:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
   10c6c:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   10c6e:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
   10c72:	3301      	adds	r3, #1
   10c74:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   10c76:	2100      	movs	r1, #0
   10c78:	e769      	b.n	10b4e <ticker_job+0x1aa>
		ticker->req = ticker->ack;
   10c7a:	78a3      	ldrb	r3, [r4, #2]
   10c7c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   10c7e:	786b      	ldrb	r3, [r5, #1]
   10c80:	f89b 201c 	ldrb.w	r2, [fp, #28]
   10c84:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   10c86:	bf01      	itttt	eq
   10c88:	23ff      	moveq	r3, #255	; 0xff
   10c8a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
   10c8e:	2300      	moveq	r3, #0
   10c90:	f8cb 3018 	streq.w	r3, [fp, #24]
   10c94:	e7ef      	b.n	10c76 <ticker_job+0x2d2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   10c96:	2104      	movs	r1, #4
   10c98:	465b      	mov	r3, fp
   10c9a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   10c9e:	2201      	movs	r2, #1
   10ca0:	4608      	mov	r0, r1
   10ca2:	47a0      	blx	r4
				pending = 1;
   10ca4:	2301      	movs	r3, #1
				user->middle = prev;
   10ca6:	70be      	strb	r6, [r7, #2]
				pending = 1;
   10ca8:	9307      	str	r3, [sp, #28]
   10caa:	e6ae      	b.n	10a0a <ticker_job+0x66>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   10cac:	f8db 2018 	ldr.w	r2, [fp, #24]
   10cb0:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   10cb2:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   10cb6:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   10cb8:	bf29      	itett	cs
   10cba:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
   10cbc:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   10cbe:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
   10cc2:	2300      	movcs	r3, #0
   10cc4:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
   10cc8:	69a3      	ldr	r3, [r4, #24]
   10cca:	b11b      	cbz	r3, 10cd4 <ticker_job+0x330>
			instance->ticker_id_slot_previous = id_expired;
   10ccc:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   10cd0:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
   10cd4:	2200      	movs	r2, #0
   10cd6:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   10cd8:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   10cdc:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
   10ce0:	f8d4 c004 	ldr.w	ip, [r4, #4]
   10ce4:	f1bc 0f00 	cmp.w	ip, #0
   10ce8:	d02c      	beq.n	10d44 <ticker_job+0x3a0>
   10cea:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   10cec:	f8df e140 	ldr.w	lr, [pc, #320]	; 10e30 <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
   10cf0:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   10cf4:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   10cf6:	494d      	ldr	r1, [pc, #308]	; (10e2c <ticker_job+0x488>)
   10cf8:	1859      	adds	r1, r3, r1
   10cfa:	4571      	cmp	r1, lr
		ticker->remainder_current -= 30517578UL;
   10cfc:	bf9f      	itttt	ls
   10cfe:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   10d02:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   10d06:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   10d0a:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
   10d0c:	bf92      	itee	ls
   10d0e:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
   10d10:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
   10d12:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
   10d14:	4463      	add	r3, ip
			while (count--) {
   10d16:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
   10d1a:	441a      	add	r2, r3
			while (count--) {
   10d1c:	d2e8      	bcs.n	10cf0 <ticker_job+0x34c>
			ticks_to_expire_prep(ticker, instance->ticks_current,
   10d1e:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire = ticks_to_expire;
   10d20:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   10d22:	f8db 1014 	ldr.w	r1, [fp, #20]
   10d26:	19da      	adds	r2, r3, r7
   10d28:	4620      	mov	r0, r4
   10d2a:	f7ff fdbf 	bl	108ac <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   10d2e:	8ba3      	ldrh	r3, [r4, #28]
   10d30:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
   10d32:	2300      	movs	r3, #0
   10d34:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
   10d36:	f809 a036 	strb.w	sl, [r9, r6, lsl #3]
			ticker->req++;
   10d3a:	7863      	ldrb	r3, [r4, #1]
   10d3c:	3301      	adds	r3, #1
   10d3e:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
   10d40:	46aa      	mov	sl, r5
   10d42:	e674      	b.n	10a2e <ticker_job+0x8a>
   10d44:	78a3      	ldrb	r3, [r4, #2]
   10d46:	7063      	strb	r3, [r4, #1]
   10d48:	4655      	mov	r5, sl
   10d4a:	e7f9      	b.n	10d40 <ticker_job+0x39c>
		user = &users[count_user];
   10d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10d4e:	9a01      	ldr	r2, [sp, #4]
   10d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10d54:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   10d56:	685b      	ldr	r3, [r3, #4]
   10d58:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
   10d5a:	9b04      	ldr	r3, [sp, #16]
   10d5c:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   10d60:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   10d64:	d040      	beq.n	10de8 <ticker_job+0x444>
				ticker = &node[id_insert];
   10d66:	fa0f f38a 	sxth.w	r3, sl
   10d6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10d6e:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
   10d70:	46d0      	mov	r8, sl
   10d72:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
   10d76:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
   10d7a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
   10d7c:	f8db 3000 	ldr.w	r3, [fp]
   10d80:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
   10d82:	23ff      	movs	r3, #255	; 0xff
   10d84:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   10d86:	8ba2      	ldrh	r2, [r4, #28]
   10d88:	8be3      	ldrh	r3, [r4, #30]
   10d8a:	4293      	cmp	r3, r2
   10d8c:	f240 8080 	bls.w	10e90 <ticker_job+0x4ec>
		skip = ticker->lazy_current -
   10d90:	1a9b      	subs	r3, r3, r2
   10d92:	b29b      	uxth	r3, r3
		skip = 0;
   10d94:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
   10d96:	fa0f f388 	sxth.w	r3, r8
   10d9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10d9e:	00db      	lsls	r3, r3, #3
   10da0:	9311      	str	r3, [sp, #68]	; 0x44
   10da2:	e0c8      	b.n	10f36 <ticker_job+0x592>
				user_op = &user_ops[user_ops_first];
   10da4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   10da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10daa:	011b      	lsls	r3, r3, #4
   10dac:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   10dae:	f109 0201 	add.w	r2, r9, #1
   10db2:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
   10db6:	9a04      	ldr	r2, [sp, #16]
   10db8:	7812      	ldrb	r2, [r2, #0]
					first = 0;
   10dba:	454a      	cmp	r2, r9
   10dbc:	bf08      	it	eq
   10dbe:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10dc4:	5cd3      	ldrb	r3, [r2, r3]
   10dc6:	2b03      	cmp	r3, #3
   10dc8:	d10e      	bne.n	10de8 <ticker_job+0x444>
				id_insert = user_op->id;
   10dca:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   10dce:	9b08      	ldr	r3, [sp, #32]
   10dd0:	eb08 0488 	add.w	r4, r8, r8, lsl #2
   10dd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   10dd8:	7862      	ldrb	r2, [r4, #1]
   10dda:	78a3      	ldrb	r3, [r4, #2]
   10ddc:	429a      	cmp	r2, r3
   10dde:	d008      	beq.n	10df2 <ticker_job+0x44e>
					ticker_job_op_cb(user_op,
   10de0:	2101      	movs	r1, #1
   10de2:	4628      	mov	r0, r5
   10de4:	f7ff fd80 	bl	108e8 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   10de8:	9b04      	ldr	r3, [sp, #16]
   10dea:	789b      	ldrb	r3, [r3, #2]
   10dec:	454b      	cmp	r3, r9
   10dee:	d1d9      	bne.n	10da4 <ticker_job+0x400>
   10df0:	e63d      	b.n	10a6e <ticker_job+0xca>
	ticker->ticks_periodic = start->ticks_periodic;
   10df2:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
   10df4:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   10df8:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10dfa:	692b      	ldr	r3, [r5, #16]
   10dfc:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
   10dfe:	8aab      	ldrh	r3, [r5, #20]
   10e00:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   10e02:	69ab      	ldr	r3, [r5, #24]
   10e04:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   10e06:	69eb      	ldr	r3, [r5, #28]
   10e08:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   10e0a:	6a2b      	ldr	r3, [r5, #32]
   10e0c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
   10e0e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
   10e10:	68ab      	ldr	r3, [r5, #8]
   10e12:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   10e14:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10e16:	686a      	ldr	r2, [r5, #4]
   10e18:	4620      	mov	r0, r4
   10e1a:	f7ff fd47 	bl	108ac <ticks_to_expire_prep>
	ticker->force = 1;
   10e1e:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
   10e20:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
   10e22:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
   10e24:	70e3      	strb	r3, [r4, #3]
   10e26:	f04f 0aff 	mov.w	sl, #255	; 0xff
   10e2a:	e7a7      	b.n	10d7c <ticker_job+0x3d8>
   10e2c:	ff172b5a 	.word	0xff172b5a
   10e30:	7f172b59 	.word	0x7f172b59
   10e34:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
   10e38:	6860      	ldr	r0, [r4, #4]
   10e3a:	2800      	cmp	r0, #0
   10e3c:	f000 80c7 	beq.w	10fce <ticker_job+0x62a>
	ticker->remainder_current += ticker->remainder_periodic;
   10e40:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   10e44:	4b8c      	ldr	r3, [pc, #560]	; (11078 <ticker_job+0x6d4>)
	ticker->remainder_current += ticker->remainder_periodic;
   10e46:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   10e48:	498c      	ldr	r1, [pc, #560]	; (1107c <ticker_job+0x6d8>)
   10e4a:	18d3      	adds	r3, r2, r3
   10e4c:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
   10e4e:	bf9c      	itt	ls
   10e50:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   10e54:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
   10e58:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   10e5a:	bf8b      	itete	hi
   10e5c:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
   10e5e:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
   10e62:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
   10e64:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
   10e66:	4403      	add	r3, r0
		return 1;
   10e68:	bf98      	it	ls
   10e6a:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   10e6c:	4413      	add	r3, r2
			ticker->lazy_current++;
   10e6e:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
   10e70:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
   10e72:	3201      	adds	r2, #1
   10e74:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
   10e76:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
   10e78:	4293      	cmp	r3, r2
   10e7a:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
   10e7e:	bf89      	itett	hi
   10e80:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
   10e82:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
   10e84:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
   10e86:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
   10e88:	bf9c      	itt	ls
   10e8a:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
   10e8c:	60a1      	strls	r1, [r4, #8]
   10e8e:	e052      	b.n	10f36 <ticker_job+0x592>
		skip = 0;
   10e90:	2300      	movs	r3, #0
   10e92:	e77f      	b.n	10d94 <ticker_job+0x3f0>
		if (ticker_current->ticks_slot != 0) {
   10e94:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
   10e96:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
   10e98:	b946      	cbnz	r6, 10eac <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
   10e9a:	9f05      	ldr	r7, [sp, #20]
   10e9c:	42b8      	cmp	r0, r7
   10e9e:	d200      	bcs.n	10ea2 <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
   10ea0:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
   10ea2:	9309      	str	r3, [sp, #36]	; 0x24
   10ea4:	9605      	str	r6, [sp, #20]
   10ea6:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
   10eaa:	e053      	b.n	10f54 <ticker_job+0x5b0>
		if (ticker_current->ticks_slot != 0) {
   10eac:	9306      	str	r3, [sp, #24]
   10eae:	e7f8      	b.n	10ea2 <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
   10eb0:	b230      	sxth	r0, r6
   10eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10eb6:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
   10eba:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
   10ebc:	68bf      	ldr	r7, [r7, #8]
   10ebe:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
   10ec0:	4577      	cmp	r7, lr
   10ec2:	d209      	bcs.n	10ed8 <ticker_job+0x534>
		if (ticker->ticks_slot) {
   10ec4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10ec6:	69bf      	ldr	r7, [r7, #24]
   10ec8:	2f00      	cmp	r7, #0
   10eca:	d154      	bne.n	10f76 <ticker_job+0x5d2>
		ticks_slot -= ticks_to_expire;
   10ecc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   10ece:	ebae 0e06 	sub.w	lr, lr, r6
		ticker_id_head = ticker->next;
   10ed2:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
   10ed6:	e04c      	b.n	10f72 <ticker_job+0x5ce>
			return TICKER_NULL;
   10ed8:	26ff      	movs	r6, #255	; 0xff
   10eda:	e04c      	b.n	10f76 <ticker_job+0x5d2>
	while (id_insert !=
   10edc:	9b06      	ldr	r3, [sp, #24]
   10ede:	4598      	cmp	r8, r3
   10ee0:	d06a      	beq.n	10fb8 <ticker_job+0x614>
		if (id_collide != TICKER_NULL) {
   10ee2:	9b06      	ldr	r3, [sp, #24]
   10ee4:	2bff      	cmp	r3, #255	; 0xff
   10ee6:	d0a7      	beq.n	10e38 <ticker_job+0x494>
   10ee8:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
   10eea:	b233      	sxth	r3, r6
   10eec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10ef0:	9305      	str	r3, [sp, #20]
   10ef2:	9a05      	ldr	r2, [sp, #20]
   10ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ef6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
   10efa:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
   10efc:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
   10efe:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
   10f00:	bf88      	it	hi
   10f02:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
   10f04:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
   10f06:	bf8c      	ite	hi
   10f08:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
   10f0a:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
   10f0c:	2a00      	cmp	r2, #0
   10f0e:	d093      	beq.n	10e38 <ticker_job+0x494>
   10f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10f12:	4293      	cmp	r3, r2
   10f14:	d890      	bhi.n	10e38 <ticker_job+0x494>
			    skip_collide <= skip &&
   10f16:	78fa      	ldrb	r2, [r7, #3]
   10f18:	78e3      	ldrb	r3, [r4, #3]
   10f1a:	429a      	cmp	r2, r3
   10f1c:	d28c      	bcs.n	10e38 <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
   10f1e:	4631      	mov	r1, r6
   10f20:	4658      	mov	r0, fp
   10f22:	f7ff fc98 	bl	10856 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
   10f26:	78bb      	ldrb	r3, [r7, #2]
   10f28:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
   10f2a:	9a05      	ldr	r2, [sp, #20]
   10f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
   10f2e:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
   10f30:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
   10f34:	46b2      	mov	sl, r6
	ticker_new = &node[id];
   10f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
   10f38:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
   10f3c:	f8db 0018 	ldr.w	r0, [fp, #24]
   10f40:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
   10f42:	eb02 0c03 	add.w	ip, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
   10f46:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
   10f48:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
   10f4c:	f8dc 1008 	ldr.w	r1, [ip, #8]
	previous = current;
   10f50:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
   10f52:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
   10f54:	2bff      	cmp	r3, #255	; 0xff
   10f56:	d006      	beq.n	10f66 <ticker_job+0x5c2>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   10f58:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   10f5c:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
   10f60:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
   10f62:	4281      	cmp	r1, r0
   10f64:	d896      	bhi.n	10e94 <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
   10f66:	f8dc 0018 	ldr.w	r0, [ip, #24]
   10f6a:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
   10f6c:	eb01 0e00 	add.w	lr, r1, r0
   10f70:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
   10f72:	2eff      	cmp	r6, #255	; 0xff
   10f74:	d19c      	bne.n	10eb0 <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
   10f76:	980d      	ldr	r0, [sp, #52]	; 0x34
   10f78:	b128      	cbz	r0, 10f86 <ticker_job+0x5e2>
   10f7a:	9805      	ldr	r0, [sp, #20]
   10f7c:	4281      	cmp	r1, r0
   10f7e:	d3ad      	bcc.n	10edc <ticker_job+0x538>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   10f80:	2eff      	cmp	r6, #255	; 0xff
   10f82:	f040 80d5 	bne.w	11130 <ticker_job+0x78c>
		if (previous == current) {
   10f86:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
   10f88:	f8cc 1008 	str.w	r1, [ip, #8]
		if (previous == current) {
   10f8c:	4283      	cmp	r3, r0
			node[previous].next = id;
   10f8e:	bf18      	it	ne
   10f90:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
   10f94:	f88c 3000 	strb.w	r3, [ip]
			node[previous].next = id;
   10f98:	bf16      	itet	ne
   10f9a:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
   10f9e:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
   10fa2:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
   10fa6:	2bff      	cmp	r3, #255	; 0xff
   10fa8:	d006      	beq.n	10fb8 <ticker_job+0x614>
			node[current].ticks_to_expire -= ticks_to_expire;
   10faa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10fae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10fb2:	689a      	ldr	r2, [r3, #8]
   10fb4:	1a51      	subs	r1, r2, r1
   10fb6:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
   10fb8:	78a3      	ldrb	r3, [r4, #2]
   10fba:	3301      	adds	r3, #1
   10fbc:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   10fbe:	2100      	movs	r1, #0
			if (user_op) {
   10fc0:	2d00      	cmp	r5, #0
   10fc2:	f43f aecd 	beq.w	10d60 <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
   10fc6:	4628      	mov	r0, r5
   10fc8:	f7ff fc8e 	bl	108e8 <ticker_job_op_cb>
   10fcc:	e6c8      	b.n	10d60 <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
   10fce:	2101      	movs	r1, #1
   10fd0:	e7f6      	b.n	10fc0 <ticker_job+0x61c>
		flag_compare_update = 1;
   10fd2:	2301      	movs	r3, #1
   10fd4:	9302      	str	r3, [sp, #8]
   10fd6:	e559      	b.n	10a8c <ticker_job+0xe8>
		user = &users[count_user];
   10fd8:	9b01      	ldr	r3, [sp, #4]
   10fda:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
   10fde:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
   10fe0:	786b      	ldrb	r3, [r5, #1]
   10fe2:	78ea      	ldrb	r2, [r5, #3]
   10fe4:	429a      	cmp	r2, r3
   10fe6:	f43f ad56 	beq.w	10a96 <ticker_job+0xf2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   10fea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10fee:	011a      	lsls	r2, r3, #4
   10ff0:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
   10ff2:	5cb2      	ldrb	r2, [r6, r2]
   10ff4:	2a01      	cmp	r2, #1
   10ff6:	d024      	beq.n	11042 <ticker_job+0x69e>
   10ff8:	2a02      	cmp	r2, #2
   10ffa:	d129      	bne.n	11050 <ticker_job+0x6ac>
		ticker_by_next_slot_get(instance,
   10ffc:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   11000:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   11004:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
   11008:	f8db c000 	ldr.w	ip, [fp]
   1100c:	f8db 1014 	ldr.w	r1, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   11010:	2aff      	cmp	r2, #255	; 0xff
   11012:	d002      	beq.n	1101a <ticker_job+0x676>
   11014:	6807      	ldr	r7, [r0, #0]
   11016:	42b9      	cmp	r1, r7
   11018:	d023      	beq.n	11062 <ticker_job+0x6be>
		_ticker_id_head = instance->ticker_id_head;
   1101a:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   1101e:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0;
   11020:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   11022:	2aff      	cmp	r2, #255	; 0xff
   11024:	d009      	beq.n	1103a <ticker_job+0x696>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   11026:	eb02 0882 	add.w	r8, r2, r2, lsl #2
   1102a:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
   1102e:	f8da 0008 	ldr.w	r0, [sl, #8]
   11032:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   11034:	f8da 0018 	ldr.w	r0, [sl, #24]
   11038:	b1d0      	cbz	r0, 11070 <ticker_job+0x6cc>
	*ticker_id_head = _ticker_id_head;
   1103a:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   1103e:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   11042:	2200      	movs	r2, #0
   11044:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
   11046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
   11048:	b112      	cbz	r2, 11050 <ticker_job+0x6ac>
		fp_op_func(uop->status, uop->op_context);
   1104a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1104c:	2000      	movs	r0, #0
   1104e:	4790      	blx	r2
			first = user->first + 1;
   11050:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
   11052:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
   11054:	3301      	adds	r3, #1
   11056:	b2db      	uxtb	r3, r3
				first = 0;
   11058:	429a      	cmp	r2, r3
   1105a:	bf08      	it	eq
   1105c:	2300      	moveq	r3, #0
			user->first = first;
   1105e:	706b      	strb	r3, [r5, #1]
   11060:	e7be      	b.n	10fe0 <ticker_job+0x63c>
		ticker = &node[_ticker_id_head];
   11062:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
   11066:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   1106a:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
   1106e:	e7d8      	b.n	11022 <ticker_job+0x67e>
		_ticker_id_head = ticker->next;
   11070:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
   11074:	e7d5      	b.n	11022 <ticker_job+0x67e>
   11076:	bf00      	nop
   11078:	ff172b5a 	.word	0xff172b5a
   1107c:	7f172b59 	.word	0x7f172b59
	if (ticker_id_old_head == TICKER_NULL) {
   11080:	9b03      	ldr	r3, [sp, #12]
   11082:	2bff      	cmp	r3, #255	; 0xff
   11084:	d107      	bne.n	11096 <ticker_job+0x6f2>
		ticks_current = cntr_cnt_get();
   11086:	f00c fb31 	bl	1d6ec <cntr_cnt_get>
   1108a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   1108c:	f00c fae8 	bl	1d660 <cntr_start>
   11090:	b908      	cbnz	r0, 11096 <ticker_job+0x6f2>
			instance->ticks_current = ticks_current;
   11092:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
   11096:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   1109a:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
   1109e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
   110a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   110a6:	260a      	movs	r6, #10
   110a8:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
   110aa:	f00c fb1f 	bl	1d6ec <cntr_cnt_get>
		cc = instance->ticks_current;
   110ae:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   110b2:	1b03      	subs	r3, r0, r4
   110b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   110b8:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
   110ba:	42ab      	cmp	r3, r5
   110bc:	bf2c      	ite	cs
   110be:	18e4      	addcs	r4, r4, r3
   110c0:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
   110c2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   110c6:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
   110c8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   110cc:	4620      	mov	r0, r4
   110ce:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   110d0:	f00c fb0c 	bl	1d6ec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   110d4:	1bc0      	subs	r0, r0, r7
   110d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   110da:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   110dc:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   110de:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   110e2:	42a0      	cmp	r0, r4
   110e4:	f67f aceb 	bls.w	10abe <ticker_job+0x11a>
		LL_ASSERT(i);
   110e8:	3e01      	subs	r6, #1
   110ea:	d1de      	bne.n	110aa <ticker_job+0x706>
   110ec:	4b14      	ldr	r3, [pc, #80]	; (11140 <ticker_job+0x79c>)
   110ee:	681b      	ldr	r3, [r3, #0]
   110f0:	075b      	lsls	r3, r3, #29
   110f2:	d010      	beq.n	11116 <ticker_job+0x772>
   110f4:	2301      	movs	r3, #1
   110f6:	f04f 0200 	mov.w	r2, #0
   110fa:	f363 0202 	bfi	r2, r3, #0, #3
   110fe:	4911      	ldr	r1, [pc, #68]	; (11144 <ticker_job+0x7a0>)
   11100:	4b11      	ldr	r3, [pc, #68]	; (11148 <ticker_job+0x7a4>)
   11102:	4812      	ldr	r0, [pc, #72]	; (1114c <ticker_job+0x7a8>)
   11104:	1a5b      	subs	r3, r3, r1
   11106:	f366 02c5 	bfi	r2, r6, #3, #3
   1110a:	08db      	lsrs	r3, r3, #3
   1110c:	f363 128f 	bfi	r2, r3, #6, #10
   11110:	490f      	ldr	r1, [pc, #60]	; (11150 <ticker_job+0x7ac>)
   11112:	f7f0 fe21 	bl	1d58 <log_1>
   11116:	4040      	eors	r0, r0
   11118:	f380 8811 	msr	BASEPRI, r0
   1111c:	f04f 0004 	mov.w	r0, #4
   11120:	df02      	svc	2
	if (!pending) {
   11122:	2b00      	cmp	r3, #0
   11124:	f43f af55 	beq.w	10fd2 <ticker_job+0x62e>
	instance->job_guard = 0;
   11128:	2300      	movs	r3, #0
   1112a:	f88b 301e 	strb.w	r3, [fp, #30]
   1112e:	e4bc      	b.n	10aaa <ticker_job+0x106>
	while (id_insert !=
   11130:	45b0      	cmp	r8, r6
   11132:	f47f aeda 	bne.w	10eea <ticker_job+0x546>
   11136:	e73f      	b.n	10fb8 <ticker_job+0x614>
}
   11138:	b013      	add	sp, #76	; 0x4c
   1113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1113e:	bf00      	nop
   11140:	2000d744 	.word	0x2000d744
   11144:	0002cff8 	.word	0x0002cff8
   11148:	0002d060 	.word	0x0002d060
   1114c:	000304bb 	.word	0x000304bb
   11150:	00030492 	.word	0x00030492

00011154 <ticker_init>:
{
   11154:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
   11156:	4e1c      	ldr	r6, [pc, #112]	; (111c8 <ticker_init+0x74>)
{
   11158:	9f05      	ldr	r7, [sp, #20]
   1115a:	f89d 4018 	ldrb.w	r4, [sp, #24]
   1115e:	f8dd c01c 	ldr.w	ip, [sp, #28]
	instance->count_node = count_node;
   11162:	252c      	movs	r5, #44	; 0x2c
   11164:	4345      	muls	r5, r0
   11166:	eb06 0e05 	add.w	lr, r6, r5
	instance->node = node;
   1116a:	5172      	str	r2, [r6, r5]
	instance->count_node = count_node;
   1116c:	f88e 1008 	strb.w	r1, [lr, #8]
	instance->count_user = count_user;
   11170:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
   11174:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
   11178:	3b01      	subs	r3, #1
   1117a:	b2db      	uxtb	r3, r3
   1117c:	2bff      	cmp	r3, #255	; 0xff
   1117e:	d113      	bne.n	111a8 <ticker_init+0x54>
	if (count_op) {
   11180:	bb04      	cbnz	r4, 111c4 <ticker_init+0x70>
	instance->caller_id_get_cb = caller_id_get_cb;
   11182:	232c      	movs	r3, #44	; 0x2c
   11184:	4358      	muls	r0, r3
   11186:	1833      	adds	r3, r6, r0
   11188:	9a08      	ldr	r2, [sp, #32]
   1118a:	621a      	str	r2, [r3, #32]
	instance->sched_cb = sched_cb;
   1118c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1118e:	625a      	str	r2, [r3, #36]	; 0x24
   11190:	3018      	adds	r0, #24
	instance->trigger_set_cb = trigger_set_cb;
   11192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11194:	629a      	str	r2, [r3, #40]	; 0x28
   11196:	1832      	adds	r2, r6, r0
	instance->ticks_slot_previous = 0;
   11198:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1119c:	5034      	str	r4, [r6, r0]
   1119e:	8091      	strh	r1, [r2, #4]
	return TICKER_STATUS_SUCCESS;
   111a0:	4620      	mov	r0, r4
	instance->ticks_current = 0;
   111a2:	615c      	str	r4, [r3, #20]
	instance->ticks_elapsed_first = 0;
   111a4:	815c      	strh	r4, [r3, #10]
}
   111a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
   111a8:	b21a      	sxth	r2, r3
   111aa:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
   111ae:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
   111b2:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
   111b6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
   111ba:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
   111bc:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
		count_op -= users[count_user].count_user_op;
   111c0:	b2e4      	uxtb	r4, r4
   111c2:	e7d9      	b.n	11178 <ticker_init+0x24>
		return TICKER_STATUS_FAILURE;
   111c4:	2001      	movs	r0, #1
   111c6:	e7ee      	b.n	111a6 <ticker_init+0x52>
   111c8:	200010a8 	.word	0x200010a8

000111cc <ticker_trigger>:
	instance = &_instance[instance_index];
   111cc:	4a07      	ldr	r2, [pc, #28]	; (111ec <ticker_trigger+0x20>)
   111ce:	212c      	movs	r1, #44	; 0x2c
   111d0:	fb00 2301 	mla	r3, r0, r1, r2
{
   111d4:	b410      	push	{r4}
	if (instance->sched_cb) {
   111d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   111d8:	b12c      	cbz	r4, 111e6 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   111da:	46a4      	mov	ip, r4
   111dc:	2201      	movs	r2, #1
   111de:	2103      	movs	r1, #3
   111e0:	2002      	movs	r0, #2
}
   111e2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   111e4:	4760      	bx	ip
}
   111e6:	bc10      	pop	{r4}
   111e8:	4770      	bx	lr
   111ea:	bf00      	nop
   111ec:	200010a8 	.word	0x200010a8

000111f0 <ticker_start>:
{
   111f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   111f4:	4c22      	ldr	r4, [pc, #136]	; (11280 <ticker_start+0x90>)
   111f6:	272c      	movs	r7, #44	; 0x2c
   111f8:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   111fc:	b20d      	sxth	r5, r1
   111fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   11202:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   11206:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   1120a:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1120e:	1c66      	adds	r6, r4, #1
   11210:	b2f6      	uxtb	r6, r6
		last = 0;
   11212:	42b0      	cmp	r0, r6
   11214:	bf98      	it	ls
   11216:	2600      	movls	r6, #0
	if (last == user->first) {
   11218:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1121c:	42b0      	cmp	r0, r6
   1121e:	d02d      	beq.n	1127c <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
   11220:	f8dc 0004 	ldr.w	r0, [ip, #4]
   11224:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11228:	0125      	lsls	r5, r4, #4
   1122a:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
   1122c:	f04f 0e03 	mov.w	lr, #3
   11230:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
   11234:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   11236:	9b06      	ldr	r3, [sp, #24]
   11238:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   1123a:	9b07      	ldr	r3, [sp, #28]
   1123c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   1123e:	9b08      	ldr	r3, [sp, #32]
   11240:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11244:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   11246:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1124a:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   1124c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1124e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   11250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11252:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   11254:	2302      	movs	r3, #2
   11256:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   11258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1125a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   1125c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   1125e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   11260:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   11262:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11266:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   1126a:	4608      	mov	r0, r1
   1126c:	4798      	blx	r3
   1126e:	4643      	mov	r3, r8
   11270:	2200      	movs	r2, #0
   11272:	2104      	movs	r1, #4
   11274:	47a8      	blx	r5
	return user_op->status;
   11276:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   11278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1127c:	2001      	movs	r0, #1
   1127e:	e7fb      	b.n	11278 <ticker_start+0x88>
   11280:	200010a8 	.word	0x200010a8

00011284 <ticker_update>:
{
   11284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11288:	4c22      	ldr	r4, [pc, #136]	; (11314 <ticker_update+0x90>)
   1128a:	272c      	movs	r7, #44	; 0x2c
   1128c:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
   11290:	b20d      	sxth	r5, r1
   11292:	f8d9 0004 	ldr.w	r0, [r9, #4]
   11296:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   1129a:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   1129e:	f89c 4003 	ldrb.w	r4, [ip, #3]
   112a2:	1c66      	adds	r6, r4, #1
   112a4:	b2f6      	uxtb	r6, r6
		last = 0;
   112a6:	42b0      	cmp	r0, r6
   112a8:	bf98      	it	ls
   112aa:	2600      	movls	r6, #0
	if (last == user->first) {
   112ac:	f89c 0001 	ldrb.w	r0, [ip, #1]
   112b0:	42b0      	cmp	r0, r6
   112b2:	d02d      	beq.n	11310 <ticker_update+0x8c>
	user_op = &user->user_op[user->last];
   112b4:	f8dc 0004 	ldr.w	r0, [ip, #4]
   112b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   112bc:	0125      	lsls	r5, r4, #4
   112be:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   112c0:	f04f 0804 	mov.w	r8, #4
   112c4:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   112c8:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   112ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   112ce:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   112d0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   112d4:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   112d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   112da:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   112dc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   112e0:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   112e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   112e6:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   112e8:	2302      	movs	r3, #2
   112ea:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   112ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   112ee:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   112f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   112f2:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   112f4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   112f6:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   112fa:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   112fe:	4608      	mov	r0, r1
   11300:	4798      	blx	r3
   11302:	464b      	mov	r3, r9
   11304:	2200      	movs	r2, #0
   11306:	4641      	mov	r1, r8
   11308:	47a8      	blx	r5
	return user_op->status;
   1130a:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   1130c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   11310:	2001      	movs	r0, #1
   11312:	e7fb      	b.n	1130c <ticker_update+0x88>
   11314:	200010a8 	.word	0x200010a8

00011318 <ticker_stop>:
{
   11318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1131c:	4c1a      	ldr	r4, [pc, #104]	; (11388 <ticker_stop+0x70>)
   1131e:	262c      	movs	r6, #44	; 0x2c
   11320:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   11324:	b20f      	sxth	r7, r1
   11326:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1132a:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   1132e:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   11332:	f89c 4003 	ldrb.w	r4, [ip, #3]
   11336:	1c65      	adds	r5, r4, #1
   11338:	b2ed      	uxtb	r5, r5
		last = 0;
   1133a:	42a8      	cmp	r0, r5
   1133c:	bf98      	it	ls
   1133e:	2500      	movls	r5, #0
	if (last == user->first) {
   11340:	f89c 0001 	ldrb.w	r0, [ip, #1]
   11344:	42a8      	cmp	r0, r5
   11346:	d01c      	beq.n	11382 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   11348:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1134c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11350:	0124      	lsls	r4, r4, #4
   11352:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   11354:	f04f 0e05 	mov.w	lr, #5
   11358:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
   1135c:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1135e:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   11360:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   11364:	9b06      	ldr	r3, [sp, #24]
   11366:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   11368:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1136c:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   11370:	4608      	mov	r0, r1
   11372:	4798      	blx	r3
   11374:	4643      	mov	r3, r8
   11376:	2200      	movs	r2, #0
   11378:	2104      	movs	r1, #4
   1137a:	47a0      	blx	r4
	return user_op->status;
   1137c:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   1137e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11382:	2001      	movs	r0, #1
   11384:	e7fb      	b.n	1137e <ticker_stop+0x66>
   11386:	bf00      	nop
   11388:	200010a8 	.word	0x200010a8

0001138c <ticker_next_slot_get>:
{
   1138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11390:	4c1c      	ldr	r4, [pc, #112]	; (11404 <ticker_next_slot_get+0x78>)
   11392:	272c      	movs	r7, #44	; 0x2c
   11394:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   11398:	b20d      	sxth	r5, r1
   1139a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1139e:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   113a2:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   113a6:	f89c 4003 	ldrb.w	r4, [ip, #3]
   113aa:	1c66      	adds	r6, r4, #1
   113ac:	b2f6      	uxtb	r6, r6
		last = 0;
   113ae:	42b0      	cmp	r0, r6
   113b0:	bf98      	it	ls
   113b2:	2600      	movls	r6, #0
	if (last == user->first) {
   113b4:	f89c 0001 	ldrb.w	r0, [ip, #1]
   113b8:	42b0      	cmp	r0, r6
   113ba:	d021      	beq.n	11400 <ticker_next_slot_get+0x74>
	user_op = &user->user_op[user->last];
   113bc:	f8dc e004 	ldr.w	lr, [ip, #4]
   113c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   113c4:	0125      	lsls	r5, r4, #4
   113c6:	eb0e 0405 	add.w	r4, lr, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   113ca:	2002      	movs	r0, #2
   113cc:	f80e 0005 	strb.w	r0, [lr, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
   113d0:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   113d4:	9b06      	ldr	r3, [sp, #24]
   113d6:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   113d8:	9b07      	ldr	r3, [sp, #28]
   113da:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
   113dc:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
   113de:	9b08      	ldr	r3, [sp, #32]
	user_op->id = TICKER_NULL;
   113e0:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   113e2:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   113e4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   113e6:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   113ea:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   113ee:	4608      	mov	r0, r1
   113f0:	4798      	blx	r3
   113f2:	4643      	mov	r3, r8
   113f4:	2200      	movs	r2, #0
   113f6:	2104      	movs	r1, #4
   113f8:	47a8      	blx	r5
	return user_op->status;
   113fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   113fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11400:	2001      	movs	r0, #1
   11402:	e7fb      	b.n	113fc <ticker_next_slot_get+0x70>
   11404:	200010a8 	.word	0x200010a8

00011408 <ticker_job_idle_get>:
{
   11408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1140c:	4c1a      	ldr	r4, [pc, #104]	; (11478 <ticker_job_idle_get+0x70>)
   1140e:	262c      	movs	r6, #44	; 0x2c
   11410:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   11414:	b20f      	sxth	r7, r1
   11416:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1141a:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   1141e:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   11422:	f89c 4003 	ldrb.w	r4, [ip, #3]
   11426:	1c65      	adds	r5, r4, #1
   11428:	b2ed      	uxtb	r5, r5
		last = 0;
   1142a:	42a8      	cmp	r0, r5
   1142c:	bf98      	it	ls
   1142e:	2500      	movls	r5, #0
	if (last == user->first) {
   11430:	f89c 0001 	ldrb.w	r0, [ip, #1]
   11434:	42a8      	cmp	r0, r5
   11436:	d01c      	beq.n	11472 <ticker_job_idle_get+0x6a>
	user_op = &user->user_op[user->last];
   11438:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1143c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11440:	0124      	lsls	r4, r4, #4
   11442:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   11444:	f04f 0e01 	mov.w	lr, #1
   11448:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = TICKER_NULL;
   1144c:	20ff      	movs	r0, #255	; 0xff
   1144e:	7078      	strb	r0, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11450:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
   11452:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   11456:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   11458:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1145c:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   11460:	4608      	mov	r0, r1
   11462:	4798      	blx	r3
   11464:	4643      	mov	r3, r8
   11466:	2200      	movs	r2, #0
   11468:	2104      	movs	r1, #4
   1146a:	47a0      	blx	r4
	return user_op->status;
   1146c:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   1146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11472:	2001      	movs	r0, #1
   11474:	e7fb      	b.n	1146e <ticker_job_idle_get+0x66>
   11476:	bf00      	nop
   11478:	200010a8 	.word	0x200010a8

0001147c <ticker_job_sched>:
{
   1147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11480:	4c08      	ldr	r4, [pc, #32]	; (114a4 <ticker_job_sched+0x28>)
   11482:	252c      	movs	r5, #44	; 0x2c
   11484:	fb05 4300 	mla	r3, r5, r0, r4
   11488:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
   1148c:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1148e:	4608      	mov	r0, r1
   11490:	4798      	blx	r3
   11492:	fb06 4305 	mla	r3, r6, r5, r4
   11496:	46bc      	mov	ip, r7
   11498:	2200      	movs	r2, #0
   1149a:	2104      	movs	r1, #4
}
   1149c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   114a0:	4760      	bx	ip
   114a2:	bf00      	nop
   114a4:	200010a8 	.word	0x200010a8

000114a8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   114a8:	f00c b920 	b.w	1d6ec <cntr_cnt_get>

000114ac <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   114ac:	1a40      	subs	r0, r0, r1
}
   114ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   114b2:	4770      	bx	lr

000114b4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   114b4:	b508      	push	{r3, lr}
   114b6:	4603      	mov	r3, r0
	if (addr_type > 1) {
   114b8:	2b01      	cmp	r3, #1
{
   114ba:	4608      	mov	r0, r1
	if (addr_type > 1) {
   114bc:	d80e      	bhi.n	114dc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   114be:	b133      	cbz	r3, 114ce <ll_addr_get+0x1a>
		if (bdaddr) {
   114c0:	b119      	cbz	r1, 114ca <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   114c2:	2206      	movs	r2, #6
   114c4:	4906      	ldr	r1, [pc, #24]	; (114e0 <ll_addr_get+0x2c>)
   114c6:	f7f4 fcdf 	bl	5e88 <memcpy>
		}

		return rnd_addr;
   114ca:	4805      	ldr	r0, [pc, #20]	; (114e0 <ll_addr_get+0x2c>)
   114cc:	e007      	b.n	114de <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   114ce:	b119      	cbz	r1, 114d8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   114d0:	2206      	movs	r2, #6
   114d2:	4904      	ldr	r1, [pc, #16]	; (114e4 <ll_addr_get+0x30>)
   114d4:	f7f4 fcd8 	bl	5e88 <memcpy>
	}

	return pub_addr;
   114d8:	4802      	ldr	r0, [pc, #8]	; (114e4 <ll_addr_get+0x30>)
   114da:	e000      	b.n	114de <ll_addr_get+0x2a>
		return NULL;
   114dc:	2000      	movs	r0, #0
}
   114de:	bd08      	pop	{r3, pc}
   114e0:	20001106 	.word	0x20001106
   114e4:	20001100 	.word	0x20001100

000114e8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   114e8:	b570      	push	{r4, r5, r6, lr}
   114ea:	4606      	mov	r6, r0
   114ec:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
   114ee:	f007 fba5 	bl	18c3c <ll_adv_is_enabled>
   114f2:	4604      	mov	r4, r0
   114f4:	b110      	cbz	r0, 114fc <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   114f6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   114f8:	4620      	mov	r0, r4
   114fa:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
   114fc:	f007 fbb2 	bl	18c64 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
   11500:	f010 0f06 	tst.w	r0, #6
   11504:	d1f7      	bne.n	114f6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11506:	2206      	movs	r2, #6
   11508:	4629      	mov	r1, r5
	if (addr_type) {
   1150a:	b11e      	cbz	r6, 11514 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1150c:	4802      	ldr	r0, [pc, #8]	; (11518 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   1150e:	f7f4 fcbb 	bl	5e88 <memcpy>
   11512:	e7f1      	b.n	114f8 <ll_addr_set+0x10>
   11514:	4801      	ldr	r0, [pc, #4]	; (1151c <ll_addr_set+0x34>)
   11516:	e7fa      	b.n	1150e <ll_addr_set+0x26>
   11518:	20001106 	.word	0x20001106
   1151c:	20001100 	.word	0x20001100

00011520 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
   11520:	2300      	movs	r3, #0
   11522:	7003      	strb	r3, [r0, #0]
	*max = 0;
   11524:	700b      	strb	r3, [r1, #0]
}
   11526:	4770      	bx	lr

00011528 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
   11528:	bf20      	wfe
	__SEV();
   1152a:	bf40      	sev
	__WFE();
   1152c:	bf20      	wfe
}
   1152e:	4770      	bx	lr

00011530 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
   11530:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   11532:	4b0d      	ldr	r3, [pc, #52]	; (11568 <pdu_len_cmp+0x38>)
{
   11534:	b089      	sub	sp, #36	; 0x24
   11536:	4605      	mov	r5, r0
   11538:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   1153a:	aa01      	add	r2, sp, #4
   1153c:	f103 0718 	add.w	r7, r3, #24
   11540:	6818      	ldr	r0, [r3, #0]
   11542:	6859      	ldr	r1, [r3, #4]
   11544:	4614      	mov	r4, r2
   11546:	c403      	stmia	r4!, {r0, r1}
   11548:	3308      	adds	r3, #8
   1154a:	42bb      	cmp	r3, r7
   1154c:	4622      	mov	r2, r4
   1154e:	d1f7      	bne.n	11540 <pdu_len_cmp+0x10>
   11550:	881b      	ldrh	r3, [r3, #0]
   11552:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   11554:	ab08      	add	r3, sp, #32
   11556:	441d      	add	r5, r3
   11558:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   1155c:	1b83      	subs	r3, r0, r6
   1155e:	4258      	negs	r0, r3
   11560:	4158      	adcs	r0, r3
   11562:	b009      	add	sp, #36	; 0x24
   11564:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11566:	bf00      	nop
   11568:	0002d24c 	.word	0x0002d24c

0001156c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
   1156c:	6008      	str	r0, [r1, #0]
}
   1156e:	4770      	bx	lr

00011570 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
   11570:	4b02      	ldr	r3, [pc, #8]	; (1157c <mayfly_xtal_start+0xc>)
   11572:	6818      	ldr	r0, [r3, #0]
   11574:	6843      	ldr	r3, [r0, #4]
   11576:	2100      	movs	r1, #0
   11578:	681b      	ldr	r3, [r3, #0]
   1157a:	4718      	bx	r3
   1157c:	2000110c 	.word	0x2000110c

00011580 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
   11580:	b918      	cbnz	r0, 1158a <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
   11582:	680b      	ldr	r3, [r1, #0]
   11584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11588:	600b      	str	r3, [r1, #0]
	}
}
   1158a:	4770      	bx	lr

0001158c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
   1158c:	b918      	cbnz	r0, 11596 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
   1158e:	680b      	ldr	r3, [r1, #0]
   11590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   11594:	600b      	str	r3, [r1, #0]
	}
}
   11596:	4770      	bx	lr

00011598 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
   11598:	b570      	push	{r4, r5, r6, lr}
   1159a:	1d03      	adds	r3, r0, #4
   1159c:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
   1159e:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
   115a0:	429d      	cmp	r5, r3
   115a2:	d101      	bne.n	115a8 <chan_sel_remap+0x10>
   115a4:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
   115a6:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
   115a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
   115ac:	2200      	movs	r2, #0
   115ae:	18a0      	adds	r0, r4, r2
   115b0:	2a08      	cmp	r2, #8
   115b2:	b2c0      	uxtb	r0, r0
   115b4:	d101      	bne.n	115ba <chan_sel_remap+0x22>
   115b6:	4604      	mov	r4, r0
   115b8:	e7f2      	b.n	115a0 <chan_sel_remap+0x8>
			if (bite & 0x01) {
   115ba:	f016 0f01 	tst.w	r6, #1
   115be:	d003      	beq.n	115c8 <chan_sel_remap+0x30>
				if (chan_index == 0) {
   115c0:	2900      	cmp	r1, #0
   115c2:	d0f0      	beq.n	115a6 <chan_sel_remap+0xe>
				chan_index--;
   115c4:	3901      	subs	r1, #1
   115c6:	b2c9      	uxtb	r1, r1
			bite >>= 1;
   115c8:	0876      	lsrs	r6, r6, #1
   115ca:	3201      	adds	r2, #1
   115cc:	e7ef      	b.n	115ae <chan_sel_remap+0x16>
	...

000115d0 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   115d0:	4b09      	ldr	r3, [pc, #36]	; (115f8 <packet_rx_acquired_count_get+0x28>)
   115d2:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
   115d6:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
   115da:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
   115dc:	bf3b      	ittet	cc
   115de:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
   115e2:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
   115e6:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
   115ea:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
   115ec:	bf2c      	ite	cs
   115ee:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
   115f0:	1a80      	subcc	r0, r0, r2
   115f2:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
   115f4:	4770      	bx	lr
   115f6:	bf00      	nop
   115f8:	2000110c 	.word	0x2000110c

000115fc <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
   115fc:	b508      	push	{r3, lr}
   115fe:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
   11600:	f7ff ffe6 	bl	115d0 <packet_rx_acquired_count_get>
   11604:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   11606:	bf23      	ittte	cs
   11608:	4b04      	ldrcs	r3, [pc, #16]	; (1161c <packet_rx_reserve_get+0x20>)
   1160a:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
   1160e:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
		return 0;
   11612:	2000      	movcc	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
   11614:	bf28      	it	cs
   11616:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
}
   1161a:	bd08      	pop	{r3, pc}
   1161c:	2000110c 	.word	0x2000110c

00011620 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
   11620:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
   11622:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   11626:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   1162a:	4299      	cmp	r1, r3
   1162c:	d15c      	bne.n	116e8 <conn_update_req+0xc8>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
   1162e:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
   11632:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11636:	42a3      	cmp	r3, r4
   11638:	d156      	bne.n	116e8 <conn_update_req+0xc8>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
   1163a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1163e:	2b00      	cmp	r3, #0
   11640:	db25      	blt.n	1168e <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
   11642:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
   11644:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
   11646:	f8a0 407c 	strh.w	r4, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   1164a:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
   1164c:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   11650:	4354      	muls	r4, r2
					      conn->supervision_reload *
   11652:	227d      	movs	r2, #125	; 0x7d
   11654:	4362      	muls	r2, r4
					      125 / 1000;
   11656:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1165a:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   1165e:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11662:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
   11666:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11668:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   1166c:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
   1166e:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
   11670:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
   11674:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
   11676:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1167a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
   1167e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   11682:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
   11686:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
   1168a:	4618      	mov	r0, r3
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
}
   1168c:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
   1168e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11692:	06d9      	lsls	r1, r3, #27
   11694:	d42a      	bmi.n	116ec <conn_update_req+0xcc>
		   (!conn->common.fex_valid ||
   11696:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
   1169a:	069a      	lsls	r2, r3, #26
   1169c:	d503      	bpl.n	116a6 <conn_update_req+0x86>
		    (conn->llcp_features &
   1169e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
   116a2:	079b      	lsls	r3, r3, #30
   116a4:	d522      	bpl.n	116ec <conn_update_req+0xcc>
		conn->llcp_conn_param.latency = conn->latency;
   116a6:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval_min = conn->conn_interval;
   116a8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
   116aa:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
						conn->supervision_reload *
   116ae:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval_min = conn->conn_interval;
   116b0:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
   116b4:	4351      	muls	r1, r2
		conn->llcp_conn_param.interval_max = conn->conn_interval;
   116b6:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   116ba:	227d      	movs	r2, #125	; 0x7d
   116bc:	434a      	muls	r2, r1
						125 / 1000;
   116be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   116c2:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp_conn_param.timeout = conn->conn_interval *
   116c6:	f8a0 20ca 	strh.w	r2, [r0, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   116ca:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
   116ce:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
   116d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   116d4:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
   116d8:	3c01      	subs	r4, #1
		conn->llcp_conn_param.status = 0;
   116da:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
   116de:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   116e2:	f880 40c1 	strb.w	r4, [r0, #193]	; 0xc1
   116e6:	e7d0      	b.n	1168a <conn_update_req+0x6a>
		return 1;
   116e8:	2001      	movs	r0, #1
   116ea:	e7cf      	b.n	1168c <conn_update_req+0x6c>
	return 2;
   116ec:	2002      	movs	r0, #2
   116ee:	e7cd      	b.n	1168c <conn_update_req+0x6c>

000116f0 <packet_rx_allocate>:
{
   116f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
   116f4:	4d22      	ldr	r5, [pc, #136]	; (11780 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
   116f6:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
   116fa:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
   116fe:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
   11702:	3401      	adds	r4, #1
   11704:	4581      	cmp	r9, r0
   11706:	b2e4      	uxtb	r4, r4
   11708:	bf28      	it	cs
   1170a:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
   1170c:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
   11710:	42a3      	cmp	r3, r4
   11712:	bf08      	it	eq
   11714:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11716:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   1171a:	f1b9 0f00 	cmp.w	r9, #0
   1171e:	d003      	beq.n	11728 <packet_rx_allocate+0x38>
   11720:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
   11724:	42a3      	cmp	r3, r4
   11726:	d101      	bne.n	1172c <packet_rx_allocate+0x3c>
}
   11728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
   1172c:	4638      	mov	r0, r7
   1172e:	f7fe fed9 	bl	104e4 <mem_acquire>
		if (!link) {
   11732:	4606      	mov	r6, r0
   11734:	2800      	cmp	r0, #0
   11736:	d0f7      	beq.n	11728 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11738:	4640      	mov	r0, r8
   1173a:	f7fe fed3 	bl	104e4 <mem_acquire>
		if (!node_rx) {
   1173e:	b928      	cbnz	r0, 1174c <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
   11740:	4630      	mov	r0, r6
   11742:	4910      	ldr	r1, [pc, #64]	; (11784 <packet_rx_allocate+0x94>)
}
   11744:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
   11748:	f7fe bee5 	b.w	10516 <mem_release>
		node_rx->hdr.onion.link = link;
   1174c:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
   1174e:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
   11752:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   11756:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
   1175a:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
   1175e:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
   11762:	3401      	adds	r4, #1
   11764:	b2e4      	uxtb	r4, r4
			acquire = 0;
   11766:	42a3      	cmp	r3, r4
   11768:	bf08      	it	eq
   1176a:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
   1176c:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   11770:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   11774:	3b01      	subs	r3, #1
   11776:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
   1177a:	fa5f f989 	uxtb.w	r9, r9
   1177e:	e7cc      	b.n	1171a <packet_rx_allocate+0x2a>
   11780:	2000110c 	.word	0x2000110c
   11784:	20001254 	.word	0x20001254

00011788 <common_init>:
{
   11788:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
   1178a:	4c3d      	ldr	r4, [pc, #244]	; (11880 <common_init+0xf8>)
   1178c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   11790:	2a00      	cmp	r2, #0
   11792:	d04c      	beq.n	1182e <common_init+0xa6>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
   11794:	f504 7386 	add.w	r3, r4, #268	; 0x10c
   11798:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1179c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   117a0:	f7fe fe7c 	bl	1049c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
   117a4:	4b37      	ldr	r3, [pc, #220]	; (11884 <common_init+0xfc>)
   117a6:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   117aa:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
   117ae:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   117b2:	f7fe fe73 	bl	1049c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
   117b6:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   117ba:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
   117be:	4b32      	ldr	r3, [pc, #200]	; (11888 <common_init+0x100>)
   117c0:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   117c4:	440a      	add	r2, r1
   117c6:	2108      	movs	r1, #8
   117c8:	f7fe fe68 	bl	1049c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
   117cc:	4b2f      	ldr	r3, [pc, #188]	; (1188c <common_init+0x104>)
   117ce:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
   117d2:	2202      	movs	r2, #2
   117d4:	2124      	movs	r1, #36	; 0x24
   117d6:	f7fe fe61 	bl	1049c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   117da:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   117de:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
   117e2:	4b2b      	ldr	r3, [pc, #172]	; (11890 <common_init+0x108>)
   117e4:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
   117e8:	3a01      	subs	r2, #1
   117ea:	b292      	uxth	r2, r2
   117ec:	f7fe fe56 	bl	1049c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
   117f0:	4825      	ldr	r0, [pc, #148]	; (11888 <common_init+0x100>)
   117f2:	f7fe fe77 	bl	104e4 <mem_acquire>
	LL_ASSERT(link);
   117f6:	b9e8      	cbnz	r0, 11834 <common_init+0xac>
   117f8:	4a26      	ldr	r2, [pc, #152]	; (11894 <common_init+0x10c>)
   117fa:	6812      	ldr	r2, [r2, #0]
   117fc:	0752      	lsls	r2, r2, #29
   117fe:	d010      	beq.n	11822 <common_init+0x9a>
   11800:	2101      	movs	r1, #1
   11802:	f04f 0200 	mov.w	r2, #0
   11806:	f361 0202 	bfi	r2, r1, #0, #3
   1180a:	4b23      	ldr	r3, [pc, #140]	; (11898 <common_init+0x110>)
   1180c:	4923      	ldr	r1, [pc, #140]	; (1189c <common_init+0x114>)
   1180e:	1a5b      	subs	r3, r3, r1
   11810:	f360 02c5 	bfi	r2, r0, #3, #3
   11814:	08db      	lsrs	r3, r3, #3
   11816:	f363 128f 	bfi	r2, r3, #6, #10
   1181a:	4921      	ldr	r1, [pc, #132]	; (118a0 <common_init+0x118>)
   1181c:	4821      	ldr	r0, [pc, #132]	; (118a4 <common_init+0x11c>)
   1181e:	f7f0 fa9b 	bl	1d58 <log_1>
   11822:	4040      	eors	r0, r0
   11824:	f380 8811 	msr	BASEPRI, r0
   11828:	f04f 0004 	mov.w	r0, #4
   1182c:	df02      	svc	2
		_radio.conn_free = NULL;
   1182e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   11832:	e7b7      	b.n	117a4 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
   11834:	4a1c      	ldr	r2, [pc, #112]	; (118a8 <common_init+0x120>)
   11836:	1f11      	subs	r1, r2, #4
   11838:	f7fe feaa 	bl	10590 <memq_init>
	_radio.advertiser.chan_map = 0x07;
   1183c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11840:	f043 0338 	orr.w	r3, r3, #56	; 0x38
   11844:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
   11848:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1184c:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
   11850:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
   11854:	f242 531f 	movw	r3, #9503	; 0x251f
   11858:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1185c:	231b      	movs	r3, #27
   1185e:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
   11862:	f44f 73a4 	mov.w	r3, #328	; 0x148
   11866:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
   1186a:	2303      	movs	r3, #3
   1186c:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
   11870:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
	packet_rx_allocate(0xFF);
   11874:	20ff      	movs	r0, #255	; 0xff
}
   11876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
   1187a:	f7ff bf39 	b.w	116f0 <packet_rx_allocate>
   1187e:	bf00      	nop
   11880:	2000110c 	.word	0x2000110c
   11884:	2000123c 	.word	0x2000123c
   11888:	20001254 	.word	0x20001254
   1188c:	20001268 	.word	0x20001268
   11890:	20001270 	.word	0x20001270
   11894:	2000d72c 	.word	0x2000d72c
   11898:	0002d030 	.word	0x0002d030
   1189c:	0002cff8 	.word	0x0002cff8
   118a0:	000304d2 	.word	0x000304d2
   118a4:	000309b5 	.word	0x000309b5
   118a8:	2000125c 	.word	0x2000125c

000118ac <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   118ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
   118b0:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   118b2:	4294      	cmp	r4, r2
{
   118b4:	4681      	mov	r9, r0
   118b6:	460f      	mov	r7, r1
   118b8:	4690      	mov	r8, r2
	if (_first == last) {
   118ba:	d03d      	beq.n	11938 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
   118bc:	4e1f      	ldr	r6, [pc, #124]	; (1193c <tx_cmplt_get+0x90>)
   118be:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
   118c2:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   118c6:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   118c8:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
   118ca:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   118ce:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
   118d2:	b222      	sxth	r2, r4
   118d4:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
   118d8:	f8b9 c000 	ldrh.w	ip, [r9]
   118dc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   118e0:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
   118e4:	4594      	cmp	ip, r2
   118e6:	d120      	bne.n	1192a <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
   118e8:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
   118ea:	2801      	cmp	r0, #1
   118ec:	f020 0303 	bic.w	r3, r0, #3
   118f0:	d90a      	bls.n	11908 <tx_cmplt_get+0x5c>
   118f2:	b1f3      	cbz	r3, 11932 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   118f4:	1d02      	adds	r2, r0, #4
   118f6:	d01c      	beq.n	11932 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   118f8:	7942      	ldrb	r2, [r0, #5]
   118fa:	b1d2      	cbz	r2, 11932 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   118fc:	7902      	ldrb	r2, [r0, #4]
   118fe:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11902:	3a01      	subs	r2, #1
   11904:	2a01      	cmp	r2, #1
   11906:	d814      	bhi.n	11932 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
   11908:	2201      	movs	r2, #1
			cmplt++;
   1190a:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
   1190c:	604a      	str	r2, [r1, #4]
			cmplt++;
   1190e:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11910:	b113      	cbz	r3, 11918 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11912:	4651      	mov	r1, sl
   11914:	f7fe fdff 	bl	10516 <mem_release>
		}

		_first = _first + 1;
   11918:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
   1191a:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
   1191e:	b2e4      	uxtb	r4, r4
			_first = 0;
   11920:	42a2      	cmp	r2, r4
   11922:	bf08      	it	eq
   11924:	2400      	moveq	r4, #0
		}

	} while (_first != last);
   11926:	4544      	cmp	r4, r8
   11928:	d1d3      	bne.n	118d2 <tx_cmplt_get+0x26>

	*first = _first;
   1192a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
   1192c:	4628      	mov	r0, r5
   1192e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
   11932:	f8c1 b004 	str.w	fp, [r1, #4]
   11936:	e7eb      	b.n	11910 <tx_cmplt_get+0x64>
		return 0;
   11938:	2500      	movs	r5, #0
   1193a:	e7f7      	b.n	1192c <tx_cmplt_get+0x80>
   1193c:	2000110c 	.word	0x2000110c

00011940 <connection_get>:
{
   11940:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
   11942:	4b09      	ldr	r3, [pc, #36]	; (11968 <connection_get+0x28>)
   11944:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
   11948:	4282      	cmp	r2, r0
{
   1194a:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
   1194c:	d90a      	bls.n	11964 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   1194e:	4602      	mov	r2, r0
   11950:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11954:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   11958:	f7fe fdf8 	bl	1054c <mem_get>
		if ((conn) && (conn->handle == handle)) {
   1195c:	b110      	cbz	r0, 11964 <connection_get+0x24>
   1195e:	8c03      	ldrh	r3, [r0, #32]
   11960:	42a3      	cmp	r3, r4
   11962:	d000      	beq.n	11966 <connection_get+0x26>
	return 0;
   11964:	2000      	movs	r0, #0
}
   11966:	bd10      	pop	{r4, pc}
   11968:	2000110c 	.word	0x2000110c

0001196c <role_disable>:
{
   1196c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11970:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11972:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
   11974:	2805      	cmp	r0, #5
{
   11976:	4605      	mov	r5, r0
   11978:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1197a:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
   1197c:	d00c      	beq.n	11998 <role_disable+0x2c>
   1197e:	2806      	cmp	r0, #6
   11980:	d057      	beq.n	11a32 <role_disable+0xc6>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11982:	d95a      	bls.n	11a3a <role_disable+0xce>
			conn_handle = ticker_id_primary -
   11984:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   11986:	b280      	uxth	r0, r0
   11988:	f7ff ffda 	bl	11940 <connection_get>
			if (!conn) {
   1198c:	2800      	cmp	r0, #0
   1198e:	f000 81ee 	beq.w	11d6e <role_disable+0x402>
			ticks_active_to_start =
   11992:	e9d0 6800 	ldrd	r6, r8, [r0]
		break;
   11996:	e00e      	b.n	119b6 <role_disable+0x4a>
		ticks_xtal_to_start =
   11998:	4ba4      	ldr	r3, [pc, #656]	; (11c2c <role_disable+0x2c0>)
		ticks_active_to_start =
   1199a:	e9d3 6806 	ldrd	r6, r8, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1199e:	ab02      	add	r3, sp, #8
   119a0:	9300      	str	r3, [sp, #0]
   119a2:	460a      	mov	r2, r1
   119a4:	4ba2      	ldr	r3, [pc, #648]	; (11c30 <role_disable+0x2c4>)
   119a6:	2103      	movs	r1, #3
   119a8:	2000      	movs	r0, #0
   119aa:	f7ff fcb5 	bl	11318 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   119ae:	2802      	cmp	r0, #2
   119b0:	d01d      	beq.n	119ee <role_disable+0x82>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   119b2:	9b02      	ldr	r3, [sp, #8]
   119b4:	b9fb      	cbnz	r3, 119f6 <role_disable+0x8a>
	LL_ASSERT(!_radio.ticker_id_stop);
   119b6:	4c9d      	ldr	r4, [pc, #628]	; (11c2c <role_disable+0x2c0>)
   119b8:	7ce3      	ldrb	r3, [r4, #19]
   119ba:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   119be:	2b00      	cmp	r3, #0
   119c0:	d04f      	beq.n	11a62 <role_disable+0xf6>
   119c2:	4b9c      	ldr	r3, [pc, #624]	; (11c34 <role_disable+0x2c8>)
   119c4:	681b      	ldr	r3, [r3, #0]
   119c6:	0759      	lsls	r1, r3, #29
   119c8:	d02d      	beq.n	11a26 <role_disable+0xba>
   119ca:	2301      	movs	r3, #1
   119cc:	f04f 0200 	mov.w	r2, #0
   119d0:	f363 0202 	bfi	r2, r3, #0, #3
   119d4:	4998      	ldr	r1, [pc, #608]	; (11c38 <role_disable+0x2cc>)
   119d6:	4b99      	ldr	r3, [pc, #612]	; (11c3c <role_disable+0x2d0>)
   119d8:	4899      	ldr	r0, [pc, #612]	; (11c40 <role_disable+0x2d4>)
   119da:	1a5b      	subs	r3, r3, r1
   119dc:	f36f 02c5 	bfc	r2, #3, #3
   119e0:	08db      	lsrs	r3, r3, #3
   119e2:	f363 128f 	bfi	r2, r3, #6, #10
   119e6:	4997      	ldr	r1, [pc, #604]	; (11c44 <role_disable+0x2d8>)
   119e8:	e01b      	b.n	11a22 <role_disable+0xb6>
				cpu_sleep();
   119ea:	f7ff fd9d 	bl	11528 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   119ee:	9b02      	ldr	r3, [sp, #8]
   119f0:	2b02      	cmp	r3, #2
   119f2:	d0fa      	beq.n	119ea <role_disable+0x7e>
   119f4:	e7dd      	b.n	119b2 <role_disable+0x46>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   119f6:	9b02      	ldr	r3, [sp, #8]
   119f8:	2b01      	cmp	r3, #1
   119fa:	d0dc      	beq.n	119b6 <role_disable+0x4a>
   119fc:	4b8d      	ldr	r3, [pc, #564]	; (11c34 <role_disable+0x2c8>)
   119fe:	681b      	ldr	r3, [r3, #0]
   11a00:	075c      	lsls	r4, r3, #29
   11a02:	d010      	beq.n	11a26 <role_disable+0xba>
   11a04:	2301      	movs	r3, #1
   11a06:	f04f 0200 	mov.w	r2, #0
   11a0a:	f363 0202 	bfi	r2, r3, #0, #3
   11a0e:	498a      	ldr	r1, [pc, #552]	; (11c38 <role_disable+0x2cc>)
   11a10:	4b8a      	ldr	r3, [pc, #552]	; (11c3c <role_disable+0x2d0>)
   11a12:	488d      	ldr	r0, [pc, #564]	; (11c48 <role_disable+0x2dc>)
   11a14:	1a5b      	subs	r3, r3, r1
   11a16:	f36f 02c5 	bfc	r2, #3, #3
   11a1a:	08db      	lsrs	r3, r3, #3
   11a1c:	4989      	ldr	r1, [pc, #548]	; (11c44 <role_disable+0x2d8>)
   11a1e:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   11a22:	f7f0 f999 	bl	1d58 <log_1>
   11a26:	4040      	eors	r0, r0
   11a28:	f380 8811 	msr	BASEPRI, r0
   11a2c:	f04f 0004 	mov.w	r0, #4
   11a30:	df02      	svc	2
		ticks_xtal_to_start =
   11a32:	4b7e      	ldr	r3, [pc, #504]	; (11c2c <role_disable+0x2c0>)
		ticks_active_to_start =
   11a34:	e9d3 6834 	ldrd	r6, r8, [r3, #208]	; 0xd0
		break;
   11a38:	e7bd      	b.n	119b6 <role_disable+0x4a>
			LL_ASSERT(0);
   11a3a:	4b7e      	ldr	r3, [pc, #504]	; (11c34 <role_disable+0x2c8>)
   11a3c:	681b      	ldr	r3, [r3, #0]
   11a3e:	0758      	lsls	r0, r3, #29
   11a40:	d0f1      	beq.n	11a26 <role_disable+0xba>
   11a42:	2301      	movs	r3, #1
   11a44:	f04f 0200 	mov.w	r2, #0
   11a48:	f363 0202 	bfi	r2, r3, #0, #3
   11a4c:	497a      	ldr	r1, [pc, #488]	; (11c38 <role_disable+0x2cc>)
   11a4e:	4b7b      	ldr	r3, [pc, #492]	; (11c3c <role_disable+0x2d0>)
   11a50:	1a5b      	subs	r3, r3, r1
   11a52:	f36f 02c5 	bfc	r2, #3, #3
   11a56:	08db      	lsrs	r3, r3, #3
   11a58:	497a      	ldr	r1, [pc, #488]	; (11c44 <role_disable+0x2d8>)
   11a5a:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   11a5e:	487b      	ldr	r0, [pc, #492]	; (11c4c <role_disable+0x2e0>)
   11a60:	e7df      	b.n	11a22 <role_disable+0xb6>
	ret_cb = TICKER_STATUS_BUSY;
   11a62:	ab06      	add	r3, sp, #24
   11a64:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
   11a66:	74e5      	strb	r5, [r4, #19]
	ret_cb = TICKER_STATUS_BUSY;
   11a68:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a6c:	2103      	movs	r1, #3
   11a6e:	9300      	str	r3, [sp, #0]
   11a70:	462a      	mov	r2, r5
   11a72:	4b6f      	ldr	r3, [pc, #444]	; (11c30 <role_disable+0x2c4>)
   11a74:	f7ff fc50 	bl	11318 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11a78:	2802      	cmp	r0, #2
   11a7a:	d033      	beq.n	11ae4 <role_disable+0x178>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11a7c:	9b02      	ldr	r3, [sp, #8]
   11a7e:	2b00      	cmp	r3, #0
   11a80:	f040 815b 	bne.w	11d3a <role_disable+0x3ce>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   11a84:	7c63      	ldrb	r3, [r4, #17]
   11a86:	42ab      	cmp	r3, r5
   11a88:	d003      	beq.n	11a92 <role_disable+0x126>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11a8a:	7ca3      	ldrb	r3, [r4, #18]
   11a8c:	42ab      	cmp	r3, r5
   11a8e:	f040 8150 	bne.w	11d32 <role_disable+0x3c6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   11a92:	ab06      	add	r3, sp, #24
   11a94:	2202      	movs	r2, #2
   11a96:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a9a:	2200      	movs	r2, #0
   11a9c:	9300      	str	r3, [sp, #0]
   11a9e:	2103      	movs	r1, #3
   11aa0:	4b63      	ldr	r3, [pc, #396]	; (11c30 <role_disable+0x2c4>)
   11aa2:	4610      	mov	r0, r2
   11aa4:	f7ff fc38 	bl	11318 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11aa8:	2802      	cmp	r0, #2
   11aaa:	d129      	bne.n	11b00 <role_disable+0x194>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11aac:	2201      	movs	r2, #1
   11aae:	4611      	mov	r1, r2
   11ab0:	2003      	movs	r0, #3
   11ab2:	f7fe fdb7 	bl	10624 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
   11ab6:	9b03      	ldr	r3, [sp, #12]
   11ab8:	2b02      	cmp	r3, #2
   11aba:	d121      	bne.n	11b00 <role_disable+0x194>
   11abc:	4b5d      	ldr	r3, [pc, #372]	; (11c34 <role_disable+0x2c8>)
   11abe:	681b      	ldr	r3, [r3, #0]
   11ac0:	075a      	lsls	r2, r3, #29
   11ac2:	d0b0      	beq.n	11a26 <role_disable+0xba>
   11ac4:	2301      	movs	r3, #1
   11ac6:	f04f 0200 	mov.w	r2, #0
   11aca:	f363 0202 	bfi	r2, r3, #0, #3
   11ace:	495a      	ldr	r1, [pc, #360]	; (11c38 <role_disable+0x2cc>)
   11ad0:	4b5a      	ldr	r3, [pc, #360]	; (11c3c <role_disable+0x2d0>)
   11ad2:	485f      	ldr	r0, [pc, #380]	; (11c50 <role_disable+0x2e4>)
   11ad4:	1a5b      	subs	r3, r3, r1
   11ad6:	f36f 02c5 	bfc	r2, #3, #3
   11ada:	08db      	lsrs	r3, r3, #3
   11adc:	f363 128f 	bfi	r2, r3, #6, #10
   11ae0:	495c      	ldr	r1, [pc, #368]	; (11c54 <role_disable+0x2e8>)
   11ae2:	e79e      	b.n	11a22 <role_disable+0xb6>
		if (_radio.ticker_id_event == ticker_id_primary) {
   11ae4:	7ca3      	ldrb	r3, [r4, #18]
   11ae6:	42ab      	cmp	r3, r5
   11ae8:	d104      	bne.n	11af4 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11aea:	2201      	movs	r2, #1
   11aec:	4611      	mov	r1, r2
   11aee:	2003      	movs	r0, #3
   11af0:	f7fe fd98 	bl	10624 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
   11af4:	9b02      	ldr	r3, [sp, #8]
   11af6:	2b02      	cmp	r3, #2
   11af8:	d1c0      	bne.n	11a7c <role_disable+0x110>
			cpu_sleep();
   11afa:	f7ff fd15 	bl	11528 <cpu_sleep>
   11afe:	e7f9      	b.n	11af4 <role_disable+0x188>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   11b00:	9d03      	ldr	r5, [sp, #12]
   11b02:	2d00      	cmp	r5, #0
   11b04:	f040 80b2 	bne.w	11c6c <role_disable+0x300>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   11b08:	2302      	movs	r3, #2
   11b0a:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
   11b0c:	7c63      	ldrb	r3, [r4, #17]
   11b0e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   11b12:	b99b      	cbnz	r3, 11b3c <role_disable+0x1d0>
   11b14:	4b47      	ldr	r3, [pc, #284]	; (11c34 <role_disable+0x2c8>)
   11b16:	681b      	ldr	r3, [r3, #0]
   11b18:	075b      	lsls	r3, r3, #29
   11b1a:	d084      	beq.n	11a26 <role_disable+0xba>
   11b1c:	2301      	movs	r3, #1
   11b1e:	f04f 0200 	mov.w	r2, #0
   11b22:	f363 0202 	bfi	r2, r3, #0, #3
   11b26:	f361 02c5 	bfi	r2, r1, #3, #3
   11b2a:	4b44      	ldr	r3, [pc, #272]	; (11c3c <role_disable+0x2d0>)
   11b2c:	4942      	ldr	r1, [pc, #264]	; (11c38 <role_disable+0x2cc>)
   11b2e:	484a      	ldr	r0, [pc, #296]	; (11c58 <role_disable+0x2ec>)
   11b30:	1a5b      	subs	r3, r3, r1
   11b32:	08db      	lsrs	r3, r3, #3
   11b34:	f363 128f 	bfi	r2, r3, #6, #10
   11b38:	4946      	ldr	r1, [pc, #280]	; (11c54 <role_disable+0x2e8>)
   11b3a:	e772      	b.n	11a22 <role_disable+0xb6>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11b3c:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
   11b3e:	7465      	strb	r5, [r4, #17]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11b40:	2201      	movs	r2, #1
   11b42:	9300      	str	r3, [sp, #0]
   11b44:	2103      	movs	r1, #3
   11b46:	4b3a      	ldr	r3, [pc, #232]	; (11c30 <role_disable+0x2c4>)
   11b48:	4628      	mov	r0, r5
   11b4a:	f7ff fbe5 	bl	11318 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11b4e:	2802      	cmp	r0, #2
   11b50:	d11c      	bne.n	11b8c <role_disable+0x220>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11b52:	2201      	movs	r2, #1
   11b54:	4611      	mov	r1, r2
   11b56:	2003      	movs	r0, #3
   11b58:	f7fe fd64 	bl	10624 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
   11b5c:	9b04      	ldr	r3, [sp, #16]
   11b5e:	2b02      	cmp	r3, #2
   11b60:	d114      	bne.n	11b8c <role_disable+0x220>
   11b62:	4b34      	ldr	r3, [pc, #208]	; (11c34 <role_disable+0x2c8>)
   11b64:	681b      	ldr	r3, [r3, #0]
   11b66:	075f      	lsls	r7, r3, #29
   11b68:	f43f af5d 	beq.w	11a26 <role_disable+0xba>
   11b6c:	2301      	movs	r3, #1
   11b6e:	f04f 0200 	mov.w	r2, #0
   11b72:	f363 0202 	bfi	r2, r3, #0, #3
   11b76:	4930      	ldr	r1, [pc, #192]	; (11c38 <role_disable+0x2cc>)
   11b78:	4b30      	ldr	r3, [pc, #192]	; (11c3c <role_disable+0x2d0>)
   11b7a:	4838      	ldr	r0, [pc, #224]	; (11c5c <role_disable+0x2f0>)
   11b7c:	1a5b      	subs	r3, r3, r1
   11b7e:	f365 02c5 	bfi	r2, r5, #3, #3
   11b82:	08db      	lsrs	r3, r3, #3
   11b84:	f363 128f 	bfi	r2, r3, #6, #10
   11b88:	4932      	ldr	r1, [pc, #200]	; (11c54 <role_disable+0x2e8>)
   11b8a:	e74a      	b.n	11a22 <role_disable+0xb6>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   11b8c:	9d04      	ldr	r5, [sp, #16]
   11b8e:	bb15      	cbnz	r5, 11bd6 <role_disable+0x26a>
			ticks_xtal_to_start &= ~XON_BITMASK;
   11b90:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   11b94:	45b0      	cmp	r8, r6
				ret = mayfly_enqueue(
   11b96:	bf8c      	ite	hi
   11b98:	4b31      	ldrhi	r3, [pc, #196]	; (11c60 <role_disable+0x2f4>)
				ret = mayfly_enqueue(
   11b9a:	4b32      	ldrls	r3, [pc, #200]	; (11c64 <role_disable+0x2f8>)
   11b9c:	462a      	mov	r2, r5
   11b9e:	4629      	mov	r1, r5
   11ba0:	2003      	movs	r0, #3
   11ba2:	f7fe fd67 	bl	10674 <mayfly_enqueue>
				LL_ASSERT(!ret);
   11ba6:	2800      	cmp	r0, #0
   11ba8:	f000 80c3 	beq.w	11d32 <role_disable+0x3c6>
   11bac:	4b21      	ldr	r3, [pc, #132]	; (11c34 <role_disable+0x2c8>)
   11bae:	681b      	ldr	r3, [r3, #0]
   11bb0:	075e      	lsls	r6, r3, #29
   11bb2:	f43f af38 	beq.w	11a26 <role_disable+0xba>
   11bb6:	f04f 0200 	mov.w	r2, #0
   11bba:	2301      	movs	r3, #1
   11bbc:	f363 0202 	bfi	r2, r3, #0, #3
			LL_ASSERT(!ret);
   11bc0:	f365 02c5 	bfi	r2, r5, #3, #3
   11bc4:	491c      	ldr	r1, [pc, #112]	; (11c38 <role_disable+0x2cc>)
   11bc6:	4b1d      	ldr	r3, [pc, #116]	; (11c3c <role_disable+0x2d0>)
			LL_ASSERT(!ret);
   11bc8:	4827      	ldr	r0, [pc, #156]	; (11c68 <role_disable+0x2fc>)
   11bca:	1a5b      	subs	r3, r3, r1
   11bcc:	08db      	lsrs	r3, r3, #3
   11bce:	f363 128f 	bfi	r2, r3, #6, #10
   11bd2:	4920      	ldr	r1, [pc, #128]	; (11c54 <role_disable+0x2e8>)
   11bd4:	e725      	b.n	11a22 <role_disable+0xb6>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   11bd6:	9e04      	ldr	r6, [sp, #16]
   11bd8:	2e01      	cmp	r6, #1
   11bda:	f040 80b4 	bne.w	11d46 <role_disable+0x3da>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11bde:	2200      	movs	r2, #0
   11be0:	4b1f      	ldr	r3, [pc, #124]	; (11c60 <role_disable+0x2f4>)
   11be2:	4611      	mov	r1, r2
   11be4:	2003      	movs	r0, #3
   11be6:	f7fe fd45 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!ret);
   11bea:	4605      	mov	r5, r0
   11bec:	b158      	cbz	r0, 11c06 <role_disable+0x29a>
   11bee:	4b11      	ldr	r3, [pc, #68]	; (11c34 <role_disable+0x2c8>)
   11bf0:	681b      	ldr	r3, [r3, #0]
   11bf2:	075d      	lsls	r5, r3, #29
   11bf4:	f43f af17 	beq.w	11a26 <role_disable+0xba>
   11bf8:	f04f 0200 	mov.w	r2, #0
   11bfc:	f366 0202 	bfi	r2, r6, #0, #3
			LL_ASSERT(!ret);
   11c00:	f36f 02c5 	bfc	r2, #3, #3
   11c04:	e7de      	b.n	11bc4 <role_disable+0x258>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11c06:	4602      	mov	r2, r0
   11c08:	4601      	mov	r1, r0
   11c0a:	4b16      	ldr	r3, [pc, #88]	; (11c64 <role_disable+0x2f8>)
   11c0c:	2003      	movs	r0, #3
   11c0e:	f7fe fd31 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!ret);
   11c12:	2800      	cmp	r0, #0
   11c14:	f000 808d 	beq.w	11d32 <role_disable+0x3c6>
   11c18:	4b06      	ldr	r3, [pc, #24]	; (11c34 <role_disable+0x2c8>)
   11c1a:	681b      	ldr	r3, [r3, #0]
   11c1c:	075c      	lsls	r4, r3, #29
   11c1e:	f43f af02 	beq.w	11a26 <role_disable+0xba>
   11c22:	f04f 0200 	mov.w	r2, #0
   11c26:	f366 0202 	bfi	r2, r6, #0, #3
   11c2a:	e7c9      	b.n	11bc0 <role_disable+0x254>
   11c2c:	2000110c 	.word	0x2000110c
   11c30:	0001156d 	.word	0x0001156d
   11c34:	2000d72c 	.word	0x2000d72c
   11c38:	0002cff8 	.word	0x0002cff8
   11c3c:	0002d030 	.word	0x0002d030
   11c40:	00031191 	.word	0x00031191
   11c44:	0003095a 	.word	0x0003095a
   11c48:	0003115d 	.word	0x0003115d
   11c4c:	0002f0b9 	.word	0x0002f0b9
   11c50:	000311bd 	.word	0x000311bd
   11c54:	00030946 	.word	0x00030946
   11c58:	000311e2 	.word	0x000311e2
   11c5c:	00031210 	.word	0x00031210
   11c60:	2000cfcc 	.word	0x2000cfcc
   11c64:	2000d08c 	.word	0x2000d08c
   11c68:	00031234 	.word	0x00031234
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   11c6c:	9d03      	ldr	r5, [sp, #12]
   11c6e:	2d01      	cmp	r5, #1
   11c70:	d169      	bne.n	11d46 <role_disable+0x3da>
		if (ticker_id_stop != TICKER_NULL) {
   11c72:	2fff      	cmp	r7, #255	; 0xff
   11c74:	d042      	beq.n	11cfc <role_disable+0x390>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
   11c76:	ab06      	add	r3, sp, #24
   11c78:	2202      	movs	r2, #2
   11c7a:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c7e:	2103      	movs	r1, #3
   11c80:	9300      	str	r3, [sp, #0]
   11c82:	463a      	mov	r2, r7
   11c84:	4b3b      	ldr	r3, [pc, #236]	; (11d74 <role_disable+0x408>)
   11c86:	2000      	movs	r0, #0
   11c88:	f7ff fb46 	bl	11318 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   11c8c:	2802      	cmp	r0, #2
   11c8e:	d11b      	bne.n	11cc8 <role_disable+0x35c>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11c90:	462a      	mov	r2, r5
   11c92:	4629      	mov	r1, r5
   11c94:	2003      	movs	r0, #3
   11c96:	f7fe fcc5 	bl	10624 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
   11c9a:	9b05      	ldr	r3, [sp, #20]
   11c9c:	2b02      	cmp	r3, #2
   11c9e:	d113      	bne.n	11cc8 <role_disable+0x35c>
   11ca0:	4b35      	ldr	r3, [pc, #212]	; (11d78 <role_disable+0x40c>)
   11ca2:	681b      	ldr	r3, [r3, #0]
   11ca4:	0758      	lsls	r0, r3, #29
   11ca6:	f43f aebe 	beq.w	11a26 <role_disable+0xba>
   11caa:	4934      	ldr	r1, [pc, #208]	; (11d7c <role_disable+0x410>)
   11cac:	4b34      	ldr	r3, [pc, #208]	; (11d80 <role_disable+0x414>)
   11cae:	4835      	ldr	r0, [pc, #212]	; (11d84 <role_disable+0x418>)
   11cb0:	f04f 0200 	mov.w	r2, #0
   11cb4:	1a5b      	subs	r3, r3, r1
   11cb6:	f365 0202 	bfi	r2, r5, #0, #3
   11cba:	f36f 02c5 	bfc	r2, #3, #3
   11cbe:	08db      	lsrs	r3, r3, #3
   11cc0:	f363 128f 	bfi	r2, r3, #6, #10
   11cc4:	4930      	ldr	r1, [pc, #192]	; (11d88 <role_disable+0x41c>)
   11cc6:	e6ac      	b.n	11a22 <role_disable+0xb6>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
   11cc8:	9b05      	ldr	r3, [sp, #20]
   11cca:	b1bb      	cbz	r3, 11cfc <role_disable+0x390>
   11ccc:	9b05      	ldr	r3, [sp, #20]
   11cce:	2b01      	cmp	r3, #1
   11cd0:	d014      	beq.n	11cfc <role_disable+0x390>
   11cd2:	4b29      	ldr	r3, [pc, #164]	; (11d78 <role_disable+0x40c>)
   11cd4:	681b      	ldr	r3, [r3, #0]
   11cd6:	0759      	lsls	r1, r3, #29
   11cd8:	f43f aea5 	beq.w	11a26 <role_disable+0xba>
   11cdc:	2301      	movs	r3, #1
   11cde:	f04f 0200 	mov.w	r2, #0
   11ce2:	f363 0202 	bfi	r2, r3, #0, #3
   11ce6:	4925      	ldr	r1, [pc, #148]	; (11d7c <role_disable+0x410>)
   11ce8:	4b25      	ldr	r3, [pc, #148]	; (11d80 <role_disable+0x414>)
   11cea:	4828      	ldr	r0, [pc, #160]	; (11d8c <role_disable+0x420>)
   11cec:	1a5b      	subs	r3, r3, r1
   11cee:	f36f 02c5 	bfc	r2, #3, #3
   11cf2:	08db      	lsrs	r3, r3, #3
   11cf4:	f363 128f 	bfi	r2, r3, #6, #10
   11cf8:	4923      	ldr	r1, [pc, #140]	; (11d88 <role_disable+0x41c>)
   11cfa:	e692      	b.n	11a22 <role_disable+0xb6>
		if (_radio.role != ROLE_NONE) {
   11cfc:	7d23      	ldrb	r3, [r4, #20]
   11cfe:	b1c3      	cbz	r3, 11d32 <role_disable+0x3c6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   11d00:	4b23      	ldr	r3, [pc, #140]	; (11d90 <role_disable+0x424>)
   11d02:	2204      	movs	r2, #4
   11d04:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11d06:	2200      	movs	r2, #0
   11d08:	4611      	mov	r1, r2
   11d0a:	2003      	movs	r0, #3
   11d0c:	f7fe fcb2 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!ret);
   11d10:	b160      	cbz	r0, 11d2c <role_disable+0x3c0>
   11d12:	4b19      	ldr	r3, [pc, #100]	; (11d78 <role_disable+0x40c>)
   11d14:	681b      	ldr	r3, [r3, #0]
   11d16:	075a      	lsls	r2, r3, #29
   11d18:	f43f ae85 	beq.w	11a26 <role_disable+0xba>
   11d1c:	f04f 0200 	mov.w	r2, #0
   11d20:	2301      	movs	r3, #1
   11d22:	f363 0202 	bfi	r2, r3, #0, #3
   11d26:	e76b      	b.n	11c00 <role_disable+0x294>
				cpu_sleep();
   11d28:	f7ff fbfe 	bl	11528 <cpu_sleep>
			while (_radio.role != ROLE_NONE) {
   11d2c:	7d23      	ldrb	r3, [r4, #20]
   11d2e:	2b00      	cmp	r3, #0
   11d30:	d1fa      	bne.n	11d28 <role_disable+0x3bc>
	if (!_radio.ticker_id_stop) {
   11d32:	7ce3      	ldrb	r3, [r4, #19]
   11d34:	b90b      	cbnz	r3, 11d3a <role_disable+0x3ce>
		ret_cb = TICKER_STATUS_FAILURE;
   11d36:	2301      	movs	r3, #1
   11d38:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
   11d3a:	2300      	movs	r3, #0
   11d3c:	74e3      	strb	r3, [r4, #19]
	return ret_cb;
   11d3e:	9802      	ldr	r0, [sp, #8]
}
   11d40:	b006      	add	sp, #24
   11d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(0);
   11d46:	4b0c      	ldr	r3, [pc, #48]	; (11d78 <role_disable+0x40c>)
   11d48:	681b      	ldr	r3, [r3, #0]
   11d4a:	075b      	lsls	r3, r3, #29
   11d4c:	f43f ae6b 	beq.w	11a26 <role_disable+0xba>
   11d50:	2301      	movs	r3, #1
   11d52:	f04f 0200 	mov.w	r2, #0
   11d56:	f363 0202 	bfi	r2, r3, #0, #3
   11d5a:	4908      	ldr	r1, [pc, #32]	; (11d7c <role_disable+0x410>)
   11d5c:	4b08      	ldr	r3, [pc, #32]	; (11d80 <role_disable+0x414>)
   11d5e:	1a5b      	subs	r3, r3, r1
   11d60:	f36f 02c5 	bfc	r2, #3, #3
   11d64:	08db      	lsrs	r3, r3, #3
   11d66:	f363 128f 	bfi	r2, r3, #6, #10
   11d6a:	4907      	ldr	r1, [pc, #28]	; (11d88 <role_disable+0x41c>)
   11d6c:	e677      	b.n	11a5e <role_disable+0xf2>
				return 1;
   11d6e:	2001      	movs	r0, #1
   11d70:	e7e6      	b.n	11d40 <role_disable+0x3d4>
   11d72:	bf00      	nop
   11d74:	0001156d 	.word	0x0001156d
   11d78:	2000d72c 	.word	0x2000d72c
   11d7c:	0002cff8 	.word	0x0002cff8
   11d80:	0002d030 	.word	0x0002d030
   11d84:	0003124e 	.word	0x0003124e
   11d88:	00030946 	.word	0x00030946
   11d8c:	00031274 	.word	0x00031274
   11d90:	2000cffc 	.word	0x2000cffc

00011d94 <mayfly_xtal_retain>:
{
   11d94:	b570      	push	{r4, r5, r6, lr}
   11d96:	4b2c      	ldr	r3, [pc, #176]	; (11e48 <mayfly_xtal_retain+0xb4>)
   11d98:	4605      	mov	r5, r0
   11d9a:	781c      	ldrb	r4, [r3, #0]
	if (retain) {
   11d9c:	460e      	mov	r6, r1
   11d9e:	2900      	cmp	r1, #0
   11da0:	d038      	beq.n	11e14 <mayfly_xtal_retain+0x80>
		if (!s_xtal_retained) {
   11da2:	2c00      	cmp	r4, #0
   11da4:	d14e      	bne.n	11e44 <mayfly_xtal_retain+0xb0>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   11da6:	2801      	cmp	r0, #1
   11da8:	d01a      	beq.n	11de0 <mayfly_xtal_retain+0x4c>
   11daa:	4b28      	ldr	r3, [pc, #160]	; (11e4c <mayfly_xtal_retain+0xb8>)
   11dac:	681b      	ldr	r3, [r3, #0]
   11dae:	0759      	lsls	r1, r3, #29
   11db0:	d010      	beq.n	11dd4 <mayfly_xtal_retain+0x40>
   11db2:	2301      	movs	r3, #1
   11db4:	f04f 0200 	mov.w	r2, #0
   11db8:	f363 0202 	bfi	r2, r3, #0, #3
   11dbc:	4924      	ldr	r1, [pc, #144]	; (11e50 <mayfly_xtal_retain+0xbc>)
   11dbe:	4b25      	ldr	r3, [pc, #148]	; (11e54 <mayfly_xtal_retain+0xc0>)
   11dc0:	4825      	ldr	r0, [pc, #148]	; (11e58 <mayfly_xtal_retain+0xc4>)
   11dc2:	1a5b      	subs	r3, r3, r1
   11dc4:	f364 02c5 	bfi	r2, r4, #3, #3
   11dc8:	08db      	lsrs	r3, r3, #3
   11dca:	4924      	ldr	r1, [pc, #144]	; (11e5c <mayfly_xtal_retain+0xc8>)
   11dcc:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(!retval);
   11dd0:	f7ef ffc2 	bl	1d58 <log_1>
   11dd4:	4040      	eors	r0, r0
   11dd6:	f380 8811 	msr	BASEPRI, r0
   11dda:	f04f 0004 	mov.w	r0, #4
   11dde:	df02      	svc	2
			s_xtal_retained = 1;
   11de0:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   11de2:	4622      	mov	r2, r4
   11de4:	4b1e      	ldr	r3, [pc, #120]	; (11e60 <mayfly_xtal_retain+0xcc>)
   11de6:	4621      	mov	r1, r4
   11de8:	f7fe fc44 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11dec:	b350      	cbz	r0, 11e44 <mayfly_xtal_retain+0xb0>
   11dee:	4b17      	ldr	r3, [pc, #92]	; (11e4c <mayfly_xtal_retain+0xb8>)
   11df0:	681b      	ldr	r3, [r3, #0]
   11df2:	075a      	lsls	r2, r3, #29
   11df4:	d0ee      	beq.n	11dd4 <mayfly_xtal_retain+0x40>
   11df6:	f04f 0200 	mov.w	r2, #0
   11dfa:	f365 0202 	bfi	r2, r5, #0, #3
   11dfe:	f364 02c5 	bfi	r2, r4, #3, #3
   11e02:	4913      	ldr	r1, [pc, #76]	; (11e50 <mayfly_xtal_retain+0xbc>)
   11e04:	4b13      	ldr	r3, [pc, #76]	; (11e54 <mayfly_xtal_retain+0xc0>)
			LL_ASSERT(!retval);
   11e06:	4817      	ldr	r0, [pc, #92]	; (11e64 <mayfly_xtal_retain+0xd0>)
   11e08:	1a5b      	subs	r3, r3, r1
   11e0a:	08db      	lsrs	r3, r3, #3
   11e0c:	f363 128f 	bfi	r2, r3, #6, #10
   11e10:	4912      	ldr	r1, [pc, #72]	; (11e5c <mayfly_xtal_retain+0xc8>)
   11e12:	e7dd      	b.n	11dd0 <mayfly_xtal_retain+0x3c>
		if (s_xtal_retained) {
   11e14:	b1b4      	cbz	r4, 11e44 <mayfly_xtal_retain+0xb0>
			s_xtal_retained = 0;
   11e16:	7019      	strb	r1, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   11e18:	4b13      	ldr	r3, [pc, #76]	; (11e68 <mayfly_xtal_retain+0xd4>)
   11e1a:	f1a3 0210 	sub.w	r2, r3, #16
			retval = mayfly_enqueue(caller_id,
   11e1e:	2801      	cmp	r0, #1
   11e20:	bf18      	it	ne
   11e22:	4613      	movne	r3, r2
   11e24:	460a      	mov	r2, r1
   11e26:	f7fe fc25 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11e2a:	b158      	cbz	r0, 11e44 <mayfly_xtal_retain+0xb0>
   11e2c:	4b07      	ldr	r3, [pc, #28]	; (11e4c <mayfly_xtal_retain+0xb8>)
   11e2e:	681b      	ldr	r3, [r3, #0]
   11e30:	075b      	lsls	r3, r3, #29
   11e32:	d0cf      	beq.n	11dd4 <mayfly_xtal_retain+0x40>
   11e34:	f04f 0200 	mov.w	r2, #0
   11e38:	2301      	movs	r3, #1
   11e3a:	f363 0202 	bfi	r2, r3, #0, #3
   11e3e:	f366 02c5 	bfi	r2, r6, #3, #3
   11e42:	e7de      	b.n	11e02 <mayfly_xtal_retain+0x6e>
}
   11e44:	bd70      	pop	{r4, r5, r6, pc}
   11e46:	bf00      	nop
   11e48:	2000132c 	.word	0x2000132c
   11e4c:	2000d72c 	.word	0x2000d72c
   11e50:	0002cff8 	.word	0x0002cff8
   11e54:	0002d030 	.word	0x0002d030
   11e58:	00031016 	.word	0x00031016
   11e5c:	000306a5 	.word	0x000306a5
   11e60:	2000d04c 	.word	0x2000d04c
   11e64:	0003103a 	.word	0x0003103a
   11e68:	2000d06c 	.word	0x2000d06c

00011e6c <rx_packet_set>:
{
   11e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
   11e6e:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
   11e72:	8e04      	ldrh	r4, [r0, #48]	; 0x30
{
   11e74:	4607      	mov	r7, r0
	phy = conn->phy_rx;
   11e76:	f005 0507 	and.w	r5, r5, #7
{
   11e7a:	460e      	mov	r6, r1
	radio_phy_set(phy, 0);
   11e7c:	4628      	mov	r0, r5
   11e7e:	2100      	movs	r1, #0
   11e80:	f00b fd66 	bl	1d950 <radio_phy_set>
	if (conn->enc_rx) {
   11e84:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
   11e88:	006a      	lsls	r2, r5, #1
   11e8a:	06db      	lsls	r3, r3, #27
   11e8c:	b2e1      	uxtb	r1, r4
   11e8e:	f042 0201 	orr.w	r2, r2, #1
   11e92:	d50e      	bpl.n	11eb2 <rx_packet_set+0x46>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   11e94:	3104      	adds	r1, #4
   11e96:	b2c9      	uxtb	r1, r1
   11e98:	2008      	movs	r0, #8
   11e9a:	f00b fd9f 	bl	1d9dc <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   11e9e:	4632      	mov	r2, r6
   11ea0:	4629      	mov	r1, r5
   11ea2:	f107 00f9 	add.w	r0, r7, #249	; 0xf9
   11ea6:	f00b ffdf 	bl	1de68 <radio_ccm_rx_pkt_set>
}
   11eaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
   11eae:	f00b bdc3 	b.w	1da38 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   11eb2:	2008      	movs	r0, #8
   11eb4:	f00b fd92 	bl	1d9dc <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   11eb8:	4630      	mov	r0, r6
   11eba:	e7f6      	b.n	11eaa <rx_packet_set+0x3e>

00011ebc <tx_packet_set>:
{
   11ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ebe:	460f      	mov	r7, r1
	phy = conn->phy_tx;
   11ec0:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
   11ec4:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   11ec6:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
   11eca:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
   11ecc:	09c9      	lsrs	r1, r1, #7
   11ece:	4620      	mov	r0, r4
   11ed0:	f00b fd3e 	bl	1d950 <radio_phy_set>
	if (conn->enc_tx) {
   11ed4:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   11ed8:	0062      	lsls	r2, r4, #1
   11eda:	069b      	lsls	r3, r3, #26
   11edc:	b2e9      	uxtb	r1, r5
   11ede:	f042 0201 	orr.w	r2, r2, #1
   11ee2:	d50d      	bpl.n	11f00 <tx_packet_set+0x44>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   11ee4:	3104      	adds	r1, #4
   11ee6:	b2c9      	uxtb	r1, r1
   11ee8:	2008      	movs	r0, #8
   11eea:	f00b fd77 	bl	1d9dc <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   11eee:	4639      	mov	r1, r7
   11ef0:	f506 708d 	add.w	r0, r6, #282	; 0x11a
   11ef4:	f00b fff4 	bl	1dee0 <radio_ccm_tx_pkt_set>
}
   11ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   11efc:	f00b bda2 	b.w	1da44 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   11f00:	2008      	movs	r0, #8
   11f02:	f00b fd6b 	bl	1d9dc <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   11f06:	4638      	mov	r0, r7
   11f08:	e7f6      	b.n	11ef8 <tx_packet_set+0x3c>
   11f0a:	0000      	movs	r0, r0
   11f0c:	0000      	movs	r0, r0
	...

00011f10 <sched_free_win_offset_calc>:
{
   11f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f14:	b08f      	sub	sp, #60	; 0x3c
   11f16:	4692      	mov	sl, r2
   11f18:	9304      	str	r3, [sp, #16]
   11f1a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11f1e:	2b00      	cmp	r3, #0
{
   11f20:	4680      	mov	r8, r0
   11f22:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11f24:	da46      	bge.n	11fb4 <sched_free_win_offset_calc+0xa4>
		u32_t ticks_prepare_to_start =
   11f26:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
   11f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
   11f2c:	428a      	cmp	r2, r1
   11f2e:	bf2c      	ite	cs
   11f30:	1a9a      	subcs	r2, r3, r2
   11f32:	1a5a      	subcc	r2, r3, r1
	u32_t ticks_prepare_reduced = 0;
   11f34:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
   11f36:	f8d8 200c 	ldr.w	r2, [r8, #12]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   11f3a:	2400      	movs	r4, #0
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
   11f3c:	323d      	adds	r2, #61	; 0x3d
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   11f3e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   11f42:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
   11f44:	18d3      	adds	r3, r2, r3
   11f46:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   11f48:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
   11f4c:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   11f50:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   11f52:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
   11f54:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   11f56:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f58:	2302      	movs	r3, #2
   11f5a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f5c:	ab0d      	add	r3, sp, #52	; 0x34
   11f5e:	9302      	str	r3, [sp, #8]
   11f60:	4b8d      	ldr	r3, [pc, #564]	; (12198 <sched_free_win_offset_calc+0x288>)
   11f62:	9301      	str	r3, [sp, #4]
   11f64:	ab0b      	add	r3, sp, #44	; 0x2c
   11f66:	9300      	str	r3, [sp, #0]
   11f68:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   11f6c:	ab0c      	add	r3, sp, #48	; 0x30
   11f6e:	2101      	movs	r1, #1
   11f70:	2000      	movs	r0, #0
   11f72:	f7ff fa0b 	bl	1138c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   11f76:	2802      	cmp	r0, #2
   11f78:	d025      	beq.n	11fc6 <sched_free_win_offset_calc+0xb6>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   11f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11f7c:	b33b      	cbz	r3, 11fce <sched_free_win_offset_calc+0xbe>
   11f7e:	4b87      	ldr	r3, [pc, #540]	; (1219c <sched_free_win_offset_calc+0x28c>)
   11f80:	681b      	ldr	r3, [r3, #0]
   11f82:	0759      	lsls	r1, r3, #29
   11f84:	d010      	beq.n	11fa8 <sched_free_win_offset_calc+0x98>
   11f86:	2301      	movs	r3, #1
   11f88:	f04f 0200 	mov.w	r2, #0
   11f8c:	f363 0202 	bfi	r2, r3, #0, #3
   11f90:	4983      	ldr	r1, [pc, #524]	; (121a0 <sched_free_win_offset_calc+0x290>)
   11f92:	4b84      	ldr	r3, [pc, #528]	; (121a4 <sched_free_win_offset_calc+0x294>)
   11f94:	4884      	ldr	r0, [pc, #528]	; (121a8 <sched_free_win_offset_calc+0x298>)
   11f96:	1a5b      	subs	r3, r3, r1
   11f98:	f36f 02c5 	bfc	r2, #3, #3
   11f9c:	08db      	lsrs	r3, r3, #3
   11f9e:	4983      	ldr	r1, [pc, #524]	; (121ac <sched_free_win_offset_calc+0x29c>)
   11fa0:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(0);
   11fa4:	f7ef fed8 	bl	1d58 <log_1>
   11fa8:	4040      	eors	r0, r0
   11faa:	f380 8811 	msr	BASEPRI, r0
   11fae:	f04f 0004 	mov.w	r0, #4
   11fb2:	df02      	svc	2
		u32_t ticks_prepare_to_start =
   11fb4:	4293      	cmp	r3, r2
   11fb6:	bf38      	it	cc
   11fb8:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
   11fba:	2200      	movs	r2, #0
   11fbc:	e7ba      	b.n	11f34 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fbe:	2101      	movs	r1, #1
   11fc0:	2000      	movs	r0, #0
   11fc2:	f7ff fa5b 	bl	1147c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   11fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11fc8:	2b02      	cmp	r3, #2
   11fca:	d0f8      	beq.n	11fbe <sched_free_win_offset_calc+0xae>
   11fcc:	e7d5      	b.n	11f7a <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
   11fce:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   11fd2:	2aff      	cmp	r2, #255	; 0xff
   11fd4:	d071      	beq.n	120ba <sched_free_win_offset_calc+0x1aa>
		if ((ticker_id_prev != 0xff) &&
   11fd6:	2fff      	cmp	r7, #255	; 0xff
   11fd8:	d016      	beq.n	12008 <sched_free_win_offset_calc+0xf8>
   11fda:	990c      	ldr	r1, [sp, #48]	; 0x30
   11fdc:	4549      	cmp	r1, r9
   11fde:	d013      	beq.n	12008 <sched_free_win_offset_calc+0xf8>
			LL_ASSERT(0);
   11fe0:	4a6e      	ldr	r2, [pc, #440]	; (1219c <sched_free_win_offset_calc+0x28c>)
   11fe2:	6812      	ldr	r2, [r2, #0]
   11fe4:	0752      	lsls	r2, r2, #29
   11fe6:	d0df      	beq.n	11fa8 <sched_free_win_offset_calc+0x98>
   11fe8:	2101      	movs	r1, #1
   11fea:	f04f 0200 	mov.w	r2, #0
   11fee:	f361 0202 	bfi	r2, r1, #0, #3
   11ff2:	f363 02c5 	bfi	r2, r3, #3, #3
   11ff6:	496a      	ldr	r1, [pc, #424]	; (121a0 <sched_free_win_offset_calc+0x290>)
   11ff8:	4b6a      	ldr	r3, [pc, #424]	; (121a4 <sched_free_win_offset_calc+0x294>)
   11ffa:	486d      	ldr	r0, [pc, #436]	; (121b0 <sched_free_win_offset_calc+0x2a0>)
   11ffc:	1a5b      	subs	r3, r3, r1
   11ffe:	08db      	lsrs	r3, r3, #3
   12000:	f363 128f 	bfi	r2, r3, #6, #10
   12004:	4969      	ldr	r1, [pc, #420]	; (121ac <sched_free_win_offset_calc+0x29c>)
   12006:	e7cd      	b.n	11fa4 <sched_free_win_offset_calc+0x94>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12008:	2a05      	cmp	r2, #5
   1200a:	d951      	bls.n	120b0 <sched_free_win_offset_calc+0x1a0>
				  _radio.connection_count)) {
   1200c:	4869      	ldr	r0, [pc, #420]	; (121b4 <sched_free_win_offset_calc+0x2a4>)
   1200e:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12012:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12014:	429a      	cmp	r2, r3
   12016:	da4b      	bge.n	120b0 <sched_free_win_offset_calc+0x1a0>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12018:	2a06      	cmp	r2, #6
   1201a:	f000 8092 	beq.w	12142 <sched_free_win_offset_calc+0x232>
		if (ticker_id_other != 0xFF) {
   1201e:	9b06      	ldr	r3, [sp, #24]
   12020:	2bff      	cmp	r3, #255	; 0xff
   12022:	d14a      	bne.n	120ba <sched_free_win_offset_calc+0x1aa>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12024:	3a07      	subs	r2, #7
   12026:	b292      	uxth	r2, r2
   12028:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1202c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   12030:	f7fe fa8c 	bl	1054c <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12034:	4580      	cmp	r8, r0
   12036:	d03b      	beq.n	120b0 <sched_free_win_offset_calc+0x1a0>
   12038:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1203a:	b91b      	cbnz	r3, 12044 <sched_free_win_offset_calc+0x134>
   1203c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12040:	2b00      	cmp	r3, #0
   12042:	db35      	blt.n	120b0 <sched_free_win_offset_calc+0x1a0>
			u32_t ticks_to_expire_normal =
   12044:	9b05      	ldr	r3, [sp, #20]
   12046:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12048:	441e      	add	r6, r3
   1204a:	e9d0 3200 	ldrd	r3, r2, [r0]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1204e:	2b00      	cmp	r3, #0
   12050:	da4e      	bge.n	120f0 <sched_free_win_offset_calc+0x1e0>
				u32_t ticks_prepare_to_start =
   12052:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
   12054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12058:	428a      	cmp	r2, r1
   1205a:	bf2c      	ite	cs
   1205c:	18b6      	addcs	r6, r6, r2
   1205e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
   12060:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
   12062:	68c2      	ldr	r2, [r0, #12]
   12064:	f102 093d 	add.w	r9, r2, #61	; 0x3d
   12068:	444b      	add	r3, r9
   1206a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1206c:	f8da 3000 	ldr.w	r3, [sl]
   12070:	42b3      	cmp	r3, r6
   12072:	d216      	bcs.n	120a2 <sched_free_win_offset_calc+0x192>
   12074:	429d      	cmp	r5, r3
   12076:	bf38      	it	cc
   12078:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
   1207a:	9b07      	ldr	r3, [sp, #28]
   1207c:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
   12080:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12082:	781b      	ldrb	r3, [r3, #0]
   12084:	42a3      	cmp	r3, r4
   12086:	d905      	bls.n	12094 <sched_free_win_offset_calc+0x184>
				       (ticker_ticks_diff_get(
   12088:	4629      	mov	r1, r5
   1208a:	4630      	mov	r0, r6
   1208c:	f7ff fa0e 	bl	114ac <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
   12090:	42b8      	cmp	r0, r7
   12092:	d231      	bcs.n	120f8 <sched_free_win_offset_calc+0x1e8>
				if (_win_offset >= conn_interval) {
   12094:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   12098:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
   1209a:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
   1209e:	4293      	cmp	r3, r2
   120a0:	d20b      	bcs.n	120ba <sched_free_win_offset_calc+0x1aa>
			ticks_anchor_prev = ticks_anchor;
   120a2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
   120a6:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   120aa:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
   120ae:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
   120b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   120b2:	781b      	ldrb	r3, [r3, #0]
   120b4:	42a3      	cmp	r3, r4
   120b6:	f63f af4f 	bhi.w	11f58 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
   120ba:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   120be:	2bff      	cmp	r3, #255	; 0xff
   120c0:	d111      	bne.n	120e6 <sched_free_win_offset_calc+0x1d6>
   120c2:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
   120c6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 121b8 <sched_free_win_offset_calc+0x2a8>
   120ca:	a731      	add	r7, pc, #196	; (adr r7, 12190 <sched_free_win_offset_calc+0x280>)
   120cc:	e9d7 6700 	ldrd	r6, r7, [r7]
   120d0:	429d      	cmp	r5, r3
   120d2:	bf38      	it	cc
   120d4:	461d      	movcc	r5, r3
   120d6:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
   120da:	9b18      	ldr	r3, [sp, #96]	; 0x60
   120dc:	781b      	ldrb	r3, [r3, #0]
   120de:	42a3      	cmp	r3, r4
   120e0:	d831      	bhi.n	12146 <sched_free_win_offset_calc+0x236>
		*ticks_to_offset_next = ticks_to_expire_prev;
   120e2:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
   120e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   120e8:	701c      	strb	r4, [r3, #0]
}
   120ea:	b00f      	add	sp, #60	; 0x3c
   120ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
   120f0:	4293      	cmp	r3, r2
   120f2:	bf38      	it	cc
   120f4:	4613      	movcc	r3, r2
   120f6:	e7b4      	b.n	12062 <sched_free_win_offset_calc+0x152>
					_win_offset = HAL_TICKER_TICKS_TO_US(
   120f8:	4a2f      	ldr	r2, [pc, #188]	; (121b8 <sched_free_win_offset_calc+0x2a8>)
   120fa:	eb05 030b 	add.w	r3, r5, fp
   120fe:	fba3 0102 	umull	r0, r1, r3, r2
   12102:	2207      	movs	r2, #7
   12104:	fb02 1103 	mla	r1, r2, r3, r1
   12108:	a321      	add	r3, pc, #132	; (adr r3, 12190 <sched_free_win_offset_calc+0x280>)
   1210a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1210e:	f7ee f8d1 	bl	2b4 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
   12112:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12116:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
   1211a:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
   1211c:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
   1211e:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
   12120:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
   12124:	d20b      	bcs.n	1213e <sched_free_win_offset_calc+0x22e>
					memcpy(win_offset +
   12126:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12128:	2202      	movs	r2, #2
   1212a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
   1212e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
   12132:	3401      	adds	r4, #1
					memcpy(win_offset +
   12134:	f7f3 fea8 	bl	5e88 <memcpy>
					offset_index++;
   12138:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   1213a:	3528      	adds	r5, #40	; 0x28
   1213c:	e7a0      	b.n	12080 <sched_free_win_offset_calc+0x170>
						ticks_to_expire_prev = 0;
   1213e:	2500      	movs	r5, #0
   12140:	e7a8      	b.n	12094 <sched_free_win_offset_calc+0x184>
			ticker_id_other = ticker_id;
   12142:	9206      	str	r2, [sp, #24]
   12144:	e7b4      	b.n	120b0 <sched_free_win_offset_calc+0x1a0>
			_win_offset = HAL_TICKER_TICKS_TO_US(
   12146:	eb05 030b 	add.w	r3, r5, fp
   1214a:	fba3 0108 	umull	r0, r1, r3, r8
   1214e:	fb09 1103 	mla	r1, r9, r3, r1
   12152:	4632      	mov	r2, r6
   12154:	463b      	mov	r3, r7
   12156:	f7ee f8ad 	bl	2b4 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
   1215a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1215e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
   12162:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
   12164:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
   12166:	4298      	cmp	r0, r3
			_win_offset = HAL_TICKER_TICKS_TO_US(
   12168:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
   1216c:	d20b      	bcs.n	12186 <sched_free_win_offset_calc+0x276>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   1216e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12170:	2202      	movs	r2, #2
   12172:	eb03 0044 	add.w	r0, r3, r4, lsl #1
   12176:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
   1217a:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   1217c:	f7f3 fe84 	bl	5e88 <memcpy>
			offset_index++;
   12180:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
   12182:	3528      	adds	r5, #40	; 0x28
   12184:	e7a9      	b.n	120da <sched_free_win_offset_calc+0x1ca>
				ticks_to_expire_prev = 0;
   12186:	2500      	movs	r5, #0
   12188:	e7ab      	b.n	120e2 <sched_free_win_offset_calc+0x1d2>
   1218a:	bf00      	nop
   1218c:	f3af 8000 	nop.w
   12190:	3b9aca00 	.word	0x3b9aca00
   12194:	00000000 	.word	0x00000000
   12198:	0001156d 	.word	0x0001156d
   1219c:	2000d72c 	.word	0x2000d72c
   121a0:	0002cff8 	.word	0x0002cff8
   121a4:	0002d030 	.word	0x0002d030
   121a8:	000312ff 	.word	0x000312ff
   121ac:	00030721 	.word	0x00030721
   121b0:	0002f0b9 	.word	0x0002f0b9
   121b4:	2000110c 	.word	0x2000110c
   121b8:	1afd498d 	.word	0x1afd498d

000121bc <mayfly_sched_free_win_offset_calc>:
{
   121bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
   121be:	2300      	movs	r3, #0
   121c0:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   121c2:	2306      	movs	r3, #6
   121c4:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   121c8:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   121cc:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
   121d0:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
   121d2:	bfbe      	ittt	lt
   121d4:	4602      	movlt	r2, r0
   121d6:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
   121d8:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   121dc:	9101      	str	r1, [sp, #4]
   121de:	f10d 010b 	add.w	r1, sp, #11
   121e2:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
   121e4:	bfa8      	it	ge
   121e6:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   121e8:	f8b0 30c6 	ldrh.w	r3, [r0, #198]	; 0xc6
   121ec:	2100      	movs	r1, #0
   121ee:	f7ff fe8f 	bl	11f10 <sched_free_win_offset_calc>
}
   121f2:	b005      	add	sp, #20
   121f4:	f85d fb04 	ldr.w	pc, [sp], #4

000121f8 <mayfly_sched_win_offset_select>:
{
   121f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   121fc:	f8b0 70d0 	ldrh.w	r7, [r0, #208]	; 0xd0
{
   12200:	b089      	sub	sp, #36	; 0x24
   12202:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   12204:	4842      	ldr	r0, [pc, #264]	; (12310 <mayfly_sched_win_offset_select+0x118>)
	u8_t offset_m_max = OFFSET_M_MAX;
   12206:	2306      	movs	r3, #6
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   12208:	fba7 0100 	umull	r0, r1, r7, r0
	u8_t offset_m_max = OFFSET_M_MAX;
   1220c:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   12210:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12214:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   12216:	fb03 1107 	mla	r1, r3, r7, r1
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   1221a:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   1221c:	a33a      	add	r3, pc, #232	; (adr r3, 12308 <mayfly_sched_win_offset_select+0x110>)
   1221e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12222:	9505      	str	r5, [sp, #20]
   12224:	e9c6 5501 	strd	r5, r5, [r6, #4]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   12228:	f7ee f844 	bl	2b4 <__aeabi_uldivmod>
   1222c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   1222e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   12232:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   12236:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1223a:	9100      	str	r1, [sp, #0]
   1223c:	9601      	str	r6, [sp, #4]
   1223e:	2101      	movs	r1, #1
   12240:	4620      	mov	r0, r4
   12242:	f7ff fe65 	bl	11f10 <sched_free_win_offset_calc>
   12246:	f104 07d0 	add.w	r7, r4, #208	; 0xd0
	u8_t has_offset_s = 0;
   1224a:	46a8      	mov	r8, r5
			if (win_offset_s != 0xffff) {
   1224c:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
   12250:	2202      	movs	r2, #2
   12252:	4639      	mov	r1, r7
   12254:	f10d 000e 	add.w	r0, sp, #14
   12258:	f7f3 fe16 	bl	5e88 <memcpy>
		while (offset_index_m < offset_m_max) {
   1225c:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
   12260:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
   12264:	2300      	movs	r3, #0
   12266:	b2d9      	uxtb	r1, r3
   12268:	4288      	cmp	r0, r1
   1226a:	d815      	bhi.n	12298 <mayfly_sched_win_offset_select+0xa0>
   1226c:	3501      	adds	r5, #1
	while (offset_index_s < OFFSET_S_MAX) {
   1226e:	2d06      	cmp	r5, #6
   12270:	f107 0702 	add.w	r7, r7, #2
   12274:	d1ec      	bne.n	12250 <mayfly_sched_win_offset_select+0x58>
   12276:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	} else if (!has_offset_s) {
   1227a:	f1b8 0f00 	cmp.w	r8, #0
   1227e:	d115      	bne.n	122ac <mayfly_sched_win_offset_select+0xb4>
			win_offset_m[0] * 1250;
   12280:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   12284:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12288:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
   1228a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   1228e:	2202      	movs	r2, #2
   12290:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12292:	f7f3 fdf9 	bl	5e88 <memcpy>
   12296:	e026      	b.n	122e6 <mayfly_sched_win_offset_select+0xee>
			if (win_offset_s != 0xffff) {
   12298:	454a      	cmp	r2, r9
   1229a:	d005      	beq.n	122a8 <mayfly_sched_win_offset_select+0xb0>
				if (win_offset_s ==
   1229c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
   122a0:	4291      	cmp	r1, r2
   122a2:	d023      	beq.n	122ec <mayfly_sched_win_offset_select+0xf4>
				has_offset_s = 1;
   122a4:	f04f 0801 	mov.w	r8, #1
   122a8:	3301      	adds	r3, #1
   122aa:	e7dc      	b.n	12266 <mayfly_sched_win_offset_select+0x6e>
		conn->llcp_ack = conn->llcp_req;
   122ac:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   122b0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   122b4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   122b8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   122bc:	4b15      	ldr	r3, [pc, #84]	; (12314 <mayfly_sched_win_offset_select+0x11c>)
   122be:	2200      	movs	r2, #0
   122c0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122c4:	f810 3c05 	ldrb.w	r3, [r0, #-5]
   122c8:	f043 0303 	orr.w	r3, r3, #3
   122cc:	f800 3c05 	strb.w	r3, [r0, #-5]
		pdu_ctrl_tx->len =
   122d0:	2303      	movs	r3, #3
   122d2:	f800 3c04 	strb.w	r3, [r0, #-4]
		pdu_ctrl_tx->llctrl.opcode =
   122d6:	2311      	movs	r3, #17
   122d8:	f800 3c02 	strb.w	r3, [r0, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   122dc:	230f      	movs	r3, #15
   122de:	f800 3c01 	strb.w	r3, [r0, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   122e2:	2320      	movs	r3, #32
   122e4:	7003      	strb	r3, [r0, #0]
}
   122e6:	b009      	add	sp, #36	; 0x24
   122e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
   122ec:	f240 43e2 	movw	r3, #1250	; 0x4e2
   122f0:	4353      	muls	r3, r2
   122f2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
		conn->llcp.conn_upd.win_offset_us =
   122f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   122fa:	2202      	movs	r2, #2
   122fc:	f10d 010e 	add.w	r1, sp, #14
   12300:	e7c7      	b.n	12292 <mayfly_sched_win_offset_select+0x9a>
   12302:	bf00      	nop
   12304:	f3af 8000 	nop.w
   12308:	1afd498d 	.word	0x1afd498d
   1230c:	00000007 	.word	0x00000007
   12310:	09ce5400 	.word	0x09ce5400
   12314:	2000110c 	.word	0x2000110c

00012318 <sched_after_mstr_free_slot_get>:
{
   12318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1231c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   1231e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
   12320:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
   12322:	f8df 9150 	ldr.w	r9, [pc, #336]	; 12474 <sched_after_mstr_free_slot_get+0x15c>
	ticker_id = ticker_id_prev = 0xff;
   12326:	f88d 501f 	strb.w	r5, [sp, #31]
{
   1232a:	4680      	mov	r8, r0
   1232c:	4693      	mov	fp, r2
   1232e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
   12330:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12334:	601c      	str	r4, [r3, #0]
   12336:	9408      	str	r4, [sp, #32]
   12338:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1233a:	2302      	movs	r3, #2
   1233c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1233e:	ab09      	add	r3, sp, #36	; 0x24
   12340:	9302      	str	r3, [sp, #8]
   12342:	4b45      	ldr	r3, [pc, #276]	; (12458 <sched_after_mstr_free_slot_get+0x140>)
   12344:	9301      	str	r3, [sp, #4]
   12346:	ab08      	add	r3, sp, #32
   12348:	9300      	str	r3, [sp, #0]
   1234a:	f10d 021f 	add.w	r2, sp, #31
   1234e:	465b      	mov	r3, fp
   12350:	4641      	mov	r1, r8
   12352:	2000      	movs	r0, #0
   12354:	f7ff f81a 	bl	1138c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12358:	2802      	cmp	r0, #2
   1235a:	d020      	beq.n	1239e <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1235c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1235e:	b313      	cbz	r3, 123a6 <sched_after_mstr_free_slot_get+0x8e>
   12360:	4b3e      	ldr	r3, [pc, #248]	; (1245c <sched_after_mstr_free_slot_get+0x144>)
   12362:	681b      	ldr	r3, [r3, #0]
   12364:	075b      	lsls	r3, r3, #29
   12366:	d010      	beq.n	1238a <sched_after_mstr_free_slot_get+0x72>
   12368:	2301      	movs	r3, #1
   1236a:	f04f 0200 	mov.w	r2, #0
   1236e:	f363 0202 	bfi	r2, r3, #0, #3
   12372:	493b      	ldr	r1, [pc, #236]	; (12460 <sched_after_mstr_free_slot_get+0x148>)
   12374:	4b3b      	ldr	r3, [pc, #236]	; (12464 <sched_after_mstr_free_slot_get+0x14c>)
   12376:	483c      	ldr	r0, [pc, #240]	; (12468 <sched_after_mstr_free_slot_get+0x150>)
   12378:	1a5b      	subs	r3, r3, r1
   1237a:	f36f 02c5 	bfc	r2, #3, #3
   1237e:	08db      	lsrs	r3, r3, #3
   12380:	f363 128f 	bfi	r2, r3, #6, #10
   12384:	4939      	ldr	r1, [pc, #228]	; (1246c <sched_after_mstr_free_slot_get+0x154>)
   12386:	f7ef fce7 	bl	1d58 <log_1>
   1238a:	4040      	eors	r0, r0
   1238c:	f380 8811 	msr	BASEPRI, r0
   12390:	f04f 0004 	mov.w	r0, #4
   12394:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12396:	4641      	mov	r1, r8
   12398:	2000      	movs	r0, #0
   1239a:	f7ff f86f 	bl	1147c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1239e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123a0:	2b02      	cmp	r3, #2
   123a2:	d0f8      	beq.n	12396 <sched_after_mstr_free_slot_get+0x7e>
   123a4:	e7da      	b.n	1235c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
   123a6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   123aa:	2aff      	cmp	r2, #255	; 0xff
   123ac:	d04d      	beq.n	1244a <sched_after_mstr_free_slot_get+0x132>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   123ae:	2a06      	cmp	r2, #6
   123b0:	d9c3      	bls.n	1233a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
   123b2:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   123b6:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   123b8:	429a      	cmp	r2, r3
   123ba:	dabe      	bge.n	1233a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   123bc:	3a07      	subs	r2, #7
   123be:	b292      	uxth	r2, r2
   123c0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   123c4:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
   123c8:	f7fe f8c0 	bl	1054c <mem_get>
		if (conn && !conn->role) {
   123cc:	2800      	cmp	r0, #0
   123ce:	d0b4      	beq.n	1233a <sched_after_mstr_free_slot_get+0x22>
   123d0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   123d4:	2b00      	cmp	r3, #0
   123d6:	dbb0      	blt.n	1233a <sched_after_mstr_free_slot_get+0x22>
   123d8:	e9d0 3c00 	ldrd	r3, ip, [r0]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   123dc:	2b00      	cmp	r3, #0
			u32_t ticks_to_expire_normal = ticks_to_expire;
   123de:	9a08      	ldr	r2, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   123e0:	da12      	bge.n	12408 <sched_after_mstr_free_slot_get+0xf0>
   123e2:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
   123e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   123e8:	458c      	cmp	ip, r1
   123ea:	bf2c      	ite	cs
   123ec:	4462      	addcs	r2, ip
   123ee:	1852      	addcc	r2, r2, r1
				ticks_to_expire_normal -=
   123f0:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
   123f2:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
   123f4:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
   123f6:	f101 0104 	add.w	r1, r1, #4
   123fa:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
   123fc:	d108      	bne.n	12410 <sched_after_mstr_free_slot_get+0xf8>
			ticker_id_prev = ticker_id;
   123fe:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   12402:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
   12404:	4616      	mov	r6, r2
   12406:	e798      	b.n	1233a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
   12408:	4563      	cmp	r3, ip
   1240a:	bf38      	it	cc
   1240c:	4663      	movcc	r3, ip
   1240e:	e7f0      	b.n	123f2 <sched_after_mstr_free_slot_get+0xda>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   12410:	4631      	mov	r1, r6
   12412:	4610      	mov	r0, r2
   12414:	9305      	str	r3, [sp, #20]
   12416:	9204      	str	r2, [sp, #16]
   12418:	f7ff f848 	bl	114ac <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
   1241c:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
   12420:	4288      	cmp	r0, r1
   12422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12426:	d9ea      	bls.n	123fe <sched_after_mstr_free_slot_get+0xe6>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12428:	4811      	ldr	r0, [pc, #68]	; (12470 <sched_after_mstr_free_slot_get+0x158>)
   1242a:	4434      	add	r4, r6
   1242c:	fba4 0100 	umull	r0, r1, r4, r0
   12430:	2307      	movs	r3, #7
   12432:	fb03 1104 	mla	r1, r3, r4, r1
   12436:	a306      	add	r3, pc, #24	; (adr r3, 12450 <sched_after_mstr_free_slot_get+0x138>)
   12438:	e9d3 2300 	ldrd	r2, r3, [r3]
   1243c:	f7ed ff3a 	bl	2b4 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
   12440:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12442:	6038      	str	r0, [r7, #0]
}
   12444:	b00b      	add	sp, #44	; 0x2c
   12446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
   1244a:	2dff      	cmp	r5, #255	; 0xff
   1244c:	d1ec      	bne.n	12428 <sched_after_mstr_free_slot_get+0x110>
   1244e:	e7f9      	b.n	12444 <sched_after_mstr_free_slot_get+0x12c>
   12450:	3b9aca00 	.word	0x3b9aca00
   12454:	00000000 	.word	0x00000000
   12458:	0001156d 	.word	0x0001156d
   1245c:	2000d72c 	.word	0x2000d72c
   12460:	0002cff8 	.word	0x0002cff8
   12464:	0002d030 	.word	0x0002d030
   12468:	000312ff 	.word	0x000312ff
   1246c:	000306e1 	.word	0x000306e1
   12470:	1afd498d 	.word	0x1afd498d
   12474:	2000110c 	.word	0x2000110c

00012478 <isr_adv_ci_adva_check>:
{
   12478:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   1247a:	7804      	ldrb	r4, [r0, #0]
   1247c:	780a      	ldrb	r2, [r1, #0]
   1247e:	f3c4 1380 	ubfx	r3, r4, #6, #1
   12482:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   12486:	d119      	bne.n	124bc <isr_adv_ci_adva_check+0x44>
   12488:	f004 040f 	and.w	r4, r4, #15
   1248c:	2c01      	cmp	r4, #1
   1248e:	f100 0502 	add.w	r5, r0, #2
   12492:	f101 0608 	add.w	r6, r1, #8
   12496:	d008      	beq.n	124aa <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   12498:	2206      	movs	r2, #6
   1249a:	4631      	mov	r1, r6
   1249c:	4628      	mov	r0, r5
   1249e:	f7f3 fccc 	bl	5e3a <memcmp>
			 BDADDR_SIZE)) ||
   124a2:	fab0 f080 	clz	r0, r0
   124a6:	0940      	lsrs	r0, r0, #5
}
   124a8:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   124aa:	2206      	movs	r2, #6
   124ac:	4631      	mov	r1, r6
   124ae:	4628      	mov	r0, r5
   124b0:	f7f3 fcc3 	bl	5e3a <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   124b4:	2800      	cmp	r0, #0
   124b6:	d1ef      	bne.n	12498 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   124b8:	4620      	mov	r0, r4
   124ba:	e7f5      	b.n	124a8 <isr_adv_ci_adva_check+0x30>
   124bc:	2000      	movs	r0, #0
   124be:	e7f3      	b.n	124a8 <isr_adv_ci_adva_check+0x30>

000124c0 <packet_rx_enqueue>:
{
   124c0:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   124c2:	4a2a      	ldr	r2, [pc, #168]	; (1256c <packet_rx_enqueue+0xac>)
   124c4:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
   124c8:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
   124cc:	4299      	cmp	r1, r3
   124ce:	d11a      	bne.n	12506 <packet_rx_enqueue+0x46>
   124d0:	4b27      	ldr	r3, [pc, #156]	; (12570 <packet_rx_enqueue+0xb0>)
   124d2:	681b      	ldr	r3, [r3, #0]
   124d4:	075a      	lsls	r2, r3, #29
   124d6:	d010      	beq.n	124fa <packet_rx_enqueue+0x3a>
   124d8:	2301      	movs	r3, #1
   124da:	f04f 0200 	mov.w	r2, #0
   124de:	f363 0202 	bfi	r2, r3, #0, #3
   124e2:	4924      	ldr	r1, [pc, #144]	; (12574 <packet_rx_enqueue+0xb4>)
   124e4:	4b24      	ldr	r3, [pc, #144]	; (12578 <packet_rx_enqueue+0xb8>)
   124e6:	4825      	ldr	r0, [pc, #148]	; (1257c <packet_rx_enqueue+0xbc>)
   124e8:	1a5b      	subs	r3, r3, r1
   124ea:	f36f 02c5 	bfc	r2, #3, #3
   124ee:	08db      	lsrs	r3, r3, #3
   124f0:	4923      	ldr	r1, [pc, #140]	; (12580 <packet_rx_enqueue+0xc0>)
   124f2:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(link);
   124f6:	f7ef fc2f 	bl	1d58 <log_1>
   124fa:	4040      	eors	r0, r0
   124fc:	f380 8811 	msr	BASEPRI, r0
   12500:	f04f 0004 	mov.w	r0, #4
   12504:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   12506:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
   1250a:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
   1250e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   12512:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
   12516:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   12518:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
   1251a:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
   1251e:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
   12522:	3301      	adds	r3, #1
   12524:	b2db      	uxtb	r3, r3
		last = 0;
   12526:	429c      	cmp	r4, r3
   12528:	bf08      	it	eq
   1252a:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
   1252c:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   12530:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   12534:	f7fe f82f 	bl	10596 <memq_enqueue>
	LL_ASSERT(link);
   12538:	b998      	cbnz	r0, 12562 <packet_rx_enqueue+0xa2>
   1253a:	4b0d      	ldr	r3, [pc, #52]	; (12570 <packet_rx_enqueue+0xb0>)
   1253c:	681b      	ldr	r3, [r3, #0]
   1253e:	075b      	lsls	r3, r3, #29
   12540:	d0db      	beq.n	124fa <packet_rx_enqueue+0x3a>
   12542:	2301      	movs	r3, #1
   12544:	f04f 0200 	mov.w	r2, #0
   12548:	f363 0202 	bfi	r2, r3, #0, #3
   1254c:	4909      	ldr	r1, [pc, #36]	; (12574 <packet_rx_enqueue+0xb4>)
   1254e:	4b0a      	ldr	r3, [pc, #40]	; (12578 <packet_rx_enqueue+0xb8>)
   12550:	1a5b      	subs	r3, r3, r1
   12552:	f360 02c5 	bfi	r2, r0, #3, #3
   12556:	08db      	lsrs	r3, r3, #3
   12558:	f363 128f 	bfi	r2, r3, #6, #10
   1255c:	4908      	ldr	r1, [pc, #32]	; (12580 <packet_rx_enqueue+0xc0>)
   1255e:	4809      	ldr	r0, [pc, #36]	; (12584 <packet_rx_enqueue+0xc4>)
   12560:	e7c9      	b.n	124f6 <packet_rx_enqueue+0x36>
}
   12562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   12566:	f007 bda3 	b.w	1a0b0 <radio_event_callback>
   1256a:	bf00      	nop
   1256c:	2000110c 	.word	0x2000110c
   12570:	2000d72c 	.word	0x2000d72c
   12574:	0002cff8 	.word	0x0002cff8
   12578:	0002d030 	.word	0x0002d030
   1257c:	00031093 	.word	0x00031093
   12580:	000308e4 	.word	0x000308e4
   12584:	000309b5 	.word	0x000309b5

00012588 <isr_scan_tgta_check>:
{
   12588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1258c:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1258e:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
   12590:	f101 0808 	add.w	r8, r1, #8
{
   12594:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   12596:	09c0      	lsrs	r0, r0, #7
   12598:	4641      	mov	r1, r8
{
   1259a:	4691      	mov	r9, r2
   1259c:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1259e:	f00a fc0b 	bl	1cdb8 <ctrl_rl_addr_resolve>
   125a2:	4604      	mov	r4, r0
   125a4:	b9d8      	cbnz	r0, 125de <isr_scan_tgta_check+0x56>
   125a6:	4f1c      	ldr	r7, [pc, #112]	; (12618 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   125a8:	f1ba 0f00 	cmp.w	sl, #0
   125ac:	d10e      	bne.n	125cc <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   125ae:	782b      	ldrb	r3, [r5, #0]
   125b0:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
   125b4:	09db      	lsrs	r3, r3, #7
   125b6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   125ba:	d113      	bne.n	125e4 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
   125bc:	2206      	movs	r2, #6
   125be:	4641      	mov	r1, r8
   125c0:	4816      	ldr	r0, [pc, #88]	; (1261c <isr_scan_tgta_check+0x94>)
   125c2:	f7f3 fc3a 	bl	5e3a <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   125c6:	b968      	cbnz	r0, 125e4 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
   125c8:	2001      	movs	r0, #1
   125ca:	e012      	b.n	125f2 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   125cc:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
   125d0:	07db      	lsls	r3, r3, #31
   125d2:	d5ec      	bpl.n	125ae <isr_scan_tgta_check+0x26>
   125d4:	4648      	mov	r0, r9
   125d6:	f00a f88d 	bl	1c6f4 <ctrl_lrpa_get>
   125da:	2800      	cmp	r0, #0
   125dc:	d0e7      	beq.n	125ae <isr_scan_tgta_check+0x26>
}
   125de:	4620      	mov	r0, r4
   125e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   125e4:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
   125e8:	f3c0 1001 	ubfx	r0, r0, #4, #2
   125ec:	f010 0002 	ands.w	r0, r0, #2
   125f0:	d101      	bne.n	125f6 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
   125f2:	4604      	mov	r4, r0
   125f4:	e7f3      	b.n	125de <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   125f6:	f995 3000 	ldrsb.w	r3, [r5]
   125fa:	2b00      	cmp	r3, #0
   125fc:	da09      	bge.n	12612 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
   125fe:	7b6b      	ldrb	r3, [r5, #13]
   12600:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12604:	2b40      	cmp	r3, #64	; 0x40
   12606:	d104      	bne.n	12612 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
   12608:	2e00      	cmp	r6, #0
   1260a:	d0dd      	beq.n	125c8 <isr_scan_tgta_check+0x40>
			*dir_report = true;
   1260c:	2001      	movs	r0, #1
   1260e:	7030      	strb	r0, [r6, #0]
   12610:	e7ef      	b.n	125f2 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
   12612:	2000      	movs	r0, #0
   12614:	e7ed      	b.n	125f2 <isr_scan_tgta_check+0x6a>
   12616:	bf00      	nop
   12618:	2000110c 	.word	0x2000110c
   1261c:	200011f0 	.word	0x200011f0

00012620 <isr_rx_scan_report>:
{
   12620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12624:	4680      	mov	r8, r0
	node_rx = packet_rx_reserve_get(3);
   12626:	2003      	movs	r0, #3
{
   12628:	460f      	mov	r7, r1
   1262a:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
   1262c:	f7fe ffe6 	bl	115fc <packet_rx_reserve_get>
	if (node_rx == 0) {
   12630:	4604      	mov	r4, r0
   12632:	2800      	cmp	r0, #0
   12634:	d046      	beq.n	126c4 <isr_rx_scan_report+0xa4>
	node_rx->hdr.handle = 0xffff;
   12636:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1263a:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
   1263c:	4b22      	ldr	r3, [pc, #136]	; (126c8 <isr_rx_scan_report+0xa8>)
   1263e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   12642:	075a      	lsls	r2, r3, #29
   12644:	d03a      	beq.n	126bc <isr_rx_scan_report+0x9c>
		switch (_radio.scanner.phy) {
   12646:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1264a:	b2da      	uxtb	r2, r3
   1264c:	2a01      	cmp	r2, #1
   1264e:	d01c      	beq.n	1268a <isr_rx_scan_report+0x6a>
   12650:	2a04      	cmp	r2, #4
   12652:	d01b      	beq.n	1268c <isr_rx_scan_report+0x6c>
			LL_ASSERT(0);
   12654:	4b1d      	ldr	r3, [pc, #116]	; (126cc <isr_rx_scan_report+0xac>)
   12656:	681b      	ldr	r3, [r3, #0]
   12658:	075b      	lsls	r3, r3, #29
   1265a:	d010      	beq.n	1267e <isr_rx_scan_report+0x5e>
   1265c:	2301      	movs	r3, #1
   1265e:	f04f 0200 	mov.w	r2, #0
   12662:	f363 0202 	bfi	r2, r3, #0, #3
   12666:	491a      	ldr	r1, [pc, #104]	; (126d0 <isr_rx_scan_report+0xb0>)
   12668:	4b1a      	ldr	r3, [pc, #104]	; (126d4 <isr_rx_scan_report+0xb4>)
   1266a:	481b      	ldr	r0, [pc, #108]	; (126d8 <isr_rx_scan_report+0xb8>)
   1266c:	1a5b      	subs	r3, r3, r1
   1266e:	f36f 02c5 	bfc	r2, #3, #3
   12672:	08db      	lsrs	r3, r3, #3
   12674:	f363 128f 	bfi	r2, r3, #6, #10
   12678:	4918      	ldr	r1, [pc, #96]	; (126dc <isr_rx_scan_report+0xbc>)
   1267a:	f7ef fb6d 	bl	1d58 <log_1>
   1267e:	4040      	eors	r0, r0
   12680:	f380 8811 	msr	BASEPRI, r0
   12684:	f04f 0004 	mov.w	r0, #4
   12688:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
   1268a:	2303      	movs	r3, #3
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1268c:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
   1268e:	f104 0508 	add.w	r5, r4, #8
			     pdu_adv_rx->len] =
   12692:	f1b8 0f00 	cmp.w	r8, #0
   12696:	d013      	beq.n	126c0 <isr_rx_scan_report+0xa0>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   12698:	f00b fa7c 	bl	1db94 <radio_rssi_get>
			     pdu_adv_rx->len] =
   1269c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   126a0:	7a63      	ldrb	r3, [r4, #9]
   126a2:	442b      	add	r3, r5
   126a4:	7098      	strb	r0, [r3, #2]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   126a6:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
   126a8:	442b      	add	r3, r5
   126aa:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   126ac:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   126ae:	441d      	add	r5, r3
   126b0:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
   126b2:	f7ff ff05 	bl	124c0 <packet_rx_enqueue>
	return 0;
   126b6:	2000      	movs	r0, #0
}
   126b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   126bc:	2302      	movs	r3, #2
   126be:	e7e5      	b.n	1268c <isr_rx_scan_report+0x6c>
			     pdu_adv_rx->len] =
   126c0:	207f      	movs	r0, #127	; 0x7f
   126c2:	e7ed      	b.n	126a0 <isr_rx_scan_report+0x80>
		return 1;
   126c4:	2001      	movs	r0, #1
   126c6:	e7f7      	b.n	126b8 <isr_rx_scan_report+0x98>
   126c8:	2000110c 	.word	0x2000110c
   126cc:	2000d72c 	.word	0x2000d72c
   126d0:	0002cff8 	.word	0x0002cff8
   126d4:	0002d030 	.word	0x0002d030
   126d8:	0002f0b9 	.word	0x0002f0b9
   126dc:	000304fc 	.word	0x000304fc

000126e0 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   126e0:	4a0b      	ldr	r2, [pc, #44]	; (12710 <rx_fc_lock+0x30>)
   126e2:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
   126e6:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
   126ea:	4299      	cmp	r1, r3
   126ec:	d10e      	bne.n	1270c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   126ee:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
   126f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   126f6:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
   126fa:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
   126fe:	3301      	adds	r3, #1
   12700:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
   12702:	2b03      	cmp	r3, #3
   12704:	bf08      	it	eq
   12706:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
   12708:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
	}
}
   1270c:	4770      	bx	lr
   1270e:	bf00      	nop
   12710:	2000110c 	.word	0x2000110c

00012714 <ticker_success_assert>:
{
   12714:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12716:	b1d0      	cbz	r0, 1274e <ticker_success_assert+0x3a>
   12718:	4b0d      	ldr	r3, [pc, #52]	; (12750 <ticker_success_assert+0x3c>)
   1271a:	681b      	ldr	r3, [r3, #0]
   1271c:	075b      	lsls	r3, r3, #29
   1271e:	d010      	beq.n	12742 <ticker_success_assert+0x2e>
   12720:	2301      	movs	r3, #1
   12722:	f04f 0200 	mov.w	r2, #0
   12726:	f363 0202 	bfi	r2, r3, #0, #3
   1272a:	490a      	ldr	r1, [pc, #40]	; (12754 <ticker_success_assert+0x40>)
   1272c:	4b0a      	ldr	r3, [pc, #40]	; (12758 <ticker_success_assert+0x44>)
   1272e:	480b      	ldr	r0, [pc, #44]	; (1275c <ticker_success_assert+0x48>)
   12730:	1a5b      	subs	r3, r3, r1
   12732:	f36f 02c5 	bfc	r2, #3, #3
   12736:	08db      	lsrs	r3, r3, #3
   12738:	f363 128f 	bfi	r2, r3, #6, #10
   1273c:	4908      	ldr	r1, [pc, #32]	; (12760 <ticker_success_assert+0x4c>)
   1273e:	f7ef fb0b 	bl	1d58 <log_1>
   12742:	4040      	eors	r0, r0
   12744:	f380 8811 	msr	BASEPRI, r0
   12748:	f04f 0004 	mov.w	r0, #4
   1274c:	df02      	svc	2
}
   1274e:	bd08      	pop	{r3, pc}
   12750:	2000d72c 	.word	0x2000d72c
   12754:	0002cff8 	.word	0x0002cff8
   12758:	0002d030 	.word	0x0002d030
   1275c:	0003141d 	.word	0x0003141d
   12760:	000305e5 	.word	0x000305e5

00012764 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   12764:	2801      	cmp	r0, #1
{
   12766:	b508      	push	{r3, lr}
   12768:	4b1c      	ldr	r3, [pc, #112]	; (127dc <ticker_stop_adv_assert+0x78>)
	if (status == TICKER_STATUS_FAILURE) {
   1276a:	d11f      	bne.n	127ac <ticker_stop_adv_assert+0x48>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   1276c:	7cda      	ldrb	r2, [r3, #19]
   1276e:	2a05      	cmp	r2, #5
   12770:	d102      	bne.n	12778 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
   12772:	2200      	movs	r2, #0
   12774:	74da      	strb	r2, [r3, #19]
}
   12776:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   12778:	4b19      	ldr	r3, [pc, #100]	; (127e0 <ticker_stop_adv_assert+0x7c>)
   1277a:	681b      	ldr	r3, [r3, #0]
   1277c:	075a      	lsls	r2, r3, #29
   1277e:	d00f      	beq.n	127a0 <ticker_stop_adv_assert+0x3c>
   12780:	4918      	ldr	r1, [pc, #96]	; (127e4 <ticker_stop_adv_assert+0x80>)
   12782:	4b19      	ldr	r3, [pc, #100]	; (127e8 <ticker_stop_adv_assert+0x84>)
   12784:	f04f 0200 	mov.w	r2, #0
   12788:	f360 0202 	bfi	r2, r0, #0, #3
   1278c:	1a5b      	subs	r3, r3, r1
   1278e:	f36f 02c5 	bfc	r2, #3, #3
   12792:	08db      	lsrs	r3, r3, #3
   12794:	4915      	ldr	r1, [pc, #84]	; (127ec <ticker_stop_adv_assert+0x88>)
   12796:	4816      	ldr	r0, [pc, #88]	; (127f0 <ticker_stop_adv_assert+0x8c>)
   12798:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   1279c:	f7ef fadc 	bl	1d58 <log_1>
   127a0:	4040      	eors	r0, r0
   127a2:	f380 8811 	msr	BASEPRI, r0
   127a6:	f04f 0004 	mov.w	r0, #4
   127aa:	df02      	svc	2
   127ac:	7c5b      	ldrb	r3, [r3, #17]
   127ae:	2b05      	cmp	r3, #5
   127b0:	d1e1      	bne.n	12776 <ticker_stop_adv_assert+0x12>
   127b2:	4b0b      	ldr	r3, [pc, #44]	; (127e0 <ticker_stop_adv_assert+0x7c>)
   127b4:	681b      	ldr	r3, [r3, #0]
   127b6:	075b      	lsls	r3, r3, #29
   127b8:	d0f2      	beq.n	127a0 <ticker_stop_adv_assert+0x3c>
   127ba:	2301      	movs	r3, #1
   127bc:	f04f 0200 	mov.w	r2, #0
   127c0:	f363 0202 	bfi	r2, r3, #0, #3
   127c4:	4907      	ldr	r1, [pc, #28]	; (127e4 <ticker_stop_adv_assert+0x80>)
   127c6:	4b08      	ldr	r3, [pc, #32]	; (127e8 <ticker_stop_adv_assert+0x84>)
   127c8:	480a      	ldr	r0, [pc, #40]	; (127f4 <ticker_stop_adv_assert+0x90>)
   127ca:	1a5b      	subs	r3, r3, r1
   127cc:	f36f 02c5 	bfc	r2, #3, #3
   127d0:	08db      	lsrs	r3, r3, #3
   127d2:	f363 128f 	bfi	r2, r3, #6, #10
   127d6:	4905      	ldr	r1, [pc, #20]	; (127ec <ticker_stop_adv_assert+0x88>)
   127d8:	e7e0      	b.n	1279c <ticker_stop_adv_assert+0x38>
   127da:	bf00      	nop
   127dc:	2000110c 	.word	0x2000110c
   127e0:	2000d72c 	.word	0x2000d72c
   127e4:	0002cff8 	.word	0x0002cff8
   127e8:	0002d030 	.word	0x0002d030
   127ec:	000305fb 	.word	0x000305fb
   127f0:	0002f0b9 	.word	0x0002f0b9
   127f4:	00031387 	.word	0x00031387

000127f8 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   127f8:	2801      	cmp	r0, #1
{
   127fa:	b508      	push	{r3, lr}
   127fc:	4b1c      	ldr	r3, [pc, #112]	; (12870 <ticker_stop_scan_assert+0x78>)
	if (status == TICKER_STATUS_FAILURE) {
   127fe:	d11f      	bne.n	12840 <ticker_stop_scan_assert+0x48>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   12800:	7cda      	ldrb	r2, [r3, #19]
   12802:	2a06      	cmp	r2, #6
   12804:	d102      	bne.n	1280c <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
   12806:	2200      	movs	r2, #0
   12808:	74da      	strb	r2, [r3, #19]
}
   1280a:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1280c:	4b19      	ldr	r3, [pc, #100]	; (12874 <ticker_stop_scan_assert+0x7c>)
   1280e:	681b      	ldr	r3, [r3, #0]
   12810:	075a      	lsls	r2, r3, #29
   12812:	d00f      	beq.n	12834 <ticker_stop_scan_assert+0x3c>
   12814:	4918      	ldr	r1, [pc, #96]	; (12878 <ticker_stop_scan_assert+0x80>)
   12816:	4b19      	ldr	r3, [pc, #100]	; (1287c <ticker_stop_scan_assert+0x84>)
   12818:	f04f 0200 	mov.w	r2, #0
   1281c:	f360 0202 	bfi	r2, r0, #0, #3
   12820:	1a5b      	subs	r3, r3, r1
   12822:	f36f 02c5 	bfc	r2, #3, #3
   12826:	08db      	lsrs	r3, r3, #3
   12828:	4915      	ldr	r1, [pc, #84]	; (12880 <ticker_stop_scan_assert+0x88>)
   1282a:	4816      	ldr	r0, [pc, #88]	; (12884 <ticker_stop_scan_assert+0x8c>)
   1282c:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   12830:	f7ef fa92 	bl	1d58 <log_1>
   12834:	4040      	eors	r0, r0
   12836:	f380 8811 	msr	BASEPRI, r0
   1283a:	f04f 0004 	mov.w	r0, #4
   1283e:	df02      	svc	2
   12840:	7c5b      	ldrb	r3, [r3, #17]
   12842:	2b06      	cmp	r3, #6
   12844:	d1e1      	bne.n	1280a <ticker_stop_scan_assert+0x12>
   12846:	4b0b      	ldr	r3, [pc, #44]	; (12874 <ticker_stop_scan_assert+0x7c>)
   12848:	681b      	ldr	r3, [r3, #0]
   1284a:	075b      	lsls	r3, r3, #29
   1284c:	d0f2      	beq.n	12834 <ticker_stop_scan_assert+0x3c>
   1284e:	2301      	movs	r3, #1
   12850:	f04f 0200 	mov.w	r2, #0
   12854:	f363 0202 	bfi	r2, r3, #0, #3
   12858:	4907      	ldr	r1, [pc, #28]	; (12878 <ticker_stop_scan_assert+0x80>)
   1285a:	4b08      	ldr	r3, [pc, #32]	; (1287c <ticker_stop_scan_assert+0x84>)
   1285c:	480a      	ldr	r0, [pc, #40]	; (12888 <ticker_stop_scan_assert+0x90>)
   1285e:	1a5b      	subs	r3, r3, r1
   12860:	f36f 02c5 	bfc	r2, #3, #3
   12864:	08db      	lsrs	r3, r3, #3
   12866:	f363 128f 	bfi	r2, r3, #6, #10
   1286a:	4905      	ldr	r1, [pc, #20]	; (12880 <ticker_stop_scan_assert+0x88>)
   1286c:	e7e0      	b.n	12830 <ticker_stop_scan_assert+0x38>
   1286e:	bf00      	nop
   12870:	2000110c 	.word	0x2000110c
   12874:	2000d72c 	.word	0x2000d72c
   12878:	0002cff8 	.word	0x0002cff8
   1287c:	0002d030 	.word	0x0002d030
   12880:	00030612 	.word	0x00030612
   12884:	0002f0b9 	.word	0x0002f0b9
   12888:	000313ea 	.word	0x000313ea

0001288c <ticker_update_adv_assert>:
{
   1288c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1288e:	b1f0      	cbz	r0, 128ce <ticker_update_adv_assert+0x42>
   12890:	4b0f      	ldr	r3, [pc, #60]	; (128d0 <ticker_update_adv_assert+0x44>)
   12892:	7cdb      	ldrb	r3, [r3, #19]
   12894:	2b05      	cmp	r3, #5
   12896:	d01a      	beq.n	128ce <ticker_update_adv_assert+0x42>
   12898:	4b0e      	ldr	r3, [pc, #56]	; (128d4 <ticker_update_adv_assert+0x48>)
   1289a:	681b      	ldr	r3, [r3, #0]
   1289c:	075b      	lsls	r3, r3, #29
   1289e:	d010      	beq.n	128c2 <ticker_update_adv_assert+0x36>
   128a0:	2301      	movs	r3, #1
   128a2:	f04f 0200 	mov.w	r2, #0
   128a6:	f363 0202 	bfi	r2, r3, #0, #3
   128aa:	490b      	ldr	r1, [pc, #44]	; (128d8 <ticker_update_adv_assert+0x4c>)
   128ac:	4b0b      	ldr	r3, [pc, #44]	; (128dc <ticker_update_adv_assert+0x50>)
   128ae:	480c      	ldr	r0, [pc, #48]	; (128e0 <ticker_update_adv_assert+0x54>)
   128b0:	1a5b      	subs	r3, r3, r1
   128b2:	f36f 02c5 	bfc	r2, #3, #3
   128b6:	08db      	lsrs	r3, r3, #3
   128b8:	f363 128f 	bfi	r2, r3, #6, #10
   128bc:	4909      	ldr	r1, [pc, #36]	; (128e4 <ticker_update_adv_assert+0x58>)
   128be:	f7ef fa4b 	bl	1d58 <log_1>
   128c2:	4040      	eors	r0, r0
   128c4:	f380 8811 	msr	BASEPRI, r0
   128c8:	f04f 0004 	mov.w	r0, #4
   128cc:	df02      	svc	2
}
   128ce:	bd08      	pop	{r3, pc}
   128d0:	2000110c 	.word	0x2000110c
   128d4:	2000d72c 	.word	0x2000d72c
   128d8:	0002cff8 	.word	0x0002cff8
   128dc:	0002d030 	.word	0x0002d030
   128e0:	0003143e 	.word	0x0003143e
   128e4:	0003062a 	.word	0x0003062a

000128e8 <ticker_update_slave_assert>:
{
   128e8:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   128ea:	b1f8      	cbz	r0, 1292c <ticker_update_slave_assert+0x44>
   128ec:	4b10      	ldr	r3, [pc, #64]	; (12930 <ticker_update_slave_assert+0x48>)
   128ee:	7cdb      	ldrb	r3, [r3, #19]
   128f0:	b2c9      	uxtb	r1, r1
   128f2:	4299      	cmp	r1, r3
   128f4:	d01a      	beq.n	1292c <ticker_update_slave_assert+0x44>
   128f6:	4b0f      	ldr	r3, [pc, #60]	; (12934 <ticker_update_slave_assert+0x4c>)
   128f8:	681b      	ldr	r3, [r3, #0]
   128fa:	075b      	lsls	r3, r3, #29
   128fc:	d010      	beq.n	12920 <ticker_update_slave_assert+0x38>
   128fe:	2301      	movs	r3, #1
   12900:	f04f 0200 	mov.w	r2, #0
   12904:	f363 0202 	bfi	r2, r3, #0, #3
   12908:	490b      	ldr	r1, [pc, #44]	; (12938 <ticker_update_slave_assert+0x50>)
   1290a:	4b0c      	ldr	r3, [pc, #48]	; (1293c <ticker_update_slave_assert+0x54>)
   1290c:	480c      	ldr	r0, [pc, #48]	; (12940 <ticker_update_slave_assert+0x58>)
   1290e:	1a5b      	subs	r3, r3, r1
   12910:	f36f 02c5 	bfc	r2, #3, #3
   12914:	08db      	lsrs	r3, r3, #3
   12916:	f363 128f 	bfi	r2, r3, #6, #10
   1291a:	490a      	ldr	r1, [pc, #40]	; (12944 <ticker_update_slave_assert+0x5c>)
   1291c:	f7ef fa1c 	bl	1d58 <log_1>
   12920:	4040      	eors	r0, r0
   12922:	f380 8811 	msr	BASEPRI, r0
   12926:	f04f 0004 	mov.w	r0, #4
   1292a:	df02      	svc	2
}
   1292c:	bd08      	pop	{r3, pc}
   1292e:	bf00      	nop
   12930:	2000110c 	.word	0x2000110c
   12934:	2000d72c 	.word	0x2000d72c
   12938:	0002cff8 	.word	0x0002cff8
   1293c:	0002d030 	.word	0x0002d030
   12940:	00031481 	.word	0x00031481
   12944:	00030643 	.word	0x00030643

00012948 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
   12948:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1294a:	b1d0      	cbz	r0, 12982 <ticker_op_latency_cancelled+0x3a>
   1294c:	4b10      	ldr	r3, [pc, #64]	; (12990 <ticker_op_latency_cancelled+0x48>)
   1294e:	681b      	ldr	r3, [r3, #0]
   12950:	075b      	lsls	r3, r3, #29
   12952:	d010      	beq.n	12976 <ticker_op_latency_cancelled+0x2e>
   12954:	2301      	movs	r3, #1
   12956:	f04f 0200 	mov.w	r2, #0
   1295a:	f363 0202 	bfi	r2, r3, #0, #3
   1295e:	490d      	ldr	r1, [pc, #52]	; (12994 <ticker_op_latency_cancelled+0x4c>)
   12960:	4b0d      	ldr	r3, [pc, #52]	; (12998 <ticker_op_latency_cancelled+0x50>)
   12962:	480e      	ldr	r0, [pc, #56]	; (1299c <ticker_op_latency_cancelled+0x54>)
   12964:	1a5b      	subs	r3, r3, r1
   12966:	f36f 02c5 	bfc	r2, #3, #3
   1296a:	08db      	lsrs	r3, r3, #3
   1296c:	f363 128f 	bfi	r2, r3, #6, #10
   12970:	490b      	ldr	r1, [pc, #44]	; (129a0 <ticker_op_latency_cancelled+0x58>)
   12972:	f7ef f9f1 	bl	1d58 <log_1>
   12976:	4040      	eors	r0, r0
   12978:	f380 8811 	msr	BASEPRI, r0
   1297c:	f04f 0004 	mov.w	r0, #4
   12980:	df02      	svc	2

	conn->slave.latency_cancel = 0;
   12982:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   12986:	f360 0341 	bfi	r3, r0, #1, #1
   1298a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
   1298e:	bd08      	pop	{r3, pc}
   12990:	2000d72c 	.word	0x2000d72c
   12994:	0002cff8 	.word	0x0002cff8
   12998:	0002d030 	.word	0x0002d030
   1299c:	0003135f 	.word	0x0003135f
   129a0:	00030987 	.word	0x00030987

000129a4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
   129a4:	4b04      	ldr	r3, [pc, #16]	; (129b8 <ticker_job_disable+0x14>)
   129a6:	7d5b      	ldrb	r3, [r3, #21]
   129a8:	b123      	cbz	r3, 129b4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   129aa:	2101      	movs	r1, #1
   129ac:	2200      	movs	r2, #0
   129ae:	4608      	mov	r0, r1
   129b0:	f7fd be38 	b.w	10624 <mayfly_enable>
}
   129b4:	4770      	bx	lr
   129b6:	bf00      	nop
   129b8:	2000110c 	.word	0x2000110c

000129bc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   129bc:	2806      	cmp	r0, #6
{
   129be:	b510      	push	{r4, lr}
   129c0:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   129c2:	d90a      	bls.n	129da <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   129c4:	4b09      	ldr	r3, [pc, #36]	; (129ec <hdr_conn_get+0x30>)
   129c6:	1fc2      	subs	r2, r0, #7
   129c8:	b292      	uxth	r2, r2
   129ca:	f44f 71aa 	mov.w	r1, #340	; 0x154
   129ce:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   129d2:	f7fd fdbb 	bl	1054c <mem_get>
   129d6:	6020      	str	r0, [r4, #0]
}
   129d8:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   129da:	2805      	cmp	r0, #5
   129dc:	d004      	beq.n	129e8 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   129de:	2806      	cmp	r0, #6
	return NULL;
   129e0:	4803      	ldr	r0, [pc, #12]	; (129f0 <hdr_conn_get+0x34>)
   129e2:	bf18      	it	ne
   129e4:	2000      	movne	r0, #0
   129e6:	e7f7      	b.n	129d8 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
   129e8:	4802      	ldr	r0, [pc, #8]	; (129f4 <hdr_conn_get+0x38>)
   129ea:	e7f5      	b.n	129d8 <hdr_conn_get+0x1c>
   129ec:	2000110c 	.word	0x2000110c
   129f0:	200011dc 	.word	0x200011dc
   129f4:	20001124 	.word	0x20001124

000129f8 <event_stop.part.11>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   129f8:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
   129fa:	4b0d      	ldr	r3, [pc, #52]	; (12a30 <event_stop.part.11+0x38>)
   129fc:	681b      	ldr	r3, [r3, #0]
   129fe:	075b      	lsls	r3, r3, #29
   12a00:	d010      	beq.n	12a24 <event_stop.part.11+0x2c>
   12a02:	2301      	movs	r3, #1
   12a04:	f04f 0200 	mov.w	r2, #0
   12a08:	f363 0202 	bfi	r2, r3, #0, #3
   12a0c:	4909      	ldr	r1, [pc, #36]	; (12a34 <event_stop.part.11+0x3c>)
   12a0e:	4b0a      	ldr	r3, [pc, #40]	; (12a38 <event_stop.part.11+0x40>)
   12a10:	480a      	ldr	r0, [pc, #40]	; (12a3c <event_stop.part.11+0x44>)
   12a12:	1a5b      	subs	r3, r3, r1
   12a14:	f36f 02c5 	bfc	r2, #3, #3
   12a18:	08db      	lsrs	r3, r3, #3
   12a1a:	f363 128f 	bfi	r2, r3, #6, #10
   12a1e:	4908      	ldr	r1, [pc, #32]	; (12a40 <event_stop.part.11+0x48>)
   12a20:	f7ef f99a 	bl	1d58 <log_1>
   12a24:	4040      	eors	r0, r0
   12a26:	f380 8811 	msr	BASEPRI, r0
   12a2a:	f04f 0004 	mov.w	r0, #4
   12a2e:	df02      	svc	2
   12a30:	2000d72c 	.word	0x2000d72c
   12a34:	0002cff8 	.word	0x0002cff8
   12a38:	0002d030 	.word	0x0002d030
   12a3c:	0003103a 	.word	0x0003103a
   12a40:	0003074e 	.word	0x0003074e

00012a44 <event_stop>:
	s_mfy_radio_stop.param = context;
   12a44:	4a06      	ldr	r2, [pc, #24]	; (12a60 <event_stop+0x1c>)
{
   12a46:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   12a48:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12a4a:	4613      	mov	r3, r2
   12a4c:	2200      	movs	r2, #0
   12a4e:	4611      	mov	r1, r2
   12a50:	4610      	mov	r0, r2
   12a52:	f7fd fe0f 	bl	10674 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12a56:	b108      	cbz	r0, 12a5c <event_stop+0x18>
   12a58:	f7ff ffce 	bl	129f8 <event_stop.part.11>
}
   12a5c:	bd08      	pop	{r3, pc}
   12a5e:	bf00      	nop
   12a60:	2000cfdc 	.word	0x2000cfdc

00012a64 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12a64:	2200      	movs	r2, #0
{
   12a66:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12a68:	4611      	mov	r1, r2
   12a6a:	4b10      	ldr	r3, [pc, #64]	; (12aac <event_active+0x48>)
   12a6c:	4610      	mov	r0, r2
   12a6e:	f7fd fe01 	bl	10674 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12a72:	b1d0      	cbz	r0, 12aaa <event_active+0x46>
   12a74:	4b0e      	ldr	r3, [pc, #56]	; (12ab0 <event_active+0x4c>)
   12a76:	681b      	ldr	r3, [r3, #0]
   12a78:	075b      	lsls	r3, r3, #29
   12a7a:	d010      	beq.n	12a9e <event_active+0x3a>
   12a7c:	2301      	movs	r3, #1
   12a7e:	f04f 0200 	mov.w	r2, #0
   12a82:	f363 0202 	bfi	r2, r3, #0, #3
   12a86:	490b      	ldr	r1, [pc, #44]	; (12ab4 <event_active+0x50>)
   12a88:	4b0b      	ldr	r3, [pc, #44]	; (12ab8 <event_active+0x54>)
   12a8a:	480c      	ldr	r0, [pc, #48]	; (12abc <event_active+0x58>)
   12a8c:	1a5b      	subs	r3, r3, r1
   12a8e:	f36f 02c5 	bfc	r2, #3, #3
   12a92:	08db      	lsrs	r3, r3, #3
   12a94:	f363 128f 	bfi	r2, r3, #6, #10
   12a98:	4909      	ldr	r1, [pc, #36]	; (12ac0 <event_active+0x5c>)
   12a9a:	f7ef f95d 	bl	1d58 <log_1>
   12a9e:	4040      	eors	r0, r0
   12aa0:	f380 8811 	msr	BASEPRI, r0
   12aa4:	f04f 0004 	mov.w	r0, #4
   12aa8:	df02      	svc	2
}
   12aaa:	bd08      	pop	{r3, pc}
   12aac:	2000cf9c 	.word	0x2000cf9c
   12ab0:	2000d72c 	.word	0x2000d72c
   12ab4:	0002cff8 	.word	0x0002cff8
   12ab8:	0002d030 	.word	0x0002d030
   12abc:	0003103a 	.word	0x0003103a
   12ac0:	00030672 	.word	0x00030672

00012ac4 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12ac4:	2200      	movs	r2, #0
{
   12ac6:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12ac8:	4611      	mov	r1, r2
   12aca:	4b10      	ldr	r3, [pc, #64]	; (12b0c <event_xtal+0x48>)
   12acc:	4610      	mov	r0, r2
   12ace:	f7fd fdd1 	bl	10674 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12ad2:	b1d0      	cbz	r0, 12b0a <event_xtal+0x46>
   12ad4:	4b0e      	ldr	r3, [pc, #56]	; (12b10 <event_xtal+0x4c>)
   12ad6:	681b      	ldr	r3, [r3, #0]
   12ad8:	075b      	lsls	r3, r3, #29
   12ada:	d010      	beq.n	12afe <event_xtal+0x3a>
   12adc:	2301      	movs	r3, #1
   12ade:	f04f 0200 	mov.w	r2, #0
   12ae2:	f363 0202 	bfi	r2, r3, #0, #3
   12ae6:	490b      	ldr	r1, [pc, #44]	; (12b14 <event_xtal+0x50>)
   12ae8:	4b0b      	ldr	r3, [pc, #44]	; (12b18 <event_xtal+0x54>)
   12aea:	480c      	ldr	r0, [pc, #48]	; (12b1c <event_xtal+0x58>)
   12aec:	1a5b      	subs	r3, r3, r1
   12aee:	f36f 02c5 	bfc	r2, #3, #3
   12af2:	08db      	lsrs	r3, r3, #3
   12af4:	f363 128f 	bfi	r2, r3, #6, #10
   12af8:	4909      	ldr	r1, [pc, #36]	; (12b20 <event_xtal+0x5c>)
   12afa:	f7ef f92d 	bl	1d58 <log_1>
   12afe:	4040      	eors	r0, r0
   12b00:	f380 8811 	msr	BASEPRI, r0
   12b04:	f04f 0004 	mov.w	r0, #4
   12b08:	df02      	svc	2
}
   12b0a:	bd08      	pop	{r3, pc}
   12b0c:	2000d03c 	.word	0x2000d03c
   12b10:	2000d72c 	.word	0x2000d72c
   12b14:	0002cff8 	.word	0x0002cff8
   12b18:	0002d030 	.word	0x0002d030
   12b1c:	0003103a 	.word	0x0003103a
   12b20:	0003068e 	.word	0x0003068e

00012b24 <mayfly_radio_active>:
{
   12b24:	b508      	push	{r3, lr}
   12b26:	4a16      	ldr	r2, [pc, #88]	; (12b80 <mayfly_radio_active+0x5c>)
   12b28:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
   12b2a:	b138      	cbz	r0, 12b3c <mayfly_radio_active+0x18>
		if (s_active++) {
   12b2c:	1c59      	adds	r1, r3, #1
   12b2e:	7011      	strb	r1, [r2, #0]
   12b30:	bb2b      	cbnz	r3, 12b7e <mayfly_radio_active+0x5a>
		radio_active_callback(1);
   12b32:	2001      	movs	r0, #1
}
   12b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
   12b38:	f007 bab8 	b.w	1a0ac <radio_active_callback>
		LL_ASSERT(s_active);
   12b3c:	b9d3      	cbnz	r3, 12b74 <mayfly_radio_active+0x50>
   12b3e:	4a11      	ldr	r2, [pc, #68]	; (12b84 <mayfly_radio_active+0x60>)
   12b40:	6812      	ldr	r2, [r2, #0]
   12b42:	0752      	lsls	r2, r2, #29
   12b44:	d010      	beq.n	12b68 <mayfly_radio_active+0x44>
   12b46:	2101      	movs	r1, #1
   12b48:	f04f 0200 	mov.w	r2, #0
   12b4c:	f361 0202 	bfi	r2, r1, #0, #3
   12b50:	f363 02c5 	bfi	r2, r3, #3, #3
   12b54:	490c      	ldr	r1, [pc, #48]	; (12b88 <mayfly_radio_active+0x64>)
   12b56:	4b0d      	ldr	r3, [pc, #52]	; (12b8c <mayfly_radio_active+0x68>)
   12b58:	480d      	ldr	r0, [pc, #52]	; (12b90 <mayfly_radio_active+0x6c>)
   12b5a:	1a5b      	subs	r3, r3, r1
   12b5c:	08db      	lsrs	r3, r3, #3
   12b5e:	f363 128f 	bfi	r2, r3, #6, #10
   12b62:	490c      	ldr	r1, [pc, #48]	; (12b94 <mayfly_radio_active+0x70>)
   12b64:	f7ef f8f8 	bl	1d58 <log_1>
   12b68:	4040      	eors	r0, r0
   12b6a:	f380 8811 	msr	BASEPRI, r0
   12b6e:	f04f 0004 	mov.w	r0, #4
   12b72:	df02      	svc	2
		if (--s_active) {
   12b74:	3b01      	subs	r3, #1
   12b76:	b2db      	uxtb	r3, r3
   12b78:	7013      	strb	r3, [r2, #0]
   12b7a:	2b00      	cmp	r3, #0
   12b7c:	d0da      	beq.n	12b34 <mayfly_radio_active+0x10>
}
   12b7e:	bd08      	pop	{r3, pc}
   12b80:	200012c8 	.word	0x200012c8
   12b84:	2000d72c 	.word	0x2000d72c
   12b88:	0002cff8 	.word	0x0002cff8
   12b8c:	0002d030 	.word	0x0002d030
   12b90:	00030fb3 	.word	0x00030fb3
   12b94:	0003065e 	.word	0x0003065e

00012b98 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
   12b98:	2000      	movs	r0, #0
   12b9a:	f7ff bfc3 	b.w	12b24 <mayfly_radio_active>
	...

00012ba0 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
   12ba0:	b2c0      	uxtb	r0, r0
{
   12ba2:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12ba4:	1f03      	subs	r3, r0, #4
   12ba6:	2b01      	cmp	r3, #1
   12ba8:	d91a      	bls.n	12be0 <mayfly_radio_stop+0x40>
   12baa:	4b15      	ldr	r3, [pc, #84]	; (12c00 <mayfly_radio_stop+0x60>)
   12bac:	681b      	ldr	r3, [r3, #0]
   12bae:	075b      	lsls	r3, r3, #29
   12bb0:	d010      	beq.n	12bd4 <mayfly_radio_stop+0x34>
   12bb2:	2301      	movs	r3, #1
   12bb4:	f04f 0200 	mov.w	r2, #0
   12bb8:	f363 0202 	bfi	r2, r3, #0, #3
   12bbc:	4911      	ldr	r1, [pc, #68]	; (12c04 <mayfly_radio_stop+0x64>)
   12bbe:	4b12      	ldr	r3, [pc, #72]	; (12c08 <mayfly_radio_stop+0x68>)
   12bc0:	4812      	ldr	r0, [pc, #72]	; (12c0c <mayfly_radio_stop+0x6c>)
   12bc2:	1a5b      	subs	r3, r3, r1
   12bc4:	f36f 02c5 	bfc	r2, #3, #3
   12bc8:	08db      	lsrs	r3, r3, #3
   12bca:	f363 128f 	bfi	r2, r3, #6, #10
   12bce:	4910      	ldr	r1, [pc, #64]	; (12c10 <mayfly_radio_stop+0x70>)
   12bd0:	f7ef f8c2 	bl	1d58 <log_1>
   12bd4:	4040      	eors	r0, r0
   12bd6:	f380 8811 	msr	BASEPRI, r0
   12bda:	f04f 0004 	mov.w	r0, #4
   12bde:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
   12be0:	4a0c      	ldr	r2, [pc, #48]	; (12c14 <mayfly_radio_stop+0x74>)
   12be2:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
   12be4:	b113      	cbz	r3, 12bec <mayfly_radio_stop+0x4c>
	radio_used = ((_radio.state != STATE_NONE) &&
   12be6:	3b04      	subs	r3, #4
   12be8:	2b01      	cmp	r3, #1
   12bea:	d806      	bhi.n	12bfa <mayfly_radio_stop+0x5a>
	if (radio_used || !radio_is_idle()) {
   12bec:	f00a ff7c 	bl	1dae8 <radio_is_idle>
   12bf0:	b928      	cbnz	r0, 12bfe <mayfly_radio_stop+0x5e>
}
   12bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
   12bf6:	f00a bf45 	b.w	1da84 <radio_disable>
			_radio.state = state;
   12bfa:	7550      	strb	r0, [r2, #21]
   12bfc:	e7f9      	b.n	12bf2 <mayfly_radio_stop+0x52>
}
   12bfe:	bd08      	pop	{r3, pc}
   12c00:	2000d72c 	.word	0x2000d72c
   12c04:	0002cff8 	.word	0x0002cff8
   12c08:	0002d030 	.word	0x0002d030
   12c0c:	00030fd1 	.word	0x00030fd1
   12c10:	0003073c 	.word	0x0003073c
   12c14:	2000110c 	.word	0x2000110c

00012c18 <pdu_node_tx_release>:
{
   12c18:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   12c1a:	4a1d      	ldr	r2, [pc, #116]	; (12c90 <pdu_node_tx_release+0x78>)
   12c1c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
   12c20:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
   12c24:	3301      	adds	r3, #1
   12c26:	b2db      	uxtb	r3, r3
		last = 0;
   12c28:	429c      	cmp	r4, r3
   12c2a:	bf08      	it	eq
   12c2c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
   12c2e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
   12c32:	429c      	cmp	r4, r3
   12c34:	d11a      	bne.n	12c6c <pdu_node_tx_release+0x54>
   12c36:	4b17      	ldr	r3, [pc, #92]	; (12c94 <pdu_node_tx_release+0x7c>)
   12c38:	681b      	ldr	r3, [r3, #0]
   12c3a:	075b      	lsls	r3, r3, #29
   12c3c:	d010      	beq.n	12c60 <pdu_node_tx_release+0x48>
   12c3e:	2301      	movs	r3, #1
   12c40:	f04f 0200 	mov.w	r2, #0
   12c44:	f363 0202 	bfi	r2, r3, #0, #3
   12c48:	4913      	ldr	r1, [pc, #76]	; (12c98 <pdu_node_tx_release+0x80>)
   12c4a:	4b14      	ldr	r3, [pc, #80]	; (12c9c <pdu_node_tx_release+0x84>)
   12c4c:	4814      	ldr	r0, [pc, #80]	; (12ca0 <pdu_node_tx_release+0x88>)
   12c4e:	1a5b      	subs	r3, r3, r1
   12c50:	f36f 02c5 	bfc	r2, #3, #3
   12c54:	08db      	lsrs	r3, r3, #3
   12c56:	f363 128f 	bfi	r2, r3, #6, #10
   12c5a:	4912      	ldr	r1, [pc, #72]	; (12ca4 <pdu_node_tx_release+0x8c>)
   12c5c:	f7ef f87c 	bl	1d58 <log_1>
   12c60:	4040      	eors	r0, r0
   12c62:	f380 8811 	msr	BASEPRI, r0
   12c66:	f04f 0004 	mov.w	r0, #4
   12c6a:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   12c6c:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
   12c70:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
   12c74:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   12c78:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
   12c7c:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   12c80:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
   12c82:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
   12c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
   12c8a:	f007 ba11 	b.w	1a0b0 <radio_event_callback>
   12c8e:	bf00      	nop
   12c90:	2000110c 	.word	0x2000110c
   12c94:	2000d72c 	.word	0x2000d72c
   12c98:	0002cff8 	.word	0x0002cff8
   12c9c:	0002d030 	.word	0x0002d030
   12ca0:	000310da 	.word	0x000310da
   12ca4:	000308f6 	.word	0x000308f6

00012ca8 <packet_tx_enqueue>:
{
   12ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12cac:	4d25      	ldr	r5, [pc, #148]	; (12d44 <packet_tx_enqueue+0x9c>)
{
   12cae:	4606      	mov	r6, r0
   12cb0:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
   12cb2:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12cb4:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   12cb8:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   12cbc:	429a      	cmp	r2, r3
   12cbe:	d036      	beq.n	12d2e <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   12cc0:	f895 9175 	ldrb.w	r9, [r5, #373]	; 0x175
   12cc4:	f8d5 a16c 	ldr.w	sl, [r5, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12cc8:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   12ccc:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   12cd0:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12cd4:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
   12cd8:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
   12cda:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12cdc:	f7fd fc36 	bl	1054c <mem_get>
   12ce0:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
   12ce2:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
   12ce6:	8c1a      	ldrh	r2, [r3, #32]
   12ce8:	4282      	cmp	r2, r0
   12cea:	d122      	bne.n	12d32 <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
   12cec:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   12cf0:	b942      	cbnz	r2, 12d04 <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
   12cf2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
   12cf6:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   12cfa:	b91a      	cbnz	r2, 12d04 <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
   12cfc:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   12d00:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
   12d04:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
   12d08:	b102      	cbz	r2, 12d0c <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
   12d0a:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
   12d0c:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   12d10:	f898 3175 	ldrb.w	r3, [r8, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
   12d14:	f898 2174 	ldrb.w	r2, [r8, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
   12d18:	3301      	adds	r3, #1
   12d1a:	b2db      	uxtb	r3, r3
   12d1c:	3e01      	subs	r6, #1
			first = 0;
   12d1e:	429a      	cmp	r2, r3
   12d20:	bf08      	it	eq
   12d22:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12d24:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
   12d28:	f888 3175 	strb.w	r3, [r8, #373]	; 0x175
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12d2c:	d1c2      	bne.n	12cb4 <packet_tx_enqueue+0xc>
}
   12d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12d32:	7923      	ldrb	r3, [r4, #4]
   12d34:	f367 0301 	bfi	r3, r7, #0, #2
   12d38:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   12d3a:	4621      	mov	r1, r4
   12d3c:	f7ff ff6c 	bl	12c18 <pdu_node_tx_release>
   12d40:	e7e6      	b.n	12d10 <packet_tx_enqueue+0x68>
   12d42:	bf00      	nop
   12d44:	2000110c 	.word	0x2000110c

00012d48 <connection_release>:
{
   12d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   12d4a:	2201      	movs	r2, #1
{
   12d4c:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   12d4e:	4611      	mov	r1, r2
   12d50:	2000      	movs	r0, #0
   12d52:	f7fd fc67 	bl	10624 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12d56:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
   12d5a:	f242 3363 	movw	r3, #9059	; 0x2363
   12d5e:	2100      	movs	r1, #0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12d60:	3207      	adds	r2, #7
	ticker_status =
   12d62:	9300      	str	r3, [sp, #0]
   12d64:	b2d2      	uxtb	r2, r2
   12d66:	4b51      	ldr	r3, [pc, #324]	; (12eac <connection_release+0x164>)
   12d68:	4608      	mov	r0, r1
   12d6a:	f7fe fad5 	bl	11318 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12d6e:	f030 0602 	bics.w	r6, r0, #2
   12d72:	d01a      	beq.n	12daa <connection_release+0x62>
   12d74:	4b4e      	ldr	r3, [pc, #312]	; (12eb0 <connection_release+0x168>)
   12d76:	681b      	ldr	r3, [r3, #0]
   12d78:	0759      	lsls	r1, r3, #29
   12d7a:	d010      	beq.n	12d9e <connection_release+0x56>
   12d7c:	f04f 0200 	mov.w	r2, #0
   12d80:	2301      	movs	r3, #1
   12d82:	f363 0202 	bfi	r2, r3, #0, #3
   12d86:	f36f 02c5 	bfc	r2, #3, #3
   12d8a:	494a      	ldr	r1, [pc, #296]	; (12eb4 <connection_release+0x16c>)
   12d8c:	4b4a      	ldr	r3, [pc, #296]	; (12eb8 <connection_release+0x170>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12d8e:	484b      	ldr	r0, [pc, #300]	; (12ebc <connection_release+0x174>)
   12d90:	1a5b      	subs	r3, r3, r1
   12d92:	08db      	lsrs	r3, r3, #3
   12d94:	f363 128f 	bfi	r2, r3, #6, #10
   12d98:	4949      	ldr	r1, [pc, #292]	; (12ec0 <connection_release+0x178>)
   12d9a:	f7ee ffdd 	bl	1d58 <log_1>
   12d9e:	4040      	eors	r0, r0
   12da0:	f380 8811 	msr	BASEPRI, r0
   12da4:	f04f 0004 	mov.w	r0, #4
   12da8:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
   12daa:	4b46      	ldr	r3, [pc, #280]	; (12ec4 <connection_release+0x17c>)
   12dac:	7d5a      	ldrb	r2, [r3, #21]
   12dae:	2a05      	cmp	r2, #5
   12db0:	461f      	mov	r7, r3
   12db2:	d13f      	bne.n	12e34 <connection_release+0xec>
					  conn->handle))) {
   12db4:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12db6:	7c59      	ldrb	r1, [r3, #17]
   12db8:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
   12dba:	4291      	cmp	r1, r2
   12dbc:	d13a      	bne.n	12e34 <connection_release+0xec>
		_radio.ticker_id_prepare = 0;
   12dbe:	745e      	strb	r6, [r3, #17]
		ticker_status =
   12dc0:	f242 3374 	movw	r3, #9076	; 0x2374
   12dc4:	9300      	str	r3, [sp, #0]
   12dc6:	2201      	movs	r2, #1
   12dc8:	4b38      	ldr	r3, [pc, #224]	; (12eac <connection_release+0x164>)
   12dca:	4631      	mov	r1, r6
   12dcc:	4630      	mov	r0, r6
   12dce:	f7fe faa3 	bl	11318 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12dd2:	f030 0502 	bics.w	r5, r0, #2
   12dd6:	d00b      	beq.n	12df0 <connection_release+0xa8>
   12dd8:	4b35      	ldr	r3, [pc, #212]	; (12eb0 <connection_release+0x168>)
   12dda:	681b      	ldr	r3, [r3, #0]
   12ddc:	075a      	lsls	r2, r3, #29
   12dde:	d0de      	beq.n	12d9e <connection_release+0x56>
   12de0:	f04f 0200 	mov.w	r2, #0
   12de4:	2301      	movs	r3, #1
   12de6:	f363 0202 	bfi	r2, r3, #0, #3
   12dea:	f366 02c5 	bfi	r2, r6, #3, #3
   12dee:	e7cc      	b.n	12d8a <connection_release+0x42>
		ticker_status =
   12df0:	f242 337b 	movw	r3, #9083	; 0x237b
   12df4:	9300      	str	r3, [sp, #0]
   12df6:	462a      	mov	r2, r5
   12df8:	4b2c      	ldr	r3, [pc, #176]	; (12eac <connection_release+0x164>)
   12dfa:	4629      	mov	r1, r5
   12dfc:	4628      	mov	r0, r5
   12dfe:	f7fe fa8b 	bl	11318 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12e02:	f030 0302 	bics.w	r3, r0, #2
   12e06:	d015      	beq.n	12e34 <connection_release+0xec>
   12e08:	4b29      	ldr	r3, [pc, #164]	; (12eb0 <connection_release+0x168>)
   12e0a:	681b      	ldr	r3, [r3, #0]
   12e0c:	075b      	lsls	r3, r3, #29
   12e0e:	d0c6      	beq.n	12d9e <connection_release+0x56>
   12e10:	f04f 0200 	mov.w	r2, #0
   12e14:	2301      	movs	r3, #1
   12e16:	f363 0202 	bfi	r2, r3, #0, #3
   12e1a:	f365 02c5 	bfi	r2, r5, #3, #3
   12e1e:	e7b4      	b.n	12d8a <connection_release+0x42>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12e20:	790b      	ldrb	r3, [r1, #4]
   12e22:	f36f 0301 	bfc	r3, #0, #2
   12e26:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12e28:	680b      	ldr	r3, [r1, #0]
   12e2a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   12e2e:	8c20      	ldrh	r0, [r4, #32]
   12e30:	f7ff fef2 	bl	12c18 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   12e34:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12e38:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12e3c:	4299      	cmp	r1, r3
   12e3e:	d003      	beq.n	12e48 <connection_release+0x100>
   12e40:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12e44:	4299      	cmp	r1, r3
   12e46:	d1eb      	bne.n	12e20 <connection_release+0xd8>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   12e48:	4d1f      	ldr	r5, [pc, #124]	; (12ec8 <connection_release+0x180>)
   12e4a:	e007      	b.n	12e5c <connection_release+0x114>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12e4c:	6803      	ldr	r3, [r0, #0]
   12e4e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   12e52:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   12e56:	4629      	mov	r1, r5
   12e58:	f7fd fb5d 	bl	10516 <mem_release>
	while ((conn->pkt_tx_head) &&
   12e5c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   12e60:	b118      	cbz	r0, 12e6a <connection_release+0x122>
   12e62:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12e66:	4298      	cmp	r0, r3
   12e68:	d1f0      	bne.n	12e4c <connection_release+0x104>
	conn->pkt_tx_ctrl = NULL;
   12e6a:	2300      	movs	r3, #0
   12e6c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   12e70:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   12e74:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12e78:	b951      	cbnz	r1, 12e90 <connection_release+0x148>
	conn->handle = 0xffff;
   12e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12e7e:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   12e80:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   12e84:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
   12e86:	bf08      	it	eq
   12e88:	f8c7 1188 	streq.w	r1, [r7, #392]	; 0x188
}
   12e8c:	b003      	add	sp, #12
   12e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12e90:	790b      	ldrb	r3, [r1, #4]
   12e92:	f36f 0301 	bfc	r3, #0, #2
   12e96:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12e98:	680b      	ldr	r3, [r1, #0]
   12e9a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   12e9e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   12ea2:	8c20      	ldrh	r0, [r4, #32]
   12ea4:	f7ff feb8 	bl	12c18 <pdu_node_tx_release>
   12ea8:	e7e4      	b.n	12e74 <connection_release+0x12c>
   12eaa:	bf00      	nop
   12eac:	00012715 	.word	0x00012715
   12eb0:	2000d72c 	.word	0x2000d72c
   12eb4:	0002cff8 	.word	0x0002cff8
   12eb8:	0002d030 	.word	0x0002d030
   12ebc:	000309cf 	.word	0x000309cf
   12ec0:	0003090a 	.word	0x0003090a
   12ec4:	2000110c 	.word	0x2000110c
   12ec8:	20001268 	.word	0x20001268

00012ecc <chan_set>:
	switch (chan) {
   12ecc:	2826      	cmp	r0, #38	; 0x26
{
   12ece:	b510      	push	{r4, lr}
   12ed0:	4604      	mov	r4, r0
	switch (chan) {
   12ed2:	d00b      	beq.n	12eec <chan_set+0x20>
   12ed4:	2827      	cmp	r0, #39	; 0x27
   12ed6:	d00b      	beq.n	12ef0 <chan_set+0x24>
   12ed8:	2825      	cmp	r0, #37	; 0x25
   12eda:	d10b      	bne.n	12ef4 <chan_set+0x28>
		radio_freq_chan_set(2);
   12edc:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
   12ede:	f00a fd4d 	bl	1d97c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12ee2:	4620      	mov	r0, r4
}
   12ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12ee8:	f00a bd4e 	b.w	1d988 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   12eec:	201a      	movs	r0, #26
   12eee:	e7f6      	b.n	12ede <chan_set+0x12>
		radio_freq_chan_set(80);
   12ef0:	2050      	movs	r0, #80	; 0x50
   12ef2:	e7f4      	b.n	12ede <chan_set+0x12>
		if (chan < 11) {
   12ef4:	280a      	cmp	r0, #10
   12ef6:	d802      	bhi.n	12efe <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
   12ef8:	3002      	adds	r0, #2
   12efa:	0040      	lsls	r0, r0, #1
   12efc:	e7ef      	b.n	12ede <chan_set+0x12>
		} else if (chan < 40) {
   12efe:	2827      	cmp	r0, #39	; 0x27
   12f00:	d801      	bhi.n	12f06 <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   12f02:	3003      	adds	r0, #3
   12f04:	e7f9      	b.n	12efa <chan_set+0x2e>
			LL_ASSERT(0);
   12f06:	4b0d      	ldr	r3, [pc, #52]	; (12f3c <chan_set+0x70>)
   12f08:	681b      	ldr	r3, [r3, #0]
   12f0a:	075b      	lsls	r3, r3, #29
   12f0c:	d010      	beq.n	12f30 <chan_set+0x64>
   12f0e:	2301      	movs	r3, #1
   12f10:	f04f 0200 	mov.w	r2, #0
   12f14:	f363 0202 	bfi	r2, r3, #0, #3
   12f18:	4909      	ldr	r1, [pc, #36]	; (12f40 <chan_set+0x74>)
   12f1a:	4b0a      	ldr	r3, [pc, #40]	; (12f44 <chan_set+0x78>)
   12f1c:	480a      	ldr	r0, [pc, #40]	; (12f48 <chan_set+0x7c>)
   12f1e:	1a5b      	subs	r3, r3, r1
   12f20:	f36f 02c5 	bfc	r2, #3, #3
   12f24:	08db      	lsrs	r3, r3, #3
   12f26:	f363 128f 	bfi	r2, r3, #6, #10
   12f2a:	4908      	ldr	r1, [pc, #32]	; (12f4c <chan_set+0x80>)
   12f2c:	f7ee ff14 	bl	1d58 <log_1>
   12f30:	4040      	eors	r0, r0
   12f32:	f380 8811 	msr	BASEPRI, r0
   12f36:	f04f 0004 	mov.w	r0, #4
   12f3a:	df02      	svc	2
   12f3c:	2000d72c 	.word	0x2000d72c
   12f40:	0002cff8 	.word	0x0002cff8
   12f44:	0002d030 	.word	0x0002d030
   12f48:	0002f0b9 	.word	0x0002f0b9
   12f4c:	0003076e 	.word	0x0003076e

00012f50 <adv_setup>:
{
   12f50:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
   12f52:	4c33      	ldr	r4, [pc, #204]	; (13020 <adv_setup+0xd0>)
   12f54:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   12f58:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   12f5c:	429a      	cmp	r2, r3
   12f5e:	d027      	beq.n	12fb0 <adv_setup+0x60>
		first = _radio.advertiser.adv_data.first + 1;
   12f60:	3301      	adds	r3, #1
   12f62:	b2db      	uxtb	r3, r3
			first = 0;
   12f64:	2b02      	cmp	r3, #2
   12f66:	bf08      	it	eq
   12f68:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   12f6a:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
   12f6e:	2201      	movs	r2, #1
   12f70:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
	if (_radio.advertiser.scan_data.first != _radio.
   12f74:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   12f78:	212b      	movs	r1, #43	; 0x2b
   12f7a:	2527      	movs	r5, #39	; 0x27
   12f7c:	fb15 1500 	smlabb	r5, r5, r0, r1
   12f80:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
   12f84:	4299      	cmp	r1, r3
   12f86:	eb04 0605 	add.w	r6, r4, r5
   12f8a:	d013      	beq.n	12fb4 <adv_setup+0x64>
		first = _radio.advertiser.scan_data.first + 1;
   12f8c:	3301      	adds	r3, #1
   12f8e:	b2db      	uxtb	r3, r3
			first = 0;
   12f90:	2b02      	cmp	r3, #2
   12f92:	bf08      	it	eq
   12f94:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   12f96:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		struct pdu_adv *scan_pdu = (void *)
   12f9a:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
   12f9e:	2327      	movs	r3, #39	; 0x27
   12fa0:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
   12fa4:	2206      	movs	r2, #6
   12fa6:	1cb1      	adds	r1, r6, #2
   12fa8:	307d      	adds	r0, #125	; 0x7d
   12faa:	f7f2 ff6d 	bl	5e88 <memcpy>
   12fae:	e003      	b.n	12fb8 <adv_setup+0x68>
	u8_t upd = 0;
   12fb0:	2200      	movs	r2, #0
   12fb2:	e7dd      	b.n	12f70 <adv_setup+0x20>
	if (upd) {
   12fb4:	2a00      	cmp	r2, #0
   12fb6:	d1f0      	bne.n	12f9a <adv_setup+0x4a>
	radio_pkt_tx_set(pdu);
   12fb8:	4630      	mov	r0, r6
   12fba:	f00a fd43 	bl	1da44 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12fbe:	5d63      	ldrb	r3, [r4, r5]
   12fc0:	f003 030f 	and.w	r3, r3, #15
   12fc4:	2b02      	cmp	r3, #2
   12fc6:	d022      	beq.n	1300e <adv_setup+0xbe>
   12fc8:	2b07      	cmp	r3, #7
   12fca:	d020      	beq.n	1300e <adv_setup+0xbe>
		_radio.state = STATE_TX;
   12fcc:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   12fce:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   12fd0:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   12fd2:	f00a fe4d 	bl	1dc70 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12fd6:	2000      	movs	r0, #0
   12fd8:	f00a fdae 	bl	1db38 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
   12fdc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   12fe0:	f3c3 0202 	ubfx	r2, r3, #0, #3
   12fe4:	b2d3      	uxtb	r3, r2
   12fe6:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
   12fe8:	2000      	movs	r0, #0
   12fea:	07ce      	lsls	r6, r1, #31
   12fec:	f100 0501 	add.w	r5, r0, #1
   12ff0:	d512      	bpl.n	13018 <adv_setup+0xc8>
		(_radio.advertiser.chan_map_current - 1);
   12ff2:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
   12ff4:	4013      	ands	r3, r2
   12ff6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   12ffa:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
   12ffc:	f363 0202 	bfi	r2, r3, #0, #3
   13000:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   13004:	3025      	adds	r0, #37	; 0x25
}
   13006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
   1300a:	f7ff bf5f 	b.w	12ecc <chan_set>
		_radio.state = STATE_CLOSE;
   1300e:	2303      	movs	r3, #3
   13010:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
   13012:	f00a fda7 	bl	1db64 <radio_switch_complete_and_disable>
   13016:	e7e1      	b.n	12fdc <adv_setup+0x8c>
		bitmap >>= 1;
   13018:	0849      	lsrs	r1, r1, #1
   1301a:	4628      	mov	r0, r5
   1301c:	e7e5      	b.n	12fea <adv_setup+0x9a>
   1301e:	bf00      	nop
   13020:	2000110c 	.word	0x2000110c

00013024 <ticker_stop_adv_stop>:
{
   13024:	b530      	push	{r4, r5, lr}
   13026:	4c89      	ldr	r4, [pc, #548]	; (1324c <ticker_stop_adv_stop+0x228>)
   13028:	b085      	sub	sp, #20
	if (status != TICKER_STATUS_SUCCESS) {
   1302a:	b1f0      	cbz	r0, 1306a <ticker_stop_adv_stop+0x46>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   1302c:	7ce3      	ldrb	r3, [r4, #19]
   1302e:	2b05      	cmp	r3, #5
   13030:	f000 810a 	beq.w	13248 <ticker_stop_adv_stop+0x224>
   13034:	4b86      	ldr	r3, [pc, #536]	; (13250 <ticker_stop_adv_stop+0x22c>)
   13036:	681b      	ldr	r3, [r3, #0]
   13038:	0759      	lsls	r1, r3, #29
   1303a:	d010      	beq.n	1305e <ticker_stop_adv_stop+0x3a>
   1303c:	2301      	movs	r3, #1
   1303e:	f04f 0200 	mov.w	r2, #0
   13042:	f363 0202 	bfi	r2, r3, #0, #3
   13046:	4983      	ldr	r1, [pc, #524]	; (13254 <ticker_stop_adv_stop+0x230>)
   13048:	4b83      	ldr	r3, [pc, #524]	; (13258 <ticker_stop_adv_stop+0x234>)
   1304a:	4884      	ldr	r0, [pc, #528]	; (1325c <ticker_stop_adv_stop+0x238>)
   1304c:	1a5b      	subs	r3, r3, r1
   1304e:	f36f 02c5 	bfc	r2, #3, #3
   13052:	08db      	lsrs	r3, r3, #3
   13054:	4982      	ldr	r1, [pc, #520]	; (13260 <ticker_stop_adv_stop+0x23c>)
   13056:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(!retval);
   1305a:	f7ee fe7d 	bl	1d58 <log_1>
   1305e:	4040      	eors	r0, r0
   13060:	f380 8811 	msr	BASEPRI, r0
   13064:	f04f 0004 	mov.w	r0, #4
   13068:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1306a:	7c63      	ldrb	r3, [r4, #17]
   1306c:	2b05      	cmp	r3, #5
   1306e:	d003      	beq.n	13078 <ticker_stop_adv_stop+0x54>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   13070:	7ca3      	ldrb	r3, [r4, #18]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   13072:	2b05      	cmp	r3, #5
   13074:	f040 80cc 	bne.w	13210 <ticker_stop_adv_stop+0x1ec>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   13078:	ab04      	add	r3, sp, #16
   1307a:	2202      	movs	r2, #2
   1307c:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13080:	2200      	movs	r2, #0
   13082:	9300      	str	r3, [sp, #0]
   13084:	2101      	movs	r1, #1
   13086:	4b77      	ldr	r3, [pc, #476]	; (13264 <ticker_stop_adv_stop+0x240>)
   13088:	4610      	mov	r0, r2
   1308a:	f7fe f945 	bl	11318 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1308e:	2802      	cmp	r0, #2
   13090:	d01d      	beq.n	130ce <ticker_stop_adv_stop+0xaa>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   13092:	9802      	ldr	r0, [sp, #8]
   13094:	b340      	cbz	r0, 130e8 <ticker_stop_adv_stop+0xc4>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   13096:	9d02      	ldr	r5, [sp, #8]
   13098:	2d01      	cmp	r5, #1
   1309a:	f040 80a4 	bne.w	131e6 <ticker_stop_adv_stop+0x1c2>
		if (_radio.role != ROLE_NONE) {
   1309e:	7d23      	ldrb	r3, [r4, #20]
   130a0:	2b00      	cmp	r3, #0
   130a2:	f000 80b5 	beq.w	13210 <ticker_stop_adv_stop+0x1ec>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   130a6:	4b70      	ldr	r3, [pc, #448]	; (13268 <ticker_stop_adv_stop+0x244>)
   130a8:	2204      	movs	r2, #4
   130aa:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   130ac:	2200      	movs	r2, #0
   130ae:	4611      	mov	r1, r2
   130b0:	4628      	mov	r0, r5
   130b2:	f7fd fadf 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!ret);
   130b6:	2800      	cmp	r0, #0
   130b8:	f000 80aa 	beq.w	13210 <ticker_stop_adv_stop+0x1ec>
   130bc:	4b64      	ldr	r3, [pc, #400]	; (13250 <ticker_stop_adv_stop+0x22c>)
   130be:	681b      	ldr	r3, [r3, #0]
   130c0:	0759      	lsls	r1, r3, #29
   130c2:	d0cc      	beq.n	1305e <ticker_stop_adv_stop+0x3a>
   130c4:	f04f 0200 	mov.w	r2, #0
   130c8:	f365 0202 	bfi	r2, r5, #0, #3
   130cc:	e046      	b.n	1315c <ticker_stop_adv_stop+0x138>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   130ce:	2201      	movs	r2, #1
   130d0:	4611      	mov	r1, r2
   130d2:	4610      	mov	r0, r2
   130d4:	f7fd faa6 	bl	10624 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   130d8:	9b02      	ldr	r3, [sp, #8]
   130da:	2b02      	cmp	r3, #2
   130dc:	d1d9      	bne.n	13092 <ticker_stop_adv_stop+0x6e>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   130de:	2101      	movs	r1, #1
   130e0:	2000      	movs	r0, #0
   130e2:	f7fe f9cb 	bl	1147c <ticker_job_sched>
   130e6:	e7f7      	b.n	130d8 <ticker_stop_adv_stop+0xb4>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   130e8:	2302      	movs	r3, #2
   130ea:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   130ec:	7c63      	ldrb	r3, [r4, #17]
   130ee:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   130f2:	b99b      	cbnz	r3, 1311c <ticker_stop_adv_stop+0xf8>
   130f4:	4b56      	ldr	r3, [pc, #344]	; (13250 <ticker_stop_adv_stop+0x22c>)
   130f6:	681b      	ldr	r3, [r3, #0]
   130f8:	075a      	lsls	r2, r3, #29
   130fa:	d0b0      	beq.n	1305e <ticker_stop_adv_stop+0x3a>
   130fc:	2301      	movs	r3, #1
   130fe:	f04f 0200 	mov.w	r2, #0
   13102:	f363 0202 	bfi	r2, r3, #0, #3
   13106:	f361 02c5 	bfi	r2, r1, #3, #3
   1310a:	4b53      	ldr	r3, [pc, #332]	; (13258 <ticker_stop_adv_stop+0x234>)
   1310c:	4951      	ldr	r1, [pc, #324]	; (13254 <ticker_stop_adv_stop+0x230>)
   1310e:	4857      	ldr	r0, [pc, #348]	; (1326c <ticker_stop_adv_stop+0x248>)
   13110:	1a5b      	subs	r3, r3, r1
   13112:	08db      	lsrs	r3, r3, #3
   13114:	f363 128f 	bfi	r2, r3, #6, #10
   13118:	4955      	ldr	r1, [pc, #340]	; (13270 <ticker_stop_adv_stop+0x24c>)
   1311a:	e79e      	b.n	1305a <ticker_stop_adv_stop+0x36>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1311c:	ab03      	add	r3, sp, #12
   1311e:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
   13120:	7460      	strb	r0, [r4, #17]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13122:	4611      	mov	r1, r2
   13124:	9300      	str	r3, [sp, #0]
   13126:	4b4f      	ldr	r3, [pc, #316]	; (13264 <ticker_stop_adv_stop+0x240>)
   13128:	f7fe f8f6 	bl	11318 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1312c:	2802      	cmp	r0, #2
   1312e:	d018      	beq.n	13162 <ticker_stop_adv_stop+0x13e>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   13130:	9d03      	ldr	r5, [sp, #12]
   13132:	b31d      	cbz	r5, 1317c <ticker_stop_adv_stop+0x158>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   13134:	9c03      	ldr	r4, [sp, #12]
   13136:	2c01      	cmp	r4, #1
   13138:	d155      	bne.n	131e6 <ticker_stop_adv_stop+0x1c2>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1313a:	2200      	movs	r2, #0
   1313c:	4b4d      	ldr	r3, [pc, #308]	; (13274 <ticker_stop_adv_stop+0x250>)
   1313e:	4611      	mov	r1, r2
   13140:	4620      	mov	r0, r4
   13142:	f7fd fa97 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!ret);
   13146:	4605      	mov	r5, r0
   13148:	2800      	cmp	r0, #0
   1314a:	d03b      	beq.n	131c4 <ticker_stop_adv_stop+0x1a0>
   1314c:	4b40      	ldr	r3, [pc, #256]	; (13250 <ticker_stop_adv_stop+0x22c>)
   1314e:	681b      	ldr	r3, [r3, #0]
   13150:	075d      	lsls	r5, r3, #29
   13152:	d084      	beq.n	1305e <ticker_stop_adv_stop+0x3a>
   13154:	f04f 0200 	mov.w	r2, #0
   13158:	f364 0202 	bfi	r2, r4, #0, #3
			LL_ASSERT(!ret);
   1315c:	f36f 02c5 	bfc	r2, #3, #3
   13160:	e027      	b.n	131b2 <ticker_stop_adv_stop+0x18e>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   13162:	2201      	movs	r2, #1
   13164:	4611      	mov	r1, r2
   13166:	4610      	mov	r0, r2
   13168:	f7fd fa5c 	bl	10624 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   1316c:	9b03      	ldr	r3, [sp, #12]
   1316e:	2b02      	cmp	r3, #2
   13170:	d1de      	bne.n	13130 <ticker_stop_adv_stop+0x10c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   13172:	2101      	movs	r1, #1
   13174:	2000      	movs	r0, #0
   13176:	f7fe f981 	bl	1147c <ticker_job_sched>
   1317a:	e7f7      	b.n	1316c <ticker_stop_adv_stop+0x148>
			u32_t ticks_xtal_to_start =
   1317c:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   1317e:	69e2      	ldr	r2, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
   13180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   13184:	4293      	cmp	r3, r2
				ret = mayfly_enqueue(
   13186:	bf34      	ite	cc
   13188:	4b3a      	ldrcc	r3, [pc, #232]	; (13274 <ticker_stop_adv_stop+0x250>)
				ret = mayfly_enqueue(
   1318a:	4b3b      	ldrcs	r3, [pc, #236]	; (13278 <ticker_stop_adv_stop+0x254>)
   1318c:	462a      	mov	r2, r5
   1318e:	4629      	mov	r1, r5
   13190:	2001      	movs	r0, #1
   13192:	f7fd fa6f 	bl	10674 <mayfly_enqueue>
				LL_ASSERT(!ret);
   13196:	2800      	cmp	r0, #0
   13198:	d03a      	beq.n	13210 <ticker_stop_adv_stop+0x1ec>
   1319a:	4b2d      	ldr	r3, [pc, #180]	; (13250 <ticker_stop_adv_stop+0x22c>)
   1319c:	681b      	ldr	r3, [r3, #0]
   1319e:	075b      	lsls	r3, r3, #29
   131a0:	f43f af5d 	beq.w	1305e <ticker_stop_adv_stop+0x3a>
   131a4:	f04f 0200 	mov.w	r2, #0
   131a8:	2301      	movs	r3, #1
   131aa:	f363 0202 	bfi	r2, r3, #0, #3
			LL_ASSERT(!ret);
   131ae:	f365 02c5 	bfi	r2, r5, #3, #3
   131b2:	4928      	ldr	r1, [pc, #160]	; (13254 <ticker_stop_adv_stop+0x230>)
   131b4:	4b28      	ldr	r3, [pc, #160]	; (13258 <ticker_stop_adv_stop+0x234>)
			LL_ASSERT(!ret);
   131b6:	4831      	ldr	r0, [pc, #196]	; (1327c <ticker_stop_adv_stop+0x258>)
   131b8:	1a5b      	subs	r3, r3, r1
   131ba:	08db      	lsrs	r3, r3, #3
   131bc:	f363 128f 	bfi	r2, r3, #6, #10
   131c0:	492b      	ldr	r1, [pc, #172]	; (13270 <ticker_stop_adv_stop+0x24c>)
   131c2:	e74a      	b.n	1305a <ticker_stop_adv_stop+0x36>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   131c4:	4602      	mov	r2, r0
   131c6:	4601      	mov	r1, r0
   131c8:	4b2b      	ldr	r3, [pc, #172]	; (13278 <ticker_stop_adv_stop+0x254>)
   131ca:	4620      	mov	r0, r4
   131cc:	f7fd fa52 	bl	10674 <mayfly_enqueue>
			LL_ASSERT(!ret);
   131d0:	b1f0      	cbz	r0, 13210 <ticker_stop_adv_stop+0x1ec>
   131d2:	4b1f      	ldr	r3, [pc, #124]	; (13250 <ticker_stop_adv_stop+0x22c>)
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	0758      	lsls	r0, r3, #29
   131d8:	f43f af41 	beq.w	1305e <ticker_stop_adv_stop+0x3a>
   131dc:	f04f 0200 	mov.w	r2, #0
   131e0:	f364 0202 	bfi	r2, r4, #0, #3
   131e4:	e7e3      	b.n	131ae <ticker_stop_adv_stop+0x18a>
		LL_ASSERT(0);
   131e6:	4b1a      	ldr	r3, [pc, #104]	; (13250 <ticker_stop_adv_stop+0x22c>)
   131e8:	681b      	ldr	r3, [r3, #0]
   131ea:	075a      	lsls	r2, r3, #29
   131ec:	f43f af37 	beq.w	1305e <ticker_stop_adv_stop+0x3a>
   131f0:	2301      	movs	r3, #1
   131f2:	f04f 0200 	mov.w	r2, #0
   131f6:	f363 0202 	bfi	r2, r3, #0, #3
   131fa:	4916      	ldr	r1, [pc, #88]	; (13254 <ticker_stop_adv_stop+0x230>)
   131fc:	4b16      	ldr	r3, [pc, #88]	; (13258 <ticker_stop_adv_stop+0x234>)
   131fe:	4820      	ldr	r0, [pc, #128]	; (13280 <ticker_stop_adv_stop+0x25c>)
   13200:	1a5b      	subs	r3, r3, r1
   13202:	f36f 02c5 	bfc	r2, #3, #3
   13206:	08db      	lsrs	r3, r3, #3
   13208:	f363 128f 	bfi	r2, r3, #6, #10
   1320c:	4918      	ldr	r1, [pc, #96]	; (13270 <ticker_stop_adv_stop+0x24c>)
   1320e:	e724      	b.n	1305a <ticker_stop_adv_stop+0x36>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13210:	2200      	movs	r2, #0
   13212:	4b1c      	ldr	r3, [pc, #112]	; (13284 <ticker_stop_adv_stop+0x260>)
   13214:	4611      	mov	r1, r2
   13216:	2001      	movs	r0, #1
   13218:	f7fd fa2c 	bl	10674 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1321c:	b1a0      	cbz	r0, 13248 <ticker_stop_adv_stop+0x224>
   1321e:	4b0c      	ldr	r3, [pc, #48]	; (13250 <ticker_stop_adv_stop+0x22c>)
   13220:	681b      	ldr	r3, [r3, #0]
   13222:	075b      	lsls	r3, r3, #29
   13224:	f43f af1b 	beq.w	1305e <ticker_stop_adv_stop+0x3a>
   13228:	2301      	movs	r3, #1
   1322a:	f04f 0200 	mov.w	r2, #0
   1322e:	f363 0202 	bfi	r2, r3, #0, #3
   13232:	4908      	ldr	r1, [pc, #32]	; (13254 <ticker_stop_adv_stop+0x230>)
   13234:	4b08      	ldr	r3, [pc, #32]	; (13258 <ticker_stop_adv_stop+0x234>)
   13236:	4814      	ldr	r0, [pc, #80]	; (13288 <ticker_stop_adv_stop+0x264>)
   13238:	1a5b      	subs	r3, r3, r1
   1323a:	f36f 02c5 	bfc	r2, #3, #3
   1323e:	08db      	lsrs	r3, r3, #3
   13240:	f363 128f 	bfi	r2, r3, #6, #10
   13244:	4906      	ldr	r1, [pc, #24]	; (13260 <ticker_stop_adv_stop+0x23c>)
   13246:	e708      	b.n	1305a <ticker_stop_adv_stop+0x36>
}
   13248:	b005      	add	sp, #20
   1324a:	bd30      	pop	{r4, r5, pc}
   1324c:	2000110c 	.word	0x2000110c
   13250:	2000d72c 	.word	0x2000d72c
   13254:	0002cff8 	.word	0x0002cff8
   13258:	0002d030 	.word	0x0002d030
   1325c:	000313ba 	.word	0x000313ba
   13260:	000307d5 	.word	0x000307d5
   13264:	0001156d 	.word	0x0001156d
   13268:	2000cfec 	.word	0x2000cfec
   1326c:	000311e2 	.word	0x000311e2
   13270:	000307b9 	.word	0x000307b9
   13274:	2000cfbc 	.word	0x2000cfbc
   13278:	2000d07c 	.word	0x2000d07c
   1327c:	00031234 	.word	0x00031234
   13280:	0002f0b9 	.word	0x0002f0b9
   13284:	2000cf8c 	.word	0x2000cf8c
   13288:	0003103a 	.word	0x0003103a
   1328c:	00000000 	.word	0x00000000

00013290 <sched_after_mstr_free_offset_get>:
{
   13290:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13292:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
   13294:	aa02      	add	r2, sp, #8
{
   13296:	461c      	mov	r4, r3
   13298:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
   1329a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   1329e:	3127      	adds	r1, #39	; 0x27
   132a0:	2001      	movs	r0, #1
   132a2:	f7ff f839 	bl	12318 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
   132a6:	6823      	ldr	r3, [r4, #0]
   132a8:	2b00      	cmp	r3, #0
   132aa:	d038      	beq.n	1331e <sched_after_mstr_free_offset_get+0x8e>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
   132ac:	9801      	ldr	r0, [sp, #4]
   132ae:	1b83      	subs	r3, r0, r6
   132b0:	021a      	lsls	r2, r3, #8
   132b2:	d51a      	bpl.n	132ea <sched_after_mstr_free_offset_get+0x5a>
   132b4:	4b1e      	ldr	r3, [pc, #120]	; (13330 <sched_after_mstr_free_offset_get+0xa0>)
   132b6:	681b      	ldr	r3, [r3, #0]
   132b8:	075b      	lsls	r3, r3, #29
   132ba:	d010      	beq.n	132de <sched_after_mstr_free_offset_get+0x4e>
   132bc:	2301      	movs	r3, #1
   132be:	f04f 0200 	mov.w	r2, #0
   132c2:	f363 0202 	bfi	r2, r3, #0, #3
   132c6:	491b      	ldr	r1, [pc, #108]	; (13334 <sched_after_mstr_free_offset_get+0xa4>)
   132c8:	4b1b      	ldr	r3, [pc, #108]	; (13338 <sched_after_mstr_free_offset_get+0xa8>)
   132ca:	481c      	ldr	r0, [pc, #112]	; (1333c <sched_after_mstr_free_offset_get+0xac>)
   132cc:	1a5b      	subs	r3, r3, r1
   132ce:	f36f 02c5 	bfc	r2, #3, #3
   132d2:	08db      	lsrs	r3, r3, #3
   132d4:	f363 128f 	bfi	r2, r3, #6, #10
   132d8:	4919      	ldr	r1, [pc, #100]	; (13340 <sched_after_mstr_free_offset_get+0xb0>)
   132da:	f7ee fd3d 	bl	1d58 <log_1>
   132de:	4040      	eors	r0, r0
   132e0:	f380 8811 	msr	BASEPRI, r0
   132e4:	f04f 0004 	mov.w	r0, #4
   132e8:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   132ea:	4631      	mov	r1, r6
   132ec:	f7fe f8de 	bl	114ac <ticker_ticks_diff_get>
   132f0:	4602      	mov	r2, r0
   132f2:	4814      	ldr	r0, [pc, #80]	; (13344 <sched_after_mstr_free_offset_get+0xb4>)
   132f4:	2307      	movs	r3, #7
   132f6:	fba2 0100 	umull	r0, r1, r2, r0
   132fa:	fb03 1102 	mla	r1, r3, r2, r1
   132fe:	a30a      	add	r3, pc, #40	; (adr r3, 13328 <sched_after_mstr_free_offset_get+0x98>)
   13300:	e9d3 2300 	ldrd	r2, r3, [r3]
   13304:	f7ec ffd6 	bl	2b4 <__aeabi_uldivmod>
   13308:	6823      	ldr	r3, [r4, #0]
   1330a:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
   1330c:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   1330e:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
   13310:	db05      	blt.n	1331e <sched_after_mstr_free_offset_get+0x8e>
		u32_t conn_interval_us = conn_interval * 1250;
   13312:	f240 40e2 	movw	r0, #1250	; 0x4e2
   13316:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
   13318:	6823      	ldr	r3, [r4, #0]
   1331a:	4283      	cmp	r3, r0
   1331c:	d801      	bhi.n	13322 <sched_after_mstr_free_offset_get+0x92>
}
   1331e:	b002      	add	sp, #8
   13320:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
   13322:	1a1b      	subs	r3, r3, r0
   13324:	6023      	str	r3, [r4, #0]
   13326:	e7f7      	b.n	13318 <sched_after_mstr_free_offset_get+0x88>
   13328:	3b9aca00 	.word	0x3b9aca00
   1332c:	00000000 	.word	0x00000000
   13330:	2000d72c 	.word	0x2000d72c
   13334:	0002cff8 	.word	0x0002cff8
   13338:	0002d030 	.word	0x0002d030
   1333c:	000312b2 	.word	0x000312b2
   13340:	00030700 	.word	0x00030700
   13344:	1afd498d 	.word	0x1afd498d

00013348 <mayfly_sched_win_offset_use>:
{
   13348:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
   1334a:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
   1334e:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   13350:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   13354:	68c1      	ldr	r1, [r0, #12]
   13356:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   13358:	f7ff ff9a 	bl	13290 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1335c:	a902      	add	r1, sp, #8
   1335e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   13362:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   13366:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1336a:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1336e:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   13370:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   13374:	f7f2 fd88 	bl	5e88 <memcpy>
}
   13378:	b002      	add	sp, #8
   1337a:	bd10      	pop	{r4, pc}

0001337c <mayfly_sched_after_mstr_free_offset_get>:
{
   1337c:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   1337e:	4c05      	ldr	r4, [pc, #20]	; (13394 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   13380:	4602      	mov	r2, r0
   13382:	f504 7382 	add.w	r3, r4, #260	; 0x104
   13386:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
   1338a:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
   1338e:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   13390:	f7ff bf7e 	b.w	13290 <sched_after_mstr_free_offset_get>
   13394:	2000110c 	.word	0x2000110c

00013398 <mayfly_adv_stop>:
{
   13398:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
   1339a:	2001      	movs	r0, #1
   1339c:	f7fe f92e 	bl	115fc <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   133a0:	4604      	mov	r4, r0
   133a2:	b9d0      	cbnz	r0, 133da <mayfly_adv_stop+0x42>
   133a4:	4b15      	ldr	r3, [pc, #84]	; (133fc <mayfly_adv_stop+0x64>)
   133a6:	681b      	ldr	r3, [r3, #0]
   133a8:	075b      	lsls	r3, r3, #29
   133aa:	d010      	beq.n	133ce <mayfly_adv_stop+0x36>
   133ac:	2301      	movs	r3, #1
   133ae:	f04f 0200 	mov.w	r2, #0
   133b2:	f363 0202 	bfi	r2, r3, #0, #3
   133b6:	4912      	ldr	r1, [pc, #72]	; (13400 <mayfly_adv_stop+0x68>)
   133b8:	4b12      	ldr	r3, [pc, #72]	; (13404 <mayfly_adv_stop+0x6c>)
   133ba:	1a5b      	subs	r3, r3, r1
   133bc:	f360 02c5 	bfi	r2, r0, #3, #3
   133c0:	08db      	lsrs	r3, r3, #3
   133c2:	f363 128f 	bfi	r2, r3, #6, #10
   133c6:	4910      	ldr	r1, [pc, #64]	; (13408 <mayfly_adv_stop+0x70>)
   133c8:	4810      	ldr	r0, [pc, #64]	; (1340c <mayfly_adv_stop+0x74>)
   133ca:	f7ee fcc5 	bl	1d58 <log_1>
   133ce:	4040      	eors	r0, r0
   133d0:	f380 8811 	msr	BASEPRI, r0
   133d4:	f04f 0004 	mov.w	r0, #4
   133d8:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
   133da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   133de:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   133e0:	2306      	movs	r3, #6
   133e2:	7103      	strb	r3, [r0, #4]
	(void)memset(radio_le_conn_cmplt, 0x00,
   133e4:	221d      	movs	r2, #29
   133e6:	2100      	movs	r1, #0
   133e8:	3008      	adds	r0, #8
   133ea:	f7f2 fd7a 	bl	5ee2 <memset>
	radio_le_conn_cmplt->status = BT_HCI_ERR_ADV_TIMEOUT;
   133ee:	233c      	movs	r3, #60	; 0x3c
   133f0:	7223      	strb	r3, [r4, #8]
}
   133f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   133f6:	f7ff b863 	b.w	124c0 <packet_rx_enqueue>
   133fa:	bf00      	nop
   133fc:	2000d72c 	.word	0x2000d72c
   13400:	0002cff8 	.word	0x0002cff8
   13404:	0002d030 	.word	0x0002d030
   13408:	000307a9 	.word	0x000307a9
   1340c:	00030f96 	.word	0x00030f96

00013410 <terminate_ind_rx_enqueue>:
{
   13410:	4603      	mov	r3, r0
   13412:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   13414:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
   13418:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
{
   1341c:	b510      	push	{r4, lr}
	LL_ASSERT(node_rx->hdr.onion.link);
   1341e:	b9d0      	cbnz	r0, 13456 <terminate_ind_rx_enqueue+0x46>
   13420:	4b22      	ldr	r3, [pc, #136]	; (134ac <terminate_ind_rx_enqueue+0x9c>)
   13422:	681b      	ldr	r3, [r3, #0]
   13424:	075a      	lsls	r2, r3, #29
   13426:	d010      	beq.n	1344a <terminate_ind_rx_enqueue+0x3a>
   13428:	2301      	movs	r3, #1
   1342a:	f04f 0200 	mov.w	r2, #0
   1342e:	f363 0202 	bfi	r2, r3, #0, #3
   13432:	491f      	ldr	r1, [pc, #124]	; (134b0 <terminate_ind_rx_enqueue+0xa0>)
   13434:	4b1f      	ldr	r3, [pc, #124]	; (134b4 <terminate_ind_rx_enqueue+0xa4>)
   13436:	1a5b      	subs	r3, r3, r1
   13438:	f360 02c5 	bfi	r2, r0, #3, #3
   1343c:	08db      	lsrs	r3, r3, #3
   1343e:	491e      	ldr	r1, [pc, #120]	; (134b8 <terminate_ind_rx_enqueue+0xa8>)
   13440:	481e      	ldr	r0, [pc, #120]	; (134bc <terminate_ind_rx_enqueue+0xac>)
   13442:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(link);
   13446:	f7ee fc87 	bl	1d58 <log_1>
   1344a:	4040      	eors	r0, r0
   1344c:	f380 8811 	msr	BASEPRI, r0
   13450:	f04f 0004 	mov.w	r0, #4
   13454:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
   13456:	8c1c      	ldrh	r4, [r3, #32]
   13458:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
   1345c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13460:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   13462:	4a17      	ldr	r2, [pc, #92]	; (134c0 <terminate_ind_rx_enqueue+0xb0>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13464:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   13468:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
   1346c:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   13470:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   13474:	f7fd f88f 	bl	10596 <memq_enqueue>
	LL_ASSERT(link);
   13478:	b998      	cbnz	r0, 134a2 <terminate_ind_rx_enqueue+0x92>
   1347a:	4b0c      	ldr	r3, [pc, #48]	; (134ac <terminate_ind_rx_enqueue+0x9c>)
   1347c:	681b      	ldr	r3, [r3, #0]
   1347e:	075b      	lsls	r3, r3, #29
   13480:	d0e3      	beq.n	1344a <terminate_ind_rx_enqueue+0x3a>
   13482:	2301      	movs	r3, #1
   13484:	f04f 0200 	mov.w	r2, #0
   13488:	f363 0202 	bfi	r2, r3, #0, #3
   1348c:	4908      	ldr	r1, [pc, #32]	; (134b0 <terminate_ind_rx_enqueue+0xa0>)
   1348e:	4b09      	ldr	r3, [pc, #36]	; (134b4 <terminate_ind_rx_enqueue+0xa4>)
   13490:	1a5b      	subs	r3, r3, r1
   13492:	f360 02c5 	bfi	r2, r0, #3, #3
   13496:	08db      	lsrs	r3, r3, #3
   13498:	f363 128f 	bfi	r2, r3, #6, #10
   1349c:	4906      	ldr	r1, [pc, #24]	; (134b8 <terminate_ind_rx_enqueue+0xa8>)
   1349e:	4809      	ldr	r0, [pc, #36]	; (134c4 <terminate_ind_rx_enqueue+0xb4>)
   134a0:	e7d1      	b.n	13446 <terminate_ind_rx_enqueue+0x36>
}
   134a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   134a6:	f006 be03 	b.w	1a0b0 <radio_event_callback>
   134aa:	bf00      	nop
   134ac:	2000d72c 	.word	0x2000d72c
   134b0:	0002cff8 	.word	0x0002cff8
   134b4:	0002d030 	.word	0x0002d030
   134b8:	0003091d 	.word	0x0003091d
   134bc:	00031332 	.word	0x00031332
   134c0:	2000110c 	.word	0x2000110c
   134c4:	000309b5 	.word	0x000309b5

000134c8 <prepare_normal_set>:
{
   134c8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   134ca:	6803      	ldr	r3, [r0, #0]
   134cc:	2b00      	cmp	r3, #0
{
   134ce:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   134d0:	da33      	bge.n	1353a <prepare_normal_set+0x72>
		u32_t ticks_prepare_to_start =
   134d2:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   134d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   134da:	42a5      	cmp	r5, r4
   134dc:	bf34      	ite	cc
   134de:	1b1b      	subcc	r3, r3, r4
   134e0:	1b5b      	subcs	r3, r3, r5
		ticker_status =
   134e2:	2400      	movs	r4, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   134e4:	b29b      	uxth	r3, r3
		ticker_status =
   134e6:	9006      	str	r0, [sp, #24]
   134e8:	4815      	ldr	r0, [pc, #84]	; (13540 <prepare_normal_set+0x78>)
   134ea:	9005      	str	r0, [sp, #20]
   134ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
   134f0:	9300      	str	r3, [sp, #0]
   134f2:	e9cd 4403 	strd	r4, r4, [sp, #12]
   134f6:	4623      	mov	r3, r4
   134f8:	4620      	mov	r0, r4
   134fa:	f7fd fec3 	bl	11284 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   134fe:	f030 0302 	bics.w	r3, r0, #2
   13502:	d01a      	beq.n	1353a <prepare_normal_set+0x72>
   13504:	4b0f      	ldr	r3, [pc, #60]	; (13544 <prepare_normal_set+0x7c>)
   13506:	681b      	ldr	r3, [r3, #0]
   13508:	075b      	lsls	r3, r3, #29
   1350a:	d010      	beq.n	1352e <prepare_normal_set+0x66>
   1350c:	2301      	movs	r3, #1
   1350e:	f04f 0200 	mov.w	r2, #0
   13512:	f363 0202 	bfi	r2, r3, #0, #3
   13516:	490c      	ldr	r1, [pc, #48]	; (13548 <prepare_normal_set+0x80>)
   13518:	4b0c      	ldr	r3, [pc, #48]	; (1354c <prepare_normal_set+0x84>)
   1351a:	480d      	ldr	r0, [pc, #52]	; (13550 <prepare_normal_set+0x88>)
   1351c:	1a5b      	subs	r3, r3, r1
   1351e:	f364 02c5 	bfi	r2, r4, #3, #3
   13522:	08db      	lsrs	r3, r3, #3
   13524:	f363 128f 	bfi	r2, r3, #6, #10
   13528:	490a      	ldr	r1, [pc, #40]	; (13554 <prepare_normal_set+0x8c>)
   1352a:	f7ee fc15 	bl	1d58 <log_1>
   1352e:	4040      	eors	r0, r0
   13530:	f380 8811 	msr	BASEPRI, r0
   13534:	f04f 0004 	mov.w	r0, #4
   13538:	df02      	svc	2
}
   1353a:	b009      	add	sp, #36	; 0x24
   1353c:	bd30      	pop	{r4, r5, pc}
   1353e:	bf00      	nop
   13540:	0001158d 	.word	0x0001158d
   13544:	2000d72c 	.word	0x2000d72c
   13548:	0002cff8 	.word	0x0002cff8
   1354c:	0002d030 	.word	0x0002d030
   13550:	000309cf 	.word	0x000309cf
   13554:	000306b8 	.word	0x000306b8

00013558 <mayfly_xtal_stop_calc>:
{
   13558:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
   1355c:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1355e:	2302      	movs	r3, #2
   13560:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
   13562:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
   13564:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
	ticker_id_next = 0xff;
   13568:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1356a:	4e99      	ldr	r6, [pc, #612]	; (137d0 <mayfly_xtal_stop_calc+0x278>)
				    _radio.connection_count));
   1356c:	4d99      	ldr	r5, [pc, #612]	; (137d4 <mayfly_xtal_stop_calc+0x27c>)
	ticker_id_next = 0xff;
   1356e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
{
   13572:	4604      	mov	r4, r0
	ticks_to_expire = 0;
   13574:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13576:	ab09      	add	r3, sp, #36	; 0x24
   13578:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1357c:	ab0c      	add	r3, sp, #48	; 0x30
   1357e:	9300      	str	r3, [sp, #0]
   13580:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   13584:	ab0d      	add	r3, sp, #52	; 0x34
   13586:	2101      	movs	r1, #1
   13588:	2000      	movs	r0, #0
   1358a:	f7fd feff 	bl	1138c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1358e:	2802      	cmp	r0, #2
   13590:	d020      	beq.n	135d4 <mayfly_xtal_stop_calc+0x7c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   13592:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13594:	b313      	cbz	r3, 135dc <mayfly_xtal_stop_calc+0x84>
   13596:	4b90      	ldr	r3, [pc, #576]	; (137d8 <mayfly_xtal_stop_calc+0x280>)
   13598:	681b      	ldr	r3, [r3, #0]
   1359a:	0758      	lsls	r0, r3, #29
   1359c:	d010      	beq.n	135c0 <mayfly_xtal_stop_calc+0x68>
   1359e:	2301      	movs	r3, #1
   135a0:	f04f 0200 	mov.w	r2, #0
   135a4:	f363 0202 	bfi	r2, r3, #0, #3
   135a8:	498c      	ldr	r1, [pc, #560]	; (137dc <mayfly_xtal_stop_calc+0x284>)
   135aa:	4b8d      	ldr	r3, [pc, #564]	; (137e0 <mayfly_xtal_stop_calc+0x288>)
   135ac:	488d      	ldr	r0, [pc, #564]	; (137e4 <mayfly_xtal_stop_calc+0x28c>)
   135ae:	1a5b      	subs	r3, r3, r1
   135b0:	f36f 02c5 	bfc	r2, #3, #3
   135b4:	08db      	lsrs	r3, r3, #3
   135b6:	498c      	ldr	r1, [pc, #560]	; (137e8 <mayfly_xtal_stop_calc+0x290>)
   135b8:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   135bc:	f7ee fbcc 	bl	1d58 <log_1>
   135c0:	4040      	eors	r0, r0
   135c2:	f380 8811 	msr	BASEPRI, r0
   135c6:	f04f 0004 	mov.w	r0, #4
   135ca:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   135cc:	2101      	movs	r1, #1
   135ce:	2000      	movs	r0, #0
   135d0:	f7fd ff54 	bl	1147c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   135d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   135d6:	2b02      	cmp	r3, #2
   135d8:	d0f8      	beq.n	135cc <mayfly_xtal_stop_calc+0x74>
   135da:	e7da      	b.n	13592 <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
   135dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   135e0:	2bff      	cmp	r3, #255	; 0xff
   135e2:	d004      	beq.n	135ee <mayfly_xtal_stop_calc+0x96>
   135e4:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   135e8:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   135ea:	4293      	cmp	r3, r2
   135ec:	dac3      	bge.n	13576 <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
   135ee:	1f5a      	subs	r2, r3, #5
   135f0:	b2d2      	uxtb	r2, r2
   135f2:	2af9      	cmp	r2, #249	; 0xf9
   135f4:	d805      	bhi.n	13602 <mayfly_xtal_stop_calc+0xaa>
				_radio.connection_count))) {
   135f6:	4a77      	ldr	r2, [pc, #476]	; (137d4 <mayfly_xtal_stop_calc+0x27c>)
   135f8:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   135fc:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
   135fe:	4293      	cmp	r3, r2
   13600:	db06      	blt.n	13610 <mayfly_xtal_stop_calc+0xb8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   13602:	2100      	movs	r1, #0
   13604:	2001      	movs	r0, #1
   13606:	f7fe fbc5 	bl	11d94 <mayfly_xtal_retain>
}
   1360a:	b00f      	add	sp, #60	; 0x3c
   1360c:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   13610:	a90a      	add	r1, sp, #40	; 0x28
   13612:	b2e0      	uxtb	r0, r4
   13614:	f7ff f9d2 	bl	129bc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   13618:	b998      	cbnz	r0, 13642 <mayfly_xtal_stop_calc+0xea>
   1361a:	4b6f      	ldr	r3, [pc, #444]	; (137d8 <mayfly_xtal_stop_calc+0x280>)
   1361c:	681b      	ldr	r3, [r3, #0]
   1361e:	0759      	lsls	r1, r3, #29
   13620:	d0ce      	beq.n	135c0 <mayfly_xtal_stop_calc+0x68>
   13622:	2301      	movs	r3, #1
   13624:	f04f 0200 	mov.w	r2, #0
   13628:	f363 0202 	bfi	r2, r3, #0, #3
   1362c:	496b      	ldr	r1, [pc, #428]	; (137dc <mayfly_xtal_stop_calc+0x284>)
   1362e:	4b6c      	ldr	r3, [pc, #432]	; (137e0 <mayfly_xtal_stop_calc+0x288>)
   13630:	1a5b      	subs	r3, r3, r1
   13632:	f360 02c5 	bfi	r2, r0, #3, #3
   13636:	08db      	lsrs	r3, r3, #3
   13638:	f363 128f 	bfi	r2, r3, #6, #10
   1363c:	496a      	ldr	r1, [pc, #424]	; (137e8 <mayfly_xtal_stop_calc+0x290>)
   1363e:	486b      	ldr	r0, [pc, #428]	; (137ec <mayfly_xtal_stop_calc+0x294>)
   13640:	e7bc      	b.n	135bc <mayfly_xtal_stop_calc+0x64>
   13642:	e9d0 3400 	ldrd	r3, r4, [r0]
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   13646:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
   13648:	bfb8      	it	lt
   1364a:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
   1364c:	429c      	cmp	r4, r3
   1364e:	bf38      	it	cc
   13650:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
   13652:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   13654:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   13658:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
   1365a:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   1365c:	f7ff f9ae 	bl	129bc <hdr_conn_get>
	LL_ASSERT(hdr_next);
   13660:	4605      	mov	r5, r0
   13662:	b998      	cbnz	r0, 1368c <mayfly_xtal_stop_calc+0x134>
   13664:	4b5c      	ldr	r3, [pc, #368]	; (137d8 <mayfly_xtal_stop_calc+0x280>)
   13666:	681b      	ldr	r3, [r3, #0]
   13668:	075a      	lsls	r2, r3, #29
   1366a:	d0a9      	beq.n	135c0 <mayfly_xtal_stop_calc+0x68>
   1366c:	2301      	movs	r3, #1
   1366e:	f04f 0200 	mov.w	r2, #0
   13672:	f363 0202 	bfi	r2, r3, #0, #3
   13676:	4959      	ldr	r1, [pc, #356]	; (137dc <mayfly_xtal_stop_calc+0x284>)
   13678:	4b59      	ldr	r3, [pc, #356]	; (137e0 <mayfly_xtal_stop_calc+0x288>)
   1367a:	1a5b      	subs	r3, r3, r1
   1367c:	f360 02c5 	bfi	r2, r0, #3, #3
   13680:	08db      	lsrs	r3, r3, #3
   13682:	f363 128f 	bfi	r2, r3, #6, #10
   13686:	4958      	ldr	r1, [pc, #352]	; (137e8 <mayfly_xtal_stop_calc+0x290>)
   13688:	4859      	ldr	r0, [pc, #356]	; (137f0 <mayfly_xtal_stop_calc+0x298>)
   1368a:	e797      	b.n	135bc <mayfly_xtal_stop_calc+0x64>
	ticks_prepare_to_start_next =
   1368c:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   13690:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
   13692:	429e      	cmp	r6, r3
   13694:	bf38      	it	cc
   13696:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   13698:	2a00      	cmp	r2, #0
   1369a:	da05      	bge.n	136a8 <mayfly_xtal_stop_calc+0x150>
		ticks_to_expire -=
   1369c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
   1369e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
   136a2:	4433      	add	r3, r6
   136a4:	1a9b      	subs	r3, r3, r2
   136a6:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
   136a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
   136aa:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
   136ae:	4293      	cmp	r3, r2
   136b0:	d20a      	bcs.n	136c8 <mayfly_xtal_stop_calc+0x170>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   136b2:	2100      	movs	r1, #0
   136b4:	2001      	movs	r0, #1
   136b6:	f7fe fb6d 	bl	11d94 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   136ba:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   136be:	2101      	movs	r1, #1
   136c0:	4628      	mov	r0, r5
   136c2:	f7ff ff01 	bl	134c8 <prepare_normal_set>
   136c6:	e7a0      	b.n	1360a <mayfly_xtal_stop_calc+0xb2>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   136c8:	2101      	movs	r1, #1
   136ca:	4608      	mov	r0, r1
   136cc:	f7fe fb62 	bl	11d94 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   136d0:	682b      	ldr	r3, [r5, #0]
   136d2:	2b00      	cmp	r3, #0
   136d4:	db2a      	blt.n	1372c <mayfly_xtal_stop_calc+0x1d4>
   136d6:	42b3      	cmp	r3, r6
   136d8:	d928      	bls.n	1372c <mayfly_xtal_stop_calc+0x1d4>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   136da:	1b9b      	subs	r3, r3, r6
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   136dc:	b29b      	uxth	r3, r3
			ticker_status =
   136de:	9506      	str	r5, [sp, #24]
   136e0:	4944      	ldr	r1, [pc, #272]	; (137f4 <mayfly_xtal_stop_calc+0x29c>)
   136e2:	9105      	str	r1, [sp, #20]
   136e4:	2500      	movs	r5, #0
   136e6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   136ea:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   136ee:	9500      	str	r5, [sp, #0]
   136f0:	e9cd 5503 	strd	r5, r5, [sp, #12]
   136f4:	2101      	movs	r1, #1
   136f6:	4628      	mov	r0, r5
   136f8:	f7fd fdc4 	bl	11284 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   136fc:	f030 0302 	bics.w	r3, r0, #2
   13700:	d014      	beq.n	1372c <mayfly_xtal_stop_calc+0x1d4>
   13702:	4b35      	ldr	r3, [pc, #212]	; (137d8 <mayfly_xtal_stop_calc+0x280>)
   13704:	681b      	ldr	r3, [r3, #0]
   13706:	075b      	lsls	r3, r3, #29
   13708:	f43f af5a 	beq.w	135c0 <mayfly_xtal_stop_calc+0x68>
   1370c:	2301      	movs	r3, #1
   1370e:	f04f 0200 	mov.w	r2, #0
   13712:	f363 0202 	bfi	r2, r3, #0, #3
   13716:	4931      	ldr	r1, [pc, #196]	; (137dc <mayfly_xtal_stop_calc+0x284>)
   13718:	4b31      	ldr	r3, [pc, #196]	; (137e0 <mayfly_xtal_stop_calc+0x288>)
   1371a:	4837      	ldr	r0, [pc, #220]	; (137f8 <mayfly_xtal_stop_calc+0x2a0>)
   1371c:	1a5b      	subs	r3, r3, r1
   1371e:	f365 02c5 	bfi	r2, r5, #3, #3
   13722:	08db      	lsrs	r3, r3, #3
   13724:	f363 128f 	bfi	r2, r3, #6, #10
   13728:	492f      	ldr	r1, [pc, #188]	; (137e8 <mayfly_xtal_stop_calc+0x290>)
   1372a:	e747      	b.n	135bc <mayfly_xtal_stop_calc+0x64>
		if (!conn_curr || !conn_next) {
   1372c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1372e:	2e00      	cmp	r6, #0
   13730:	f43f af6b 	beq.w	1360a <mayfly_xtal_stop_calc+0xb2>
   13734:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13736:	2d00      	cmp	r5, #0
   13738:	f43f af67 	beq.w	1360a <mayfly_xtal_stop_calc+0xb2>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
   1373c:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
   1373e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   13740:	429a      	cmp	r2, r3
   13742:	f47f af62 	bne.w	1360a <mayfly_xtal_stop_calc+0xb2>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
   13746:	482d      	ldr	r0, [pc, #180]	; (137fc <mayfly_xtal_stop_calc+0x2a4>)
   13748:	fa1f fb82 	uxth.w	fp, r2
   1374c:	fbab 0100 	umull	r0, r1, fp, r0
   13750:	f240 1323 	movw	r3, #291	; 0x123
   13754:	fb03 110b 	mla	r1, r3, fp, r1
   13758:	a31b      	add	r3, pc, #108	; (adr r3, 137c8 <mayfly_xtal_stop_calc+0x270>)
   1375a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1375e:	f7ec fda9 	bl	2b4 <__aeabi_uldivmod>
   13762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13764:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
   13768:	2200      	movs	r2, #0
   1376a:	4283      	cmp	r3, r0
   1376c:	d818      	bhi.n	137a0 <mayfly_xtal_stop_calc+0x248>
   1376e:	b102      	cbz	r2, 13772 <mayfly_xtal_stop_calc+0x21a>
   13770:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
   13772:	f996 101d 	ldrsb.w	r1, [r6, #29]
   13776:	f995 201d 	ldrsb.w	r2, [r5, #29]
   1377a:	2900      	cmp	r1, #0
   1377c:	da13      	bge.n	137a6 <mayfly_xtal_stop_calc+0x24e>
   1377e:	2a00      	cmp	r2, #0
   13780:	f6ff af43 	blt.w	1360a <mayfly_xtal_stop_calc+0xb2>
			     (ticks_slot_abs +
   13784:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
   13786:	42a3      	cmp	r3, r4
   13788:	f4bf af3f 	bcs.w	1360a <mayfly_xtal_stop_calc+0xb2>
				status = conn_update_req(conn_curr);
   1378c:	4630      	mov	r0, r6
   1378e:	f7fd ff47 	bl	11620 <conn_update_req>
				if (status == 2) {
   13792:	2802      	cmp	r0, #2
   13794:	f47f af39 	bne.w	1360a <mayfly_xtal_stop_calc+0xb2>
					conn_update_req(conn_next);
   13798:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
   1379a:	f7fd ff41 	bl	11620 <conn_update_req>
   1379e:	e734      	b.n	1360a <mayfly_xtal_stop_calc+0xb2>
				ticks_to_expire -= ticks_conn_interval;
   137a0:	1a1b      	subs	r3, r3, r0
   137a2:	2201      	movs	r2, #1
   137a4:	e7e1      	b.n	1376a <mayfly_xtal_stop_calc+0x212>
			} else if (!conn_curr->role && conn_next->role &&
   137a6:	2a00      	cmp	r2, #0
   137a8:	f6bf af2f 	bge.w	1360a <mayfly_xtal_stop_calc+0xb2>
				    (ticks_slot_abs +
   137ac:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
   137ae:	42a3      	cmp	r3, r4
   137b0:	f4bf af2b 	bcs.w	1360a <mayfly_xtal_stop_calc+0xb2>
				status = conn_update_req(conn_next);
   137b4:	4628      	mov	r0, r5
   137b6:	f7fd ff33 	bl	11620 <conn_update_req>
				if (status == 2) {
   137ba:	2802      	cmp	r0, #2
   137bc:	f47f af25 	bne.w	1360a <mayfly_xtal_stop_calc+0xb2>
					conn_update_req(conn_curr);
   137c0:	980a      	ldr	r0, [sp, #40]	; 0x28
   137c2:	e7ea      	b.n	1379a <mayfly_xtal_stop_calc+0x242>
   137c4:	f3af 8000 	nop.w
   137c8:	1afd498d 	.word	0x1afd498d
   137cc:	00000007 	.word	0x00000007
   137d0:	0001156d 	.word	0x0001156d
   137d4:	2000110c 	.word	0x2000110c
   137d8:	2000d72c 	.word	0x2000d72c
   137dc:	0002cff8 	.word	0x0002cff8
   137e0:	0002d030 	.word	0x0002d030
   137e4:	000312ff 	.word	0x000312ff
   137e8:	000306cb 	.word	0x000306cb
   137ec:	00031057 	.word	0x00031057
   137f0:	00031075 	.word	0x00031075
   137f4:	00011581 	.word	0x00011581
   137f8:	000309cf 	.word	0x000309cf
   137fc:	09ce5400 	.word	0x09ce5400

00013800 <preempt_calc>:
{
   13800:	b570      	push	{r4, r5, r6, lr}
   13802:	4614      	mov	r4, r2
   13804:	460e      	mov	r6, r1
   13806:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   13808:	f7fd fe4e 	bl	114a8 <ticker_ticks_now_get>
	u32_t diff =
   1380c:	4621      	mov	r1, r4
   1380e:	f7fd fe4d 	bl	114ac <ticker_ticks_diff_get>
	diff += 3;
   13812:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   13814:	2c09      	cmp	r4, #9
   13816:	d90f      	bls.n	13838 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   13818:	2100      	movs	r1, #0
   1381a:	4608      	mov	r0, r1
   1381c:	f7fe faba 	bl	11d94 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   13820:	4632      	mov	r2, r6
   13822:	2100      	movs	r1, #0
   13824:	4628      	mov	r0, r5
   13826:	f7ff fe4f 	bl	134c8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   1382a:	68ab      	ldr	r3, [r5, #8]
   1382c:	441c      	add	r4, r3
		if (diff <
   1382e:	2c26      	cmp	r4, #38	; 0x26
   13830:	d800      	bhi.n	13834 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
   13832:	60ac      	str	r4, [r5, #8]
		return 1;
   13834:	2001      	movs	r0, #1
   13836:	e000      	b.n	1383a <preempt_calc+0x3a>
	return 0;
   13838:	2000      	movs	r0, #0
}
   1383a:	bd70      	pop	{r4, r5, r6, pc}

0001383c <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   1383c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
   1383e:	ad02      	add	r5, sp, #8
   13840:	4b10      	ldr	r3, [pc, #64]	; (13884 <adv_scan_configure.constprop.32+0x48>)
   13842:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
   13846:	4604      	mov	r4, r0
	radio_reset();
   13848:	f00a f868 	bl	1d91c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1384c:	2000      	movs	r0, #0
   1384e:	f00a f88f 	bl	1d970 <radio_tx_power_set>
	radio_isr_set(isr);
   13852:	480d      	ldr	r0, [pc, #52]	; (13888 <adv_scan_configure.constprop.32+0x4c>)
   13854:	f00a f82c 	bl	1d8b0 <radio_isr_set>
	radio_phy_set(phy, flags);
   13858:	2101      	movs	r1, #1
   1385a:	4620      	mov	r0, r4
   1385c:	f00a f878 	bl	1d950 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   13860:	4628      	mov	r0, r5
   13862:	f00a f8a3 	bl	1d9ac <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   13866:	0062      	lsls	r2, r4, #1
   13868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1386c:	2125      	movs	r1, #37	; 0x25
   1386e:	2008      	movs	r0, #8
   13870:	f00a f8b4 	bl	1d9dc <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13874:	4905      	ldr	r1, [pc, #20]	; (1388c <adv_scan_configure.constprop.32+0x50>)
   13876:	f240 605b 	movw	r0, #1627	; 0x65b
   1387a:	f00a f93f 	bl	1dafc <radio_crc_configure>
}
   1387e:	b003      	add	sp, #12
   13880:	bd30      	pop	{r4, r5, pc}
   13882:	bf00      	nop
   13884:	8e89bed6 	.word	0x8e89bed6
   13888:	00016f41 	.word	0x00016f41
   1388c:	00555555 	.word	0x00555555

00013890 <event_scan>:
{
   13890:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   13892:	4b7b      	ldr	r3, [pc, #492]	; (13a80 <event_scan+0x1f0>)
   13894:	7d1a      	ldrb	r2, [r3, #20]
{
   13896:	b08d      	sub	sp, #52	; 0x34
   13898:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   1389a:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   1389e:	461c      	mov	r4, r3
   138a0:	b1d2      	cbz	r2, 138d8 <event_scan+0x48>
   138a2:	4b78      	ldr	r3, [pc, #480]	; (13a84 <event_scan+0x1f4>)
   138a4:	681b      	ldr	r3, [r3, #0]
   138a6:	0758      	lsls	r0, r3, #29
   138a8:	d010      	beq.n	138cc <event_scan+0x3c>
   138aa:	2301      	movs	r3, #1
   138ac:	f04f 0200 	mov.w	r2, #0
   138b0:	f363 0202 	bfi	r2, r3, #0, #3
   138b4:	4974      	ldr	r1, [pc, #464]	; (13a88 <event_scan+0x1f8>)
   138b6:	4b75      	ldr	r3, [pc, #468]	; (13a8c <event_scan+0x1fc>)
   138b8:	4875      	ldr	r0, [pc, #468]	; (13a90 <event_scan+0x200>)
   138ba:	1a5b      	subs	r3, r3, r1
   138bc:	f36f 02c5 	bfc	r2, #3, #3
   138c0:	08db      	lsrs	r3, r3, #3
   138c2:	4974      	ldr	r1, [pc, #464]	; (13a94 <event_scan+0x204>)
   138c4:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   138c8:	f7ee fa46 	bl	1d58 <log_1>
   138cc:	4040      	eors	r0, r0
   138ce:	f380 8811 	msr	BASEPRI, r0
   138d2:	f04f 0004 	mov.w	r0, #4
   138d6:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   138d8:	7c5b      	ldrb	r3, [r3, #17]
   138da:	b2db      	uxtb	r3, r3
   138dc:	2b06      	cmp	r3, #6
   138de:	d013      	beq.n	13908 <event_scan+0x78>
   138e0:	4b68      	ldr	r3, [pc, #416]	; (13a84 <event_scan+0x1f4>)
   138e2:	681b      	ldr	r3, [r3, #0]
   138e4:	0759      	lsls	r1, r3, #29
   138e6:	d0f1      	beq.n	138cc <event_scan+0x3c>
   138e8:	2301      	movs	r3, #1
   138ea:	f04f 0200 	mov.w	r2, #0
   138ee:	f363 0202 	bfi	r2, r3, #0, #3
   138f2:	4965      	ldr	r1, [pc, #404]	; (13a88 <event_scan+0x1f8>)
   138f4:	4b65      	ldr	r3, [pc, #404]	; (13a8c <event_scan+0x1fc>)
   138f6:	4868      	ldr	r0, [pc, #416]	; (13a98 <event_scan+0x208>)
   138f8:	1a5b      	subs	r3, r3, r1
   138fa:	f365 02c5 	bfi	r2, r5, #3, #3
   138fe:	08db      	lsrs	r3, r3, #3
   13900:	f363 128f 	bfi	r2, r3, #6, #10
   13904:	4963      	ldr	r1, [pc, #396]	; (13a94 <event_scan+0x204>)
   13906:	e7df      	b.n	138c8 <event_scan+0x38>
	_radio.role = ROLE_SCAN;
   13908:	2202      	movs	r2, #2
   1390a:	7522      	strb	r2, [r4, #20]
	_radio.ticks_anchor = ticks_at_expire;
   1390c:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
   1390e:	7465      	strb	r5, [r4, #17]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   13910:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   13914:	74a3      	strb	r3, [r4, #18]
	_radio.scanner.state = 0;
   13916:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
   1391a:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
   1391c:	f365 0341 	bfi	r3, r5, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   13920:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
   13924:	7562      	strb	r2, [r4, #21]
	_radio.scanner.state = 0;
   13926:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   1392a:	f7ff ff87 	bl	1383c <adv_scan_configure.constprop.32>
	chan_set(37 + _radio.scanner.chan++);
   1392e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   13932:	f3c3 0081 	ubfx	r0, r3, #2, #2
   13936:	1c42      	adds	r2, r0, #1
   13938:	f362 0383 	bfi	r3, r2, #2, #2
   1393c:	3025      	adds	r0, #37	; 0x25
   1393e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   13942:	f7ff fac3 	bl	12ecc <chan_set>
	if (_radio.scanner.chan == 3) {
   13946:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1394a:	f003 020c 	and.w	r2, r3, #12
   1394e:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
   13950:	bf08      	it	eq
   13952:	f365 0383 	bfieq	r3, r5, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
   13956:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
   1395a:	bf08      	it	eq
   1395c:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
   13960:	f00a f986 	bl	1dc70 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   13964:	2300      	movs	r3, #0
   13966:	4619      	mov	r1, r3
   13968:	461a      	mov	r2, r3
   1396a:	4618      	mov	r0, r3
   1396c:	f00a f8f0 	bl	1db50 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   13970:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   13974:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   13978:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1397c:	3008      	adds	r0, #8
   1397e:	f00a f85b 	bl	1da38 <radio_pkt_rx_set>
	radio_rssi_measure();
   13982:	f00a f8fd 	bl	1db80 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   13986:	f009 fa37 	bl	1cdf8 <ctrl_rl_enabled>
   1398a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1398e:	b340      	cbz	r0, 139e2 <event_scan+0x152>
		struct ll_filter *filter =
   13990:	f3c3 1000 	ubfx	r0, r3, #4, #1
   13994:	f008 ffee 	bl	1c974 <ctrl_filter_get>
   13998:	4605      	mov	r5, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   1399a:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   1399e:	f008 febd 	bl	1c71c <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   139a2:	7869      	ldrb	r1, [r5, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
   139a4:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   139a6:	1caa      	adds	r2, r5, #2
   139a8:	7828      	ldrb	r0, [r5, #0]
   139aa:	f00a f90b 	bl	1dbc4 <radio_filter_configure>
		radio_ar_configure(count, irks);
   139ae:	4639      	mov	r1, r7
   139b0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   139b4:	f00a fae2 	bl	1df7c <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   139b8:	68e2      	ldr	r2, [r4, #12]
   139ba:	f106 0109 	add.w	r1, r6, #9
   139be:	2000      	movs	r0, #0
   139c0:	f00a f962 	bl	1dc88 <radio_tmr_start>
	radio_tmr_end_capture();
   139c4:	f00a fa32 	bl	1de2c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   139c8:	4632      	mov	r2, r6
   139ca:	2106      	movs	r1, #6
   139cc:	4833      	ldr	r0, [pc, #204]	; (13a9c <event_scan+0x20c>)
   139ce:	f7ff ff17 	bl	13800 <preempt_calc>
   139d2:	4605      	mov	r5, r0
   139d4:	b188      	cbz	r0, 139fa <event_scan+0x16a>
		_radio.state = STATE_STOP;
   139d6:	2304      	movs	r3, #4
   139d8:	7563      	strb	r3, [r4, #21]
		radio_disable();
   139da:	f00a f853 	bl	1da84 <radio_disable>
}
   139de:	b00d      	add	sp, #52	; 0x34
   139e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
   139e2:	f013 0f30 	tst.w	r3, #48	; 0x30
   139e6:	d0e7      	beq.n	139b8 <event_scan+0x128>
		struct ll_filter *wl = ctrl_filter_get(true);
   139e8:	2001      	movs	r0, #1
   139ea:	f008 ffc3 	bl	1c974 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   139ee:	1c82      	adds	r2, r0, #2
   139f0:	7841      	ldrb	r1, [r0, #1]
   139f2:	7800      	ldrb	r0, [r0, #0]
   139f4:	f00a f8e6 	bl	1dbc4 <radio_filter_configure>
   139f8:	e7de      	b.n	139b8 <event_scan+0x128>
		ret = ticker_start(
   139fa:	f641 13b4 	movw	r3, #6580	; 0x19b4
   139fe:	9308      	str	r3, [sp, #32]
   13a00:	4b27      	ldr	r3, [pc, #156]	; (13aa0 <event_scan+0x210>)
   13a02:	9307      	str	r3, [sp, #28]
   13a04:	4b27      	ldr	r3, [pc, #156]	; (13aa4 <event_scan+0x214>)
   13a06:	9001      	str	r0, [sp, #4]
   13a08:	e9cd 0304 	strd	r0, r3, [sp, #16]
   13a0c:	e9cd 0002 	strd	r0, r0, [sp, #8]
   13a10:	2204      	movs	r2, #4
   13a12:	9206      	str	r2, [sp, #24]
   13a14:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   13a18:	3309      	adds	r3, #9
   13a1a:	9300      	str	r3, [sp, #0]
   13a1c:	4601      	mov	r1, r0
   13a1e:	4633      	mov	r3, r6
   13a20:	f7fd fbe6 	bl	111f0 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13a24:	f030 0402 	bics.w	r4, r0, #2
   13a28:	d014      	beq.n	13a54 <event_scan+0x1c4>
   13a2a:	4b16      	ldr	r3, [pc, #88]	; (13a84 <event_scan+0x1f4>)
   13a2c:	681b      	ldr	r3, [r3, #0]
   13a2e:	075a      	lsls	r2, r3, #29
   13a30:	f43f af4c 	beq.w	138cc <event_scan+0x3c>
   13a34:	f04f 0200 	mov.w	r2, #0
   13a38:	2301      	movs	r3, #1
   13a3a:	f363 0202 	bfi	r2, r3, #0, #3
   13a3e:	f365 02c5 	bfi	r2, r5, #3, #3
   13a42:	4911      	ldr	r1, [pc, #68]	; (13a88 <event_scan+0x1f8>)
   13a44:	4b11      	ldr	r3, [pc, #68]	; (13a8c <event_scan+0x1fc>)
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13a46:	4818      	ldr	r0, [pc, #96]	; (13aa8 <event_scan+0x218>)
   13a48:	1a5b      	subs	r3, r3, r1
   13a4a:	08db      	lsrs	r3, r3, #3
   13a4c:	f363 128f 	bfi	r2, r3, #6, #10
   13a50:	4910      	ldr	r1, [pc, #64]	; (13a94 <event_scan+0x204>)
   13a52:	e739      	b.n	138c8 <event_scan+0x38>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13a54:	4623      	mov	r3, r4
   13a56:	4a15      	ldr	r2, [pc, #84]	; (13aac <event_scan+0x21c>)
   13a58:	4621      	mov	r1, r4
   13a5a:	4620      	mov	r0, r4
   13a5c:	f7fd fcd4 	bl	11408 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13a60:	f030 0302 	bics.w	r3, r0, #2
   13a64:	d0bb      	beq.n	139de <event_scan+0x14e>
   13a66:	4b07      	ldr	r3, [pc, #28]	; (13a84 <event_scan+0x1f4>)
   13a68:	681b      	ldr	r3, [r3, #0]
   13a6a:	075b      	lsls	r3, r3, #29
   13a6c:	f43f af2e 	beq.w	138cc <event_scan+0x3c>
   13a70:	f04f 0200 	mov.w	r2, #0
   13a74:	2301      	movs	r3, #1
   13a76:	f363 0202 	bfi	r2, r3, #0, #3
   13a7a:	f364 02c5 	bfi	r2, r4, #3, #3
   13a7e:	e7e0      	b.n	13a42 <event_scan+0x1b2>
   13a80:	2000110c 	.word	0x2000110c
   13a84:	2000d72c 	.word	0x2000d72c
   13a88:	0002cff8 	.word	0x0002cff8
   13a8c:	0002d030 	.word	0x0002d030
   13a90:	00030aee 	.word	0x00030aee
   13a94:	0003080c 	.word	0x0003080c
   13a98:	00030b1c 	.word	0x00030b1c
   13a9c:	200011dc 	.word	0x200011dc
   13aa0:	00012715 	.word	0x00012715
   13aa4:	00012a45 	.word	0x00012a45
   13aa8:	00030b4f 	.word	0x00030b4f
   13aac:	000129a5 	.word	0x000129a5

00013ab0 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   13ab0:	4b4c      	ldr	r3, [pc, #304]	; (13be4 <event_adv+0x134>)
   13ab2:	7d1a      	ldrb	r2, [r3, #20]
{
   13ab4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   13ab6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
   13aba:	4605      	mov	r5, r0
   13abc:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   13abe:	b1d2      	cbz	r2, 13af6 <event_adv+0x46>
   13ac0:	4b49      	ldr	r3, [pc, #292]	; (13be8 <event_adv+0x138>)
   13ac2:	681b      	ldr	r3, [r3, #0]
   13ac4:	0759      	lsls	r1, r3, #29
   13ac6:	d010      	beq.n	13aea <event_adv+0x3a>
   13ac8:	2301      	movs	r3, #1
   13aca:	f04f 0200 	mov.w	r2, #0
   13ace:	f363 0202 	bfi	r2, r3, #0, #3
   13ad2:	4946      	ldr	r1, [pc, #280]	; (13bec <event_adv+0x13c>)
   13ad4:	4b46      	ldr	r3, [pc, #280]	; (13bf0 <event_adv+0x140>)
   13ad6:	4847      	ldr	r0, [pc, #284]	; (13bf4 <event_adv+0x144>)
   13ad8:	1a5b      	subs	r3, r3, r1
   13ada:	f36f 02c5 	bfc	r2, #3, #3
   13ade:	08db      	lsrs	r3, r3, #3
   13ae0:	4945      	ldr	r1, [pc, #276]	; (13bf8 <event_adv+0x148>)
   13ae2:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13ae6:	f7ee f937 	bl	1d58 <log_1>
   13aea:	4040      	eors	r0, r0
   13aec:	f380 8811 	msr	BASEPRI, r0
   13af0:	f04f 0004 	mov.w	r0, #4
   13af4:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   13af6:	7c5b      	ldrb	r3, [r3, #17]
   13af8:	b2db      	uxtb	r3, r3
   13afa:	2b05      	cmp	r3, #5
   13afc:	d013      	beq.n	13b26 <event_adv+0x76>
   13afe:	4b3a      	ldr	r3, [pc, #232]	; (13be8 <event_adv+0x138>)
   13b00:	681b      	ldr	r3, [r3, #0]
   13b02:	075a      	lsls	r2, r3, #29
   13b04:	d0f1      	beq.n	13aea <event_adv+0x3a>
   13b06:	2301      	movs	r3, #1
   13b08:	f04f 0200 	mov.w	r2, #0
   13b0c:	f363 0202 	bfi	r2, r3, #0, #3
   13b10:	f361 02c5 	bfi	r2, r1, #3, #3
   13b14:	4b36      	ldr	r3, [pc, #216]	; (13bf0 <event_adv+0x140>)
   13b16:	4935      	ldr	r1, [pc, #212]	; (13bec <event_adv+0x13c>)
   13b18:	4838      	ldr	r0, [pc, #224]	; (13bfc <event_adv+0x14c>)
   13b1a:	1a5b      	subs	r3, r3, r1
   13b1c:	08db      	lsrs	r3, r3, #3
   13b1e:	f363 128f 	bfi	r2, r3, #6, #10
   13b22:	4935      	ldr	r1, [pc, #212]	; (13bf8 <event_adv+0x148>)
   13b24:	e7df      	b.n	13ae6 <event_adv+0x36>
	_radio.ticks_anchor = ticks_at_expire;
   13b26:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   13b28:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
   13b2c:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   13b2e:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
   13b32:	7526      	strb	r6, [r4, #20]
	_radio.ticker_id_prepare = 0;
   13b34:	7461      	strb	r1, [r4, #17]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   13b36:	74a3      	strb	r3, [r4, #18]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   13b38:	f7ff fe80 	bl	1383c <adv_scan_configure.constprop.32>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   13b3c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   13b40:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   13b44:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13b48:	f363 0202 	bfi	r2, r3, #0, #3
   13b4c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
   13b50:	f7ff f9fe 	bl	12f50 <adv_setup>
	if (ctrl_rl_enabled()) {
   13b54:	f009 f950 	bl	1cdf8 <ctrl_rl_enabled>
   13b58:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   13b5c:	b300      	cbz	r0, 13ba0 <event_adv+0xf0>
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   13b5e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   13b62:	bf14      	ite	ne
   13b64:	4630      	movne	r0, r6
   13b66:	2000      	moveq	r0, #0
		struct ll_filter *wl = ctrl_filter_get(true);
   13b68:	f008 ff04 	bl	1c974 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   13b6c:	1c82      	adds	r2, r0, #2
   13b6e:	7841      	ldrb	r1, [r0, #1]
   13b70:	7800      	ldrb	r0, [r0, #0]
   13b72:	f00a f827 	bl	1dbc4 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   13b76:	f105 0109 	add.w	r1, r5, #9
   13b7a:	68e2      	ldr	r2, [r4, #12]
   13b7c:	2001      	movs	r0, #1
   13b7e:	f00a f883 	bl	1dc88 <radio_tmr_start>
	radio_tmr_end_capture();
   13b82:	f00a f953 	bl	1de2c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   13b86:	462a      	mov	r2, r5
   13b88:	2105      	movs	r1, #5
   13b8a:	481d      	ldr	r0, [pc, #116]	; (13c00 <event_adv+0x150>)
   13b8c:	f7ff fe38 	bl	13800 <preempt_calc>
   13b90:	4605      	mov	r5, r0
   13b92:	b150      	cbz	r0, 13baa <event_adv+0xfa>
		_radio.state = STATE_STOP;
   13b94:	2304      	movs	r3, #4
   13b96:	7563      	strb	r3, [r4, #21]
}
   13b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   13b9c:	f009 bf72 	b.w	1da84 <radio_disable>
	if (_radio.advertiser.filter_policy) {
   13ba0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   13ba4:	d0e7      	beq.n	13b76 <event_adv+0xc6>
		struct ll_filter *wl = ctrl_filter_get(true);
   13ba6:	4630      	mov	r0, r6
   13ba8:	e7de      	b.n	13b68 <event_adv+0xb8>
		ticker_status =
   13baa:	4603      	mov	r3, r0
   13bac:	4a15      	ldr	r2, [pc, #84]	; (13c04 <event_adv+0x154>)
   13bae:	4601      	mov	r1, r0
   13bb0:	f7fd fc2a 	bl	11408 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13bb4:	f030 0302 	bics.w	r3, r0, #2
   13bb8:	d013      	beq.n	13be2 <event_adv+0x132>
   13bba:	4b0b      	ldr	r3, [pc, #44]	; (13be8 <event_adv+0x138>)
   13bbc:	681b      	ldr	r3, [r3, #0]
   13bbe:	075b      	lsls	r3, r3, #29
   13bc0:	d093      	beq.n	13aea <event_adv+0x3a>
   13bc2:	2301      	movs	r3, #1
   13bc4:	f04f 0200 	mov.w	r2, #0
   13bc8:	f363 0202 	bfi	r2, r3, #0, #3
   13bcc:	4907      	ldr	r1, [pc, #28]	; (13bec <event_adv+0x13c>)
   13bce:	4b08      	ldr	r3, [pc, #32]	; (13bf0 <event_adv+0x140>)
   13bd0:	480d      	ldr	r0, [pc, #52]	; (13c08 <event_adv+0x158>)
   13bd2:	1a5b      	subs	r3, r3, r1
   13bd4:	f365 02c5 	bfi	r2, r5, #3, #3
   13bd8:	08db      	lsrs	r3, r3, #3
   13bda:	f363 128f 	bfi	r2, r3, #6, #10
   13bde:	4906      	ldr	r1, [pc, #24]	; (13bf8 <event_adv+0x148>)
   13be0:	e781      	b.n	13ae6 <event_adv+0x36>
}
   13be2:	bd70      	pop	{r4, r5, r6, pc}
   13be4:	2000110c 	.word	0x2000110c
   13be8:	2000d72c 	.word	0x2000d72c
   13bec:	0002cff8 	.word	0x0002cff8
   13bf0:	0002d030 	.word	0x0002d030
   13bf4:	00030aee 	.word	0x00030aee
   13bf8:	0003079f 	.word	0x0003079f
   13bfc:	00030a11 	.word	0x00030a11
   13c00:	20001124 	.word	0x20001124
   13c04:	000129a5 	.word	0x000129a5
   13c08:	000309cf 	.word	0x000309cf

00013c0c <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   13c0c:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   13c0e:	4b05      	ldr	r3, [pc, #20]	; (13c24 <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13c10:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   13c12:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13c14:	4611      	mov	r1, r2
   13c16:	4610      	mov	r0, r2
   13c18:	f7fc fd2c 	bl	10674 <mayfly_enqueue>
	LL_ASSERT(!retval);
   13c1c:	b108      	cbz	r0, 13c22 <event_stop.constprop.33+0x16>
   13c1e:	f7fe feeb 	bl	129f8 <event_stop.part.11>
}
   13c22:	bd08      	pop	{r3, pc}
   13c24:	2000cfdc 	.word	0x2000cfdc

00013c28 <event_common_prepare>:
{
   13c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   13c2c:	6814      	ldr	r4, [r2, #0]
{
   13c2e:	b08d      	sub	sp, #52	; 0x34
   13c30:	469b      	mov	fp, r3
	if (_ticks_xtal_to_start & XON_BITMASK) {
   13c32:	2c00      	cmp	r4, #0
{
   13c34:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   13c38:	910b      	str	r1, [sp, #44]	; 0x2c
   13c3a:	4682      	mov	sl, r0
   13c3c:	4691      	mov	r9, r2
   13c3e:	930a      	str	r3, [sp, #40]	; 0x28
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   13c40:	f8db 6000 	ldr.w	r6, [fp]
	if (_ticks_xtal_to_start & XON_BITMASK) {
   13c44:	da03      	bge.n	13c4e <event_common_prepare+0x26>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
   13c46:	9c16      	ldr	r4, [sp, #88]	; 0x58
   13c48:	42b4      	cmp	r4, r6
   13c4a:	bf38      	it	cc
   13c4c:	4634      	movcc	r4, r6
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   13c4e:	42b4      	cmp	r4, r6
   13c50:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 13e28 <event_common_prepare+0x200>
   13c54:	d931      	bls.n	13cba <event_common_prepare+0x92>
		ticker_status =
   13c56:	f241 53ad 	movw	r3, #5549	; 0x15ad
   13c5a:	e9cd 8307 	strd	r8, r3, [sp, #28]
   13c5e:	4b68      	ldr	r3, [pc, #416]	; (13e00 <event_common_prepare+0x1d8>)
   13c60:	2500      	movs	r5, #0
   13c62:	e9cd 5304 	strd	r5, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   13c66:	1ba3      	subs	r3, r4, r6
		ticker_status =
   13c68:	9300      	str	r3, [sp, #0]
   13c6a:	9506      	str	r5, [sp, #24]
   13c6c:	4653      	mov	r3, sl
   13c6e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   13c72:	9501      	str	r5, [sp, #4]
   13c74:	2201      	movs	r2, #1
   13c76:	4629      	mov	r1, r5
   13c78:	4628      	mov	r0, r5
   13c7a:	f7fd fab9 	bl	111f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c7e:	f030 0302 	bics.w	r3, r0, #2
   13c82:	d041      	beq.n	13d08 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c84:	4b5f      	ldr	r3, [pc, #380]	; (13e04 <event_common_prepare+0x1dc>)
   13c86:	681b      	ldr	r3, [r3, #0]
   13c88:	0759      	lsls	r1, r3, #29
   13c8a:	d010      	beq.n	13cae <event_common_prepare+0x86>
   13c8c:	f04f 0200 	mov.w	r2, #0
   13c90:	2301      	movs	r3, #1
   13c92:	f363 0202 	bfi	r2, r3, #0, #3
   13c96:	f365 02c5 	bfi	r2, r5, #3, #3
   13c9a:	495b      	ldr	r1, [pc, #364]	; (13e08 <event_common_prepare+0x1e0>)
   13c9c:	4b5b      	ldr	r3, [pc, #364]	; (13e0c <event_common_prepare+0x1e4>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c9e:	485c      	ldr	r0, [pc, #368]	; (13e10 <event_common_prepare+0x1e8>)
   13ca0:	1a5b      	subs	r3, r3, r1
   13ca2:	08db      	lsrs	r3, r3, #3
   13ca4:	495b      	ldr	r1, [pc, #364]	; (13e14 <event_common_prepare+0x1ec>)
   13ca6:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(!retval);
   13caa:	f7ee f855 	bl	1d58 <log_1>
   13cae:	4040      	eors	r0, r0
   13cb0:	f380 8811 	msr	BASEPRI, r0
   13cb4:	f04f 0004 	mov.w	r0, #4
   13cb8:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   13cba:	d21e      	bcs.n	13cfa <event_common_prepare+0xd2>
		event_active(0, 0, 0, NULL);
   13cbc:	2300      	movs	r3, #0
   13cbe:	461a      	mov	r2, r3
   13cc0:	4619      	mov	r1, r3
   13cc2:	4618      	mov	r0, r3
   13cc4:	f7fe fece 	bl	12a64 <event_active>
		ticker_status =
   13cc8:	f241 53c2 	movw	r3, #5570	; 0x15c2
   13ccc:	e9cd 8307 	strd	r8, r3, [sp, #28]
   13cd0:	4b51      	ldr	r3, [pc, #324]	; (13e18 <event_common_prepare+0x1f0>)
   13cd2:	2500      	movs	r5, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   13cd4:	1b34      	subs	r4, r6, r4
		ticker_status =
   13cd6:	e9cd 5304 	strd	r5, r3, [sp, #16]
   13cda:	9506      	str	r5, [sp, #24]
   13cdc:	4653      	mov	r3, sl
   13cde:	e9cd 5502 	strd	r5, r5, [sp, #8]
   13ce2:	e9cd 4500 	strd	r4, r5, [sp]
   13ce6:	2201      	movs	r2, #1
   13ce8:	4629      	mov	r1, r5
   13cea:	4628      	mov	r0, r5
   13cec:	f7fd fa80 	bl	111f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13cf0:	f030 0302 	bics.w	r3, r0, #2
   13cf4:	d1c6      	bne.n	13c84 <event_common_prepare+0x5c>
   13cf6:	4634      	mov	r4, r6
   13cf8:	e00b      	b.n	13d12 <event_common_prepare+0xea>
		event_active(0, 0, 0, NULL);
   13cfa:	2300      	movs	r3, #0
   13cfc:	461a      	mov	r2, r3
   13cfe:	4619      	mov	r1, r3
   13d00:	4618      	mov	r0, r3
   13d02:	f7fe feaf 	bl	12a64 <event_active>
		event_xtal(0, 0, 0, NULL);
   13d06:	2300      	movs	r3, #0
   13d08:	461a      	mov	r2, r3
   13d0a:	4619      	mov	r1, r3
   13d0c:	4618      	mov	r0, r3
   13d0e:	f7fe fed9 	bl	12ac4 <event_xtal>
	_radio.remainder_anchor = remainder;
   13d12:	4f42      	ldr	r7, [pc, #264]	; (13e1c <event_common_prepare+0x1f4>)
   13d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13d16:	60fb      	str	r3, [r7, #12]
	ticker_status =
   13d18:	f241 53da 	movw	r3, #5594	; 0x15da
   13d1c:	e9cd 8307 	strd	r8, r3, [sp, #28]
   13d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13d22:	9306      	str	r3, [sp, #24]
   13d24:	2500      	movs	r5, #0
   13d26:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13d28:	9305      	str	r3, [sp, #20]
   13d2a:	e9cd 5503 	strd	r5, r5, [sp, #12]
   13d2e:	4653      	mov	r3, sl
   13d30:	e9cd 5501 	strd	r5, r5, [sp, #4]
   13d34:	9400      	str	r4, [sp, #0]
   13d36:	462a      	mov	r2, r5
   13d38:	4629      	mov	r1, r5
   13d3a:	4628      	mov	r0, r5
   13d3c:	f7fd fa58 	bl	111f0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13d40:	f030 0302 	bics.w	r3, r0, #2
   13d44:	d19e      	bne.n	13c84 <event_common_prepare+0x5c>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   13d46:	2005      	movs	r0, #5
   13d48:	f7ff ff60 	bl	13c0c <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   13d4c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   13d50:	42b3      	cmp	r3, r6
   13d52:	d030      	beq.n	13db6 <event_common_prepare+0x18e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
   13d54:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   13d58:	f8d9 3000 	ldr.w	r3, [r9]
   13d5c:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
   13d5e:	bfbc      	itt	lt
   13d60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   13d64:	f8c9 3000 	strlt.w	r3, [r9]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
   13d68:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
   13d6c:	f8d9 2000 	ldr.w	r2, [r9]
   13d70:	428a      	cmp	r2, r1
   13d72:	bf38      	it	cc
   13d74:	460a      	movcc	r2, r1
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   13d76:	b2a3      	uxth	r3, r4
   13d78:	b292      	uxth	r2, r2
		ticker_status =
   13d7a:	2400      	movs	r4, #0
   13d7c:	f241 6108 	movw	r1, #5640	; 0x1608
   13d80:	e9cd 2301 	strd	r2, r3, [sp, #4]
   13d84:	e9cd 8105 	strd	r8, r1, [sp, #20]
   13d88:	9200      	str	r2, [sp, #0]
   13d8a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   13d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13d90:	4621      	mov	r1, r4
   13d92:	4620      	mov	r0, r4
   13d94:	f7fd fa76 	bl	11284 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13d98:	f030 0302 	bics.w	r3, r0, #2
   13d9c:	d00b      	beq.n	13db6 <event_common_prepare+0x18e>
   13d9e:	4b19      	ldr	r3, [pc, #100]	; (13e04 <event_common_prepare+0x1dc>)
   13da0:	681b      	ldr	r3, [r3, #0]
   13da2:	075a      	lsls	r2, r3, #29
   13da4:	d083      	beq.n	13cae <event_common_prepare+0x86>
   13da6:	f04f 0200 	mov.w	r2, #0
   13daa:	2301      	movs	r3, #1
   13dac:	f363 0202 	bfi	r2, r3, #0, #3
   13db0:	f364 02c5 	bfi	r2, r4, #3, #3
   13db4:	e771      	b.n	13c9a <event_common_prepare+0x72>
	packet_tx_enqueue(0xFF);
   13db6:	20ff      	movs	r0, #255	; 0xff
   13db8:	f7fe ff76 	bl	12ca8 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   13dbc:	4b18      	ldr	r3, [pc, #96]	; (13e20 <event_common_prepare+0x1f8>)
   13dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13dc0:	609a      	str	r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13dc2:	2201      	movs	r2, #1
   13dc4:	4611      	mov	r1, r2
   13dc6:	2000      	movs	r0, #0
   13dc8:	f7fc fc54 	bl	10674 <mayfly_enqueue>
		LL_ASSERT(!retval);
   13dcc:	b1a0      	cbz	r0, 13df8 <event_common_prepare+0x1d0>
   13dce:	4b0d      	ldr	r3, [pc, #52]	; (13e04 <event_common_prepare+0x1dc>)
   13dd0:	681b      	ldr	r3, [r3, #0]
   13dd2:	075b      	lsls	r3, r3, #29
   13dd4:	f43f af6b 	beq.w	13cae <event_common_prepare+0x86>
   13dd8:	2301      	movs	r3, #1
   13dda:	f04f 0200 	mov.w	r2, #0
   13dde:	f363 0202 	bfi	r2, r3, #0, #3
   13de2:	4909      	ldr	r1, [pc, #36]	; (13e08 <event_common_prepare+0x1e0>)
   13de4:	4b09      	ldr	r3, [pc, #36]	; (13e0c <event_common_prepare+0x1e4>)
   13de6:	480f      	ldr	r0, [pc, #60]	; (13e24 <event_common_prepare+0x1fc>)
   13de8:	1a5b      	subs	r3, r3, r1
   13dea:	f36f 02c5 	bfc	r2, #3, #3
   13dee:	08db      	lsrs	r3, r3, #3
   13df0:	f363 128f 	bfi	r2, r3, #6, #10
   13df4:	4907      	ldr	r1, [pc, #28]	; (13e14 <event_common_prepare+0x1ec>)
   13df6:	e758      	b.n	13caa <event_common_prepare+0x82>
}
   13df8:	b00d      	add	sp, #52	; 0x34
   13dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dfe:	bf00      	nop
   13e00:	00012a65 	.word	0x00012a65
   13e04:	2000d72c 	.word	0x2000d72c
   13e08:	0002cff8 	.word	0x0002cff8
   13e0c:	0002d030 	.word	0x0002d030
   13e10:	000309cf 	.word	0x000309cf
   13e14:	00030759 	.word	0x00030759
   13e18:	00012ac5 	.word	0x00012ac5
   13e1c:	2000110c 	.word	0x2000110c
   13e20:	2000d09c 	.word	0x2000d09c
   13e24:	0003103a 	.word	0x0003103a
   13e28:	00012715 	.word	0x00012715

00013e2c <radio_event_adv_prepare>:
{
   13e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   13e2e:	4a17      	ldr	r2, [pc, #92]	; (13e8c <radio_event_adv_prepare+0x60>)
   13e30:	7c53      	ldrb	r3, [r2, #17]
   13e32:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   13e36:	b1d3      	cbz	r3, 13e6e <radio_event_adv_prepare+0x42>
   13e38:	4b15      	ldr	r3, [pc, #84]	; (13e90 <radio_event_adv_prepare+0x64>)
   13e3a:	681b      	ldr	r3, [r3, #0]
   13e3c:	075b      	lsls	r3, r3, #29
   13e3e:	d010      	beq.n	13e62 <radio_event_adv_prepare+0x36>
   13e40:	2301      	movs	r3, #1
   13e42:	f04f 0200 	mov.w	r2, #0
   13e46:	f363 0202 	bfi	r2, r3, #0, #3
   13e4a:	4912      	ldr	r1, [pc, #72]	; (13e94 <radio_event_adv_prepare+0x68>)
   13e4c:	4b12      	ldr	r3, [pc, #72]	; (13e98 <radio_event_adv_prepare+0x6c>)
   13e4e:	4813      	ldr	r0, [pc, #76]	; (13e9c <radio_event_adv_prepare+0x70>)
   13e50:	1a5b      	subs	r3, r3, r1
   13e52:	f36f 02c5 	bfc	r2, #3, #3
   13e56:	08db      	lsrs	r3, r3, #3
   13e58:	f363 128f 	bfi	r2, r3, #6, #10
   13e5c:	4910      	ldr	r1, [pc, #64]	; (13ea0 <radio_event_adv_prepare+0x74>)
   13e5e:	f7ed ff7b 	bl	1d58 <log_1>
   13e62:	4040      	eors	r0, r0
   13e64:	f380 8811 	msr	BASEPRI, r0
   13e68:	f04f 0004 	mov.w	r0, #4
   13e6c:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   13e6e:	2305      	movs	r3, #5
   13e70:	7453      	strb	r3, [r2, #17]
	event_common_prepare(ticks_at_expire, remainder,
   13e72:	9403      	str	r4, [sp, #12]
   13e74:	4c0b      	ldr	r4, [pc, #44]	; (13ea4 <radio_event_adv_prepare+0x78>)
   13e76:	e9cd 3401 	strd	r3, r4, [sp, #4]
   13e7a:	6a13      	ldr	r3, [r2, #32]
   13e7c:	9300      	str	r3, [sp, #0]
   13e7e:	f102 031c 	add.w	r3, r2, #28
   13e82:	3218      	adds	r2, #24
   13e84:	f7ff fed0 	bl	13c28 <event_common_prepare>
}
   13e88:	b004      	add	sp, #16
   13e8a:	bd10      	pop	{r4, pc}
   13e8c:	2000110c 	.word	0x2000110c
   13e90:	2000d72c 	.word	0x2000d72c
   13e94:	0002cff8 	.word	0x0002cff8
   13e98:	0002d030 	.word	0x0002d030
   13e9c:	0003112e 	.word	0x0003112e
   13ea0:	00030787 	.word	0x00030787
   13ea4:	00013ab1 	.word	0x00013ab1

00013ea8 <event_scan_prepare>:
{
   13ea8:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   13eaa:	4c30      	ldr	r4, [pc, #192]	; (13f6c <event_scan_prepare+0xc4>)
   13eac:	7c63      	ldrb	r3, [r4, #17]
{
   13eae:	b085      	sub	sp, #20
   13eb0:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   13eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   13eb6:	b1d3      	cbz	r3, 13eee <event_scan_prepare+0x46>
   13eb8:	4b2d      	ldr	r3, [pc, #180]	; (13f70 <event_scan_prepare+0xc8>)
   13eba:	681b      	ldr	r3, [r3, #0]
   13ebc:	075a      	lsls	r2, r3, #29
   13ebe:	d010      	beq.n	13ee2 <event_scan_prepare+0x3a>
   13ec0:	2301      	movs	r3, #1
   13ec2:	f04f 0200 	mov.w	r2, #0
   13ec6:	f363 0202 	bfi	r2, r3, #0, #3
   13eca:	492a      	ldr	r1, [pc, #168]	; (13f74 <event_scan_prepare+0xcc>)
   13ecc:	4b2a      	ldr	r3, [pc, #168]	; (13f78 <event_scan_prepare+0xd0>)
   13ece:	482b      	ldr	r0, [pc, #172]	; (13f7c <event_scan_prepare+0xd4>)
   13ed0:	1a5b      	subs	r3, r3, r1
   13ed2:	f36f 02c5 	bfc	r2, #3, #3
   13ed6:	08db      	lsrs	r3, r3, #3
   13ed8:	4929      	ldr	r1, [pc, #164]	; (13f80 <event_scan_prepare+0xd8>)
   13eda:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(!retval);
   13ede:	f7ed ff3b 	bl	1d58 <log_1>
   13ee2:	4040      	eors	r0, r0
   13ee4:	f380 8811 	msr	BASEPRI, r0
   13ee8:	f04f 0004 	mov.w	r0, #4
   13eec:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   13eee:	9203      	str	r2, [sp, #12]
   13ef0:	4a24      	ldr	r2, [pc, #144]	; (13f84 <event_scan_prepare+0xdc>)
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   13ef2:	2306      	movs	r3, #6
	event_common_prepare(ticks_at_expire, remainder,
   13ef4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   13ef8:	7463      	strb	r3, [r4, #17]
	event_common_prepare(ticks_at_expire, remainder,
   13efa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   13efe:	9300      	str	r3, [sp, #0]
   13f00:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   13f04:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
   13f08:	f7ff fe8e 	bl	13c28 <event_common_prepare>
	if (_radio.scanner.conn) {
   13f0c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   13f10:	b353      	cbz	r3, 13f68 <event_scan_prepare+0xc0>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
   13f12:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   13f16:	2b00      	cmp	r3, #0
   13f18:	da0a      	bge.n	13f30 <event_scan_prepare+0x88>
			u32_t ticks_prepare_to_start =
   13f1a:	e9d4 2135 	ldrd	r2, r1, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
   13f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
   13f22:	4291      	cmp	r1, r2
   13f24:	bf2c      	ite	cs
   13f26:	ebc3 0301 	rsbcs	r3, r3, r1
   13f2a:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   13f2e:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
   13f30:	4b15      	ldr	r3, [pc, #84]	; (13f88 <event_scan_prepare+0xe0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13f32:	2201      	movs	r2, #1
   13f34:	4611      	mov	r1, r2
   13f36:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
   13f38:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13f3a:	f7fc fb9b 	bl	10674 <mayfly_enqueue>
		LL_ASSERT(!retval);
   13f3e:	b198      	cbz	r0, 13f68 <event_scan_prepare+0xc0>
   13f40:	4b0b      	ldr	r3, [pc, #44]	; (13f70 <event_scan_prepare+0xc8>)
   13f42:	681b      	ldr	r3, [r3, #0]
   13f44:	075b      	lsls	r3, r3, #29
   13f46:	d0cc      	beq.n	13ee2 <event_scan_prepare+0x3a>
   13f48:	2301      	movs	r3, #1
   13f4a:	f04f 0200 	mov.w	r2, #0
   13f4e:	f363 0202 	bfi	r2, r3, #0, #3
   13f52:	4908      	ldr	r1, [pc, #32]	; (13f74 <event_scan_prepare+0xcc>)
   13f54:	4b08      	ldr	r3, [pc, #32]	; (13f78 <event_scan_prepare+0xd0>)
   13f56:	480d      	ldr	r0, [pc, #52]	; (13f8c <event_scan_prepare+0xe4>)
   13f58:	1a5b      	subs	r3, r3, r1
   13f5a:	f36f 02c5 	bfc	r2, #3, #3
   13f5e:	08db      	lsrs	r3, r3, #3
   13f60:	f363 128f 	bfi	r2, r3, #6, #10
   13f64:	4906      	ldr	r1, [pc, #24]	; (13f80 <event_scan_prepare+0xd8>)
   13f66:	e7ba      	b.n	13ede <event_scan_prepare+0x36>
}
   13f68:	b005      	add	sp, #20
   13f6a:	bd30      	pop	{r4, r5, pc}
   13f6c:	2000110c 	.word	0x2000110c
   13f70:	2000d72c 	.word	0x2000d72c
   13f74:	0002cff8 	.word	0x0002cff8
   13f78:	0002d030 	.word	0x0002d030
   13f7c:	0003112e 	.word	0x0003112e
   13f80:	000307f9 	.word	0x000307f9
   13f84:	00013891 	.word	0x00013891
   13f88:	2000d00c 	.word	0x2000d00c
   13f8c:	0003103a 	.word	0x0003103a

00013f90 <event_adv_stop>:
{
   13f90:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   13f92:	2005      	movs	r0, #5
   13f94:	f7ff fe3a 	bl	13c0c <event_stop.constprop.33>
	ticker_status =
   13f98:	f641 1311 	movw	r3, #6417	; 0x1911
   13f9c:	2100      	movs	r1, #0
   13f9e:	9300      	str	r3, [sp, #0]
   13fa0:	2205      	movs	r2, #5
   13fa2:	4b12      	ldr	r3, [pc, #72]	; (13fec <event_adv_stop+0x5c>)
   13fa4:	4608      	mov	r0, r1
   13fa6:	f7fd f9b7 	bl	11318 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13faa:	f030 0302 	bics.w	r3, r0, #2
   13fae:	d01a      	beq.n	13fe6 <event_adv_stop+0x56>
   13fb0:	4b0f      	ldr	r3, [pc, #60]	; (13ff0 <event_adv_stop+0x60>)
   13fb2:	681b      	ldr	r3, [r3, #0]
   13fb4:	075b      	lsls	r3, r3, #29
   13fb6:	d010      	beq.n	13fda <event_adv_stop+0x4a>
   13fb8:	2301      	movs	r3, #1
   13fba:	f04f 0200 	mov.w	r2, #0
   13fbe:	f363 0202 	bfi	r2, r3, #0, #3
   13fc2:	490c      	ldr	r1, [pc, #48]	; (13ff4 <event_adv_stop+0x64>)
   13fc4:	4b0c      	ldr	r3, [pc, #48]	; (13ff8 <event_adv_stop+0x68>)
   13fc6:	480d      	ldr	r0, [pc, #52]	; (13ffc <event_adv_stop+0x6c>)
   13fc8:	1a5b      	subs	r3, r3, r1
   13fca:	f36f 02c5 	bfc	r2, #3, #3
   13fce:	08db      	lsrs	r3, r3, #3
   13fd0:	f363 128f 	bfi	r2, r3, #6, #10
   13fd4:	490a      	ldr	r1, [pc, #40]	; (14000 <event_adv_stop+0x70>)
   13fd6:	f7ed febf 	bl	1d58 <log_1>
   13fda:	4040      	eors	r0, r0
   13fdc:	f380 8811 	msr	BASEPRI, r0
   13fe0:	f04f 0004 	mov.w	r0, #4
   13fe4:	df02      	svc	2
}
   13fe6:	b003      	add	sp, #12
   13fe8:	f85d fb04 	ldr.w	pc, [sp], #4
   13fec:	00013025 	.word	0x00013025
   13ff0:	2000d72c 	.word	0x2000d72c
   13ff4:	0002cff8 	.word	0x0002cff8
   13ff8:	0002d030 	.word	0x0002d030
   13ffc:	000309cf 	.word	0x000309cf
   14000:	000307ea 	.word	0x000307ea

00014004 <entropy_get_entropy_isr.constprop.35>:
					  u16_t length,
					  u32_t flags)
{
	const struct entropy_driver_api *api = dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   14004:	6843      	ldr	r3, [r0, #4]
static inline int entropy_get_entropy_isr(struct device *dev,
   14006:	b410      	push	{r4}
	if (unlikely(!api->get_entropy_isr)) {
   14008:	685c      	ldr	r4, [r3, #4]
   1400a:	b11c      	cbz	r4, 14014 <entropy_get_entropy_isr.constprop.35+0x10>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1400c:	46a4      	mov	ip, r4
   1400e:	2300      	movs	r3, #0
}
   14010:	bc10      	pop	{r4}
	return api->get_entropy_isr(dev, buffer, length, flags);
   14012:	4760      	bx	ip
}
   14014:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14018:	bc10      	pop	{r4}
   1401a:	4770      	bx	lr

0001401c <k32src_wait>:
{
   1401c:	b538      	push	{r3, r4, r5, lr}
	if (!_radio.is_k32src_stable) {
   1401e:	4b17      	ldr	r3, [pc, #92]	; (1407c <k32src_wait+0x60>)
   14020:	7c1a      	ldrb	r2, [r3, #16]
   14022:	bb4a      	cbnz	r2, 14078 <k32src_wait+0x5c>
		_radio.is_k32src_stable = 1;
   14024:	2501      	movs	r5, #1
		clk_k32 = device_get_binding(DRV_NAME);
   14026:	4816      	ldr	r0, [pc, #88]	; (14080 <k32src_wait+0x64>)
		_radio.is_k32src_stable = 1;
   14028:	741d      	strb	r5, [r3, #16]
		clk_k32 = device_get_binding(DRV_NAME);
   1402a:	f017 fb4b 	bl	2b6c4 <device_get_binding>
		LL_ASSERT(clk_k32);
   1402e:	4604      	mov	r4, r0
   14030:	b9d8      	cbnz	r0, 1406a <k32src_wait+0x4e>
   14032:	4b14      	ldr	r3, [pc, #80]	; (14084 <k32src_wait+0x68>)
   14034:	681b      	ldr	r3, [r3, #0]
   14036:	075b      	lsls	r3, r3, #29
   14038:	d00f      	beq.n	1405a <k32src_wait+0x3e>
   1403a:	4913      	ldr	r1, [pc, #76]	; (14088 <k32src_wait+0x6c>)
   1403c:	4b13      	ldr	r3, [pc, #76]	; (1408c <k32src_wait+0x70>)
   1403e:	f04f 0200 	mov.w	r2, #0
   14042:	1a5b      	subs	r3, r3, r1
   14044:	f365 0202 	bfi	r2, r5, #0, #3
   14048:	f360 02c5 	bfi	r2, r0, #3, #3
   1404c:	08db      	lsrs	r3, r3, #3
   1404e:	f363 128f 	bfi	r2, r3, #6, #10
   14052:	490f      	ldr	r1, [pc, #60]	; (14090 <k32src_wait+0x74>)
   14054:	480f      	ldr	r0, [pc, #60]	; (14094 <k32src_wait+0x78>)
   14056:	f7ed fe7f 	bl	1d58 <log_1>
   1405a:	4040      	eors	r0, r0
   1405c:	f380 8811 	msr	BASEPRI, r0
   14060:	f04f 0004 	mov.w	r0, #4
   14064:	df02      	svc	2
			cpu_sleep();
   14066:	f7fd fa5f 	bl	11528 <cpu_sleep>
   1406a:	6863      	ldr	r3, [r4, #4]
   1406c:	2101      	movs	r1, #1
   1406e:	681b      	ldr	r3, [r3, #0]
   14070:	4620      	mov	r0, r4
   14072:	4798      	blx	r3
		while (clock_control_on(clk_k32, (void *)K32SRC)) {
   14074:	2800      	cmp	r0, #0
   14076:	d1f6      	bne.n	14066 <k32src_wait+0x4a>
}
   14078:	bd38      	pop	{r3, r4, r5, pc}
   1407a:	bf00      	nop
   1407c:	2000110c 	.word	0x2000110c
   14080:	0002e3a8 	.word	0x0002e3a8
   14084:	2000d72c 	.word	0x2000d72c
   14088:	0002cff8 	.word	0x0002cff8
   1408c:	0002d030 	.word	0x0002d030
   14090:	00030699 	.word	0x00030699
   14094:	00030e6c 	.word	0x00030e6c

00014098 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   14098:	4b02      	ldr	r3, [pc, #8]	; (140a4 <mayfly_xtal_stop+0xc>)
   1409a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
   1409c:	6843      	ldr	r3, [r0, #4]
   1409e:	2100      	movs	r1, #0
   140a0:	685b      	ldr	r3, [r3, #4]
   140a2:	4718      	bx	r3
   140a4:	2000110c 	.word	0x2000110c

000140a8 <chan_sel_2>:
{
   140a8:	b4f0      	push	{r4, r5, r6, r7}
	prn_e = counter ^ chan_id;
   140aa:	4048      	eors	r0, r1
   140ac:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   140ae:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   140b2:	2608      	movs	r6, #8
	o = 0;
   140b4:	2400      	movs	r4, #0
		o |= (i & 1);
   140b6:	f00c 0501 	and.w	r5, ip, #1
   140ba:	3e01      	subs	r6, #1
   140bc:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
   140c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
   140c4:	b2ec      	uxtb	r4, r5
		i >>= 1;
   140c6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   140ca:	d1f4      	bne.n	140b6 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   140cc:	0225      	lsls	r5, r4, #8
   140ce:	b22d      	sxth	r5, r5
   140d0:	b2c0      	uxtb	r0, r0
   140d2:	f04f 0c08 	mov.w	ip, #8
	o = 0;
   140d6:	4634      	mov	r4, r6
		o |= (i & 1);
   140d8:	f000 0601 	and.w	r6, r0, #1
   140dc:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
   140e0:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
   140e4:	f016 0cff 	ands.w	ip, r6, #255	; 0xff
		o |= (i & 1);
   140e8:	b2e4      	uxtb	r4, r4
		i >>= 1;
   140ea:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   140ee:	d1f3      	bne.n	140d8 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   140f0:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
   140f2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
   140f6:	3f01      	subs	r7, #1
   140f8:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
   140fa:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
   140fe:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
   14100:	d1d5      	bne.n	140ae <chan_sel_2+0x6>
	chan_next = prn_e % 37;
   14102:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
   14104:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   14106:	fbb1 f0f4 	udiv	r0, r1, r4
   1410a:	fb04 1010 	mls	r0, r4, r0, r1
   1410e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   14110:	08c4      	lsrs	r4, r0, #3
   14112:	f000 0507 	and.w	r5, r0, #7
   14116:	5d14      	ldrb	r4, [r2, r4]
   14118:	412c      	asrs	r4, r5
   1411a:	07e4      	lsls	r4, r4, #31
   1411c:	d405      	bmi.n	1412a <chan_sel_2+0x82>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   1411e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
   14120:	0c09      	lsrs	r1, r1, #16
   14122:	4610      	mov	r0, r2
}
   14124:	bcf0      	pop	{r4, r5, r6, r7}
		chan_next = chan_sel_remap(chan_map, chan_index);
   14126:	f7fd ba37 	b.w	11598 <chan_sel_remap>
}
   1412a:	bcf0      	pop	{r4, r5, r6, r7}
   1412c:	4770      	bx	lr
	...

00014130 <connection_configure>:
{
   14130:	b510      	push	{r4, lr}
   14132:	4604      	mov	r4, r0
	radio_reset();
   14134:	f009 fbf2 	bl	1d91c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14138:	2000      	movs	r0, #0
   1413a:	f009 fc19 	bl	1d970 <radio_tx_power_set>
	radio_isr_set(isr);
   1413e:	480a      	ldr	r0, [pc, #40]	; (14168 <connection_configure+0x38>)
   14140:	f009 fbb6 	bl	1d8b0 <radio_isr_set>
	radio_aa_set(conn->access_addr);
   14144:	f104 0010 	add.w	r0, r4, #16
   14148:	f009 fc30 	bl	1d9ac <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   1414c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   1414e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   14150:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   14152:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   14156:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14158:	f240 605b 	movw	r0, #1627	; 0x65b
   1415c:	4319      	orrs	r1, r3
}
   1415e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14162:	f009 bccb 	b.w	1dafc <radio_crc_configure>
   14166:	bf00      	nop
   14168:	00016f41 	.word	0x00016f41

0001416c <event_slave>:
{
   1416c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14170:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   14172:	4b82      	ldr	r3, [pc, #520]	; (1437c <event_slave+0x210>)
   14174:	7d1a      	ldrb	r2, [r3, #20]
{
   14176:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   14178:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   1417c:	461d      	mov	r5, r3
   1417e:	b1d2      	cbz	r2, 141b6 <event_slave+0x4a>
   14180:	4b7f      	ldr	r3, [pc, #508]	; (14380 <event_slave+0x214>)
   14182:	681b      	ldr	r3, [r3, #0]
   14184:	075d      	lsls	r5, r3, #29
   14186:	d010      	beq.n	141aa <event_slave+0x3e>
   14188:	2301      	movs	r3, #1
   1418a:	f04f 0200 	mov.w	r2, #0
   1418e:	f363 0202 	bfi	r2, r3, #0, #3
   14192:	497c      	ldr	r1, [pc, #496]	; (14384 <event_slave+0x218>)
   14194:	4b7c      	ldr	r3, [pc, #496]	; (14388 <event_slave+0x21c>)
   14196:	487d      	ldr	r0, [pc, #500]	; (1438c <event_slave+0x220>)
   14198:	1a5b      	subs	r3, r3, r1
   1419a:	f36f 02c5 	bfc	r2, #3, #3
   1419e:	08db      	lsrs	r3, r3, #3
   141a0:	497b      	ldr	r1, [pc, #492]	; (14390 <event_slave+0x224>)
   141a2:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   141a6:	f7ed fdd7 	bl	1d58 <log_1>
   141aa:	4040      	eors	r0, r0
   141ac:	f380 8811 	msr	BASEPRI, r0
   141b0:	f04f 0004 	mov.w	r0, #4
   141b4:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   141b6:	7c5b      	ldrb	r3, [r3, #17]
   141b8:	8c22      	ldrh	r2, [r4, #32]
   141ba:	b2db      	uxtb	r3, r3
   141bc:	3207      	adds	r2, #7
   141be:	4293      	cmp	r3, r2
   141c0:	d013      	beq.n	141ea <event_slave+0x7e>
   141c2:	4b6f      	ldr	r3, [pc, #444]	; (14380 <event_slave+0x214>)
   141c4:	681b      	ldr	r3, [r3, #0]
   141c6:	075c      	lsls	r4, r3, #29
   141c8:	d0ef      	beq.n	141aa <event_slave+0x3e>
   141ca:	2301      	movs	r3, #1
   141cc:	f04f 0200 	mov.w	r2, #0
   141d0:	f363 0202 	bfi	r2, r3, #0, #3
   141d4:	496b      	ldr	r1, [pc, #428]	; (14384 <event_slave+0x218>)
   141d6:	4b6c      	ldr	r3, [pc, #432]	; (14388 <event_slave+0x21c>)
   141d8:	486e      	ldr	r0, [pc, #440]	; (14394 <event_slave+0x228>)
   141da:	1a5b      	subs	r3, r3, r1
   141dc:	f366 02c5 	bfi	r2, r6, #3, #3
   141e0:	08db      	lsrs	r3, r3, #3
   141e2:	f363 128f 	bfi	r2, r3, #6, #10
   141e6:	496a      	ldr	r1, [pc, #424]	; (14390 <event_slave+0x224>)
   141e8:	e7dd      	b.n	141a6 <event_slave+0x3a>
	_radio.packet_counter = 0;
   141ea:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	_radio.role = ROLE_SLAVE;
   141ee:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   141f0:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
   141f2:	752a      	strb	r2, [r5, #20]
	_radio.ticker_id_prepare = 0;
   141f4:	746e      	strb	r6, [r5, #17]
	_radio.ticker_id_event =
   141f6:	74ab      	strb	r3, [r5, #18]
	conn->latency_event = conn->latency_prepare;
   141f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   141fa:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
   141fe:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
   14200:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
   14202:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
   14204:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
   14206:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
   14208:	756a      	strb	r2, [r5, #21]
	connection_configure(conn);
   1420a:	f7ff ff91 	bl	14130 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   1420e:	2096      	movs	r0, #150	; 0x96
   14210:	f009 fd2e 	bl	1dc70 <radio_tmr_tifs_set>
				     conn->phy_flags);
   14214:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   14218:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1421c:	09d3      	lsrs	r3, r2, #7
   1421e:	4631      	mov	r1, r6
   14220:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   14224:	f000 0007 	and.w	r0, r0, #7
   14228:	f009 fc92 	bl	1db50 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1422c:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
   14230:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   14234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   14238:	4620      	mov	r0, r4
   1423a:	3108      	adds	r1, #8
   1423c:	f7fd fe16 	bl	11e6c <rx_packet_set>
	if (conn->data_chan_sel) {
   14240:	7f63      	ldrb	r3, [r4, #29]
   14242:	0658      	lsls	r0, r3, #25
   14244:	f104 0217 	add.w	r2, r4, #23
   14248:	d559      	bpl.n	142fe <event_slave+0x192>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1424a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1424c:	8be1      	ldrh	r1, [r4, #30]
   1424e:	3801      	subs	r0, #1
   14250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14254:	b280      	uxth	r0, r0
   14256:	f7ff ff27 	bl	140a8 <chan_sel_2>
	chan_set(data_chan_use);
   1425a:	f7fe fe37 	bl	12ecc <chan_set>
	conn->slave.window_widening_event_us +=
   1425e:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
   14262:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
   14264:	2200      	movs	r2, #0
   14266:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   14268:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
   1426a:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
   1426c:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   1426e:	bf88      	it	hi
   14270:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
   14272:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
   14276:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
   14278:	4413      	add	r3, r2
   1427a:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   1427c:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
   1427e:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   14280:	f107 0109 	add.w	r1, r7, #9
   14284:	4630      	mov	r0, r6
   14286:	f009 fcff 	bl	1dc88 <radio_tmr_start>
   1428a:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   1428c:	f009 fd9a 	bl	1ddc4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   14290:	4630      	mov	r0, r6
   14292:	f009 fdb9 	bl	1de08 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   14296:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   14298:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1429a:	f103 0650 	add.w	r6, r3, #80	; 0x50
   1429e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   142a2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   142a6:	2101      	movs	r1, #1
   142a8:	f000 0007 	and.w	r0, r0, #7
   142ac:	f009 fbd7 	bl	1da5e <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   142b0:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   142b2:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
   142b4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   142b8:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   142bc:	2802      	cmp	r0, #2
   142be:	d03e      	beq.n	1433e <event_slave+0x1d2>
		return 40;
   142c0:	2804      	cmp	r0, #4
   142c2:	bf0c      	ite	eq
   142c4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   142c8:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   142ca:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
   142cc:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   142ce:	f009 fbc8 	bl	1da62 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   142d2:	4430      	add	r0, r6
   142d4:	f009 fd58 	bl	1dd88 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   142d8:	f894 1020 	ldrb.w	r1, [r4, #32]
   142dc:	3107      	adds	r1, #7
   142de:	4620      	mov	r0, r4
   142e0:	463a      	mov	r2, r7
   142e2:	b2c9      	uxtb	r1, r1
   142e4:	f7ff fa8c 	bl	13800 <preempt_calc>
   142e8:	4604      	mov	r4, r0
   142ea:	b350      	cbz	r0, 14342 <event_slave+0x1d6>
		_radio.state = STATE_STOP;
   142ec:	2304      	movs	r3, #4
   142ee:	756b      	strb	r3, [r5, #21]
		radio_disable();
   142f0:	f009 fbc8 	bl	1da84 <radio_disable>
	packet_tx_enqueue(2);
   142f4:	2002      	movs	r0, #2
}
   142f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
   142fa:	f7fe bcd5 	b.w	12ca8 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   142fe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   14300:	7fa6      	ldrb	r6, [r4, #30]
   14302:	fb01 6606 	mla	r6, r1, r6, r6
   14306:	7fe1      	ldrb	r1, [r4, #31]
   14308:	2025      	movs	r0, #37	; 0x25
   1430a:	440e      	add	r6, r1
   1430c:	fb96 f1f0 	sdiv	r1, r6, r0
   14310:	fb00 6611 	mls	r6, r0, r1, r6
   14314:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   14316:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   14318:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1431a:	5c51      	ldrb	r1, [r2, r1]
   1431c:	f006 0607 	and.w	r6, r6, #7
   14320:	fa41 f606 	asr.w	r6, r1, r6
   14324:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   14326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1432a:	d496      	bmi.n	1425a <event_slave+0xee>
		chan_index = chan_next % chan_count;
   1432c:	fbb0 f1f3 	udiv	r1, r0, r3
   14330:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   14334:	b2c9      	uxtb	r1, r1
   14336:	4610      	mov	r0, r2
   14338:	f7fd f92e 	bl	11598 <chan_sel_remap>
   1433c:	e78d      	b.n	1425a <event_slave+0xee>
		return 24;
   1433e:	2318      	movs	r3, #24
   14340:	e7c3      	b.n	142ca <event_slave+0x15e>
		ticker_status =
   14342:	4603      	mov	r3, r0
   14344:	4a14      	ldr	r2, [pc, #80]	; (14398 <event_slave+0x22c>)
   14346:	4601      	mov	r1, r0
   14348:	f7fd f85e 	bl	11408 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1434c:	f030 0302 	bics.w	r3, r0, #2
   14350:	d0d0      	beq.n	142f4 <event_slave+0x188>
   14352:	4b0b      	ldr	r3, [pc, #44]	; (14380 <event_slave+0x214>)
   14354:	681b      	ldr	r3, [r3, #0]
   14356:	075b      	lsls	r3, r3, #29
   14358:	f43f af27 	beq.w	141aa <event_slave+0x3e>
   1435c:	2301      	movs	r3, #1
   1435e:	f04f 0200 	mov.w	r2, #0
   14362:	f363 0202 	bfi	r2, r3, #0, #3
   14366:	4907      	ldr	r1, [pc, #28]	; (14384 <event_slave+0x218>)
   14368:	4b07      	ldr	r3, [pc, #28]	; (14388 <event_slave+0x21c>)
   1436a:	480c      	ldr	r0, [pc, #48]	; (1439c <event_slave+0x230>)
   1436c:	1a5b      	subs	r3, r3, r1
   1436e:	f364 02c5 	bfi	r2, r4, #3, #3
   14372:	08db      	lsrs	r3, r3, #3
   14374:	f363 128f 	bfi	r2, r3, #6, #10
   14378:	4905      	ldr	r1, [pc, #20]	; (14390 <event_slave+0x224>)
   1437a:	e714      	b.n	141a6 <event_slave+0x3a>
   1437c:	2000110c 	.word	0x2000110c
   14380:	2000d72c 	.word	0x2000d72c
   14384:	0002cff8 	.word	0x0002cff8
   14388:	0002d030 	.word	0x0002d030
   1438c:	00030aee 	.word	0x00030aee
   14390:	000308cb 	.word	0x000308cb
   14394:	00030b7d 	.word	0x00030b7d
   14398:	000129a5 	.word	0x000129a5
   1439c:	000309cf 	.word	0x000309cf

000143a0 <ctrl_tx_enqueue>:
{
   143a0:	b510      	push	{r4, lr}
	    !conn->empty &&
   143a2:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   143a6:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
   143aa:	f014 0f80 	tst.w	r4, #128	; 0x80
   143ae:	d118      	bne.n	143e2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   143b0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
   143b4:	b1ab      	cbz	r3, 143e2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   143b6:	0724      	lsls	r4, r4, #28
   143b8:	d413      	bmi.n	143e2 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   143ba:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
   143be:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   143c0:	bf04      	itt	eq
   143c2:	681c      	ldreq	r4, [r3, #0]
   143c4:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
   143c8:	b992      	cbnz	r2, 143f0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   143ca:	681a      	ldr	r2, [r3, #0]
   143cc:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   143ce:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   143d0:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
   143d4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
   143d8:	680b      	ldr	r3, [r1, #0]
   143da:	b90b      	cbnz	r3, 143e0 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   143dc:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
}
   143e0:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   143e2:	b92a      	cbnz	r2, 143f0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   143e4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   143e8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   143ea:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   143ee:	e7ef      	b.n	143d0 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   143f0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   143f4:	681a      	ldr	r2, [r3, #0]
   143f6:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   143f8:	6019      	str	r1, [r3, #0]
   143fa:	e7eb      	b.n	143d4 <ctrl_tx_enqueue+0x34>

000143fc <ctrl_tx_sec_enqueue>:
{
   143fc:	b410      	push	{r4}
	if (conn->pause_tx) {
   143fe:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   14402:	0724      	lsls	r4, r4, #28
{
   14404:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   14406:	d50f      	bpl.n	14428 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   14408:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
   1440c:	b931      	cbnz	r1, 1441c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   1440e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   14412:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   14414:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
   14418:	bc10      	pop	{r4}
   1441a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   1441c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   14420:	6819      	ldr	r1, [r3, #0]
   14422:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   14424:	601a      	str	r2, [r3, #0]
   14426:	e7f7      	b.n	14418 <ctrl_tx_sec_enqueue+0x1c>
}
   14428:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   1442a:	f7ff bfb9 	b.w	143a0 <ctrl_tx_enqueue>
	...

00014430 <feature_rsp_send>:
{
   14430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14432:	4f21      	ldr	r7, [pc, #132]	; (144b8 <feature_rsp_send+0x88>)
{
   14434:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14436:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
   1443a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1443c:	f7fc f852 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   14440:	4604      	mov	r4, r0
   14442:	b3b0      	cbz	r0, 144b2 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   14444:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   14446:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   14448:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1444c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   14450:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   14454:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   14458:	f043 0310 	orr.w	r3, r3, #16
   1445c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   14460:	79b1      	ldrb	r1, [r6, #6]
   14462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   14466:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   1446a:	f3c1 0110 	ubfx	r1, r1, #0, #17
   1446e:	400b      	ands	r3, r1
   14470:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
   14474:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   14478:	f043 0320 	orr.w	r3, r3, #32
   1447c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14480:	7903      	ldrb	r3, [r0, #4]
   14482:	f043 0303 	orr.w	r3, r3, #3
   14486:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   14488:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1448a:	2309      	movs	r3, #9
   1448c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1448e:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   14490:	2100      	movs	r1, #0
   14492:	4410      	add	r0, r2
   14494:	f7f1 fd25 	bl	5ee2 <memset>
		conn->llcp_features & 0xFF;
   14498:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
   1449c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   1449e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   144a0:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
   144a2:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
   144a4:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
   144a6:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   144a8:	4621      	mov	r1, r4
   144aa:	f7ff ffa7 	bl	143fc <ctrl_tx_sec_enqueue>
	return 0;
   144ae:	2000      	movs	r0, #0
}
   144b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   144b2:	2001      	movs	r0, #1
   144b4:	e7fc      	b.n	144b0 <feature_rsp_send+0x80>
   144b6:	bf00      	nop
   144b8:	2000110c 	.word	0x2000110c

000144bc <start_enc_rsp_send>:
	conn->enc_tx = 1;
   144bc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   144c0:	f043 0320 	orr.w	r3, r3, #32
   144c4:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   144c8:	780b      	ldrb	r3, [r1, #0]
   144ca:	f043 0303 	orr.w	r3, r3, #3
   144ce:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   144d0:	2301      	movs	r3, #1
   144d2:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   144d4:	2306      	movs	r3, #6
   144d6:	70cb      	strb	r3, [r1, #3]
}
   144d8:	2000      	movs	r0, #0
   144da:	4770      	bx	lr

000144dc <reject_ext_ind_send>:
{
   144dc:	b570      	push	{r4, r5, r6, lr}
   144de:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   144e0:	480b      	ldr	r0, [pc, #44]	; (14510 <reject_ext_ind_send+0x34>)
{
   144e2:	460e      	mov	r6, r1
   144e4:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   144e6:	f7fb fffd 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   144ea:	b178      	cbz	r0, 1450c <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   144ec:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   144ee:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   144f0:	f043 0303 	orr.w	r3, r3, #3
   144f4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   144f6:	2303      	movs	r3, #3
   144f8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   144fa:	2311      	movs	r3, #17
   144fc:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   144fe:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   14500:	4601      	mov	r1, r0
   14502:	4620      	mov	r0, r4
   14504:	f7ff ff4c 	bl	143a0 <ctrl_tx_enqueue>
	return 0;
   14508:	2000      	movs	r0, #0
}
   1450a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1450c:	2001      	movs	r0, #1
   1450e:	e7fc      	b.n	1450a <reject_ext_ind_send+0x2e>
   14510:	20001268 	.word	0x20001268
   14514:	00000000 	.word	0x00000000

00014518 <event_connection_prepare>:
{
   14518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1451c:	4dc7      	ldr	r5, [pc, #796]	; (1483c <event_connection_prepare+0x324>)
{
   1451e:	b08f      	sub	sp, #60	; 0x3c
   14520:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
   14522:	7c6b      	ldrb	r3, [r5, #17]
{
   14524:	910c      	str	r1, [sp, #48]	; 0x30
   14526:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   14528:	b1d3      	cbz	r3, 14560 <event_connection_prepare+0x48>
   1452a:	4bc5      	ldr	r3, [pc, #788]	; (14840 <event_connection_prepare+0x328>)
   1452c:	681b      	ldr	r3, [r3, #0]
   1452e:	075c      	lsls	r4, r3, #29
   14530:	d010      	beq.n	14554 <event_connection_prepare+0x3c>
   14532:	2301      	movs	r3, #1
   14534:	f04f 0200 	mov.w	r2, #0
   14538:	f363 0202 	bfi	r2, r3, #0, #3
   1453c:	49c1      	ldr	r1, [pc, #772]	; (14844 <event_connection_prepare+0x32c>)
   1453e:	4bc2      	ldr	r3, [pc, #776]	; (14848 <event_connection_prepare+0x330>)
   14540:	48c2      	ldr	r0, [pc, #776]	; (1484c <event_connection_prepare+0x334>)
   14542:	1a5b      	subs	r3, r3, r1
   14544:	f36f 02c5 	bfc	r2, #3, #3
   14548:	08db      	lsrs	r3, r3, #3
   1454a:	49c1      	ldr	r1, [pc, #772]	; (14850 <event_connection_prepare+0x338>)
   1454c:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   14550:	f7ed fc02 	bl	1d58 <log_1>
   14554:	4040      	eors	r0, r0
   14556:	f380 8811 	msr	BASEPRI, r0
   1455a:	f04f 0004 	mov.w	r0, #4
   1455e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   14560:	f894 3020 	ldrb.w	r3, [r4, #32]
   14564:	3307      	adds	r3, #7
   14566:	b2db      	uxtb	r3, r3
   14568:	746b      	strb	r3, [r5, #17]
	if (conn->role) {
   1456a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1456e:	2b00      	cmp	r3, #0
   14570:	da09      	bge.n	14586 <event_connection_prepare+0x6e>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   14572:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
   14574:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   14576:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
   1457a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
   1457c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
   1457e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
   14580:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
   14582:	bf88      	it	hi
   14584:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
   14586:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   14588:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
   1458c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
   1458e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
   14590:	b292      	uxth	r2, r2
   14592:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   14594:	4432      	add	r2, r6
   14596:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   14598:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1459c:	429a      	cmp	r2, r3
   1459e:	f040 81dd 	bne.w	1495c <event_connection_prepare+0x444>
   145a2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   145a6:	0758      	lsls	r0, r3, #29
   145a8:	f100 852d 	bmi.w	15006 <event_connection_prepare+0xaee>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   145ac:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   145b0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   145b4:	429a      	cmp	r2, r3
   145b6:	f000 80a6 	beq.w	14706 <event_connection_prepare+0x1ee>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   145ba:	2005      	movs	r0, #5
   145bc:	f7ff fb26 	bl	13c0c <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
   145c0:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
   145c4:	b113      	cbz	r3, 145cc <event_connection_prepare+0xb4>
   145c6:	429c      	cmp	r4, r3
   145c8:	f040 809d 	bne.w	14706 <event_connection_prepare+0x1ee>
	switch (conn->llcp_conn_param.state) {
   145cc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   145d0:	f003 0307 	and.w	r3, r3, #7
   145d4:	2b05      	cmp	r3, #5
   145d6:	f200 8171 	bhi.w	148bc <event_connection_prepare+0x3a4>
   145da:	e8df f013 	tbh	[pc, r3, lsl #1]
   145de:	0006      	.short	0x0006
   145e0:	01430075 	.word	0x01430075
   145e4:	00940094 	.word	0x00940094
   145e8:	0094      	.short	0x0094
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   145ea:	489a      	ldr	r0, [pc, #616]	; (14854 <event_connection_prepare+0x33c>)
   145ec:	f7fb ff7a 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   145f0:	4607      	mov	r7, r0
   145f2:	2800      	cmp	r0, #0
   145f4:	f000 8087 	beq.w	14706 <event_connection_prepare+0x1ee>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   145f8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   145fc:	2204      	movs	r2, #4
   145fe:	f362 0302 	bfi	r3, r2, #0, #3
   14602:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14606:	7903      	ldrb	r3, [r0, #4]
   14608:	f043 0303 	orr.w	r3, r3, #3
   1460c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1460e:	2318      	movs	r3, #24
   14610:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   14612:	230f      	movs	r3, #15
   14614:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval_min;
   14616:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1461a:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval_max;
   1461c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   14620:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   14622:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   14626:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   14628:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   1462c:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   1462e:	2300      	movs	r3, #0
   14630:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
   14632:	74c3      	strb	r3, [r0, #19]
   14634:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   14636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1463a:	7543      	strb	r3, [r0, #21]
   1463c:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   1463e:	75c3      	strb	r3, [r0, #23]
   14640:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   14642:	7643      	strb	r3, [r0, #25]
   14644:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   14646:	76c3      	strb	r3, [r0, #27]
   14648:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   1464a:	7743      	strb	r3, [r0, #29]
   1464c:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
   1464e:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
   14652:	4601      	mov	r1, r0
   14654:	4620      	mov	r0, r4
   14656:	f7ff fea3 	bl	143a0 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1465a:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
   1465c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
   14660:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   14664:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
   14666:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   1466a:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1466e:	da0b      	bge.n	14688 <event_connection_prepare+0x170>
			u32_t ticks_prepare_to_start =
   14670:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   14674:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   14678:	428b      	cmp	r3, r1
   1467a:	bf2c      	ite	cs
   1467c:	4443      	addcs	r3, r8
   1467e:	eb08 0301 	addcc.w	r3, r8, r1
   14682:	1a9b      	subs	r3, r3, r2
   14684:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   14688:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
   1468a:	4b73      	ldr	r3, [pc, #460]	; (14858 <event_connection_prepare+0x340>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   1468c:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14690:	2201      	movs	r2, #1
   14692:	4611      	mov	r1, r2
   14694:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
   14696:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14698:	f7fb ffec 	bl	10674 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1469c:	b398      	cbz	r0, 14706 <event_connection_prepare+0x1ee>
   1469e:	4b68      	ldr	r3, [pc, #416]	; (14840 <event_connection_prepare+0x328>)
   146a0:	681b      	ldr	r3, [r3, #0]
   146a2:	0759      	lsls	r1, r3, #29
   146a4:	f43f af56 	beq.w	14554 <event_connection_prepare+0x3c>
   146a8:	2301      	movs	r3, #1
   146aa:	f04f 0200 	mov.w	r2, #0
   146ae:	f363 0202 	bfi	r2, r3, #0, #3
   146b2:	4964      	ldr	r1, [pc, #400]	; (14844 <event_connection_prepare+0x32c>)
   146b4:	4b64      	ldr	r3, [pc, #400]	; (14848 <event_connection_prepare+0x330>)
   146b6:	1a5b      	subs	r3, r3, r1
   146b8:	f36f 02c5 	bfc	r2, #3, #3
   146bc:	08db      	lsrs	r3, r3, #3
   146be:	4967      	ldr	r1, [pc, #412]	; (1485c <event_connection_prepare+0x344>)
   146c0:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(!retval);
   146c4:	4866      	ldr	r0, [pc, #408]	; (14860 <event_connection_prepare+0x348>)
   146c6:	e743      	b.n	14550 <event_connection_prepare+0x38>
	if (conn->llcp_conn_param.status) {
   146c8:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
   146cc:	b397      	cbz	r7, 14734 <event_connection_prepare+0x21c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   146ce:	4861      	ldr	r0, [pc, #388]	; (14854 <event_connection_prepare+0x33c>)
   146d0:	f7fb ff08 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   146d4:	4601      	mov	r1, r0
   146d6:	b1b0      	cbz	r0, 14706 <event_connection_prepare+0x1ee>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   146d8:	7903      	ldrb	r3, [r0, #4]
   146da:	f043 0303 	orr.w	r3, r3, #3
   146de:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   146e0:	2311      	movs	r3, #17
   146e2:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   146e4:	2303      	movs	r3, #3
   146e6:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   146e8:	230f      	movs	r3, #15
   146ea:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   146ec:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   146f0:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   146f2:	4620      	mov	r0, r4
   146f4:	f7ff fe54 	bl	143a0 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   146f8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   146fc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   14700:	2300      	movs	r3, #0
   14702:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   14706:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   1470a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1470e:	429a      	cmp	r2, r3
   14710:	f000 811d 	beq.w	1494e <event_connection_prepare+0x436>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   14714:	2005      	movs	r0, #5
   14716:	f7ff fa79 	bl	13c0c <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
   1471a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1471e:	f003 0203 	and.w	r2, r3, #3
   14722:	2a03      	cmp	r2, #3
   14724:	f200 818c 	bhi.w	14a40 <event_connection_prepare+0x528>
   14728:	e8df f012 	tbh	[pc, r2, lsl #1]
   1472c:	011100dd 	.word	0x011100dd
   14730:	012b0111 	.word	0x012b0111
	if (!conn->role) {
   14734:	f994 301d 	ldrsb.w	r3, [r4, #29]
   14738:	2b00      	cmp	r3, #0
   1473a:	db3b      	blt.n	147b4 <event_connection_prepare+0x29c>
		if (conn->llcp_req != conn->llcp_ack) {
   1473c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
   14740:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14744:	428b      	cmp	r3, r1
   14746:	d1de      	bne.n	14706 <event_connection_prepare+0x1ee>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14748:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
   1474c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14750:	2205      	movs	r2, #5
   14752:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   14756:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1475a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   1475e:	2301      	movs	r3, #1
   14760:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   14764:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		if (conn->llcp_conn_param.preferred_periodicity) {
   14768:	b122      	cbz	r2, 14774 <event_connection_prepare+0x25c>
				((conn->llcp_conn_param.interval_max /
   1476a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   1476e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
   14770:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
   14774:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   14778:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1477c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   14780:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   14784:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   14788:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1478c:	2202      	movs	r2, #2
   1478e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   14792:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   14796:	f082 0208 	eor.w	r2, r2, #8
   1479a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1479e:	f362 0382 	bfi	r3, r2, #2, #1
   147a2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
   147a6:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
   147a8:	2301      	movs	r3, #1
   147aa:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   147ae:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
   147b2:	e7a8      	b.n	14706 <event_connection_prepare+0x1ee>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   147b4:	4827      	ldr	r0, [pc, #156]	; (14854 <event_connection_prepare+0x33c>)
   147b6:	f7fb fe95 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   147ba:	4601      	mov	r1, r0
   147bc:	2800      	cmp	r0, #0
   147be:	d0a2      	beq.n	14706 <event_connection_prepare+0x1ee>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   147c0:	7903      	ldrb	r3, [r0, #4]
   147c2:	f043 0303 	orr.w	r3, r3, #3
   147c6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   147c8:	2318      	movs	r3, #24
   147ca:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   147cc:	2310      	movs	r3, #16
   147ce:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval_min;
   147d0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   147d4:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval_max;
   147d6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   147da:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
   147dc:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   147e0:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
   147e2:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   147e6:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
   147e8:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   147ec:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
   147ee:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   147f2:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
   147f6:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   147fa:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
   147fe:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   14802:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
   14806:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   1480a:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
   1480e:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   14812:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
   14816:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   1481a:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
   1481e:	f8b4 30da 	ldrh.w	r3, [r4, #218]	; 0xda
   14822:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   14826:	4620      	mov	r0, r4
   14828:	f7ff fdba 	bl	143a0 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1482c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   14830:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   14834:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
   14838:	e765      	b.n	14706 <event_connection_prepare+0x1ee>
   1483a:	bf00      	nop
   1483c:	2000110c 	.word	0x2000110c
   14840:	2000d72c 	.word	0x2000d72c
   14844:	0002cff8 	.word	0x0002cff8
   14848:	0002d030 	.word	0x0002d030
   1484c:	0003112e 	.word	0x0003112e
   14850:	000308b2 	.word	0x000308b2
   14854:	20001268 	.word	0x20001268
   14858:	2000d02c 	.word	0x2000d02c
   1485c:	0003084e 	.word	0x0003084e
   14860:	0003103a 	.word	0x0003103a
	if (conn->pause_tx) {
   14864:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   14868:	071a      	lsls	r2, r3, #28
   1486a:	f53f af4c 	bmi.w	14706 <event_connection_prepare+0x1ee>
	node_rx = packet_rx_reserve_get(2);
   1486e:	2002      	movs	r0, #2
   14870:	f7fc fec4 	bl	115fc <packet_rx_reserve_get>
	if (!node_rx) {
   14874:	2800      	cmp	r0, #0
   14876:	f43f af46 	beq.w	14706 <event_connection_prepare+0x1ee>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1487a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1487e:	2203      	movs	r2, #3
   14880:	f362 0302 	bfi	r3, r2, #0, #3
   14884:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   14888:	8c23      	ldrh	r3, [r4, #32]
   1488a:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1488c:	2301      	movs	r3, #1
   1488e:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14890:	7a03      	ldrb	r3, [r0, #8]
   14892:	4313      	orrs	r3, r2
   14894:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   14896:	2318      	movs	r3, #24
   14898:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1489a:	230f      	movs	r3, #15
   1489c:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval_min;
   1489e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   148a2:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval_max;
   148a4:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   148a8:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
   148aa:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   148ae:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   148b0:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   148b4:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
   148b6:	f7fd fe03 	bl	124c0 <packet_rx_enqueue>
   148ba:	e724      	b.n	14706 <event_connection_prepare+0x1ee>
		LL_ASSERT(0);
   148bc:	4bb3      	ldr	r3, [pc, #716]	; (14b8c <event_connection_prepare+0x674>)
   148be:	681b      	ldr	r3, [r3, #0]
   148c0:	075b      	lsls	r3, r3, #29
   148c2:	f43f ae47 	beq.w	14554 <event_connection_prepare+0x3c>
   148c6:	2301      	movs	r3, #1
   148c8:	f04f 0200 	mov.w	r2, #0
   148cc:	f363 0202 	bfi	r2, r3, #0, #3
   148d0:	49af      	ldr	r1, [pc, #700]	; (14b90 <event_connection_prepare+0x678>)
   148d2:	4bb0      	ldr	r3, [pc, #704]	; (14b94 <event_connection_prepare+0x67c>)
   148d4:	1a5b      	subs	r3, r3, r1
   148d6:	f36f 02c5 	bfc	r2, #3, #3
   148da:	08db      	lsrs	r3, r3, #3
   148dc:	49ae      	ldr	r1, [pc, #696]	; (14b98 <event_connection_prepare+0x680>)
   148de:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   148e2:	48ae      	ldr	r0, [pc, #696]	; (14b9c <event_connection_prepare+0x684>)
   148e4:	e634      	b.n	14550 <event_connection_prepare+0x38>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   148e6:	48ae      	ldr	r0, [pc, #696]	; (14ba0 <event_connection_prepare+0x688>)
   148e8:	f7fb fdfc 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   148ec:	4601      	mov	r1, r0
   148ee:	b370      	cbz	r0, 1494e <event_connection_prepare+0x436>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   148f0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
   148f4:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   148f8:	2201      	movs	r2, #1
   148fa:	f362 0301 	bfi	r3, r2, #0, #2
   148fe:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   14902:	b2db      	uxtb	r3, r3
   14904:	f3c3 0782 	ubfx	r7, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   14908:	f3c3 1342 	ubfx	r3, r3, #5, #3
   1490c:	f363 00c5 	bfi	r0, r3, #3, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
   14910:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
   14914:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   14918:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1491c:	f367 0202 	bfi	r2, r7, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
   14920:	f3c0 0000 	ubfx	r0, r0, #0, #1
   14924:	f360 1286 	bfi	r2, r0, #6, #1
   14928:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1492c:	790a      	ldrb	r2, [r1, #4]
		pr->rx_phys = conn->llcp_phy.rx;
   1492e:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14930:	f042 0203 	orr.w	r2, r2, #3
   14934:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
   14936:	2203      	movs	r2, #3
   14938:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1493a:	2216      	movs	r2, #22
   1493c:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   1493e:	720f      	strb	r7, [r1, #8]
		ctrl_tx_enqueue(conn, node_tx);
   14940:	4620      	mov	r0, r4
   14942:	f7ff fd2d 	bl	143a0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   14946:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1494a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
   1494e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14952:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14956:	429a      	cmp	r2, r3
   14958:	f000 8355 	beq.w	15006 <event_connection_prepare+0xaee>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1495c:	2005      	movs	r0, #5
   1495e:	f7ff f955 	bl	13c0c <event_stop.constprop.33>
		switch (conn->llcp_type) {
   14962:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   14966:	3b01      	subs	r3, #1
   14968:	2b07      	cmp	r3, #7
   1496a:	f200 862f 	bhi.w	155cc <event_connection_prepare+0x10b4>
   1496e:	e8df f013 	tbh	[pc, r3, lsl #1]
   14972:	007b      	.short	0x007b
   14974:	03a20323 	.word	0x03a20323
   14978:	04e904b9 	.word	0x04e904b9
   1497c:	0560062d 	.word	0x0560062d
   14980:	0574      	.short	0x0574
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14982:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   14986:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   1498a:	f3c3 0282 	ubfx	r2, r3, #2, #3
   1498e:	0797      	lsls	r7, r2, #30
   14990:	d544      	bpl.n	14a1c <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   14992:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
   14994:	f362 0384 	bfi	r3, r2, #2, #3
   14998:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   1499c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149a0:	095a      	lsrs	r2, r3, #5
   149a2:	0791      	lsls	r1, r2, #30
   149a4:	d543      	bpl.n	14a2e <event_connection_prepare+0x516>
			conn->llcp_phy.rx = BIT(1);
   149a6:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
   149a8:	f362 1347 	bfi	r3, r2, #5, #3
   149ac:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   149b0:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
   149b4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   149b8:	f3c2 0182 	ubfx	r1, r2, #2, #3
   149bc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   149c0:	428b      	cmp	r3, r1
   149c2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   149c6:	bf14      	ite	ne
   149c8:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
   149cc:	f36f 0384 	bfceq	r3, #2, #3
   149d0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   149d4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   149d8:	0952      	lsrs	r2, r2, #5
   149da:	f003 0307 	and.w	r3, r3, #7
   149de:	4293      	cmp	r3, r2
   149e0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   149e4:	bf14      	ite	ne
   149e6:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
   149ea:	f36f 1347 	bfceq	r3, #5, #3
   149ee:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   149f2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   149f6:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   149fa:	f043 0301 	orr.w	r3, r3, #1
   149fe:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14a02:	f362 0341 	bfi	r3, r2, #1, #1
   14a06:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   14a0a:	2308      	movs	r3, #8
   14a0c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   14a10:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14a14:	3b01      	subs	r3, #1
   14a16:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   14a1a:	e798      	b.n	1494e <event_connection_prepare+0x436>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   14a1c:	07d0      	lsls	r0, r2, #31
   14a1e:	d501      	bpl.n	14a24 <event_connection_prepare+0x50c>
			conn->llcp_phy.tx = BIT(0);
   14a20:	2201      	movs	r2, #1
   14a22:	e7b7      	b.n	14994 <event_connection_prepare+0x47c>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   14a24:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
   14a28:	bf18      	it	ne
   14a2a:	2204      	movne	r2, #4
   14a2c:	e7b2      	b.n	14994 <event_connection_prepare+0x47c>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   14a2e:	07d7      	lsls	r7, r2, #31
   14a30:	d501      	bpl.n	14a36 <event_connection_prepare+0x51e>
			conn->llcp_phy.rx = BIT(0);
   14a32:	2201      	movs	r2, #1
   14a34:	e7b8      	b.n	149a8 <event_connection_prepare+0x490>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   14a36:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
   14a3a:	bf18      	it	ne
   14a3c:	2204      	movne	r2, #4
   14a3e:	e7b3      	b.n	149a8 <event_connection_prepare+0x490>
		LL_ASSERT(0);
   14a40:	4b52      	ldr	r3, [pc, #328]	; (14b8c <event_connection_prepare+0x674>)
   14a42:	681b      	ldr	r3, [r3, #0]
   14a44:	075c      	lsls	r4, r3, #29
   14a46:	f43f ad85 	beq.w	14554 <event_connection_prepare+0x3c>
   14a4a:	2301      	movs	r3, #1
   14a4c:	f04f 0200 	mov.w	r2, #0
   14a50:	f363 0202 	bfi	r2, r3, #0, #3
   14a54:	494e      	ldr	r1, [pc, #312]	; (14b90 <event_connection_prepare+0x678>)
   14a56:	4b4f      	ldr	r3, [pc, #316]	; (14b94 <event_connection_prepare+0x67c>)
   14a58:	1a5b      	subs	r3, r3, r1
   14a5a:	f36f 02c5 	bfc	r2, #3, #3
   14a5e:	08db      	lsrs	r3, r3, #3
   14a60:	f363 128f 	bfi	r2, r3, #6, #10
   14a64:	494f      	ldr	r1, [pc, #316]	; (14ba4 <event_connection_prepare+0x68c>)
   14a66:	e73c      	b.n	148e2 <event_connection_prepare+0x3ca>
	if (!conn_upd) {
   14a68:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
   14a6c:	b90b      	cbnz	r3, 14a72 <event_connection_prepare+0x55a>
		_radio.conn_upd = conn;
   14a6e:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   14a72:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a76:	f013 0303 	ands.w	r3, r3, #3
   14a7a:	f000 809f 	beq.w	14bbc <event_connection_prepare+0x6a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14a7e:	4848      	ldr	r0, [pc, #288]	; (14ba0 <event_connection_prepare+0x688>)
   14a80:	f7fb fd30 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   14a84:	4607      	mov	r7, r0
   14a86:	2800      	cmp	r0, #0
   14a88:	f000 82bd 	beq.w	15006 <event_connection_prepare+0xaee>
		switch (conn->llcp.conn_upd.state) {
   14a8c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a90:	f003 0303 	and.w	r3, r3, #3
   14a94:	2b01      	cmp	r3, #1
   14a96:	d015      	beq.n	14ac4 <event_connection_prepare+0x5ac>
   14a98:	2b02      	cmp	r3, #2
   14a9a:	d075      	beq.n	14b88 <event_connection_prepare+0x670>
			LL_ASSERT(0);
   14a9c:	4b3b      	ldr	r3, [pc, #236]	; (14b8c <event_connection_prepare+0x674>)
   14a9e:	681b      	ldr	r3, [r3, #0]
   14aa0:	0758      	lsls	r0, r3, #29
   14aa2:	f43f ad57 	beq.w	14554 <event_connection_prepare+0x3c>
   14aa6:	2301      	movs	r3, #1
   14aa8:	f04f 0200 	mov.w	r2, #0
   14aac:	f363 0202 	bfi	r2, r3, #0, #3
   14ab0:	4937      	ldr	r1, [pc, #220]	; (14b90 <event_connection_prepare+0x678>)
   14ab2:	4b38      	ldr	r3, [pc, #224]	; (14b94 <event_connection_prepare+0x67c>)
   14ab4:	1a5b      	subs	r3, r3, r1
   14ab6:	f36f 02c5 	bfc	r2, #3, #3
   14aba:	08db      	lsrs	r3, r3, #3
   14abc:	f363 128f 	bfi	r2, r3, #6, #10
   14ac0:	4939      	ldr	r1, [pc, #228]	; (14ba8 <event_connection_prepare+0x690>)
   14ac2:	e70e      	b.n	148e2 <event_connection_prepare+0x3ca>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   14ac4:	4a39      	ldr	r2, [pc, #228]	; (14bac <event_connection_prepare+0x694>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   14ac6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14aca:	7939      	ldrb	r1, [r7, #4]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   14acc:	f36f 0301 	bfc	r3, #0, #2
   14ad0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   14ad4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   14ad6:	3306      	adds	r3, #6
   14ad8:	4433      	add	r3, r6
   14ada:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14adc:	f041 0103 	orr.w	r1, r1, #3
	conn->llcp.conn_upd.instant =
   14ae0:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14ae4:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   14ae6:	210c      	movs	r1, #12
   14ae8:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   14aea:	2100      	movs	r1, #0
   14aec:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
   14aee:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
   14af2:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   14af4:	f240 40e2 	movw	r0, #1250	; 0x4e2
   14af8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   14afc:	fbb1 f1f0 	udiv	r1, r1, r0
   14b00:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   14b04:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   14b08:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   14b0c:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   14b10:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   14b14:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
   14b18:	f8a7 100f 	strh.w	r1, [r7, #15]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   14b1c:	6821      	ldr	r1, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   14b1e:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   14b22:	2900      	cmp	r1, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   14b24:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   14b28:	da0b      	bge.n	14b42 <event_connection_prepare+0x62a>
			u32_t ticks_prepare_to_start =
   14b2a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   14b2e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   14b32:	4283      	cmp	r3, r0
   14b34:	bf2c      	ite	cs
   14b36:	4443      	addcs	r3, r8
   14b38:	eb08 0300 	addcc.w	r3, r8, r0
   14b3c:	1a5b      	subs	r3, r3, r1
   14b3e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   14b42:	f107 0309 	add.w	r3, r7, #9
   14b46:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   14b4a:	4b19      	ldr	r3, [pc, #100]	; (14bb0 <event_connection_prepare+0x698>)
		mayfly_sched_offset->param = (void *)conn;
   14b4c:	e9c3 4202 	strd	r4, r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14b50:	2201      	movs	r2, #1
   14b52:	4611      	mov	r1, r2
   14b54:	2000      	movs	r0, #0
   14b56:	f7fb fd8d 	bl	10674 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14b5a:	2800      	cmp	r0, #0
   14b5c:	f000 824f 	beq.w	14ffe <event_connection_prepare+0xae6>
   14b60:	4b0a      	ldr	r3, [pc, #40]	; (14b8c <event_connection_prepare+0x674>)
   14b62:	681b      	ldr	r3, [r3, #0]
   14b64:	0759      	lsls	r1, r3, #29
   14b66:	f43f acf5 	beq.w	14554 <event_connection_prepare+0x3c>
   14b6a:	2301      	movs	r3, #1
   14b6c:	f04f 0200 	mov.w	r2, #0
   14b70:	f363 0202 	bfi	r2, r3, #0, #3
   14b74:	4906      	ldr	r1, [pc, #24]	; (14b90 <event_connection_prepare+0x678>)
   14b76:	4b07      	ldr	r3, [pc, #28]	; (14b94 <event_connection_prepare+0x67c>)
   14b78:	1a5b      	subs	r3, r3, r1
   14b7a:	f36f 02c5 	bfc	r2, #3, #3
   14b7e:	08db      	lsrs	r3, r3, #3
   14b80:	f363 128f 	bfi	r2, r3, #6, #10
   14b84:	490b      	ldr	r1, [pc, #44]	; (14bb4 <event_connection_prepare+0x69c>)
   14b86:	e59d      	b.n	146c4 <event_connection_prepare+0x1ac>
			fp_mayfly_select_or_use =
   14b88:	4a0b      	ldr	r2, [pc, #44]	; (14bb8 <event_connection_prepare+0x6a0>)
   14b8a:	e79c      	b.n	14ac6 <event_connection_prepare+0x5ae>
   14b8c:	2000d72c 	.word	0x2000d72c
   14b90:	0002cff8 	.word	0x0002cff8
   14b94:	0002d030 	.word	0x0002d030
   14b98:	00030863 	.word	0x00030863
   14b9c:	0002f0b9 	.word	0x0002f0b9
   14ba0:	20001268 	.word	0x20001268
   14ba4:	00030888 	.word	0x00030888
   14ba8:	0003082b 	.word	0x0003082b
   14bac:	00013349 	.word	0x00013349
   14bb0:	2000d01c 	.word	0x2000d01c
   14bb4:	00030817 	.word	0x00030817
   14bb8:	000121f9 	.word	0x000121f9
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   14bbc:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
   14bc0:	1bf7      	subs	r7, r6, r7
   14bc2:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
   14bc4:	043a      	lsls	r2, r7, #16
   14bc6:	f100 821e 	bmi.w	15006 <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   14bca:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   14bce:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14bd2:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
   14bd6:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   14bda:	428a      	cmp	r2, r1
   14bdc:	d009      	beq.n	14bf2 <event_connection_prepare+0x6da>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   14bde:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14be2:	f002 0207 	and.w	r2, r2, #7
   14be6:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14be8:	bf04      	itt	eq
   14bea:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   14bee:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
   14bf2:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
   14bf6:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
   14bf8:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
   14bfa:	bf08      	it	eq
   14bfc:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
   14c00:	746b      	strb	r3, [r5, #17]
		if ((conn->llcp.conn_upd.interval !=
   14c02:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   14c04:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   14c08:	429a      	cmp	r2, r3
   14c0a:	d114      	bne.n	14c36 <event_connection_prepare+0x71e>
		     conn->conn_interval) ||
   14c0c:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   14c10:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   14c12:	4299      	cmp	r1, r3
   14c14:	d10f      	bne.n	14c36 <event_connection_prepare+0x71e>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   14c16:	f240 43e2 	movw	r3, #1250	; 0x4e2
   14c1a:	435a      	muls	r2, r3
   14c1c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14c20:	f242 7110 	movw	r1, #10000	; 0x2710
   14c24:	fb01 2303 	mla	r3, r1, r3, r2
   14c28:	3b01      	subs	r3, #1
   14c2a:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   14c2e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   14c30:	b29b      	uxth	r3, r3
   14c32:	429a      	cmp	r2, r3
   14c34:	d02c      	beq.n	14c90 <event_connection_prepare+0x778>
			node_rx = packet_rx_reserve_get(2);
   14c36:	2002      	movs	r0, #2
   14c38:	f7fc fce0 	bl	115fc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   14c3c:	b9a0      	cbnz	r0, 14c68 <event_connection_prepare+0x750>
   14c3e:	4bce      	ldr	r3, [pc, #824]	; (14f78 <event_connection_prepare+0xa60>)
   14c40:	681b      	ldr	r3, [r3, #0]
   14c42:	075d      	lsls	r5, r3, #29
   14c44:	f43f ac86 	beq.w	14554 <event_connection_prepare+0x3c>
   14c48:	2301      	movs	r3, #1
   14c4a:	f04f 0200 	mov.w	r2, #0
   14c4e:	f363 0202 	bfi	r2, r3, #0, #3
   14c52:	49ca      	ldr	r1, [pc, #808]	; (14f7c <event_connection_prepare+0xa64>)
   14c54:	4bca      	ldr	r3, [pc, #808]	; (14f80 <event_connection_prepare+0xa68>)
   14c56:	1a5b      	subs	r3, r3, r1
   14c58:	f360 02c5 	bfi	r2, r0, #3, #3
   14c5c:	08db      	lsrs	r3, r3, #3
   14c5e:	49c9      	ldr	r1, [pc, #804]	; (14f84 <event_connection_prepare+0xa6c>)
   14c60:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(node_rx);
   14c64:	48c8      	ldr	r0, [pc, #800]	; (14f88 <event_connection_prepare+0xa70>)
   14c66:	e473      	b.n	14550 <event_connection_prepare+0x38>
			node_rx->hdr.handle = conn->handle;
   14c68:	8c23      	ldrh	r3, [r4, #32]
   14c6a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14c6c:	2308      	movs	r3, #8
   14c6e:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   14c70:	2300      	movs	r3, #0
   14c72:	7203      	strb	r3, [r0, #8]
			radio_le_conn_update_cmplt->interval =
   14c74:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   14c78:	f8a0 3009 	strh.w	r3, [r0, #9]
			radio_le_conn_update_cmplt->latency =
   14c7c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   14c80:	f8a0 300b 	strh.w	r3, [r0, #11]
			radio_le_conn_update_cmplt->timeout =
   14c84:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14c88:	f8a0 300d 	strh.w	r3, [r0, #13]
			packet_rx_enqueue();
   14c8c:	f7fd fc18 	bl	124c0 <packet_rx_enqueue>
   14c90:	e9d4 3600 	ldrd	r3, r6, [r4]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   14c94:	2b00      	cmp	r3, #0
   14c96:	da09      	bge.n	14cac <event_connection_prepare+0x794>
			u32_t ticks_prepare_to_start =
   14c98:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   14c9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   14c9e:	4286      	cmp	r6, r0
   14ca0:	bf2c      	ite	cs
   14ca2:	44b0      	addcs	r8, r6
   14ca4:	4480      	addcc	r8, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   14ca6:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   14ca8:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
   14cac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
   14cae:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
   14cb2:	49b6      	ldr	r1, [pc, #728]	; (14f8c <event_connection_prepare+0xa74>)
		conn_interval_old = instant_latency * conn->conn_interval;
   14cb4:	fb13 f307 	smulbb	r3, r3, r7
   14cb8:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
   14cba:	fbb3 f2fa 	udiv	r2, r3, sl
   14cbe:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
   14cc2:	fb1a f009 	smulbb	r0, sl, r9
   14cc6:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   14cc8:	4283      	cmp	r3, r0
   14cca:	f080 80cd 	bcs.w	14e68 <event_connection_prepare+0x950>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   14cce:	1ac0      	subs	r0, r0, r3
   14cd0:	f240 1223 	movw	r2, #291	; 0x123
   14cd4:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   14cd8:	4342      	muls	r2, r0
   14cda:	fb01 230c 	mla	r3, r1, ip, r2
   14cde:	fba0 0101 	umull	r0, r1, r0, r1
   14ce2:	4419      	add	r1, r3
   14ce4:	a3a2      	add	r3, pc, #648	; (adr r3, 14f70 <event_connection_prepare+0xa58>)
   14ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cea:	f7eb fae3 	bl	2b4 <__aeabi_uldivmod>
   14cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14cf2:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   14cf6:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
   14cf8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   14cfa:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 14fb4 <event_connection_prepare+0xa9c>
   14cfe:	1bdb      	subs	r3, r3, r7
   14d00:	444b      	add	r3, r9
   14d02:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   14d04:	6823      	ldr	r3, [r4, #0]
   14d06:	429e      	cmp	r6, r3
   14d08:	bf38      	it	cc
   14d0a:	461e      	movcc	r6, r3
   14d0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   14d10:	930a      	str	r3, [sp, #40]	; 0x28
		if (conn->role) {
   14d12:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   14d16:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   14d18:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
   14d1c:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   14d1e:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
   14d22:	f280 80b3 	bge.w	14e8c <event_connection_prepare+0x974>
				conn->slave.window_widening_periodic_us *
   14d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   14d28:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   14d2a:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
   14d2e:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   14d32:	4a97      	ldr	r2, [pc, #604]	; (14f90 <event_connection_prepare+0xa78>)
   14d34:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   14d38:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   14d3c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
   14d44:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
   14d48:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
   14d4a:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   14d4c:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   14d50:	4b90      	ldr	r3, [pc, #576]	; (14f94 <event_connection_prepare+0xa7c>)
				conn->llcp.conn_upd.win_size * 1250;
   14d52:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   14d56:	f205 253f 	addw	r5, r5, #575	; 0x23f
   14d5a:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
   14d5e:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
   14d60:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
   14d64:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
   14d66:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
   14d68:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   14d6a:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
   14d6c:	429f      	cmp	r7, r3
   14d6e:	bf94      	ite	ls
   14d70:	65e7      	strls	r7, [r4, #92]	; 0x5c
   14d72:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
   14d74:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
   14d76:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
   14d78:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   14d7a:	fba0 010b 	umull	r0, r1, r0, fp
   14d7e:	a37c      	add	r3, pc, #496	; (adr r3, 14f70 <event_connection_prepare+0xa58>)
   14d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   14d84:	f7eb fa96 	bl	2b4 <__aeabi_uldivmod>
   14d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14d8a:	1a1b      	subs	r3, r3, r0
   14d8c:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   14d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14d90:	fbb3 f0f8 	udiv	r0, r3, r8
   14d94:	fb08 f000 	mul.w	r0, r8, r0
   14d98:	a375      	add	r3, pc, #468	; (adr r3, 14f70 <event_connection_prepare+0xa58>)
   14d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14d9e:	fba0 010b 	umull	r0, r1, r0, fp
   14da2:	f7eb fa87 	bl	2b4 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
   14da6:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   14da8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   14dac:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
   14db0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14db4:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   14db6:	f242 7110 	movw	r1, #10000	; 0x2710
   14dba:	fb01 6303 	mla	r3, r1, r3, r6
   14dbe:	3b01      	subs	r3, #1
   14dc0:	fbb3 f3f6 	udiv	r3, r3, r6
   14dc4:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14dc6:	4b74      	ldr	r3, [pc, #464]	; (14f98 <event_connection_prepare+0xa80>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
   14dc8:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14dcc:	4433      	add	r3, r6
   14dce:	fbb3 f3f6 	udiv	r3, r3, r6
   14dd2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14dd6:	4b71      	ldr	r3, [pc, #452]	; (14f9c <event_connection_prepare+0xa84>)
   14dd8:	4433      	add	r3, r6
   14dda:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14dde:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14de0:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14de2:	4299      	cmp	r1, r3
   14de4:	bfc4      	itt	gt
   14de6:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
   14dea:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14dec:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14df0:	bfc8      	it	gt
   14df2:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
   14df4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14df8:	bfc8      	it	gt
   14dfa:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
   14dfc:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   14e00:	bf08      	it	eq
   14e02:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14e06:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
   14e0a:	2000      	movs	r0, #0
   14e0c:	2101      	movs	r1, #1
   14e0e:	f009 f93f 	bl	1e090 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14e12:	2200      	movs	r2, #0
   14e14:	2101      	movs	r1, #1
		mayfly_was_enabled =
   14e16:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14e18:	4610      	mov	r0, r2
   14e1a:	f7fb fc03 	bl	10624 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e1e:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   14e22:	f641 23ff 	movw	r3, #6911	; 0x1aff
   14e26:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e28:	3207      	adds	r2, #7
		ticker_status =
   14e2a:	9300      	str	r3, [sp, #0]
   14e2c:	b2d2      	uxtb	r2, r2
   14e2e:	4b5c      	ldr	r3, [pc, #368]	; (14fa0 <event_connection_prepare+0xa88>)
   14e30:	4608      	mov	r0, r1
   14e32:	f7fc fa71 	bl	11318 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e36:	f030 0802 	bics.w	r8, r0, #2
   14e3a:	d034      	beq.n	14ea6 <event_connection_prepare+0x98e>
   14e3c:	4b4e      	ldr	r3, [pc, #312]	; (14f78 <event_connection_prepare+0xa60>)
   14e3e:	681b      	ldr	r3, [r3, #0]
   14e40:	075c      	lsls	r4, r3, #29
   14e42:	f43f ab87 	beq.w	14554 <event_connection_prepare+0x3c>
   14e46:	f04f 0200 	mov.w	r2, #0
   14e4a:	2301      	movs	r3, #1
   14e4c:	f363 0202 	bfi	r2, r3, #0, #3
   14e50:	f36f 02c5 	bfc	r2, #3, #3
   14e54:	4949      	ldr	r1, [pc, #292]	; (14f7c <event_connection_prepare+0xa64>)
   14e56:	4b4a      	ldr	r3, [pc, #296]	; (14f80 <event_connection_prepare+0xa68>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e58:	4852      	ldr	r0, [pc, #328]	; (14fa4 <event_connection_prepare+0xa8c>)
   14e5a:	1a5b      	subs	r3, r3, r1
   14e5c:	08db      	lsrs	r3, r3, #3
   14e5e:	f363 128f 	bfi	r2, r3, #6, #10
   14e62:	4948      	ldr	r1, [pc, #288]	; (14f84 <event_connection_prepare+0xa6c>)
   14e64:	f7ff bb74 	b.w	14550 <event_connection_prepare+0x38>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   14e68:	fb0a 3212 	mls	r2, sl, r2, r3
   14e6c:	fa1f fb82 	uxth.w	fp, r2
   14e70:	fbab 0101 	umull	r0, r1, fp, r1
   14e74:	f240 1323 	movw	r3, #291	; 0x123
   14e78:	fb03 110b 	mla	r1, r3, fp, r1
   14e7c:	a33c      	add	r3, pc, #240	; (adr r3, 14f70 <event_connection_prepare+0xa58>)
   14e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e82:	f7eb fa17 	bl	2b4 <__aeabi_uldivmod>
   14e86:	eba8 0300 	sub.w	r3, r8, r0
   14e8a:	e734      	b.n	14cf6 <event_connection_prepare+0x7de>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   14e8c:	990a      	ldr	r1, [sp, #40]	; 0x28
   14e8e:	a338      	add	r3, pc, #224	; (adr r3, 14f70 <event_connection_prepare+0xa58>)
   14e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e94:	fba1 010b 	umull	r0, r1, r1, fp
   14e98:	f7eb fa0c 	bl	2b4 <__aeabi_uldivmod>
   14e9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   14ea0:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
   14ea2:	4635      	mov	r5, r6
   14ea4:	e782      	b.n	14dac <event_connection_prepare+0x894>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   14ea6:	fba5 ab0b 	umull	sl, fp, r5, fp
   14eaa:	a331      	add	r3, pc, #196	; (adr r3, 14f70 <event_connection_prepare+0xa58>)
   14eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   14eb0:	4650      	mov	r0, sl
   14eb2:	4659      	mov	r1, fp
   14eb4:	f7eb f9fe 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   14eb8:	2300      	movs	r3, #0
   14eba:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
   14ebe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   14ec2:	990a      	ldr	r1, [sp, #40]	; 0x28
   14ec4:	4a38      	ldr	r2, [pc, #224]	; (14fa8 <event_connection_prepare+0xa90>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14ec6:	f894 6020 	ldrb.w	r6, [r4, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
   14eca:	2307      	movs	r3, #7
   14ecc:	434b      	muls	r3, r1
   14ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14ed0:	fb02 3301 	mla	r3, r2, r1, r3
   14ed4:	990a      	ldr	r1, [sp, #40]	; 0x28
   14ed6:	fba1 1202 	umull	r1, r2, r1, r2
   14eda:	441a      	add	r2, r3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14edc:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   14ee0:	4608      	mov	r0, r1
   14ee2:	ebba 0000 	subs.w	r0, sl, r0
   14ee6:	4611      	mov	r1, r2
   14ee8:	eb6b 0101 	sbc.w	r1, fp, r1
   14eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14ef0:	2300      	movs	r3, #0
   14ef2:	f7eb f9df 	bl	2b4 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14ef6:	68e3      	ldr	r3, [r4, #12]
   14ef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14efa:	f994 c01d 	ldrsb.w	ip, [r4, #29]
   14efe:	492b      	ldr	r1, [pc, #172]	; (14fac <event_connection_prepare+0xa94>)
   14f00:	441a      	add	r2, r3
   14f02:	4613      	mov	r3, r2
   14f04:	4a2a      	ldr	r2, [pc, #168]	; (14fb0 <event_connection_prepare+0xa98>)
   14f06:	ea32 022c 	bics.w	r2, r2, ip, asr #32
   14f0a:	bf28      	it	cs
   14f0c:	460a      	movcs	r2, r1
		ticker_status =
   14f0e:	f641 310f 	movw	r1, #6927	; 0x1b0f
   14f12:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14f14:	3607      	adds	r6, #7
		ticker_status =
   14f16:	4922      	ldr	r1, [pc, #136]	; (14fa0 <event_connection_prepare+0xa88>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14f18:	b2f6      	uxtb	r6, r6
		ticker_status =
   14f1a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   14f1e:	e9cd 4106 	strd	r4, r1, [sp, #24]
   14f22:	e9cd 0802 	strd	r0, r8, [sp, #8]
   14f26:	e9cd 7500 	strd	r7, r5, [sp]
   14f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14f2c:	4632      	mov	r2, r6
   14f2e:	4641      	mov	r1, r8
   14f30:	4640      	mov	r0, r8
   14f32:	f7fc f95d 	bl	111f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f36:	f030 0002 	bics.w	r0, r0, #2
   14f3a:	d00c      	beq.n	14f56 <event_connection_prepare+0xa3e>
   14f3c:	4b0e      	ldr	r3, [pc, #56]	; (14f78 <event_connection_prepare+0xa60>)
   14f3e:	681b      	ldr	r3, [r3, #0]
   14f40:	0758      	lsls	r0, r3, #29
   14f42:	f43f ab07 	beq.w	14554 <event_connection_prepare+0x3c>
   14f46:	f04f 0200 	mov.w	r2, #0
   14f4a:	2301      	movs	r3, #1
   14f4c:	f363 0202 	bfi	r2, r3, #0, #3
   14f50:	f368 02c5 	bfi	r2, r8, #3, #3
   14f54:	e77e      	b.n	14e54 <event_connection_prepare+0x93c>
		if (mayfly_was_enabled) {
   14f56:	f1b9 0f00 	cmp.w	r9, #0
   14f5a:	f000 83c5 	beq.w	156e8 <event_connection_prepare+0x11d0>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14f5e:	2201      	movs	r2, #1
   14f60:	4611      	mov	r1, r2
}
   14f62:	b00f      	add	sp, #60	; 0x3c
   14f64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14f68:	f7fb bb5c 	b.w	10624 <mayfly_enable>
   14f6c:	f3af 8000 	nop.w
   14f70:	1afd498d 	.word	0x1afd498d
   14f74:	00000007 	.word	0x00000007
   14f78:	2000d72c 	.word	0x2000d72c
   14f7c:	0002cff8 	.word	0x0002cff8
   14f80:	0002d030 	.word	0x0002d030
   14f84:	0003082b 	.word	0x0003082b
   14f88:	00030f96 	.word	0x00030f96
   14f8c:	09ce5400 	.word	0x09ce5400
   14f90:	00030bc2 	.word	0x00030bc2
   14f94:	000f4240 	.word	0x000f4240
   14f98:	026259ff 	.word	0x026259ff
   14f9c:	01c9c37f 	.word	0x01c9c37f
   14fa0:	00012715 	.word	0x00012715
   14fa4:	000309cf 	.word	0x000309cf
   14fa8:	1afd498d 	.word	0x1afd498d
   14fac:	000158fd 	.word	0x000158fd
   14fb0:	00015901 	.word	0x00015901
   14fb4:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
   14fb8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14fbc:	2b00      	cmp	r3, #0
   14fbe:	d05e      	beq.n	1507e <event_connection_prepare+0xb66>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14fc0:	48c7      	ldr	r0, [pc, #796]	; (152e0 <event_connection_prepare+0xdc8>)
   14fc2:	f7fb fa8f 	bl	104e4 <mem_acquire>
		if (node_tx) {
   14fc6:	4607      	mov	r7, r0
   14fc8:	b1e8      	cbz	r0, 15006 <event_connection_prepare+0xaee>
			conn->llcp.chan_map.initiate = 0;
   14fca:	2300      	movs	r3, #0
   14fcc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   14fd0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   14fd2:	3306      	adds	r3, #6
   14fd4:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   14fd6:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fda:	7903      	ldrb	r3, [r0, #4]
   14fdc:	f043 0303 	orr.w	r3, r3, #3
   14fe0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   14fe2:	2308      	movs	r3, #8
   14fe4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   14fe6:	2301      	movs	r3, #1
   14fe8:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   14fea:	2205      	movs	r2, #5
   14fec:	f104 0179 	add.w	r1, r4, #121	; 0x79
   14ff0:	3008      	adds	r0, #8
   14ff2:	f7f0 ff49 	bl	5e88 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   14ff6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14ffa:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
   14ffe:	4639      	mov	r1, r7
   15000:	4620      	mov	r0, r4
   15002:	f7ff f9cd 	bl	143a0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15006:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   1500a:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1500e:	429a      	cmp	r2, r3
   15010:	d01e      	beq.n	15050 <event_connection_prepare+0xb38>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15012:	2005      	movs	r0, #5
   15014:	f7fe fdfa 	bl	13c0c <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15018:	48b1      	ldr	r0, [pc, #708]	; (152e0 <event_connection_prepare+0xdc8>)
   1501a:	f7fb fa63 	bl	104e4 <mem_acquire>
		if (node_tx) {
   1501e:	4601      	mov	r1, r0
   15020:	b1b0      	cbz	r0, 15050 <event_connection_prepare+0xb38>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15022:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15026:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1502a:	7903      	ldrb	r3, [r0, #4]
   1502c:	f043 0303 	orr.w	r3, r3, #3
   15030:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15032:	2302      	movs	r3, #2
   15034:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   15036:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
   15038:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   1503c:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   1503e:	4620      	mov	r0, r4
   15040:	f7ff f9ae 	bl	143a0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15044:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
   15046:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   15048:	bf98      	it	ls
   1504a:	3301      	addls	r3, #1
   1504c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15050:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15054:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15058:	429a      	cmp	r2, r3
   1505a:	f000 832c 	beq.w	156b6 <event_connection_prepare+0x119e>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1505e:	2005      	movs	r0, #5
   15060:	f7fe fdd4 	bl	13c0c <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
   15064:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15068:	f003 0303 	and.w	r3, r3, #3
   1506c:	2b03      	cmp	r3, #3
   1506e:	f200 834d 	bhi.w	1570c <event_connection_prepare+0x11f4>
   15072:	e8df f013 	tbh	[pc, r3, lsl #1]
   15076:	02d1      	.short	0x02d1
   15078:	03200320 	.word	0x03200320
   1507c:	033c      	.short	0x033c
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1507e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15082:	1af3      	subs	r3, r6, r3
   15084:	0419      	lsls	r1, r3, #16
   15086:	d4be      	bmi.n	15006 <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   15088:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1508c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   15090:	f104 0717 	add.w	r7, r4, #23
   15094:	2205      	movs	r2, #5
   15096:	f104 0179 	add.w	r1, r4, #121	; 0x79
   1509a:	4638      	mov	r0, r7
   1509c:	f7f0 fef4 	bl	5e88 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   150a0:	2105      	movs	r1, #5
   150a2:	4638      	mov	r0, r7
   150a4:	f7fb fbc6 	bl	10834 <util_ones_count_get>
		conn->data_chan_count =
   150a8:	7f63      	ldrb	r3, [r4, #29]
   150aa:	f360 0305 	bfi	r3, r0, #0, #6
   150ae:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   150b0:	2301      	movs	r3, #1
   150b2:	7723      	strb	r3, [r4, #28]
   150b4:	e7a7      	b.n	15006 <event_connection_prepare+0xaee>
	if (conn->llcp.encryption.initiate) {
   150b6:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
   150ba:	f1b9 0f00 	cmp.w	r9, #0
   150be:	d1a2      	bne.n	15006 <event_connection_prepare+0xaee>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   150c0:	4887      	ldr	r0, [pc, #540]	; (152e0 <event_connection_prepare+0xdc8>)
   150c2:	f7fb fa0f 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   150c6:	4607      	mov	r7, r0
   150c8:	2800      	cmp	r0, #0
   150ca:	d09c      	beq.n	15006 <event_connection_prepare+0xaee>
	if (!conn->role) {
   150cc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   150d0:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   150d2:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   150d6:	db4d      	blt.n	15174 <event_connection_prepare+0xc5c>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   150d8:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
   150dc:	465b      	mov	r3, fp
   150de:	464a      	mov	r2, r9
   150e0:	f104 0194 	add.w	r1, r4, #148	; 0x94
   150e4:	f104 0084 	add.w	r0, r4, #132	; 0x84
   150e8:	f008 fb3a 	bl	1d760 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   150ec:	2210      	movs	r2, #16
   150ee:	4659      	mov	r1, fp
   150f0:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   150f4:	f7f0 fec8 	bl	5e88 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   150f8:	f504 7189 	add.w	r1, r4, #274	; 0x112
   150fc:	2208      	movs	r2, #8
   150fe:	f204 1033 	addw	r0, r4, #307	; 0x133
   15102:	f7f0 fec1 	bl	5e88 <memcpy>
		conn->ccm_rx.direction = 0;
   15106:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
   1510a:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
   1510e:	f369 0300 	bfi	r3, r9, #0, #1
   15112:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
   15116:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
   1511a:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
   1511e:	f043 0301 	orr.w	r3, r3, #1
   15122:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
   15126:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
   1512a:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
   1512e:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   15132:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
   15136:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   1513a:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   1513e:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   15142:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
   15146:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   1514a:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   1514e:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   15152:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
   15156:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   1515a:	4651      	mov	r1, sl
   1515c:	4620      	mov	r0, r4
   1515e:	f7ff f9ad 	bl	144bc <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   15162:	4639      	mov	r1, r7
   15164:	4620      	mov	r0, r4
   15166:	f7ff f91b 	bl	143a0 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   1516a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1516e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15172:	e748      	b.n	15006 <event_connection_prepare+0xaee>
	else if (!conn->pause_tx || conn->refresh) {
   15174:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15178:	f003 0348 	and.w	r3, r3, #72	; 0x48
   1517c:	2b08      	cmp	r3, #8
   1517e:	f000 809f 	beq.w	152c0 <event_connection_prepare+0xda8>
		if (conn->llcp.encryption.error_code) {
   15182:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
   15186:	f1b9 0f00 	cmp.w	r9, #0
   1518a:	d020      	beq.n	151ce <event_connection_prepare+0xcb6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1518c:	7903      	ldrb	r3, [r0, #4]
   1518e:	f043 0303 	orr.w	r3, r3, #3
   15192:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   15194:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15198:	069a      	lsls	r2, r3, #26
   1519a:	d512      	bpl.n	151c2 <event_connection_prepare+0xcaa>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   1519c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   151a0:	075b      	lsls	r3, r3, #29
   151a2:	d50e      	bpl.n	151c2 <event_connection_prepare+0xcaa>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   151a4:	2311      	movs	r3, #17
   151a6:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   151a8:	2303      	movs	r3, #3
   151aa:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   151ac:	f880 9009 	strb.w	r9, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   151b0:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   151b2:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   151b4:	797b      	ldrb	r3, [r7, #5]
   151b6:	3301      	adds	r3, #1
   151b8:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
   151ba:	2300      	movs	r3, #0
   151bc:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   151c0:	e7cf      	b.n	15162 <event_connection_prepare+0xc4a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   151c2:	230d      	movs	r3, #13
   151c4:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   151c6:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   151ca:	2301      	movs	r3, #1
   151cc:	e7f1      	b.n	151b2 <event_connection_prepare+0xc9a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   151ce:	4844      	ldr	r0, [pc, #272]	; (152e0 <event_connection_prepare+0xdc8>)
   151d0:	f7fb f988 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   151d4:	4682      	mov	sl, r0
   151d6:	2800      	cmp	r0, #0
   151d8:	d06d      	beq.n	152b6 <event_connection_prepare+0xd9e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   151da:	7903      	ldrb	r3, [r0, #4]
   151dc:	f043 0303 	orr.w	r3, r3, #3
   151e0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   151e2:	230d      	movs	r3, #13
   151e4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   151e6:	f04f 0b04 	mov.w	fp, #4
				pdu_ctrl_tx->llctrl.enc_rsp.skds,
   151ea:	f100 0308 	add.w	r3, r0, #8
	entropy_get_entropy_isr(_radio.entropy,
   151ee:	4619      	mov	r1, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   151f0:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy,
   151f4:	220c      	movs	r2, #12
   151f6:	6868      	ldr	r0, [r5, #4]
   151f8:	930a      	str	r3, [sp, #40]	; 0x28
   151fa:	f7fe ff03 	bl	14004 <entropy_get_entropy_isr.constprop.35>
	memcpy(&conn->llcp.encryption.skd[8],
   151fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15200:	2208      	movs	r2, #8
   15202:	4619      	mov	r1, r3
   15204:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   15208:	f7f0 fe3e 	bl	5e88 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   1520c:	465a      	mov	r2, fp
   1520e:	f10a 0110 	add.w	r1, sl, #16
   15212:	f504 708b 	add.w	r0, r4, #278	; 0x116
   15216:	f7f0 fe37 	bl	5e88 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   1521a:	4651      	mov	r1, sl
   1521c:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   1521e:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
   15222:	f7ff f8bd 	bl	143a0 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15226:	4653      	mov	r3, sl
   15228:	464a      	mov	r2, r9
   1522a:	f104 0194 	add.w	r1, r4, #148	; 0x94
   1522e:	f104 0084 	add.w	r0, r4, #132	; 0x84
   15232:	f008 fa95 	bl	1d760 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   15236:	2210      	movs	r2, #16
   15238:	4651      	mov	r1, sl
   1523a:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1523e:	f7f0 fe23 	bl	5e88 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15242:	2208      	movs	r2, #8
   15244:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15248:	f204 1033 	addw	r0, r4, #307	; 0x133
   1524c:	f7f0 fe1c 	bl	5e88 <memcpy>
			conn->ccm_rx.direction = 1;
   15250:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
   15254:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
   15258:	f043 0301 	orr.w	r3, r3, #1
   1525c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
   15260:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
   15264:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
   15268:	f369 0300 	bfi	r3, r9, #0, #1
   1526c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   15270:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
   15274:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
   15278:	f043 0310 	orr.w	r3, r3, #16
   1527c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15280:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
   15282:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15286:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   1528a:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   1528e:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   15292:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   15296:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   1529a:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   1529e:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   152a2:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   152a6:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   152aa:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   152ac:	2301      	movs	r3, #1
   152ae:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   152b0:	2305      	movs	r3, #5
   152b2:	71fb      	strb	r3, [r7, #7]
   152b4:	e755      	b.n	15162 <event_connection_prepare+0xc4a>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   152b6:	490a      	ldr	r1, [pc, #40]	; (152e0 <event_connection_prepare+0xdc8>)
   152b8:	4638      	mov	r0, r7
   152ba:	f7fb f92c 	bl	10516 <mem_release>
   152be:	e6a2      	b.n	15006 <event_connection_prepare+0xaee>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   152c0:	4651      	mov	r1, sl
   152c2:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
   152c6:	f7ff f8f9 	bl	144bc <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   152ca:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
   152ce:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   152d2:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
   152d6:	f369 03c3 	bfi	r3, r9, #3, #1
   152da:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   152de:	e740      	b.n	15162 <event_connection_prepare+0xc4a>
   152e0:	20001268 	.word	0x20001268
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   152e4:	48c4      	ldr	r0, [pc, #784]	; (155f8 <event_connection_prepare+0x10e0>)
   152e6:	f7fb f8fd 	bl	104e4 <mem_acquire>
	if (node_tx) {
   152ea:	4607      	mov	r7, r0
   152ec:	2800      	cmp	r0, #0
   152ee:	f43f ae8a 	beq.w	15006 <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   152f2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   152f6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   152fa:	4bc0      	ldr	r3, [pc, #768]	; (155fc <event_connection_prepare+0x10e4>)
   152fc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15300:	7903      	ldrb	r3, [r0, #4]
   15302:	f043 0303 	orr.w	r3, r3, #3
   15306:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   15308:	2309      	movs	r3, #9
   1530a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
   1530c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15310:	2b00      	cmp	r3, #0
   15312:	bfb4      	ite	lt
   15314:	230e      	movlt	r3, #14
   15316:	2308      	movge	r3, #8
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
   15318:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
   1531a:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
   1531c:	2100      	movs	r1, #0
   1531e:	4410      	add	r0, r2
   15320:	f7f0 fddf 	bl	5ee2 <memset>
			conn->llcp_features & 0xFF;
   15324:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
   15328:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
   1532a:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   1532c:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
   1532e:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
   15330:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
   15332:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
   15334:	4620      	mov	r0, r4
   15336:	f7ff f833 	bl	143a0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1533a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1533e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15342:	e660      	b.n	15006 <event_connection_prepare+0xaee>
	if (conn->llcp_version.tx == 0) {
   15344:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15348:	07df      	lsls	r7, r3, #31
   1534a:	d424      	bmi.n	15396 <event_connection_prepare+0xe7e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1534c:	48aa      	ldr	r0, [pc, #680]	; (155f8 <event_connection_prepare+0x10e0>)
   1534e:	f7fb f8c9 	bl	104e4 <mem_acquire>
		if (node_tx) {
   15352:	4601      	mov	r1, r0
   15354:	2800      	cmp	r0, #0
   15356:	f43f ae56 	beq.w	15006 <event_connection_prepare+0xaee>
			conn->llcp_ack = conn->llcp_req;
   1535a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1535e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   15362:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15366:	f043 0301 	orr.w	r3, r3, #1
   1536a:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1536e:	7903      	ldrb	r3, [r0, #4]
   15370:	f043 0303 	orr.w	r3, r3, #3
   15374:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   15376:	2306      	movs	r3, #6
   15378:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1537a:	230c      	movs	r3, #12
   1537c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
   1537e:	2309      	movs	r3, #9
   15380:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
   15382:	f06f 030e 	mvn.w	r3, #14
   15386:	7243      	strb	r3, [r0, #9]
   15388:	2305      	movs	r3, #5
   1538a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
   1538c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15390:	72c3      	strb	r3, [r0, #11]
   15392:	7303      	strb	r3, [r0, #12]
   15394:	e7ce      	b.n	15334 <event_connection_prepare+0xe1c>
	} else if (conn->llcp_version.rx != 0) {
   15396:	f013 0302 	ands.w	r3, r3, #2
   1539a:	d035      	beq.n	15408 <event_connection_prepare+0xef0>
		conn->llcp_ack = conn->llcp_req;
   1539c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   153a0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
   153a4:	2002      	movs	r0, #2
   153a6:	f7fc f929 	bl	115fc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   153aa:	b998      	cbnz	r0, 153d4 <event_connection_prepare+0xebc>
   153ac:	4b94      	ldr	r3, [pc, #592]	; (15600 <event_connection_prepare+0x10e8>)
   153ae:	681b      	ldr	r3, [r3, #0]
   153b0:	075c      	lsls	r4, r3, #29
   153b2:	f43f a8cf 	beq.w	14554 <event_connection_prepare+0x3c>
   153b6:	2301      	movs	r3, #1
   153b8:	f04f 0200 	mov.w	r2, #0
   153bc:	f363 0202 	bfi	r2, r3, #0, #3
   153c0:	4990      	ldr	r1, [pc, #576]	; (15604 <event_connection_prepare+0x10ec>)
   153c2:	4b91      	ldr	r3, [pc, #580]	; (15608 <event_connection_prepare+0x10f0>)
   153c4:	1a5b      	subs	r3, r3, r1
   153c6:	f360 02c5 	bfi	r2, r0, #3, #3
   153ca:	08db      	lsrs	r3, r3, #3
   153cc:	f363 128f 	bfi	r2, r3, #6, #10
   153d0:	498e      	ldr	r1, [pc, #568]	; (1560c <event_connection_prepare+0x10f4>)
   153d2:	e447      	b.n	14c64 <event_connection_prepare+0x74c>
		node_rx->hdr.handle = conn->handle;
   153d4:	8c23      	ldrh	r3, [r4, #32]
   153d6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   153d8:	2301      	movs	r3, #1
   153da:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   153dc:	7a03      	ldrb	r3, [r0, #8]
   153de:	f043 0303 	orr.w	r3, r3, #3
   153e2:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   153e4:	2306      	movs	r3, #6
   153e6:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
   153e8:	230c      	movs	r3, #12
   153ea:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
   153ec:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   153f0:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
   153f2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   153f6:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
   153fa:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   153fe:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   15402:	f7fd f85d 	bl	124c0 <packet_rx_enqueue>
   15406:	e5fe      	b.n	15006 <event_connection_prepare+0xaee>
		LL_ASSERT(0);
   15408:	4a7d      	ldr	r2, [pc, #500]	; (15600 <event_connection_prepare+0x10e8>)
   1540a:	6812      	ldr	r2, [r2, #0]
   1540c:	0750      	lsls	r0, r2, #29
   1540e:	f43f a8a1 	beq.w	14554 <event_connection_prepare+0x3c>
   15412:	2101      	movs	r1, #1
   15414:	f04f 0200 	mov.w	r2, #0
   15418:	f361 0202 	bfi	r2, r1, #0, #3
   1541c:	f363 02c5 	bfi	r2, r3, #3, #3
   15420:	4978      	ldr	r1, [pc, #480]	; (15604 <event_connection_prepare+0x10ec>)
   15422:	4b79      	ldr	r3, [pc, #484]	; (15608 <event_connection_prepare+0x10f0>)
   15424:	1a5b      	subs	r3, r3, r1
   15426:	08db      	lsrs	r3, r3, #3
   15428:	f363 128f 	bfi	r2, r3, #6, #10
   1542c:	4977      	ldr	r1, [pc, #476]	; (1560c <event_connection_prepare+0x10f4>)
   1542e:	f7ff ba58 	b.w	148e2 <event_connection_prepare+0x3ca>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15432:	4871      	ldr	r0, [pc, #452]	; (155f8 <event_connection_prepare+0x10e0>)
   15434:	f7fb f856 	bl	104e4 <mem_acquire>
	if (node_tx) {
   15438:	4601      	mov	r1, r0
   1543a:	2800      	cmp	r0, #0
   1543c:	f43f ade3 	beq.w	15006 <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   15440:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15444:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15448:	7903      	ldrb	r3, [r0, #4]
   1544a:	f043 0303 	orr.w	r3, r3, #3
   1544e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   15450:	2301      	movs	r3, #1
   15452:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   15454:	2312      	movs	r3, #18
   15456:	71c3      	strb	r3, [r0, #7]
   15458:	e76c      	b.n	15334 <event_connection_prepare+0xe1c>
	if (conn->llcp.phy_upd_ind.initiate) {
   1545a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1545e:	07d1      	lsls	r1, r2, #31
   15460:	d561      	bpl.n	15526 <event_connection_prepare+0x100e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15462:	4865      	ldr	r0, [pc, #404]	; (155f8 <event_connection_prepare+0x10e0>)
   15464:	f7fb f83e 	bl	104e4 <mem_acquire>
		if (node_tx) {
   15468:	4607      	mov	r7, r0
   1546a:	2800      	cmp	r0, #0
   1546c:	f43f adcb 	beq.w	15006 <event_connection_prepare+0xaee>
			conn->llcp.phy_upd_ind.initiate = 0;
   15470:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15474:	f36f 0300 	bfc	r3, #0, #1
   15478:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   1547c:	b2db      	uxtb	r3, r3
   1547e:	f3c3 0982 	ubfx	r9, r3, #2, #3
   15482:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
   15486:	d148      	bne.n	1551a <event_connection_prepare+0x1002>
				conn->llcp_ack = conn->llcp_req;
   15488:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1548c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
   15490:	079a      	lsls	r2, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
   15492:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   15496:	d52a      	bpl.n	154ee <event_connection_prepare+0xfd6>
					node_rx = packet_rx_reserve_get(2);
   15498:	2002      	movs	r0, #2
   1549a:	f7fc f8af 	bl	115fc <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
   1549e:	b9a0      	cbnz	r0, 154ca <event_connection_prepare+0xfb2>
		LL_ASSERT(node_rx);
   154a0:	4b57      	ldr	r3, [pc, #348]	; (15600 <event_connection_prepare+0x10e8>)
   154a2:	681b      	ldr	r3, [r3, #0]
   154a4:	075e      	lsls	r6, r3, #29
   154a6:	f43f a855 	beq.w	14554 <event_connection_prepare+0x3c>
   154aa:	2301      	movs	r3, #1
   154ac:	f04f 0200 	mov.w	r2, #0
   154b0:	f363 0202 	bfi	r2, r3, #0, #3
   154b4:	4953      	ldr	r1, [pc, #332]	; (15604 <event_connection_prepare+0x10ec>)
   154b6:	4b54      	ldr	r3, [pc, #336]	; (15608 <event_connection_prepare+0x10f0>)
   154b8:	1a5b      	subs	r3, r3, r1
   154ba:	f360 02c5 	bfi	r2, r0, #3, #3
   154be:	08db      	lsrs	r3, r3, #3
   154c0:	f363 128f 	bfi	r2, r3, #6, #10
   154c4:	4952      	ldr	r1, [pc, #328]	; (15610 <event_connection_prepare+0x10f8>)
   154c6:	f7ff bbcd 	b.w	14c64 <event_connection_prepare+0x74c>
					node_rx->hdr.handle = conn->handle;
   154ca:	8c23      	ldrh	r3, [r4, #32]
   154cc:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
   154ce:	f880 9008 	strb.w	r9, [r0, #8]
					node_rx->hdr.type =
   154d2:	230c      	movs	r3, #12
   154d4:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
   154d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   154da:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   154de:	7243      	strb	r3, [r0, #9]
					upd->rx = conn->phy_rx;
   154e0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   154e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   154e8:	7283      	strb	r3, [r0, #10]
					packet_rx_enqueue();
   154ea:	f7fc ffe9 	bl	124c0 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   154ee:	793b      	ldrb	r3, [r7, #4]
   154f0:	f043 0303 	orr.w	r3, r3, #3
   154f4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
   154f6:	2305      	movs	r3, #5
   154f8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   154fa:	2318      	movs	r3, #24
   154fc:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   154fe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15502:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15506:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15508:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1550c:	f3c3 1342 	ubfx	r3, r3, #5, #3
   15510:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
   15512:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   15516:	817b      	strh	r3, [r7, #10]
   15518:	e571      	b.n	14ffe <event_connection_prepare+0xae6>
								 conn->latency +
   1551a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1551c:	3306      	adds	r3, #6
   1551e:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
   15520:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
   15524:	e7e3      	b.n	154ee <event_connection_prepare+0xfd6>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   15526:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1552a:	1af3      	subs	r3, r6, r3
   1552c:	041b      	lsls	r3, r3, #16
   1552e:	f53f ad6a 	bmi.w	15006 <event_connection_prepare+0xaee>
		conn->llcp_ack = conn->llcp_req;
   15532:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15536:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
   1553a:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
   1553e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
   15542:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   15546:	bf18      	it	ne
   15548:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
   1554c:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   15550:	bf1c      	itt	ne
   15552:	f367 03c5 	bfine	r3, r7, #3, #3
   15556:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   1555a:	f012 0fe0 	tst.w	r2, #224	; 0xe0
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   1555e:	bf1f      	itttt	ne
   15560:	f894 303a 	ldrbne.w	r3, [r4, #58]	; 0x3a
   15564:	0957      	lsrne	r7, r2, #5
   15566:	f367 0302 	bfine	r3, r7, #0, #3
   1556a:	f884 303a 	strbne.w	r3, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   1556e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15572:	f3c3 1780 	ubfx	r7, r3, #6, #1
   15576:	f367 13c7 	bfi	r3, r7, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1557a:	0797      	lsls	r7, r2, #30
		old_rx = conn->phy_rx;
   1557c:	f001 0107 	and.w	r1, r1, #7
		conn->phy_flags = conn->phy_pref_flags;
   15580:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   15584:	d40b      	bmi.n	1559e <event_connection_prepare+0x1086>
   15586:	b2db      	uxtb	r3, r3
   15588:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1558c:	4283      	cmp	r3, r0
   1558e:	d106      	bne.n	1559e <event_connection_prepare+0x1086>
		    (conn->phy_rx == old_rx)) {
   15590:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   15594:	f003 0307 	and.w	r3, r3, #7
   15598:	428b      	cmp	r3, r1
   1559a:	f43f ad34 	beq.w	15006 <event_connection_prepare+0xaee>
		node_rx = packet_rx_reserve_get(2);
   1559e:	2002      	movs	r0, #2
   155a0:	f7fc f82c 	bl	115fc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   155a4:	2800      	cmp	r0, #0
   155a6:	f43f af7b 	beq.w	154a0 <event_connection_prepare+0xf88>
		node_rx->hdr.handle = conn->handle;
   155aa:	8c23      	ldrh	r3, [r4, #32]
   155ac:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   155ae:	230c      	movs	r3, #12
   155b0:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
   155b2:	2300      	movs	r3, #0
   155b4:	7203      	strb	r3, [r0, #8]
		upd->tx = conn->phy_tx;
   155b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   155ba:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   155be:	7243      	strb	r3, [r0, #9]
		upd->rx = conn->phy_rx;
   155c0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   155c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   155c8:	7283      	strb	r3, [r0, #10]
   155ca:	e71a      	b.n	15402 <event_connection_prepare+0xeea>
			LL_ASSERT(0);
   155cc:	4b0c      	ldr	r3, [pc, #48]	; (15600 <event_connection_prepare+0x10e8>)
   155ce:	681b      	ldr	r3, [r3, #0]
   155d0:	075d      	lsls	r5, r3, #29
   155d2:	f43e afbf 	beq.w	14554 <event_connection_prepare+0x3c>
   155d6:	2301      	movs	r3, #1
   155d8:	f04f 0200 	mov.w	r2, #0
   155dc:	f363 0202 	bfi	r2, r3, #0, #3
   155e0:	4908      	ldr	r1, [pc, #32]	; (15604 <event_connection_prepare+0x10ec>)
   155e2:	4b09      	ldr	r3, [pc, #36]	; (15608 <event_connection_prepare+0x10f0>)
   155e4:	1a5b      	subs	r3, r3, r1
   155e6:	f36f 02c5 	bfc	r2, #3, #3
   155ea:	08db      	lsrs	r3, r3, #3
   155ec:	f363 128f 	bfi	r2, r3, #6, #10
   155f0:	4908      	ldr	r1, [pc, #32]	; (15614 <event_connection_prepare+0x10fc>)
   155f2:	f7ff b976 	b.w	148e2 <event_connection_prepare+0x3ca>
   155f6:	bf00      	nop
   155f8:	20001268 	.word	0x20001268
   155fc:	000141ff 	.word	0x000141ff
   15600:	2000d72c 	.word	0x2000d72c
   15604:	0002cff8 	.word	0x0002cff8
   15608:	0002d030 	.word	0x0002d030
   1560c:	0003083f 	.word	0x0003083f
   15610:	0003089b 	.word	0x0003089b
   15614:	000308b2 	.word	0x000308b2
		free_count_rx = packet_rx_acquired_count_get() +
   15618:	f7fb ffda 	bl	115d0 <packet_rx_acquired_count_get>
   1561c:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   1561e:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   15622:	f7fa ff8d 	bl	10540 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   15626:	4438      	add	r0, r7
   15628:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   1562a:	28ff      	cmp	r0, #255	; 0xff
   1562c:	d915      	bls.n	1565a <event_connection_prepare+0x1142>
		LL_ASSERT(free_count_rx <= 0xFF);
   1562e:	4ba7      	ldr	r3, [pc, #668]	; (158cc <event_connection_prepare+0x13b4>)
   15630:	681b      	ldr	r3, [r3, #0]
   15632:	075c      	lsls	r4, r3, #29
   15634:	f43e af8e 	beq.w	14554 <event_connection_prepare+0x3c>
   15638:	2301      	movs	r3, #1
   1563a:	f04f 0200 	mov.w	r2, #0
   1563e:	f363 0202 	bfi	r2, r3, #0, #3
   15642:	49a3      	ldr	r1, [pc, #652]	; (158d0 <event_connection_prepare+0x13b8>)
   15644:	4ba3      	ldr	r3, [pc, #652]	; (158d4 <event_connection_prepare+0x13bc>)
   15646:	48a4      	ldr	r0, [pc, #656]	; (158d8 <event_connection_prepare+0x13c0>)
   15648:	1a5b      	subs	r3, r3, r1
   1564a:	f36f 02c5 	bfc	r2, #3, #3
   1564e:	08db      	lsrs	r3, r3, #3
   15650:	f363 128f 	bfi	r2, r3, #6, #10
   15654:	49a1      	ldr	r1, [pc, #644]	; (158dc <event_connection_prepare+0x13c4>)
   15656:	f7fe bf7b 	b.w	14550 <event_connection_prepare+0x38>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1565a:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
   1565e:	4283      	cmp	r3, r0
   15660:	d129      	bne.n	156b6 <event_connection_prepare+0x119e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15662:	489f      	ldr	r0, [pc, #636]	; (158e0 <event_connection_prepare+0x13c8>)
   15664:	f7fa ff3e 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   15668:	4601      	mov	r1, r0
   1566a:	b320      	cbz	r0, 156b6 <event_connection_prepare+0x119e>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   1566c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
   15670:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15674:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
   15678:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   1567a:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1567c:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   1567e:	f365 0301 	bfi	r3, r5, #0, #2
   15682:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15686:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
   15688:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1568a:	f043 0303 	orr.w	r3, r3, #3
   1568e:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   15690:	2309      	movs	r3, #9
   15692:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15694:	2314      	movs	r3, #20
   15696:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   15698:	231b      	movs	r3, #27
   1569a:	720b      	strb	r3, [r1, #8]
   1569c:	2300      	movs	r3, #0
   1569e:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   156a0:	2348      	movs	r3, #72	; 0x48
   156a2:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
   156a4:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   156a6:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
   156a8:	4620      	mov	r0, r4
   156aa:	f7fe fe79 	bl	143a0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   156ae:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   156b2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
   156b6:	f894 3020 	ldrb.w	r3, [r4, #32]
   156ba:	f994 501d 	ldrsb.w	r5, [r4, #29]
   156be:	4889      	ldr	r0, [pc, #548]	; (158e4 <event_connection_prepare+0x13cc>)
   156c0:	4989      	ldr	r1, [pc, #548]	; (158e8 <event_connection_prepare+0x13d0>)
   156c2:	68a2      	ldr	r2, [r4, #8]
   156c4:	3307      	adds	r3, #7
   156c6:	ea31 0125 	bics.w	r1, r1, r5, asr #32
   156ca:	bf28      	it	cs
   156cc:	4601      	movcs	r1, r0
   156ce:	b2db      	uxtb	r3, r3
   156d0:	e9cd 2300 	strd	r2, r3, [sp]
   156d4:	e9cd 1402 	strd	r1, r4, [sp, #8]
   156d8:	1d23      	adds	r3, r4, #4
   156da:	4622      	mov	r2, r4
   156dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   156de:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
   156e0:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   156e2:	f7fe faa1 	bl	13c28 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   156e6:	8466      	strh	r6, [r4, #34]	; 0x22
}
   156e8:	b00f      	add	sp, #60	; 0x3c
   156ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
   156ee:	f7fb ff6f 	bl	115d0 <packet_rx_acquired_count_get>
   156f2:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   156f4:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   156f8:	f7fa ff22 	bl	10540 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   156fc:	4438      	add	r0, r7
   156fe:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   15700:	28ff      	cmp	r0, #255	; 0xff
   15702:	d894      	bhi.n	1562e <event_connection_prepare+0x1116>
		if (_radio.packet_rx_data_count != free_count_rx) {
   15704:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
   15708:	4283      	cmp	r3, r0
   1570a:	d014      	beq.n	15736 <event_connection_prepare+0x121e>
		LL_ASSERT(0);
   1570c:	4b6f      	ldr	r3, [pc, #444]	; (158cc <event_connection_prepare+0x13b4>)
   1570e:	681b      	ldr	r3, [r3, #0]
   15710:	075b      	lsls	r3, r3, #29
   15712:	f43e af1f 	beq.w	14554 <event_connection_prepare+0x3c>
   15716:	2301      	movs	r3, #1
   15718:	f04f 0200 	mov.w	r2, #0
   1571c:	f363 0202 	bfi	r2, r3, #0, #3
   15720:	496b      	ldr	r1, [pc, #428]	; (158d0 <event_connection_prepare+0x13b8>)
   15722:	4b6c      	ldr	r3, [pc, #432]	; (158d4 <event_connection_prepare+0x13bc>)
   15724:	1a5b      	subs	r3, r3, r1
   15726:	f36f 02c5 	bfc	r2, #3, #3
   1572a:	08db      	lsrs	r3, r3, #3
   1572c:	f363 128f 	bfi	r2, r3, #6, #10
   15730:	496a      	ldr	r1, [pc, #424]	; (158dc <event_connection_prepare+0x13c4>)
   15732:	f7ff b8d6 	b.w	148e2 <event_connection_prepare+0x3ca>
		conn->llcp_length.ack = conn->llcp_length.req;
   15736:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1573a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_length.pause_tx = 0;
   1573e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		free_count_conn = mem_free_count_get(_radio.conn_free);
   15742:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
		conn->llcp_length.pause_tx = 0;
   15746:	f36f 0382 	bfc	r3, #2, #1
   1574a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->procedure_expire = 0;
   1574e:	2300      	movs	r3, #0
   15750:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   15754:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   15758:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   1575a:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   1575e:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   15760:	f7fa feee 	bl	10540 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   15764:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   15768:	b10b      	cbz	r3, 1576e <event_connection_prepare+0x1256>
			free_count_conn++;
   1576a:	3001      	adds	r0, #1
   1576c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   1576e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   15772:	b10b      	cbz	r3, 15778 <event_connection_prepare+0x1260>
			free_count_conn++;
   15774:	3001      	adds	r0, #1
   15776:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   15778:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
   1577a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   1577e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
   15780:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   15782:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
   15786:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   15788:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
   1578a:	d07c      	beq.n	15886 <event_connection_prepare+0x136e>
   1578c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
   15790:	42bb      	cmp	r3, r7
   15792:	d378      	bcc.n	15886 <event_connection_prepare+0x136e>
		node_rx = packet_rx_reserve_get(2);
   15794:	2002      	movs	r0, #2
   15796:	f7fb ff31 	bl	115fc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   1579a:	2800      	cmp	r0, #0
   1579c:	d17f      	bne.n	1589e <event_connection_prepare+0x1386>
   1579e:	4b4b      	ldr	r3, [pc, #300]	; (158cc <event_connection_prepare+0x13b4>)
   157a0:	681b      	ldr	r3, [r3, #0]
   157a2:	075a      	lsls	r2, r3, #29
   157a4:	f43e aed6 	beq.w	14554 <event_connection_prepare+0x3c>
   157a8:	2301      	movs	r3, #1
   157aa:	f04f 0200 	mov.w	r2, #0
   157ae:	f363 0202 	bfi	r2, r3, #0, #3
   157b2:	4947      	ldr	r1, [pc, #284]	; (158d0 <event_connection_prepare+0x13b8>)
   157b4:	4b47      	ldr	r3, [pc, #284]	; (158d4 <event_connection_prepare+0x13bc>)
   157b6:	1a5b      	subs	r3, r3, r1
   157b8:	f360 02c5 	bfi	r2, r0, #3, #3
   157bc:	08db      	lsrs	r3, r3, #3
   157be:	f363 128f 	bfi	r2, r3, #6, #10
   157c2:	4946      	ldr	r1, [pc, #280]	; (158dc <event_connection_prepare+0x13c4>)
   157c4:	f7ff ba4e 	b.w	14c64 <event_connection_prepare+0x74c>
				if (_radio.packet_rx_acquire == 0) {
   157c8:	b90b      	cbnz	r3, 157ce <event_connection_prepare+0x12b6>
						_radio.packet_rx_count - 1;
   157ca:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
   157ce:	3b01      	subs	r3, #1
   157d0:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
   157d4:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
   157d8:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
   157dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   157e0:	4649      	mov	r1, r9
   157e2:	6818      	ldr	r0, [r3, #0]
   157e4:	f7fa fe97 	bl	10516 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   157e8:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
   157ec:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   157f0:	3a01      	subs	r2, #1
   157f2:	4293      	cmp	r3, r2
   157f4:	db15      	blt.n	15822 <event_connection_prepare+0x130a>
   157f6:	4b35      	ldr	r3, [pc, #212]	; (158cc <event_connection_prepare+0x13b4>)
   157f8:	681b      	ldr	r3, [r3, #0]
   157fa:	0758      	lsls	r0, r3, #29
   157fc:	f43e aeaa 	beq.w	14554 <event_connection_prepare+0x3c>
   15800:	2301      	movs	r3, #1
   15802:	f04f 0200 	mov.w	r2, #0
   15806:	f363 0202 	bfi	r2, r3, #0, #3
   1580a:	4931      	ldr	r1, [pc, #196]	; (158d0 <event_connection_prepare+0x13b8>)
   1580c:	4b31      	ldr	r3, [pc, #196]	; (158d4 <event_connection_prepare+0x13bc>)
   1580e:	4837      	ldr	r0, [pc, #220]	; (158ec <event_connection_prepare+0x13d4>)
   15810:	1a5b      	subs	r3, r3, r1
   15812:	f36f 02c5 	bfc	r2, #3, #3
   15816:	08db      	lsrs	r3, r3, #3
   15818:	f363 128f 	bfi	r2, r3, #6, #10
   1581c:	492f      	ldr	r1, [pc, #188]	; (158dc <event_connection_prepare+0x13c4>)
   1581e:	f7fe be97 	b.w	14550 <event_connection_prepare+0x38>
				_radio.link_rx_data_quota++;
   15822:	3301      	adds	r3, #1
   15824:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
   15828:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
   1582c:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
   15830:	4293      	cmp	r3, r2
   15832:	d1c9      	bne.n	157c8 <event_connection_prepare+0x12b0>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   15834:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
   15836:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   1583a:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
   1583c:	bf9a      	itte	ls
   1583e:	2334      	movls	r3, #52	; 0x34
   15840:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
   15844:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
   15848:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
   1584c:	fbb2 f2f1 	udiv	r2, r2, r1
   15850:	b2d2      	uxtb	r2, r2
   15852:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
   15856:	b9ca      	cbnz	r2, 1588c <event_connection_prepare+0x1374>
   15858:	4b1c      	ldr	r3, [pc, #112]	; (158cc <event_connection_prepare+0x13b4>)
   1585a:	681b      	ldr	r3, [r3, #0]
   1585c:	0759      	lsls	r1, r3, #29
   1585e:	f43e ae79 	beq.w	14554 <event_connection_prepare+0x3c>
   15862:	2301      	movs	r3, #1
   15864:	f04f 0100 	mov.w	r1, #0
   15868:	f363 0102 	bfi	r1, r3, #0, #3
   1586c:	f362 01c5 	bfi	r1, r2, #3, #3
   15870:	4b18      	ldr	r3, [pc, #96]	; (158d4 <event_connection_prepare+0x13bc>)
   15872:	4a17      	ldr	r2, [pc, #92]	; (158d0 <event_connection_prepare+0x13b8>)
   15874:	481e      	ldr	r0, [pc, #120]	; (158f0 <event_connection_prepare+0x13d8>)
   15876:	1a9b      	subs	r3, r3, r2
   15878:	08db      	lsrs	r3, r3, #3
   1587a:	f363 118f 	bfi	r1, r3, #6, #10
   1587e:	460a      	mov	r2, r1
   15880:	4916      	ldr	r1, [pc, #88]	; (158dc <event_connection_prepare+0x13c4>)
   15882:	f7fe be65 	b.w	14550 <event_connection_prepare+0x38>
				mem_release(node_rx->hdr.onion.link,
   15886:	f8df 9070 	ldr.w	r9, [pc, #112]	; 158f8 <event_connection_prepare+0x13e0>
   1588a:	e7cd      	b.n	15828 <event_connection_prepare+0x1310>
			mem_init(_radio.pkt_rx_data_pool,
   1588c:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
   15890:	4b18      	ldr	r3, [pc, #96]	; (158f4 <event_connection_prepare+0x13dc>)
   15892:	f7fa fe03 	bl	1049c <mem_init>
			packet_rx_allocate(4);
   15896:	2004      	movs	r0, #4
   15898:	f7fb ff2a 	bl	116f0 <packet_rx_allocate>
   1589c:	e77a      	b.n	15794 <event_connection_prepare+0x127c>
		node_rx->hdr.handle = conn->handle;
   1589e:	8c23      	ldrh	r3, [r4, #32]
   158a0:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   158a2:	2301      	movs	r3, #1
   158a4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   158a6:	7a03      	ldrb	r3, [r0, #8]
   158a8:	f043 0303 	orr.w	r3, r3, #3
   158ac:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   158ae:	2309      	movs	r3, #9
   158b0:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   158b2:	2315      	movs	r3, #21
   158b4:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   158b6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   158b8:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   158ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   158bc:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
   158be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   158c0:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
   158c2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   158c4:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
   158c6:	f7fc fdfb 	bl	124c0 <packet_rx_enqueue>
   158ca:	e6f4      	b.n	156b6 <event_connection_prepare+0x119e>
   158cc:	2000d72c 	.word	0x2000d72c
   158d0:	0002cff8 	.word	0x0002cff8
   158d4:	0002d030 	.word	0x0002d030
   158d8:	00030a44 	.word	0x00030a44
   158dc:	00030879 	.word	0x00030879
   158e0:	20001268 	.word	0x20001268
   158e4:	0001416d 	.word	0x0001416d
   158e8:	00015a0d 	.word	0x00015a0d
   158ec:	00030a6f 	.word	0x00030a6f
   158f0:	00030abd 	.word	0x00030abd
   158f4:	2000123c 	.word	0x2000123c
   158f8:	20001254 	.word	0x20001254

000158fc <event_slave_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   158fc:	f7fe be0c 	b.w	14518 <event_connection_prepare>

00015900 <event_master_prepare>:
   15900:	f7fe be0a 	b.w	14518 <event_connection_prepare>

00015904 <prepare_pdu_data_tx>:
{
   15904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	    conn->empty ||
   15908:	f890 e0f8 	ldrb.w	lr, [r0, #248]	; 0xf8
	if (/* empty packet */
   1590c:	f01e 0f80 	tst.w	lr, #128	; 0x80
{
   15910:	4604      	mov	r4, r0
   15912:	460e      	mov	r6, r1
	if (/* empty packet */
   15914:	d10d      	bne.n	15932 <prepare_pdu_data_tx+0x2e>
	    !conn->pkt_tx_head ||
   15916:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
   1591a:	b151      	cbz	r1, 15932 <prepare_pdu_data_tx+0x2e>
	    !conn->pkt_tx_head ||
   1591c:	f01e 0f08 	tst.w	lr, #8
   15920:	f8d0 c140 	ldr.w	ip, [r0, #320]	; 0x140
   15924:	d103      	bne.n	1592e <prepare_pdu_data_tx+0x2a>
	    ((conn->pause_tx ||
   15926:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
	      conn->llcp_length.pause_tx ||
   1592a:	075b      	lsls	r3, r3, #29
   1592c:	d523      	bpl.n	15976 <prepare_pdu_data_tx+0x72>
	      0) && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   1592e:	4561      	cmp	r1, ip
   15930:	d021      	beq.n	15976 <prepare_pdu_data_tx+0x72>
	conn->empty = 1;
   15932:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1593a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   1593e:	f008 f8f3 	bl	1db28 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   15942:	7803      	ldrb	r3, [r0, #0]
   15944:	2201      	movs	r2, #1
   15946:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   1594a:	2200      	movs	r2, #0
   1594c:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   1594e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   15952:	7003      	strb	r3, [r0, #0]
   15954:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   15956:	b15a      	cbz	r2, 15970 <prepare_pdu_data_tx+0x6c>
		pdu_data_tx->md = 1;
   15958:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   1595c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   1595e:	7803      	ldrb	r3, [r0, #0]
   15960:	f36f 1347 	bfc	r3, #5, #3
   15964:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   15966:	2300      	movs	r3, #0
   15968:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   1596a:	6030      	str	r0, [r6, #0]
}
   1596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
   15970:	f362 1304 	bfi	r3, r2, #4, #1
   15974:	e7f2      	b.n	1595c <prepare_pdu_data_tx+0x58>
					conn->packet_tx_head_offset);
   15976:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
   1597a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   1597e:	1d0d      	adds	r5, r1, #4
   15980:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
   15982:	b913      	cbnz	r3, 1598a <prepare_pdu_data_tx+0x86>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   15984:	7843      	ldrb	r3, [r0, #1]
   15986:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   1598a:	b122      	cbz	r2, 15996 <prepare_pdu_data_tx+0x92>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1598c:	5cab      	ldrb	r3, [r5, r2]
   1598e:	2701      	movs	r7, #1
   15990:	f367 0301 	bfi	r3, r7, #0, #2
   15994:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   15996:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
   1599a:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
   1599e:	1abf      	subs	r7, r7, r2
   159a0:	b2ff      	uxtb	r7, r7
   159a2:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
   159a4:	5cab      	ldrb	r3, [r5, r2]
   159a6:	f36f 1304 	bfc	r3, #4, #1
   159aa:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
   159ac:	f008 0807 	and.w	r8, r8, #7
   159b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   159b2:	f1b8 0f02 	cmp.w	r8, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   159b6:	bf15      	itete	ne
   159b8:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   159ba:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   159bc:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   159be:	3b0b      	subeq	r3, #11
   159c0:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
   159c2:	f01e 0f20 	tst.w	lr, #32
			max_tx_octets -= 4;
   159c6:	bf18      	it	ne
   159c8:	3b04      	subne	r3, #4
   159ca:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
   159ce:	bf18      	it	ne
   159d0:	b29b      	uxthne	r3, r3
   159d2:	4573      	cmp	r3, lr
   159d4:	bf28      	it	cs
   159d6:	4673      	movcs	r3, lr
		if (_pdu_data_tx->len > max_tx_octets) {
   159d8:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
   159da:	bf81      	itttt	hi
   159dc:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
   159de:	5cab      	ldrbhi	r3, [r5, r2]
   159e0:	f043 0310 	orrhi.w	r3, r3, #16
   159e4:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
   159e6:	680b      	ldr	r3, [r1, #0]
   159e8:	b11b      	cbz	r3, 159f2 <prepare_pdu_data_tx+0xee>
			_pdu_data_tx->md = 1;
   159ea:	5cab      	ldrb	r3, [r5, r2]
   159ec:	f043 0310 	orr.w	r3, r3, #16
   159f0:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
   159f2:	f1bc 0f00 	cmp.w	ip, #0
   159f6:	d1b2      	bne.n	1595e <prepare_pdu_data_tx+0x5a>
   159f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   159fc:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   159fe:	bf1c      	itt	ne
   15a00:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
   15a04:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
   15a08:	e7a9      	b.n	1595e <prepare_pdu_data_tx+0x5a>
	...

00015a0c <event_master>:
{
   15a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15a0e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   15a10:	4b69      	ldr	r3, [pc, #420]	; (15bb8 <event_master+0x1ac>)
   15a12:	7d1a      	ldrb	r2, [r3, #20]
{
   15a14:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   15a16:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   15a1a:	461d      	mov	r5, r3
   15a1c:	b1d2      	cbz	r2, 15a54 <event_master+0x48>
   15a1e:	4b67      	ldr	r3, [pc, #412]	; (15bbc <event_master+0x1b0>)
   15a20:	681b      	ldr	r3, [r3, #0]
   15a22:	075d      	lsls	r5, r3, #29
   15a24:	d010      	beq.n	15a48 <event_master+0x3c>
   15a26:	2301      	movs	r3, #1
   15a28:	f04f 0200 	mov.w	r2, #0
   15a2c:	f363 0202 	bfi	r2, r3, #0, #3
   15a30:	4963      	ldr	r1, [pc, #396]	; (15bc0 <event_master+0x1b4>)
   15a32:	4b64      	ldr	r3, [pc, #400]	; (15bc4 <event_master+0x1b8>)
   15a34:	4864      	ldr	r0, [pc, #400]	; (15bc8 <event_master+0x1bc>)
   15a36:	1a5b      	subs	r3, r3, r1
   15a38:	f36f 02c5 	bfc	r2, #3, #3
   15a3c:	08db      	lsrs	r3, r3, #3
   15a3e:	4963      	ldr	r1, [pc, #396]	; (15bcc <event_master+0x1c0>)
   15a40:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15a44:	f7ec f988 	bl	1d58 <log_1>
   15a48:	4040      	eors	r0, r0
   15a4a:	f380 8811 	msr	BASEPRI, r0
   15a4e:	f04f 0004 	mov.w	r0, #4
   15a52:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   15a54:	7c5b      	ldrb	r3, [r3, #17]
   15a56:	8c22      	ldrh	r2, [r4, #32]
   15a58:	b2db      	uxtb	r3, r3
   15a5a:	3207      	adds	r2, #7
   15a5c:	4293      	cmp	r3, r2
   15a5e:	d013      	beq.n	15a88 <event_master+0x7c>
   15a60:	4b56      	ldr	r3, [pc, #344]	; (15bbc <event_master+0x1b0>)
   15a62:	681b      	ldr	r3, [r3, #0]
   15a64:	075c      	lsls	r4, r3, #29
   15a66:	d0ef      	beq.n	15a48 <event_master+0x3c>
   15a68:	2301      	movs	r3, #1
   15a6a:	f04f 0200 	mov.w	r2, #0
   15a6e:	f363 0202 	bfi	r2, r3, #0, #3
   15a72:	f361 02c5 	bfi	r2, r1, #3, #3
   15a76:	4b53      	ldr	r3, [pc, #332]	; (15bc4 <event_master+0x1b8>)
   15a78:	4951      	ldr	r1, [pc, #324]	; (15bc0 <event_master+0x1b4>)
   15a7a:	4855      	ldr	r0, [pc, #340]	; (15bd0 <event_master+0x1c4>)
   15a7c:	1a5b      	subs	r3, r3, r1
   15a7e:	08db      	lsrs	r3, r3, #3
   15a80:	f363 128f 	bfi	r2, r3, #6, #10
   15a84:	4951      	ldr	r1, [pc, #324]	; (15bcc <event_master+0x1c0>)
   15a86:	e7dd      	b.n	15a44 <event_master+0x38>
	_radio.packet_counter = 0;
   15a88:	f8a5 1118 	strh.w	r1, [r5, #280]	; 0x118
	_radio.role = ROLE_MASTER;
   15a8c:	2204      	movs	r2, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   15a8e:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   15a90:	752a      	strb	r2, [r5, #20]
	_radio.ticker_id_prepare = 0;
   15a92:	7469      	strb	r1, [r5, #17]
	_radio.ticker_id_event =
   15a94:	74ab      	strb	r3, [r5, #18]
	conn->latency_event = conn->latency_prepare;
   15a96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   15a98:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
   15a9c:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   15a9e:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   15aa0:	8521      	strh	r1, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   15aa2:	7568      	strb	r0, [r5, #21]
	_radio.ticks_anchor = ticks_at_expire;
   15aa4:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
   15aa6:	f7fd f8ff 	bl	12ca8 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   15aaa:	a901      	add	r1, sp, #4
   15aac:	4620      	mov	r0, r4
   15aae:	f7ff ff29 	bl	15904 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   15ab2:	9901      	ldr	r1, [sp, #4]
   15ab4:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   15ab8:	780b      	ldrb	r3, [r1, #0]
   15aba:	f3c2 0200 	ubfx	r2, r2, #0, #1
   15abe:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   15ac2:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   15ac6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15aca:	f362 0382 	bfi	r3, r2, #2, #1
   15ace:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   15ad0:	4620      	mov	r0, r4
   15ad2:	f7fe fb2d 	bl	14130 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   15ad6:	2096      	movs	r0, #150	; 0x96
   15ad8:	f008 f8ca 	bl	1dc70 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   15adc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15ae0:	f000 0007 	and.w	r0, r0, #7
   15ae4:	f008 f828 	bl	1db38 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   15ae8:	4620      	mov	r0, r4
   15aea:	9901      	ldr	r1, [sp, #4]
   15aec:	f7fc f9e6 	bl	11ebc <tx_packet_set>
	if (conn->data_chan_sel) {
   15af0:	7f63      	ldrb	r3, [r4, #29]
   15af2:	0658      	lsls	r0, r3, #25
   15af4:	f104 0217 	add.w	r2, r4, #23
   15af8:	d521      	bpl.n	15b3e <event_master+0x132>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   15afa:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   15afc:	8be1      	ldrh	r1, [r4, #30]
   15afe:	3801      	subs	r0, #1
   15b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b04:	b280      	uxth	r0, r0
   15b06:	f7fe facf 	bl	140a8 <chan_sel_2>
	chan_set(data_chan_use);
   15b0a:	f7fd f9df 	bl	12ecc <chan_set>
		remainder_us = radio_tmr_start(1,
   15b0e:	68ea      	ldr	r2, [r5, #12]
   15b10:	f107 0109 	add.w	r1, r7, #9
   15b14:	2001      	movs	r0, #1
   15b16:	f008 f8b7 	bl	1dc88 <radio_tmr_start>
		radio_tmr_end_capture();
   15b1a:	f008 f987 	bl	1de2c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   15b1e:	f894 1020 	ldrb.w	r1, [r4, #32]
   15b22:	3107      	adds	r1, #7
   15b24:	4620      	mov	r0, r4
   15b26:	463a      	mov	r2, r7
   15b28:	b2c9      	uxtb	r1, r1
   15b2a:	f7fd fe69 	bl	13800 <preempt_calc>
	if (0 !=
   15b2e:	4604      	mov	r4, r0
   15b30:	b328      	cbz	r0, 15b7e <event_master+0x172>
		_radio.state = STATE_STOP;
   15b32:	2304      	movs	r3, #4
   15b34:	756b      	strb	r3, [r5, #21]
		radio_disable();
   15b36:	f007 ffa5 	bl	1da84 <radio_disable>
}
   15b3a:	b003      	add	sp, #12
   15b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   15b3e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   15b40:	7fa6      	ldrb	r6, [r4, #30]
   15b42:	fb01 6606 	mla	r6, r1, r6, r6
   15b46:	7fe1      	ldrb	r1, [r4, #31]
   15b48:	2025      	movs	r0, #37	; 0x25
   15b4a:	440e      	add	r6, r1
   15b4c:	fb96 f1f0 	sdiv	r1, r6, r0
   15b50:	fb00 6611 	mls	r6, r0, r1, r6
   15b54:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   15b56:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   15b58:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   15b5a:	5c51      	ldrb	r1, [r2, r1]
   15b5c:	f006 0607 	and.w	r6, r6, #7
   15b60:	fa41 f606 	asr.w	r6, r1, r6
   15b64:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   15b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   15b6a:	d4ce      	bmi.n	15b0a <event_master+0xfe>
		chan_index = chan_next % chan_count;
   15b6c:	fbb0 f1f3 	udiv	r1, r0, r3
   15b70:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   15b74:	b2c9      	uxtb	r1, r1
   15b76:	4610      	mov	r0, r2
   15b78:	f7fb fd0e 	bl	11598 <chan_sel_remap>
   15b7c:	e7c5      	b.n	15b0a <event_master+0xfe>
		ticker_status =
   15b7e:	4603      	mov	r3, r0
   15b80:	4a14      	ldr	r2, [pc, #80]	; (15bd4 <event_master+0x1c8>)
   15b82:	4601      	mov	r1, r0
   15b84:	f7fb fc40 	bl	11408 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15b88:	f030 0302 	bics.w	r3, r0, #2
   15b8c:	d0d5      	beq.n	15b3a <event_master+0x12e>
   15b8e:	4b0b      	ldr	r3, [pc, #44]	; (15bbc <event_master+0x1b0>)
   15b90:	681b      	ldr	r3, [r3, #0]
   15b92:	075b      	lsls	r3, r3, #29
   15b94:	f43f af58 	beq.w	15a48 <event_master+0x3c>
   15b98:	2301      	movs	r3, #1
   15b9a:	f04f 0200 	mov.w	r2, #0
   15b9e:	f363 0202 	bfi	r2, r3, #0, #3
   15ba2:	4907      	ldr	r1, [pc, #28]	; (15bc0 <event_master+0x1b4>)
   15ba4:	4b07      	ldr	r3, [pc, #28]	; (15bc4 <event_master+0x1b8>)
   15ba6:	480c      	ldr	r0, [pc, #48]	; (15bd8 <event_master+0x1cc>)
   15ba8:	1a5b      	subs	r3, r3, r1
   15baa:	f364 02c5 	bfi	r2, r4, #3, #3
   15bae:	08db      	lsrs	r3, r3, #3
   15bb0:	f363 128f 	bfi	r2, r3, #6, #10
   15bb4:	4905      	ldr	r1, [pc, #20]	; (15bcc <event_master+0x1c0>)
   15bb6:	e745      	b.n	15a44 <event_master+0x38>
   15bb8:	2000110c 	.word	0x2000110c
   15bbc:	2000d72c 	.word	0x2000d72c
   15bc0:	0002cff8 	.word	0x0002cff8
   15bc4:	0002d030 	.word	0x0002d030
   15bc8:	00030aee 	.word	0x00030aee
   15bcc:	000308d7 	.word	0x000308d7
   15bd0:	00030b7d 	.word	0x00030b7d
   15bd4:	000129a5 	.word	0x000129a5
   15bd8:	000309cf 	.word	0x000309cf

00015bdc <isr_rx_conn_pkt_ctrl>:
{
   15bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
   15be0:	7ac7      	ldrb	r7, [r0, #11]
{
   15be2:	4604      	mov	r4, r0
   15be4:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
   15be6:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
   15bea:	2f19      	cmp	r7, #25
   15bec:	f201 8182 	bhi.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   15bf0:	e8df f017 	tbh	[pc, r7, lsl #1]
   15bf4:	007e001a 	.word	0x007e001a
   15bf8:	00d800ca 	.word	0x00d800ca
   15bfc:	012e0106 	.word	0x012e0106
   15c00:	05f8016c 	.word	0x05f8016c
   15c04:	01d501a4 	.word	0x01d501a4
   15c08:	022d0203 	.word	0x022d0203
   15c0c:	02c7025e 	.word	0x02c7025e
   15c10:	02df01ca 	.word	0x02df01ca
   15c14:	04e5045c 	.word	0x04e5045c
   15c18:	05dc05c2 	.word	0x05dc05c2
   15c1c:	06cd06cd 	.word	0x06cd06cd
   15c20:	088b07d5 	.word	0x088b07d5
   15c24:	094c08c2 	.word	0x094c08c2
		if (!_radio.conn_curr->role ||
   15c28:	4ecf      	ldr	r6, [pc, #828]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
   15c2a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   15c2e:	f995 301d 	ldrsb.w	r3, [r5, #29]
   15c32:	2b00      	cmp	r3, #0
   15c34:	f281 815e 	bge.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   15c38:	7a41      	ldrb	r1, [r0, #9]
   15c3a:	2000      	movs	r0, #0
   15c3c:	f7fb fc78 	bl	11530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   15c40:	2800      	cmp	r0, #0
   15c42:	f001 8157 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   15c46:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   15c4a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   15c4c:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   15c4e:	041f      	lsls	r7, r3, #16
   15c50:	f100 8098 	bmi.w	15d84 <isr_rx_conn_pkt_ctrl+0x1a8>
	if (conn->llcp_req != conn->llcp_ack) {
   15c54:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   15c58:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   15c5c:	429a      	cmp	r2, r3
   15c5e:	d142      	bne.n	15ce6 <isr_rx_conn_pkt_ctrl+0x10a>
	if (_radio.conn_upd == 0) {
   15c60:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
   15c64:	b90a      	cbnz	r2, 15c6a <isr_rx_conn_pkt_ctrl+0x8e>
		_radio.conn_upd = conn;
   15c66:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
   15c6a:	7b22      	ldrb	r2, [r4, #12]
   15c6c:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
   15c70:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   15c74:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15c78:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
   15c7a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
   15c7e:	7c20      	ldrb	r0, [r4, #16]
   15c80:	7be2      	ldrb	r2, [r4, #15]
   15c82:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
   15c86:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
   15c8a:	7ca0      	ldrb	r0, [r4, #18]
   15c8c:	7c62      	ldrb	r2, [r4, #17]
   15c8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
   15c92:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   15c96:	7ce2      	ldrb	r2, [r4, #19]
   15c98:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
   15c9a:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   15c9e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
   15ca2:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   15ca6:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   15caa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   15cae:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   15cb2:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   15cb4:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   15cb8:	2201      	movs	r2, #1
   15cba:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
   15cbe:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15cc2:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   15cc6:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   15cca:	4293      	cmp	r3, r2
   15ccc:	d007      	beq.n	15cde <isr_rx_conn_pkt_ctrl+0x102>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   15cce:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15cd2:	f003 0307 	and.w	r3, r3, #7
   15cd6:	2b04      	cmp	r3, #4
   15cd8:	d101      	bne.n	15cde <isr_rx_conn_pkt_ctrl+0x102>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15cda:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
   15cde:	2000      	movs	r0, #0
   15ce0:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   15ce4:	e04c      	b.n	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   15ce6:	232a      	movs	r3, #42	; 0x2a
			_radio.conn_curr->llcp_terminate.reason_peer =
   15ce8:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   15cec:	2000      	movs	r0, #0
	return nack;
   15cee:	e047      	b.n	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!_radio.conn_curr->role ||
   15cf0:	4b9d      	ldr	r3, [pc, #628]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
   15cf2:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   15cf6:	f995 301d 	ldrsb.w	r3, [r5, #29]
   15cfa:	2b00      	cmp	r3, #0
   15cfc:	f281 80fa 	bge.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   15d00:	7a41      	ldrb	r1, [r0, #9]
   15d02:	2001      	movs	r0, #1
   15d04:	f7fb fc14 	bl	11530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   15d08:	2800      	cmp	r0, #0
   15d0a:	f001 80f3 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   15d0e:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   15d12:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   15d14:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   15d16:	041e      	lsls	r6, r3, #16
   15d18:	d434      	bmi.n	15d84 <isr_rx_conn_pkt_ctrl+0x1a8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   15d1a:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   15d1e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   15d22:	429a      	cmp	r2, r3
   15d24:	d014      	beq.n	15d50 <isr_rx_conn_pkt_ctrl+0x174>
   15d26:	4b91      	ldr	r3, [pc, #580]	; (15f6c <isr_rx_conn_pkt_ctrl+0x390>)
   15d28:	681b      	ldr	r3, [r3, #0]
   15d2a:	075d      	lsls	r5, r3, #29
   15d2c:	f000 80b2 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   15d30:	2301      	movs	r3, #1
   15d32:	f04f 0200 	mov.w	r2, #0
   15d36:	f363 0202 	bfi	r2, r3, #0, #3
   15d3a:	498d      	ldr	r1, [pc, #564]	; (15f70 <isr_rx_conn_pkt_ctrl+0x394>)
   15d3c:	4b8d      	ldr	r3, [pc, #564]	; (15f74 <isr_rx_conn_pkt_ctrl+0x398>)
   15d3e:	1a5b      	subs	r3, r3, r1
   15d40:	f36f 02c5 	bfc	r2, #3, #3
   15d44:	08db      	lsrs	r3, r3, #3
   15d46:	498c      	ldr	r1, [pc, #560]	; (15f78 <isr_rx_conn_pkt_ctrl+0x39c>)
   15d48:	f363 128f 	bfi	r2, r3, #6, #10
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   15d4c:	488b      	ldr	r0, [pc, #556]	; (15f7c <isr_rx_conn_pkt_ctrl+0x3a0>)
   15d4e:	e09f      	b.n	15e90 <isr_rx_conn_pkt_ctrl+0x2b4>
	memcpy(&conn->llcp.chan_map.chm[0],
   15d50:	2205      	movs	r2, #5
   15d52:	f104 010c 	add.w	r1, r4, #12
   15d56:	f105 0079 	add.w	r0, r5, #121	; 0x79
   15d5a:	f7f0 f895 	bl	5e88 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
   15d5e:	7c63      	ldrb	r3, [r4, #17]
   15d60:	7ca2      	ldrb	r2, [r4, #18]
   15d62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   15d66:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
   15d6a:	2302      	movs	r3, #2
   15d6c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
   15d70:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
   15d74:	2000      	movs	r0, #0
	conn->llcp_ack--;
   15d76:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
   15d78:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
   15d7c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
   15d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.conn_curr->llcp_terminate.reason_peer =
   15d84:	2328      	movs	r3, #40	; 0x28
   15d86:	e7af      	b.n	15ce8 <isr_rx_conn_pkt_ctrl+0x10c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   15d88:	7a41      	ldrb	r1, [r0, #9]
   15d8a:	2002      	movs	r0, #2
   15d8c:	f7fb fbd0 	bl	11530 <pdu_len_cmp>
   15d90:	2800      	cmp	r0, #0
   15d92:	f001 80af 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		_radio.conn_curr->llcp_terminate.reason_peer =
   15d96:	4b74      	ldr	r3, [pc, #464]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
   15d98:	7b22      	ldrb	r2, [r4, #12]
   15d9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   15d9e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
   15da2:	e7a3      	b.n	15cec <isr_rx_conn_pkt_ctrl+0x110>
		if (!_radio.conn_curr->role ||
   15da4:	4e70      	ldr	r6, [pc, #448]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
   15da6:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
   15daa:	f998 301d 	ldrsb.w	r3, [r8, #29]
   15dae:	2b00      	cmp	r3, #0
   15db0:	f281 80a0 	bge.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   15db4:	7a41      	ldrb	r1, [r0, #9]
   15db6:	2003      	movs	r0, #3
   15db8:	f7fb fbba 	bl	11530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   15dbc:	2800      	cmp	r0, #0
   15dbe:	f001 8099 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   15dc2:	2208      	movs	r2, #8
   15dc4:	f104 0116 	add.w	r1, r4, #22
   15dc8:	f108 0094 	add.w	r0, r8, #148	; 0x94
   15dcc:	f7f0 f85c 	bl	5e88 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   15dd0:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
   15dd4:	2204      	movs	r2, #4
   15dd6:	f104 011e 	add.w	r1, r4, #30
   15dda:	f500 7089 	add.w	r0, r0, #274	; 0x112
   15dde:	f7f0 f853 	bl	5e88 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   15de2:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   15de6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15dea:	f042 0204 	orr.w	r2, r2, #4
   15dee:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   15df2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   15df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
   15dfa:	2301      	movs	r3, #1
   15dfc:	702b      	strb	r3, [r5, #0]
   15dfe:	e775      	b.n	15cec <isr_rx_conn_pkt_ctrl+0x110>
		if (_radio.conn_curr->role ||
   15e00:	4d59      	ldr	r5, [pc, #356]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
   15e02:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
   15e06:	f996 301d 	ldrsb.w	r3, [r6, #29]
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	f2c1 8072 	blt.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
   15e10:	7a41      	ldrb	r1, [r0, #9]
   15e12:	2004      	movs	r0, #4
   15e14:	f7fb fb8c 	bl	11530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   15e18:	2800      	cmp	r0, #0
   15e1a:	f001 806b 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   15e1e:	2208      	movs	r2, #8
   15e20:	f104 010c 	add.w	r1, r4, #12
   15e24:	f106 009c 	add.w	r0, r6, #156	; 0x9c
   15e28:	f7f0 f82e 	bl	5e88 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   15e2c:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
   15e30:	2204      	movs	r2, #4
   15e32:	f104 0114 	add.w	r1, r4, #20
   15e36:	f500 708b 	add.w	r0, r0, #278	; 0x116
   15e3a:	f7f0 f825 	bl	5e88 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   15e3e:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
   15e42:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15e46:	f043 0304 	orr.w	r3, r3, #4
   15e4a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   15e4e:	e74d      	b.n	15cec <isr_rx_conn_pkt_ctrl+0x110>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   15e50:	4b45      	ldr	r3, [pc, #276]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
   15e52:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   15e56:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
   15e5a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   15e5e:	42b3      	cmp	r3, r6
   15e60:	d01e      	beq.n	15ea0 <isr_rx_conn_pkt_ctrl+0x2c4>
   15e62:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   15e66:	2b03      	cmp	r3, #3
   15e68:	d01a      	beq.n	15ea0 <isr_rx_conn_pkt_ctrl+0x2c4>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   15e6a:	4b40      	ldr	r3, [pc, #256]	; (15f6c <isr_rx_conn_pkt_ctrl+0x390>)
   15e6c:	681b      	ldr	r3, [r3, #0]
   15e6e:	075c      	lsls	r4, r3, #29
   15e70:	d010      	beq.n	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   15e72:	2301      	movs	r3, #1
   15e74:	f04f 0200 	mov.w	r2, #0
   15e78:	f363 0202 	bfi	r2, r3, #0, #3
   15e7c:	493c      	ldr	r1, [pc, #240]	; (15f70 <isr_rx_conn_pkt_ctrl+0x394>)
   15e7e:	4b3d      	ldr	r3, [pc, #244]	; (15f74 <isr_rx_conn_pkt_ctrl+0x398>)
   15e80:	483f      	ldr	r0, [pc, #252]	; (15f80 <isr_rx_conn_pkt_ctrl+0x3a4>)
   15e82:	1a5b      	subs	r3, r3, r1
   15e84:	f36f 02c5 	bfc	r2, #3, #3
   15e88:	08db      	lsrs	r3, r3, #3
   15e8a:	493e      	ldr	r1, [pc, #248]	; (15f84 <isr_rx_conn_pkt_ctrl+0x3a8>)
   15e8c:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   15e90:	f7eb ff62 	bl	1d58 <log_1>
   15e94:	4040      	eors	r0, r0
   15e96:	f380 8811 	msr	BASEPRI, r0
   15e9a:	f04f 0004 	mov.w	r0, #4
   15e9e:	df02      	svc	2
		if (_radio.conn_curr->role ||
   15ea0:	f995 301d 	ldrsb.w	r3, [r5, #29]
   15ea4:	2b00      	cmp	r3, #0
   15ea6:	f2c1 8025 	blt.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   15eaa:	7a61      	ldrb	r1, [r4, #9]
   15eac:	2005      	movs	r0, #5
   15eae:	f7fb fb3f 	bl	11530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   15eb2:	2800      	cmp	r0, #0
   15eb4:	f001 801e 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   15eb8:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   15eba:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
   15ebc:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
   15ebe:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   15ec2:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   15ec6:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
   15eca:	e759      	b.n	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15ecc:	7a41      	ldrb	r1, [r0, #9]
   15ece:	2006      	movs	r0, #6
   15ed0:	f7fb fb2e 	bl	11530 <pdu_len_cmp>
   15ed4:	2800      	cmp	r0, #0
   15ed6:	f001 800d 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   15eda:	4a23      	ldr	r2, [pc, #140]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
		if (_radio.role == ROLE_SLAVE) {
   15edc:	7d11      	ldrb	r1, [r2, #20]
   15ede:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
   15ee2:	2903      	cmp	r1, #3
   15ee4:	4611      	mov	r1, r2
   15ee6:	d120      	bne.n	15f2a <isr_rx_conn_pkt_ctrl+0x34e>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   15ee8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   15eec:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   15ef0:	4290      	cmp	r0, r2
   15ef2:	d003      	beq.n	15efc <isr_rx_conn_pkt_ctrl+0x320>
   15ef4:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   15ef8:	2803      	cmp	r0, #3
   15efa:	d1b6      	bne.n	15e6a <isr_rx_conn_pkt_ctrl+0x28e>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   15efc:	2000      	movs	r0, #0
   15efe:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
   15f02:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   15f04:	2003      	movs	r0, #3
   15f06:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   15f0a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
   15f0e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15f12:	0650      	lsls	r0, r2, #25
   15f14:	d505      	bpl.n	15f22 <isr_rx_conn_pkt_ctrl+0x346>
			_radio.conn_curr->refresh = 0;
   15f16:	f36f 1286 	bfc	r2, #6, #1
   15f1a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15f1e:	2309      	movs	r3, #9
   15f20:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
   15f22:	2301      	movs	r3, #1
   15f24:	702b      	strb	r3, [r5, #0]
				break;
   15f26:	f000 bd2e 	b.w	16986 <isr_rx_conn_pkt_ctrl+0xdaa>
			_radio.conn_curr->pause_rx = 0;
   15f2a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   15f2e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   15f32:	f36f 02c3 	bfc	r2, #3, #1
   15f36:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   15f3a:	e7e8      	b.n	15f0e <isr_rx_conn_pkt_ctrl+0x332>
		if (!_radio.conn_curr->role ||
   15f3c:	4b0a      	ldr	r3, [pc, #40]	; (15f68 <isr_rx_conn_pkt_ctrl+0x38c>)
   15f3e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   15f42:	f995 301d 	ldrsb.w	r3, [r5, #29]
   15f46:	2b00      	cmp	r3, #0
   15f48:	f280 87d4 	bge.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   15f4c:	7a41      	ldrb	r1, [r0, #9]
   15f4e:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   15f50:	f7fb faee 	bl	11530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   15f54:	2800      	cmp	r0, #0
   15f56:	f000 87cd 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   15f5a:	4631      	mov	r1, r6
   15f5c:	4628      	mov	r0, r5
}
   15f5e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   15f62:	f7fe ba65 	b.w	14430 <feature_rsp_send>
   15f66:	bf00      	nop
   15f68:	2000110c 	.word	0x2000110c
   15f6c:	2000d72c 	.word	0x2000d72c
   15f70:	0002cff8 	.word	0x0002cff8
   15f74:	0002d030 	.word	0x0002d030
   15f78:	00030936 	.word	0x00030936
   15f7c:	00030d32 	.word	0x00030d32
   15f80:	00030d68 	.word	0x00030d68
   15f84:	0003056a 	.word	0x0003056a
		if (_radio.conn_curr->role ||
   15f88:	4bbd      	ldr	r3, [pc, #756]	; (16280 <isr_rx_conn_pkt_ctrl+0x6a4>)
   15f8a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   15f8e:	f995 301d 	ldrsb.w	r3, [r5, #29]
   15f92:	2b00      	cmp	r3, #0
   15f94:	f2c0 87ae 	blt.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   15f98:	7a41      	ldrb	r1, [r0, #9]
   15f9a:	200e      	movs	r0, #14
   15f9c:	e7d8      	b.n	15f50 <isr_rx_conn_pkt_ctrl+0x374>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   15f9e:	7a41      	ldrb	r1, [r0, #9]
   15fa0:	2009      	movs	r0, #9
   15fa2:	f7fb fac5 	bl	11530 <pdu_len_cmp>
   15fa6:	2800      	cmp	r0, #0
   15fa8:	f000 87a4 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   15fac:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
   15fae:	7b62      	ldrb	r2, [r4, #13]
   15fb0:	48b3      	ldr	r0, [pc, #716]	; (16280 <isr_rx_conn_pkt_ctrl+0x6a4>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   15fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   15fb6:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   15fba:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   15fbe:	f043 0310 	orr.w	r3, r3, #16
   15fc2:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   15fc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   15fca:	7ba2      	ldrb	r2, [r4, #14]
   15fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   15fd0:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
   15fd4:	f3c2 0210 	ubfx	r2, r2, #0, #17
   15fd8:	4013      	ands	r3, r2
   15fda:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   15fde:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   15fe2:	f043 0320 	orr.w	r3, r3, #32
   15fe6:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   15fea:	2301      	movs	r3, #1
   15fec:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
   15fee:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
   15ff2:	2000      	movs	r0, #0
   15ff4:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
   15ff8:	e6c2      	b.n	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!_radio.conn_curr->role ||
   15ffa:	4ea1      	ldr	r6, [pc, #644]	; (16280 <isr_rx_conn_pkt_ctrl+0x6a4>)
   15ffc:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   16000:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16004:	2b00      	cmp	r3, #0
   16006:	f280 8775 	bge.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   1600a:	7a41      	ldrb	r1, [r0, #9]
   1600c:	200a      	movs	r0, #10
   1600e:	f7fb fa8f 	bl	11530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   16012:	2800      	cmp	r0, #0
   16014:	f000 876e 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16018:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
   1601c:	f7fa fa62 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   16020:	4601      	mov	r1, r0
   16022:	b908      	cbnz	r0, 16028 <isr_rx_conn_pkt_ctrl+0x44c>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   16024:	2001      	movs	r0, #1
   16026:	e6ab      	b.n	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
		conn->refresh = 1;
   16028:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
   1602c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   16030:	f36f 1304 	bfc	r3, #4, #1
   16034:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16038:	7903      	ldrb	r3, [r0, #4]
   1603a:	f043 0303 	orr.w	r3, r3, #3
   1603e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16040:	2301      	movs	r3, #1
   16042:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16044:	230b      	movs	r3, #11
   16046:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   16048:	4628      	mov	r0, r5
   1604a:	f000 bd68 	b.w	16b1e <isr_rx_conn_pkt_ctrl+0xf42>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   1604e:	7a41      	ldrb	r1, [r0, #9]
   16050:	200b      	movs	r0, #11
   16052:	f7fb fa6d 	bl	11530 <pdu_len_cmp>
   16056:	2800      	cmp	r0, #0
   16058:	f000 874c 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   1605c:	4888      	ldr	r0, [pc, #544]	; (16280 <isr_rx_conn_pkt_ctrl+0x6a4>)
   1605e:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
   16062:	f994 301d 	ldrsb.w	r3, [r4, #29]
   16066:	2b00      	cmp	r3, #0
   16068:	db1b      	blt.n	160a2 <isr_rx_conn_pkt_ctrl+0x4c6>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1606a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   1606e:	f7fa fa39 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   16072:	4601      	mov	r1, r0
   16074:	2800      	cmp	r0, #0
   16076:	d0d5      	beq.n	16024 <isr_rx_conn_pkt_ctrl+0x448>
		conn->enc_tx = 0;
   16078:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
   1607c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   16080:	f043 0304 	orr.w	r3, r3, #4
   16084:	f36f 1304 	bfc	r3, #4, #1
   16088:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1608c:	7903      	ldrb	r3, [r0, #4]
   1608e:	f043 0303 	orr.w	r3, r3, #3
   16092:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16094:	2301      	movs	r3, #1
   16096:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16098:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1609a:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   1609c:	4620      	mov	r0, r4
   1609e:	f000 bd3e 	b.w	16b1e <isr_rx_conn_pkt_ctrl+0xf42>
		conn->enc_tx = 0;
   160a2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   160a6:	f36f 1345 	bfc	r3, #5, #1
   160aa:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   160ae:	e61d      	b.n	15cec <isr_rx_conn_pkt_ctrl+0x110>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   160b0:	7a41      	ldrb	r1, [r0, #9]
   160b2:	200c      	movs	r0, #12
   160b4:	f7fb fa3c 	bl	11530 <pdu_len_cmp>
   160b8:	2800      	cmp	r0, #0
   160ba:	f000 871b 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   160be:	4870      	ldr	r0, [pc, #448]	; (16280 <isr_rx_conn_pkt_ctrl+0x6a4>)
   160c0:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
   160c4:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   160c8:	f013 0701 	ands.w	r7, r3, #1
   160cc:	d150      	bne.n	16170 <isr_rx_conn_pkt_ctrl+0x594>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   160ce:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   160d2:	f7fa fa07 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   160d6:	4601      	mov	r1, r0
   160d8:	2800      	cmp	r0, #0
   160da:	d0a3      	beq.n	16024 <isr_rx_conn_pkt_ctrl+0x448>
		conn->llcp_version.tx = 1;
   160dc:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   160e0:	f043 0301 	orr.w	r3, r3, #1
   160e4:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   160e8:	7903      	ldrb	r3, [r0, #4]
   160ea:	f043 0303 	orr.w	r3, r3, #3
   160ee:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   160f0:	2306      	movs	r3, #6
   160f2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   160f4:	230c      	movs	r3, #12
   160f6:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   160f8:	2309      	movs	r3, #9
   160fa:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   160fc:	f06f 030e 	mvn.w	r3, #14
   16100:	7243      	strb	r3, [r0, #9]
   16102:	2305      	movs	r3, #5
   16104:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   16106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1610a:	72c3      	strb	r3, [r0, #11]
   1610c:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   1610e:	4630      	mov	r0, r6
   16110:	f7fe f974 	bl	143fc <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   16114:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   16118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1611c:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   16120:	f007 fd02 	bl	1db28 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16124:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   16126:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16128:	2201      	movs	r2, #1
   1612a:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   1612e:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16132:	7003      	strb	r3, [r0, #0]
   16134:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   16136:	b1c2      	cbz	r2, 1616a <isr_rx_conn_pkt_ctrl+0x58e>
		pdu_data_tx->md = 1;
   16138:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   1613c:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   1613e:	7b23      	ldrb	r3, [r4, #12]
   16140:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
   16144:	7ba2      	ldrb	r2, [r4, #14]
   16146:	7b63      	ldrb	r3, [r4, #13]
   16148:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1614c:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
   16150:	7be3      	ldrb	r3, [r4, #15]
   16152:	7c22      	ldrb	r2, [r4, #16]
   16154:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16158:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
   1615c:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   16160:	f043 0302 	orr.w	r3, r3, #2
   16164:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   16168:	e5c0      	b.n	15cec <isr_rx_conn_pkt_ctrl+0x110>
		pdu_data_tx->md = 0;
   1616a:	f362 1304 	bfi	r3, r2, #4, #1
   1616e:	e7e5      	b.n	1613c <isr_rx_conn_pkt_ctrl+0x560>
	} else if (!conn->llcp_version.rx) {
   16170:	f013 0302 	ands.w	r3, r3, #2
   16174:	f47f adba 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		conn->procedure_expire = 0;
   16178:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
   1617c:	2301      	movs	r3, #1
   1617e:	702b      	strb	r3, [r5, #0]
   16180:	e7dd      	b.n	1613e <isr_rx_conn_pkt_ctrl+0x562>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
   16182:	7a41      	ldrb	r1, [r0, #9]
   16184:	200d      	movs	r0, #13
   16186:	f7fb f9d3 	bl	11530 <pdu_len_cmp>
   1618a:	2800      	cmp	r0, #0
   1618c:	f000 86b2 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   16190:	4b3b      	ldr	r3, [pc, #236]	; (16280 <isr_rx_conn_pkt_ctrl+0x6a4>)
   16192:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
		_radio.conn_curr->pause_rx = 0;
   16196:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   1619a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1619e:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
   161a2:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
   161a4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   161a8:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
   161ac:	2301      	movs	r3, #1
   161ae:	702b      	strb	r3, [r5, #0]
   161b0:	e5e6      	b.n	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   161b2:	7a41      	ldrb	r1, [r0, #9]
   161b4:	200f      	movs	r0, #15
   161b6:	f7fb f9bb 	bl	11530 <pdu_len_cmp>
   161ba:	2800      	cmp	r0, #0
   161bc:	f000 869a 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   161c0:	4a2f      	ldr	r2, [pc, #188]	; (16280 <isr_rx_conn_pkt_ctrl+0x6a4>)
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   161c2:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
   161c6:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
   161ca:	b13b      	cbz	r3, 161dc <isr_rx_conn_pkt_ctrl+0x600>
   161cc:	4283      	cmp	r3, r0
   161ce:	d005      	beq.n	161dc <isr_rx_conn_pkt_ctrl+0x600>
			nack = reject_ext_ind_send(_radio.conn_curr,
   161d0:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
   161d2:	210f      	movs	r1, #15
}
   161d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
   161d8:	f7fe b980 	b.w	144dc <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
   161dc:	f990 601d 	ldrsb.w	r6, [r0, #29]
   161e0:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   161e4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   161e8:	2e00      	cmp	r6, #0
   161ea:	f2c0 80b5 	blt.w	16358 <isr_rx_conn_pkt_ctrl+0x77c>
			if ((conn->llcp_conn_param.req !=
   161ee:	4299      	cmp	r1, r3
   161f0:	d009      	beq.n	16206 <isr_rx_conn_pkt_ctrl+0x62a>
			    ((conn->llcp_conn_param.state ==
   161f2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   161f6:	f013 0307 	ands.w	r3, r3, #7
   161fa:	d002      	beq.n	16202 <isr_rx_conn_pkt_ctrl+0x626>
			      LLCP_CPR_STATE_REQ) ||
   161fc:	3b04      	subs	r3, #4
   161fe:	2b01      	cmp	r3, #1
   16200:	d801      	bhi.n	16206 <isr_rx_conn_pkt_ctrl+0x62a>
				nack = reject_ext_ind_send(_radio.conn_curr,
   16202:	2223      	movs	r2, #35	; 0x23
   16204:	e7e5      	b.n	161d2 <isr_rx_conn_pkt_ctrl+0x5f6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
   16206:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   1620a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1620e:	4299      	cmp	r1, r3
   16210:	d003      	beq.n	1621a <isr_rx_conn_pkt_ctrl+0x63e>
   16212:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   16216:	2b03      	cmp	r3, #3
   16218:	d105      	bne.n	16226 <isr_rx_conn_pkt_ctrl+0x64a>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1621a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   1621e:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   16222:	4299      	cmp	r1, r3
   16224:	d001      	beq.n	1622a <isr_rx_conn_pkt_ctrl+0x64e>
				nack = reject_ext_ind_send(_radio.conn_curr,
   16226:	222a      	movs	r2, #42	; 0x2a
   16228:	e7d3      	b.n	161d2 <isr_rx_conn_pkt_ctrl+0x5f6>
				if ((cpr->interval_min < 6) ||
   1622a:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   1622e:	fa1f f389 	uxth.w	r3, r9
   16232:	2b05      	cmp	r3, #5
   16234:	d922      	bls.n	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->interval_max > 3200) ||
   16236:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1623a:	fa1f f188 	uxth.w	r1, r8
				if ((cpr->interval_min < 6) ||
   1623e:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   16242:	d81b      	bhi.n	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->interval_max > 3200) ||
   16244:	428b      	cmp	r3, r1
   16246:	d819      	bhi.n	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->latency > 499) ||
   16248:	f8b4 e010 	ldrh.w	lr, [r4, #16]
   1624c:	fa1f f68e 	uxth.w	r6, lr
				    (cpr->interval_min > cpr->interval_max) ||
   16250:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   16254:	d212      	bcs.n	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->timeout < 10) ||
   16256:	f8b4 c012 	ldrh.w	ip, [r4, #18]
   1625a:	fa1f f38c 	uxth.w	r3, ip
				    (cpr->latency > 499) ||
   1625e:	f1a3 070a 	sub.w	r7, r3, #10
   16262:	b2bf      	uxth	r7, r7
   16264:	f640 4a76 	movw	sl, #3190	; 0xc76
   16268:	4557      	cmp	r7, sl
   1626a:	d807      	bhi.n	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
				     ((cpr->latency + 1) *
   1626c:	fb06 1701 	mla	r7, r6, r1, r1
				    (cpr->timeout > 3200) ||
   16270:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
   16274:	da02      	bge.n	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
				    (cpr->preferred_periodicity >
   16276:	7d27      	ldrb	r7, [r4, #20]
				      cpr->interval_max)) ||
   16278:	42b9      	cmp	r1, r7
   1627a:	d203      	bcs.n	16284 <isr_rx_conn_pkt_ctrl+0x6a8>
				nack = reject_ext_ind_send(conn,
   1627c:	221e      	movs	r2, #30
   1627e:	e7a8      	b.n	161d2 <isr_rx_conn_pkt_ctrl+0x5f6>
   16280:	2000110c 	.word	0x2000110c
				conn->llcp_conn_param.interval_min =
   16284:	f8a0 90c4 	strh.w	r9, [r0, #196]	; 0xc4
				conn->llcp_conn_param.interval_max =
   16288:	f8a0 80c6 	strh.w	r8, [r0, #198]	; 0xc6
				conn->llcp_conn_param.latency =	cpr->latency;
   1628c:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.timeout =	cpr->timeout;
   16290:	f8a0 c0ca 	strh.w	ip, [r0, #202]	; 0xca
				conn->llcp_conn_param.preferred_periodicity =
   16294:	f880 70cc 	strb.w	r7, [r0, #204]	; 0xcc
					cpr->reference_conn_event_count;
   16298:	f894 c016 	ldrb.w	ip, [r4, #22]
   1629c:	7d67      	ldrb	r7, [r4, #21]
   1629e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   162a2:	f8a0 70ce 	strh.w	r7, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   162a6:	f894 c018 	ldrb.w	ip, [r4, #24]
   162aa:	7de7      	ldrb	r7, [r4, #23]
   162ac:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   162b0:	f8a0 70d0 	strh.w	r7, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   162b4:	f894 c01a 	ldrb.w	ip, [r4, #26]
   162b8:	7e67      	ldrb	r7, [r4, #25]
   162ba:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   162be:	f8a0 70d2 	strh.w	r7, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   162c2:	f894 c01c 	ldrb.w	ip, [r4, #28]
   162c6:	7ee7      	ldrb	r7, [r4, #27]
   162c8:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   162cc:	f8a0 70d4 	strh.w	r7, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   162d0:	f894 c01e 	ldrb.w	ip, [r4, #30]
   162d4:	7f67      	ldrb	r7, [r4, #29]
   162d6:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   162da:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   162de:	7fe7      	ldrb	r7, [r4, #31]
   162e0:	f894 c020 	ldrb.w	ip, [r4, #32]
   162e4:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   162e8:	f8a0 70d8 	strh.w	r7, [r0, #216]	; 0xd8
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   162ec:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
   162f0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   162f4:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
   162f8:	f8a0 40da 	strh.w	r4, [r0, #218]	; 0xda
				if ((conn->llcp_conn_param.interval_max !=
   162fc:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   162fe:	428c      	cmp	r4, r1
   16300:	d111      	bne.n	16326 <isr_rx_conn_pkt_ctrl+0x74a>
				     conn->conn_interval) ||
   16302:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
   16304:	42b4      	cmp	r4, r6
   16306:	d10e      	bne.n	16326 <isr_rx_conn_pkt_ctrl+0x74a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16308:	f240 44e2 	movw	r4, #1250	; 0x4e2
   1630c:	4361      	muls	r1, r4
   1630e:	f242 7410 	movw	r4, #10000	; 0x2710
   16312:	fb04 1303 	mla	r3, r4, r3, r1
   16316:	3b01      	subs	r3, #1
   16318:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
   1631c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   1631e:	b29b      	uxth	r3, r3
   16320:	4299      	cmp	r1, r3
   16322:	f000 80a5 	beq.w	16470 <isr_rx_conn_pkt_ctrl+0x894>
					if (conn->pause_tx) {
   16326:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1632a:	0719      	lsls	r1, r3, #28
   1632c:	f140 809a 	bpl.w	16464 <isr_rx_conn_pkt_ctrl+0x888>
						conn->llcp_conn_param.state =
   16330:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   16334:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
   16336:	f361 0302 	bfi	r3, r1, #0, #3
   1633a:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   1633e:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   16342:	3b01      	subs	r3, #1
   16344:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   16348:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
   1634c:	2b00      	cmp	r3, #0
   1634e:	f47f accd 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
				_radio.conn_upd = conn;
   16352:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
   16356:	e4c9      	b.n	15cec <isr_rx_conn_pkt_ctrl+0x110>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   16358:	4299      	cmp	r1, r3
   1635a:	d004      	beq.n	16366 <isr_rx_conn_pkt_ctrl+0x78a>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   1635c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   16360:	079b      	lsls	r3, r3, #30
   16362:	f040 808e 	bne.w	16482 <isr_rx_conn_pkt_ctrl+0x8a6>
			if ((cpr->interval_min < 6) ||
   16366:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   1636a:	fa1f f389 	uxth.w	r3, r9
   1636e:	2b05      	cmp	r3, #5
   16370:	d984      	bls.n	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->interval_max > 3200) ||
   16372:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   16376:	fa1f f188 	uxth.w	r1, r8
			if ((cpr->interval_min < 6) ||
   1637a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1637e:	f63f af7d 	bhi.w	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->interval_max > 3200) ||
   16382:	428b      	cmp	r3, r1
   16384:	f63f af7a 	bhi.w	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->latency > 499) ||
   16388:	f8b4 e010 	ldrh.w	lr, [r4, #16]
   1638c:	fa1f f68e 	uxth.w	r6, lr
			    (cpr->interval_min > cpr->interval_max) ||
   16390:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   16394:	f4bf af72 	bcs.w	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   16398:	f8b4 c012 	ldrh.w	ip, [r4, #18]
   1639c:	fa1f f38c 	uxth.w	r3, ip
			    (cpr->latency > 499) ||
   163a0:	f1a3 070a 	sub.w	r7, r3, #10
   163a4:	b2bf      	uxth	r7, r7
   163a6:	f640 4a76 	movw	sl, #3190	; 0xc76
   163aa:	4557      	cmp	r7, sl
   163ac:	f63f af66 	bhi.w	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   163b0:	fb06 1701 	mla	r7, r6, r1, r1
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   163b4:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
   163b8:	f6bf af60 	bge.w	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   163bc:	7d27      	ldrb	r7, [r4, #20]
						    cpr->interval_max)) ||
   163be:	42b9      	cmp	r1, r7
   163c0:	f4ff af5c 	bcc.w	1627c <isr_rx_conn_pkt_ctrl+0x6a0>
			conn->llcp_conn_param.interval_min = cpr->interval_min;
   163c4:	f8a0 90c4 	strh.w	r9, [r0, #196]	; 0xc4
			conn->llcp_conn_param.interval_max = cpr->interval_max;
   163c8:	f8a0 80c6 	strh.w	r8, [r0, #198]	; 0xc6
			conn->llcp_conn_param.latency =	cpr->latency;
   163cc:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.timeout =	cpr->timeout;
   163d0:	f8a0 c0ca 	strh.w	ip, [r0, #202]	; 0xca
			conn->llcp_conn_param.preferred_periodicity =
   163d4:	f880 70cc 	strb.w	r7, [r0, #204]	; 0xcc
				cpr->reference_conn_event_count;
   163d8:	f894 c016 	ldrb.w	ip, [r4, #22]
   163dc:	7d67      	ldrb	r7, [r4, #21]
   163de:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   163e2:	f8a0 70ce 	strh.w	r7, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   163e6:	f894 c018 	ldrb.w	ip, [r4, #24]
   163ea:	7de7      	ldrb	r7, [r4, #23]
   163ec:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   163f0:	f8a0 70d0 	strh.w	r7, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   163f4:	f894 c01a 	ldrb.w	ip, [r4, #26]
   163f8:	7e67      	ldrb	r7, [r4, #25]
   163fa:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   163fe:	f8a0 70d2 	strh.w	r7, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   16402:	f894 c01c 	ldrb.w	ip, [r4, #28]
   16406:	7ee7      	ldrb	r7, [r4, #27]
   16408:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   1640c:	f8a0 70d4 	strh.w	r7, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   16410:	f894 c01e 	ldrb.w	ip, [r4, #30]
   16414:	7f67      	ldrb	r7, [r4, #29]
   16416:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   1641a:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1641e:	7fe7      	ldrb	r7, [r4, #31]
   16420:	f894 c020 	ldrb.w	ip, [r4, #32]
   16424:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
   16428:	f8a0 70d8 	strh.w	r7, [r0, #216]	; 0xd8
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   1642c:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
   16430:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   16434:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
   16438:	f8a0 40da 	strh.w	r4, [r0, #218]	; 0xda
			if ((conn->llcp_conn_param.interval_max !=
   1643c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   1643e:	428c      	cmp	r4, r1
   16440:	d110      	bne.n	16464 <isr_rx_conn_pkt_ctrl+0x888>
			     conn->conn_interval) ||
   16442:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
   16444:	42b1      	cmp	r1, r6
   16446:	d10d      	bne.n	16464 <isr_rx_conn_pkt_ctrl+0x888>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16448:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1644c:	4361      	muls	r1, r4
   1644e:	f242 7410 	movw	r4, #10000	; 0x2710
   16452:	fb04 1303 	mla	r3, r4, r3, r1
   16456:	3b01      	subs	r3, #1
   16458:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
   1645c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   1645e:	b29b      	uxth	r3, r3
   16460:	4299      	cmp	r1, r3
   16462:	d005      	beq.n	16470 <isr_rx_conn_pkt_ctrl+0x894>
				*rx_enqueue = 1;
   16464:	2301      	movs	r3, #1
   16466:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
   16468:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1646c:	2103      	movs	r1, #3
   1646e:	e762      	b.n	16336 <isr_rx_conn_pkt_ctrl+0x75a>
				conn->llcp_conn_param.status = 0;
   16470:	2300      	movs	r3, #0
   16472:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   16476:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
   1647a:	2101      	movs	r1, #1
   1647c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   16480:	e759      	b.n	16336 <isr_rx_conn_pkt_ctrl+0x75a>
			LL_ASSERT(0);
   16482:	4bd0      	ldr	r3, [pc, #832]	; (167c4 <isr_rx_conn_pkt_ctrl+0xbe8>)
   16484:	681b      	ldr	r3, [r3, #0]
   16486:	075f      	lsls	r7, r3, #29
   16488:	f43f ad04 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   1648c:	2301      	movs	r3, #1
   1648e:	f04f 0200 	mov.w	r2, #0
   16492:	f363 0202 	bfi	r2, r3, #0, #3
   16496:	49cc      	ldr	r1, [pc, #816]	; (167c8 <isr_rx_conn_pkt_ctrl+0xbec>)
   16498:	4bcc      	ldr	r3, [pc, #816]	; (167cc <isr_rx_conn_pkt_ctrl+0xbf0>)
   1649a:	48cd      	ldr	r0, [pc, #820]	; (167d0 <isr_rx_conn_pkt_ctrl+0xbf4>)
   1649c:	1a5b      	subs	r3, r3, r1
   1649e:	f36f 02c5 	bfc	r2, #3, #3
   164a2:	08db      	lsrs	r3, r3, #3
   164a4:	f363 128f 	bfi	r2, r3, #6, #10
   164a8:	49ca      	ldr	r1, [pc, #808]	; (167d4 <isr_rx_conn_pkt_ctrl+0xbf8>)
   164aa:	e4f1      	b.n	15e90 <isr_rx_conn_pkt_ctrl+0x2b4>
		if (_radio.conn_curr->role ||
   164ac:	4bca      	ldr	r3, [pc, #808]	; (167d8 <isr_rx_conn_pkt_ctrl+0xbfc>)
   164ae:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
   164b2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   164b6:	2b00      	cmp	r3, #0
   164b8:	f2c0 851c 	blt.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   164bc:	7a41      	ldrb	r1, [r0, #9]
   164be:	2010      	movs	r0, #16
   164c0:	f7fb f836 	bl	11530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   164c4:	2800      	cmp	r0, #0
   164c6:	f000 8515 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		if (!_radio.conn_curr->role &&
   164ca:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   164ce:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   164d2:	429a      	cmp	r2, r3
   164d4:	f43f ac0a 	beq.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		    (_radio.conn_curr->llcp_conn_param.state ==
   164d8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
   164dc:	f003 0307 	and.w	r3, r3, #7
   164e0:	2b04      	cmp	r3, #4
   164e2:	f47f ac03 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
			if ((cpr->interval_min < 6) ||
   164e6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   164ea:	fa1f f28e 	uxth.w	r2, lr
   164ee:	2a05      	cmp	r2, #5
   164f0:	d91e      	bls.n	16530 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->interval_max > 3200) ||
   164f2:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   164f6:	fa1f f38c 	uxth.w	r3, ip
			if ((cpr->interval_min < 6) ||
   164fa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   164fe:	d817      	bhi.n	16530 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->interval_max > 3200) ||
   16500:	429a      	cmp	r2, r3
   16502:	d815      	bhi.n	16530 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->latency > 499) ||
   16504:	8a27      	ldrh	r7, [r4, #16]
   16506:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
   16508:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1650c:	d210      	bcs.n	16530 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1650e:	8a66      	ldrh	r6, [r4, #18]
   16510:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
   16512:	f1a0 010a 	sub.w	r1, r0, #10
   16516:	b289      	uxth	r1, r1
   16518:	f640 4876 	movw	r8, #3190	; 0xc76
   1651c:	4541      	cmp	r1, r8
   1651e:	d807      	bhi.n	16530 <isr_rx_conn_pkt_ctrl+0x954>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   16520:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   16524:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   16528:	da02      	bge.n	16530 <isr_rx_conn_pkt_ctrl+0x954>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1652a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   1652c:	4293      	cmp	r3, r2
   1652e:	d203      	bcs.n	16538 <isr_rx_conn_pkt_ctrl+0x95c>
				nack = reject_ext_ind_send(conn,
   16530:	221e      	movs	r2, #30
   16532:	2110      	movs	r1, #16
				nack = reject_ext_ind_send(_radio.conn_curr,
   16534:	4628      	mov	r0, r5
   16536:	e64d      	b.n	161d4 <isr_rx_conn_pkt_ctrl+0x5f8>
			_radio.conn_curr->procedure_expire = 0;
   16538:	2000      	movs	r0, #0
   1653a:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval_min = cpr->interval_min;
   1653e:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.interval_max = cpr->interval_max;
   16542:	f8a5 c0c6 	strh.w	ip, [r5, #198]	; 0xc6
			conn->llcp_conn_param.latency =	cpr->latency;
   16546:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
			conn->llcp_conn_param.timeout =	cpr->timeout;
   1654a:	f8a5 60ca 	strh.w	r6, [r5, #202]	; 0xca
			conn->llcp_conn_param.preferred_periodicity =
   1654e:	f885 20cc 	strb.w	r2, [r5, #204]	; 0xcc
				cpr->reference_conn_event_count;
   16552:	7da2      	ldrb	r2, [r4, #22]
   16554:	7d63      	ldrb	r3, [r4, #21]
   16556:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1655a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   1655e:	7e22      	ldrb	r2, [r4, #24]
   16560:	7de3      	ldrb	r3, [r4, #23]
   16562:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16566:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   1656a:	7ea2      	ldrb	r2, [r4, #26]
   1656c:	7e63      	ldrb	r3, [r4, #25]
   1656e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16572:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   16576:	7f22      	ldrb	r2, [r4, #28]
   16578:	7ee3      	ldrb	r3, [r4, #27]
   1657a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1657e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   16582:	7fa2      	ldrb	r2, [r4, #30]
   16584:	7f63      	ldrb	r3, [r4, #29]
   16586:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1658a:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1658e:	f894 2020 	ldrb.w	r2, [r4, #32]
   16592:	7fe3      	ldrb	r3, [r4, #31]
   16594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16598:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   1659c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   165a0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   165a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   165a8:	f8a5 30da 	strh.w	r3, [r5, #218]	; 0xda
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   165ac:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   165b0:	2201      	movs	r2, #1
   165b2:	f362 0302 	bfi	r3, r2, #0, #3
   165b6:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   165ba:	f7ff bbe1 	b.w	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   165be:	7a41      	ldrb	r1, [r0, #9]
   165c0:	2011      	movs	r0, #17
   165c2:	f7fa ffb5 	bl	11530 <pdu_len_cmp>
   165c6:	2800      	cmp	r0, #0
   165c8:	f000 8494 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   165cc:	4a82      	ldr	r2, [pc, #520]	; (167d8 <isr_rx_conn_pkt_ctrl+0xbfc>)
   165ce:	7b21      	ldrb	r1, [r4, #12]
   165d0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
		   _radio.conn_curr->llcp_phy.req) {
   165d4:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   165d8:	f893 60f5 	ldrb.w	r6, [r3, #245]	; 0xf5
   165dc:	4286      	cmp	r6, r0
   165de:	d028      	beq.n	16632 <isr_rx_conn_pkt_ctrl+0xa56>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   165e0:	2916      	cmp	r1, #22
   165e2:	f47f ab83 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   165e6:	7b61      	ldrb	r1, [r4, #13]
   165e8:	2923      	cmp	r1, #35	; 0x23
   165ea:	d00e      	beq.n	1660a <isr_rx_conn_pkt_ctrl+0xa2e>
				_radio.conn_curr->phy_tx;
   165ec:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
   165f0:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   165f4:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   165f8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   165fc:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
   16600:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
   16602:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   16606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   1660a:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
   1660e:	0796      	lsls	r6, r2, #30
   16610:	f57f ab6c 	bpl.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16614:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
   16616:	7221      	strb	r1, [r4, #8]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16618:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
   1661a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1661e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16622:	7262      	strb	r2, [r4, #9]
		p->rx = _radio.conn_curr->phy_rx;
   16624:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   16628:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1662c:	72a3      	strb	r3, [r4, #10]
   1662e:	f7ff bbe4 	b.w	15dfa <isr_rx_conn_pkt_ctrl+0x21e>
		   _radio.conn_curr->llcp_conn_param.req) {
   16632:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   16636:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
   1663a:	42b8      	cmp	r0, r7
   1663c:	d068      	beq.n	16710 <isr_rx_conn_pkt_ctrl+0xb34>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   1663e:	290f      	cmp	r1, #15
   16640:	f47f ab54 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
   16644:	f993 001d 	ldrsb.w	r0, [r3, #29]
   16648:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code ==
   1664a:	2800      	cmp	r0, #0
   1664c:	db1d      	blt.n	1668a <isr_rx_conn_pkt_ctrl+0xaae>
   1664e:	291a      	cmp	r1, #26
   16650:	d11b      	bne.n	1668a <isr_rx_conn_pkt_ctrl+0xaae>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   16652:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   16656:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   1665a:	4294      	cmp	r4, r2
   1665c:	f000 80f9 	beq.w	16852 <isr_rx_conn_pkt_ctrl+0xc76>
   16660:	4b58      	ldr	r3, [pc, #352]	; (167c4 <isr_rx_conn_pkt_ctrl+0xbe8>)
   16662:	681b      	ldr	r3, [r3, #0]
   16664:	075d      	lsls	r5, r3, #29
   16666:	f43f ac15 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   1666a:	2301      	movs	r3, #1
   1666c:	f04f 0200 	mov.w	r2, #0
   16670:	f363 0202 	bfi	r2, r3, #0, #3
   16674:	4954      	ldr	r1, [pc, #336]	; (167c8 <isr_rx_conn_pkt_ctrl+0xbec>)
   16676:	4b55      	ldr	r3, [pc, #340]	; (167cc <isr_rx_conn_pkt_ctrl+0xbf0>)
   16678:	1a5b      	subs	r3, r3, r1
   1667a:	f36f 02c5 	bfc	r2, #3, #3
   1667e:	08db      	lsrs	r3, r3, #3
   16680:	f363 128f 	bfi	r2, r3, #6, #10
   16684:	4955      	ldr	r1, [pc, #340]	; (167dc <isr_rx_conn_pkt_ctrl+0xc00>)
   16686:	f7ff bb61 	b.w	15d4c <isr_rx_conn_pkt_ctrl+0x170>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1668a:	2923      	cmp	r1, #35	; 0x23
   1668c:	d026      	beq.n	166dc <isr_rx_conn_pkt_ctrl+0xb00>
		LL_ASSERT(_radio.conn_upd == conn);
   1668e:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
   16692:	429e      	cmp	r6, r3
   16694:	d015      	beq.n	166c2 <isr_rx_conn_pkt_ctrl+0xae6>
   16696:	4b4b      	ldr	r3, [pc, #300]	; (167c4 <isr_rx_conn_pkt_ctrl+0xbe8>)
   16698:	681b      	ldr	r3, [r3, #0]
   1669a:	075c      	lsls	r4, r3, #29
   1669c:	f43f abfa 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   166a0:	2301      	movs	r3, #1
   166a2:	f04f 0200 	mov.w	r2, #0
   166a6:	f363 0202 	bfi	r2, r3, #0, #3
   166aa:	4947      	ldr	r1, [pc, #284]	; (167c8 <isr_rx_conn_pkt_ctrl+0xbec>)
   166ac:	4b47      	ldr	r3, [pc, #284]	; (167cc <isr_rx_conn_pkt_ctrl+0xbf0>)
   166ae:	1a5b      	subs	r3, r3, r1
   166b0:	f36f 02c5 	bfc	r2, #3, #3
   166b4:	08db      	lsrs	r3, r3, #3
   166b6:	4949      	ldr	r1, [pc, #292]	; (167dc <isr_rx_conn_pkt_ctrl+0xc00>)
   166b8:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(_radio.conn_upd == conn);
   166bc:	4848      	ldr	r0, [pc, #288]	; (167e0 <isr_rx_conn_pkt_ctrl+0xc04>)
   166be:	f7ff bbe7 	b.w	15e90 <isr_rx_conn_pkt_ctrl+0x2b4>
		_radio.conn_upd = NULL;
   166c2:	2600      	movs	r6, #0
		if (conn->role) {
   166c4:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
   166c6:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
   166ca:	bfb8      	it	lt
   166cc:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
   166d0:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   166d4:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
   166d8:	bfb8      	it	lt
   166da:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
   166dc:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   166e0:	0710      	lsls	r0, r2, #28
   166e2:	f57f ab03 	bpl.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
	cp->status = rej_ext_ind->error_code;
   166e6:	7221      	strb	r1, [r4, #8]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   166e8:	2208      	movs	r2, #8
	cp->latency = conn->latency;
   166ea:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   166ec:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
   166ee:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   166f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
   166f2:	f8a4 2009 	strh.w	r2, [r4, #9]
	cp->timeout = conn->supervision_reload *
   166f6:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   166f8:	237d      	movs	r3, #125	; 0x7d
   166fa:	4353      	muls	r3, r2
	cp->latency = conn->latency;
   166fc:	f8a4 100b 	strh.w	r1, [r4, #11]
	cp->timeout = conn->supervision_reload *
   16700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16704:	fb93 f3f2 	sdiv	r3, r3, r2
   16708:	f8a4 300d 	strh.w	r3, [r4, #13]
   1670c:	f7ff bb75 	b.w	15dfa <isr_rx_conn_pkt_ctrl+0x21e>
		   _radio.conn_curr->llcp_length.req) {
   16710:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   16714:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   16718:	4290      	cmp	r0, r2
   1671a:	d01a      	beq.n	16752 <isr_rx_conn_pkt_ctrl+0xb76>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1671c:	2914      	cmp	r1, #20
   1671e:	f47f aae5 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		conn->llcp_length.ack = conn->llcp_length.req;
   16722:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->llcp_length.pause_tx = 0;
   16726:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   1672a:	f36f 0282 	bfc	r2, #2, #1
   1672e:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
		conn->procedure_expire = 0;
   16732:	2000      	movs	r0, #0
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   16734:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
   16736:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1673a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1673c:	2215      	movs	r2, #21
   1673e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   16740:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   16742:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   16744:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   16746:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   16748:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
   1674a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
   1674c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   1674e:	8263      	strh	r3, [r4, #18]
   16750:	e52c      	b.n	161ac <isr_rx_conn_pkt_ctrl+0x5d0>
		switch (rej_ext_ind->reject_opcode) {
   16752:	2903      	cmp	r1, #3
   16754:	f47f aaca 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
			_radio.conn_curr->pause_rx = 0;
   16758:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1675c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   16760:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
   16764:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
   16766:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   1676a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1676e:	230d      	movs	r3, #13
   16770:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
   16772:	7b63      	ldrb	r3, [r4, #13]
   16774:	7323      	strb	r3, [r4, #12]
   16776:	e519      	b.n	161ac <isr_rx_conn_pkt_ctrl+0x5d0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
   16778:	7a41      	ldrb	r1, [r0, #9]
   1677a:	2012      	movs	r0, #18
   1677c:	f7fa fed8 	bl	11530 <pdu_len_cmp>
   16780:	2800      	cmp	r0, #0
   16782:	f000 83b7 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   16786:	4814      	ldr	r0, [pc, #80]	; (167d8 <isr_rx_conn_pkt_ctrl+0xbfc>)
   16788:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1678c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   16790:	f7f9 fea8 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   16794:	4601      	mov	r1, r0
   16796:	2800      	cmp	r0, #0
   16798:	f43f ac44 	beq.w	16024 <isr_rx_conn_pkt_ctrl+0x448>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1679c:	7903      	ldrb	r3, [r0, #4]
   1679e:	f043 0303 	orr.w	r3, r3, #3
   167a2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   167a4:	2301      	movs	r3, #1
   167a6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   167a8:	2313      	movs	r3, #19
   167aa:	e476      	b.n	1609a <isr_rx_conn_pkt_ctrl+0x4be>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
   167ac:	7a41      	ldrb	r1, [r0, #9]
   167ae:	2013      	movs	r0, #19
   167b0:	f7fa febe 	bl	11530 <pdu_len_cmp>
   167b4:	2800      	cmp	r0, #0
   167b6:	f000 839d 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		_radio.conn_curr->procedure_expire = 0;
   167ba:	4b07      	ldr	r3, [pc, #28]	; (167d8 <isr_rx_conn_pkt_ctrl+0xbfc>)
   167bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   167c0:	e417      	b.n	15ff2 <isr_rx_conn_pkt_ctrl+0x416>
   167c2:	bf00      	nop
   167c4:	2000d72c 	.word	0x2000d72c
   167c8:	0002cff8 	.word	0x0002cff8
   167cc:	0002d030 	.word	0x0002d030
   167d0:	0002f0b9 	.word	0x0002f0b9
   167d4:	0003056a 	.word	0x0003056a
   167d8:	2000110c 	.word	0x2000110c
   167dc:	0003052f 	.word	0x0003052f
   167e0:	00030dec 	.word	0x00030dec
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   167e4:	7a41      	ldrb	r1, [r0, #9]
   167e6:	2007      	movs	r0, #7
   167e8:	f7fa fea2 	bl	11530 <pdu_len_cmp>
   167ec:	2800      	cmp	r0, #0
   167ee:	f000 8381 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   167f2:	4acd      	ldr	r2, [pc, #820]	; (16b28 <isr_rx_conn_pkt_ctrl+0xf4c>)
   167f4:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   167f8:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
   167fc:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   16800:	42b1      	cmp	r1, r6
   16802:	4611      	mov	r1, r2
   16804:	f000 8089 	beq.w	1691a <isr_rx_conn_pkt_ctrl+0xd3e>
			conn->llcp_conn_param.disabled = 1;
   16808:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
   1680c:	f040 0010 	orr.w	r0, r0, #16
   16810:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
   16814:	f993 001d 	ldrsb.w	r0, [r3, #29]
   16818:	2800      	cmp	r0, #0
   1681a:	db46      	blt.n	168aa <isr_rx_conn_pkt_ctrl+0xcce>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1681c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   16820:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   16824:	4294      	cmp	r4, r2
   16826:	d014      	beq.n	16852 <isr_rx_conn_pkt_ctrl+0xc76>
   16828:	4bc0      	ldr	r3, [pc, #768]	; (16b2c <isr_rx_conn_pkt_ctrl+0xf50>)
   1682a:	681b      	ldr	r3, [r3, #0]
   1682c:	075a      	lsls	r2, r3, #29
   1682e:	f43f ab31 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   16832:	2301      	movs	r3, #1
   16834:	f04f 0200 	mov.w	r2, #0
   16838:	f363 0202 	bfi	r2, r3, #0, #3
   1683c:	49bc      	ldr	r1, [pc, #752]	; (16b30 <isr_rx_conn_pkt_ctrl+0xf54>)
   1683e:	4bbd      	ldr	r3, [pc, #756]	; (16b34 <isr_rx_conn_pkt_ctrl+0xf58>)
   16840:	1a5b      	subs	r3, r3, r1
   16842:	f36f 02c5 	bfc	r2, #3, #3
   16846:	08db      	lsrs	r3, r3, #3
   16848:	f363 128f 	bfi	r2, r3, #6, #10
   1684c:	49ba      	ldr	r1, [pc, #744]	; (16b38 <isr_rx_conn_pkt_ctrl+0xf5c>)
   1684e:	f7ff ba7d 	b.w	15d4c <isr_rx_conn_pkt_ctrl+0x170>
				conn->llcp_conn_param.state =
   16852:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   16856:	2105      	movs	r1, #5
   16858:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
   1685c:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   16860:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
   16864:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   16868:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
   1686c:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	; 0xca
   16870:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   16874:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
   16878:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
   1687c:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   1687e:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   16882:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
   16886:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
   1688a:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
   1688c:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
   16890:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
   16892:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
   16896:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
   1689a:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
   1689e:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
   168a2:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
   168a6:	f7ff ba6b 	b.w	15d80 <isr_rx_conn_pkt_ctrl+0x1a4>
			LL_ASSERT(_radio.conn_upd == conn);
   168aa:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
   168ae:	429a      	cmp	r2, r3
   168b0:	d013      	beq.n	168da <isr_rx_conn_pkt_ctrl+0xcfe>
   168b2:	4b9e      	ldr	r3, [pc, #632]	; (16b2c <isr_rx_conn_pkt_ctrl+0xf50>)
   168b4:	681b      	ldr	r3, [r3, #0]
   168b6:	075b      	lsls	r3, r3, #29
   168b8:	f43f aaec 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   168bc:	2301      	movs	r3, #1
   168be:	f04f 0200 	mov.w	r2, #0
   168c2:	f363 0202 	bfi	r2, r3, #0, #3
   168c6:	499a      	ldr	r1, [pc, #616]	; (16b30 <isr_rx_conn_pkt_ctrl+0xf54>)
   168c8:	4b9a      	ldr	r3, [pc, #616]	; (16b34 <isr_rx_conn_pkt_ctrl+0xf58>)
   168ca:	1a5b      	subs	r3, r3, r1
   168cc:	f36f 02c5 	bfc	r2, #3, #3
   168d0:	08db      	lsrs	r3, r3, #3
   168d2:	f363 128f 	bfi	r2, r3, #6, #10
   168d6:	4998      	ldr	r1, [pc, #608]	; (16b38 <isr_rx_conn_pkt_ctrl+0xf5c>)
   168d8:	e6f0      	b.n	166bc <isr_rx_conn_pkt_ctrl+0xae0>
			_radio.conn_upd = NULL;
   168da:	2300      	movs	r3, #0
   168dc:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
   168e0:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   168e4:	f882 60c1 	strb.w	r6, [r2, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
   168e8:	071f      	lsls	r7, r3, #28
   168ea:	f57f a9ff 	bpl.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   168ee:	2308      	movs	r3, #8
   168f0:	7123      	strb	r3, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   168f2:	231a      	movs	r3, #26
   168f4:	7223      	strb	r3, [r4, #8]
			cp->interval = conn->conn_interval;
   168f6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
			cp->latency = conn->latency;
   168f8:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
   168fa:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			cp->interval = conn->conn_interval;
   168fc:	f8a4 3009 	strh.w	r3, [r4, #9]
			cp->timeout = conn->supervision_reload *
   16900:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
   16902:	237d      	movs	r3, #125	; 0x7d
   16904:	4353      	muls	r3, r2
			cp->latency = conn->latency;
   16906:	f8a4 000b 	strh.w	r0, [r4, #11]
			cp->timeout = conn->supervision_reload *
   1690a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1690e:	fb93 f3f2 	sdiv	r3, r3, r2
   16912:	f8a4 300d 	strh.w	r3, [r4, #13]
   16916:	f7ff bb04 	b.w	15f22 <isr_rx_conn_pkt_ctrl+0x346>
		} else if (_radio.conn_curr->llcp_length.req !=
   1691a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
   1691e:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   16922:	4290      	cmp	r0, r2
   16924:	d009      	beq.n	1693a <isr_rx_conn_pkt_ctrl+0xd5e>
			_radio.conn_curr->llcp_length.ack =
   16926:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->llcp_length.pause_tx = 0;
   1692a:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   1692e:	f36f 0282 	bfc	r2, #2, #1
   16932:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
   16936:	f7ff baf4 	b.w	15f22 <isr_rx_conn_pkt_ctrl+0x346>
		} else if (_radio.conn_curr->llcp_phy.req !=
   1693a:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   1693e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
   16942:	4290      	cmp	r0, r2
   16944:	d01b      	beq.n	1697e <isr_rx_conn_pkt_ctrl+0xda2>
			_radio.conn_curr->llcp_phy.ack =
   16946:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
   1694a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
   1694e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   16952:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   16956:	f362 0002 	bfi	r0, r2, #0, #3
   1695a:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   1695e:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
   16962:	0786      	lsls	r6, r0, #30
   16964:	d50f      	bpl.n	16986 <isr_rx_conn_pkt_ctrl+0xdaa>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16966:	200c      	movs	r0, #12
   16968:	7120      	strb	r0, [r4, #4]
				p->status = 0;
   1696a:	2000      	movs	r0, #0
   1696c:	7220      	strb	r0, [r4, #8]
				p->tx = _radio.conn_curr->phy_tx;
   1696e:	7262      	strb	r2, [r4, #9]
				p->rx = _radio.conn_curr->phy_rx;
   16970:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   16974:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16978:	72a3      	strb	r3, [r4, #10]
   1697a:	f7ff bad2 	b.w	15f22 <isr_rx_conn_pkt_ctrl+0x346>
			switch (llctrl->unknown_rsp.type) {
   1697e:	7b23      	ldrb	r3, [r4, #12]
   16980:	2b12      	cmp	r3, #18
   16982:	f47f aace 	bne.w	15f22 <isr_rx_conn_pkt_ctrl+0x346>
		_radio.conn_curr->procedure_expire = 0;
   16986:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
   1698a:	f7ff bb32 	b.w	15ff2 <isr_rx_conn_pkt_ctrl+0x416>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   1698e:	7a41      	ldrb	r1, [r0, #9]
   16990:	2014      	movs	r0, #20
   16992:	f7fa fdcd 	bl	11530 <pdu_len_cmp>
   16996:	2800      	cmp	r0, #0
   16998:	f000 82ac 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1699c:	2f14      	cmp	r7, #20
   1699e:	d15f      	bne.n	16a60 <isr_rx_conn_pkt_ctrl+0xe84>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   169a0:	4866      	ldr	r0, [pc, #408]	; (16b3c <isr_rx_conn_pkt_ctrl+0xf60>)
   169a2:	f7f9 fd9f 	bl	104e4 <mem_acquire>
		if (!node_tx) {
   169a6:	4606      	mov	r6, r0
   169a8:	2800      	cmp	r0, #0
   169aa:	f43f ab3b 	beq.w	16024 <isr_rx_conn_pkt_ctrl+0x448>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   169ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 16b28 <isr_rx_conn_pkt_ctrl+0xf4c>
   169b2:	7ae7      	ldrb	r7, [r4, #11]
   169b4:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
	    ((_radio.conn_curr->llcp_length.req ==
   169b8:	f893 e0e8 	ldrb.w	lr, [r3, #232]	; 0xe8
	if (/* Local idle, and Peer request then complete the Peer procedure
   169bc:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   169c0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   169c2:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   169c4:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   169c6:	f8b3 c034 	ldrh.w	ip, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
   169ca:	45f0      	cmp	r8, lr
   169cc:	d14a      	bne.n	16a64 <isr_rx_conn_pkt_ctrl+0xe88>
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   169ce:	2f14      	cmp	r7, #20
   169d0:	f040 80dd 	bne.w	16b8e <isr_rx_conn_pkt_ctrl+0xfb2>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   169d4:	89a7      	ldrh	r7, [r4, #12]
   169d6:	2f1a      	cmp	r7, #26
   169d8:	d968      	bls.n	16aac <isr_rx_conn_pkt_ctrl+0xed0>
			eff_tx_octets = min(lr->max_rx_octets,
   169da:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
   169de:	4547      	cmp	r7, r8
   169e0:	bf28      	it	cs
   169e2:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   169e4:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   169e8:	f1b8 0f1a 	cmp.w	r8, #26
		if (lr->max_rx_time >=
   169ec:	f8b4 800e 	ldrh.w	r8, [r4, #14]
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   169f0:	bf94      	ite	ls
   169f2:	4693      	movls	fp, r2
   169f4:	f04f 0b1b 	movhi.w	fp, #27
		if (lr->max_rx_time >=
   169f8:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
   169fc:	d358      	bcc.n	16ab0 <isr_rx_conn_pkt_ctrl+0xed4>
			eff_tx_time = min(lr->max_rx_time,
   169fe:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
   16a02:	45d0      	cmp	r8, sl
   16a04:	bf28      	it	cs
   16a06:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
   16a08:	f8b4 a012 	ldrh.w	sl, [r4, #18]
	eff_rx_time = _radio.conn_curr->max_rx_time;
   16a0c:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
   16a10:	bf34      	ite	cc
   16a12:	4682      	movcc	sl, r0
   16a14:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   16a18:	455a      	cmp	r2, fp
   16a1a:	f000 8097 	beq.w	16b4c <isr_rx_conn_pkt_ctrl+0xf70>
			free_count_rx = packet_rx_acquired_count_get() +
   16a1e:	f7fa fdd7 	bl	115d0 <packet_rx_acquired_count_get>
   16a22:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
   16a24:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
   16a28:	f7f9 fd8a 	bl	10540 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
   16a2c:	4420      	add	r0, r4
   16a2e:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
   16a30:	28ff      	cmp	r0, #255	; 0xff
   16a32:	d93f      	bls.n	16ab4 <isr_rx_conn_pkt_ctrl+0xed8>
   16a34:	4b3d      	ldr	r3, [pc, #244]	; (16b2c <isr_rx_conn_pkt_ctrl+0xf50>)
   16a36:	681b      	ldr	r3, [r3, #0]
   16a38:	0758      	lsls	r0, r3, #29
   16a3a:	f43f aa2b 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   16a3e:	2301      	movs	r3, #1
   16a40:	f04f 0200 	mov.w	r2, #0
   16a44:	f363 0202 	bfi	r2, r3, #0, #3
   16a48:	4939      	ldr	r1, [pc, #228]	; (16b30 <isr_rx_conn_pkt_ctrl+0xf54>)
   16a4a:	4b3a      	ldr	r3, [pc, #232]	; (16b34 <isr_rx_conn_pkt_ctrl+0xf58>)
   16a4c:	483c      	ldr	r0, [pc, #240]	; (16b40 <isr_rx_conn_pkt_ctrl+0xf64>)
   16a4e:	1a5b      	subs	r3, r3, r1
   16a50:	f36f 02c5 	bfc	r2, #3, #3
   16a54:	08db      	lsrs	r3, r3, #3
   16a56:	f363 128f 	bfi	r2, r3, #6, #10
   16a5a:	493a      	ldr	r1, [pc, #232]	; (16b44 <isr_rx_conn_pkt_ctrl+0xf68>)
   16a5c:	f7ff ba18 	b.w	15e90 <isr_rx_conn_pkt_ctrl+0x2b4>
	struct radio_pdu_node_tx *node_tx = NULL;
   16a60:	2600      	movs	r6, #0
   16a62:	e7a4      	b.n	169ae <isr_rx_conn_pkt_ctrl+0xdd2>
		 LLCP_LENGTH_STATE_REQ) ||
   16a64:	f893 80ea 	ldrb.w	r8, [r3, #234]	; 0xea
   16a68:	f008 0803 	and.w	r8, r8, #3
	      _radio.conn_curr->llcp_length.ack) &&
   16a6c:	f1b8 0f01 	cmp.w	r8, #1
   16a70:	d9ad      	bls.n	169ce <isr_rx_conn_pkt_ctrl+0xdf2>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   16a72:	f1b8 0f02 	cmp.w	r8, #2
   16a76:	f040 808a 	bne.w	16b8e <isr_rx_conn_pkt_ctrl+0xfb2>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   16a7a:	3f14      	subs	r7, #20
   16a7c:	2f01      	cmp	r7, #1
   16a7e:	d9a9      	bls.n	169d4 <isr_rx_conn_pkt_ctrl+0xdf8>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   16a80:	4b2a      	ldr	r3, [pc, #168]	; (16b2c <isr_rx_conn_pkt_ctrl+0xf50>)
   16a82:	681b      	ldr	r3, [r3, #0]
   16a84:	0759      	lsls	r1, r3, #29
   16a86:	f43f aa05 	beq.w	15e94 <isr_rx_conn_pkt_ctrl+0x2b8>
   16a8a:	2301      	movs	r3, #1
   16a8c:	f04f 0200 	mov.w	r2, #0
   16a90:	f363 0202 	bfi	r2, r3, #0, #3
   16a94:	4926      	ldr	r1, [pc, #152]	; (16b30 <isr_rx_conn_pkt_ctrl+0xf54>)
   16a96:	4b27      	ldr	r3, [pc, #156]	; (16b34 <isr_rx_conn_pkt_ctrl+0xf58>)
   16a98:	482b      	ldr	r0, [pc, #172]	; (16b48 <isr_rx_conn_pkt_ctrl+0xf6c>)
   16a9a:	1a5b      	subs	r3, r3, r1
   16a9c:	f36f 02c5 	bfc	r2, #3, #3
   16aa0:	08db      	lsrs	r3, r3, #3
   16aa2:	f363 128f 	bfi	r2, r3, #6, #10
   16aa6:	4927      	ldr	r1, [pc, #156]	; (16b44 <isr_rx_conn_pkt_ctrl+0xf68>)
   16aa8:	f7ff b9f2 	b.w	15e90 <isr_rx_conn_pkt_ctrl+0x2b4>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   16aac:	460f      	mov	r7, r1
   16aae:	e799      	b.n	169e4 <isr_rx_conn_pkt_ctrl+0xe08>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   16ab0:	46e0      	mov	r8, ip
   16ab2:	e7a9      	b.n	16a08 <isr_rx_conn_pkt_ctrl+0xe2c>
			if (_radio.packet_rx_data_count == free_count_rx) {
   16ab4:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
   16ab8:	4283      	cmp	r3, r0
   16aba:	f040 8231 	bne.w	16f20 <isr_rx_conn_pkt_ctrl+0x1344>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   16abe:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
   16ac2:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   16ac6:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
   16ac8:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   16aca:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   16ace:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
   16ad2:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
   16ad6:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
   16ada:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   16ade:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   16ae2:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   16ae6:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
   16aea:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   16aee:	2303      	movs	r3, #3
   16af0:	f889 3015 	strb.w	r3, [r9, #21]
	if (node_tx) {
   16af4:	2e00      	cmp	r6, #0
   16af6:	f43f a8f9 	beq.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16afa:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
   16afc:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
   16b00:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16b04:	f043 0303 	orr.w	r3, r3, #3
   16b08:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16b0a:	2309      	movs	r3, #9
   16b0c:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16b0e:	2315      	movs	r3, #21
   16b10:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
   16b12:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
   16b14:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
   16b18:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
   16b1c:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
   16b1e:	f7fd fc3f 	bl	143a0 <ctrl_tx_enqueue>
   16b22:	f7ff b8e3 	b.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
   16b26:	bf00      	nop
   16b28:	2000110c 	.word	0x2000110c
   16b2c:	2000d72c 	.word	0x2000d72c
   16b30:	0002cff8 	.word	0x0002cff8
   16b34:	0002d030 	.word	0x0002d030
   16b38:	0003056a 	.word	0x0003056a
   16b3c:	20001268 	.word	0x20001268
   16b40:	00030a44 	.word	0x00030a44
   16b44:	00030551 	.word	0x00030551
   16b48:	00030e19 	.word	0x00030e19
			_radio.conn_curr->llcp_length.pause_tx = 0;
   16b4c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
			_radio.conn_curr->llcp_length.ack =
   16b50:	f883 e0e9 	strb.w	lr, [r3, #233]	; 0xe9
			_radio.conn_curr->llcp_length.pause_tx = 0;
   16b54:	f36f 0282 	bfc	r2, #2, #1
   16b58:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   16b5c:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
   16b5e:	f04f 0200 	mov.w	r2, #0
   16b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   16b66:	d103      	bne.n	16b70 <isr_rx_conn_pkt_ctrl+0xf94>
   16b68:	45c4      	cmp	ip, r8
   16b6a:	d101      	bne.n	16b70 <isr_rx_conn_pkt_ctrl+0xf94>
			    eff_rx_time == _radio.conn_curr->max_rx_time &&
   16b6c:	4550      	cmp	r0, sl
   16b6e:	d0c1      	beq.n	16af4 <isr_rx_conn_pkt_ctrl+0xf18>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   16b70:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   16b72:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   16b76:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
   16b7a:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
   16b7c:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
   16b80:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
   16b82:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
   16b86:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
   16b8a:	702b      	strb	r3, [r5, #0]
   16b8c:	e7b2      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0xf18>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   16b8e:	2f15      	cmp	r7, #21
   16b90:	f47f af76 	bne.w	16a80 <isr_rx_conn_pkt_ctrl+0xea4>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   16b94:	46e0      	mov	r8, ip
	eff_rx_time = _radio.conn_curr->max_rx_time;
   16b96:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   16b98:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   16b9a:	4693      	mov	fp, r2
   16b9c:	e7aa      	b.n	16af4 <isr_rx_conn_pkt_ctrl+0xf18>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
   16b9e:	7a41      	ldrb	r1, [r0, #9]
   16ba0:	2016      	movs	r0, #22
   16ba2:	f7fa fcc5 	bl	11530 <pdu_len_cmp>
   16ba6:	2800      	cmp	r0, #0
   16ba8:	f000 81a4 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
   16bac:	48e1      	ldr	r0, [pc, #900]	; (16f34 <isr_rx_conn_pkt_ctrl+0x1358>)
		if (_radio.role == ROLE_MASTER) {
   16bae:	7d03      	ldrb	r3, [r0, #20]
   16bb0:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
   16bb4:	2b04      	cmp	r3, #4
   16bb6:	d156      	bne.n	16c66 <isr_rx_conn_pkt_ctrl+0x108a>
			if ((_radio.conn_curr->llcp_phy.ack !=
   16bb8:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   16bbc:	f895 10f4 	ldrb.w	r1, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   16bc0:	428b      	cmp	r3, r1
   16bc2:	d009      	beq.n	16bd8 <isr_rx_conn_pkt_ctrl+0xffc>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   16bc4:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   16bc8:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
   16bcc:	3a01      	subs	r2, #1
   16bce:	2a02      	cmp	r2, #2
   16bd0:	d802      	bhi.n	16bd8 <isr_rx_conn_pkt_ctrl+0xffc>
				nack = reject_ext_ind_send(_radio.conn_curr,
   16bd2:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
   16bd4:	2116      	movs	r1, #22
   16bd6:	e4ad      	b.n	16534 <isr_rx_conn_pkt_ctrl+0x958>
			} else if (((_radio.conn_curr->llcp_req !=
   16bd8:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
   16bdc:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   16be0:	4290      	cmp	r0, r2
   16be2:	d003      	beq.n	16bec <isr_rx_conn_pkt_ctrl+0x1010>
				     _radio.conn_curr->llcp_ack) &&
   16be4:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   16be8:	2a03      	cmp	r2, #3
   16bea:	d105      	bne.n	16bf8 <isr_rx_conn_pkt_ctrl+0x101c>
				     LLCP_ENCRYPTION)) ||
   16bec:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
   16bf0:	f895 20c1 	ldrb.w	r2, [r5, #193]	; 0xc1
   16bf4:	4290      	cmp	r0, r2
   16bf6:	d001      	beq.n	16bfc <isr_rx_conn_pkt_ctrl+0x1020>
				nack = reject_ext_ind_send(_radio.conn_curr,
   16bf8:	222a      	movs	r2, #42	; 0x2a
   16bfa:	e7eb      	b.n	16bd4 <isr_rx_conn_pkt_ctrl+0xff8>
				_radio.conn_curr->llcp_phy.state =
   16bfc:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   16c00:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
   16c02:	f042 0203 	orr.w	r2, r2, #3
   16c06:	f885 20f6 	strb.w	r2, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   16c0a:	d118      	bne.n	16c3e <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_curr->llcp_phy.ack--;
   16c0c:	3b01      	subs	r3, #1
   16c0e:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   16c12:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
   16c16:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
   16c1a:	f36f 0341 	bfc	r3, #1, #1
   16c1e:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   16c22:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
						_radio.conn_curr->phy_pref_tx;
   16c26:	f3c2 0202 	ubfx	r2, r2, #0, #3
					_radio.conn_curr->llcp_phy.tx =
   16c2a:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
   16c2e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   16c32:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   16c36:	f362 1347 	bfi	r3, r2, #5, #3
   16c3a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   16c3e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   16c42:	7b62      	ldrb	r2, [r4, #13]
   16c44:	f3c3 0182 	ubfx	r1, r3, #2, #3
   16c48:	400a      	ands	r2, r1
   16c4a:	f362 0384 	bfi	r3, r2, #2, #3
   16c4e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   16c52:	7b22      	ldrb	r2, [r4, #12]
   16c54:	b2db      	uxtb	r3, r3
   16c56:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   16c5a:	f362 1347 	bfi	r3, r2, #5, #3
   16c5e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   16c62:	f7ff b843 	b.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16c66:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   16c6a:	f7f9 fc3b 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   16c6e:	4601      	mov	r1, r0
   16c70:	2800      	cmp	r0, #0
   16c72:	f43f a9d7 	beq.w	16024 <isr_rx_conn_pkt_ctrl+0x448>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16c76:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
   16c7a:	f895 c0f5 	ldrb.w	ip, [r5, #245]	; 0xf5
   16c7e:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16c82:	2202      	movs	r2, #2
   16c84:	f362 0301 	bfi	r3, r2, #0, #2
   16c88:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   16c8c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
	if (conn->llcp_phy.ack ==
   16c90:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   16c94:	f3c0 0002 	ubfx	r0, r0, #0, #3
   16c98:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16c9c:	4563      	cmp	r3, ip
   16c9e:	b2c7      	uxtb	r7, r0
   16ca0:	b2d6      	uxtb	r6, r2
   16ca2:	d114      	bne.n	16cce <isr_rx_conn_pkt_ctrl+0x10f2>
		conn->llcp_phy.ack--;
   16ca4:	3b01      	subs	r3, #1
   16ca6:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
   16caa:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
   16cae:	f36f 0341 	bfc	r3, #1, #1
   16cb2:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
   16cb6:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   16cba:	f367 0384 	bfi	r3, r7, #2, #3
		conn->llcp_phy.rx =
   16cbe:	f366 1347 	bfi	r3, r6, #5, #3
   16cc2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
   16cc6:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   16cca:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
   16cce:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   16cd2:	7b66      	ldrb	r6, [r4, #13]
   16cd4:	f3c3 0782 	ubfx	r7, r3, #2, #3
   16cd8:	403e      	ands	r6, r7
   16cda:	f366 0384 	bfi	r3, r6, #2, #3
   16cde:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
   16ce2:	7b24      	ldrb	r4, [r4, #12]
   16ce4:	b2db      	uxtb	r3, r3
   16ce6:	ea04 1453 	and.w	r4, r4, r3, lsr #5
   16cea:	f364 1347 	bfi	r3, r4, #5, #3
   16cee:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16cf2:	790b      	ldrb	r3, [r1, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16cf4:	7208      	strb	r0, [r1, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16cf6:	f043 0303 	orr.w	r3, r3, #3
   16cfa:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16cfc:	2303      	movs	r3, #3
   16cfe:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16d00:	2317      	movs	r3, #23
   16d02:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16d04:	724a      	strb	r2, [r1, #9]
   16d06:	f7ff b99f 	b.w	16048 <isr_rx_conn_pkt_ctrl+0x46c>
		if (_radio.conn_curr->role ||
   16d0a:	4e8a      	ldr	r6, [pc, #552]	; (16f34 <isr_rx_conn_pkt_ctrl+0x1358>)
   16d0c:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   16d10:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16d14:	2b00      	cmp	r3, #0
   16d16:	f2c0 80ed 	blt.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
   16d1a:	7a41      	ldrb	r1, [r0, #9]
   16d1c:	2017      	movs	r0, #23
   16d1e:	f7fa fc07 	bl	11530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   16d22:	2800      	cmp	r0, #0
   16d24:	f000 80e6 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		if ((_radio.role == ROLE_MASTER) &&
   16d28:	7d33      	ldrb	r3, [r6, #20]
   16d2a:	2b04      	cmp	r3, #4
   16d2c:	f47e afde 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
   16d30:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   16d34:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   16d38:	429a      	cmp	r2, r3
   16d3a:	f43e afd7 	beq.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		    (_radio.conn_curr->llcp_phy.state ==
   16d3e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
   16d42:	f003 0203 	and.w	r2, r3, #3
   16d46:	2a02      	cmp	r2, #2
   16d48:	f47e afd0 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16d4c:	f043 0303 	orr.w	r3, r3, #3
   16d50:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   16d54:	7b62      	ldrb	r2, [r4, #13]
   16d56:	f3c3 0182 	ubfx	r1, r3, #2, #3
   16d5a:	400a      	ands	r2, r1
   16d5c:	f362 0384 	bfi	r3, r2, #2, #3
   16d60:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   16d64:	7b22      	ldrb	r2, [r4, #12]
   16d66:	b2db      	uxtb	r3, r3
   16d68:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   16d6c:	f362 1347 	bfi	r3, r2, #5, #3
   16d70:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   16d74:	f7fe bfb3 	b.w	15cde <isr_rx_conn_pkt_ctrl+0x102>
		if (!_radio.conn_curr->role ||
   16d78:	4b6e      	ldr	r3, [pc, #440]	; (16f34 <isr_rx_conn_pkt_ctrl+0x1358>)
   16d7a:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
   16d7e:	f996 301d 	ldrsb.w	r3, [r6, #29]
   16d82:	2b00      	cmp	r3, #0
   16d84:	f280 80b6 	bge.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   16d88:	7a41      	ldrb	r1, [r0, #9]
   16d8a:	2018      	movs	r0, #24
   16d8c:	f7fa fbd0 	bl	11530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   16d90:	2800      	cmp	r0, #0
   16d92:	f000 80af 	beq.w	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   16d96:	7b27      	ldrb	r7, [r4, #12]
   16d98:	7b62      	ldrb	r2, [r4, #13]
   16d9a:	ea47 0002 	orr.w	r0, r7, r2
   16d9e:	f010 0007 	ands.w	r0, r0, #7
   16da2:	d125      	bne.n	16df0 <isr_rx_conn_pkt_ctrl+0x1214>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   16da4:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
   16da8:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   16dac:	4293      	cmp	r3, r2
   16dae:	f43e af9d 	beq.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   16db2:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   16db6:	f003 0303 	and.w	r3, r3, #3
   16dba:	2b02      	cmp	r3, #2
   16dbc:	f47e af96 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		if (!conn->llcp_phy.cmd) {
   16dc0:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16dc4:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
   16dc8:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
   16dca:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   16dce:	f57e af8d 	bpl.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16dd2:	230c      	movs	r3, #12
		upd->status = 0;
   16dd4:	7220      	strb	r0, [r4, #8]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16dd6:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
   16dd8:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   16ddc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16de0:	7263      	strb	r3, [r4, #9]
		upd->rx = conn->phy_rx;
   16de2:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   16de6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16dea:	72a3      	strb	r3, [r4, #10]
   16dec:	f7ff b9de 	b.w	161ac <isr_rx_conn_pkt_ctrl+0x5d0>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   16df0:	89e0      	ldrh	r0, [r4, #14]
   16df2:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   16df4:	1ac3      	subs	r3, r0, r3
   16df6:	041b      	lsls	r3, r3, #16
   16df8:	d441      	bmi.n	16e7e <isr_rx_conn_pkt_ctrl+0x12a2>
	if (conn->llcp_req != conn->llcp_ack) {
   16dfa:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
   16dfe:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
   16e02:	428b      	cmp	r3, r1
   16e04:	d140      	bne.n	16e88 <isr_rx_conn_pkt_ctrl+0x12ac>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16e06:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
   16e0a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   16e0e:	42a3      	cmp	r3, r4
   16e10:	d014      	beq.n	16e3c <isr_rx_conn_pkt_ctrl+0x1260>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16e12:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16e16:	f003 0303 	and.w	r3, r3, #3
   16e1a:	2b02      	cmp	r3, #2
   16e1c:	d10e      	bne.n	16e3c <isr_rx_conn_pkt_ctrl+0x1260>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16e1e:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16e22:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16e26:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   16e2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16e2e:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
   16e32:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16e34:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
   16e38:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   16e3c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
   16e40:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   16e44:	f002 0207 	and.w	r2, r2, #7
   16e48:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   16e4c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
   16e50:	f36f 0300 	bfc	r3, #0, #1
   16e54:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   16e58:	2008      	movs	r0, #8
	conn->llcp_ack--;
   16e5a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
   16e5c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   16e60:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
   16e64:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   16e68:	2b00      	cmp	r3, #0
   16e6a:	f43e af3f 	beq.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16e6e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   16e72:	f362 0302 	bfi	r3, r2, #0, #3
   16e76:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
   16e7a:	f7fe bf37 	b.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		return BT_HCI_ERR_INSTANT_PASSED;
   16e7e:	2328      	movs	r3, #40	; 0x28
			_radio.conn_curr->llcp_terminate.reason_peer = err;
   16e80:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
   16e84:	f7fe bf32 	b.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   16e88:	232a      	movs	r3, #42	; 0x2a
   16e8a:	e7f9      	b.n	16e80 <isr_rx_conn_pkt_ctrl+0x12a4>
		if (_radio.conn_curr->role ||
   16e8c:	4e29      	ldr	r6, [pc, #164]	; (16f34 <isr_rx_conn_pkt_ctrl+0x1358>)
   16e8e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
   16e92:	f995 301d 	ldrsb.w	r3, [r5, #29]
   16e96:	2b00      	cmp	r3, #0
   16e98:	db2c      	blt.n	16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   16e9a:	7a41      	ldrb	r1, [r0, #9]
   16e9c:	2019      	movs	r0, #25
   16e9e:	f7fa fb47 	bl	11530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   16ea2:	b338      	cbz	r0, 16ef4 <isr_rx_conn_pkt_ctrl+0x1318>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   16ea4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   16ea8:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   16eac:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16eb0:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16eb4:	4313      	orrs	r3, r2
   16eb6:	7b22      	ldrb	r2, [r4, #12]
   16eb8:	4213      	tst	r3, r2
   16eba:	f43e af17 	beq.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
			if (conn->llcp_req != conn->llcp_ack) {
   16ebe:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   16ec2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   16ec6:	429a      	cmp	r2, r3
   16ec8:	f47e af10 	bne.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
			memcpy(&conn->llcp.chan_map.chm[0],
   16ecc:	2205      	movs	r2, #5
   16ece:	f506 718d 	add.w	r1, r6, #282	; 0x11a
   16ed2:	f105 0079 	add.w	r0, r5, #121	; 0x79
   16ed6:	f7ee ffd7 	bl	5e88 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   16eda:	2301      	movs	r3, #1
   16edc:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   16ee0:	2302      	movs	r3, #2
   16ee2:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   16ee6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   16eea:	3b01      	subs	r3, #1
   16eec:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
   16ef0:	f7fe befc 	b.w	15cec <isr_rx_conn_pkt_ctrl+0x110>
		nack = unknown_rsp_send(_radio.conn_curr,
   16ef4:	480f      	ldr	r0, [pc, #60]	; (16f34 <isr_rx_conn_pkt_ctrl+0x1358>)
   16ef6:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16efa:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
   16efe:	f7f9 faf1 	bl	104e4 <mem_acquire>
	if (!node_tx) {
   16f02:	4601      	mov	r1, r0
   16f04:	2800      	cmp	r0, #0
   16f06:	f43f a88d 	beq.w	16024 <isr_rx_conn_pkt_ctrl+0x448>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16f0a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
   16f0c:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16f0e:	f043 0303 	orr.w	r3, r3, #3
   16f12:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   16f14:	2302      	movs	r3, #2
   16f16:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   16f18:	2307      	movs	r3, #7
   16f1a:	71c3      	strb	r3, [r0, #7]
   16f1c:	f7ff b8be 	b.w	1609c <isr_rx_conn_pkt_ctrl+0x4c0>
	if (node_tx) {
   16f20:	2e00      	cmp	r6, #0
   16f22:	f43f a87f 	beq.w	16024 <isr_rx_conn_pkt_ctrl+0x448>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   16f26:	4904      	ldr	r1, [pc, #16]	; (16f38 <isr_rx_conn_pkt_ctrl+0x135c>)
   16f28:	4630      	mov	r0, r6
   16f2a:	f7f9 faf4 	bl	10516 <mem_release>
   16f2e:	f7ff b879 	b.w	16024 <isr_rx_conn_pkt_ctrl+0x448>
   16f32:	bf00      	nop
   16f34:	2000110c 	.word	0x2000110c
   16f38:	20001268 	.word	0x20001268
   16f3c:	00000000 	.word	0x00000000

00016f40 <isr>:
{
   16f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f44:	b095      	sub	sp, #84	; 0x54
	trx_done = radio_is_done();
   16f46:	f006 fdc5 	bl	1dad4 <radio_is_done>
   16f4a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   16f4c:	b366      	cbz	r6, 16fa8 <isr+0x68>
		crc_ok = radio_crc_is_valid();
   16f4e:	f006 fde1 	bl	1db14 <radio_crc_is_valid>
   16f52:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   16f54:	f006 fe62 	bl	1dc1c <radio_filter_has_match>
   16f58:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   16f5c:	f006 fe68 	bl	1dc30 <radio_filter_match_get>
   16f60:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
   16f64:	f007 f84e 	bl	1e004 <radio_ar_has_match>
   16f68:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
   16f6c:	f007 f838 	bl	1dfe0 <radio_ar_match_get>
   16f70:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
   16f74:	f006 fe1c 	bl	1dbb0 <radio_rssi_is_ready>
   16f78:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
   16f7a:	4ca5      	ldr	r4, [pc, #660]	; (17210 <isr+0x2d0>)
	radio_status_reset();
   16f7c:	f006 fd94 	bl	1daa8 <radio_status_reset>
	radio_tmr_status_reset();
   16f80:	f006 fe68 	bl	1dc54 <radio_tmr_status_reset>
	radio_filter_status_reset();
   16f84:	f006 fe42 	bl	1dc0c <radio_filter_status_reset>
	radio_ar_status_reset();
   16f88:	f007 f830 	bl	1dfec <radio_ar_status_reset>
	radio_rssi_status_reset();
   16f8c:	f006 fe08 	bl	1dba0 <radio_rssi_status_reset>
	switch (_radio.state) {
   16f90:	7d63      	ldrb	r3, [r4, #21]
   16f92:	2b05      	cmp	r3, #5
   16f94:	f201 8553 	bhi.w	18a3e <isr+0x1afe>
   16f98:	e8df f013 	tbh	[pc, r3, lsl #1]
   16f9c:	00e70089 	.word	0x00e70089
   16fa0:	0ad1000e 	.word	0x0ad1000e
   16fa4:	0ad10ad1 	.word	0x0ad10ad1
		devmatch_id = irkmatch_id = 0xFF;
   16fa8:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   16fac:	4635      	mov	r5, r6
   16fae:	46b2      	mov	sl, r6
   16fb0:	46b1      	mov	r9, r6
   16fb2:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
   16fb4:	46d8      	mov	r8, fp
   16fb6:	e7e0      	b.n	16f7a <isr+0x3a>
	_radio.state = STATE_RX;
   16fb8:	2301      	movs	r3, #1
   16fba:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get()
   16fbc:	f006 ff4e 	bl	1de5c <radio_tmr_tifs_base_get>
   16fc0:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   16fc2:	2096      	movs	r0, #150	; 0x96
   16fc4:	f006 fe54 	bl	1dc70 <radio_tmr_tifs_set>
	switch (_radio.role) {
   16fc8:	7d23      	ldrb	r3, [r4, #20]
   16fca:	3b01      	subs	r3, #1
   16fcc:	2b03      	cmp	r3, #3
   16fce:	f200 80b7 	bhi.w	17140 <isr+0x200>
   16fd2:	e8df f003 	tbb	[pc, r3]
   16fd6:	3f02      	.short	0x3f02
   16fd8:	6f6f      	.short	0x6f6f
		radio_switch_complete_and_tx(0, 0, 0, 0);
   16fda:	2300      	movs	r3, #0
   16fdc:	461a      	mov	r2, r3
   16fde:	4619      	mov	r1, r3
   16fe0:	4618      	mov	r0, r3
   16fe2:	f006 fdb5 	bl	1db50 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   16fe6:	f006 fda3 	bl	1db30 <radio_pkt_scratch_get>
   16fea:	f006 fd25 	bl	1da38 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   16fee:	f006 fd67 	bl	1dac0 <radio_is_ready>
   16ff2:	b1a0      	cbz	r0, 1701e <isr+0xde>
		LL_ASSERT(!radio_is_ready());
   16ff4:	4b87      	ldr	r3, [pc, #540]	; (17214 <isr+0x2d4>)
   16ff6:	681b      	ldr	r3, [r3, #0]
   16ff8:	0759      	lsls	r1, r3, #29
   16ffa:	f000 838f 	beq.w	1771c <isr+0x7dc>
   16ffe:	2301      	movs	r3, #1
   17000:	f04f 0200 	mov.w	r2, #0
   17004:	f363 0202 	bfi	r2, r3, #0, #3
   17008:	4983      	ldr	r1, [pc, #524]	; (17218 <isr+0x2d8>)
   1700a:	4b84      	ldr	r3, [pc, #528]	; (1721c <isr+0x2dc>)
   1700c:	1a5b      	subs	r3, r3, r1
   1700e:	f36f 02c5 	bfc	r2, #3, #3
   17012:	08db      	lsrs	r3, r3, #3
   17014:	4982      	ldr	r1, [pc, #520]	; (17220 <isr+0x2e0>)
   17016:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(!radio_is_ready());
   1701a:	4882      	ldr	r0, [pc, #520]	; (17224 <isr+0x2e4>)
   1701c:	e37c      	b.n	17718 <isr+0x7d8>
		if (ctrl_rl_enabled()) {
   1701e:	f005 feeb 	bl	1cdf8 <ctrl_rl_enabled>
   17022:	b138      	cbz	r0, 17034 <isr+0xf4>
			u8_t count, *irks = ctrl_irks_get(&count);
   17024:	a812      	add	r0, sp, #72	; 0x48
   17026:	f005 fb79 	bl	1c71c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1702a:	4601      	mov	r1, r0
   1702c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   17030:	f006 ffa4 	bl	1df7c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   17034:	2100      	movs	r1, #0
   17036:	4608      	mov	r0, r1
   17038:	f006 fd13 	bl	1da62 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   1703c:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   1703e:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   17040:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   17042:	4608      	mov	r0, r1
   17044:	f006 fd09 	bl	1da5a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   17048:	1a28      	subs	r0, r5, r0
   1704a:	f006 fe9d 	bl	1dd88 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   1704e:	f006 feed 	bl	1de2c <radio_tmr_end_capture>
   17052:	e02c      	b.n	170ae <isr+0x16e>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   17054:	2300      	movs	r3, #0
   17056:	461a      	mov	r2, r3
   17058:	4619      	mov	r1, r3
   1705a:	4618      	mov	r0, r3
   1705c:	f006 fd78 	bl	1db50 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   17060:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   17064:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   17068:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1706c:	3008      	adds	r0, #8
   1706e:	f006 fce3 	bl	1da38 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   17072:	f006 fd25 	bl	1dac0 <radio_is_ready>
   17076:	2800      	cmp	r0, #0
   17078:	d1bc      	bne.n	16ff4 <isr+0xb4>
		if (ctrl_rl_enabled()) {
   1707a:	f005 febd 	bl	1cdf8 <ctrl_rl_enabled>
   1707e:	b138      	cbz	r0, 17090 <isr+0x150>
			u8_t count, *irks = ctrl_irks_get(&count);
   17080:	a812      	add	r0, sp, #72	; 0x48
   17082:	f005 fb4b 	bl	1c71c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   17086:	4601      	mov	r1, r0
   17088:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   1708c:	f006 ff76 	bl	1df7c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   17090:	2100      	movs	r1, #0
   17092:	4608      	mov	r0, r1
   17094:	f006 fce5 	bl	1da62 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   17098:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   1709a:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   1709c:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   1709e:	4608      	mov	r0, r1
   170a0:	f006 fcdb 	bl	1da5a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   170a4:	1a28      	subs	r0, r5, r0
   170a6:	f006 fe6f 	bl	1dd88 <radio_tmr_hcto_configure>
		radio_rssi_measure();
   170aa:	f006 fd69 	bl	1db80 <radio_rssi_measure>
}
   170ae:	b015      	add	sp, #84	; 0x54
   170b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   170b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
   170b8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   170bc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   170c0:	2100      	movs	r1, #0
   170c2:	09d3      	lsrs	r3, r2, #7
   170c4:	f000 0007 	and.w	r0, r0, #7
   170c8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   170cc:	f006 fd40 	bl	1db50 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   170d0:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   170d4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
   170d8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   170dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
   170e0:	3108      	adds	r1, #8
   170e2:	f7fa fec3 	bl	11e6c <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   170e6:	f006 fceb 	bl	1dac0 <radio_is_ready>
   170ea:	2800      	cmp	r0, #0
   170ec:	d182      	bne.n	16ff4 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   170ee:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   170f2:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   170f6:	2101      	movs	r1, #1
   170f8:	f000 0007 	and.w	r0, r0, #7
   170fc:	f006 fcb1 	bl	1da62 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   17100:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   17104:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
   17108:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
   1710c:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
   1710e:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   17110:	4405      	add	r5, r0
	switch (phy) {
   17112:	d013      	beq.n	1713c <isr+0x1fc>
		return 40;
   17114:	2b04      	cmp	r3, #4
   17116:	bf0c      	ite	eq
   17118:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   1711c:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   1711e:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
   17120:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   17124:	09c1      	lsrs	r1, r0, #7
   17126:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1712a:	f006 fc96 	bl	1da5a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   1712e:	1a28      	subs	r0, r5, r0
   17130:	f006 fe2a 	bl	1dd88 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   17134:	2001      	movs	r0, #1
   17136:	f7fb fdb7 	bl	12ca8 <packet_tx_enqueue>
   1713a:	e7b8      	b.n	170ae <isr+0x16e>
		return 24;
   1713c:	2018      	movs	r0, #24
   1713e:	e7ee      	b.n	1711e <isr+0x1de>
		LL_ASSERT(0);
   17140:	4b34      	ldr	r3, [pc, #208]	; (17214 <isr+0x2d4>)
   17142:	681b      	ldr	r3, [r3, #0]
   17144:	075a      	lsls	r2, r3, #29
   17146:	f000 82e9 	beq.w	1771c <isr+0x7dc>
   1714a:	2301      	movs	r3, #1
   1714c:	f04f 0200 	mov.w	r2, #0
   17150:	f363 0202 	bfi	r2, r3, #0, #3
   17154:	4930      	ldr	r1, [pc, #192]	; (17218 <isr+0x2d8>)
   17156:	4b31      	ldr	r3, [pc, #196]	; (1721c <isr+0x2dc>)
   17158:	1a5b      	subs	r3, r3, r1
   1715a:	f36f 02c5 	bfc	r2, #3, #3
   1715e:	08db      	lsrs	r3, r3, #3
   17160:	492f      	ldr	r1, [pc, #188]	; (17220 <isr+0x2e0>)
   17162:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   17166:	4830      	ldr	r0, [pc, #192]	; (17228 <isr+0x2e8>)
   17168:	e2d6      	b.n	17718 <isr+0x7d8>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   1716a:	b926      	cbnz	r6, 17176 <isr+0x236>
		_radio.state = STATE_CLOSE;
   1716c:	2303      	movs	r3, #3
   1716e:	7563      	strb	r3, [r4, #21]
		radio_disable();
   17170:	f006 fc88 	bl	1da84 <radio_disable>
   17174:	e79b      	b.n	170ae <isr+0x16e>
	switch (_radio.role) {
   17176:	7d23      	ldrb	r3, [r4, #20]
   17178:	3b01      	subs	r3, #1
   1717a:	2b03      	cmp	r3, #3
   1717c:	f201 81ca 	bhi.w	18514 <isr+0x15d4>
   17180:	e8df f013 	tbh	[pc, r3, lsl #1]
   17184:	02d20004 	.word	0x02d20004
   17188:	06420642 	.word	0x06420642
		if (crc_ok) {
   1718c:	2f00      	cmp	r7, #0
   1718e:	d0ed      	beq.n	1716c <isr+0x22c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17190:	f1ba 0f00 	cmp.w	sl, #0
   17194:	d039      	beq.n	1720a <isr+0x2ca>
   17196:	4658      	mov	r0, fp
   17198:	f005 fb4e 	bl	1c838 <ctrl_rl_irk_idx>
   1719c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	pdu_adv = (void *)radio_pkt_scratch_get();
   171a0:	f006 fcc6 	bl	1db30 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   171a4:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
   171a8:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   171aa:	2127      	movs	r1, #39	; 0x27
   171ac:	232b      	movs	r3, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   171ae:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   171b0:	fb11 3302 	smlabb	r3, r1, r2, r3
   171b4:	930a      	str	r3, [sp, #40]	; 0x28
   171b6:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   171b8:	f000 030f 	and.w	r3, r0, #15
   171bc:	2b03      	cmp	r3, #3
   171be:	d10a      	bne.n	171d6 <isr+0x296>
   171c0:	7873      	ldrb	r3, [r6, #1]
   171c2:	2b0c      	cmp	r3, #12
   171c4:	d107      	bne.n	171d6 <isr+0x296>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   171c6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   171ca:	065b      	lsls	r3, r3, #25
   171cc:	d52e      	bpl.n	1722c <isr+0x2ec>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   171ce:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
   171d2:	065f      	lsls	r7, r3, #25
   171d4:	d468      	bmi.n	172a8 <isr+0x368>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   171d6:	7830      	ldrb	r0, [r6, #0]
   171d8:	f000 030f 	and.w	r3, r0, #15
   171dc:	2b05      	cmp	r3, #5
   171de:	d1c5      	bne.n	1716c <isr+0x22c>
   171e0:	7873      	ldrb	r3, [r6, #1]
   171e2:	2b22      	cmp	r3, #34	; 0x22
   171e4:	d1c2      	bne.n	1716c <isr+0x22c>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   171e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   171e8:	5ce3      	ldrb	r3, [r4, r3]
   171ea:	f003 030f 	and.w	r3, r3, #15
   171ee:	2b01      	cmp	r3, #1
   171f0:	f040 8167 	bne.w	174c2 <isr+0x582>
					    ci->connect_ind.init_addr,
   171f4:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
   171f6:	aa12      	add	r2, sp, #72	; 0x48
   171f8:	4639      	mov	r1, r7
   171fa:	f3c0 1080 	ubfx	r0, r0, #6, #1
   171fe:	f005 fd9f 	bl	1cd40 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   17202:	2800      	cmp	r0, #0
   17204:	d15a      	bne.n	172bc <isr+0x37c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17206:	2000      	movs	r0, #0
   17208:	e068      	b.n	172dc <isr+0x39c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   1720a:	20ff      	movs	r0, #255	; 0xff
   1720c:	e7c6      	b.n	1719c <isr+0x25c>
   1720e:	bf00      	nop
   17210:	2000110c 	.word	0x2000110c
   17214:	2000d72c 	.word	0x2000d72c
   17218:	0002cff8 	.word	0x0002cff8
   1721c:	0002d030 	.word	0x0002d030
   17220:	000304de 	.word	0x000304de
   17224:	00030bd2 	.word	0x00030bd2
   17228:	0002f0b9 	.word	0x0002f0b9
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
   1722c:	aa12      	add	r2, sp, #72	; 0x48
   1722e:	1cb1      	adds	r1, r6, #2
   17230:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17234:	f005 fd84 	bl	1cd40 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17238:	2800      	cmp	r0, #0
   1723a:	d0c8      	beq.n	171ce <isr+0x28e>
	return (adv->tx_addr == sr->rx_addr) &&
   1723c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1723e:	7832      	ldrb	r2, [r6, #0]
   17240:	5ce3      	ldrb	r3, [r4, r3]
   17242:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17246:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1724a:	d1c4      	bne.n	171d6 <isr+0x296>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1724c:	2206      	movs	r2, #6
   1724e:	f106 0108 	add.w	r1, r6, #8
   17252:	1ca8      	adds	r0, r5, #2
   17254:	f7ee fdf1 	bl	5e3a <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
   17258:	4607      	mov	r7, r0
   1725a:	2800      	cmp	r0, #0
   1725c:	d1bb      	bne.n	171d6 <isr+0x296>
		_radio.state = STATE_CLOSE;
   1725e:	2303      	movs	r3, #3
   17260:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
   17262:	f006 fc7f 	bl	1db64 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
   17266:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
   1726a:	2327      	movs	r3, #39	; 0x27
   1726c:	fb03 4000 	mla	r0, r3, r0, r4
   17270:	307b      	adds	r0, #123	; 0x7b
   17272:	f006 fbe7 	bl	1da44 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17276:	f006 fc23 	bl	1dac0 <radio_is_ready>
   1727a:	2800      	cmp	r0, #0
   1727c:	f43f af17 	beq.w	170ae <isr+0x16e>
   17280:	4ba6      	ldr	r3, [pc, #664]	; (1751c <isr+0x5dc>)
   17282:	681b      	ldr	r3, [r3, #0]
   17284:	075e      	lsls	r6, r3, #29
   17286:	f000 8249 	beq.w	1771c <isr+0x7dc>
   1728a:	2301      	movs	r3, #1
   1728c:	f04f 0200 	mov.w	r2, #0
   17290:	f363 0202 	bfi	r2, r3, #0, #3
   17294:	49a2      	ldr	r1, [pc, #648]	; (17520 <isr+0x5e0>)
   17296:	4ba3      	ldr	r3, [pc, #652]	; (17524 <isr+0x5e4>)
   17298:	1a5b      	subs	r3, r3, r1
   1729a:	f367 02c5 	bfi	r2, r7, #3, #3
   1729e:	08db      	lsrs	r3, r3, #3
   172a0:	f363 128f 	bfi	r2, r3, #6, #10
   172a4:	49a0      	ldr	r1, [pc, #640]	; (17528 <isr+0x5e8>)
   172a6:	e6b8      	b.n	1701a <isr+0xda>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   172a8:	f1b9 0f00 	cmp.w	r9, #0
   172ac:	d1c6      	bne.n	1723c <isr+0x2fc>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   172ae:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   172b2:	f005 fb29 	bl	1c908 <ctrl_irk_whitelisted>
   172b6:	2800      	cmp	r0, #0
   172b8:	d1c0      	bne.n	1723c <isr+0x2fc>
   172ba:	e78c      	b.n	171d6 <isr+0x296>
		       isr_adv_ci_adva_check(adv, ci) &&
   172bc:	4631      	mov	r1, r6
   172be:	4628      	mov	r0, r5
   172c0:	f7fb f8da 	bl	12478 <isr_adv_ci_adva_check>
					    rl_idx) &&
   172c4:	2800      	cmp	r0, #0
   172c6:	d09e      	beq.n	17206 <isr+0x2c6>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   172c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   172cc:	2bff      	cmp	r3, #255	; 0xff
   172ce:	f000 80e5 	beq.w	1749c <isr+0x55c>
		return rl_idx == _radio.advertiser.rl_idx;
   172d2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   172d6:	1ac5      	subs	r5, r0, r3
   172d8:	4268      	negs	r0, r5
   172da:	4168      	adcs	r0, r5
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   172dc:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
   172e0:	2800      	cmp	r0, #0
   172e2:	f43f af43 	beq.w	1716c <isr+0x22c>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   172e6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   172ea:	b133      	cbz	r3, 172fa <isr+0x3ba>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   172ec:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
   172f0:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   172f4:	429a      	cmp	r2, r3
   172f6:	f47f af39 	bne.w	1716c <isr+0x22c>
   172fa:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   172fe:	2b00      	cmp	r3, #0
   17300:	f43f af34 	beq.w	1716c <isr+0x22c>
			node_rx = packet_rx_reserve_get(4);
   17304:	2004      	movs	r0, #4
   17306:	f7fa f979 	bl	115fc <packet_rx_reserve_get>
		if (!node_rx) {
   1730a:	4607      	mov	r7, r0
   1730c:	2800      	cmp	r0, #0
   1730e:	f43f af2d 	beq.w	1716c <isr+0x22c>
		_radio.state = STATE_STOP;
   17312:	f04f 0904 	mov.w	r9, #4
   17316:	f884 9015 	strb.w	r9, [r4, #21]
		radio_disable();
   1731a:	f006 fbb3 	bl	1da84 <radio_disable>
		conn = _radio.advertiser.conn;
   1731e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17322:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
   17326:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17328:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1732c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
   1732e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17332:	f7f9 f90e 	bl	10552 <mem_index_get>
		memcpy(&conn->access_addr[0],
   17336:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1733a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
   1733c:	2203      	movs	r2, #3
   1733e:	f106 0112 	add.w	r1, r6, #18
   17342:	f105 0014 	add.w	r0, r5, #20
   17346:	f7ee fd9f 	bl	5e88 <memcpy>
		memcpy(&conn->data_chan_map[0],
   1734a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
   1734e:	464a      	mov	r2, r9
   17350:	f106 010e 	add.w	r1, r6, #14
   17354:	4650      	mov	r0, sl
   17356:	f7ee fd97 	bl	5e88 <memcpy>
		memcpy(&conn->data_chan_map[0],
   1735a:	2205      	movs	r2, #5
   1735c:	f106 011e 	add.w	r1, r6, #30
   17360:	4640      	mov	r0, r8
   17362:	f7ee fd91 	bl	5e88 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   17366:	2105      	movs	r1, #5
   17368:	4640      	mov	r0, r8
   1736a:	f7f9 fa63 	bl	10834 <util_ones_count_get>
		conn->data_chan_count =
   1736e:	7f6b      	ldrb	r3, [r5, #29]
   17370:	f360 0305 	bfi	r3, r0, #0, #6
   17374:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
   17376:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1737a:	f3c3 0304 	ubfx	r3, r3, #0, #5
   1737e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
   17380:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
   17382:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
   17384:	f240 48e2 	movw	r8, #1250	; 0x4e2
   17388:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
   1738c:	7ef2      	ldrb	r2, [r6, #27]
   1738e:	7eb3      	ldrb	r3, [r6, #26]
   17390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   17394:	4651      	mov	r1, sl
   17396:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
   17398:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1739a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   1739e:	f7ee fd73 	bl	5e88 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   173a2:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   173a4:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   173a6:	f242 7210 	movw	r2, #10000	; 0x2710
   173aa:	fb02 8303 	mla	r3, r2, r3, r8
   173ae:	3b01      	subs	r3, #1
   173b0:	fbb3 f3f8 	udiv	r3, r3, r8
   173b4:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   173b6:	4b5d      	ldr	r3, [pc, #372]	; (1752c <isr+0x5ec>)
   173b8:	4443      	add	r3, r8
   173ba:	fbb3 f3f8 	udiv	r3, r3, r8
   173be:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   173c2:	4b5b      	ldr	r3, [pc, #364]	; (17530 <isr+0x5f0>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   173c4:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   173c6:	4443      	add	r3, r8
   173c8:	fbb3 f3f8 	udiv	r3, r3, r8
   173cc:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   173ce:	4282      	cmp	r2, r0
   173d0:	4613      	mov	r3, r2
   173d2:	bfc4      	itt	gt
   173d4:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
   173d8:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   173da:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   173de:	bfc4      	itt	gt
   173e0:	18d2      	addgt	r2, r2, r3
   173e2:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
   173e4:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   173e6:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   173ea:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
   173ec:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
   173ee:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
   173f0:	2300      	movs	r3, #0
   173f2:	723b      	strb	r3, [r7, #8]
		radio_le_conn_cmplt->role = 0x01;
   173f4:	727a      	strb	r2, [r7, #9]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   173f6:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
   173fa:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   173fc:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17400:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   17404:	75fa      	strb	r2, [r7, #23]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17406:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1740a:	464a      	mov	r2, r9
   1740c:	f107 0018 	add.w	r0, r7, #24
   17410:	f7ee fd3a 	bl	5e88 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17414:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   17418:	f107 030b 	add.w	r3, r7, #11
   1741c:	28ff      	cmp	r0, #255	; 0xff
   1741e:	930b      	str	r3, [sp, #44]	; 0x2c
   17420:	f107 0b11 	add.w	fp, r7, #17
   17424:	f106 0a02 	add.w	sl, r6, #2
   17428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1742a:	d069      	beq.n	17500 <isr+0x5c0>
			ll_rl_id_addr_get(rl_idx,
   1742c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1742e:	f107 010a 	add.w	r1, r7, #10
   17432:	f005 fc2f 	bl	1cc94 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17436:	7abb      	ldrb	r3, [r7, #10]
   17438:	3302      	adds	r3, #2
   1743a:	72bb      	strb	r3, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1743c:	464a      	mov	r2, r9
   1743e:	4651      	mov	r1, sl
   17440:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17442:	f7ee fd21 	bl	5e88 <memcpy>
			pdu_adv->connect_ind.interval;
   17446:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
   17448:	83fb      	strh	r3, [r7, #30]
			pdu_adv->connect_ind.latency;
   1744a:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
   1744c:	843b      	strh	r3, [r7, #32]
			pdu_adv->connect_ind.timeout;
   1744e:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
   17450:	847b      	strh	r3, [r7, #34]	; 0x22
			pdu_adv->connect_ind.sca;
   17452:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   17456:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   1745a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rx_fc_lock(conn->handle);
   1745e:	8c28      	ldrh	r0, [r5, #32]
   17460:	f7fb f93e 	bl	126e0 <rx_fc_lock>
		packet_rx_enqueue();
   17464:	f7fb f82c 	bl	124c0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   17468:	2003      	movs	r0, #3
   1746a:	f7fa f8c7 	bl	115fc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1746e:	2800      	cmp	r0, #0
   17470:	d162      	bne.n	17538 <isr+0x5f8>
   17472:	4b2a      	ldr	r3, [pc, #168]	; (1751c <isr+0x5dc>)
   17474:	681b      	ldr	r3, [r3, #0]
   17476:	075c      	lsls	r4, r3, #29
   17478:	f000 8150 	beq.w	1771c <isr+0x7dc>
   1747c:	2301      	movs	r3, #1
   1747e:	f04f 0200 	mov.w	r2, #0
   17482:	f363 0202 	bfi	r2, r3, #0, #3
   17486:	4926      	ldr	r1, [pc, #152]	; (17520 <isr+0x5e0>)
   17488:	4b26      	ldr	r3, [pc, #152]	; (17524 <isr+0x5e4>)
   1748a:	1a5b      	subs	r3, r3, r1
   1748c:	f360 02c5 	bfi	r2, r0, #3, #3
   17490:	08db      	lsrs	r3, r3, #3
   17492:	4925      	ldr	r1, [pc, #148]	; (17528 <isr+0x5e8>)
   17494:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(node_rx);
   17498:	4826      	ldr	r0, [pc, #152]	; (17534 <isr+0x5f4>)
   1749a:	e13d      	b.n	17718 <isr+0x7d8>
	return (adv->rx_addr == ci->tx_addr) &&
   1749c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1749e:	5ce2      	ldrb	r2, [r4, r3]
   174a0:	7833      	ldrb	r3, [r6, #0]
   174a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   174a6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   174aa:	f47f aeac 	bne.w	17206 <isr+0x2c6>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   174ae:	2206      	movs	r2, #6
   174b0:	4639      	mov	r1, r7
   174b2:	f105 0008 	add.w	r0, r5, #8
   174b6:	f7ee fcc0 	bl	5e3a <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   174ba:	fab0 f080 	clz	r0, r0
   174be:	0940      	lsrs	r0, r0, #5
   174c0:	e70c      	b.n	172dc <isr+0x39c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   174c2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   174c6:	09db      	lsrs	r3, r3, #7
   174c8:	d00d      	beq.n	174e6 <isr+0x5a6>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   174ca:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
   174ce:	09db      	lsrs	r3, r3, #7
   174d0:	f43f ae99 	beq.w	17206 <isr+0x2c6>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   174d4:	f1b9 0f00 	cmp.w	r9, #0
   174d8:	d10d      	bne.n	174f6 <isr+0x5b6>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   174da:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   174de:	f005 fa13 	bl	1c908 <ctrl_irk_whitelisted>
   174e2:	b940      	cbnz	r0, 174f6 <isr+0x5b6>
   174e4:	e68f      	b.n	17206 <isr+0x2c6>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   174e6:	aa12      	add	r2, sp, #72	; 0x48
   174e8:	1cb1      	adds	r1, r6, #2
   174ea:	f3c0 1080 	ubfx	r0, r0, #6, #1
   174ee:	f005 fc27 	bl	1cd40 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   174f2:	2800      	cmp	r0, #0
   174f4:	d0e9      	beq.n	174ca <isr+0x58a>
	       isr_adv_ci_adva_check(adv, ci);
   174f6:	4631      	mov	r1, r6
   174f8:	4628      	mov	r0, r5
   174fa:	f7fa ffbd 	bl	12478 <isr_adv_ci_adva_check>
   174fe:	e6ed      	b.n	172dc <isr+0x39c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17500:	4619      	mov	r1, r3
   17502:	464a      	mov	r2, r9
   17504:	4658      	mov	r0, fp
   17506:	f7ee fcec 	bl	5ee2 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   1750a:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1750c:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   1750e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17512:	72bb      	strb	r3, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17514:	464a      	mov	r2, r9
   17516:	4651      	mov	r1, sl
   17518:	e793      	b.n	17442 <isr+0x502>
   1751a:	bf00      	nop
   1751c:	2000d72c 	.word	0x2000d72c
   17520:	0002cff8 	.word	0x0002cff8
   17524:	0002d030 	.word	0x0002d030
   17528:	000304f1 	.word	0x000304f1
   1752c:	026259ff 	.word	0x026259ff
   17530:	01c9c37f 	.word	0x01c9c37f
   17534:	00030f96 	.word	0x00030f96
			node_rx->hdr.handle = conn->handle;
   17538:	8c2b      	ldrh	r3, [r5, #32]
   1753a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   1753c:	230b      	movs	r3, #11
   1753e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   17540:	7833      	ldrb	r3, [r6, #0]
   17542:	f013 0320 	ands.w	r3, r3, #32
   17546:	d00e      	beq.n	17566 <isr+0x626>
					((u16_t)conn->access_addr[1] << 8) |
   17548:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   1754a:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   1754c:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   1754e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   17552:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   17554:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   17558:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1755a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   1755c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   17560:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   17562:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17564:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17566:	7203      	strb	r3, [r0, #8]
			packet_rx_enqueue();
   17568:	f7fa ffaa 	bl	124c0 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   1756c:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   17570:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   17574:	49c8      	ldr	r1, [pc, #800]	; (17898 <isr+0x958>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   17576:	0952      	lsrs	r2, r2, #5
   17578:	f362 0384 	bfi	r3, r2, #2, #3
   1757c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   17580:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
   17584:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   17588:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1758c:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   1758e:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17592:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17596:	4ac1      	ldr	r2, [pc, #772]	; (1789c <isr+0x95c>)
   17598:	f203 233f 	addw	r3, r3, #575	; 0x23f
   1759c:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   175a0:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   175a2:	ea4f 0358 	mov.w	r3, r8, lsr #1
   175a6:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   175a8:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   175aa:	7d73      	ldrb	r3, [r6, #21]
   175ac:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   175b0:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   175b2:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   175b6:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   175b8:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   175ba:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   175bc:	4638      	mov	r0, r7
   175be:	f006 fa4e 	bl	1da5e <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   175c2:	49b7      	ldr	r1, [pc, #732]	; (178a0 <isr+0x960>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   175c4:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   175c6:	f200 4052 	addw	r0, r0, #1106	; 0x452
   175ca:	a3b1      	add	r3, pc, #708	; (adr r3, 17890 <isr+0x950>)
   175cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   175d0:	fba0 0101 	umull	r0, r1, r0, r1
   175d4:	f7e8 fe6e 	bl	2b4 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   175d8:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
   175dc:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   175de:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   175e0:	4293      	cmp	r3, r2
   175e2:	bf38      	it	cc
   175e4:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   175e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   175ea:	469a      	mov	sl, r3
		conn_interval_us -=
   175ec:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   175ee:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   175f0:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   175f2:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   175f4:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   175f8:	f006 fc2a 	bl	1de50 <radio_tmr_end_get>
   175fc:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   175fe:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17600:	4639      	mov	r1, r7
		conn_offset_us +=
   17602:	fb09 9900 	mla	r9, r9, r0, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17606:	4638      	mov	r0, r7
   17608:	f006 fa27 	bl	1da5a <radio_tx_chain_delay_get>
   1760c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1760e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   17612:	4499      	add	r9, r3
   17614:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   17618:	eba9 030b 	sub.w	r3, r9, fp
   1761c:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1761e:	f240 4382 	movw	r3, #1154	; 0x482
   17622:	9300      	str	r3, [sp, #0]
   17624:	2205      	movs	r2, #5
   17626:	4b9f      	ldr	r3, [pc, #636]	; (178a4 <isr+0x964>)
   17628:	f8df b274 	ldr.w	fp, [pc, #628]	; 178a0 <isr+0x960>
   1762c:	4639      	mov	r1, r7
   1762e:	4638      	mov	r0, r7
   17630:	f7f9 fe72 	bl	11318 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17634:	f240 4183 	movw	r1, #1155	; 0x483
   17638:	f7fb f894 	bl	12764 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1763e:	5ce3      	ldrb	r3, [r4, r3]
   17640:	f003 030f 	and.w	r3, r3, #15
   17644:	2b01      	cmp	r3, #1
   17646:	d106      	bne.n	17656 <isr+0x716>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17648:	9700      	str	r7, [sp, #0]
   1764a:	463b      	mov	r3, r7
   1764c:	2203      	movs	r2, #3
   1764e:	4639      	mov	r1, r7
   17650:	4638      	mov	r0, r7
   17652:	f7f9 fe61 	bl	11318 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   17656:	fba8 890b 	umull	r8, r9, r8, fp
   1765a:	a38d      	add	r3, pc, #564	; (adr r3, 17890 <isr+0x950>)
   1765c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17660:	4640      	mov	r0, r8
   17662:	4649      	mov	r1, r9
   17664:	f7e8 fe26 	bl	2b4 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17668:	f895 3020 	ldrb.w	r3, [r5, #32]
   1766c:	68a4      	ldr	r4, [r4, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1766e:	4a8e      	ldr	r2, [pc, #568]	; (178a8 <isr+0x968>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17670:	3307      	adds	r3, #7
   17672:	b2db      	uxtb	r3, r3
   17674:	930a      	str	r3, [sp, #40]	; 0x28
   17676:	f240 439a 	movw	r3, #1178	; 0x49a
   1767a:	9308      	str	r3, [sp, #32]
   1767c:	4b8b      	ldr	r3, [pc, #556]	; (178ac <isr+0x96c>)
   1767e:	e9cd 5306 	strd	r5, r3, [sp, #24]
   17682:	4b8b      	ldr	r3, [pc, #556]	; (178b0 <isr+0x970>)
   17684:	9305      	str	r3, [sp, #20]
   17686:	68eb      	ldr	r3, [r5, #12]
   17688:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1768a:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1768c:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1768e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17692:	2307      	movs	r3, #7
   17694:	2100      	movs	r1, #0
   17696:	4343      	muls	r3, r0
   17698:	fb02 3301 	mla	r3, r2, r1, r3
   1769c:	fba0 1202 	umull	r1, r2, r0, r2
   176a0:	441a      	add	r2, r3
   176a2:	4608      	mov	r0, r1
   176a4:	ebb8 0000 	subs.w	r0, r8, r0
   176a8:	4611      	mov	r1, r2
   176aa:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   176ae:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   176b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   176b4:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   176b6:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   176b8:	f7e8 fdfc 	bl	2b4 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   176bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   176be:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   176c0:	a373      	add	r3, pc, #460	; (adr r3, 17890 <isr+0x950>)
   176c2:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   176c6:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   176ca:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   176ce:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   176d0:	f7e8 fdf0 	bl	2b4 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   176d4:	eba4 040a 	sub.w	r4, r4, sl
   176d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   176dc:	9000      	str	r0, [sp, #0]
   176de:	4623      	mov	r3, r4
   176e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   176e2:	4629      	mov	r1, r5
   176e4:	4628      	mov	r0, r5
   176e6:	f7f9 fd83 	bl	111f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   176ea:	f030 0302 	bics.w	r3, r0, #2
   176ee:	f43f acde 	beq.w	170ae <isr+0x16e>
   176f2:	4b70      	ldr	r3, [pc, #448]	; (178b4 <isr+0x974>)
   176f4:	681b      	ldr	r3, [r3, #0]
   176f6:	0759      	lsls	r1, r3, #29
   176f8:	d010      	beq.n	1771c <isr+0x7dc>
   176fa:	2301      	movs	r3, #1
   176fc:	f04f 0200 	mov.w	r2, #0
   17700:	f363 0202 	bfi	r2, r3, #0, #3
   17704:	496c      	ldr	r1, [pc, #432]	; (178b8 <isr+0x978>)
   17706:	4b6d      	ldr	r3, [pc, #436]	; (178bc <isr+0x97c>)
   17708:	1a5b      	subs	r3, r3, r1
   1770a:	f365 02c5 	bfi	r2, r5, #3, #3
   1770e:	08db      	lsrs	r3, r3, #3
   17710:	496b      	ldr	r1, [pc, #428]	; (178c0 <isr+0x980>)
   17712:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17716:	486b      	ldr	r0, [pc, #428]	; (178c4 <isr+0x984>)
		LL_ASSERT(0);
   17718:	f7ea fb1e 	bl	1d58 <log_1>
   1771c:	4040      	eors	r0, r0
   1771e:	f380 8811 	msr	BASEPRI, r0
   17722:	f04f 0004 	mov.w	r0, #4
   17726:	df02      	svc	2
		rl_idx = devmatch_ok ?
   17728:	f1b9 0f00 	cmp.w	r9, #0
   1772c:	d01c      	beq.n	17768 <isr+0x828>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   1772e:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
   17732:	4641      	mov	r1, r8
   17734:	f3c0 1000 	ubfx	r0, r0, #4, #1
   17738:	f004 fffa 	bl	1c730 <ctrl_rl_idx>
   1773c:	4680      	mov	r8, r0
		if (crc_ok &&
   1773e:	b147      	cbz	r7, 17752 <isr+0x812>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   17740:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   17744:	06da      	lsls	r2, r3, #27
   17746:	d519      	bpl.n	1777c <isr+0x83c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   17748:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1774c:	06db      	lsls	r3, r3, #27
   1774e:	f100 8094 	bmi.w	1787a <isr+0x93a>
			_radio.state = STATE_CLOSE;
   17752:	2303      	movs	r3, #3
   17754:	7563      	strb	r3, [r4, #21]
			radio_disable();
   17756:	f006 f995 	bl	1da84 <radio_disable>
			_radio.scanner.state = 0;
   1775a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1775e:	f36f 0341 	bfc	r3, #1, #1
   17762:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   17766:	e4a2      	b.n	170ae <isr+0x16e>
		rl_idx = devmatch_ok ?
   17768:	f1ba 0f00 	cmp.w	sl, #0
   1776c:	d003      	beq.n	17776 <isr+0x836>
   1776e:	4658      	mov	r0, fp
   17770:	f005 f862 	bl	1c838 <ctrl_rl_irk_idx>
   17774:	e7e2      	b.n	1773c <isr+0x7fc>
   17776:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1777a:	e7e0      	b.n	1773e <isr+0x7fe>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   1777c:	f1b9 0f00 	cmp.w	r9, #0
   17780:	d173      	bne.n	1786a <isr+0x92a>
	bool dir_report = false;
   17782:	2300      	movs	r3, #0
   17784:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   17788:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   1778c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   17790:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   17794:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   17798:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1779c:	2b00      	cmp	r3, #0
   1779e:	f040 8093 	bne.w	178c8 <isr+0x988>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   177a2:	f899 3008 	ldrb.w	r3, [r9, #8]
   177a6:	f013 030f 	ands.w	r3, r3, #15
   177aa:	d002      	beq.n	177b2 <isr+0x872>
   177ac:	2b06      	cmp	r3, #6
   177ae:	f040 82f5 	bne.w	17d9c <isr+0xe5c>
		 (_radio.scanner.type != 0) &&
   177b2:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   177b6:	0712      	lsls	r2, r2, #28
   177b8:	f140 82da 	bpl.w	17d70 <isr+0xe30>
		 (_radio.scanner.type != 0) &&
   177bc:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   177c0:	2a00      	cmp	r2, #0
   177c2:	f040 82d5 	bne.w	17d70 <isr+0xe30>
		err = isr_rx_scan_report(rssi_ready,
   177c6:	f1ba 0f00 	cmp.w	sl, #0
   177ca:	bf14      	ite	ne
   177cc:	4641      	movne	r1, r8
   177ce:	21ff      	moveq	r1, #255	; 0xff
   177d0:	4628      	mov	r0, r5
   177d2:	f7fa ff25 	bl	12620 <isr_rx_scan_report>
		if (err) {
   177d6:	2800      	cmp	r0, #0
   177d8:	d1bb      	bne.n	17752 <isr+0x812>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   177da:	f006 f9a9 	bl	1db30 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   177de:	7803      	ldrb	r3, [r0, #0]
   177e0:	2203      	movs	r2, #3
   177e2:	f362 0303 	bfi	r3, r2, #0, #4
   177e6:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   177e8:	f899 3008 	ldrb.w	r3, [r9, #8]
   177ec:	7802      	ldrb	r2, [r0, #0]
   177ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
   177f2:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   177f6:	230c      	movs	r3, #12
   177f8:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   177fa:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   177fc:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   177fe:	4640      	mov	r0, r8
   17800:	f004 ff78 	bl	1c6f4 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   17804:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   17808:	4601      	mov	r1, r0
   1780a:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   1780c:	f013 0f01 	tst.w	r3, #1
   17810:	f810 3b02 	ldrb.w	r3, [r0], #2
   17814:	f000 82a3 	beq.w	17d5e <isr+0xe1e>
   17818:	2900      	cmp	r1, #0
   1781a:	f000 82a0 	beq.w	17d5e <isr+0xe1e>
			pdu_adv_tx->tx_addr = 1;
   1781e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17822:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   17824:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   17826:	f7ee fb2f 	bl	5e88 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   1782a:	2206      	movs	r2, #6
   1782c:	f109 010a 	add.w	r1, r9, #10
   17830:	f105 0008 	add.w	r0, r5, #8
   17834:	f7ee fb28 	bl	5e88 <memcpy>
		_radio.scanner.state = 1;
   17838:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1783c:	f043 0302 	orr.w	r3, r3, #2
   17840:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
   17844:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   17846:	2302      	movs	r3, #2
   17848:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   1784a:	f006 fa11 	bl	1dc70 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1784e:	2000      	movs	r0, #0
   17850:	f006 f972 	bl	1db38 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   17854:	4628      	mov	r0, r5
   17856:	f006 f8f5 	bl	1da44 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   1785a:	f006 fae7 	bl	1de2c <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   1785e:	f006 f92f 	bl	1dac0 <radio_is_ready>
   17862:	2800      	cmp	r0, #0
   17864:	f43f ac23 	beq.w	170ae <isr+0x16e>
   17868:	e103      	b.n	17a72 <isr+0xb32>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1786a:	4641      	mov	r1, r8
   1786c:	4650      	mov	r0, sl
   1786e:	f005 f9d3 	bl	1cc18 <ctrl_rl_idx_allowed>
   17872:	2800      	cmp	r0, #0
   17874:	f43f af68 	beq.w	17748 <isr+0x808>
   17878:	e783      	b.n	17782 <isr+0x842>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   1787a:	f1b9 0f00 	cmp.w	r9, #0
   1787e:	d180      	bne.n	17782 <isr+0x842>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   17880:	4640      	mov	r0, r8
   17882:	f005 f841 	bl	1c908 <ctrl_irk_whitelisted>
		if (crc_ok &&
   17886:	2800      	cmp	r0, #0
   17888:	f43f af63 	beq.w	17752 <isr+0x812>
   1788c:	e779      	b.n	17782 <isr+0x842>
   1788e:	bf00      	nop
   17890:	1afd498d 	.word	0x1afd498d
   17894:	00000007 	.word	0x00000007
   17898:	00030bc2 	.word	0x00030bc2
   1789c:	000f4240 	.word	0x000f4240
   178a0:	3b9aca00 	.word	0x3b9aca00
   178a4:	00012765 	.word	0x00012765
   178a8:	1afd498d 	.word	0x1afd498d
   178ac:	00012715 	.word	0x00012715
   178b0:	000158fd 	.word	0x000158fd
   178b4:	2000d72c 	.word	0x2000d72c
   178b8:	0002cff8 	.word	0x0002cff8
   178bc:	0002d030 	.word	0x0002d030
   178c0:	000304f1 	.word	0x000304f1
   178c4:	000309cf 	.word	0x000309cf
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   178c8:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   178cc:	b133      	cbz	r3, 178dc <isr+0x99c>
				      (_radio.fc_req == _radio.fc_ack)) &&
   178ce:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   178d2:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   178d6:	429a      	cmp	r2, r3
   178d8:	f47f af63 	bne.w	177a2 <isr+0x862>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   178dc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   178e0:	f3c3 1000 	ubfx	r0, r3, #4, #1
   178e4:	2800      	cmp	r0, #0
   178e6:	f000 80d9 	beq.w	17a9c <isr+0xb5c>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   178ea:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   178ee:	f010 000f 	ands.w	r0, r0, #15
   178f2:	f040 80f2 	bne.w	17ada <isr+0xb9a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   178f6:	f006 faab 	bl	1de50 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   178fa:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   178fe:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   17902:	48c3      	ldr	r0, [pc, #780]	; (17c10 <isr+0xcd0>)
   17904:	2207      	movs	r2, #7
   17906:	fba3 0100 	umull	r0, r1, r3, r0
   1790a:	fb02 1103 	mla	r1, r2, r3, r1
   1790e:	a3be      	add	r3, pc, #760	; (adr r3, 17c08 <isr+0xcc8>)
   17910:	e9d3 2300 	ldrd	r2, r3, [r3]
   17914:	f7e8 fcce 	bl	2b4 <__aeabi_uldivmod>
   17918:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   1791c:	4287      	cmp	r7, r0
   1791e:	f4bf af40 	bcs.w	177a2 <isr+0x862>
			node_rx = packet_rx_reserve_get(4);
   17922:	2004      	movs	r0, #4
   17924:	f7f9 fe6a 	bl	115fc <packet_rx_reserve_get>
		if (node_rx == 0) {
   17928:	4607      	mov	r7, r0
   1792a:	2800      	cmp	r0, #0
   1792c:	f43f af11 	beq.w	17752 <isr+0x812>
		_radio.state = STATE_STOP;
   17930:	2304      	movs	r3, #4
   17932:	7563      	strb	r3, [r4, #21]
		_radio.scanner.conn = NULL;
   17934:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   17936:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
   1793a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1793e:	f006 f8f7 	bl	1db30 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   17942:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   17944:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   17948:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   1794c:	7003      	strb	r3, [r0, #0]
			pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   1794e:	f899 3008 	ldrb.w	r3, [r9, #8]
   17952:	f3c3 1240 	ubfx	r2, r3, #5, #1
   17956:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   1795a:	b2d2      	uxtb	r2, r2
   1795c:	920d      	str	r2, [sp, #52]	; 0x34
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1795e:	7802      	ldrb	r2, [r0, #0]
   17960:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17964:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   17968:	2322      	movs	r3, #34	; 0x22
   1796a:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1796c:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1796e:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   17970:	4640      	mov	r0, r8
   17972:	f004 febf 	bl	1c6f4 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   17976:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   1797a:	4601      	mov	r1, r0
   1797c:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   1797e:	f013 0f01 	tst.w	r3, #1
   17982:	f810 3b02 	ldrb.w	r3, [r0], #2
   17986:	f000 80b4 	beq.w	17af2 <isr+0xbb2>
   1798a:	2900      	cmp	r1, #0
   1798c:	f000 80b1 	beq.w	17af2 <isr+0xbb2>
			pdu_adv_tx->tx_addr = 1;
   17990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17994:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   17996:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   17998:	f7ee fa76 	bl	5e88 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   1799c:	f105 0308 	add.w	r3, r5, #8
   179a0:	4618      	mov	r0, r3
   179a2:	f109 010a 	add.w	r1, r9, #10
   179a6:	2206      	movs	r2, #6
   179a8:	930a      	str	r3, [sp, #40]	; 0x28
   179aa:	f7ee fa6d 	bl	5e88 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   179ae:	2204      	movs	r2, #4
   179b0:	f106 0110 	add.w	r1, r6, #16
   179b4:	f105 000e 	add.w	r0, r5, #14
   179b8:	f7ee fa66 	bl	5e88 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   179bc:	2203      	movs	r2, #3
   179be:	f106 0114 	add.w	r1, r6, #20
   179c2:	f105 0012 	add.w	r0, r5, #18
   179c6:	f7ee fa5f 	bl	5e88 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   179ca:	2301      	movs	r3, #1
   179cc:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   179ce:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
   179d2:	f240 42e2 	movw	r2, #1250	; 0x4e2
   179d6:	4353      	muls	r3, r2
   179d8:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   179da:	f006 fa39 	bl	1de50 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   179de:	68e3      	ldr	r3, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   179e0:	f8d4 9104 	ldr.w	r9, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
   179e4:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   179e6:	bfcc      	ite	gt
   179e8:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   179ec:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   179f0:	f1b9 0f00 	cmp.w	r9, #0
   179f4:	f040 8088 	bne.w	17b08 <isr+0xbc8>
			pdu_adv_tx->connect_ind.win_offset = 0;
   179f8:	f885 9016 	strb.w	r9, [r5, #22]
   179fc:	f885 9017 	strb.w	r9, [r5, #23]
   17a00:	4681      	mov	r9, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   17a02:	2100      	movs	r1, #0
   17a04:	4608      	mov	r0, r1
   17a06:	f006 f823 	bl	1da50 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   17a0a:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   17a0c:	eba9 0900 	sub.w	r9, r9, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   17a10:	4608      	mov	r0, r1
   17a12:	f006 f822 	bl	1da5a <radio_tx_chain_delay_get>
   17a16:	eba9 0900 	sub.w	r9, r9, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   17a1a:	f109 031e 	add.w	r3, r9, #30
			_radio.scanner.conn_interval;
   17a1e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 17c2c <isr+0xcec>
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   17a22:	930e      	str	r3, [sp, #56]	; 0x38
		pdu_adv_tx->connect_ind.interval =
   17a24:	f8b9 30f4 	ldrh.w	r3, [r9, #244]	; 0xf4
   17a28:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   17a2a:	f8b9 30f6 	ldrh.w	r3, [r9, #246]	; 0xf6
   17a2e:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   17a30:	f8b9 30f8 	ldrh.w	r3, [r9, #248]	; 0xf8
   17a34:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   17a36:	f106 0117 	add.w	r1, r6, #23
   17a3a:	2205      	movs	r2, #5
   17a3c:	f105 001e 	add.w	r0, r5, #30
   17a40:	f7ee fa22 	bl	5e88 <memcpy>
		pdu_adv_tx->connect_ind.hop =
   17a44:	7fb2      	ldrb	r2, [r6, #30]
   17a46:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   17a4a:	f362 0304 	bfi	r3, r2, #0, #5
   17a4e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   17a52:	f899 2120 	ldrb.w	r2, [r9, #288]	; 0x120
   17a56:	f362 1347 	bfi	r3, r2, #5, #3
   17a5a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   17a5e:	f006 f881 	bl	1db64 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   17a62:	4628      	mov	r0, r5
   17a64:	f005 ffee 	bl	1da44 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17a68:	f006 f82a 	bl	1dac0 <radio_is_ready>
   17a6c:	4683      	mov	fp, r0
   17a6e:	2800      	cmp	r0, #0
   17a70:	d05a      	beq.n	17b28 <isr+0xbe8>
		LL_ASSERT(!radio_is_ready());
   17a72:	4b68      	ldr	r3, [pc, #416]	; (17c14 <isr+0xcd4>)
   17a74:	681b      	ldr	r3, [r3, #0]
   17a76:	075f      	lsls	r7, r3, #29
   17a78:	f43f ae50 	beq.w	1771c <isr+0x7dc>
   17a7c:	2301      	movs	r3, #1
   17a7e:	f04f 0200 	mov.w	r2, #0
   17a82:	f363 0202 	bfi	r2, r3, #0, #3
   17a86:	4964      	ldr	r1, [pc, #400]	; (17c18 <isr+0xcd8>)
   17a88:	4b64      	ldr	r3, [pc, #400]	; (17c1c <isr+0xcdc>)
   17a8a:	1a5b      	subs	r3, r3, r1
   17a8c:	f36f 02c5 	bfc	r2, #3, #3
   17a90:	08db      	lsrs	r3, r3, #3
   17a92:	f363 128f 	bfi	r2, r3, #6, #10
   17a96:	4962      	ldr	r1, [pc, #392]	; (17c20 <isr+0xce0>)
   17a98:	f7ff babf 	b.w	1701a <isr+0xda>
	if (rl_idx != FILTER_IDX_NONE) {
   17a9c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   17aa0:	d009      	beq.n	17ab6 <isr+0xb76>
		return (rl_idx == _radio.scanner.rl_idx);
   17aa2:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
   17aa6:	eba0 0708 	sub.w	r7, r0, r8
   17aaa:	4278      	negs	r0, r7
   17aac:	4178      	adcs	r0, r7
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   17aae:	2800      	cmp	r0, #0
   17ab0:	f47f af1b 	bne.w	178ea <isr+0x9aa>
   17ab4:	e675      	b.n	177a2 <isr+0x862>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   17ab6:	f899 2008 	ldrb.w	r2, [r9, #8]
   17aba:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17abe:	f3c2 1280 	ubfx	r2, r2, #6, #1
   17ac2:	4293      	cmp	r3, r2
   17ac4:	d1f3      	bne.n	17aae <isr+0xb6e>
		(memcmp(&_radio.scanner.adv_addr[0],
   17ac6:	2206      	movs	r2, #6
   17ac8:	f109 010a 	add.w	r1, r9, #10
   17acc:	4855      	ldr	r0, [pc, #340]	; (17c24 <isr+0xce4>)
   17ace:	f7ee f9b4 	bl	5e3a <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   17ad2:	fab0 f080 	clz	r0, r0
   17ad6:	0940      	lsrs	r0, r0, #5
   17ad8:	e7e9      	b.n	17aae <isr+0xb6e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   17ada:	2801      	cmp	r0, #1
   17adc:	f47f ae61 	bne.w	177a2 <isr+0x862>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   17ae0:	2300      	movs	r3, #0
   17ae2:	4642      	mov	r2, r8
   17ae4:	4631      	mov	r1, r6
   17ae6:	f7fa fd4f 	bl	12588 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   17aea:	2800      	cmp	r0, #0
   17aec:	f47f af03 	bne.w	178f6 <isr+0x9b6>
   17af0:	e657      	b.n	177a2 <isr+0x862>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17af2:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   17af6:	494c      	ldr	r1, [pc, #304]	; (17c28 <isr+0xce8>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17af8:	09d2      	lsrs	r2, r2, #7
   17afa:	f362 1386 	bfi	r3, r2, #6, #1
   17afe:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   17b00:	2206      	movs	r2, #6
   17b02:	e749      	b.n	17998 <isr+0xa58>
				conn_space_us += conn_interval_us;
   17b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17b06:	4499      	add	r9, r3
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   17b08:	f1b9 0f00 	cmp.w	r9, #0
   17b0c:	dbfa      	blt.n	17b04 <isr+0xbc4>
   17b0e:	4581      	cmp	r9, r0
   17b10:	d3f8      	bcc.n	17b04 <isr+0xbc4>
			pdu_adv_tx->connect_ind.win_offset =
   17b12:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
   17b16:	eba9 0000 	sub.w	r0, r9, r0
			pdu_adv_tx->connect_ind.win_offset =
   17b1a:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
   17b1e:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
   17b20:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   17b22:	3301      	adds	r3, #1
   17b24:	756b      	strb	r3, [r5, #21]
   17b26:	e76c      	b.n	17a02 <isr+0xac2>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17b28:	f44f 72aa 	mov.w	r2, #340	; 0x154
   17b2c:	f8d9 1108 	ldr.w	r1, [r9, #264]	; 0x108
   17b30:	4630      	mov	r0, r6
   17b32:	f7f8 fd0e 	bl	10552 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   17b36:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17b38:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17b3a:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   17b3e:	f887 b008 	strb.w	fp, [r7, #8]
		radio_le_conn_cmplt->role = 0x00;
   17b42:	f887 b009 	strb.w	fp, [r7, #9]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17b46:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   17b48:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   17b4c:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   17b4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17b52:	75fb      	strb	r3, [r7, #23]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17b54:	2206      	movs	r2, #6
   17b56:	f107 0018 	add.w	r0, r7, #24
   17b5a:	f7ee f995 	bl	5e88 <memcpy>
   17b5e:	f107 0b0b 	add.w	fp, r7, #11
   17b62:	f107 0311 	add.w	r3, r7, #17
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   17b66:	f1ba 0f00 	cmp.w	sl, #0
   17b6a:	d03f      	beq.n	17bec <isr+0xcac>
   17b6c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   17b70:	d03c      	beq.n	17bec <isr+0xcac>
			ll_rl_id_addr_get(rl_idx,
   17b72:	465a      	mov	r2, fp
   17b74:	f107 010a 	add.w	r1, r7, #10
   17b78:	4640      	mov	r0, r8
   17b7a:	930f      	str	r3, [sp, #60]	; 0x3c
   17b7c:	f005 f88a 	bl	1cc94 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17b80:	7aba      	ldrb	r2, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17b84:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   17b86:	3202      	adds	r2, #2
   17b88:	72ba      	strb	r2, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17b8a:	4618      	mov	r0, r3
   17b8c:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17b8e:	f7ee f97b 	bl	5e88 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   17b92:	f8b9 30f4 	ldrh.w	r3, [r9, #244]	; 0xf4
   17b96:	83fb      	strh	r3, [r7, #30]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   17b98:	f8b9 30f6 	ldrh.w	r3, [r9, #246]	; 0xf6
   17b9c:	843b      	strh	r3, [r7, #32]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   17b9e:	f8b9 30f8 	ldrh.w	r3, [r9, #248]	; 0xf8
   17ba2:	847b      	strh	r3, [r7, #34]	; 0x22
			pdu_adv_tx->connect_ind.sca;
   17ba4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   17ba8:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17bac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		rx_fc_lock(conn->handle);
   17bb0:	8c30      	ldrh	r0, [r6, #32]
   17bb2:	f7fa fd95 	bl	126e0 <rx_fc_lock>
		packet_rx_enqueue();
   17bb6:	f7fa fc83 	bl	124c0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   17bba:	2003      	movs	r0, #3
   17bbc:	f7f9 fd1e 	bl	115fc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   17bc0:	2800      	cmp	r0, #0
   17bc2:	d135      	bne.n	17c30 <isr+0xcf0>
   17bc4:	4b13      	ldr	r3, [pc, #76]	; (17c14 <isr+0xcd4>)
   17bc6:	681b      	ldr	r3, [r3, #0]
   17bc8:	075c      	lsls	r4, r3, #29
   17bca:	f43f ada7 	beq.w	1771c <isr+0x7dc>
   17bce:	2301      	movs	r3, #1
   17bd0:	f04f 0200 	mov.w	r2, #0
   17bd4:	f363 0202 	bfi	r2, r3, #0, #3
   17bd8:	490f      	ldr	r1, [pc, #60]	; (17c18 <isr+0xcd8>)
   17bda:	4b10      	ldr	r3, [pc, #64]	; (17c1c <isr+0xcdc>)
   17bdc:	1a5b      	subs	r3, r3, r1
   17bde:	f360 02c5 	bfi	r2, r0, #3, #3
   17be2:	08db      	lsrs	r3, r3, #3
   17be4:	f363 128f 	bfi	r2, r3, #6, #10
   17be8:	490d      	ldr	r1, [pc, #52]	; (17c20 <isr+0xce0>)
   17bea:	e455      	b.n	17498 <isr+0x558>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17bec:	2206      	movs	r2, #6
   17bee:	2100      	movs	r1, #0
   17bf0:	4618      	mov	r0, r3
   17bf2:	f7ee f976 	bl	5ee2 <memset>
				pdu_adv_tx->rx_addr;
   17bf6:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17bf8:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   17bfa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   17bfe:	72bb      	strb	r3, [r7, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17c00:	2206      	movs	r2, #6
   17c02:	4658      	mov	r0, fp
   17c04:	e7c3      	b.n	17b8e <isr+0xc4e>
   17c06:	bf00      	nop
   17c08:	3b9aca00 	.word	0x3b9aca00
   17c0c:	00000000 	.word	0x00000000
   17c10:	1afd498d 	.word	0x1afd498d
   17c14:	2000d72c 	.word	0x2000d72c
   17c18:	0002cff8 	.word	0x0002cff8
   17c1c:	0002d030 	.word	0x0002d030
   17c20:	0003050f 	.word	0x0003050f
   17c24:	200011f6 	.word	0x200011f6
   17c28:	200011f0 	.word	0x200011f0
   17c2c:	2000110c 	.word	0x2000110c
			node_rx->hdr.handle = conn->handle;
   17c30:	8c33      	ldrh	r3, [r6, #32]
   17c32:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   17c34:	230b      	movs	r3, #11
   17c36:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx_chan_sel) {
   17c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17c3a:	2b00      	cmp	r3, #0
   17c3c:	f000 808c 	beq.w	17d58 <isr+0xe18>
					((u16_t)conn->access_addr[1] << 8) |
   17c40:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   17c42:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   17c44:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   17c46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   17c4a:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   17c4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   17c50:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17c52:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   17c54:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   17c58:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   17c5a:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17c5c:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17c5e:	7203      	strb	r3, [r0, #8]
			packet_rx_enqueue();
   17c60:	f7fa fc2e 	bl	124c0 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   17c64:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17c66:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   17c6a:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   17c6c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   17c70:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   17c72:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c74:	f240 633a 	movw	r3, #1594	; 0x63a
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   17c78:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17c7a:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c7c:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   17c80:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c82:	4629      	mov	r1, r5
   17c84:	9300      	str	r3, [sp, #0]
   17c86:	4628      	mov	r0, r5
   17c88:	4bab      	ldr	r3, [pc, #684]	; (17f38 <isr+0xff8>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   17c8a:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 17f5c <isr+0x101c>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   17c8e:	bf38      	it	cc
   17c90:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c92:	f7f9 fb41 	bl	11318 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   17c96:	f240 613b 	movw	r1, #1595	; 0x63b
   17c9a:	f7fa fdad 	bl	127f8 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c9e:	462b      	mov	r3, r5
   17ca0:	2204      	movs	r2, #4
   17ca2:	4629      	mov	r1, r5
   17ca4:	9500      	str	r5, [sp, #0]
   17ca6:	4628      	mov	r0, r5
   17ca8:	f7f9 fb36 	bl	11318 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   17cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17cae:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17cb2:	68a3      	ldr	r3, [r4, #8]
   17cb4:	f896 4020 	ldrb.w	r4, [r6, #32]
   17cb8:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   17cbc:	f240 6352 	movw	r3, #1618	; 0x652
   17cc0:	9308      	str	r3, [sp, #32]
   17cc2:	4b9e      	ldr	r3, [pc, #632]	; (17f3c <isr+0xffc>)
   17cc4:	e9cd 6306 	strd	r6, r3, [sp, #24]
   17cc8:	4b9d      	ldr	r3, [pc, #628]	; (17f40 <isr+0x1000>)
   17cca:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17ccc:	68f3      	ldr	r3, [r6, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   17cce:	4640      	mov	r0, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17cd0:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   17cd2:	4649      	mov	r1, r9
   17cd4:	a396      	add	r3, pc, #600	; (adr r3, 17f30 <isr+0xff0>)
   17cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status =
   17cda:	e9cd 5703 	strd	r5, r7, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   17cde:	f7e8 fae9 	bl	2b4 <__aeabi_uldivmod>
   17ce2:	4610      	mov	r0, r2
   17ce4:	4619      	mov	r1, r3
   17ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17cea:	2300      	movs	r3, #0
   17cec:	f7e8 fae2 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   17cf0:	a38f      	add	r3, pc, #572	; (adr r3, 17f30 <isr+0xff0>)
   17cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17cf6:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   17cf8:	4649      	mov	r1, r9
   17cfa:	4640      	mov	r0, r8
   17cfc:	f7e8 fada 	bl	2b4 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   17d00:	990e      	ldr	r1, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   17d02:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   17d04:	a38a      	add	r3, pc, #552	; (adr r3, 17f30 <isr+0xff0>)
   17d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d0a:	fba1 010a 	umull	r0, r1, r1, sl
   17d0e:	f7e8 fad1 	bl	2b4 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17d12:	3407      	adds	r4, #7
   17d14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   17d18:	b2e4      	uxtb	r4, r4
   17d1a:	9000      	str	r0, [sp, #0]
   17d1c:	465b      	mov	r3, fp
   17d1e:	4622      	mov	r2, r4
   17d20:	4629      	mov	r1, r5
   17d22:	4628      	mov	r0, r5
   17d24:	f7f9 fa64 	bl	111f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17d28:	f030 0302 	bics.w	r3, r0, #2
   17d2c:	f43f a9bf 	beq.w	170ae <isr+0x16e>
   17d30:	4b84      	ldr	r3, [pc, #528]	; (17f44 <isr+0x1004>)
   17d32:	681b      	ldr	r3, [r3, #0]
   17d34:	0759      	lsls	r1, r3, #29
   17d36:	f43f acf1 	beq.w	1771c <isr+0x7dc>
   17d3a:	2301      	movs	r3, #1
   17d3c:	f04f 0200 	mov.w	r2, #0
   17d40:	f363 0202 	bfi	r2, r3, #0, #3
   17d44:	4980      	ldr	r1, [pc, #512]	; (17f48 <isr+0x1008>)
   17d46:	4b81      	ldr	r3, [pc, #516]	; (17f4c <isr+0x100c>)
   17d48:	1a5b      	subs	r3, r3, r1
   17d4a:	f365 02c5 	bfi	r2, r5, #3, #3
   17d4e:	08db      	lsrs	r3, r3, #3
   17d50:	f363 128f 	bfi	r2, r3, #6, #10
   17d54:	497e      	ldr	r1, [pc, #504]	; (17f50 <isr+0x1010>)
   17d56:	e4de      	b.n	17716 <isr+0x7d6>
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17d58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17d5c:	e77f      	b.n	17c5e <isr+0xd1e>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17d5e:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   17d62:	497c      	ldr	r1, [pc, #496]	; (17f54 <isr+0x1014>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17d64:	09d2      	lsrs	r2, r2, #7
   17d66:	f362 1386 	bfi	r3, r2, #6, #1
   17d6a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   17d6c:	2206      	movs	r2, #6
   17d6e:	e55a      	b.n	17826 <isr+0x8e6>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   17d70:	b9a3      	cbnz	r3, 17d9c <isr+0xe5c>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   17d72:	f899 3009 	ldrb.w	r3, [r9, #9]
   17d76:	2b00      	cmp	r3, #0
   17d78:	f43f aceb 	beq.w	17752 <isr+0x812>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17d7c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17d80:	2b00      	cmp	r3, #0
   17d82:	f47f ace6 	bne.w	17752 <isr+0x812>
		err = isr_rx_scan_report(rssi_ready,
   17d86:	f1ba 0f00 	cmp.w	sl, #0
   17d8a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   17d8e:	bf14      	ite	ne
   17d90:	4641      	movne	r1, r8
   17d92:	21ff      	moveq	r1, #255	; 0xff
   17d94:	4628      	mov	r0, r5
   17d96:	f7fa fc43 	bl	12620 <isr_rx_scan_report>
   17d9a:	e4da      	b.n	17752 <isr+0x812>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   17d9c:	2b01      	cmp	r3, #1
   17d9e:	d00e      	beq.n	17dbe <isr+0xe7e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   17da0:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
   17da4:	f003 020b 	and.w	r2, r3, #11
   17da8:	2a02      	cmp	r2, #2
   17daa:	d0e2      	beq.n	17d72 <isr+0xe32>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   17dac:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   17db0:	2b07      	cmp	r3, #7
   17db2:	d10d      	bne.n	17dd0 <isr+0xe90>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   17db4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   17db8:	075e      	lsls	r6, r3, #29
   17dba:	d1da      	bne.n	17d72 <isr+0xe32>
   17dbc:	e4c9      	b.n	17752 <isr+0x812>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   17dbe:	ab12      	add	r3, sp, #72	; 0x48
   17dc0:	4642      	mov	r2, r8
   17dc2:	4631      	mov	r1, r6
   17dc4:	2000      	movs	r0, #0
   17dc6:	f7fa fbdf 	bl	12588 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17dca:	2800      	cmp	r0, #0
   17dcc:	d1d1      	bne.n	17d72 <isr+0xe32>
   17dce:	e7e7      	b.n	17da0 <isr+0xe60>
		   (_radio.scanner.phy)) ||
   17dd0:	2b04      	cmp	r3, #4
   17dd2:	f47f acbe 	bne.w	17752 <isr+0x812>
		   (_radio.scanner.state != 0) &&
   17dd6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   17dda:	0798      	lsls	r0, r3, #30
   17ddc:	f57f acb9 	bpl.w	17752 <isr+0x812>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   17de0:	f005 fea6 	bl	1db30 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17de4:	f899 3008 	ldrb.w	r3, [r9, #8]
   17de8:	7802      	ldrb	r2, [r0, #0]
   17dea:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17dee:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17df2:	f47f acae 	bne.w	17752 <isr+0x812>
		(memcmp(&sreq->scan_req.adv_addr[0],
   17df6:	2206      	movs	r2, #6
   17df8:	f109 010a 	add.w	r1, r9, #10
   17dfc:	3008      	adds	r0, #8
   17dfe:	f7ee f81c 	bl	5e3a <memcmp>
		   (_radio.scanner.state != 0) &&
   17e02:	2800      	cmp	r0, #0
   17e04:	d0b5      	beq.n	17d72 <isr+0xe32>
   17e06:	e4a4      	b.n	17752 <isr+0x812>
	_radio.packet_counter++;
   17e08:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   17e0c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   17e10:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
	_radio.packet_counter++;
   17e14:	3301      	adds	r3, #1
   17e16:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
   17e1a:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   17e1c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
   17e20:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   17e24:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17e28:	2301      	movs	r3, #1
   17e2a:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   17e2e:	2f00      	cmp	r7, #0
   17e30:	f000 82ea 	beq.w	18408 <isr+0x14c8>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   17e34:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   17e38:	f898 1008 	ldrb.w	r1, [r8, #8]
   17e3c:	f003 0201 	and.w	r2, r3, #1
   17e40:	f3c1 0180 	ubfx	r1, r1, #2, #1
   17e44:	4291      	cmp	r1, r2
   17e46:	f000 8198 	beq.w	1817a <isr+0x123a>
		_radio.conn_curr->sn++;
   17e4a:	f082 0201 	eor.w	r2, r2, #1
   17e4e:	f362 0300 	bfi	r3, r2, #0, #1
   17e52:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   17e56:	7d23      	ldrb	r3, [r4, #20]
   17e58:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   17e5a:	bf02      	ittt	eq
   17e5c:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   17e60:	f043 0301 	orreq.w	r3, r3, #1
   17e64:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   17e68:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   17e6c:	0619      	lsls	r1, r3, #24
   17e6e:	f100 817f 	bmi.w	18170 <isr+0x1230>
			node_tx = _radio.conn_curr->pkt_tx_head;
   17e72:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   17e76:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   17e7a:	1d30      	adds	r0, r6, #4
   17e7c:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   17e80:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   17e84:	f1b9 0f00 	cmp.w	r9, #0
   17e88:	f000 80cd 	beq.w	18026 <isr+0x10e6>
				if (_radio.conn_curr->enc_tx) {
   17e8c:	069a      	lsls	r2, r3, #26
   17e8e:	d50b      	bpl.n	17ea8 <isr+0xf68>
					_radio.conn_curr->ccm_tx.counter++;
   17e90:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   17e94:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   17e98:	f11b 0201 	adds.w	r2, fp, #1
   17e9c:	f14c 0300 	adc.w	r3, ip, #0
   17ea0:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   17ea4:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   17ea8:	5c43      	ldrb	r3, [r0, r1]
   17eaa:	f003 0303 	and.w	r3, r3, #3
   17eae:	2b03      	cmp	r3, #3
   17eb0:	f040 80b9 	bne.w	18026 <isr+0x10e6>
	switch (pdu_data_tx->llctrl.opcode) {
   17eb4:	f89a 3003 	ldrb.w	r3, [sl, #3]
   17eb8:	3b02      	subs	r3, #2
   17eba:	2b16      	cmp	r3, #22
   17ebc:	f200 80b3 	bhi.w	18026 <isr+0x10e6>
   17ec0:	e8df f013 	tbh	[pc, r3, lsl #1]
   17ec4:	00950017 	.word	0x00950017
   17ec8:	00b100dd 	.word	0x00b100dd
   17ecc:	00b100b1 	.word	0x00b100b1
   17ed0:	00b100b1 	.word	0x00b100b1
   17ed4:	00be00b3 	.word	0x00be00b3
   17ed8:	00e400b1 	.word	0x00e400b1
   17edc:	00b100b1 	.word	0x00b100b1
   17ee0:	00b100b1 	.word	0x00b100b1
   17ee4:	00b100b1 	.word	0x00b100b1
   17ee8:	00b100ee 	.word	0x00b100ee
   17eec:	01090102 	.word	0x01090102
   17ef0:	0126      	.short	0x0126
		_radio.state = STATE_CLOSE;
   17ef2:	2303      	movs	r3, #3
   17ef4:	7563      	strb	r3, [r4, #21]
		radio_disable();
   17ef6:	f005 fdc5 	bl	1da84 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   17efa:	f005 fde1 	bl	1dac0 <radio_is_ready>
   17efe:	b378      	cbz	r0, 17f60 <isr+0x1020>
   17f00:	4b10      	ldr	r3, [pc, #64]	; (17f44 <isr+0x1004>)
   17f02:	681b      	ldr	r3, [r3, #0]
   17f04:	075b      	lsls	r3, r3, #29
   17f06:	f43f ac09 	beq.w	1771c <isr+0x7dc>
   17f0a:	2301      	movs	r3, #1
   17f0c:	f04f 0200 	mov.w	r2, #0
   17f10:	f363 0202 	bfi	r2, r3, #0, #3
   17f14:	490c      	ldr	r1, [pc, #48]	; (17f48 <isr+0x1008>)
   17f16:	4b0d      	ldr	r3, [pc, #52]	; (17f4c <isr+0x100c>)
   17f18:	1a5b      	subs	r3, r3, r1
   17f1a:	f36f 02c5 	bfc	r2, #3, #3
   17f1e:	08db      	lsrs	r3, r3, #3
   17f20:	f363 128f 	bfi	r2, r3, #6, #10
   17f24:	490c      	ldr	r1, [pc, #48]	; (17f58 <isr+0x1018>)
   17f26:	f7ff b878 	b.w	1701a <isr+0xda>
   17f2a:	bf00      	nop
   17f2c:	f3af 8000 	nop.w
   17f30:	1afd498d 	.word	0x1afd498d
   17f34:	00000007 	.word	0x00000007
   17f38:	000127f9 	.word	0x000127f9
   17f3c:	00012715 	.word	0x00012715
   17f40:	00015901 	.word	0x00015901
   17f44:	2000d72c 	.word	0x2000d72c
   17f48:	0002cff8 	.word	0x0002cff8
   17f4c:	0002d030 	.word	0x0002d030
   17f50:	0003050f 	.word	0x0003050f
   17f54:	200011f0 	.word	0x200011f0
   17f58:	0003051b 	.word	0x0003051b
   17f5c:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code ==
   17f60:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   17f64:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   17f68:	2913      	cmp	r1, #19
   17f6a:	bf08      	it	eq
   17f6c:	2116      	moveq	r1, #22
   17f6e:	f7fb fa4f 	bl	13410 <terminate_ind_rx_enqueue>
		ret = ERR_TERMINATE;
   17f72:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   17f74:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   17f78:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   17f7c:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   17f7e:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   17f82:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   17f86:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   17f88:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   17f8c:	f000 80c7 	beq.w	1811e <isr+0x11de>
	return NULL;
   17f90:	2600      	movs	r6, #0
	if (ret == ERR_TERMINATE) {
   17f92:	2d00      	cmp	r5, #0
   17f94:	f000 80f1 	beq.w	1817a <isr+0x123a>
		connection_release(_radio.conn_curr);
   17f98:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   17f9c:	f7fa fed4 	bl	12d48 <connection_release>
		_radio.conn_curr = NULL;
   17fa0:	2300      	movs	r3, #0
   17fa2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   17fa6:	f005 ff35 	bl	1de14 <radio_tmr_aa_restore>
   17faa:	b918      	cbnz	r0, 17fb4 <isr+0x1074>
		radio_tmr_aa_save(radio_tmr_aa_get());
   17fac:	f005 ff26 	bl	1ddfc <radio_tmr_aa_get>
   17fb0:	f005 ff2a 	bl	1de08 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   17fb4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17fb8:	2b00      	cmp	r3, #0
   17fba:	f43f a878 	beq.w	170ae <isr+0x16e>
	if (tx_release) {
   17fbe:	b11e      	cbz	r6, 17fc8 <isr+0x1088>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   17fc0:	4631      	mov	r1, r6
   17fc2:	8c18      	ldrh	r0, [r3, #32]
   17fc4:	f7fa fe28 	bl	12c18 <pdu_node_tx_release>
	if (rx_enqueue) {
   17fc8:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   17fcc:	2b00      	cmp	r3, #0
   17fce:	f43f a86e 	beq.w	170ae <isr+0x16e>
		rx_fc_lock(_radio.conn_curr->handle);
   17fd2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17fd6:	8c18      	ldrh	r0, [r3, #32]
   17fd8:	f7fa fb82 	bl	126e0 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   17fdc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17fe0:	8c1b      	ldrh	r3, [r3, #32]
   17fe2:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   17fe6:	f7fa fa6b 	bl	124c0 <packet_rx_enqueue>
   17fea:	f7ff b860 	b.w	170ae <isr+0x16e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   17fee:	2208      	movs	r2, #8
   17ff0:	f10a 010e 	add.w	r1, sl, #14
   17ff4:	f105 0094 	add.w	r0, r5, #148	; 0x94
   17ff8:	f7ed ff46 	bl	5e88 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   17ffc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18000:	2204      	movs	r2, #4
   18002:	f10a 0116 	add.w	r1, sl, #22
   18006:	f500 7089 	add.w	r0, r0, #274	; 0x112
   1800a:	f7ed ff3d 	bl	5e88 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   1800e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18012:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   18016:	f042 0208 	orr.w	r2, r2, #8
   1801a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   1801e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   18022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u32_t ret = 0;
   18026:	2500      	movs	r5, #0
   18028:	e7a4      	b.n	17f74 <isr+0x1034>
		_radio.conn_curr->pause_tx = 1;
   1802a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   1802e:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   18032:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   18036:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   1803a:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   1803e:	e7f2      	b.n	18026 <isr+0x10e6>
		if (_radio.role == ROLE_MASTER) {
   18040:	7d23      	ldrb	r3, [r4, #20]
   18042:	2b04      	cmp	r3, #4
   18044:	d11b      	bne.n	1807e <isr+0x113e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18046:	7933      	ldrb	r3, [r6, #4]
   18048:	f043 0303 	orr.w	r3, r3, #3
   1804c:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1804e:	2317      	movs	r3, #23
   18050:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   18052:	2303      	movs	r3, #3
   18054:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   18056:	2208      	movs	r2, #8
   18058:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   1805c:	3004      	adds	r0, #4
   1805e:	f7ed ff13 	bl	5e88 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   18062:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   18066:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   18068:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   1806c:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy,
   1806e:	f106 0112 	add.w	r1, r6, #18
   18072:	220c      	movs	r2, #12
   18074:	6860      	ldr	r0, [r4, #4]
   18076:	f7fb ffc5 	bl	14004 <entropy_get_entropy_isr.constprop.35>
			*node_tx = NULL;
   1807a:	2600      	movs	r6, #0
   1807c:	e7d3      	b.n	18026 <isr+0x10e6>
			_radio.conn_curr->pause_tx = 1;
   1807e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18082:	f043 0308 	orr.w	r3, r3, #8
   18086:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   1808a:	e7cc      	b.n	18026 <isr+0x10e6>
		_radio.conn_curr->pause_rx = 0;
   1808c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   18090:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   18094:	f36f 03c3 	bfc	r3, #3, #1
   18098:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   1809c:	2300      	movs	r3, #0
   1809e:	e7cc      	b.n	1803a <isr+0x10fa>
		if ((_radio.conn_curr->llcp_length.req !=
   180a0:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   180a4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   180a8:	429a      	cmp	r2, r3
   180aa:	d0bc      	beq.n	18026 <isr+0x10e6>
		    (_radio.conn_curr->llcp_length.state ==
   180ac:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   180b0:	f003 0203 	and.w	r2, r3, #3
   180b4:	2a01      	cmp	r2, #1
   180b6:	d1b6      	bne.n	18026 <isr+0x10e6>
			_radio.conn_curr->llcp_length.state =
   180b8:	f043 0304 	orr.w	r3, r3, #4
   180bc:	2202      	movs	r2, #2
   180be:	f362 0301 	bfi	r3, r2, #0, #2
   180c2:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   180c6:	e7ae      	b.n	18026 <isr+0x10e6>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   180c8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   180cc:	2202      	movs	r2, #2
   180ce:	f362 0301 	bfi	r3, r2, #0, #2
   180d2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   180d6:	7d23      	ldrb	r3, [r4, #20]
   180d8:	2b03      	cmp	r3, #3
   180da:	d1a4      	bne.n	18026 <isr+0x10e6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   180dc:	f8df c324 	ldr.w	ip, [pc, #804]	; 18404 <isr+0x14c4>
   180e0:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
   180e4:	e9cd c312 	strd	ip, r3, [sp, #72]	; 0x48
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   180e8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   180ec:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   180f0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   180f4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	conn->phy_tx_time = phy_tx_time[phys];
   180f8:	4313      	orrs	r3, r2
   180fa:	aa14      	add	r2, sp, #80	; 0x50
   180fc:	4413      	add	r3, r2
   180fe:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   18102:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   18106:	f363 0202 	bfi	r2, r3, #0, #3
   1810a:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   1810e:	e78a      	b.n	18026 <isr+0x10e6>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   18110:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   18114:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   18118:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1811c:	e7f3      	b.n	18106 <isr+0x11c6>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1811e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   18122:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   18126:	f04f 0c00 	mov.w	ip, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1812a:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   1812c:	f8a0 c150 	strh.w	ip, [r0, #336]	; 0x150
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   18130:	d114      	bne.n	1815c <isr+0x121c>
		if (node_tx) {
   18132:	2e00      	cmp	r6, #0
   18134:	f43f af2c 	beq.w	17f90 <isr+0x1050>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   18138:	f8d0 2144 	ldr.w	r2, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   1813c:	6819      	ldr	r1, [r3, #0]
   1813e:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   18142:	4293      	cmp	r3, r2
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   18144:	bf12      	itee	ne
   18146:	f8c0 1140 	strne.w	r1, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl = NULL;
   1814a:	f8c0 c140 	streq.w	ip, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   1814e:	f8c0 c144 	streq.w	ip, [r0, #324]	; 0x144
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   18152:	49a4      	ldr	r1, [pc, #656]	; (183e4 <isr+0x14a4>)
   18154:	4630      	mov	r0, r6
   18156:	f7f8 f9de 	bl	10516 <mem_release>
   1815a:	e719      	b.n	17f90 <isr+0x1050>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   1815c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   18160:	6819      	ldr	r1, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   18162:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   18166:	4293      	cmp	r3, r2
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   18168:	bf08      	it	eq
   1816a:	f8c0 1148 	streq.w	r1, [r0, #328]	; 0x148
   1816e:	e710      	b.n	17f92 <isr+0x1052>
			_radio.conn_curr->empty = 0;
   18170:	f36f 13c7 	bfc	r3, #7, #1
   18174:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   18178:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   1817a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1817e:	f898 2008 	ldrb.w	r2, [r8, #8]
   18182:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   18186:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1818a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1818e:	429a      	cmp	r2, r3
   18190:	f040 80fa 	bne.w	18388 <isr+0x1448>
	    (packet_rx_reserve_get(3) != 0) &&
   18194:	2003      	movs	r0, #3
   18196:	f7f9 fa31 	bl	115fc <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   1819a:	2800      	cmp	r0, #0
   1819c:	f000 80f4 	beq.w	18388 <isr+0x1448>
	    (packet_rx_reserve_get(3) != 0) &&
   181a0:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   181a4:	b383      	cbz	r3, 18208 <isr+0x12c8>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   181a6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   181aa:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   181ae:	4293      	cmp	r3, r2
   181b0:	d105      	bne.n	181be <isr+0x127e>
	      (_radio.fc_req == _radio.fc_ack)) ||
   181b2:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   181b6:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   181ba:	4291      	cmp	r1, r2
   181bc:	d024      	beq.n	18208 <isr+0x12c8>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   181be:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   181c2:	4293      	cmp	r3, r2
   181c4:	f000 80e0 	beq.w	18388 <isr+0x1448>
	      (_radio.fc_req != _radio.fc_ack) &&
   181c8:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   181cc:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   181d0:	429a      	cmp	r2, r3
   181d2:	f000 80d9 	beq.w	18388 <isr+0x1448>
		(((_radio.fc_req == 0) &&
   181d6:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
   181da:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
   181de:	b923      	cbnz	r3, 181ea <isr+0x12aa>
		(((_radio.fc_req == 0) &&
   181e0:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   181e4:	8c13      	ldrh	r3, [r2, #32]
   181e6:	4299      	cmp	r1, r3
   181e8:	d00e      	beq.n	18208 <isr+0x12c8>
		 ((_radio.fc_req != 0) &&
   181ea:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   181ee:	2b00      	cmp	r3, #0
   181f0:	f000 80ca 	beq.w	18388 <isr+0x1448>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   181f4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
   181f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   181fc:	f8b3 1178 	ldrh.w	r1, [r3, #376]	; 0x178
   18200:	8c13      	ldrh	r3, [r2, #32]
   18202:	4299      	cmp	r1, r3
   18204:	f040 80c0 	bne.w	18388 <isr+0x1448>
   18208:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		if (pdu_data_rx->len != 0) {
   1820c:	f898 5009 	ldrb.w	r5, [r8, #9]
   18210:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   18214:	2d00      	cmp	r5, #0
   18216:	f000 80c0 	beq.w	1839a <isr+0x145a>
			if (_radio.conn_curr->enc_rx) {
   1821a:	f013 0310 	ands.w	r3, r3, #16
   1821e:	d019      	beq.n	18254 <isr+0x1314>
				done = radio_ccm_is_done();
   18220:	f005 fe84 	bl	1df2c <radio_ccm_is_done>
				LL_ASSERT(done);
   18224:	2800      	cmp	r0, #0
   18226:	d149      	bne.n	182bc <isr+0x137c>
   18228:	4b6f      	ldr	r3, [pc, #444]	; (183e8 <isr+0x14a8>)
   1822a:	681b      	ldr	r3, [r3, #0]
   1822c:	075c      	lsls	r4, r3, #29
   1822e:	f43f aa75 	beq.w	1771c <isr+0x7dc>
   18232:	2301      	movs	r3, #1
   18234:	f04f 0200 	mov.w	r2, #0
   18238:	f363 0202 	bfi	r2, r3, #0, #3
   1823c:	496b      	ldr	r1, [pc, #428]	; (183ec <isr+0x14ac>)
   1823e:	4b6c      	ldr	r3, [pc, #432]	; (183f0 <isr+0x14b0>)
   18240:	1a5b      	subs	r3, r3, r1
   18242:	f360 02c5 	bfi	r2, r0, #3, #3
   18246:	08db      	lsrs	r3, r3, #3
   18248:	f363 128f 	bfi	r2, r3, #6, #10
   1824c:	4969      	ldr	r1, [pc, #420]	; (183f4 <isr+0x14b4>)
   1824e:	486a      	ldr	r0, [pc, #424]	; (183f8 <isr+0x14b8>)
   18250:	f7ff ba62 	b.w	17718 <isr+0x7d8>
		u8_t ccm_rx_increment = 0;
   18254:	461d      	mov	r5, r3
			if ((_radio.conn_curr->enc_rx &&
   18256:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1825a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   1825e:	06d9      	lsls	r1, r3, #27
   18260:	d42e      	bmi.n	182c0 <isr+0x1380>
			    (_radio.conn_curr->pause_rx &&
   18262:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18266:	f898 3008 	ldrb.w	r3, [r8, #8]
   1826a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   1826e:	f012 0f04 	tst.w	r2, #4
   18272:	d147      	bne.n	18304 <isr+0x13c4>
			_radio.conn_curr->appto_expire = 0;
   18274:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   18276:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   1827a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   1827e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   18282:	d004      	beq.n	1828e <isr+0x134e>
   18284:	2b02      	cmp	r3, #2
   18286:	d878      	bhi.n	1837a <isr+0x143a>
				*rx_enqueue = 1;
   18288:	2301      	movs	r3, #1
   1828a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
			_radio.conn_curr->nesn++;
   1828e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18292:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   18296:	f082 0202 	eor.w	r2, r2, #2
   1829a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   1829e:	2d00      	cmp	r5, #0
   182a0:	d072      	beq.n	18388 <isr+0x1448>
				_radio.conn_curr->ccm_rx.counter++;
   182a2:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   182a6:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   182aa:	f119 0001 	adds.w	r0, r9, #1
   182ae:	f14a 0100 	adc.w	r1, sl, #0
   182b2:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   182b6:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   182ba:	e065      	b.n	18388 <isr+0x1448>
				ccm_rx_increment = 1;
   182bc:	2501      	movs	r5, #1
   182be:	e7ca      	b.n	18256 <isr+0x1316>
			     !radio_ccm_mic_is_valid()) ||
   182c0:	f005 fe52 	bl	1df68 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   182c4:	2800      	cmp	r0, #0
   182c6:	d1cc      	bne.n	18262 <isr+0x1322>
				_radio.state = STATE_CLOSE;
   182c8:	2303      	movs	r3, #3
   182ca:	7563      	strb	r3, [r4, #21]
				radio_disable();
   182cc:	f005 fbda 	bl	1da84 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   182d0:	f005 fbf6 	bl	1dac0 <radio_is_ready>
   182d4:	4605      	mov	r5, r0
   182d6:	2800      	cmp	r0, #0
   182d8:	d043      	beq.n	18362 <isr+0x1422>
   182da:	4b43      	ldr	r3, [pc, #268]	; (183e8 <isr+0x14a8>)
   182dc:	681b      	ldr	r3, [r3, #0]
   182de:	075b      	lsls	r3, r3, #29
   182e0:	f43f aa1c 	beq.w	1771c <isr+0x7dc>
   182e4:	2301      	movs	r3, #1
   182e6:	f04f 0200 	mov.w	r2, #0
   182ea:	f363 0202 	bfi	r2, r3, #0, #3
   182ee:	493f      	ldr	r1, [pc, #252]	; (183ec <isr+0x14ac>)
   182f0:	4b3f      	ldr	r3, [pc, #252]	; (183f0 <isr+0x14b0>)
   182f2:	1a5b      	subs	r3, r3, r1
   182f4:	f36f 02c5 	bfc	r2, #3, #3
   182f8:	08db      	lsrs	r3, r3, #3
   182fa:	f363 128f 	bfi	r2, r3, #6, #10
   182fe:	493d      	ldr	r1, [pc, #244]	; (183f4 <isr+0x14b4>)
   18300:	f7fe be8b 	b.w	1701a <isr+0xda>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   18304:	f003 0103 	and.w	r1, r3, #3
   18308:	2903      	cmp	r1, #3
   1830a:	d1dd      	bne.n	182c8 <isr+0x1388>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1830c:	f990 c01d 	ldrsb.w	ip, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   18310:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   18314:	f1bc 0f00 	cmp.w	ip, #0
   18318:	f002 0240 	and.w	r2, r2, #64	; 0x40
   1831c:	db15      	blt.n	1834a <isr+0x140a>
	       (!conn->role &&
   1831e:	b922      	cbnz	r2, 1832a <isr+0x13ea>
		((!conn->refresh &&
   18320:	2902      	cmp	r1, #2
   18322:	d0a7      	beq.n	18274 <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18324:	2911      	cmp	r1, #17
   18326:	d8cf      	bhi.n	182c8 <isr+0x1388>
   18328:	e009      	b.n	1833e <isr+0x13fe>
		 (conn->refresh &&
   1832a:	1e8a      	subs	r2, r1, #2
   1832c:	b2d2      	uxtb	r2, r2
   1832e:	2a09      	cmp	r2, #9
   18330:	d8f8      	bhi.n	18324 <isr+0x13e4>
   18332:	f240 2c05 	movw	ip, #517	; 0x205
   18336:	fa2c f202 	lsr.w	r2, ip, r2
   1833a:	07d2      	lsls	r2, r2, #31
   1833c:	d49a      	bmi.n	18274 <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1833e:	4a2f      	ldr	r2, [pc, #188]	; (183fc <isr+0x14bc>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18340:	fa22 f101 	lsr.w	r1, r2, r1
   18344:	07ca      	lsls	r2, r1, #31
   18346:	d5bf      	bpl.n	182c8 <isr+0x1388>
   18348:	e794      	b.n	18274 <isr+0x1334>
	       (conn->role &&
   1834a:	b92a      	cbnz	r2, 18358 <isr+0x1418>
		((!conn->refresh &&
   1834c:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1834e:	d091      	beq.n	18274 <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18350:	2911      	cmp	r1, #17
   18352:	d8b9      	bhi.n	182c8 <isr+0x1388>
   18354:	4a2a      	ldr	r2, [pc, #168]	; (18400 <isr+0x14c0>)
   18356:	e7f3      	b.n	18340 <isr+0x1400>
		 (conn->refresh &&
   18358:	1e8a      	subs	r2, r1, #2
   1835a:	2a01      	cmp	r2, #1
   1835c:	d98a      	bls.n	18274 <isr+0x1334>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1835e:	290b      	cmp	r1, #11
   18360:	e7f5      	b.n	1834e <isr+0x140e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   18362:	213d      	movs	r1, #61	; 0x3d
   18364:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18368:	f7fb f852 	bl	13410 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   1836c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18370:	f7fa fcea 	bl	12d48 <connection_release>
				_radio.conn_curr = NULL;
   18374:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   18378:	e615      	b.n	17fa6 <isr+0x1066>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   1837a:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   1837e:	4640      	mov	r0, r8
   18380:	f7fd fc2c 	bl	15bdc <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   18384:	2800      	cmp	r0, #0
   18386:	d082      	beq.n	1828e <isr+0x134e>
		_radio.conn_curr->supervision_expire = 0;
   18388:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   1838c:	2300      	movs	r3, #0
   1838e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   18392:	4699      	mov	r9, r3
		_radio.conn_curr->supervision_expire = 0;
   18394:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   18398:	e04d      	b.n	18436 <isr+0x14f6>
		} else if ((_radio.conn_curr->enc_rx) ||
   1839a:	f013 0f14 	tst.w	r3, #20
   1839e:	f43f af76 	beq.w	1828e <isr+0x134e>
					    (conn->latency + 6)) ?
   183a2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   183a4:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   183a8:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   183aa:	4299      	cmp	r1, r3
   183ac:	bfc4      	itt	gt
   183ae:	1f8b      	subgt	r3, r1, #6
   183b0:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   183b2:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   183b6:	bfcc      	ite	gt
   183b8:	b29b      	uxthgt	r3, r3
   183ba:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   183bc:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   183be:	bf1e      	ittt	ne
   183c0:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   183c4:	2300      	movne	r3, #0
   183c6:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   183ca:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   183ce:	2b00      	cmp	r3, #0
   183d0:	f47f af5d 	bne.w	1828e <isr+0x134e>
				conn->appto_expire = conn->appto_reload;
   183d4:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   183d8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   183dc:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   183e0:	e755      	b.n	1828e <isr+0x134e>
   183e2:	bf00      	nop
   183e4:	20001268 	.word	0x20001268
   183e8:	2000d72c 	.word	0x2000d72c
   183ec:	0002cff8 	.word	0x0002cff8
   183f0:	0002d030 	.word	0x0002d030
   183f4:	0003057f 	.word	0x0003057f
   183f8:	00030bf9 	.word	0x00030bf9
   183fc:	00022060 	.word	0x00022060
   18400:	00022040 	.word	0x00022040
   18404:	01020101 	.word	0x01020101
		if (_radio.crc_expire == 0) {
   18408:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1840c:	b913      	cbnz	r3, 18414 <isr+0x14d4>
			_radio.crc_expire = 2;
   1840e:	2302      	movs	r3, #2
   18410:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   18414:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   18418:	3b01      	subs	r3, #1
   1841a:	b2db      	uxtb	r3, r3
   1841c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   18420:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   18424:	fab3 f983 	clz	r9, r3
   18428:	ea4f 1959 	mov.w	r9, r9, lsr #5
		if (!_radio.conn_curr->supervision_expire) {
   1842c:	2e00      	cmp	r6, #0
   1842e:	d15c      	bne.n	184ea <isr+0x15aa>
			_radio.conn_curr->supervision_expire =
   18430:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   18432:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   18436:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1843a:	a912      	add	r1, sp, #72	; 0x48
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1843c:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   18440:	f7fd fa60 	bl	15904 <prepare_pdu_data_tx>
			STATE_CLOSE : STATE_TX;
   18444:	7d63      	ldrb	r3, [r4, #21]
   18446:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   18448:	ea4f 15d5 	mov.w	r5, r5, lsr #7
			STATE_CLOSE : STATE_TX;
   1844c:	d051      	beq.n	184f2 <isr+0x15b2>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1844e:	f1b9 0f00 	cmp.w	r9, #0
   18452:	d14c      	bne.n	184ee <isr+0x15ae>
   18454:	b13f      	cbz	r7, 18466 <isr+0x1526>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   18456:	f898 3008 	ldrb.w	r3, [r8, #8]
   1845a:	06df      	lsls	r7, r3, #27
   1845c:	d403      	bmi.n	18466 <isr+0x1526>
			 ((pdu_data_tx->len == 0) ||
   1845e:	9b12      	ldr	r3, [sp, #72]	; 0x48
			((crc_ok) && (pdu_data_rx->md == 0) &&
   18460:	785b      	ldrb	r3, [r3, #1]
   18462:	2b00      	cmp	r3, #0
   18464:	d043      	beq.n	184ee <isr+0x15ae>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   18466:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			  (0))) ||
   1846a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   1846e:	2b00      	cmp	r3, #0
   18470:	d13d      	bne.n	184ee <isr+0x15ae>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   18472:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   18474:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   18476:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   18478:	f005 fbfa 	bl	1dc70 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   1847c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18480:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   18484:	f000 0007 	and.w	r0, r0, #7
   18488:	f005 fb56 	bl	1db38 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   1848c:	f005 fcce 	bl	1de2c <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   18490:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18494:	9912      	ldr	r1, [sp, #72]	; 0x48
   18496:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   1849a:	780b      	ldrb	r3, [r1, #0]
   1849c:	f3c2 0200 	ubfx	r2, r2, #0, #1
   184a0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   184a4:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   184a8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   184ac:	f362 0382 	bfi	r3, r2, #2, #1
   184b0:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   184b2:	f7f9 fd03 	bl	11ebc <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   184b6:	f005 fb03 	bl	1dac0 <radio_is_ready>
   184ba:	2800      	cmp	r0, #0
   184bc:	f43f ad73 	beq.w	17fa6 <isr+0x1066>
   184c0:	4bc3      	ldr	r3, [pc, #780]	; (187d0 <isr+0x1890>)
   184c2:	681b      	ldr	r3, [r3, #0]
   184c4:	075d      	lsls	r5, r3, #29
   184c6:	f43f a929 	beq.w	1771c <isr+0x7dc>
   184ca:	2301      	movs	r3, #1
   184cc:	f04f 0200 	mov.w	r2, #0
   184d0:	f363 0202 	bfi	r2, r3, #0, #3
   184d4:	49bf      	ldr	r1, [pc, #764]	; (187d4 <isr+0x1894>)
   184d6:	4bc0      	ldr	r3, [pc, #768]	; (187d8 <isr+0x1898>)
   184d8:	1a5b      	subs	r3, r3, r1
   184da:	f36f 02c5 	bfc	r2, #3, #3
   184de:	08db      	lsrs	r3, r3, #3
   184e0:	f363 128f 	bfi	r2, r3, #6, #10
   184e4:	49bd      	ldr	r1, [pc, #756]	; (187dc <isr+0x189c>)
   184e6:	f7fe bd98 	b.w	1701a <isr+0xda>
	struct radio_pdu_node_tx *tx_release = NULL;
   184ea:	2600      	movs	r6, #0
   184ec:	e7a3      	b.n	18436 <isr+0x14f6>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   184ee:	2303      	movs	r3, #3
   184f0:	7563      	strb	r3, [r4, #21]
		if ((_radio.role == ROLE_MASTER) ||
   184f2:	7d23      	ldrb	r3, [r4, #20]
   184f4:	2b04      	cmp	r3, #4
   184f6:	d10a      	bne.n	1850e <isr+0x15ce>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   184f8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   184fc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   18500:	f365 12c7 	bfi	r2, r5, #7, #1
   18504:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   18508:	f005 fabc 	bl	1da84 <radio_disable>
   1850c:	e54b      	b.n	17fa6 <isr+0x1066>
			radio_switch_complete_and_disable();
   1850e:	f005 fb29 	bl	1db64 <radio_switch_complete_and_disable>
   18512:	e7bd      	b.n	18490 <isr+0x1550>
		LL_ASSERT(0);
   18514:	4bae      	ldr	r3, [pc, #696]	; (187d0 <isr+0x1890>)
   18516:	681b      	ldr	r3, [r3, #0]
   18518:	075c      	lsls	r4, r3, #29
   1851a:	f43f a8ff 	beq.w	1771c <isr+0x7dc>
   1851e:	2301      	movs	r3, #1
   18520:	f04f 0200 	mov.w	r2, #0
   18524:	f363 0202 	bfi	r2, r3, #0, #3
   18528:	49aa      	ldr	r1, [pc, #680]	; (187d4 <isr+0x1894>)
   1852a:	4bab      	ldr	r3, [pc, #684]	; (187d8 <isr+0x1898>)
   1852c:	1a5b      	subs	r3, r3, r1
   1852e:	f36f 02c5 	bfc	r2, #3, #3
   18532:	08db      	lsrs	r3, r3, #3
   18534:	f363 128f 	bfi	r2, r3, #6, #10
   18538:	49a9      	ldr	r1, [pc, #676]	; (187e0 <isr+0x18a0>)
   1853a:	f7fe be14 	b.w	17166 <isr+0x226>
	switch (_radio.role) {
   1853e:	7d22      	ldrb	r2, [r4, #20]
   18540:	2a04      	cmp	r2, #4
   18542:	f200 825b 	bhi.w	189fc <isr+0x1abc>
   18546:	e8df f012 	tbh	[pc, r2, lsl #1]
   1854a:	023c      	.short	0x023c
   1854c:	00570005 	.word	0x00570005
   18550:	00b000b0 	.word	0x00b000b0
	if ((_radio.state == STATE_CLOSE) &&
   18554:	2b03      	cmp	r3, #3
   18556:	d109      	bne.n	1856c <isr+0x162c>
	    (_radio.advertiser.chan_map_current != 0)) {
   18558:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   1855c:	0758      	lsls	r0, r3, #29
   1855e:	d005      	beq.n	1856c <isr+0x162c>
		adv_setup();
   18560:	f7fa fcf6 	bl	12f50 <adv_setup>
		radio_tx_enable();
   18564:	f005 fa88 	bl	1da78 <radio_tx_enable>
   18568:	f7fe bd71 	b.w	1704e <isr+0x10e>
		radio_filter_disable();
   1856c:	f005 fb44 	bl	1dbf8 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   18570:	7d63      	ldrb	r3, [r4, #21]
   18572:	2b03      	cmp	r3, #3
   18574:	d173      	bne.n	1865e <isr+0x171e>
		    (!_radio.advertiser.is_hdcd)) {
   18576:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   1857a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   1857e:	d16e      	bne.n	1865e <isr+0x171e>
			entropy_get_entropy_isr(_radio.entropy,
   18580:	2202      	movs	r2, #2
   18582:	a912      	add	r1, sp, #72	; 0x48
   18584:	6860      	ldr	r0, [r4, #4]
   18586:	f7fb fd3d 	bl	14004 <entropy_get_entropy_isr.constprop.35>
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
   1858a:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   1858e:	f240 1247 	movw	r2, #327	; 0x147
   18592:	fbb1 f3f2 	udiv	r3, r1, r2
   18596:	fb02 1313 	mls	r3, r2, r3, r1
			ticker_status =
   1859a:	f640 726a 	movw	r2, #3946	; 0xf6a
   1859e:	9206      	str	r2, [sp, #24]
   185a0:	4a90      	ldr	r2, [pc, #576]	; (187e4 <isr+0x18a4>)
			random_delay += 1;
   185a2:	3301      	adds	r3, #1
   185a4:	b29b      	uxth	r3, r3
			ticker_status =
   185a6:	e9cd 5204 	strd	r5, r2, [sp, #16]
   185aa:	e9cd 5502 	strd	r5, r5, [sp, #8]
   185ae:	e9cd 5500 	strd	r5, r5, [sp]
   185b2:	2205      	movs	r2, #5
   185b4:	4629      	mov	r1, r5
   185b6:	4628      	mov	r0, r5
			random_delay += 1;
   185b8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
			ticker_status =
   185bc:	f7f8 fe62 	bl	11284 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   185c0:	f030 0302 	bics.w	r3, r0, #2
   185c4:	d04b      	beq.n	1865e <isr+0x171e>
   185c6:	7ce3      	ldrb	r3, [r4, #19]
   185c8:	2b05      	cmp	r3, #5
   185ca:	d048      	beq.n	1865e <isr+0x171e>
   185cc:	4b80      	ldr	r3, [pc, #512]	; (187d0 <isr+0x1890>)
   185ce:	681b      	ldr	r3, [r3, #0]
   185d0:	0759      	lsls	r1, r3, #29
   185d2:	f43f a8a3 	beq.w	1771c <isr+0x7dc>
   185d6:	2301      	movs	r3, #1
   185d8:	f04f 0200 	mov.w	r2, #0
   185dc:	f363 0202 	bfi	r2, r3, #0, #3
   185e0:	497c      	ldr	r1, [pc, #496]	; (187d4 <isr+0x1894>)
   185e2:	4b7d      	ldr	r3, [pc, #500]	; (187d8 <isr+0x1898>)
   185e4:	4880      	ldr	r0, [pc, #512]	; (187e8 <isr+0x18a8>)
   185e6:	1a5b      	subs	r3, r3, r1
   185e8:	f365 02c5 	bfi	r2, r5, #3, #3
   185ec:	08db      	lsrs	r3, r3, #3
   185ee:	f363 128f 	bfi	r2, r3, #6, #10
   185f2:	497e      	ldr	r1, [pc, #504]	; (187ec <isr+0x18ac>)
   185f4:	f7ff b890 	b.w	17718 <isr+0x7d8>
	if (_radio.state == STATE_CLOSE) {
   185f8:	2b03      	cmp	r3, #3
   185fa:	d124      	bne.n	18646 <isr+0x1706>
		radio_tmr_tifs_set(RADIO_TIFS);
   185fc:	2096      	movs	r0, #150	; 0x96
   185fe:	f005 fb37 	bl	1dc70 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   18602:	2300      	movs	r3, #0
   18604:	4619      	mov	r1, r3
   18606:	461a      	mov	r2, r3
   18608:	4618      	mov	r0, r3
   1860a:	f005 faa1 	bl	1db50 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   1860e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   18612:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   18616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1861a:	3008      	adds	r0, #8
   1861c:	f005 fa0c 	bl	1da38 <radio_pkt_rx_set>
		radio_rssi_measure();
   18620:	f005 faae 	bl	1db80 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   18624:	f004 fbe8 	bl	1cdf8 <ctrl_rl_enabled>
   18628:	b138      	cbz	r0, 1863a <isr+0x16fa>
			u8_t count, *irks = ctrl_irks_get(&count);
   1862a:	a812      	add	r0, sp, #72	; 0x48
   1862c:	f004 f876 	bl	1c71c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   18630:	4601      	mov	r1, r0
   18632:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   18636:	f005 fca1 	bl	1df7c <radio_ar_configure>
		_radio.state = STATE_RX;
   1863a:	2301      	movs	r3, #1
   1863c:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
   1863e:	f005 fa15 	bl	1da6c <radio_rx_enable>
   18642:	f7fe bd04 	b.w	1704e <isr+0x10e>
		radio_filter_disable();
   18646:	f005 fad7 	bl	1dbf8 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   1864a:	7d63      	ldrb	r3, [r4, #21]
   1864c:	2b05      	cmp	r3, #5
   1864e:	d106      	bne.n	1865e <isr+0x171e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18650:	2300      	movs	r3, #0
   18652:	9300      	str	r3, [sp, #0]
   18654:	2204      	movs	r2, #4
   18656:	4619      	mov	r1, r3
   18658:	4618      	mov	r0, r3
   1865a:	f7f8 fe5d 	bl	11318 <ticker_stop>
	_radio.role = ROLE_NONE;
   1865e:	2500      	movs	r5, #0
   18660:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
   18662:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0;
   18664:	74a5      	strb	r5, [r4, #18]
	radio_tmr_stop();
   18666:	f005 fb83 	bl	1dd70 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1866a:	4b61      	ldr	r3, [pc, #388]	; (187f0 <isr+0x18b0>)
   1866c:	462a      	mov	r2, r5
   1866e:	4629      	mov	r1, r5
   18670:	4628      	mov	r0, r5
   18672:	f7f7 ffff 	bl	10674 <mayfly_enqueue>
	LL_ASSERT(!retval);
   18676:	4606      	mov	r6, r0
   18678:	2800      	cmp	r0, #0
   1867a:	f000 81d4 	beq.w	18a26 <isr+0x1ae6>
   1867e:	4b54      	ldr	r3, [pc, #336]	; (187d0 <isr+0x1890>)
   18680:	681b      	ldr	r3, [r3, #0]
   18682:	075a      	lsls	r2, r3, #29
   18684:	f43f a84a 	beq.w	1771c <isr+0x7dc>
   18688:	2301      	movs	r3, #1
   1868a:	f04f 0200 	mov.w	r2, #0
   1868e:	f363 0202 	bfi	r2, r3, #0, #3
   18692:	4950      	ldr	r1, [pc, #320]	; (187d4 <isr+0x1894>)
   18694:	4b50      	ldr	r3, [pc, #320]	; (187d8 <isr+0x1898>)
   18696:	4857      	ldr	r0, [pc, #348]	; (187f4 <isr+0x18b4>)
   18698:	1a5b      	subs	r3, r3, r1
   1869a:	f365 02c5 	bfi	r2, r5, #3, #3
   1869e:	08db      	lsrs	r3, r3, #3
   186a0:	f363 128f 	bfi	r2, r3, #6, #10
   186a4:	4954      	ldr	r1, [pc, #336]	; (187f8 <isr+0x18b8>)
   186a6:	f7ff b837 	b.w	17718 <isr+0x7d8>
	if (_radio.conn_curr == 0) {
   186aa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   186ae:	2800      	cmp	r0, #0
   186b0:	d0d5      	beq.n	1865e <isr+0x171e>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   186b2:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   186b6:	b181      	cbz	r1, 186da <isr+0x179a>
   186b8:	7d23      	ldrb	r3, [r4, #20]
   186ba:	2b03      	cmp	r3, #3
   186bc:	d003      	beq.n	186c6 <isr+0x1786>
   186be:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   186c2:	07da      	lsls	r2, r3, #31
   186c4:	d509      	bpl.n	186da <isr+0x179a>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   186c6:	f7fa fea3 	bl	13410 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   186ca:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   186ce:	f7fa fb3b 	bl	12d48 <connection_release>
			_radio.conn_curr = NULL;
   186d2:	2300      	movs	r3, #0
   186d4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   186d8:	e7c1      	b.n	1865e <isr+0x171e>
	latency_event = _radio.conn_curr->latency_event;
   186da:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   186de:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   186e2:	f10b 0601 	add.w	r6, fp, #1
   186e6:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   186e8:	2f00      	cmp	r7, #0
   186ea:	f000 80a4 	beq.w	18836 <isr+0x18f6>
		if (_radio.role == ROLE_SLAVE) {
   186ee:	7d23      	ldrb	r3, [r4, #20]
   186f0:	2b03      	cmp	r3, #3
   186f2:	f040 8093 	bne.w	1881c <isr+0x18dc>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   186f6:	f005 fb8d 	bl	1de14 <radio_tmr_aa_restore>
   186fa:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   186fc:	f005 fb90 	bl	1de20 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   18700:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   18704:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   18708:	f003 0307 	and.w	r3, r3, #7
   1870c:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1870e:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   18712:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   18714:	d053      	beq.n	187be <isr+0x187e>
		return 40;
   18716:	2b04      	cmp	r3, #4
   18718:	bf0c      	ite	eq
   1871a:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   1871e:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   18722:	f100 0330 	add.w	r3, r0, #48	; 0x30
   18726:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   18728:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1872a:	930a      	str	r3, [sp, #40]	; 0x28
   1872c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 187fc <isr+0x18bc>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   18730:	a325      	add	r3, pc, #148	; (adr r3, 187c8 <isr+0x1888>)
   18732:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   18736:	d863      	bhi.n	18800 <isr+0x18c0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   18738:	fba0 010a 	umull	r0, r1, r0, sl
   1873c:	f7e7 fdba 	bl	2b4 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   18740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   18742:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   18744:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   18748:	a31f      	add	r3, pc, #124	; (adr r3, 187c8 <isr+0x1888>)
   1874a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1874e:	fba0 010a 	umull	r0, r1, r0, sl
   18752:	f7e7 fdaf 	bl	2b4 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   18756:	2300      	movs	r3, #0
   18758:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   1875a:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   1875c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   18760:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   18764:	2b00      	cmp	r3, #0
   18766:	d053      	beq.n	18810 <isr+0x18d0>
				if (pdu_data_tx->len ||
   18768:	795b      	ldrb	r3, [r3, #5]
   1876a:	b913      	cbnz	r3, 18772 <isr+0x1832>
   1876c:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   18770:	b10b      	cbz	r3, 18776 <isr+0x1836>
					_radio.conn_curr->latency_event = 0;
   18772:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   18774:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   18776:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1877a:	2200      	movs	r2, #0
   1877c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   1877e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18782:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   18786:	b1c3      	cbz	r3, 187ba <isr+0x187a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   18788:	429e      	cmp	r6, r3
   1878a:	f080 80db 	bcs.w	18944 <isr+0x1a04>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1878e:	1b9b      	subs	r3, r3, r6
   18790:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   18792:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   18794:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   18796:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   1879a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   1879c:	f240 80d4 	bls.w	18948 <isr+0x1a08>
			else if (_radio.role == ROLE_SLAVE) {
   187a0:	7d23      	ldrb	r3, [r4, #20]
   187a2:	2b03      	cmp	r3, #3
   187a4:	d109      	bne.n	187ba <isr+0x187a>
				if (latency_event != 0) {
   187a6:	f1bb 0f00 	cmp.w	fp, #0
   187aa:	f040 80cd 	bne.w	18948 <isr+0x1a08>
					force = _radio.conn_curr->slave.force & 0x01;
   187ae:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   187b0:	087b      	lsrs	r3, r7, #1
					if (force) {
   187b2:	f017 0701 	ands.w	r7, r7, #1
   187b6:	d15b      	bne.n	18870 <isr+0x1930>
					_radio.conn_curr->slave.force >>= 1;
   187b8:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   187ba:	2700      	movs	r7, #0
   187bc:	e05b      	b.n	18876 <isr+0x1936>
		return 24;
   187be:	f04f 0818 	mov.w	r8, #24
   187c2:	e7ae      	b.n	18722 <isr+0x17e2>
   187c4:	f3af 8000 	nop.w
   187c8:	1afd498d 	.word	0x1afd498d
   187cc:	00000007 	.word	0x00000007
   187d0:	2000d72c 	.word	0x2000d72c
   187d4:	0002cff8 	.word	0x0002cff8
   187d8:	0002d030 	.word	0x0002d030
   187dc:	0003058f 	.word	0x0003058f
   187e0:	0003059b 	.word	0x0003059b
   187e4:	0001288d 	.word	0x0001288d
   187e8:	00030c13 	.word	0x00030c13
   187ec:	000305ae 	.word	0x000305ae
   187f0:	2000cfac 	.word	0x2000cfac
   187f4:	0003103a 	.word	0x0003103a
   187f8:	0003067f 	.word	0x0003067f
   187fc:	3b9aca00 	.word	0x3b9aca00
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   18800:	fba9 010a 	umull	r0, r1, r9, sl
   18804:	f7e7 fd56 	bl	2b4 <__aeabi_uldivmod>
   18808:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1880a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1880e:	e79b      	b.n	18748 <isr+0x1808>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   18810:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   18814:	07db      	lsls	r3, r3, #31
   18816:	d5ae      	bpl.n	18776 <isr+0x1836>
				_radio.conn_curr->latency_event =
   18818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   1881a:	e7ab      	b.n	18774 <isr+0x1834>
		} else if (reason_peer) {
   1881c:	b149      	cbz	r1, 18832 <isr+0x18f2>
			_radio.conn_curr->master.terminate_ack = 1;
   1881e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   18822:	f043 0301 	orr.w	r3, r3, #1
   18826:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   1882a:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   1882e:	4645      	mov	r5, r8
   18830:	e7a1      	b.n	18776 <isr+0x1836>
	ticks_drift_minus = 0;
   18832:	4688      	mov	r8, r1
   18834:	e7fb      	b.n	1882e <isr+0x18ee>
	else if (_radio.conn_curr->connect_expire) {
   18836:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   18838:	b185      	cbz	r5, 1885c <isr+0x191c>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   1883a:	42ae      	cmp	r6, r5
   1883c:	d204      	bcs.n	18848 <isr+0x1908>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1883e:	1bad      	subs	r5, r5, r6
   18840:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   18842:	463d      	mov	r5, r7
   18844:	46a8      	mov	r8, r5
   18846:	e79a      	b.n	1877e <isr+0x183e>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   18848:	213e      	movs	r1, #62	; 0x3e
   1884a:	f7fa fde1 	bl	13410 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1884e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18852:	f7fa fa79 	bl	12d48 <connection_release>
			_radio.conn_curr = NULL;
   18856:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   1885a:	e700      	b.n	1865e <isr+0x171e>
		if (!_radio.conn_curr->supervision_expire) {
   1885c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   18860:	f1b8 0f00 	cmp.w	r8, #0
   18864:	d1ee      	bne.n	18844 <isr+0x1904>
			_radio.conn_curr->supervision_expire =
   18866:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   18868:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   1886c:	4645      	mov	r5, r8
   1886e:	e786      	b.n	1877e <isr+0x183e>
						_radio.conn_curr->slave.force |=
   18870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18874:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   18876:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1887a:	b123      	cbz	r3, 18886 <isr+0x1946>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   1887c:	429e      	cmp	r6, r3
   1887e:	d265      	bcs.n	1894c <isr+0x1a0c>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   18880:	1b9b      	subs	r3, r3, r6
   18882:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   18886:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   1888a:	b123      	cbz	r3, 18896 <isr+0x1956>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   1888c:	429e      	cmp	r6, r3
   1888e:	d25f      	bcs.n	18950 <isr+0x1a10>
			_radio.conn_curr->apto_expire -= elapsed_event;
   18890:	1b9b      	subs	r3, r3, r6
   18892:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   18896:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   1889a:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   1889e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   188a2:	b123      	cbz	r3, 188ae <isr+0x196e>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   188a4:	429e      	cmp	r6, r3
   188a6:	d278      	bcs.n	1899a <isr+0x1a5a>
			_radio.conn_curr->appto_expire -= elapsed_event;
   188a8:	1b9e      	subs	r6, r3, r6
   188aa:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   188ae:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   188b2:	428b      	cmp	r3, r1
   188b4:	d006      	beq.n	188c4 <isr+0x1984>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   188b6:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   188ba:	3b01      	subs	r3, #1
   188bc:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   188be:	bf9c      	itt	ls
   188c0:	2300      	movls	r3, #0
   188c2:	8553      	strhls	r3, [r2, #42]	; 0x2a
   188c4:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   188c6:	b90f      	cbnz	r7, 188cc <isr+0x198c>
   188c8:	459b      	cmp	fp, r3
   188ca:	d078      	beq.n	189be <isr+0x1a7e>
		lazy = _radio.conn_curr->latency_event + 1;
   188cc:	3301      	adds	r3, #1
   188ce:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   188d0:	b935      	cbnz	r5, 188e0 <isr+0x19a0>
   188d2:	f1b8 0f00 	cmp.w	r8, #0
   188d6:	d103      	bne.n	188e0 <isr+0x19a0>
   188d8:	b913      	cbnz	r3, 188e0 <isr+0x19a0>
	    (lazy != 0) || (force != 0)) {
   188da:	2f00      	cmp	r7, #0
   188dc:	f43f aebf 	beq.w	1865e <isr+0x171e>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   188e0:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   188e4:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   188e6:	3207      	adds	r2, #7
   188e8:	b2d6      	uxtb	r6, r2
		ticker_status =
   188ea:	4a5f      	ldr	r2, [pc, #380]	; (18a68 <isr+0x1b28>)
				      (void *)(u32_t)ticker_id);
   188ec:	9606      	str	r6, [sp, #24]
		ticker_status =
   188ee:	e9cd 7204 	strd	r7, r2, [sp, #16]
   188f2:	2700      	movs	r7, #0
   188f4:	462b      	mov	r3, r5
   188f6:	e9cd 7701 	strd	r7, r7, [sp, #4]
   188fa:	f8cd 8000 	str.w	r8, [sp]
   188fe:	4632      	mov	r2, r6
   18900:	4639      	mov	r1, r7
   18902:	4638      	mov	r0, r7
   18904:	f7f8 fcbe 	bl	11284 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18908:	f030 0302 	bics.w	r3, r0, #2
   1890c:	f43f aea7 	beq.w	1865e <isr+0x171e>
   18910:	7ce3      	ldrb	r3, [r4, #19]
   18912:	429e      	cmp	r6, r3
   18914:	f43f aea3 	beq.w	1865e <isr+0x171e>
   18918:	4b54      	ldr	r3, [pc, #336]	; (18a6c <isr+0x1b2c>)
   1891a:	681b      	ldr	r3, [r3, #0]
   1891c:	075c      	lsls	r4, r3, #29
   1891e:	f43e aefd 	beq.w	1771c <isr+0x7dc>
   18922:	2301      	movs	r3, #1
   18924:	f04f 0200 	mov.w	r2, #0
   18928:	f363 0202 	bfi	r2, r3, #0, #3
   1892c:	4950      	ldr	r1, [pc, #320]	; (18a70 <isr+0x1b30>)
   1892e:	4b51      	ldr	r3, [pc, #324]	; (18a74 <isr+0x1b34>)
   18930:	4851      	ldr	r0, [pc, #324]	; (18a78 <isr+0x1b38>)
   18932:	1a5b      	subs	r3, r3, r1
   18934:	f367 02c5 	bfi	r2, r7, #3, #3
   18938:	08db      	lsrs	r3, r3, #3
   1893a:	f363 128f 	bfi	r2, r3, #6, #10
   1893e:	494f      	ldr	r1, [pc, #316]	; (18a7c <isr+0x1b3c>)
   18940:	f7fe beea 	b.w	17718 <isr+0x7d8>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   18944:	2108      	movs	r1, #8
   18946:	e6be      	b.n	186c6 <isr+0x1786>
				force = 1;
   18948:	2701      	movs	r7, #1
   1894a:	e794      	b.n	18876 <isr+0x1936>
			terminate_ind_rx_enqueue(_radio.conn_curr,
   1894c:	2122      	movs	r1, #34	; 0x22
   1894e:	e6ba      	b.n	186c6 <isr+0x1786>
			_radio.conn_curr->apto_expire = 0;
   18950:	2300      	movs	r3, #0
   18952:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   18956:	2002      	movs	r0, #2
   18958:	f7f8 fe50 	bl	115fc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1895c:	b9a0      	cbnz	r0, 18988 <isr+0x1a48>
   1895e:	4b43      	ldr	r3, [pc, #268]	; (18a6c <isr+0x1b2c>)
   18960:	681b      	ldr	r3, [r3, #0]
   18962:	075d      	lsls	r5, r3, #29
   18964:	f43e aeda 	beq.w	1771c <isr+0x7dc>
   18968:	2301      	movs	r3, #1
   1896a:	f04f 0200 	mov.w	r2, #0
   1896e:	f363 0202 	bfi	r2, r3, #0, #3
   18972:	493f      	ldr	r1, [pc, #252]	; (18a70 <isr+0x1b30>)
   18974:	4b3f      	ldr	r3, [pc, #252]	; (18a74 <isr+0x1b34>)
   18976:	1a5b      	subs	r3, r3, r1
   18978:	f360 02c5 	bfi	r2, r0, #3, #3
   1897c:	08db      	lsrs	r3, r3, #3
   1897e:	f363 128f 	bfi	r2, r3, #6, #10
   18982:	493e      	ldr	r1, [pc, #248]	; (18a7c <isr+0x1b3c>)
   18984:	f7fe bd88 	b.w	17498 <isr+0x558>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   18988:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1898c:	8c1b      	ldrh	r3, [r3, #32]
   1898e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   18990:	230a      	movs	r3, #10
   18992:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   18994:	f7f9 fd94 	bl	124c0 <packet_rx_enqueue>
   18998:	e77d      	b.n	18896 <isr+0x1956>
			_radio.conn_curr->appto_expire = 0;
   1899a:	2000      	movs	r0, #0
   1899c:	f8a2 0048 	strh.w	r0, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   189a0:	f8b2 0044 	ldrh.w	r0, [r2, #68]	; 0x44
   189a4:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   189a8:	2800      	cmp	r0, #0
   189aa:	d180      	bne.n	188ae <isr+0x196e>
   189ac:	428b      	cmp	r3, r1
   189ae:	d182      	bne.n	188b6 <isr+0x1976>
				_radio.conn_curr->llcp_type = LLCP_PING;
   189b0:	2307      	movs	r3, #7
   189b2:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   189b6:	1e4b      	subs	r3, r1, #1
   189b8:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   189bc:	e777      	b.n	188ae <isr+0x196e>
	lazy = 0;
   189be:	463b      	mov	r3, r7
   189c0:	e786      	b.n	188d0 <isr+0x1990>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   189c2:	3b04      	subs	r3, #4
   189c4:	2b01      	cmp	r3, #1
   189c6:	d915      	bls.n	189f4 <isr+0x1ab4>
   189c8:	4b28      	ldr	r3, [pc, #160]	; (18a6c <isr+0x1b2c>)
   189ca:	681b      	ldr	r3, [r3, #0]
   189cc:	0758      	lsls	r0, r3, #29
   189ce:	f43e aea5 	beq.w	1771c <isr+0x7dc>
   189d2:	2301      	movs	r3, #1
   189d4:	f04f 0200 	mov.w	r2, #0
   189d8:	f363 0202 	bfi	r2, r3, #0, #3
   189dc:	4924      	ldr	r1, [pc, #144]	; (18a70 <isr+0x1b30>)
   189de:	4b25      	ldr	r3, [pc, #148]	; (18a74 <isr+0x1b34>)
   189e0:	4827      	ldr	r0, [pc, #156]	; (18a80 <isr+0x1b40>)
   189e2:	1a5b      	subs	r3, r3, r1
   189e4:	f36f 02c5 	bfc	r2, #3, #3
   189e8:	08db      	lsrs	r3, r3, #3
   189ea:	f363 128f 	bfi	r2, r3, #6, #10
   189ee:	4925      	ldr	r1, [pc, #148]	; (18a84 <isr+0x1b44>)
   189f0:	f7fe be92 	b.w	17718 <isr+0x7d8>
		_radio.state = STATE_NONE;
   189f4:	2300      	movs	r3, #0
   189f6:	7563      	strb	r3, [r4, #21]
   189f8:	f7fe bb59 	b.w	170ae <isr+0x16e>
		LL_ASSERT(0);
   189fc:	4b1b      	ldr	r3, [pc, #108]	; (18a6c <isr+0x1b2c>)
   189fe:	681b      	ldr	r3, [r3, #0]
   18a00:	0759      	lsls	r1, r3, #29
   18a02:	f43e ae8b 	beq.w	1771c <isr+0x7dc>
   18a06:	2301      	movs	r3, #1
   18a08:	f04f 0200 	mov.w	r2, #0
   18a0c:	f363 0202 	bfi	r2, r3, #0, #3
   18a10:	4917      	ldr	r1, [pc, #92]	; (18a70 <isr+0x1b30>)
   18a12:	4b18      	ldr	r3, [pc, #96]	; (18a74 <isr+0x1b34>)
   18a14:	1a5b      	subs	r3, r3, r1
   18a16:	f36f 02c5 	bfc	r2, #3, #3
   18a1a:	08db      	lsrs	r3, r3, #3
   18a1c:	f363 128f 	bfi	r2, r3, #6, #10
   18a20:	4918      	ldr	r1, [pc, #96]	; (18a84 <isr+0x1b44>)
   18a22:	f7fe bba0 	b.w	17166 <isr+0x226>
	clock_control_off(_radio.hf_clock, NULL);
   18a26:	6820      	ldr	r0, [r4, #0]
   18a28:	6843      	ldr	r3, [r0, #4]
   18a2a:	4631      	mov	r1, r6
   18a2c:	685b      	ldr	r3, [r3, #4]
   18a2e:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   18a30:	2201      	movs	r2, #1
   18a32:	4611      	mov	r1, r2
   18a34:	4630      	mov	r0, r6
   18a36:	f7f7 fdf5 	bl	10624 <mayfly_enable>
   18a3a:	f7fe bb38 	b.w	170ae <isr+0x16e>
		LL_ASSERT(0);
   18a3e:	4b0b      	ldr	r3, [pc, #44]	; (18a6c <isr+0x1b2c>)
   18a40:	681b      	ldr	r3, [r3, #0]
   18a42:	075b      	lsls	r3, r3, #29
   18a44:	f43e ae6a 	beq.w	1771c <isr+0x7dc>
   18a48:	2301      	movs	r3, #1
   18a4a:	f04f 0200 	mov.w	r2, #0
   18a4e:	f363 0202 	bfi	r2, r3, #0, #3
   18a52:	4907      	ldr	r1, [pc, #28]	; (18a70 <isr+0x1b30>)
   18a54:	4b07      	ldr	r3, [pc, #28]	; (18a74 <isr+0x1b34>)
   18a56:	1a5b      	subs	r3, r3, r1
   18a58:	f36f 02c5 	bfc	r2, #3, #3
   18a5c:	08db      	lsrs	r3, r3, #3
   18a5e:	f363 128f 	bfi	r2, r3, #6, #10
   18a62:	4909      	ldr	r1, [pc, #36]	; (18a88 <isr+0x1b48>)
   18a64:	f7fe bb7f 	b.w	17166 <isr+0x226>
   18a68:	000128e9 	.word	0x000128e9
   18a6c:	2000d72c 	.word	0x2000d72c
   18a70:	0002cff8 	.word	0x0002cff8
   18a74:	0002d030 	.word	0x0002d030
   18a78:	00030c75 	.word	0x00030c75
   18a7c:	000305bc 	.word	0x000305bc
   18a80:	00030cdf 	.word	0x00030cdf
   18a84:	000305cb 	.word	0x000305cb
   18a88:	000305e1 	.word	0x000305e1

00018a8c <radio_init>:
{
   18a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   18a90:	4c3e      	ldr	r4, [pc, #248]	; (18b8c <radio_init+0x100>)
{
   18a92:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   18a94:	f89d c018 	ldrb.w	ip, [sp, #24]
   18a98:	f89d 801c 	ldrb.w	r8, [sp, #28]
   18a9c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
	_radio.hf_clock = hf_clock;
   18aa0:	6020      	str	r0, [r4, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   18aa2:	f44f 70aa 	mov.w	r0, #340	; 0x154
{
   18aa6:	f8bd e020 	ldrh.w	lr, [sp, #32]
	_radio.sca = sca;
   18aaa:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   18aae:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   18ab2:	fb00 7003 	mla	r0, r0, r3, r7
	mem_radio_end = mem_radio + mem_size;
   18ab6:	197e      	adds	r6, r7, r5
	rx_count_max += 3;
   18ab8:	f10c 0103 	add.w	r1, ip, #3
	tx_count_max += 1;
   18abc:	f108 0701 	add.w	r7, r8, #1
	_radio.packet_rx_count = (rx_count_max + 1);
   18ac0:	f10c 0c04 	add.w	ip, ip, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   18ac4:	f108 0802 	add.w	r8, r8, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   18ac8:	fa5f fc8c 	uxtb.w	ip, ip
	_radio.packet_tx_count = (tx_count_max + 1);
   18acc:	fa5f f888 	uxtb.w	r8, r8
	_radio.entropy = entropy;
   18ad0:	6062      	str	r2, [r4, #4]
	_radio.packet_tx_count = (tx_count_max + 1);
   18ad2:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
	    (offsetof(struct pdu_data, lldata) +
   18ad6:	f10e 0203 	add.w	r2, lr, #3
	_radio.packet_rx = (void *)mem_radio;
   18ada:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	rx_count_max += 3;
   18ade:	b2c9      	uxtb	r1, r1
	mem_radio +=
   18ae0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   18ae4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   18ae8:	2a2a      	cmp	r2, #42	; 0x2a
	_radio.link_rx_data_quota = rx_count_max;
   18aea:	f884 1154 	strb.w	r1, [r4, #340]	; 0x154
	_radio.pkt_tx = (void *)mem_radio;
   18aee:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
   18af2:	b289      	uxth	r1, r1
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   18af4:	4440      	add	r0, r8
   18af6:	4622      	mov	r2, r4
	_radio.packet_data_octets_max = packet_data_octets_max;
   18af8:	f8a4 e134 	strh.w	lr, [r4, #308]	; 0x134
	_radio.pkt_release = (void *)mem_radio;
   18afc:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
		_radio.packet_rx_data_pool_size =
   18b00:	bf88      	it	hi
   18b02:	f10e 0e0e 	addhi.w	lr, lr, #14
	_radio.connection_count = connection_count_max;
   18b06:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   18b0a:	f884 c140 	strb.w	ip, [r4, #320]	; 0x140
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   18b0e:	bf99      	ittee	ls
   18b10:	eb01 0441 	addls.w	r4, r1, r1, lsl #1
   18b14:	eb01 0184 	addls.w	r1, r1, r4, lsl #2
		_radio.packet_rx_data_pool_size =
   18b18:	f02e 0e03 	bichi.w	lr, lr, #3
   18b1c:	fb1e f101 	smulbbhi	r1, lr, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   18b20:	bf98      	it	ls
   18b22:	0089      	lslls	r1, r1, #2
		_radio.packet_rx_data_pool_size =
   18b24:	f8a2 1136 	strh.w	r1, [r2, #310]	; 0x136
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   18b28:	f8b2 4136 	ldrh.w	r4, [r2, #310]	; 0x136
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   18b2c:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   18b2e:	2134      	movs	r1, #52	; 0x34
   18b30:	f8a2 1138 	strh.w	r1, [r2, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   18b34:	f8c2 012c 	str.w	r0, [r2, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   18b38:	fbb4 f1f1 	udiv	r1, r4, r1
	mem_radio += _radio.packet_rx_data_pool_size;
   18b3c:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   18b3e:	eb0c 0403 	add.w	r4, ip, r3
	_radio.link_rx_pool = mem_radio;
   18b42:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   18b46:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   18b4a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   18b4e:	f8c2 0158 	str.w	r0, [r2, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   18b52:	340a      	adds	r4, #10
   18b54:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   18b58:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   18b5a:	b2a4      	uxth	r4, r4
	tx_count_max += 1;
   18b5c:	b2ff      	uxtb	r7, r7
	_radio.packet_tx_data_size =
   18b5e:	f8a2 4168 	strh.w	r4, [r2, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   18b62:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   18b66:	1ba4      	subs	r4, r4, r6
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   18b68:	f882 113a 	strb.w	r1, [r2, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   18b6c:	f8c2 0160 	str.w	r0, [r2, #352]	; 0x160
	if (retcode) {
   18b70:	d003      	beq.n	18b7a <radio_init+0xee>
		return (retcode + mem_size);
   18b72:	442c      	add	r4, r5
}
   18b74:	4620      	mov	r0, r4
   18b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   18b7a:	2301      	movs	r3, #1
   18b7c:	f882 3182 	strb.w	r3, [r2, #386]	; 0x182
	common_init();
   18b80:	f7f8 fe02 	bl	11788 <common_init>
	radio_setup();
   18b84:	f004 fea8 	bl	1d8d8 <radio_setup>
	return retcode;
   18b88:	e7f4      	b.n	18b74 <radio_init+0xe8>
   18b8a:	bf00      	nop
   18b8c:	2000110c 	.word	0x2000110c

00018b90 <ll_reset>:
{
   18b90:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   18b92:	2103      	movs	r1, #3
   18b94:	2005      	movs	r0, #5
   18b96:	f7f8 fee9 	bl	1196c <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   18b9a:	2104      	movs	r1, #4
   18b9c:	2006      	movs	r0, #6
   18b9e:	f7f8 fee5 	bl	1196c <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   18ba2:	4c21      	ldr	r4, [pc, #132]	; (18c28 <ll_reset+0x98>)
   18ba4:	2500      	movs	r5, #0
   18ba6:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   18baa:	b2ab      	uxth	r3, r5
   18bac:	429a      	cmp	r2, r3
   18bae:	f105 0501 	add.w	r5, r5, #1
   18bb2:	d832      	bhi.n	18c1a <ll_reset+0x8a>
	_radio.advertiser.is_enabled = 0;
   18bb4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18bb8:	f36f 13c7 	bfc	r3, #7, #1
   18bbc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   18bc0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   18bc4:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   18bc6:	f360 0300 	bfi	r3, r0, #0, #1
   18bca:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   18bce:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   18bd0:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   18bd4:	fbb3 f3f2 	udiv	r3, r3, r2
   18bd8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   18bdc:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   18be0:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   18be4:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   18be6:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   18bea:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   18bee:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   18bf2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   18bf6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   18bfa:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   18bfe:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   18c02:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   18c06:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
	_radio.fc_ack = _radio.fc_req;
   18c0a:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   18c0e:	f004 fc91 	bl	1d534 <ll_filter_reset>
}
   18c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   18c16:	f7f8 bdb7 	b.w	11788 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   18c1a:	1da8      	adds	r0, r5, #6
   18c1c:	21ff      	movs	r1, #255	; 0xff
   18c1e:	b2c0      	uxtb	r0, r0
   18c20:	f7f8 fea4 	bl	1196c <role_disable>
   18c24:	e7bf      	b.n	18ba6 <ll_reset+0x16>
   18c26:	bf00      	nop
   18c28:	2000110c 	.word	0x2000110c

00018c2c <radio_adv_data_get>:
}
   18c2c:	4800      	ldr	r0, [pc, #0]	; (18c30 <radio_adv_data_get+0x4>)
   18c2e:	4770      	bx	lr
   18c30:	20001137 	.word	0x20001137

00018c34 <radio_scan_data_get>:
}
   18c34:	4800      	ldr	r0, [pc, #0]	; (18c38 <radio_scan_data_get+0x4>)
   18c36:	4770      	bx	lr
   18c38:	20001187 	.word	0x20001187

00018c3c <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   18c3c:	4b02      	ldr	r3, [pc, #8]	; (18c48 <ll_adv_is_enabled+0xc>)
   18c3e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   18c42:	09c0      	lsrs	r0, r0, #7
   18c44:	4770      	bx	lr
   18c46:	bf00      	nop
   18c48:	2000110c 	.word	0x2000110c

00018c4c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   18c4c:	4b04      	ldr	r3, [pc, #16]	; (18c60 <radio_adv_filter_pol_get+0x14>)
   18c4e:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   18c52:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   18c54:	bfba      	itte	lt
   18c56:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   18c5a:	0980      	lsrlt	r0, r0, #6
	return 0;
   18c5c:	2000      	movge	r0, #0
}
   18c5e:	4770      	bx	lr
   18c60:	2000110c 	.word	0x2000110c

00018c64 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   18c64:	4a09      	ldr	r2, [pc, #36]	; (18c8c <ll_scan_is_enabled+0x28>)
   18c66:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   18c6a:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   18c6e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   18c72:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   18c76:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   18c78:	f003 0301 	and.w	r3, r3, #1
   18c7c:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   18c80:	bf14      	ite	ne
   18c82:	2004      	movne	r0, #4
   18c84:	2000      	moveq	r0, #0
}
   18c86:	4318      	orrs	r0, r3
   18c88:	4770      	bx	lr
   18c8a:	bf00      	nop
   18c8c:	2000110c 	.word	0x2000110c

00018c90 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   18c90:	4b05      	ldr	r3, [pc, #20]	; (18ca8 <radio_scan_filter_pol_get+0x18>)
   18c92:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   18c96:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   18c9a:	bf1c      	itt	ne
   18c9c:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   18ca0:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   18ca4:	4770      	bx	lr
   18ca6:	bf00      	nop
   18ca8:	2000110c 	.word	0x2000110c
   18cac:	00000000 	.word	0x00000000

00018cb0 <radio_connect_enable>:
{
   18cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   18cb4:	f8df 83a8 	ldr.w	r8, [pc, #936]	; 19060 <radio_connect_enable+0x3b0>
{
   18cb8:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
   18cba:	f8d8 5100 	ldr.w	r5, [r8, #256]	; 0x100
{
   18cbe:	9301      	str	r3, [sp, #4]
   18cc0:	4683      	mov	fp, r0
   18cc2:	468a      	mov	sl, r1
   18cc4:	4691      	mov	r9, r2
   18cc6:	4646      	mov	r6, r8
	if (_radio.scanner.conn) {
   18cc8:	2d00      	cmp	r5, #0
   18cca:	f040 81ae 	bne.w	1902a <radio_connect_enable+0x37a>
	link = mem_acquire(&_radio.link_rx_free);
   18cce:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   18cd2:	f7f7 fc07 	bl	104e4 <mem_acquire>
	if (!link) {
   18cd6:	4607      	mov	r7, r0
   18cd8:	b150      	cbz	r0, 18cf0 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   18cda:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   18cde:	f7f7 fc01 	bl	104e4 <mem_acquire>
	if (!conn) {
   18ce2:	4604      	mov	r4, r0
   18ce4:	b930      	cbnz	r0, 18cf4 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   18ce6:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   18cea:	4638      	mov	r0, r7
   18cec:	f7f7 fc13 	bl	10516 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18cf0:	2007      	movs	r0, #7
   18cf2:	e185      	b.n	19000 <radio_connect_enable+0x350>
	_radio.scanner.adv_addr_type = adv_addr_type;
   18cf4:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   18cf8:	f36b 1386 	bfi	r3, fp, #6, #1
   18cfc:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   18d00:	2206      	movs	r2, #6
   18d02:	4651      	mov	r1, sl
   18d04:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   18d08:	f7ed f8be 	bl	5e88 <memcpy>
	_radio.scanner.conn_latency = latency;
   18d0c:	9b01      	ldr	r3, [sp, #4]
   18d0e:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   18d12:	4629      	mov	r1, r5
	_radio.scanner.conn_timeout = timeout;
   18d14:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
   18d18:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   18d1c:	4628      	mov	r0, r5
	_radio.scanner.conn_timeout = timeout;
   18d1e:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   18d22:	f004 fe95 	bl	1da50 <radio_tx_ready_delay_get>
   18d26:	49c4      	ldr	r1, [pc, #784]	; (19038 <radio_connect_enable+0x388>)
   18d28:	f200 4052 	addw	r0, r0, #1106	; 0x452
   18d2c:	a3c0      	add	r3, pc, #768	; (adr r3, 19030 <radio_connect_enable+0x380>)
   18d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18d32:	fba0 0101 	umull	r0, r1, r0, r1
   18d36:	f7e7 fabd 	bl	2b4 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   18d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   18d3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18d42:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   18d46:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   18d48:	f8df 8318 	ldr.w	r8, [pc, #792]	; 19064 <radio_connect_enable+0x3b4>
	conn->llcp_features = RADIO_BLE_FEAT;
   18d4c:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18d50:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   18d54:	f04f 0903 	mov.w	r9, #3
	consecutive_cnt = 1;
   18d58:	2501      	movs	r5, #1
	bt_rand(&access_addr, sizeof(u32_t));
   18d5a:	2104      	movs	r1, #4
   18d5c:	a803      	add	r0, sp, #12
   18d5e:	f003 f931 	bl	1bfc4 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   18d62:	9903      	ldr	r1, [sp, #12]
   18d64:	f04f 0a00 	mov.w	sl, #0
   18d68:	0fca      	lsrs	r2, r1, #31
	bit_idx = 31;
   18d6a:	231f      	movs	r3, #31
	transitions = 0;
   18d6c:	4650      	mov	r0, sl
	consecutive_cnt = 1;
   18d6e:	f04f 0b01 	mov.w	fp, #1
	while (bit_idx--) {
   18d72:	3b01      	subs	r3, #1
   18d74:	b2db      	uxtb	r3, r3
   18d76:	2bff      	cmp	r3, #255	; 0xff
   18d78:	d124      	bne.n	18dc4 <radio_connect_enable+0x114>
   18d7a:	f1ba 0f00 	cmp.w	sl, #0
   18d7e:	d064      	beq.n	18e4a <radio_connect_enable+0x19a>
   18d80:	9103      	str	r1, [sp, #12]
   18d82:	e062      	b.n	18e4a <radio_connect_enable+0x19a>
   18d84:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	LL_ASSERT(retry);
   18d88:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   18d8c:	d1e5      	bne.n	18d5a <radio_connect_enable+0xaa>
   18d8e:	4bab      	ldr	r3, [pc, #684]	; (1903c <radio_connect_enable+0x38c>)
   18d90:	681b      	ldr	r3, [r3, #0]
   18d92:	075b      	lsls	r3, r3, #29
   18d94:	d010      	beq.n	18db8 <radio_connect_enable+0x108>
   18d96:	2301      	movs	r3, #1
   18d98:	f04f 0200 	mov.w	r2, #0
   18d9c:	f363 0202 	bfi	r2, r3, #0, #3
   18da0:	49a7      	ldr	r1, [pc, #668]	; (19040 <radio_connect_enable+0x390>)
   18da2:	4ba8      	ldr	r3, [pc, #672]	; (19044 <radio_connect_enable+0x394>)
   18da4:	48a8      	ldr	r0, [pc, #672]	; (19048 <radio_connect_enable+0x398>)
   18da6:	1a5b      	subs	r3, r3, r1
   18da8:	f369 02c5 	bfi	r2, r9, #3, #3
   18dac:	08db      	lsrs	r3, r3, #3
   18dae:	f363 128f 	bfi	r2, r3, #6, #10
   18db2:	49a6      	ldr	r1, [pc, #664]	; (1904c <radio_connect_enable+0x39c>)
   18db4:	f7e8 ffd0 	bl	1d58 <log_1>
   18db8:	4040      	eors	r0, r0
   18dba:	f380 8811 	msr	BASEPRI, r0
   18dbe:	f04f 0004 	mov.w	r0, #4
   18dc2:	df02      	svc	2
		bit = (access_addr >> bit_idx) & 0x01;
   18dc4:	fa21 fe03 	lsr.w	lr, r1, r3
   18dc8:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   18dcc:	4596      	cmp	lr, r2
   18dce:	d124      	bne.n	18e1a <radio_connect_enable+0x16a>
			consecutive_cnt++;
   18dd0:	f10b 0c01 	add.w	ip, fp, #1
   18dd4:	fa5f fc8c 	uxtb.w	ip, ip
		if ((consecutive_cnt > 6) ||
   18dd8:	f1bc 0f06 	cmp.w	ip, #6
   18ddc:	f200 8113 	bhi.w	19006 <radio_connect_enable+0x356>
   18de0:	f000 811e 	beq.w	19020 <radio_connect_enable+0x370>
		    ((consecutive_cnt < 6) &&
   18de4:	2b1c      	cmp	r3, #28
		     (((bit_idx < 29) && (transitions < 1)) ||
   18de6:	4602      	mov	r2, r0
		    ((consecutive_cnt < 6) &&
   18de8:	d81d      	bhi.n	18e26 <radio_connect_enable+0x176>
		     (((bit_idx < 29) && (transitions < 1)) ||
   18dea:	b118      	cbz	r0, 18df4 <radio_connect_enable+0x144>
   18dec:	2b1c      	cmp	r3, #28
   18dee:	d01a      	beq.n	18e26 <radio_connect_enable+0x176>
		      ((bit_idx < 28) && (transitions < 2))))) {
   18df0:	2a01      	cmp	r2, #1
   18df2:	d118      	bne.n	18e26 <radio_connect_enable+0x176>
   18df4:	fa05 fc03 	lsl.w	ip, r5, r3
			if (consecutive_bit) {
   18df8:	f1be 0f00 	cmp.w	lr, #0
   18dfc:	f000 8105 	beq.w	1900a <radio_connect_enable+0x35a>
				access_addr &= ~BIT(bit_idx);
   18e00:	ea21 010c 	bic.w	r1, r1, ip
				consecutive_bit = 0;
   18e04:	f04f 0e00 	mov.w	lr, #0
			if (transitions != transitions_prev) {
   18e08:	4290      	cmp	r0, r2
   18e0a:	f040 8106 	bne.w	1901a <radio_connect_enable+0x36a>
				transitions++;
   18e0e:	3201      	adds	r2, #1
   18e10:	f04f 0a01 	mov.w	sl, #1
   18e14:	b2d2      	uxtb	r2, r2
				consecutive_cnt = 1;
   18e16:	46d4      	mov	ip, sl
   18e18:	e005      	b.n	18e26 <radio_connect_enable+0x176>
			transitions++;
   18e1a:	1c42      	adds	r2, r0, #1
		    ((consecutive_cnt < 6) &&
   18e1c:	2b1c      	cmp	r3, #28
			transitions++;
   18e1e:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   18e20:	f04f 0c01 	mov.w	ip, #1
		    ((consecutive_cnt < 6) &&
   18e24:	d9e2      	bls.n	18dec <radio_connect_enable+0x13c>
		if ((transitions > 24) ||
   18e26:	2a19      	cmp	r2, #25
   18e28:	f040 80fd 	bne.w	19026 <radio_connect_enable+0x376>
   18e2c:	f1ba 0f00 	cmp.w	sl, #0
   18e30:	d000      	beq.n	18e34 <radio_connect_enable+0x184>
   18e32:	9103      	str	r1, [sp, #12]
   18e34:	3301      	adds	r3, #1
   18e36:	fa05 f303 	lsl.w	r3, r5, r3
   18e3a:	9a03      	ldr	r2, [sp, #12]
			if (consecutive_bit) {
   18e3c:	f1be 0f00 	cmp.w	lr, #0
   18e40:	f000 80e8 	beq.w	19014 <radio_connect_enable+0x364>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   18e44:	425b      	negs	r3, r3
   18e46:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   18e48:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   18e4a:	9b03      	ldr	r3, [sp, #12]
   18e4c:	a804      	add	r0, sp, #16
   18e4e:	ea83 0308 	eor.w	r3, r3, r8
   18e52:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   18e56:	2104      	movs	r1, #4
   18e58:	f7f7 fcec 	bl	10834 <util_ones_count_get>
   18e5c:	2801      	cmp	r0, #1
   18e5e:	d991      	bls.n	18d84 <radio_connect_enable+0xd4>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   18e60:	9b03      	ldr	r3, [sp, #12]
   18e62:	b29a      	uxth	r2, r3
   18e64:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   18e68:	d103      	bne.n	18e72 <radio_connect_enable+0x1c2>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   18e6a:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   18e6c:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   18e70:	d088      	beq.n	18d84 <radio_connect_enable+0xd4>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   18e72:	2204      	movs	r2, #4
   18e74:	a903      	add	r1, sp, #12
   18e76:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   18e7a:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   18e7c:	f7ed f804 	bl	5e88 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   18e80:	2103      	movs	r1, #3
   18e82:	f104 0014 	add.w	r0, r4, #20
   18e86:	f003 f89d 	bl	1bfc4 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   18e8a:	2205      	movs	r2, #5
   18e8c:	4970      	ldr	r1, [pc, #448]	; (19050 <radio_connect_enable+0x3a0>)
   18e8e:	f104 0017 	add.w	r0, r4, #23
   18e92:	f7ec fff9 	bl	5e88 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   18e96:	f896 211f 	ldrb.w	r2, [r6, #287]	; 0x11f
   18e9a:	7f63      	ldrb	r3, [r4, #29]
	conn->phy_pref_tx = _radio.default_phy_tx;
   18e9c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->data_chan_count = _radio.data_chan_count;
   18ea0:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   18ea4:	f36f 1386 	bfc	r3, #6, #1
   18ea8:	7763      	strb	r3, [r4, #29]
	conn->event_counter = 0;
   18eaa:	2500      	movs	r5, #0
	conn->conn_interval = _radio.scanner.conn_interval;
   18eac:	f8b6 20f4 	ldrh.w	r2, [r6, #244]	; 0xf4
	conn->latency_prepare = 0;
   18eb0:	62a5      	str	r5, [r4, #40]	; 0x28
	conn->default_tx_octets = _radio.default_tx_octets;
   18eb2:	f8b6 3122 	ldrh.w	r3, [r6, #290]	; 0x122
	conn->latency = _radio.scanner.conn_latency;
   18eb6:	f8b6 00f6 	ldrh.w	r0, [r6, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   18eba:	85a3      	strh	r3, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18ebc:	231b      	movs	r3, #27
   18ebe:	85e3      	strh	r3, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18ec0:	8623      	strh	r3, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   18ec2:	f8b6 3124 	ldrh.w	r3, [r6, #292]	; 0x124
   18ec6:	8663      	strh	r3, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   18ec8:	4b62      	ldr	r3, [pc, #392]	; (19054 <radio_connect_enable+0x3a4>)
   18eca:	6363      	str	r3, [r4, #52]	; 0x34
	conn->phy_pref_tx = _radio.default_phy_tx;
   18ecc:	f8b6 3126 	ldrh.w	r3, [r6, #294]	; 0x126
	conn->conn_interval = _radio.scanner.conn_interval;
   18ed0:	84a2      	strh	r2, [r4, #36]	; 0x24
	conn->phy_pref_tx = _radio.default_phy_tx;
   18ed2:	f363 0102 	bfi	r1, r3, #0, #3
	conn->phy_tx = BIT(0);
   18ed6:	2301      	movs	r3, #1
   18ed8:	f363 01c5 	bfi	r1, r3, #3, #3
	conn->phy_flags = 0;
   18edc:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   18ee0:	f365 11c7 	bfi	r1, r5, #7, #1
   18ee4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   18ee8:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->latency = _radio.scanner.conn_latency;
   18eec:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->phy_tx_time = BIT(0);
   18eee:	f363 0102 	bfi	r1, r3, #0, #3
   18ef2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   18ef6:	f8b6 e128 	ldrh.w	lr, [r6, #296]	; 0x128
	conn->event_counter = 0;
   18efa:	8465      	strh	r5, [r4, #34]	; 0x22
	conn->phy_pref_rx = _radio.default_phy_rx;
   18efc:	f36e 01c5 	bfi	r1, lr, #3, #3
   18f00:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   18f04:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
   18f08:	f363 0102 	bfi	r1, r3, #0, #3
	conn->role = 0;
   18f0c:	7f63      	ldrb	r3, [r4, #29]
	conn->phy_rx = BIT(0);
   18f0e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->common.fex_valid = 0;
   18f12:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->role = 0;
   18f16:	f365 13c7 	bfi	r3, r5, #7, #1
   18f1a:	7763      	strb	r3, [r4, #29]
	conn->master.terminate_ack = 0;
   18f1c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
	conn_interval_us =
   18f20:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18f24:	435a      	muls	r2, r3
	conn->data_chan_hop = 6;
   18f26:	f04f 0c06 	mov.w	ip, #6
	conn->master.terminate_ack = 0;
   18f2a:	f365 0100 	bfi	r1, r5, #0, #1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   18f2e:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
	conn->data_chan_hop = 6;
   18f32:	f8a4 c01e 	strh.w	ip, [r4, #30]
	conn->connect_expire = 6;
   18f36:	f8a4 c03c 	strh.w	ip, [r4, #60]	; 0x3c
	conn->master.terminate_ack = 0;
   18f3a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   18f3e:	f242 7c10 	movw	ip, #10000	; 0x2710
   18f42:	1e51      	subs	r1, r2, #1
   18f44:	fb0c 1303 	mla	r3, ip, r3, r1
   18f48:	fbb3 f3f2 	udiv	r3, r3, r2
   18f4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   18f4e:	4b42      	ldr	r3, [pc, #264]	; (19058 <radio_connect_enable+0x3a8>)
	conn->supervision_expire = 0;
   18f50:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   18f54:	4413      	add	r3, r2
   18f56:	fbb3 f3f2 	udiv	r3, r3, r2
   18f5a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   18f5e:	4b3f      	ldr	r3, [pc, #252]	; (1905c <radio_connect_enable+0x3ac>)
	conn->procedure_expire = 0;
   18f60:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18f64:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   18f66:	4413      	add	r3, r2
   18f68:	fbb3 f3f2 	udiv	r3, r3, r2
   18f6c:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18f6e:	428a      	cmp	r2, r1
   18f70:	4613      	mov	r3, r2
   18f72:	bfc4      	itt	gt
   18f74:	f5c0 437f 	rsbgt	r3, r0, #65280	; 0xff00
   18f78:	33fa      	addgt	r3, #250	; 0xfa
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   18f7a:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18f7e:	bfc8      	it	gt
   18f80:	18d2      	addgt	r2, r2, r3
	conn->llcp_version.tx = 0;
   18f82:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18f86:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->apto_expire = 0;
   18f8a:	f04f 0500 	mov.w	r5, #0
	conn->llcp_version.rx = 0;
   18f8e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   18f92:	f365 0341 	bfi	r3, r5, #1, #1
   18f96:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   18f9a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   18f9e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   18fa2:	f365 1304 	bfi	r3, r5, #4, #1
   18fa6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->llcp_length.pause_tx = 0;
   18faa:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	conn->appto_expire = 0;
   18fae:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18fb2:	bfc8      	it	gt
   18fb4:	b292      	uxthgt	r2, r2
	conn->llcp_length.pause_tx = 0;
   18fb6:	f365 0382 	bfi	r3, r5, #2, #1
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18fba:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->llcp_req = 0;
   18fbe:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
	conn->llcp_terminate.req = 0;
   18fc2:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
	conn->llcp_terminate.reason_peer = 0;
   18fc6:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
	conn->llcp_conn_param.req = 0;
   18fca:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
	conn->llcp_length.req = 0;
   18fce:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
	conn->llcp_length.pause_tx = 0;
   18fd2:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	conn->llcp_phy.req = 0;
   18fd6:	f8a4 50f4 	strh.w	r5, [r4, #244]	; 0xf4
	conn->sn = 0;
   18fda:	f884 50f8 	strb.w	r5, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   18fde:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
   18fe2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl = NULL;
   18fe6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
	conn->pkt_tx_ctrl_last = NULL;
   18fea:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	conn->pkt_tx_data = NULL;
   18fee:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	conn->pkt_tx_last = NULL;
   18ff2:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
	k32src_wait();
   18ff6:	f7fb f811 	bl	1401c <k32src_wait>
	_radio.scanner.conn = conn;
   18ffa:	f8c6 4100 	str.w	r4, [r6, #256]	; 0x100
	return 0;
   18ffe:	4628      	mov	r0, r5
}
   19000:	b005      	add	sp, #20
   19002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((consecutive_cnt > 6) ||
   19006:	4602      	mov	r2, r0
   19008:	e6f4      	b.n	18df4 <radio_connect_enable+0x144>
				access_addr |= BIT(bit_idx);
   1900a:	ea41 010c 	orr.w	r1, r1, ip
				consecutive_bit = 1;
   1900e:	f04f 0e01 	mov.w	lr, #1
   19012:	e6f9      	b.n	18e08 <radio_connect_enable+0x158>
				access_addr |= (BIT(bit_idx + 1) - 1);
   19014:	3b01      	subs	r3, #1
   19016:	4313      	orrs	r3, r2
   19018:	e716      	b.n	18e48 <radio_connect_enable+0x198>
			if (transitions != transitions_prev) {
   1901a:	46dc      	mov	ip, fp
   1901c:	f04f 0a01 	mov.w	sl, #1
		if ((transitions > 24) ||
   19020:	4672      	mov	r2, lr
   19022:	46e3      	mov	fp, ip
   19024:	e6a5      	b.n	18d72 <radio_connect_enable+0xc2>
   19026:	4610      	mov	r0, r2
   19028:	e7fa      	b.n	19020 <radio_connect_enable+0x370>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1902a:	200c      	movs	r0, #12
   1902c:	e7e8      	b.n	19000 <radio_connect_enable+0x350>
   1902e:	bf00      	nop
   19030:	1afd498d 	.word	0x1afd498d
   19034:	00000007 	.word	0x00000007
   19038:	3b9aca00 	.word	0x3b9aca00
   1903c:	2000d72c 	.word	0x2000d72c
   19040:	0002cff8 	.word	0x0002cff8
   19044:	0002d030 	.word	0x0002d030
   19048:	00031113 	.word	0x00031113
   1904c:	00030777 	.word	0x00030777
   19050:	20001226 	.word	0x20001226
   19054:	01480148 	.word	0x01480148
   19058:	026259ff 	.word	0x026259ff
   1905c:	01c9c37f 	.word	0x01c9c37f
   19060:	2000110c 	.word	0x2000110c
   19064:	8e89bed6 	.word	0x8e89bed6

00019068 <ll_conn_update>:
{
   19068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1906c:	460c      	mov	r4, r1
   1906e:	4690      	mov	r8, r2
   19070:	461d      	mov	r5, r3
   19072:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   19076:	f8bd 601c 	ldrh.w	r6, [sp, #28]
	conn = connection_get(handle);
   1907a:	f7f8 fc61 	bl	11940 <connection_get>
	if (!conn) {
   1907e:	2800      	cmp	r0, #0
   19080:	d068      	beq.n	19154 <ll_conn_update+0xec>
	if (!cmd) {
   19082:	bb94      	cbnz	r4, 190ea <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   19084:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   19088:	06d9      	lsls	r1, r3, #27
   1908a:	d407      	bmi.n	1909c <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   1908c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   19090:	069a      	lsls	r2, r3, #26
   19092:	d529      	bpl.n	190e8 <ll_conn_update+0x80>
		     (conn->llcp_features &
   19094:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   19098:	079b      	lsls	r3, r3, #30
   1909a:	d425      	bmi.n	190e8 <ll_conn_update+0x80>
		} else if (conn->role) {
   1909c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   190a0:	2b00      	cmp	r3, #0
   190a2:	db55      	blt.n	19150 <ll_conn_update+0xe8>
		if (conn->llcp_req != conn->llcp_ack) {
   190a4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   190a8:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   190ac:	429a      	cmp	r2, r3
   190ae:	d151      	bne.n	19154 <ll_conn_update+0xec>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   190b0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   190b4:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   190b8:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   190ba:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   190bc:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   190c0:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   190c4:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   190c6:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   190ca:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   190ce:	f8a0 707c 	strh.w	r7, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   190d2:	f8a0 607e 	strh.w	r6, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   190d6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   190da:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   190de:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   190e2:	2000      	movs	r0, #0
}
   190e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   190e8:	2401      	movs	r4, #1
		cmd--;
   190ea:	3c01      	subs	r4, #1
		if (cmd) {
   190ec:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   190f0:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   190f4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   190f8:	d011      	beq.n	1911e <ll_conn_update+0xb6>
			if ((conn->llcp_conn_param.req ==
   190fa:	4299      	cmp	r1, r3
   190fc:	d02a      	beq.n	19154 <ll_conn_update+0xec>
			    (conn->llcp_conn_param.state !=
   190fe:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   19102:	f003 0207 	and.w	r2, r3, #7
   19106:	2a03      	cmp	r2, #3
   19108:	d124      	bne.n	19154 <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   1910a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1910e:	b2db      	uxtb	r3, r3
   19110:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   19114:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   19118:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   1911c:	e7e1      	b.n	190e2 <ll_conn_update+0x7a>
			if (conn->llcp_conn_param.req !=
   1911e:	4299      	cmp	r1, r3
   19120:	d118      	bne.n	19154 <ll_conn_update+0xec>
			conn->llcp_conn_param.state = cmd;
   19122:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   19126:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1912a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1912e:	b2db      	uxtb	r3, r3
   19130:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   19134:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval_min = interval;
   19136:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.interval_max = interval;
   1913a:	f8a0 50c6 	strh.w	r5, [r0, #198]	; 0xc6
			conn->llcp_conn_param.latency = latency;
   1913e:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.timeout = timeout;
   19142:	f8a0 60ca 	strh.w	r6, [r0, #202]	; 0xca
			conn->llcp_conn_param.cmd = 1;
   19146:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   1914a:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   1914e:	e7c8      	b.n	190e2 <ll_conn_update+0x7a>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   19150:	201a      	movs	r0, #26
   19152:	e7c7      	b.n	190e4 <ll_conn_update+0x7c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19154:	200c      	movs	r0, #12
   19156:	e7c5      	b.n	190e4 <ll_conn_update+0x7c>

00019158 <ll_chm_update>:
{
   19158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   1915c:	4c1e      	ldr	r4, [pc, #120]	; (191d8 <ll_chm_update+0x80>)
   1915e:	4601      	mov	r1, r0
   19160:	2205      	movs	r2, #5
{
   19162:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   19164:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   19168:	f7ec fe8e 	bl	5e88 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   1916c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   19170:	2105      	movs	r1, #5
   19172:	f7f7 fb5f 	bl	10834 <util_ones_count_get>
	_radio.data_chan_count =
   19176:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   1917a:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   1917e:	3c01      	subs	r4, #1
   19180:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   19182:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   19184:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   19188:	2cff      	cmp	r4, #255	; 0xff
   1918a:	d102      	bne.n	19192 <ll_chm_update+0x3a>
	return 0;
   1918c:	2000      	movs	r0, #0
}
   1918e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   19192:	4620      	mov	r0, r4
   19194:	f7f8 fbd4 	bl	11940 <connection_get>
		if (!conn || conn->role) {
   19198:	4606      	mov	r6, r0
   1919a:	b1b8      	cbz	r0, 191cc <ll_chm_update+0x74>
   1919c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   191a0:	2b00      	cmp	r3, #0
   191a2:	db13      	blt.n	191cc <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   191a4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   191a8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   191ac:	429a      	cmp	r2, r3
   191ae:	d110      	bne.n	191d2 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   191b0:	2205      	movs	r2, #5
   191b2:	4629      	mov	r1, r5
   191b4:	3079      	adds	r0, #121	; 0x79
   191b6:	f7ec fe67 	bl	5e88 <memcpy>
		conn->llcp_req++;
   191ba:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   191be:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   191c2:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   191c4:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   191c8:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   191cc:	3c01      	subs	r4, #1
   191ce:	b2e4      	uxtb	r4, r4
   191d0:	e7da      	b.n	19188 <ll_chm_update+0x30>
			return 1;
   191d2:	2001      	movs	r0, #1
   191d4:	e7db      	b.n	1918e <ll_chm_update+0x36>
   191d6:	bf00      	nop
   191d8:	2000110c 	.word	0x2000110c

000191dc <ll_chm_get>:
{
   191dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191de:	460d      	mov	r5, r1
	conn = connection_get(handle);
   191e0:	f7f8 fbae 	bl	11940 <connection_get>
	if (!conn) {
   191e4:	4604      	mov	r4, r0
   191e6:	b160      	cbz	r0, 19202 <ll_chm_get+0x26>
		conn->chm_update = 0;
   191e8:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   191ea:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   191ee:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   191f0:	2205      	movs	r2, #5
   191f2:	4631      	mov	r1, r6
   191f4:	4628      	mov	r0, r5
   191f6:	f7ec fe47 	bl	5e88 <memcpy>
	} while (conn->chm_update);
   191fa:	7f20      	ldrb	r0, [r4, #28]
   191fc:	2800      	cmp	r0, #0
   191fe:	d1f6      	bne.n	191ee <ll_chm_get+0x12>
}
   19200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   19202:	2001      	movs	r0, #1
   19204:	e7fc      	b.n	19200 <ll_chm_get+0x24>

00019206 <ll_start_enc_req_send>:
{
   19206:	b570      	push	{r4, r5, r6, lr}
   19208:	460d      	mov	r5, r1
   1920a:	4616      	mov	r6, r2
	conn = connection_get(handle);
   1920c:	f7f8 fb98 	bl	11940 <connection_get>
	if (!conn) {
   19210:	4604      	mov	r4, r0
   19212:	b908      	cbnz	r0, 19218 <ll_start_enc_req_send+0x12>
		return 1;
   19214:	2001      	movs	r0, #1
}
   19216:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
   19218:	b315      	cbz	r5, 19260 <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   1921a:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
   1921e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   19222:	d110      	bne.n	19246 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   19224:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   19228:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1922c:	4293      	cmp	r3, r2
   1922e:	d1f1      	bne.n	19214 <ll_start_enc_req_send+0xe>
			conn->llcp_type = LLCP_ENCRYPTION;
   19230:	2203      	movs	r2, #3
			conn->llcp_req++;
   19232:	3301      	adds	r3, #1
			conn->llcp.encryption.error_code = error_code;
   19234:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
   19238:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   1923c:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
			conn->llcp_req++;
   19240:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   19244:	e7e7      	b.n	19216 <ll_start_enc_req_send+0x10>
			if (conn->llcp_terminate.ack !=
   19246:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   1924a:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1924e:	4293      	cmp	r3, r2
   19250:	d1e0      	bne.n	19214 <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
   19252:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   19254:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
   19258:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
   1925c:	2000      	movs	r0, #0
   1925e:	e7da      	b.n	19216 <ll_start_enc_req_send+0x10>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   19260:	2210      	movs	r2, #16
   19262:	4631      	mov	r1, r6
   19264:	3084      	adds	r0, #132	; 0x84
   19266:	f7ec fe0f 	bl	5e88 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   1926a:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1926e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   19272:	4293      	cmp	r3, r2
   19274:	d1ce      	bne.n	19214 <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
   19276:	2203      	movs	r2, #3
		conn->llcp_req++;
   19278:	3301      	adds	r3, #1
		conn->llcp.encryption.initiate = 0;
   1927a:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   1927e:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   19282:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	return 0;
   19286:	4628      	mov	r0, r5
   19288:	e7c5      	b.n	19216 <ll_start_enc_req_send+0x10>

0001928a <ll_feature_req_send>:
{
   1928a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1928c:	f7f8 fb58 	bl	11940 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   19290:	b168      	cbz	r0, 192ae <ll_feature_req_send+0x24>
   19292:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   19296:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1929a:	4293      	cmp	r3, r2
   1929c:	d107      	bne.n	192ae <ll_feature_req_send+0x24>
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1929e:	2204      	movs	r2, #4
	conn->llcp_req++;
   192a0:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   192a2:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	conn->llcp_req++;
   192a6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   192aa:	2000      	movs	r0, #0
}
   192ac:	bd08      	pop	{r3, pc}
		return 1;
   192ae:	2001      	movs	r0, #1
   192b0:	e7fc      	b.n	192ac <ll_feature_req_send+0x22>

000192b2 <ll_version_ind_send>:
{
   192b2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   192b4:	f7f8 fb44 	bl	11940 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   192b8:	b168      	cbz	r0, 192d6 <ll_version_ind_send+0x24>
   192ba:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   192be:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   192c2:	4293      	cmp	r3, r2
   192c4:	d107      	bne.n	192d6 <ll_version_ind_send+0x24>
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   192c6:	2205      	movs	r2, #5
	conn->llcp_req++;
   192c8:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   192ca:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	conn->llcp_req++;
   192ce:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   192d2:	2000      	movs	r0, #0
}
   192d4:	bd08      	pop	{r3, pc}
		return 1;
   192d6:	2001      	movs	r0, #1
   192d8:	e7fc      	b.n	192d4 <ll_version_ind_send+0x22>

000192da <ll_terminate_ind_send>:
{
   192da:	b510      	push	{r4, lr}
   192dc:	460c      	mov	r4, r1
	conn = connection_get(handle);
   192de:	f7f8 fb2f 	bl	11940 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   192e2:	b160      	cbz	r0, 192fe <ll_terminate_ind_send+0x24>
   192e4:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   192e8:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   192ec:	4293      	cmp	r3, r2
   192ee:	d106      	bne.n	192fe <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   192f0:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   192f2:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   192f6:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   192fa:	2000      	movs	r0, #0
}
   192fc:	bd10      	pop	{r4, pc}
		return 1;
   192fe:	2001      	movs	r0, #1
   19300:	e7fc      	b.n	192fc <ll_terminate_ind_send+0x22>

00019302 <ll_tx_pwr_lvl_get>:
{
   19302:	b510      	push	{r4, lr}
   19304:	4614      	mov	r4, r2
	conn = connection_get(handle);
   19306:	f7f8 fb1b 	bl	11940 <connection_get>
	if (!conn) {
   1930a:	b110      	cbz	r0, 19312 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   1930c:	2000      	movs	r0, #0
   1930e:	7020      	strb	r0, [r4, #0]
}
   19310:	bd10      	pop	{r4, pc}
		return 1;
   19312:	2001      	movs	r0, #1
   19314:	e7fc      	b.n	19310 <ll_tx_pwr_lvl_get+0xe>

00019316 <ll_apto_get>:
{
   19316:	b510      	push	{r4, lr}
   19318:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1931a:	f7f8 fb11 	bl	11940 <connection_get>
	if (!conn) {
   1931e:	b160      	cbz	r0, 1933a <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   19320:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   19322:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   19326:	435a      	muls	r2, r3
   19328:	237d      	movs	r3, #125	; 0x7d
   1932a:	4353      	muls	r3, r2
	return 0;
   1932c:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1932e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19332:	fb93 f3f2 	sdiv	r3, r3, r2
   19336:	8023      	strh	r3, [r4, #0]
}
   19338:	bd10      	pop	{r4, pc}
		return 1;
   1933a:	2001      	movs	r0, #1
   1933c:	e7fc      	b.n	19338 <ll_apto_get+0x22>

0001933e <ll_apto_set>:
{
   1933e:	b510      	push	{r4, lr}
   19340:	460c      	mov	r4, r1
	conn = connection_get(handle);
   19342:	f7f8 fafd 	bl	11940 <connection_get>
	if (!conn) {
   19346:	b170      	cbz	r0, 19366 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   19348:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1934a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1934e:	4353      	muls	r3, r2
   19350:	f242 7110 	movw	r1, #10000	; 0x2710
   19354:	fb01 3404 	mla	r4, r1, r4, r3
   19358:	3c01      	subs	r4, #1
   1935a:	fb94 f4f3 	sdiv	r4, r4, r3
   1935e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   19362:	2000      	movs	r0, #0
}
   19364:	bd10      	pop	{r4, pc}
		return 1;
   19366:	2001      	movs	r0, #1
   19368:	e7fc      	b.n	19364 <ll_apto_set+0x26>

0001936a <ll_length_req_send>:
{
   1936a:	b570      	push	{r4, r5, r6, lr}
   1936c:	460e      	mov	r6, r1
   1936e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   19370:	f7f8 fae6 	bl	11940 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19374:	b1d0      	cbz	r0, 193ac <ll_length_req_send+0x42>
   19376:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1937a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1937e:	429a      	cmp	r2, r3
   19380:	d114      	bne.n	193ac <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   19382:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19386:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1938a:	4293      	cmp	r3, r2
   1938c:	d10e      	bne.n	193ac <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1938e:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   19392:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   19396:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   1939a:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1939c:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   193a0:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   193a4:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	return 0;
   193a8:	2000      	movs	r0, #0
}
   193aa:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   193ac:	2001      	movs	r0, #1
   193ae:	e7fc      	b.n	193aa <ll_length_req_send+0x40>

000193b0 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   193b0:	4b03      	ldr	r3, [pc, #12]	; (193c0 <ll_length_default_get+0x10>)
   193b2:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   193b6:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   193b8:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   193bc:	800b      	strh	r3, [r1, #0]
}
   193be:	4770      	bx	lr
   193c0:	2000110c 	.word	0x2000110c

000193c4 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   193c4:	4b03      	ldr	r3, [pc, #12]	; (193d4 <ll_length_default_set+0x10>)
   193c6:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   193ca:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   193ce:	2000      	movs	r0, #0
   193d0:	4770      	bx	lr
   193d2:	bf00      	nop
   193d4:	2000110c 	.word	0x2000110c

000193d8 <ll_length_max_get>:
{
   193d8:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   193da:	241b      	movs	r4, #27
   193dc:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   193de:	f44f 70a4 	mov.w	r0, #328	; 0x148
   193e2:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   193e4:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   193e6:	8018      	strh	r0, [r3, #0]
}
   193e8:	bd10      	pop	{r4, pc}

000193ea <ll_phy_get>:
{
   193ea:	b538      	push	{r3, r4, r5, lr}
   193ec:	460d      	mov	r5, r1
   193ee:	4614      	mov	r4, r2
	conn = connection_get(handle);
   193f0:	f7f8 faa6 	bl	11940 <connection_get>
	if (!conn) {
   193f4:	b158      	cbz	r0, 1940e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   193f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   193fa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   193fe:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   19400:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   19404:	f3c3 0302 	ubfx	r3, r3, #0, #3
   19408:	7023      	strb	r3, [r4, #0]
	return 0;
   1940a:	2000      	movs	r0, #0
}
   1940c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1940e:	2001      	movs	r0, #1
   19410:	e7fc      	b.n	1940c <ll_phy_get+0x22>
	...

00019414 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   19414:	4b03      	ldr	r3, [pc, #12]	; (19424 <ll_phy_default_set+0x10>)
   19416:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1941a:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   1941e:	2000      	movs	r0, #0
   19420:	4770      	bx	lr
   19422:	bf00      	nop
   19424:	2000110c 	.word	0x2000110c

00019428 <ll_phy_req_send>:
{
   19428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1942c:	4689      	mov	r9, r1
   1942e:	4690      	mov	r8, r2
   19430:	461f      	mov	r7, r3
	conn = connection_get(handle);
   19432:	f7f8 fa85 	bl	11940 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19436:	b320      	cbz	r0, 19482 <ll_phy_req_send+0x5a>
   19438:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1943c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   19440:	429a      	cmp	r2, r3
   19442:	d11e      	bne.n	19482 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   19444:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19448:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   1944c:	429d      	cmp	r5, r3
   1944e:	d118      	bne.n	19482 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   19450:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   19454:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   19458:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   1945c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   19460:	f046 0102 	orr.w	r1, r6, #2
	conn->llcp_phy.rx = rx;
   19464:	4622      	mov	r2, r4
	conn->llcp_phy.flags = flags;
   19466:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   1946a:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   1946e:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   19470:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   19474:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	conn->llcp_phy.req++;
   19478:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	return 0;
   1947c:	2000      	movs	r0, #0
}
   1947e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   19482:	2001      	movs	r0, #1
   19484:	e7fb      	b.n	1947e <ll_phy_req_send+0x56>
	...

00019488 <ll_rx_get>:
{
   19488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1948c:	4605      	mov	r5, r0
   1948e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   19490:	4918      	ldr	r1, [pc, #96]	; (194f4 <ll_rx_get+0x6c>)
   19492:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   19496:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   1949a:	4293      	cmp	r3, r2
   1949c:	460f      	mov	r7, r1
   1949e:	d01f      	beq.n	194e0 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   194a0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   194a4:	f201 1177 	addw	r1, r1, #375	; 0x177
   194a8:	f898 2000 	ldrb.w	r2, [r8]
   194ac:	f7f8 f9fe 	bl	118ac <tx_cmplt_get>
		if (!cmplt) {
   194b0:	4604      	mov	r4, r0
   194b2:	b9e0      	cbnz	r0, 194ee <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   194b4:	ae02      	add	r6, sp, #8
   194b6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   194ba:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   194be:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   194c2:	4631      	mov	r1, r6
   194c4:	f10d 0006 	add.w	r0, sp, #6
   194c8:	f7f8 f9f0 	bl	118ac <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   194cc:	b934      	cbnz	r4, 194dc <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   194ce:	b928      	cbnz	r0, 194dc <ll_rx_get+0x54>
			*node_rx = _node_rx;
   194d0:	f8c5 8000 	str.w	r8, [r5]
}
   194d4:	4620      	mov	r0, r4
   194d6:	b002      	add	sp, #8
   194d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   194dc:	4604      	mov	r4, r0
   194de:	e7ee      	b.n	194be <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   194e0:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   194e4:	f201 1177 	addw	r1, r1, #375	; 0x177
   194e8:	f7f8 f9e0 	bl	118ac <tx_cmplt_get>
   194ec:	4604      	mov	r4, r0
		*node_rx = NULL;
   194ee:	2300      	movs	r3, #0
   194f0:	602b      	str	r3, [r5, #0]
   194f2:	e7ef      	b.n	194d4 <ll_rx_get+0x4c>
   194f4:	2000110c 	.word	0x2000110c

000194f8 <do_radio_rx_fc_set>:
	if (req == ack) {
   194f8:	4291      	cmp	r1, r2
{
   194fa:	b510      	push	{r4, lr}
   194fc:	4b14      	ldr	r3, [pc, #80]	; (19550 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   194fe:	d119      	bne.n	19534 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   19500:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   19504:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   19508:	4294      	cmp	r4, r2
   1950a:	d111      	bne.n	19530 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   1950c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1950e:	bf14      	ite	ne
   19510:	460a      	movne	r2, r1
   19512:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   19514:	3a01      	subs	r2, #1
   19516:	b2d2      	uxtb	r2, r2
   19518:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   1951c:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   19520:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   19524:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   19528:	4291      	cmp	r1, r2
   1952a:	d00f      	beq.n	1954c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   1952c:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   19530:	2001      	movs	r0, #1
   19532:	e005      	b.n	19540 <do_radio_rx_fc_set+0x48>
	} else if (((req == 0) &&
   19534:	b929      	cbnz	r1, 19542 <do_radio_rx_fc_set+0x4a>
   19536:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   1953a:	1a18      	subs	r0, r3, r0
   1953c:	bf18      	it	ne
   1953e:	2001      	movne	r0, #1
}
   19540:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   19542:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   19546:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   1954a:	e7f6      	b.n	1953a <do_radio_rx_fc_set+0x42>
	return 0;
   1954c:	2000      	movs	r0, #0
   1954e:	e7f7      	b.n	19540 <do_radio_rx_fc_set+0x48>
   19550:	2000110c 	.word	0x2000110c

00019554 <radio_rx_fc_set>:
{
   19554:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   19556:	4b14      	ldr	r3, [pc, #80]	; (195a8 <radio_rx_fc_set+0x54>)
   19558:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   1955c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1955e:	b302      	cbz	r2, 195a2 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   19560:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   19564:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   19566:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   1956a:	b135      	cbz	r5, 1957a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   1956c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19570:	4298      	cmp	r0, r3
   19572:	d016      	beq.n	195a2 <radio_rx_fc_set+0x4e>
}
   19574:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   19576:	f7ff bfbf 	b.w	194f8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1957a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   1957e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   19582:	42a0      	cmp	r0, r4
   19584:	d10d      	bne.n	195a2 <radio_rx_fc_set+0x4e>
   19586:	4291      	cmp	r1, r2
   19588:	d00b      	beq.n	195a2 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1958a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   1958e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   19592:	42a0      	cmp	r0, r4
   19594:	d005      	beq.n	195a2 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   19596:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1959a:	4288      	cmp	r0, r1
				_radio.fc_ack = ack;
   1959c:	bf08      	it	eq
   1959e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   195a2:	2000      	movs	r0, #0
   195a4:	bc30      	pop	{r4, r5}
   195a6:	4770      	bx	lr
   195a8:	2000110c 	.word	0x2000110c

000195ac <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   195ac:	4801      	ldr	r0, [pc, #4]	; (195b4 <ll_tx_mem_acquire+0x8>)
   195ae:	f7f6 bf99 	b.w	104e4 <mem_acquire>
   195b2:	bf00      	nop
   195b4:	20001270 	.word	0x20001270

000195b8 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   195b8:	4901      	ldr	r1, [pc, #4]	; (195c0 <ll_tx_mem_release+0x8>)
   195ba:	f7f6 bfac 	b.w	10516 <mem_release>
   195be:	bf00      	nop
   195c0:	20001270 	.word	0x20001270

000195c4 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   195c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   195c6:	4d3f      	ldr	r5, [pc, #252]	; (196c4 <ll_tx_mem_enqueue+0x100>)
   195c8:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   195cc:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   195d0:	3401      	adds	r4, #1
{
   195d2:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   195d4:	b2e4      	uxtb	r4, r4
{
   195d6:	4607      	mov	r7, r0
   195d8:	460e      	mov	r6, r1
		last = 0;
   195da:	42a3      	cmp	r3, r4
   195dc:	bf08      	it	eq
   195de:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   195e0:	f7f8 f9ae 	bl	11940 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   195e4:	2800      	cmp	r0, #0
   195e6:	d06a      	beq.n	196be <ll_tx_mem_enqueue+0xfa>
   195e8:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   195ec:	42a3      	cmp	r3, r4
   195ee:	d066      	beq.n	196be <ll_tx_mem_enqueue+0xfa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   195f0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   195f4:	7972      	ldrb	r2, [r6, #5]
   195f6:	3b07      	subs	r3, #7
   195f8:	429a      	cmp	r2, r3
   195fa:	d91a      	bls.n	19632 <ll_tx_mem_enqueue+0x6e>
   195fc:	4b32      	ldr	r3, [pc, #200]	; (196c8 <ll_tx_mem_enqueue+0x104>)
   195fe:	681b      	ldr	r3, [r3, #0]
   19600:	075a      	lsls	r2, r3, #29
   19602:	d010      	beq.n	19626 <ll_tx_mem_enqueue+0x62>
   19604:	2301      	movs	r3, #1
   19606:	f04f 0200 	mov.w	r2, #0
   1960a:	f363 0202 	bfi	r2, r3, #0, #3
   1960e:	492f      	ldr	r1, [pc, #188]	; (196cc <ll_tx_mem_enqueue+0x108>)
   19610:	4b2f      	ldr	r3, [pc, #188]	; (196d0 <ll_tx_mem_enqueue+0x10c>)
   19612:	4830      	ldr	r0, [pc, #192]	; (196d4 <ll_tx_mem_enqueue+0x110>)
   19614:	1a5b      	subs	r3, r3, r1
   19616:	f36f 02c5 	bfc	r2, #3, #3
   1961a:	08db      	lsrs	r3, r3, #3
   1961c:	492e      	ldr	r1, [pc, #184]	; (196d8 <ll_tx_mem_enqueue+0x114>)
   1961e:	f363 128f 	bfi	r2, r3, #6, #10
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19622:	f7e8 fb99 	bl	1d58 <log_1>
   19626:	4040      	eors	r0, r0
   19628:	f380 8811 	msr	BASEPRI, r0
   1962c:	f04f 0004 	mov.w	r0, #4
   19630:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   19632:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   19636:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   1963a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   1963e:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   19642:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   19644:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   19648:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1964c:	2b00      	cmp	r3, #0
   1964e:	db02      	blt.n	19656 <ll_tx_mem_enqueue+0x92>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   19650:	2000      	movs	r0, #0
}
   19652:	b009      	add	sp, #36	; 0x24
   19654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   19656:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   19658:	2b00      	cmp	r3, #0
   1965a:	d0f9      	beq.n	19650 <ll_tx_mem_enqueue+0x8c>
   1965c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   19660:	f013 0402 	ands.w	r4, r3, #2
   19664:	d1f4      	bne.n	19650 <ll_tx_mem_enqueue+0x8c>
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   19666:	f890 2020 	ldrb.w	r2, [r0, #32]
		conn->slave.latency_cancel = 1;
   1966a:	f043 0302 	orr.w	r3, r3, #2
   1966e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   19672:	4b1a      	ldr	r3, [pc, #104]	; (196dc <ll_tx_mem_enqueue+0x118>)
   19674:	9006      	str	r0, [sp, #24]
   19676:	3207      	adds	r2, #7
   19678:	2501      	movs	r5, #1
   1967a:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1967e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   19682:	4623      	mov	r3, r4
   19684:	e9cd 4400 	strd	r4, r4, [sp]
   19688:	b2d2      	uxtb	r2, r2
   1968a:	2103      	movs	r1, #3
   1968c:	4620      	mov	r0, r4
   1968e:	f7f7 fdf9 	bl	11284 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19692:	f030 0302 	bics.w	r3, r0, #2
   19696:	d0db      	beq.n	19650 <ll_tx_mem_enqueue+0x8c>
   19698:	4b0b      	ldr	r3, [pc, #44]	; (196c8 <ll_tx_mem_enqueue+0x104>)
   1969a:	681b      	ldr	r3, [r3, #0]
   1969c:	075b      	lsls	r3, r3, #29
   1969e:	d0c2      	beq.n	19626 <ll_tx_mem_enqueue+0x62>
   196a0:	490a      	ldr	r1, [pc, #40]	; (196cc <ll_tx_mem_enqueue+0x108>)
   196a2:	4b0b      	ldr	r3, [pc, #44]	; (196d0 <ll_tx_mem_enqueue+0x10c>)
   196a4:	480e      	ldr	r0, [pc, #56]	; (196e0 <ll_tx_mem_enqueue+0x11c>)
   196a6:	f04f 0200 	mov.w	r2, #0
   196aa:	1a5b      	subs	r3, r3, r1
   196ac:	f365 0202 	bfi	r2, r5, #0, #3
   196b0:	f364 02c5 	bfi	r2, r4, #3, #3
   196b4:	08db      	lsrs	r3, r3, #3
   196b6:	f363 128f 	bfi	r2, r3, #6, #10
   196ba:	4907      	ldr	r1, [pc, #28]	; (196d8 <ll_tx_mem_enqueue+0x114>)
   196bc:	e7b1      	b.n	19622 <ll_tx_mem_enqueue+0x5e>
		return 1;
   196be:	2001      	movs	r0, #1
   196c0:	e7c7      	b.n	19652 <ll_tx_mem_enqueue+0x8e>
   196c2:	bf00      	nop
   196c4:	2000110c 	.word	0x2000110c
   196c8:	2000d72c 	.word	0x2000d72c
   196cc:	0002cff8 	.word	0x0002cff8
   196d0:	0002d030 	.word	0x0002d030
   196d4:	00030eea 	.word	0x00030eea
   196d8:	000309a3 	.word	0x000309a3
   196dc:	00012949 	.word	0x00012949
   196e0:	000309cf 	.word	0x000309cf

000196e4 <ll_enc_req_send>:
{
   196e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   196e8:	4607      	mov	r7, r0
   196ea:	4688      	mov	r8, r1
   196ec:	4616      	mov	r6, r2
   196ee:	4699      	mov	r9, r3
	conn = connection_get(handle);
   196f0:	f7f8 f926 	bl	11940 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   196f4:	4605      	mov	r5, r0
   196f6:	b910      	cbnz	r0, 196fe <ll_enc_req_send+0x1a>
			return 1;
   196f8:	2001      	movs	r0, #1
}
   196fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   196fe:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   19702:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   19706:	429a      	cmp	r2, r3
   19708:	d1f6      	bne.n	196f8 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1970a:	f7ff ff4f 	bl	195ac <ll_tx_mem_acquire>
	if (node_tx) {
   1970e:	4604      	mov	r4, r0
   19710:	2800      	cmp	r0, #0
   19712:	d0f1      	beq.n	196f8 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   19714:	2210      	movs	r2, #16
   19716:	4649      	mov	r1, r9
   19718:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1971c:	f7ec fbb4 	bl	5e88 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   19720:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   19724:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   19728:	d124      	bne.n	19774 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1972a:	7923      	ldrb	r3, [r4, #4]
   1972c:	f043 0303 	orr.w	r3, r3, #3
   19730:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   19732:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   19734:	2208      	movs	r2, #8
			pdu_data_tx->len =
   19736:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   19738:	2303      	movs	r3, #3
   1973a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1973c:	4641      	mov	r1, r8
   1973e:	18a0      	adds	r0, r4, r2
   19740:	f7ec fba2 	bl	5e88 <memcpy>
			enc_req->ediv[0] = ediv[0];
   19744:	7833      	ldrb	r3, [r6, #0]
   19746:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   19748:	7873      	ldrb	r3, [r6, #1]
   1974a:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   1974c:	2108      	movs	r1, #8
   1974e:	f104 0012 	add.w	r0, r4, #18
   19752:	f002 fc37 	bl	1bfc4 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   19756:	2104      	movs	r1, #4
   19758:	f104 001a 	add.w	r0, r4, #26
   1975c:	f002 fc32 	bl	1bfc4 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   19760:	4621      	mov	r1, r4
   19762:	4638      	mov	r0, r7
   19764:	f7ff ff2e 	bl	195c4 <ll_tx_mem_enqueue>
   19768:	2601      	movs	r6, #1
   1976a:	b1d0      	cbz	r0, 197a2 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   1976c:	4620      	mov	r0, r4
   1976e:	f7ff ff23 	bl	195b8 <ll_tx_mem_release>
   19772:	e7c1      	b.n	196f8 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   19774:	2b30      	cmp	r3, #48	; 0x30
   19776:	d1f9      	bne.n	1976c <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   19778:	2208      	movs	r2, #8
   1977a:	4641      	mov	r1, r8
   1977c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   19780:	f7ec fb82 	bl	5e88 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   19784:	7833      	ldrb	r3, [r6, #0]
   19786:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   1978a:	7873      	ldrb	r3, [r6, #1]
   1978c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   19790:	7923      	ldrb	r3, [r4, #4]
   19792:	f043 0303 	orr.w	r3, r3, #3
   19796:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   19798:	2301      	movs	r3, #1
   1979a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1979c:	230a      	movs	r3, #10
   1979e:	71e3      	strb	r3, [r4, #7]
   197a0:	e7de      	b.n	19760 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   197a2:	2303      	movs	r3, #3
   197a4:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   197a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   197ac:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   197b0:	3301      	adds	r3, #1
   197b2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
		return 0;
   197b6:	e7a0      	b.n	196fa <ll_enc_req_send+0x16>

000197b8 <radio_adv_enable>:
{
   197b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
   197bc:	4fca      	ldr	r7, [pc, #808]	; (19ae8 <radio_adv_enable+0x330>)
{
   197be:	b08f      	sub	sp, #60	; 0x3c
   197c0:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   197c2:	2302      	movs	r3, #2
   197c4:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   197c6:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
   197ca:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
   197ce:	2b00      	cmp	r3, #0
{
   197d0:	4683      	mov	fp, r0
   197d2:	4688      	mov	r8, r1
   197d4:	463d      	mov	r5, r7
	if (_radio.advertiser.is_enabled) {
   197d6:	da01      	bge.n	197dc <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
   197d8:	200c      	movs	r0, #12
   197da:	e17b      	b.n	19ad4 <radio_adv_enable+0x31c>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   197dc:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
   197e0:	232b      	movs	r3, #43	; 0x2b
   197e2:	f04f 0927 	mov.w	r9, #39	; 0x27
   197e6:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   197ea:	f817 3009 	ldrb.w	r3, [r7, r9]
   197ee:	f003 030f 	and.w	r3, r3, #15
   197f2:	2b01      	cmp	r3, #1
   197f4:	f200 8127 	bhi.w	19a46 <radio_adv_enable+0x28e>
		if (_radio.advertiser.conn) {
   197f8:	f8d7 60cc 	ldr.w	r6, [r7, #204]	; 0xcc
   197fc:	2e00      	cmp	r6, #0
   197fe:	d1eb      	bne.n	197d8 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
   19800:	f507 70a4 	add.w	r0, r7, #328	; 0x148
   19804:	f7f6 fe6e 	bl	104e4 <mem_acquire>
		if (!link) {
   19808:	900a      	str	r0, [sp, #40]	; 0x28
   1980a:	b158      	cbz	r0, 19824 <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
   1980c:	f507 7086 	add.w	r0, r7, #268	; 0x10c
   19810:	f7f6 fe68 	bl	104e4 <mem_acquire>
		if (!conn) {
   19814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19816:	4604      	mov	r4, r0
   19818:	b930      	cbnz	r0, 19828 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
   1981a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
   1981e:	4610      	mov	r0, r2
   19820:	f7f6 fe79 	bl	10516 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19824:	2007      	movs	r0, #7
   19826:	e155      	b.n	19ad4 <radio_adv_enable+0x31c>
		conn->handle = 0xFFFF;
   19828:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1982c:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   1982e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   19832:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   19836:	7f43      	ldrb	r3, [r0, #29]
		conn->latency_prepare = 0;
   19838:	6286      	str	r6, [r0, #40]	; 0x28
		conn->data_chan_sel = 0;
   1983a:	f366 1386 	bfi	r3, r6, #6, #1
   1983e:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   19840:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
   19844:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   19846:	231b      	movs	r3, #27
   19848:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1984a:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   1984c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
   19850:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   19852:	4ba6      	ldr	r3, [pc, #664]	; (19aec <radio_adv_enable+0x334>)
   19854:	6343      	str	r3, [r0, #52]	; 0x34
		conn->phy_pref_tx = _radio.default_phy_tx;
   19856:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
   1985a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->data_chan_use = 0;
   1985e:	77c6      	strb	r6, [r0, #31]
		conn->phy_pref_tx = _radio.default_phy_tx;
   19860:	f361 0302 	bfi	r3, r1, #0, #3
		conn->phy_tx = BIT(0);
   19864:	2101      	movs	r1, #1
   19866:	f361 03c5 	bfi	r3, r1, #3, #3
		conn->phy_pref_flags = 0;
   1986a:	f366 1386 	bfi	r3, r6, #6, #1
		conn->phy_flags = 0;
   1986e:	f366 13c7 	bfi	r3, r6, #7, #1
   19872:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   19876:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		conn->event_counter = 0;
   1987a:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->phy_tx_time = BIT(0);
   1987c:	f361 0302 	bfi	r3, r1, #0, #3
   19880:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   19884:	f8b7 0128 	ldrh.w	r0, [r7, #296]	; 0x128
		conn->supervision_expire = 0;
   19888:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
		conn->phy_pref_rx = _radio.default_phy_rx;
   1988c:	f360 03c5 	bfi	r3, r0, #3, #3
   19890:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   19894:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->procedure_expire = 0;
   19898:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
		conn->phy_rx = BIT(0);
   1989c:	f361 0302 	bfi	r3, r1, #0, #3
   198a0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   198a4:	7f63      	ldrb	r3, [r4, #29]
   198a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   198aa:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   198ac:	2306      	movs	r3, #6
   198ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   198b0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   198b4:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
   198b8:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
   198bc:	f366 0341 	bfi	r3, r6, #1, #1
   198c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.window_widening_event_us = 0;
   198c4:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
		conn->apto_expire = 0;
   198c8:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
		conn->llcp_version.tx = 0;
   198cc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->appto_expire = 0;
   198d0:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
		conn->llcp_version.tx = 0;
   198d4:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
   198d8:	f366 0341 	bfi	r3, r6, #1, #1
   198dc:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   198e0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->slave.ticks_to_offset = 0;
   198e4:	6726      	str	r6, [r4, #112]	; 0x70
		conn->llcp_conn_param.disabled = 0;
   198e6:	f366 1304 	bfi	r3, r6, #4, #1
   198ea:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp_length.pause_tx = 0;
   198ee:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->slave.ticks_to_offset = 0;
   198f2:	f8a4 6074 	strh.w	r6, [r4, #116]	; 0x74
		conn->llcp_length.pause_tx = 0;
   198f6:	f366 0382 	bfi	r3, r6, #2, #1
		conn->llcp_terminate.req = 0;
   198fa:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
		conn->llcp_terminate.reason_peer = 0;
   198fe:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   19902:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   19906:	f8a4 60c0 	strh.w	r6, [r4, #192]	; 0xc0
		conn->llcp_length.req = 0;
   1990a:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
		conn->llcp_length.pause_tx = 0;
   1990e:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->llcp_phy.req = 0;
   19912:	f8a4 60f4 	strh.w	r6, [r4, #244]	; 0xf4
		conn->sn = 0;
   19916:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   1991a:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
   1991e:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl = NULL;
   19922:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
		conn->pkt_tx_ctrl_last = NULL;
   19926:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
		conn->pkt_tx_data = NULL;
   1992a:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
		conn->pkt_tx_last = NULL;
   1992e:	f8a4 6150 	strh.w	r6, [r4, #336]	; 0x150
		k32src_wait();
   19932:	f7fa fb73 	bl	1401c <k32src_wait>
		_radio.advertiser.conn = conn;
   19936:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
   1993a:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
   1993c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
   19940:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
   19944:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
   19948:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   1994c:	f36a 1387 	bfi	r3, sl, #6, #2
   19950:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.rl_idx = rl_idx;
   19954:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   19958:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
   1995c:	f8d5 3184 	ldr.w	r3, [r5, #388]	; 0x184
   19960:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   19962:	2327      	movs	r3, #39	; 0x27
   19964:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   19966:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   19968:	2300      	movs	r3, #0
   1996a:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1996c:	f7f6 ff62 	bl	10834 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   19970:	f817 6009 	ldrb.w	r6, [r7, r9]
   19974:	f006 060f 	and.w	r6, r6, #15
   19978:	2e01      	cmp	r6, #1
   1997a:	d166      	bne.n	19a4a <radio_adv_enable+0x292>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   1997c:	f44f 7327 	mov.w	r3, #668	; 0x29c
   19980:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   19982:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   19986:	495a      	ldr	r1, [pc, #360]	; (19af0 <radio_adv_enable+0x338>)
   19988:	a355      	add	r3, pc, #340	; (adr r3, 19ae0 <radio_adv_enable+0x328>)
   1998a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1998e:	fba0 0101 	umull	r0, r1, r0, r1
   19992:	f7e6 fc8f 	bl	2b4 <__aeabi_uldivmod>
	ticks_slot_offset =
   19996:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   1999a:	429f      	cmp	r7, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   1999c:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
   1999e:	bf38      	it	cc
   199a0:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
   199a2:	f1b8 0f00 	cmp.w	r8, #0
   199a6:	d158      	bne.n	19a5a <radio_adv_enable+0x2a2>
   199a8:	1e72      	subs	r2, r6, #1
   199aa:	4253      	negs	r3, r2
   199ac:	4153      	adcs	r3, r2
   199ae:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   199b2:	f8df 9150 	ldr.w	r9, [pc, #336]	; 19b04 <radio_adv_enable+0x34c>
   199b6:	f8df b150 	ldr.w	fp, [pc, #336]	; 19b08 <radio_adv_enable+0x350>
   199ba:	f363 1686 	bfi	r6, r3, #6, #1
   199be:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   199c2:	f016 0640 	ands.w	r6, r6, #64	; 0x40
   199c6:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   199ca:	d04e      	beq.n	19a6a <radio_adv_enable+0x2b2>
		u32_t ticks_now = ticker_ticks_now_get();
   199cc:	f7f7 fd6c 	bl	114a8 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   199d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		u32_t ticks_now = ticker_ticks_now_get();
   199d2:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   199d4:	441f      	add	r7, r3
   199d6:	2000      	movs	r0, #0
   199d8:	e9cd 9a07 	strd	r9, sl, [sp, #28]
   199dc:	e9cd b005 	strd	fp, r0, [sp, #20]
   199e0:	e9cd 0703 	strd	r0, r7, [sp, #12]
   199e4:	e9cd 7001 	strd	r7, r0, [sp, #4]
   199e8:	9000      	str	r0, [sp, #0]
   199ea:	4633      	mov	r3, r6
   199ec:	2205      	movs	r2, #5
   199ee:	2103      	movs	r1, #3
   199f0:	f7f7 fbfe 	bl	111f0 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   199f4:	2802      	cmp	r0, #2
   199f6:	d034      	beq.n	19a62 <radio_adv_enable+0x2aa>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   199f8:	980d      	ldr	r0, [sp, #52]	; 0x34
   199fa:	b9b8      	cbnz	r0, 19a2c <radio_adv_enable+0x274>
		ret_cb = TICKER_STATUS_BUSY;
   199fc:	2302      	movs	r3, #2
   199fe:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
   19a00:	4b3c      	ldr	r3, [pc, #240]	; (19af4 <radio_adv_enable+0x33c>)
   19a02:	9006      	str	r0, [sp, #24]
   19a04:	e9cd 9a07 	strd	r9, sl, [sp, #28]
   19a08:	e9cd 0002 	strd	r0, r0, [sp, #8]
   19a0c:	e9cd 0304 	strd	r0, r3, [sp, #16]
   19a10:	2203      	movs	r2, #3
   19a12:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   19a16:	9300      	str	r3, [sp, #0]
   19a18:	9001      	str	r0, [sp, #4]
   19a1a:	4633      	mov	r3, r6
   19a1c:	4611      	mov	r1, r2
		ret =
   19a1e:	f7f7 fbe7 	bl	111f0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   19a22:	2802      	cmp	r0, #2
   19a24:	d043      	beq.n	19aae <radio_adv_enable+0x2f6>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   19a26:	980d      	ldr	r0, [sp, #52]	; 0x34
   19a28:	2800      	cmp	r0, #0
   19a2a:	d044      	beq.n	19ab6 <radio_adv_enable+0x2fe>
	if (conn) {
   19a2c:	2c00      	cmp	r4, #0
   19a2e:	f43f aed3 	beq.w	197d8 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   19a32:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19a36:	4930      	ldr	r1, [pc, #192]	; (19af8 <radio_adv_enable+0x340>)
   19a38:	f7f6 fd6d 	bl	10516 <mem_release>
		mem_release(conn, &_radio.conn_free);
   19a3c:	492f      	ldr	r1, [pc, #188]	; (19afc <radio_adv_enable+0x344>)
   19a3e:	4620      	mov	r0, r4
   19a40:	f7f6 fd69 	bl	10516 <mem_release>
   19a44:	e6c8      	b.n	197d8 <radio_adv_enable+0x20>
		conn = NULL;
   19a46:	2400      	movs	r4, #0
   19a48:	e777      	b.n	1993a <radio_adv_enable+0x182>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   19a4a:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   19a4c:	bf0c      	ite	eq
   19a4e:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   19a52:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   19a56:	4358      	muls	r0, r3
   19a58:	e795      	b.n	19986 <radio_adv_enable+0x1ce>
	_radio.advertiser.is_hdcd = !interval &&
   19a5a:	2300      	movs	r3, #0
   19a5c:	e7a7      	b.n	199ae <radio_adv_enable+0x1f6>
				cpu_sleep();
   19a5e:	f7f7 fd63 	bl	11528 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   19a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19a64:	2b02      	cmp	r3, #2
   19a66:	d0fa      	beq.n	19a5e <radio_adv_enable+0x2a6>
   19a68:	e7c6      	b.n	199f8 <radio_adv_enable+0x240>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19a6a:	f7f7 fd1d 	bl	114a8 <ticker_ticks_now_get>
		ret =
   19a6e:	e9cd 9a07 	strd	r9, sl, [sp, #28]
   19a72:	e9cd b605 	strd	fp, r6, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19a76:	900a      	str	r0, [sp, #40]	; 0x28
   19a78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   19a7a:	4821      	ldr	r0, [pc, #132]	; (19b00 <radio_adv_enable+0x348>)
		ret =
   19a7c:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   19a7e:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19a82:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   19a84:	fba8 0100 	umull	r0, r1, r8, r0
   19a88:	2391      	movs	r3, #145	; 0x91
   19a8a:	fb03 1108 	mla	r1, r3, r8, r1
   19a8e:	a314      	add	r3, pc, #80	; (adr r3, 19ae0 <radio_adv_enable+0x328>)
   19a90:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
   19a94:	e9cd 6703 	strd	r6, r7, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   19a98:	f7e6 fc0c 	bl	2b4 <__aeabi_uldivmod>
		ret =
   19a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19a9e:	e9cd 6000 	strd	r6, r0, [sp]
   19aa2:	2205      	movs	r2, #5
   19aa4:	2103      	movs	r1, #3
   19aa6:	4630      	mov	r0, r6
   19aa8:	e7b9      	b.n	19a1e <radio_adv_enable+0x266>
			cpu_sleep();
   19aaa:	f7f7 fd3d 	bl	11528 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   19aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19ab0:	2b02      	cmp	r3, #2
   19ab2:	d0fa      	beq.n	19aaa <radio_adv_enable+0x2f2>
   19ab4:	e7b7      	b.n	19a26 <radio_adv_enable+0x26e>
		_radio.advertiser.is_enabled = 1;
   19ab6:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   19aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19abe:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   19ac2:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
   19ac6:	f013 0401 	ands.w	r4, r3, #1
   19aca:	d103      	bne.n	19ad4 <radio_adv_enable+0x31c>
			ll_adv_scan_state_cb(BIT(0));
   19acc:	2001      	movs	r0, #1
   19ace:	f003 fb33 	bl	1d138 <ll_adv_scan_state_cb>
		return 0;
   19ad2:	4620      	mov	r0, r4
}
   19ad4:	b00f      	add	sp, #60	; 0x3c
   19ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ada:	bf00      	nop
   19adc:	f3af 8000 	nop.w
   19ae0:	1afd498d 	.word	0x1afd498d
   19ae4:	00000007 	.word	0x00000007
   19ae8:	2000110c 	.word	0x2000110c
   19aec:	01480148 	.word	0x01480148
   19af0:	3b9aca00 	.word	0x3b9aca00
   19af4:	00013f91 	.word	0x00013f91
   19af8:	20001254 	.word	0x20001254
   19afc:	20001218 	.word	0x20001218
   19b00:	84e72a00 	.word	0x84e72a00
   19b04:	0001156d 	.word	0x0001156d
   19b08:	00013e2d 	.word	0x00013e2d

00019b0c <radio_adv_disable>:
{
   19b0c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   19b0e:	2103      	movs	r1, #3
   19b10:	2005      	movs	r0, #5
   19b12:	f7f7 ff2b 	bl	1196c <role_disable>
	if (!status) {
   19b16:	4605      	mov	r5, r0
   19b18:	b9e8      	cbnz	r0, 19b56 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   19b1a:	4c10      	ldr	r4, [pc, #64]	; (19b5c <radio_adv_disable+0x50>)
   19b1c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   19b20:	f360 12c7 	bfi	r2, r0, #7, #1
   19b24:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   19b28:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   19b2c:	07d3      	lsls	r3, r2, #31
   19b2e:	d401      	bmi.n	19b34 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   19b30:	f003 fb02 	bl	1d138 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   19b34:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
		if (conn) {
   19b38:	b15e      	cbz	r6, 19b52 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   19b3a:	2300      	movs	r3, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   19b3c:	4908      	ldr	r1, [pc, #32]	; (19b60 <radio_adv_disable+0x54>)
   19b3e:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
			_radio.advertiser.conn = NULL;
   19b42:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   19b46:	f7f6 fce6 	bl	10516 <mem_release>
			mem_release(conn, &_radio.conn_free);
   19b4a:	4906      	ldr	r1, [pc, #24]	; (19b64 <radio_adv_disable+0x58>)
   19b4c:	4630      	mov	r0, r6
   19b4e:	f7f6 fce2 	bl	10516 <mem_release>
}
   19b52:	4628      	mov	r0, r5
   19b54:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   19b56:	250c      	movs	r5, #12
   19b58:	e7fb      	b.n	19b52 <radio_adv_disable+0x46>
   19b5a:	bf00      	nop
   19b5c:	2000110c 	.word	0x2000110c
   19b60:	20001254 	.word	0x20001254
   19b64:	20001218 	.word	0x20001218

00019b68 <radio_scan_enable>:
{
   19b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   19b6c:	4c68      	ldr	r4, [pc, #416]	; (19d10 <radio_scan_enable+0x1a8>)
   19b6e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   19b72:	b08e      	sub	sp, #56	; 0x38
   19b74:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   19b76:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   19b7a:	f04f 0302 	mov.w	r3, #2
{
   19b7e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   19b80:	930b      	str	r3, [sp, #44]	; 0x2c
{
   19b82:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   19b84:	d003      	beq.n	19b8e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19b86:	200c      	movs	r0, #12
}
   19b88:	b00e      	add	sp, #56	; 0x38
   19b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   19b8e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   19b92:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   19b96:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   19b9a:	0840      	lsrs	r0, r0, #1
   19b9c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   19ba0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   19ba4:	f360 0200 	bfi	r2, r0, #0, #1
   19ba8:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   19bac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   19bb0:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   19bb4:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   19bb8:	2206      	movs	r2, #6
   19bba:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   19bbe:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   19bc2:	4e54      	ldr	r6, [pc, #336]	; (19d14 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   19bc4:	f7ec f960 	bl	5e88 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   19bc8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   19bcc:	f04f 0991 	mov.w	r9, #145	; 0x91
   19bd0:	fba2 0106 	umull	r0, r1, r2, r6
   19bd4:	fb09 1102 	mla	r1, r9, r2, r1
   19bd8:	a34b      	add	r3, pc, #300	; (adr r3, 19d08 <radio_scan_enable+0x1a0>)
   19bda:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bde:	f7e6 fb69 	bl	2b4 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   19be2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   19be6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   19bea:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   19bee:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   19bf2:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   19bf6:	b2ba      	uxth	r2, r7
   19bf8:	fba2 6706 	umull	r6, r7, r2, r6
   19bfc:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   19c00:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   19c04:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   19c06:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   19c0a:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   19c0e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   19c12:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   19c16:	a33c      	add	r3, pc, #240	; (adr r3, 19d08 <radio_scan_enable+0x1a0>)
   19c18:	e9d3 2300 	ldrd	r2, r3, [r3]
   19c1c:	4630      	mov	r0, r6
   19c1e:	4639      	mov	r1, r7
   19c20:	f7e6 fb48 	bl	2b4 <__aeabi_uldivmod>
	    (ticks_interval -
   19c24:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   19c28:	459a      	cmp	sl, r3
   19c2a:	bf94      	ite	ls
   19c2c:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   19c30:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   19c34:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   19c38:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   19c3a:	bf38      	it	cc
   19c3c:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   19c40:	f7f7 fc32 	bl	114a8 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   19c44:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   19c48:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   19c4a:	2b00      	cmp	r3, #0
   19c4c:	d045      	beq.n	19cda <radio_scan_enable+0x172>
		us_offset = 0;
   19c4e:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   19c50:	980c      	ldr	r0, [sp, #48]	; 0x30
   19c52:	4931      	ldr	r1, [pc, #196]	; (19d18 <radio_scan_enable+0x1b0>)
   19c54:	a32c      	add	r3, pc, #176	; (adr r3, 19d08 <radio_scan_enable+0x1a0>)
   19c56:	e9d3 2300 	ldrd	r2, r3, [r3]
   19c5a:	fba0 0101 	umull	r0, r1, r0, r1
   19c5e:	f7e6 fb29 	bl	2b4 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19c62:	ab0b      	add	r3, sp, #44	; 0x2c
   19c64:	9308      	str	r3, [sp, #32]
   19c66:	4b2d      	ldr	r3, [pc, #180]	; (19d1c <radio_scan_enable+0x1b4>)
   19c68:	9307      	str	r3, [sp, #28]
   19c6a:	4b2d      	ldr	r3, [pc, #180]	; (19d20 <radio_scan_enable+0x1b8>)
   19c6c:	9305      	str	r3, [sp, #20]
   19c6e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   19c72:	2500      	movs	r5, #0
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   19c74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19c78:	4443      	add	r3, r8
   19c7a:	4482      	add	sl, r0
   19c7c:	e9cd 5303 	strd	r5, r3, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   19c80:	4630      	mov	r0, r6
   19c82:	a321      	add	r3, pc, #132	; (adr r3, 19d08 <radio_scan_enable+0x1a0>)
   19c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   19c88:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19c8a:	9506      	str	r5, [sp, #24]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   19c8c:	f7e6 fb12 	bl	2b4 <__aeabi_uldivmod>
   19c90:	4610      	mov	r0, r2
   19c92:	4619      	mov	r1, r3
   19c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19c98:	2300      	movs	r3, #0
   19c9a:	f7e6 fb0b 	bl	2b4 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19c9e:	9500      	str	r5, [sp, #0]
   19ca0:	e9cd 9001 	strd	r9, r0, [sp, #4]
   19ca4:	4653      	mov	r3, sl
   19ca6:	2206      	movs	r2, #6
   19ca8:	2103      	movs	r1, #3
   19caa:	4628      	mov	r0, r5
   19cac:	f7f7 faa0 	bl	111f0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   19cb0:	2802      	cmp	r0, #2
   19cb2:	d023      	beq.n	19cfc <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   19cb4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   19cb6:	2d00      	cmp	r5, #0
   19cb8:	f47f af65 	bne.w	19b86 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   19cbc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   19cc0:	f043 0301 	orr.w	r3, r3, #1
   19cc4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   19cc8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   19ccc:	2b00      	cmp	r3, #0
   19cce:	db02      	blt.n	19cd6 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   19cd0:	2002      	movs	r0, #2
   19cd2:	f003 fa31 	bl	1d138 <ll_adv_scan_state_cb>
	return 0;
   19cd6:	4628      	mov	r0, r5
   19cd8:	e756      	b.n	19b88 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   19cda:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   19cde:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   19ce0:	aa0d      	add	r2, sp, #52	; 0x34
   19ce2:	ab0c      	add	r3, sp, #48	; 0x30
   19ce4:	4441      	add	r1, r8
   19ce6:	2003      	movs	r0, #3
   19ce8:	f7f8 fb16 	bl	12318 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   19cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19cee:	2b00      	cmp	r3, #0
   19cf0:	d0ae      	beq.n	19c50 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   19cf2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   19cf6:	e7ab      	b.n	19c50 <radio_scan_enable+0xe8>
			cpu_sleep();
   19cf8:	f7f7 fc16 	bl	11528 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   19cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19cfe:	2b02      	cmp	r3, #2
   19d00:	d0fa      	beq.n	19cf8 <radio_scan_enable+0x190>
   19d02:	e7d7      	b.n	19cb4 <radio_scan_enable+0x14c>
   19d04:	f3af 8000 	nop.w
   19d08:	1afd498d 	.word	0x1afd498d
   19d0c:	00000007 	.word	0x00000007
   19d10:	2000110c 	.word	0x2000110c
   19d14:	84e72a00 	.word	0x84e72a00
   19d18:	3b9aca00 	.word	0x3b9aca00
   19d1c:	0001156d 	.word	0x0001156d
   19d20:	00013ea9 	.word	0x00013ea9

00019d24 <radio_scan_disable>:
{
   19d24:	b510      	push	{r4, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   19d26:	2104      	movs	r1, #4
   19d28:	2006      	movs	r0, #6
   19d2a:	f7f7 fe1f 	bl	1196c <role_disable>
	if (!status && !_radio.scanner.conn) {
   19d2e:	4604      	mov	r4, r0
   19d30:	b988      	cbnz	r0, 19d56 <radio_scan_disable+0x32>
   19d32:	4b0a      	ldr	r3, [pc, #40]	; (19d5c <radio_scan_disable+0x38>)
   19d34:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   19d38:	b95a      	cbnz	r2, 19d52 <radio_scan_disable+0x2e>
		_radio.scanner.is_enabled = 0;
   19d3a:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   19d3e:	f360 0200 	bfi	r2, r0, #0, #1
   19d42:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   19d46:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
   19d4a:	2b00      	cmp	r3, #0
   19d4c:	db01      	blt.n	19d52 <radio_scan_disable+0x2e>
			ll_adv_scan_state_cb(0);
   19d4e:	f003 f9f3 	bl	1d138 <ll_adv_scan_state_cb>
}
   19d52:	4620      	mov	r0, r4
   19d54:	bd10      	pop	{r4, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   19d56:	240c      	movs	r4, #12
   19d58:	e7fb      	b.n	19d52 <radio_scan_disable+0x2e>
   19d5a:	bf00      	nop
   19d5c:	2000110c 	.word	0x2000110c

00019d60 <ll_connect_disable>:
{
   19d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.scanner.conn == 0) {
   19d62:	4e10      	ldr	r6, [pc, #64]	; (19da4 <ll_connect_disable+0x44>)
   19d64:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
{
   19d68:	4607      	mov	r7, r0
	if (_radio.scanner.conn == 0) {
   19d6a:	b1cb      	cbz	r3, 19da0 <ll_connect_disable+0x40>
	status = radio_scan_disable();
   19d6c:	f7ff ffda 	bl	19d24 <radio_scan_disable>
	if (!status) {
   19d70:	4605      	mov	r5, r0
   19d72:	b998      	cbnz	r0, 19d9c <ll_connect_disable+0x3c>
		struct connection *conn = _radio.scanner.conn;
   19d74:	f8d6 4100 	ldr.w	r4, [r6, #256]	; 0x100
		mem_release(rx->hdr.onion.link, &_radio.link_rx_free);
   19d78:	f506 71a4 	add.w	r1, r6, #328	; 0x148
   19d7c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19d80:	f7f6 fbc9 	bl	10516 <mem_release>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   19d84:	2306      	movs	r3, #6
   19d86:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		rx->hdr.handle = 0xffff;
   19d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19d8e:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
		*((u8_t *)rx->pdu_data) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   19d92:	2302      	movs	r3, #2
   19d94:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   19d98:	34b4      	adds	r4, #180	; 0xb4
		*node_rx = rx;
   19d9a:	603c      	str	r4, [r7, #0]
}
   19d9c:	4628      	mov	r0, r5
   19d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19da0:	250c      	movs	r5, #12
   19da2:	e7fb      	b.n	19d9c <ll_connect_disable+0x3c>
   19da4:	2000110c 	.word	0x2000110c

00019da8 <ll_rx_dequeue>:
{
   19da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   19daa:	4d67      	ldr	r5, [pc, #412]	; (19f48 <ll_rx_dequeue+0x1a0>)
	struct radio_pdu_node_rx *node_rx = NULL;
   19dac:	aa02      	add	r2, sp, #8
   19dae:	2600      	movs	r6, #0
   19db0:	f842 6d04 	str.w	r6, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   19db4:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   19db8:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   19dbc:	f7f6 fbfa 	bl	105b4 <memq_dequeue>
   19dc0:	462c      	mov	r4, r5
	LL_ASSERT(link);
   19dc2:	b9d0      	cbnz	r0, 19dfa <ll_rx_dequeue+0x52>
   19dc4:	4a61      	ldr	r2, [pc, #388]	; (19f4c <ll_rx_dequeue+0x1a4>)
   19dc6:	6812      	ldr	r2, [r2, #0]
   19dc8:	0756      	lsls	r6, r2, #29
   19dca:	d010      	beq.n	19dee <ll_rx_dequeue+0x46>
   19dcc:	2101      	movs	r1, #1
   19dce:	f04f 0200 	mov.w	r2, #0
   19dd2:	f361 0202 	bfi	r2, r1, #0, #3
   19dd6:	4b5e      	ldr	r3, [pc, #376]	; (19f50 <ll_rx_dequeue+0x1a8>)
   19dd8:	495e      	ldr	r1, [pc, #376]	; (19f54 <ll_rx_dequeue+0x1ac>)
   19dda:	1a5b      	subs	r3, r3, r1
   19ddc:	f360 02c5 	bfi	r2, r0, #3, #3
   19de0:	08db      	lsrs	r3, r3, #3
   19de2:	495d      	ldr	r1, [pc, #372]	; (19f58 <ll_rx_dequeue+0x1b0>)
   19de4:	485d      	ldr	r0, [pc, #372]	; (19f5c <ll_rx_dequeue+0x1b4>)
   19de6:	f363 128f 	bfi	r2, r3, #6, #10
			LL_ASSERT(_radio.scanner.is_enabled);
   19dea:	f7e7 ffb5 	bl	1d58 <log_1>
   19dee:	4040      	eors	r0, r0
   19df0:	f380 8811 	msr	BASEPRI, r0
   19df4:	f04f 0004 	mov.w	r0, #4
   19df8:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   19dfa:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   19dfe:	f7f6 fb8a 	bl	10516 <mem_release>
	switch (node_rx->hdr.type) {
   19e02:	9a01      	ldr	r2, [sp, #4]
   19e04:	7911      	ldrb	r1, [r2, #4]
   19e06:	290c      	cmp	r1, #12
   19e08:	d808      	bhi.n	19e1c <ll_rx_dequeue+0x74>
   19e0a:	2701      	movs	r7, #1
   19e0c:	fa07 f301 	lsl.w	r3, r7, r1
   19e10:	f641 707e 	movw	r0, #8062	; 0x1f7e
   19e14:	4203      	tst	r3, r0
   19e16:	d115      	bne.n	19e44 <ll_rx_dequeue+0x9c>
   19e18:	061d      	lsls	r5, r3, #24
   19e1a:	d430      	bmi.n	19e7e <ll_rx_dequeue+0xd6>
		LL_ASSERT(0);
   19e1c:	4b4b      	ldr	r3, [pc, #300]	; (19f4c <ll_rx_dequeue+0x1a4>)
   19e1e:	681b      	ldr	r3, [r3, #0]
   19e20:	0759      	lsls	r1, r3, #29
   19e22:	d0e4      	beq.n	19dee <ll_rx_dequeue+0x46>
   19e24:	2301      	movs	r3, #1
   19e26:	f04f 0200 	mov.w	r2, #0
   19e2a:	f363 0202 	bfi	r2, r3, #0, #3
   19e2e:	4949      	ldr	r1, [pc, #292]	; (19f54 <ll_rx_dequeue+0x1ac>)
   19e30:	4b47      	ldr	r3, [pc, #284]	; (19f50 <ll_rx_dequeue+0x1a8>)
   19e32:	484b      	ldr	r0, [pc, #300]	; (19f60 <ll_rx_dequeue+0x1b8>)
   19e34:	1a5b      	subs	r3, r3, r1
   19e36:	f36f 02c5 	bfc	r2, #3, #3
   19e3a:	08db      	lsrs	r3, r3, #3
   19e3c:	f363 128f 	bfi	r2, r3, #6, #10
   19e40:	4945      	ldr	r1, [pc, #276]	; (19f58 <ll_rx_dequeue+0x1b0>)
   19e42:	e7d2      	b.n	19dea <ll_rx_dequeue+0x42>
		LL_ASSERT(_radio.link_rx_data_quota <
   19e44:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   19e48:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   19e4c:	3801      	subs	r0, #1
   19e4e:	4283      	cmp	r3, r0
   19e50:	db12      	blt.n	19e78 <ll_rx_dequeue+0xd0>
   19e52:	4b3e      	ldr	r3, [pc, #248]	; (19f4c <ll_rx_dequeue+0x1a4>)
   19e54:	681b      	ldr	r3, [r3, #0]
   19e56:	0758      	lsls	r0, r3, #29
   19e58:	d0c9      	beq.n	19dee <ll_rx_dequeue+0x46>
   19e5a:	493e      	ldr	r1, [pc, #248]	; (19f54 <ll_rx_dequeue+0x1ac>)
   19e5c:	4b3c      	ldr	r3, [pc, #240]	; (19f50 <ll_rx_dequeue+0x1a8>)
   19e5e:	4841      	ldr	r0, [pc, #260]	; (19f64 <ll_rx_dequeue+0x1bc>)
   19e60:	f04f 0200 	mov.w	r2, #0
   19e64:	1a5b      	subs	r3, r3, r1
   19e66:	f367 0202 	bfi	r2, r7, #0, #3
   19e6a:	f366 02c5 	bfi	r2, r6, #3, #3
   19e6e:	08db      	lsrs	r3, r3, #3
   19e70:	f363 128f 	bfi	r2, r3, #6, #10
   19e74:	4938      	ldr	r1, [pc, #224]	; (19f58 <ll_rx_dequeue+0x1b0>)
   19e76:	e7b8      	b.n	19dea <ll_rx_dequeue+0x42>
		_radio.link_rx_data_quota++;
   19e78:	3301      	adds	r3, #1
   19e7a:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   19e7e:	2906      	cmp	r1, #6
   19e80:	d151      	bne.n	19f26 <ll_rx_dequeue+0x17e>
		if ((radio_le_conn_cmplt->status == BT_HCI_ERR_ADV_TIMEOUT) ||
   19e82:	7a13      	ldrb	r3, [r2, #8]
   19e84:	2b3c      	cmp	r3, #60	; 0x3c
   19e86:	d01b      	beq.n	19ec0 <ll_rx_dequeue+0x118>
   19e88:	7a52      	ldrb	r2, [r2, #9]
   19e8a:	2a00      	cmp	r2, #0
   19e8c:	d135      	bne.n	19efa <ll_rx_dequeue+0x152>
			LL_ASSERT(_radio.scanner.is_enabled);
   19e8e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   19e92:	f013 0101 	ands.w	r1, r3, #1
   19e96:	d148      	bne.n	19f2a <ll_rx_dequeue+0x182>
   19e98:	4b2c      	ldr	r3, [pc, #176]	; (19f4c <ll_rx_dequeue+0x1a4>)
   19e9a:	681b      	ldr	r3, [r3, #0]
   19e9c:	075b      	lsls	r3, r3, #29
   19e9e:	d0a6      	beq.n	19dee <ll_rx_dequeue+0x46>
   19ea0:	2301      	movs	r3, #1
   19ea2:	f04f 0200 	mov.w	r2, #0
   19ea6:	f363 0202 	bfi	r2, r3, #0, #3
   19eaa:	f361 02c5 	bfi	r2, r1, #3, #3
   19eae:	4b28      	ldr	r3, [pc, #160]	; (19f50 <ll_rx_dequeue+0x1a8>)
   19eb0:	4928      	ldr	r1, [pc, #160]	; (19f54 <ll_rx_dequeue+0x1ac>)
   19eb2:	482d      	ldr	r0, [pc, #180]	; (19f68 <ll_rx_dequeue+0x1c0>)
   19eb4:	1a5b      	subs	r3, r3, r1
   19eb6:	08db      	lsrs	r3, r3, #3
   19eb8:	f363 128f 	bfi	r2, r3, #6, #10
   19ebc:	4926      	ldr	r1, [pc, #152]	; (19f58 <ll_rx_dequeue+0x1b0>)
   19ebe:	e794      	b.n	19dea <ll_rx_dequeue+0x42>
				_radio.advertiser.conn = NULL;
   19ec0:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   19ec2:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   19ec6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   19eca:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   19ece:	2b00      	cmp	r3, #0
   19ed0:	db15      	blt.n	19efe <ll_rx_dequeue+0x156>
   19ed2:	4b1e      	ldr	r3, [pc, #120]	; (19f4c <ll_rx_dequeue+0x1a4>)
   19ed4:	681b      	ldr	r3, [r3, #0]
   19ed6:	075a      	lsls	r2, r3, #29
   19ed8:	d089      	beq.n	19dee <ll_rx_dequeue+0x46>
   19eda:	2301      	movs	r3, #1
   19edc:	f04f 0200 	mov.w	r2, #0
   19ee0:	f363 0202 	bfi	r2, r3, #0, #3
   19ee4:	491b      	ldr	r1, [pc, #108]	; (19f54 <ll_rx_dequeue+0x1ac>)
   19ee6:	4b1a      	ldr	r3, [pc, #104]	; (19f50 <ll_rx_dequeue+0x1a8>)
   19ee8:	4820      	ldr	r0, [pc, #128]	; (19f6c <ll_rx_dequeue+0x1c4>)
   19eea:	1a5b      	subs	r3, r3, r1
   19eec:	f36f 02c5 	bfc	r2, #3, #3
   19ef0:	08db      	lsrs	r3, r3, #3
   19ef2:	f363 128f 	bfi	r2, r3, #6, #10
   19ef6:	4918      	ldr	r1, [pc, #96]	; (19f58 <ll_rx_dequeue+0x1b0>)
   19ef8:	e777      	b.n	19dea <ll_rx_dequeue+0x42>
		struct connection *conn = NULL;
   19efa:	2500      	movs	r5, #0
   19efc:	e7e5      	b.n	19eca <ll_rx_dequeue+0x122>
			_radio.advertiser.is_enabled = 0;
   19efe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19f02:	f36f 13c7 	bfc	r3, #7, #1
   19f06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   19f0a:	b99d      	cbnz	r5, 19f34 <ll_rx_dequeue+0x18c>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   19f0c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   19f10:	f000 0301 	and.w	r3, r0, #1
		     _radio.advertiser.is_enabled;
   19f14:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   19f18:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		if (!bm) {
   19f1c:	ea50 0043 	orrs.w	r0, r0, r3, lsl #1
   19f20:	d101      	bne.n	19f26 <ll_rx_dequeue+0x17e>
			ll_adv_scan_state_cb(0);
   19f22:	f003 f909 	bl	1d138 <ll_adv_scan_state_cb>
}
   19f26:	b003      	add	sp, #12
   19f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_radio.scanner.is_enabled = 0;
   19f2a:	f362 0300 	bfi	r3, r2, #0, #1
   19f2e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   19f32:	e7eb      	b.n	19f0c <ll_rx_dequeue+0x164>
			mem_release(node_rx->hdr.onion.link,
   19f34:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   19f38:	490d      	ldr	r1, [pc, #52]	; (19f70 <ll_rx_dequeue+0x1c8>)
   19f3a:	f7f6 faec 	bl	10516 <mem_release>
			mem_release(conn, &_radio.conn_free);
   19f3e:	490d      	ldr	r1, [pc, #52]	; (19f74 <ll_rx_dequeue+0x1cc>)
   19f40:	4628      	mov	r0, r5
   19f42:	f7f6 fae8 	bl	10516 <mem_release>
   19f46:	e7e1      	b.n	19f0c <ll_rx_dequeue+0x164>
   19f48:	2000110c 	.word	0x2000110c
   19f4c:	2000d72c 	.word	0x2000d72c
   19f50:	0002d030 	.word	0x0002d030
   19f54:	0002cff8 	.word	0x0002cff8
   19f58:	00030967 	.word	0x00030967
   19f5c:	000309b5 	.word	0x000309b5
   19f60:	0002f0b9 	.word	0x0002f0b9
   19f64:	00030a6f 	.word	0x00030a6f
   19f68:	00030ebb 	.word	0x00030ebb
   19f6c:	00030e89 	.word	0x00030e89
   19f70:	20001254 	.word	0x20001254
   19f74:	20001218 	.word	0x20001218

00019f78 <ll_rx_mem_release>:
{
   19f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(_node_rx_free,
   19f7c:	4e2e      	ldr	r6, [pc, #184]	; (1a038 <ll_rx_mem_release+0xc0>)
{
   19f7e:	4607      	mov	r7, r0
	_node_rx = *node_rx;
   19f80:	6800      	ldr	r0, [r0, #0]
					conn = _radio.scanner.conn;
   19f82:	f5a6 7498 	sub.w	r4, r6, #304	; 0x130
					mem_release(conn, &_radio.conn_free);
   19f86:	f1a6 0824 	sub.w	r8, r6, #36	; 0x24
	while (_node_rx) {
   19f8a:	b928      	cbnz	r0, 19f98 <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
   19f8c:	6038      	str	r0, [r7, #0]
	packet_rx_allocate(0xff);
   19f8e:	20ff      	movs	r0, #255	; 0xff
}
   19f90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_rx_allocate(0xff);
   19f94:	f7f7 bbac 	b.w	116f0 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   19f98:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   19f9a:	f8d0 9000 	ldr.w	r9, [r0]
   19f9e:	2a0c      	cmp	r2, #12
   19fa0:	d809      	bhi.n	19fb6 <ll_rx_mem_release+0x3e>
   19fa2:	2301      	movs	r3, #1
   19fa4:	4093      	lsls	r3, r2
   19fa6:	f641 753e 	movw	r5, #7998	; 0x1f3e
   19faa:	401d      	ands	r5, r3
   19fac:	d137      	bne.n	1a01e <ll_rx_mem_release+0xa6>
   19fae:	0659      	lsls	r1, r3, #25
   19fb0:	d41c      	bmi.n	19fec <ll_rx_mem_release+0x74>
   19fb2:	061a      	lsls	r2, r3, #24
   19fb4:	d437      	bmi.n	1a026 <ll_rx_mem_release+0xae>
			LL_ASSERT(0);
   19fb6:	4b21      	ldr	r3, [pc, #132]	; (1a03c <ll_rx_mem_release+0xc4>)
   19fb8:	681b      	ldr	r3, [r3, #0]
   19fba:	075b      	lsls	r3, r3, #29
   19fbc:	d010      	beq.n	19fe0 <ll_rx_mem_release+0x68>
   19fbe:	2301      	movs	r3, #1
   19fc0:	f04f 0200 	mov.w	r2, #0
   19fc4:	f363 0202 	bfi	r2, r3, #0, #3
   19fc8:	491d      	ldr	r1, [pc, #116]	; (1a040 <ll_rx_mem_release+0xc8>)
   19fca:	4b1e      	ldr	r3, [pc, #120]	; (1a044 <ll_rx_mem_release+0xcc>)
   19fcc:	481e      	ldr	r0, [pc, #120]	; (1a048 <ll_rx_mem_release+0xd0>)
   19fce:	1a5b      	subs	r3, r3, r1
   19fd0:	f36f 02c5 	bfc	r2, #3, #3
   19fd4:	08db      	lsrs	r3, r3, #3
   19fd6:	f363 128f 	bfi	r2, r3, #6, #10
   19fda:	491c      	ldr	r1, [pc, #112]	; (1a04c <ll_rx_mem_release+0xd4>)
   19fdc:	f7e7 febc 	bl	1d58 <log_1>
   19fe0:	4040      	eors	r0, r0
   19fe2:	f380 8811 	msr	BASEPRI, r0
   19fe6:	f04f 0004 	mov.w	r0, #4
   19fea:	df02      	svc	2
				if (*((u8_t *)_node_rx_free->pdu_data) ==
   19fec:	7a03      	ldrb	r3, [r0, #8]
   19fee:	2b02      	cmp	r3, #2
   19ff0:	d115      	bne.n	1a01e <ll_rx_mem_release+0xa6>
					conn = _radio.scanner.conn;
   19ff2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
					_radio.scanner.conn = NULL;
   19ff6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
					mem_release(conn, &_radio.conn_free);
   19ffa:	4641      	mov	r1, r8
   19ffc:	f7f6 fa8b 	bl	10516 <mem_release>
					_radio.scanner.is_enabled = 0;
   1a000:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1a004:	f365 0300 	bfi	r3, r5, #0, #1
   1a008:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
					if (!_radio.advertiser.is_enabled) {
   1a00c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1a010:	2b00      	cmp	r3, #0
   1a012:	db02      	blt.n	1a01a <ll_rx_mem_release+0xa2>
						ll_adv_scan_state_cb(0);
   1a014:	4628      	mov	r0, r5
   1a016:	f003 f88f 	bl	1d138 <ll_adv_scan_state_cb>
{
   1a01a:	4648      	mov	r0, r9
   1a01c:	e7b5      	b.n	19f8a <ll_rx_mem_release+0x12>
			mem_release(_node_rx_free,
   1a01e:	4631      	mov	r1, r6
			mem_release(conn, &_radio.conn_free);
   1a020:	f7f6 fa79 	bl	10516 <mem_release>
			break;
   1a024:	e7f9      	b.n	1a01a <ll_rx_mem_release+0xa2>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1a026:	88c2      	ldrh	r2, [r0, #6]
   1a028:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   1a02c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1a030:	f7f6 fa8c 	bl	1054c <mem_get>
			mem_release(conn, &_radio.conn_free);
   1a034:	4641      	mov	r1, r8
   1a036:	e7f3      	b.n	1a020 <ll_rx_mem_release+0xa8>
   1a038:	2000123c 	.word	0x2000123c
   1a03c:	2000d72c 	.word	0x2000d72c
   1a040:	0002cff8 	.word	0x0002cff8
   1a044:	0002d030 	.word	0x0002d030
   1a048:	0002f0b9 	.word	0x0002f0b9
   1a04c:	00030975 	.word	0x00030975

0001a050 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1a050:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1a052:	4c0b      	ldr	r4, [pc, #44]	; (1a080 <rtc0_nrf5_isr+0x30>)
   1a054:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   1a058:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   1a05c:	b122      	cbz	r2, 1a068 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1a05e:	2000      	movs	r0, #0
   1a060:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   1a064:	f7f7 f8b2 	bl	111cc <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   1a068:	b12d      	cbz	r5, 1a076 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1a06a:	2300      	movs	r3, #0
   1a06c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   1a070:	2001      	movs	r0, #1
   1a072:	f7f7 f8ab 	bl	111cc <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1a076:	2000      	movs	r0, #0
}
   1a078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   1a07c:	f7f6 bb48 	b.w	10710 <mayfly_run>
   1a080:	4000b000 	.word	0x4000b000

0001a084 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   1a084:	2001      	movs	r0, #1
   1a086:	f7f6 bb43 	b.w	10710 <mayfly_run>

0001a08a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a08a:	4668      	mov	r0, sp
   1a08c:	f020 0107 	bic.w	r1, r0, #7
   1a090:	468d      	mov	sp, r1
   1a092:	b501      	push	{r0, lr}
   1a094:	f7eb fc94 	bl	59c0 <_arch_isr_direct_header>
	isr_radio();
   1a098:	f003 fc02 	bl	1d8a0 <isr_radio>
	ISR_DIRECT_PM();
   1a09c:	f7eb fc82 	bl	59a4 <_arch_isr_direct_pm>
	if (maybe_swap) {

#ifdef CONFIG_TRACING
		z_sys_trace_isr_exit_to_scheduler();
#endif
		_IntExit();
   1a0a0:	f7eb fa8c 	bl	55bc <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a0a4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a0a8:	4685      	mov	sp, r0
   1a0aa:	4770      	bx	lr

0001a0ac <radio_active_callback>:
}
   1a0ac:	4770      	bx	lr
	...

0001a0b0 <radio_event_callback>:
	k_sem_give(sem_recv);
   1a0b0:	4b01      	ldr	r3, [pc, #4]	; (1a0b8 <radio_event_callback+0x8>)
   1a0b2:	6818      	ldr	r0, [r3, #0]
   1a0b4:	f012 b963 	b.w	2c37e <_impl_k_sem_give>
   1a0b8:	20001a90 	.word	0x20001a90

0001a0bc <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   1a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1a0c0:	4b4f      	ldr	r3, [pc, #316]	; (1a200 <ll_init+0x144>)
{
   1a0c2:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1a0c4:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   1a0c6:	484f      	ldr	r0, [pc, #316]	; (1a204 <ll_init+0x148>)
   1a0c8:	f011 fafc 	bl	2b6c4 <device_get_binding>
	if (!clk_k32) {
   1a0cc:	b920      	cbnz	r0, 1a0d8 <ll_init+0x1c>
		return -ENODEV;
   1a0ce:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   1a0d2:	b006      	add	sp, #24
   1a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
   1a0d8:	6843      	ldr	r3, [r0, #4]
   1a0da:	2101      	movs	r1, #1
   1a0dc:	681b      	ldr	r3, [r3, #0]
   1a0de:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   1a0e0:	4849      	ldr	r0, [pc, #292]	; (1a208 <ll_init+0x14c>)
   1a0e2:	f011 faef 	bl	2b6c4 <device_get_binding>
	if (!entropy) {
   1a0e6:	4680      	mov	r8, r0
   1a0e8:	2800      	cmp	r0, #0
   1a0ea:	d0f0      	beq.n	1a0ce <ll_init+0x12>
	cntr_init();
   1a0ec:	f003 faaa 	bl	1d644 <cntr_init>
	mayfly_init();
   1a0f0:	f7f6 fa6e 	bl	105d0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1a0f4:	4b45      	ldr	r3, [pc, #276]	; (1a20c <ll_init+0x150>)
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1a0f6:	2202      	movs	r2, #2
   1a0f8:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1a0fa:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1a0fc:	2400      	movs	r4, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a0fe:	4a44      	ldr	r2, [pc, #272]	; (1a210 <ll_init+0x154>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1a100:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1a102:	2503      	movs	r5, #3
   1a104:	721d      	strb	r5, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1a106:	741c      	strb	r4, [r3, #16]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a108:	9205      	str	r2, [sp, #20]
   1a10a:	4a42      	ldr	r2, [pc, #264]	; (1a214 <ll_init+0x158>)
   1a10c:	9204      	str	r2, [sp, #16]
   1a10e:	4a42      	ldr	r2, [pc, #264]	; (1a218 <ll_init+0x15c>)
   1a110:	9203      	str	r2, [sp, #12]
   1a112:	4a42      	ldr	r2, [pc, #264]	; (1a21c <ll_init+0x160>)
   1a114:	9202      	str	r2, [sp, #8]
   1a116:	220d      	movs	r2, #13
   1a118:	e9cd 3200 	strd	r3, r2, [sp]
   1a11c:	4620      	mov	r0, r4
   1a11e:	2304      	movs	r3, #4
   1a120:	4a3f      	ldr	r2, [pc, #252]	; (1a220 <ll_init+0x164>)
   1a122:	f7f7 f817 	bl	11154 <ticker_init>
	LL_ASSERT(!err);
   1a126:	4607      	mov	r7, r0
   1a128:	b1d0      	cbz	r0, 1a160 <ll_init+0xa4>
   1a12a:	4b3e      	ldr	r3, [pc, #248]	; (1a224 <ll_init+0x168>)
   1a12c:	681b      	ldr	r3, [r3, #0]
   1a12e:	075a      	lsls	r2, r3, #29
   1a130:	d010      	beq.n	1a154 <ll_init+0x98>
   1a132:	2301      	movs	r3, #1
   1a134:	f04f 0200 	mov.w	r2, #0
   1a138:	f363 0202 	bfi	r2, r3, #0, #3
   1a13c:	493a      	ldr	r1, [pc, #232]	; (1a228 <ll_init+0x16c>)
   1a13e:	4b3b      	ldr	r3, [pc, #236]	; (1a22c <ll_init+0x170>)
   1a140:	483b      	ldr	r0, [pc, #236]	; (1a230 <ll_init+0x174>)
   1a142:	1a5b      	subs	r3, r3, r1
   1a144:	f364 02c5 	bfi	r2, r4, #3, #3
   1a148:	40eb      	lsrs	r3, r5
   1a14a:	f363 128f 	bfi	r2, r3, #6, #10
   1a14e:	4939      	ldr	r1, [pc, #228]	; (1a234 <ll_init+0x178>)
   1a150:	f7e7 fe02 	bl	1d58 <log_1>
   1a154:	4040      	eors	r0, r0
   1a156:	f380 8811 	msr	BASEPRI, r0
   1a15a:	f04f 0004 	mov.w	r0, #4
   1a15e:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1a160:	4835      	ldr	r0, [pc, #212]	; (1a238 <ll_init+0x17c>)
   1a162:	f011 faaf 	bl	2b6c4 <device_get_binding>
	if (!clk_m16) {
   1a166:	2800      	cmp	r0, #0
   1a168:	d0b1      	beq.n	1a0ce <ll_init+0x12>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   1a16a:	4b34      	ldr	r3, [pc, #208]	; (1a23c <ll_init+0x180>)
   1a16c:	9304      	str	r3, [sp, #16]
   1a16e:	9501      	str	r5, [sp, #4]
   1a170:	231b      	movs	r3, #27
   1a172:	2501      	movs	r5, #1
   1a174:	f44f 7664 	mov.w	r6, #912	; 0x390
   1a178:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1a17c:	9605      	str	r6, [sp, #20]
   1a17e:	9500      	str	r5, [sp, #0]
   1a180:	462b      	mov	r3, r5
   1a182:	4642      	mov	r2, r8
   1a184:	2107      	movs	r1, #7
   1a186:	f7fe fc81 	bl	18a8c <radio_init>
	if (err) {
   1a18a:	4604      	mov	r4, r0
   1a18c:	b1d0      	cbz	r0, 1a1c4 <ll_init+0x108>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   1a18e:	4b25      	ldr	r3, [pc, #148]	; (1a224 <ll_init+0x168>)
   1a190:	681b      	ldr	r3, [r3, #0]
   1a192:	075b      	lsls	r3, r3, #29
   1a194:	d013      	beq.n	1a1be <ll_init+0x102>
   1a196:	4924      	ldr	r1, [pc, #144]	; (1a228 <ll_init+0x16c>)
   1a198:	4b24      	ldr	r3, [pc, #144]	; (1a22c <ll_init+0x170>)
   1a19a:	f04f 0200 	mov.w	r2, #0
   1a19e:	1a5b      	subs	r3, r3, r1
   1a1a0:	f365 0202 	bfi	r2, r5, #0, #3
   1a1a4:	08db      	lsrs	r3, r3, #3
   1a1a6:	f367 02c5 	bfi	r2, r7, #3, #3
   1a1aa:	f363 128f 	bfi	r2, r3, #6, #10
   1a1ae:	f8ad 2000 	strh.w	r2, [sp]
   1a1b2:	4633      	mov	r3, r6
   1a1b4:	4602      	mov	r2, r0
   1a1b6:	491f      	ldr	r1, [pc, #124]	; (1a234 <ll_init+0x178>)
   1a1b8:	4821      	ldr	r0, [pc, #132]	; (1a240 <ll_init+0x184>)
   1a1ba:	f7e7 fdf9 	bl	1db0 <log_3>
		return -ENOMEM;
   1a1be:	f06f 000b 	mvn.w	r0, #11
   1a1c2:	e786      	b.n	1a0d2 <ll_init+0x16>
	ll_filter_reset(true);
   1a1c4:	4628      	mov	r0, r5
   1a1c6:	f003 f9b5 	bl	1d534 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1a1ca:	4622      	mov	r2, r4
   1a1cc:	4621      	mov	r1, r4
   1a1ce:	4628      	mov	r0, r5
   1a1d0:	f7eb fbce 	bl	5970 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1a1d4:	4622      	mov	r2, r4
   1a1d6:	4621      	mov	r1, r4
   1a1d8:	200b      	movs	r0, #11
   1a1da:	f7eb fbc9 	bl	5970 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1a1de:	4622      	mov	r2, r4
   1a1e0:	4621      	mov	r1, r4
   1a1e2:	2018      	movs	r0, #24
   1a1e4:	f7eb fbc4 	bl	5970 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1a1e8:	4628      	mov	r0, r5
   1a1ea:	f7eb fb8f 	bl	590c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1a1ee:	200b      	movs	r0, #11
   1a1f0:	f7eb fb8c 	bl	590c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   1a1f4:	2018      	movs	r0, #24
   1a1f6:	f7eb fb89 	bl	590c <_arch_irq_enable>
	return 0;
   1a1fa:	4620      	mov	r0, r4
   1a1fc:	e769      	b.n	1a0d2 <ll_init+0x16>
   1a1fe:	bf00      	nop
   1a200:	20001a90 	.word	0x20001a90
   1a204:	0002e3a8 	.word	0x0002e3a8
   1a208:	0002e383 	.word	0x0002e383
   1a20c:	20001a70 	.word	0x20001a70
   1a210:	0001e2bd 	.word	0x0001e2bd
   1a214:	0001e205 	.word	0x0001e205
   1a218:	0001e17d 	.word	0x0001e17d
   1a21c:	20001800 	.word	0x20001800
   1a220:	200016c0 	.word	0x200016c0
   1a224:	2000d730 	.word	0x2000d730
   1a228:	0002cff8 	.word	0x0002cff8
   1a22c:	0002d038 	.word	0x0002d038
   1a230:	000314d4 	.word	0x000314d4
   1a234:	000314cc 	.word	0x000314cc
   1a238:	0002e3b3 	.word	0x0002e3b3
   1a23c:	20001330 	.word	0x20001330
   1a240:	000314ee 	.word	0x000314ee

0001a244 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
   1a244:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1a246:	4802      	ldr	r0, [pc, #8]	; (1a250 <_hci_driver_init+0xc>)
   1a248:	f7ee fcd6 	bl	8bf8 <bt_hci_driver_register>

	return 0;
}
   1a24c:	2000      	movs	r0, #0
   1a24e:	bd08      	pop	{r3, pc}
   1a250:	00031554 	.word	0x00031554

0001a254 <stack_analyze>:
{
   1a254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
   1a256:	2300      	movs	r3, #0
		if (checked_stack[i] == 0xaaU) {
   1a258:	5ccc      	ldrb	r4, [r1, r3]
   1a25a:	2caa      	cmp	r4, #170	; 0xaa
   1a25c:	d102      	bne.n	1a264 <stack_analyze+0x10>
			unused++;
   1a25e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   1a260:	429a      	cmp	r2, r3
   1a262:	d1f9      	bne.n	1a258 <stack_analyze+0x4>
	pcnt = ((size - unused) * 100) / size;
   1a264:	1ad4      	subs	r4, r2, r3
   1a266:	2164      	movs	r1, #100	; 0x64
   1a268:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   1a26a:	9400      	str	r4, [sp, #0]
	pcnt = ((size - unused) * 100) / size;
   1a26c:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   1a270:	e9cd 2101 	strd	r2, r1, [sp, #4]
   1a274:	4601      	mov	r1, r0
   1a276:	4802      	ldr	r0, [pc, #8]	; (1a280 <stack_analyze+0x2c>)
   1a278:	f7e6 ff3a 	bl	10f0 <printk>
}
   1a27c:	b004      	add	sp, #16
   1a27e:	bd10      	pop	{r4, pc}
   1a280:	0002f2c9 	.word	0x0002f2c9

0001a284 <recv_thread>:
{
   1a284:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1a286:	4e37      	ldr	r6, [pc, #220]	; (1a364 <recv_thread+0xe0>)
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
   1a288:	4d37      	ldr	r5, [pc, #220]	; (1a368 <recv_thread+0xe4>)
   1a28a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a28e:	4630      	mov	r0, r6
   1a290:	f011 fd7a 	bl	2bd88 <_impl_k_queue_get>
		if (node_rx && !buf) {
   1a294:	4604      	mov	r4, r0
   1a296:	2800      	cmp	r0, #0
   1a298:	d043      	beq.n	1a322 <recv_thread+0x9e>
	s8_t class = hci_get_class(node_rx);
   1a29a:	f001 fe5d 	bl	1bf58 <hci_get_class>
	switch (class) {
   1a29e:	1e03      	subs	r3, r0, #0
   1a2a0:	9401      	str	r4, [sp, #4]
   1a2a2:	db03      	blt.n	1a2ac <recv_thread+0x28>
   1a2a4:	2b02      	cmp	r3, #2
   1a2a6:	dd1c      	ble.n	1a2e2 <recv_thread+0x5e>
   1a2a8:	2b03      	cmp	r3, #3
   1a2aa:	d04e      	beq.n	1a34a <recv_thread+0xc6>
		LL_ASSERT(0);
   1a2ac:	4b2f      	ldr	r3, [pc, #188]	; (1a36c <recv_thread+0xe8>)
   1a2ae:	681b      	ldr	r3, [r3, #0]
   1a2b0:	075b      	lsls	r3, r3, #29
   1a2b2:	d010      	beq.n	1a2d6 <recv_thread+0x52>
   1a2b4:	2301      	movs	r3, #1
   1a2b6:	f04f 0200 	mov.w	r2, #0
   1a2ba:	f363 0202 	bfi	r2, r3, #0, #3
   1a2be:	492c      	ldr	r1, [pc, #176]	; (1a370 <recv_thread+0xec>)
   1a2c0:	4b2c      	ldr	r3, [pc, #176]	; (1a374 <recv_thread+0xf0>)
   1a2c2:	482d      	ldr	r0, [pc, #180]	; (1a378 <recv_thread+0xf4>)
   1a2c4:	1a5b      	subs	r3, r3, r1
   1a2c6:	f36f 02c5 	bfc	r2, #3, #3
   1a2ca:	08db      	lsrs	r3, r3, #3
   1a2cc:	f363 128f 	bfi	r2, r3, #6, #10
   1a2d0:	492a      	ldr	r1, [pc, #168]	; (1a37c <recv_thread+0xf8>)
   1a2d2:	f7e7 fd41 	bl	1d58 <log_1>
   1a2d6:	4040      	eors	r0, r0
   1a2d8:	f380 8811 	msr	BASEPRI, r0
   1a2dc:	f04f 0004 	mov.w	r0, #4
   1a2e0:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   1a2e2:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
   1a2e4:	bf0e      	itee	eq
   1a2e6:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a2e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1a2ec:	2001      	movne	r0, #1
   1a2ee:	f7ef faa9 	bl	9844 <bt_buf_get_rx>
   1a2f2:	4604      	mov	r4, r0
		if (buf) {
   1a2f4:	b118      	cbz	r0, 1a2fe <recv_thread+0x7a>
			hci_evt_encode(node_rx, buf);
   1a2f6:	4601      	mov	r1, r0
   1a2f8:	9801      	ldr	r0, [sp, #4]
   1a2fa:	f001 f98b 	bl	1b614 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
   1a2fe:	9b01      	ldr	r3, [sp, #4]
   1a300:	2100      	movs	r1, #0
   1a302:	88d8      	ldrh	r0, [r3, #6]
   1a304:	f7ff f926 	bl	19554 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
   1a308:	a802      	add	r0, sp, #8
   1a30a:	2200      	movs	r2, #0
   1a30c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
   1a310:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1a312:	f7ff fe31 	bl	19f78 <ll_rx_mem_release>
		if (buf) {
   1a316:	b124      	cbz	r4, 1a322 <recv_thread+0x9e>
			if (buf->len) {
   1a318:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1a31a:	4620      	mov	r0, r4
			if (buf->len) {
   1a31c:	b1fb      	cbz	r3, 1a35e <recv_thread+0xda>
				bt_recv(buf);
   1a31e:	f7ed fd73 	bl	7e08 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1a322:	f011 ff8d 	bl	2c240 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1a326:	f012 fbab 	bl	2ca80 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
   1a32a:	682b      	ldr	r3, [r5, #0]
   1a32c:	1ac0      	subs	r0, r0, r3
   1a32e:	f241 3388 	movw	r3, #5000	; 0x1388
   1a332:	4298      	cmp	r0, r3
   1a334:	d9a9      	bls.n	1a28a <recv_thread+0x6>
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
   1a336:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a33a:	4911      	ldr	r1, [pc, #68]	; (1a380 <recv_thread+0xfc>)
   1a33c:	4811      	ldr	r0, [pc, #68]	; (1a384 <recv_thread+0x100>)
   1a33e:	f7ff ff89 	bl	1a254 <stack_analyze>
   1a342:	f012 fb9d 	bl	2ca80 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
   1a346:	6028      	str	r0, [r5, #0]
   1a348:	e79f      	b.n	1a28a <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1a34a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a34e:	f7ef fa79 	bl	9844 <bt_buf_get_rx>
   1a352:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   1a354:	4601      	mov	r1, r0
   1a356:	9801      	ldr	r0, [sp, #4]
   1a358:	f001 f912 	bl	1b580 <hci_acl_encode>
   1a35c:	e7cf      	b.n	1a2fe <recv_thread+0x7a>
				net_buf_unref(buf);
   1a35e:	f004 f877 	bl	1e450 <net_buf_unref>
   1a362:	e7de      	b.n	1a322 <recv_thread+0x9e>
   1a364:	2000d8e8 	.word	0x2000d8e8
   1a368:	20001a98 	.word	0x20001a98
   1a36c:	2000d728 	.word	0x2000d728
   1a370:	0002cff8 	.word	0x0002cff8
   1a374:	0002d028 	.word	0x0002d028
   1a378:	0002f0b9 	.word	0x0002f0b9
   1a37c:	00031527 	.word	0x00031527
   1a380:	20007a60 	.word	0x20007a60
   1a384:	000315bb 	.word	0x000315bb

0001a388 <hci_driver_send>:
	if (!buf->len) {
   1a388:	8983      	ldrh	r3, [r0, #12]
{
   1a38a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a38c:	4605      	mov	r5, r0
	if (!buf->len) {
   1a38e:	b9bb      	cbnz	r3, 1a3c0 <hci_driver_send+0x38>
		BT_ERR("Empty HCI packet");
   1a390:	4a28      	ldr	r2, [pc, #160]	; (1a434 <hci_driver_send+0xac>)
   1a392:	6812      	ldr	r2, [r2, #0]
   1a394:	0752      	lsls	r2, r2, #29
   1a396:	d010      	beq.n	1a3ba <hci_driver_send+0x32>
   1a398:	2101      	movs	r1, #1
   1a39a:	f04f 0200 	mov.w	r2, #0
   1a39e:	f361 0202 	bfi	r2, r1, #0, #3
   1a3a2:	f363 02c5 	bfi	r2, r3, #3, #3
   1a3a6:	4924      	ldr	r1, [pc, #144]	; (1a438 <hci_driver_send+0xb0>)
   1a3a8:	4b24      	ldr	r3, [pc, #144]	; (1a43c <hci_driver_send+0xb4>)
   1a3aa:	4825      	ldr	r0, [pc, #148]	; (1a440 <hci_driver_send+0xb8>)
   1a3ac:	1a5b      	subs	r3, r3, r1
   1a3ae:	08db      	lsrs	r3, r3, #3
   1a3b0:	f363 128f 	bfi	r2, r3, #6, #10
   1a3b4:	4923      	ldr	r1, [pc, #140]	; (1a444 <hci_driver_send+0xbc>)
   1a3b6:	f7e7 fccf 	bl	1d58 <log_1>
		return -EINVAL;
   1a3ba:	f06f 0415 	mvn.w	r4, #21
   1a3be:	e010      	b.n	1a3e2 <hci_driver_send+0x5a>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
   1a3c0:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
   1a3c2:	b18a      	cbz	r2, 1a3e8 <hci_driver_send+0x60>
   1a3c4:	2a02      	cmp	r2, #2
   1a3c6:	d11f      	bne.n	1a408 <hci_driver_send+0x80>
	err = hci_acl_handle(buf, &evt);
   1a3c8:	a901      	add	r1, sp, #4
   1a3ca:	f001 f817 	bl	1b3fc <hci_acl_handle>
   1a3ce:	4604      	mov	r4, r0
	if (evt) {
   1a3d0:	9801      	ldr	r0, [sp, #4]
   1a3d2:	b108      	cbz	r0, 1a3d8 <hci_driver_send+0x50>
		bt_recv_prio(evt);
   1a3d4:	f7ee fade 	bl	8994 <bt_recv_prio>
	if (!err) {
   1a3d8:	b91c      	cbnz	r4, 1a3e2 <hci_driver_send+0x5a>
		net_buf_unref(buf);
   1a3da:	4628      	mov	r0, r5
   1a3dc:	f004 f838 	bl	1e450 <net_buf_unref>
   1a3e0:	2400      	movs	r4, #0
}
   1a3e2:	4620      	mov	r0, r4
   1a3e4:	b003      	add	sp, #12
   1a3e6:	bd30      	pop	{r4, r5, pc}
	void *node_rx = NULL;
   1a3e8:	a902      	add	r1, sp, #8
   1a3ea:	f841 2d04 	str.w	r2, [r1, #-4]!
	evt = hci_cmd_handle(buf, &node_rx);
   1a3ee:	f000 fa7d 	bl	1a8ec <hci_cmd_handle>
	if (evt) {
   1a3f2:	2800      	cmp	r0, #0
   1a3f4:	d0f1      	beq.n	1a3da <hci_driver_send+0x52>
		bt_recv_prio(evt);
   1a3f6:	f7ee facd 	bl	8994 <bt_recv_prio>
		if (node_rx) {
   1a3fa:	9901      	ldr	r1, [sp, #4]
   1a3fc:	2900      	cmp	r1, #0
   1a3fe:	d0ec      	beq.n	1a3da <hci_driver_send+0x52>
			k_fifo_put(&recv_fifo, node_rx);
   1a400:	4811      	ldr	r0, [pc, #68]	; (1a448 <hci_driver_send+0xc0>)
   1a402:	f011 fc9d 	bl	2bd40 <k_queue_append>
   1a406:	e7e8      	b.n	1a3da <hci_driver_send+0x52>
		BT_ERR("Unknown HCI type %u", type);
   1a408:	4b0a      	ldr	r3, [pc, #40]	; (1a434 <hci_driver_send+0xac>)
   1a40a:	681b      	ldr	r3, [r3, #0]
   1a40c:	075b      	lsls	r3, r3, #29
   1a40e:	d0d4      	beq.n	1a3ba <hci_driver_send+0x32>
   1a410:	2101      	movs	r1, #1
   1a412:	f04f 0300 	mov.w	r3, #0
   1a416:	f361 0302 	bfi	r3, r1, #0, #3
   1a41a:	4807      	ldr	r0, [pc, #28]	; (1a438 <hci_driver_send+0xb0>)
   1a41c:	4907      	ldr	r1, [pc, #28]	; (1a43c <hci_driver_send+0xb4>)
   1a41e:	1a09      	subs	r1, r1, r0
   1a420:	08c9      	lsrs	r1, r1, #3
   1a422:	f36f 03c5 	bfc	r3, #3, #3
   1a426:	f361 138f 	bfi	r3, r1, #6, #10
   1a42a:	4808      	ldr	r0, [pc, #32]	; (1a44c <hci_driver_send+0xc4>)
   1a42c:	4905      	ldr	r1, [pc, #20]	; (1a444 <hci_driver_send+0xbc>)
   1a42e:	f7e7 fca7 	bl	1d80 <log_2>
   1a432:	e7c2      	b.n	1a3ba <hci_driver_send+0x32>
   1a434:	2000d728 	.word	0x2000d728
   1a438:	0002cff8 	.word	0x0002cff8
   1a43c:	0002d028 	.word	0x0002d028
   1a440:	00031589 	.word	0x00031589
   1a444:	00031533 	.word	0x00031533
   1a448:	2000d8e8 	.word	0x2000d8e8
   1a44c:	0003159e 	.word	0x0003159e

0001a450 <prio_recv_thread>:
{
   1a450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1a454:	4f1d      	ldr	r7, [pc, #116]	; (1a4cc <prio_recv_thread+0x7c>)
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
   1a456:	4c1e      	ldr	r4, [pc, #120]	; (1a4d0 <prio_recv_thread+0x80>)
			STACK_ANALYZE("prio recv thread stack",
   1a458:	4e1e      	ldr	r6, [pc, #120]	; (1a4d4 <prio_recv_thread+0x84>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
   1a45a:	f10d 0102 	add.w	r1, sp, #2
   1a45e:	a801      	add	r0, sp, #4
   1a460:	f7ff f812 	bl	19488 <ll_rx_get>
   1a464:	4605      	mov	r5, r0
   1a466:	b940      	cbnz	r0, 1a47a <prio_recv_thread+0x2a>
		if (node_rx) {
   1a468:	9b01      	ldr	r3, [sp, #4]
   1a46a:	b1bb      	cbz	r3, 1a49c <prio_recv_thread+0x4c>
			ll_rx_dequeue();
   1a46c:	f7ff fc9c 	bl	19da8 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
   1a470:	9901      	ldr	r1, [sp, #4]
   1a472:	4819      	ldr	r0, [pc, #100]	; (1a4d8 <prio_recv_thread+0x88>)
   1a474:	f011 fc64 	bl	2bd40 <k_queue_append>
   1a478:	e7ef      	b.n	1a45a <prio_recv_thread+0xa>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a47a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a47e:	2001      	movs	r0, #1
   1a480:	f7ef f9e0 	bl	9844 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1a484:	462a      	mov	r2, r5
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a486:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1a488:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a48c:	f001 fd50 	bl	1bf30 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1a490:	4640      	mov	r0, r8
   1a492:	f7ee fa7f 	bl	8994 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1a496:	f011 fed3 	bl	2c240 <_impl_k_yield>
   1a49a:	e7de      	b.n	1a45a <prio_recv_thread+0xa>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1a49c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a4a0:	4638      	mov	r0, r7
   1a4a2:	f011 ff93 	bl	2c3cc <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1a4a6:	f012 faeb 	bl	2ca80 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
   1a4aa:	6823      	ldr	r3, [r4, #0]
   1a4ac:	1ac0      	subs	r0, r0, r3
   1a4ae:	f241 3388 	movw	r3, #5000	; 0x1388
   1a4b2:	4298      	cmp	r0, r3
   1a4b4:	d9d1      	bls.n	1a45a <prio_recv_thread+0xa>
			STACK_ANALYZE("prio recv thread stack",
   1a4b6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1a4ba:	4631      	mov	r1, r6
   1a4bc:	4807      	ldr	r0, [pc, #28]	; (1a4dc <prio_recv_thread+0x8c>)
   1a4be:	f7ff fec9 	bl	1a254 <stack_analyze>
   1a4c2:	f012 fadd 	bl	2ca80 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
   1a4c6:	6020      	str	r0, [r4, #0]
   1a4c8:	e7c7      	b.n	1a45a <prio_recv_thread+0xa>
   1a4ca:	bf00      	nop
   1a4cc:	2000d8a4 	.word	0x2000d8a4
   1a4d0:	20001a94 	.word	0x20001a94
   1a4d4:	200078a0 	.word	0x200078a0
   1a4d8:	2000d8e8 	.word	0x2000d8e8
   1a4dc:	000315b6 	.word	0x000315b6

0001a4e0 <hci_driver_open>:
{
   1a4e0:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
   1a4e2:	4820      	ldr	r0, [pc, #128]	; (1a564 <hci_driver_open+0x84>)
{
   1a4e4:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
   1a4e6:	f7ff fde9 	bl	1a0bc <ll_init>
	if (err) {
   1a4ea:	4604      	mov	r4, r0
   1a4ec:	b1c0      	cbz	r0, 1a520 <hci_driver_open+0x40>
		BT_ERR("LL initialization failed: %u", err);
   1a4ee:	4b1e      	ldr	r3, [pc, #120]	; (1a568 <hci_driver_open+0x88>)
   1a4f0:	681b      	ldr	r3, [r3, #0]
   1a4f2:	075b      	lsls	r3, r3, #29
   1a4f4:	d011      	beq.n	1a51a <hci_driver_open+0x3a>
   1a4f6:	2201      	movs	r2, #1
   1a4f8:	f04f 0300 	mov.w	r3, #0
   1a4fc:	f362 0302 	bfi	r3, r2, #0, #3
   1a500:	491a      	ldr	r1, [pc, #104]	; (1a56c <hci_driver_open+0x8c>)
   1a502:	4a1b      	ldr	r2, [pc, #108]	; (1a570 <hci_driver_open+0x90>)
   1a504:	1a52      	subs	r2, r2, r1
   1a506:	08d2      	lsrs	r2, r2, #3
   1a508:	f36f 03c5 	bfc	r3, #3, #3
   1a50c:	f362 138f 	bfi	r3, r2, #6, #10
   1a510:	4918      	ldr	r1, [pc, #96]	; (1a574 <hci_driver_open+0x94>)
   1a512:	4602      	mov	r2, r0
   1a514:	4818      	ldr	r0, [pc, #96]	; (1a578 <hci_driver_open+0x98>)
   1a516:	f7e7 fc33 	bl	1d80 <log_2>
}
   1a51a:	4620      	mov	r0, r4
   1a51c:	b006      	add	sp, #24
   1a51e:	bd10      	pop	{r4, pc}
	hci_init(NULL);
   1a520:	f001 fd32 	bl	1bf88 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1a524:	f06f 0309 	mvn.w	r3, #9
   1a528:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a52c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1a530:	e9cd 4400 	strd	r4, r4, [sp]
   1a534:	4b11      	ldr	r3, [pc, #68]	; (1a57c <hci_driver_open+0x9c>)
   1a536:	4912      	ldr	r1, [pc, #72]	; (1a580 <hci_driver_open+0xa0>)
   1a538:	4812      	ldr	r0, [pc, #72]	; (1a584 <hci_driver_open+0xa4>)
   1a53a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1a53e:	f011 ffef 	bl	2c520 <_impl_k_thread_create>
   1a542:	f06f 0307 	mvn.w	r3, #7
   1a546:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a54a:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1a54e:	e9cd 4400 	strd	r4, r4, [sp]
   1a552:	4b0d      	ldr	r3, [pc, #52]	; (1a588 <hci_driver_open+0xa8>)
   1a554:	490d      	ldr	r1, [pc, #52]	; (1a58c <hci_driver_open+0xac>)
   1a556:	480e      	ldr	r0, [pc, #56]	; (1a590 <hci_driver_open+0xb0>)
   1a558:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a55c:	f011 ffe0 	bl	2c520 <_impl_k_thread_create>
   1a560:	e7db      	b.n	1a51a <hci_driver_open+0x3a>
   1a562:	bf00      	nop
   1a564:	2000d8a4 	.word	0x2000d8a4
   1a568:	2000d728 	.word	0x2000d728
   1a56c:	0002cff8 	.word	0x0002cff8
   1a570:	0002d028 	.word	0x0002d028
   1a574:	00031543 	.word	0x00031543
   1a578:	00031568 	.word	0x00031568
   1a57c:	0001a451 	.word	0x0001a451
   1a580:	200078a0 	.word	0x200078a0
   1a584:	2000310c 	.word	0x2000310c
   1a588:	0001a285 	.word	0x0001a285
   1a58c:	20007a60 	.word	0x20007a60
   1a590:	200030a0 	.word	0x200030a0

0001a594 <sys_put_le32>:
   1a594:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1a598:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1a59a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1a59c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1a59e:	0a00      	lsrs	r0, r0, #8
   1a5a0:	704b      	strb	r3, [r1, #1]
   1a5a2:	70c8      	strb	r0, [r1, #3]
}
   1a5a4:	4770      	bx	lr

0001a5a6 <evt_create>:
static void le_conn_complete(struct pdu_data *pdu_data, u16_t handle,
			     struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
   1a5a6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
   1a5a8:	3008      	adds	r0, #8
{
   1a5aa:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a5ac:	2102      	movs	r1, #2
{
   1a5ae:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a5b0:	f003 ffac 	bl	1e50c <net_buf_simple_add>
	hdr->evt = evt;
   1a5b4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   1a5b6:	7044      	strb	r4, [r0, #1]
}
   1a5b8:	bd38      	pop	{r3, r4, r5, pc}
	...

0001a5bc <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
   1a5bc:	b538      	push	{r3, r4, r5, lr}
   1a5be:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5c4:	f7ef f94e 	bl	9864 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1a5c8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a5ca:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1a5cc:	210f      	movs	r1, #15
   1a5ce:	f7ff ffea 	bl	1a5a6 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   1a5d2:	2104      	movs	r1, #4
   1a5d4:	f104 0008 	add.w	r0, r4, #8
   1a5d8:	f003 ff98 	bl	1e50c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
   1a5dc:	2301      	movs	r3, #1
   1a5de:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
   1a5e0:	4b02      	ldr	r3, [pc, #8]	; (1a5ec <cmd_status+0x30>)
	cs->status = status;
   1a5e2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
   1a5e4:	881b      	ldrh	r3, [r3, #0]
   1a5e6:	8043      	strh	r3, [r0, #2]

	return buf;
}
   1a5e8:	4620      	mov	r0, r4
   1a5ea:	bd38      	pop	{r3, r4, r5, pc}
   1a5ec:	20001a9c 	.word	0x20001a9c

0001a5f0 <cmd_complete>:
{
   1a5f0:	b538      	push	{r3, r4, r5, lr}
   1a5f2:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   1a5f8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a5fa:	f7ef f933 	bl	9864 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a5fe:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a600:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a602:	b2d2      	uxtb	r2, r2
   1a604:	210e      	movs	r1, #14
   1a606:	f7ff ffce 	bl	1a5a6 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
   1a60a:	6820      	ldr	r0, [r4, #0]
   1a60c:	2103      	movs	r1, #3
   1a60e:	3008      	adds	r0, #8
   1a610:	f003 ff7c 	bl	1e50c <net_buf_simple_add>
	cc->ncmd = 1;
   1a614:	2301      	movs	r3, #1
   1a616:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   1a618:	4b05      	ldr	r3, [pc, #20]	; (1a630 <cmd_complete+0x40>)
   1a61a:	881b      	ldrh	r3, [r3, #0]
   1a61c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
   1a620:	6820      	ldr	r0, [r4, #0]
   1a622:	4629      	mov	r1, r5
   1a624:	3008      	adds	r0, #8
}
   1a626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   1a62a:	f003 bf6f 	b.w	1e50c <net_buf_simple_add>
   1a62e:	bf00      	nop
   1a630:	20001a9c 	.word	0x20001a9c

0001a634 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
   1a634:	b570      	push	{r4, r5, r6, lr}
   1a636:	4604      	mov	r4, r0
   1a638:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1a63a:	3201      	adds	r2, #1
{
   1a63c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   1a63e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1a640:	b2d2      	uxtb	r2, r2
   1a642:	213e      	movs	r1, #62	; 0x3e
   1a644:	f7ff ffaf 	bl	1a5a6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
   1a648:	2101      	movs	r1, #1
   1a64a:	4620      	mov	r0, r4
   1a64c:	f003 ff5e 	bl	1e50c <net_buf_simple_add>
	me->subevent = subevt;
   1a650:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   1a652:	4629      	mov	r1, r5
   1a654:	4620      	mov	r0, r4
}
   1a656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   1a65a:	f003 bf57 	b.w	1e50c <net_buf_simple_add>
	...

0001a660 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1a660:	4b0f      	ldr	r3, [pc, #60]	; (1a6a0 <encrypt_change+0x40>)
{
   1a662:	b570      	push	{r4, r5, r6, lr}
   1a664:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1a666:	e9d3 2300 	ldrd	r2, r3, [r3]
{
   1a66a:	4604      	mov	r4, r0
   1a66c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1a66e:	f002 0080 	and.w	r0, r2, #128	; 0x80
   1a672:	2100      	movs	r1, #0
   1a674:	ea50 0301 	orrs.w	r3, r0, r1
   1a678:	d010      	beq.n	1a69c <encrypt_change+0x3c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
   1a67a:	2204      	movs	r2, #4
   1a67c:	2108      	movs	r1, #8
   1a67e:	4628      	mov	r0, r5
   1a680:	f7ff ff91 	bl	1a5a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1a684:	2104      	movs	r1, #4
   1a686:	f105 0008 	add.w	r0, r5, #8
   1a68a:	f003 ff3f 	bl	1e50c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   1a68e:	fab4 f384 	clz	r3, r4
   1a692:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   1a694:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1a696:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1a69a:	70c3      	strb	r3, [r0, #3]
}
   1a69c:	bd70      	pop	{r4, r5, r6, pc}
   1a69e:	bf00      	nop
   1a6a0:	2000d0b0 	.word	0x2000d0b0

0001a6a4 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   1a6a4:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   1a6a8:	4604      	mov	r4, r0
   1a6aa:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a6ac:	4b15      	ldr	r3, [pc, #84]	; (1a704 <le_remote_feat_complete+0x60>)
{
   1a6ae:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6b4:	f04f 0b00 	mov.w	fp, #0
   1a6b8:	f003 5c00 	and.w	ip, r3, #536870912	; 0x20000000
   1a6bc:	ea5b 030c 	orrs.w	r3, fp, ip
{
   1a6c0:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a6c2:	d01d      	beq.n	1a700 <le_remote_feat_complete+0x5c>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1a6c4:	4b10      	ldr	r3, [pc, #64]	; (1a708 <le_remote_feat_complete+0x64>)
   1a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6ca:	f04f 0c00 	mov.w	ip, #0
   1a6ce:	f002 0b08 	and.w	fp, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a6d2:	ea5b 030c 	orrs.w	r3, fp, ip
   1a6d6:	d013      	beq.n	1a700 <le_remote_feat_complete+0x5c>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   1a6d8:	220b      	movs	r2, #11
   1a6da:	2104      	movs	r1, #4
   1a6dc:	f7ff ffaa 	bl	1a634 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   1a6e0:	2208      	movs	r2, #8
	sep->status = status;
   1a6e2:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1a6e4:	f8a0 6001 	strh.w	r6, [r0, #1]
   1a6e8:	3003      	adds	r0, #3
	if (!status) {
   1a6ea:	b924      	cbnz	r4, 1a6f6 <le_remote_feat_complete+0x52>
		memcpy(&sep->features[0],
   1a6ec:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1a6ee:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memcpy(&sep->features[0],
   1a6f2:	f7eb bbc9 	b.w	5e88 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1a6f6:	2100      	movs	r1, #0
}
   1a6f8:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1a6fc:	f7eb bbf1 	b.w	5ee2 <memset>
}
   1a700:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   1a704:	2000d0b0 	.word	0x2000d0b0
   1a708:	2000d0b8 	.word	0x2000d0b8

0001a70c <bt_addr_le_to_str.constprop.77>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1a70c:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   1a70e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1a710:	b08a      	sub	sp, #40	; 0x28
   1a712:	4604      	mov	r4, r0
   1a714:	460e      	mov	r6, r1
   1a716:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   1a718:	2b03      	cmp	r3, #3
   1a71a:	d820      	bhi.n	1a75e <bt_addr_le_to_str.constprop.77+0x52>
   1a71c:	e8df f003 	tbb	[pc, r3]
   1a720:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   1a724:	4911      	ldr	r1, [pc, #68]	; (1a76c <bt_addr_le_to_str.constprop.77+0x60>)
		strcpy(type, "random");
   1a726:	4628      	mov	r0, r5
   1a728:	f7eb fb20 	bl	5d6c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1a72c:	7862      	ldrb	r2, [r4, #1]
   1a72e:	9204      	str	r2, [sp, #16]
   1a730:	78a2      	ldrb	r2, [r4, #2]
   1a732:	9203      	str	r2, [sp, #12]
   1a734:	78e2      	ldrb	r2, [r4, #3]
   1a736:	9202      	str	r2, [sp, #8]
   1a738:	7922      	ldrb	r2, [r4, #4]
   1a73a:	9201      	str	r2, [sp, #4]
   1a73c:	7962      	ldrb	r2, [r4, #5]
   1a73e:	9200      	str	r2, [sp, #0]
   1a740:	79a3      	ldrb	r3, [r4, #6]
   1a742:	9505      	str	r5, [sp, #20]
   1a744:	4a0a      	ldr	r2, [pc, #40]	; (1a770 <bt_addr_le_to_str.constprop.77+0x64>)
   1a746:	211b      	movs	r1, #27
   1a748:	4630      	mov	r0, r6
   1a74a:	f7e6 fcdf 	bl	110c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1a74e:	b00a      	add	sp, #40	; 0x28
   1a750:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1a752:	4908      	ldr	r1, [pc, #32]	; (1a774 <bt_addr_le_to_str.constprop.77+0x68>)
   1a754:	e7e7      	b.n	1a726 <bt_addr_le_to_str.constprop.77+0x1a>
		strcpy(type, "public id");
   1a756:	4908      	ldr	r1, [pc, #32]	; (1a778 <bt_addr_le_to_str.constprop.77+0x6c>)
   1a758:	e7e5      	b.n	1a726 <bt_addr_le_to_str.constprop.77+0x1a>
		strcpy(type, "random id");
   1a75a:	4908      	ldr	r1, [pc, #32]	; (1a77c <bt_addr_le_to_str.constprop.77+0x70>)
   1a75c:	e7e3      	b.n	1a726 <bt_addr_le_to_str.constprop.77+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1a75e:	4a08      	ldr	r2, [pc, #32]	; (1a780 <bt_addr_le_to_str.constprop.77+0x74>)
   1a760:	210a      	movs	r1, #10
   1a762:	4628      	mov	r0, r5
   1a764:	f7e6 fcd2 	bl	110c <snprintk>
   1a768:	e7e0      	b.n	1a72c <bt_addr_le_to_str.constprop.77+0x20>
   1a76a:	bf00      	nop
   1a76c:	0002e7eb 	.word	0x0002e7eb
   1a770:	0002e80d 	.word	0x0002e80d
   1a774:	0002e7f2 	.word	0x0002e7f2
   1a778:	0002e7f9 	.word	0x0002e7f9
   1a77c:	0002e803 	.word	0x0002e803
   1a780:	000317f3 	.word	0x000317f3

0001a784 <le_adv_ext_report.isra.73>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
   1a784:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1a786:	4d4f      	ldr	r5, [pc, #316]	; (1a8c4 <le_adv_ext_report.isra.73+0x140>)
   1a788:	682b      	ldr	r3, [r5, #0]
   1a78a:	f003 0307 	and.w	r3, r3, #7
   1a78e:	2b01      	cmp	r3, #1
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
   1a790:	b08d      	sub	sp, #52	; 0x34
   1a792:	4604      	mov	r4, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1a794:	d924      	bls.n	1a7e0 <le_adv_ext_report.isra.73+0x5c>
		  offsetof(struct pdu_adv, payload) + adv->len];
   1a796:	7846      	ldrb	r6, [r0, #1]
   1a798:	4f4b      	ldr	r7, [pc, #300]	; (1a8c8 <le_adv_ext_report.isra.73+0x144>)
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1a79a:	2002      	movs	r0, #2
   1a79c:	f04f 0300 	mov.w	r3, #0
   1a7a0:	f360 0302 	bfi	r3, r0, #0, #3
   1a7a4:	4849      	ldr	r0, [pc, #292]	; (1a8cc <le_adv_ext_report.isra.73+0x148>)
   1a7a6:	1bc0      	subs	r0, r0, r7
   1a7a8:	08c0      	lsrs	r0, r0, #3
   1a7aa:	f36f 03c5 	bfc	r3, #3, #3
   1a7ae:	f360 138f 	bfi	r3, r0, #6, #10
   1a7b2:	4847      	ldr	r0, [pc, #284]	; (1a8d0 <le_adv_ext_report.isra.73+0x14c>)
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1a7b4:	4431      	add	r1, r6
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1a7b6:	e9cd 0205 	strd	r0, r2, [sp, #20]
   1a7ba:	7822      	ldrb	r2, [r4, #0]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1a7bc:	7a89      	ldrb	r1, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1a7be:	f002 000f 	and.w	r0, r2, #15
   1a7c2:	e9cd 0607 	strd	r0, r6, [sp, #28]
   1a7c6:	f3c2 1080 	ubfx	r0, r2, #6, #1
   1a7ca:	09d2      	lsrs	r2, r2, #7
   1a7cc:	920a      	str	r2, [sp, #40]	; 0x28
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1a7ce:	424a      	negs	r2, r1
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
   1a7d0:	b252      	sxtb	r2, r2
   1a7d2:	9009      	str	r0, [sp, #36]	; 0x24
   1a7d4:	920b      	str	r2, [sp, #44]	; 0x2c
   1a7d6:	a905      	add	r1, sp, #20
   1a7d8:	2207      	movs	r2, #7
   1a7da:	483e      	ldr	r0, [pc, #248]	; (1a8d4 <le_adv_ext_report.isra.73+0x150>)
   1a7dc:	f7e7 fb03 	bl	1de6 <log_n>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
   1a7e0:	7823      	ldrb	r3, [r4, #0]
   1a7e2:	f003 030f 	and.w	r3, r3, #15
   1a7e6:	2b07      	cmp	r3, #7
   1a7e8:	d16a      	bne.n	1a8c0 <le_adv_ext_report.isra.73+0x13c>
   1a7ea:	7863      	ldrb	r3, [r4, #1]
   1a7ec:	2b00      	cmp	r3, #0
   1a7ee:	d067      	beq.n	1a8c0 <le_adv_ext_report.isra.73+0x13c>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
   1a7f0:	682b      	ldr	r3, [r5, #0]
   1a7f2:	f003 0307 	and.w	r3, r3, #7
   1a7f6:	2b01      	cmp	r3, #1
   1a7f8:	d916      	bls.n	1a828 <le_adv_ext_report.isra.73+0xa4>
   1a7fa:	2302      	movs	r3, #2
   1a7fc:	f04f 0100 	mov.w	r1, #0
   1a800:	f363 0102 	bfi	r1, r3, #0, #3
   1a804:	4a30      	ldr	r2, [pc, #192]	; (1a8c8 <le_adv_ext_report.isra.73+0x144>)
   1a806:	4b31      	ldr	r3, [pc, #196]	; (1a8cc <le_adv_ext_report.isra.73+0x148>)
   1a808:	4833      	ldr	r0, [pc, #204]	; (1a8d8 <le_adv_ext_report.isra.73+0x154>)
   1a80a:	1a9b      	subs	r3, r3, r2
   1a80c:	08db      	lsrs	r3, r3, #3
   1a80e:	78a2      	ldrb	r2, [r4, #2]
   1a810:	f36f 01c5 	bfc	r1, #3, #3
   1a814:	f363 118f 	bfi	r1, r3, #6, #10
   1a818:	f8ad 1000 	strh.w	r1, [sp]
   1a81c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
   1a820:	492b      	ldr	r1, [pc, #172]	; (1a8d0 <le_adv_ext_report.isra.73+0x14c>)
   1a822:	0992      	lsrs	r2, r2, #6
   1a824:	f7e7 fac4 	bl	1db0 <log_3>
		if (!p->ext_hdr_len) {
   1a828:	78a3      	ldrb	r3, [r4, #2]
   1a82a:	0699      	lsls	r1, r3, #26
   1a82c:	d048      	beq.n	1a8c0 <le_adv_ext_report.isra.73+0x13c>
		if (h->adv_addr) {
   1a82e:	78e3      	ldrb	r3, [r4, #3]
   1a830:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
   1a832:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
   1a836:	d528      	bpl.n	1a88a <le_adv_ext_report.isra.73+0x106>
			addr.type = adv->tx_addr;
   1a838:	7823      	ldrb	r3, [r4, #0]
   1a83a:	af0c      	add	r7, sp, #48	; 0x30
   1a83c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a840:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
   1a844:	4631      	mov	r1, r6
   1a846:	2206      	movs	r2, #6
   1a848:	f10d 000d 	add.w	r0, sp, #13
   1a84c:	f7eb fb1c 	bl	5e88 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1a850:	a905      	add	r1, sp, #20
   1a852:	4638      	mov	r0, r7
   1a854:	f7ff ff5a 	bl	1a70c <bt_addr_le_to_str.constprop.77>
			BT_WARN("AdvA: %s", addr_str);
   1a858:	682b      	ldr	r3, [r5, #0]
   1a85a:	f003 0307 	and.w	r3, r3, #7
   1a85e:	2b01      	cmp	r3, #1
			ptr += BDADDR_SIZE;
   1a860:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
   1a864:	d911      	bls.n	1a88a <le_adv_ext_report.isra.73+0x106>
   1a866:	2202      	movs	r2, #2
   1a868:	f04f 0300 	mov.w	r3, #0
   1a86c:	f362 0302 	bfi	r3, r2, #0, #3
   1a870:	4915      	ldr	r1, [pc, #84]	; (1a8c8 <le_adv_ext_report.isra.73+0x144>)
   1a872:	4a16      	ldr	r2, [pc, #88]	; (1a8cc <le_adv_ext_report.isra.73+0x148>)
   1a874:	4819      	ldr	r0, [pc, #100]	; (1a8dc <le_adv_ext_report.isra.73+0x158>)
   1a876:	1a52      	subs	r2, r2, r1
   1a878:	08d2      	lsrs	r2, r2, #3
   1a87a:	f36f 03c5 	bfc	r3, #3, #3
   1a87e:	f362 138f 	bfi	r3, r2, #6, #10
   1a882:	4913      	ldr	r1, [pc, #76]	; (1a8d0 <le_adv_ext_report.isra.73+0x14c>)
   1a884:	aa05      	add	r2, sp, #20
   1a886:	f7e7 fa7b 	bl	1d80 <log_2>
		if (h->tx_pwr) {
   1a88a:	78e3      	ldrb	r3, [r4, #3]
   1a88c:	065b      	lsls	r3, r3, #25
   1a88e:	d517      	bpl.n	1a8c0 <le_adv_ext_report.isra.73+0x13c>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
   1a890:	682b      	ldr	r3, [r5, #0]
   1a892:	f003 0307 	and.w	r3, r3, #7
   1a896:	2b01      	cmp	r3, #1
   1a898:	d912      	bls.n	1a8c0 <le_adv_ext_report.isra.73+0x13c>
   1a89a:	2202      	movs	r2, #2
   1a89c:	f04f 0300 	mov.w	r3, #0
   1a8a0:	f362 0302 	bfi	r3, r2, #0, #3
   1a8a4:	4908      	ldr	r1, [pc, #32]	; (1a8c8 <le_adv_ext_report.isra.73+0x144>)
   1a8a6:	4a09      	ldr	r2, [pc, #36]	; (1a8cc <le_adv_ext_report.isra.73+0x148>)
   1a8a8:	480d      	ldr	r0, [pc, #52]	; (1a8e0 <le_adv_ext_report.isra.73+0x15c>)
   1a8aa:	1a52      	subs	r2, r2, r1
   1a8ac:	08d2      	lsrs	r2, r2, #3
   1a8ae:	f36f 03c5 	bfc	r3, #3, #3
   1a8b2:	f362 138f 	bfi	r3, r2, #6, #10
   1a8b6:	4906      	ldr	r1, [pc, #24]	; (1a8d0 <le_adv_ext_report.isra.73+0x14c>)
   1a8b8:	f996 2000 	ldrsb.w	r2, [r6]
   1a8bc:	f7e7 fa60 	bl	1d80 <log_2>
}
   1a8c0:	b00d      	add	sp, #52	; 0x34
   1a8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8c4:	2000d724 	.word	0x2000d724
   1a8c8:	0002cff8 	.word	0x0002cff8
   1a8cc:	0002d020 	.word	0x0002d020
   1a8d0:	0003162a 	.word	0x0003162a
   1a8d4:	000317fa 	.word	0x000317fa
   1a8d8:	0003183b 	.word	0x0003183b
   1a8dc:	00031860 	.word	0x00031860
   1a8e0:	0003186d 	.word	0x0003186d

0001a8e4 <sys_get_le64>:
{
   1a8e4:	4603      	mov	r3, r0
}
   1a8e6:	6800      	ldr	r0, [r0, #0]
   1a8e8:	6859      	ldr	r1, [r3, #4]
   1a8ea:	4770      	bx	lr

0001a8ec <hci_cmd_handle>:
{
   1a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8ee:	460e      	mov	r6, r1
	if (cmd->len < sizeof(*chdr)) {
   1a8f0:	8981      	ldrh	r1, [r0, #12]
{
   1a8f2:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
   1a8f4:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   1a8f6:	2902      	cmp	r1, #2
{
   1a8f8:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   1a8fa:	950c      	str	r5, [sp, #48]	; 0x30
	if (cmd->len < sizeof(*chdr)) {
   1a8fc:	d818      	bhi.n	1a930 <hci_cmd_handle+0x44>
		BT_ERR("No HCI Command header");
   1a8fe:	4bc3      	ldr	r3, [pc, #780]	; (1ac0c <hci_cmd_handle+0x320>)
   1a900:	681b      	ldr	r3, [r3, #0]
   1a902:	075c      	lsls	r4, r3, #29
   1a904:	d102      	bne.n	1a90c <hci_cmd_handle+0x20>
		return NULL;
   1a906:	2000      	movs	r0, #0
}
   1a908:	b013      	add	sp, #76	; 0x4c
   1a90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI Command header");
   1a90c:	2301      	movs	r3, #1
   1a90e:	f04f 0200 	mov.w	r2, #0
   1a912:	f363 0202 	bfi	r2, r3, #0, #3
   1a916:	49be      	ldr	r1, [pc, #760]	; (1ac10 <hci_cmd_handle+0x324>)
   1a918:	4bbe      	ldr	r3, [pc, #760]	; (1ac14 <hci_cmd_handle+0x328>)
   1a91a:	48bf      	ldr	r0, [pc, #764]	; (1ac18 <hci_cmd_handle+0x32c>)
   1a91c:	1a5b      	subs	r3, r3, r1
   1a91e:	f365 02c5 	bfi	r2, r5, #3, #3
   1a922:	08db      	lsrs	r3, r3, #3
   1a924:	49bd      	ldr	r1, [pc, #756]	; (1ac1c <hci_cmd_handle+0x330>)
   1a926:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Invalid HCI CMD packet length");
   1a92a:	f7e7 fa15 	bl	1d58 <log_1>
   1a92e:	e7ea      	b.n	1a906 <hci_cmd_handle+0x1a>
	chdr = (void *)cmd->data;
   1a930:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1a932:	4fbb      	ldr	r7, [pc, #748]	; (1ac20 <hci_cmd_handle+0x334>)
   1a934:	781a      	ldrb	r2, [r3, #0]
   1a936:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
   1a938:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1a93a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
   1a93e:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1a940:	803a      	strh	r2, [r7, #0]
	if (cmd->len < chdr->param_len) {
   1a942:	d913      	bls.n	1a96c <hci_cmd_handle+0x80>
		BT_ERR("Invalid HCI CMD packet length");
   1a944:	4bb1      	ldr	r3, [pc, #708]	; (1ac0c <hci_cmd_handle+0x320>)
   1a946:	681b      	ldr	r3, [r3, #0]
   1a948:	0758      	lsls	r0, r3, #29
   1a94a:	d0dc      	beq.n	1a906 <hci_cmd_handle+0x1a>
   1a94c:	2301      	movs	r3, #1
   1a94e:	f04f 0200 	mov.w	r2, #0
   1a952:	f363 0202 	bfi	r2, r3, #0, #3
   1a956:	49ae      	ldr	r1, [pc, #696]	; (1ac10 <hci_cmd_handle+0x324>)
   1a958:	4bae      	ldr	r3, [pc, #696]	; (1ac14 <hci_cmd_handle+0x328>)
   1a95a:	48b2      	ldr	r0, [pc, #712]	; (1ac24 <hci_cmd_handle+0x338>)
   1a95c:	1a5b      	subs	r3, r3, r1
   1a95e:	f365 02c5 	bfi	r2, r5, #3, #3
   1a962:	08db      	lsrs	r3, r3, #3
   1a964:	f363 128f 	bfi	r2, r3, #6, #10
   1a968:	49ac      	ldr	r1, [pc, #688]	; (1ac1c <hci_cmd_handle+0x330>)
   1a96a:	e7de      	b.n	1a92a <hci_cmd_handle+0x3e>
	net_buf_pull(cmd, sizeof(*chdr));
   1a96c:	2103      	movs	r1, #3
   1a96e:	f104 0008 	add.w	r0, r4, #8
   1a972:	f003 fe1b 	bl	1e5ac <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
   1a976:	883b      	ldrh	r3, [r7, #0]
   1a978:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   1a97c:	0a9b      	lsrs	r3, r3, #10
   1a97e:	2b04      	cmp	r3, #4
   1a980:	f000 80bf 	beq.w	1ab02 <hci_cmd_handle+0x216>
   1a984:	d809      	bhi.n	1a99a <hci_cmd_handle+0xae>
   1a986:	2b01      	cmp	r3, #1
   1a988:	d026      	beq.n	1a9d8 <hci_cmd_handle+0xec>
   1a98a:	2b03      	cmp	r3, #3
   1a98c:	d03a      	beq.n	1aa04 <hci_cmd_handle+0x118>
		ccst = cmd_complete(&evt, sizeof(*ccst));
   1a98e:	2101      	movs	r1, #1
   1a990:	a80c      	add	r0, sp, #48	; 0x30
   1a992:	f7ff fe2d 	bl	1a5f0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   1a996:	2301      	movs	r3, #1
   1a998:	e057      	b.n	1aa4a <hci_cmd_handle+0x15e>
	switch (BT_OGF(_opcode)) {
   1a99a:	2b08      	cmp	r3, #8
   1a99c:	f000 8166 	beq.w	1ac6c <hci_cmd_handle+0x380>
   1a9a0:	2b3f      	cmp	r3, #63	; 0x3f
   1a9a2:	d1f4      	bne.n	1a98e <hci_cmd_handle+0xa2>
	switch (ocf) {
   1a9a4:	3a01      	subs	r2, #1
   1a9a6:	2a09      	cmp	r2, #9
   1a9a8:	d8f1      	bhi.n	1a98e <hci_cmd_handle+0xa2>
   1a9aa:	a301      	add	r3, pc, #4	; (adr r3, 1a9b0 <hci_cmd_handle+0xc4>)
   1a9ac:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1a9b0:	0001b20d 	.word	0x0001b20d
   1a9b4:	0001b23b 	.word	0x0001b23b
   1a9b8:	0001b263 	.word	0x0001b263
   1a9bc:	0001a98f 	.word	0x0001a98f
   1a9c0:	0001a98f 	.word	0x0001a98f
   1a9c4:	0001b2af 	.word	0x0001b2af
   1a9c8:	0001a98f 	.word	0x0001a98f
   1a9cc:	0001b279 	.word	0x0001b279
   1a9d0:	0001b2bb 	.word	0x0001b2bb
   1a9d4:	0001b32d 	.word	0x0001b32d
	switch (ocf) {
   1a9d8:	2a06      	cmp	r2, #6
   1a9da:	d006      	beq.n	1a9ea <hci_cmd_handle+0xfe>
   1a9dc:	2a1d      	cmp	r2, #29
   1a9de:	d1d6      	bne.n	1a98e <hci_cmd_handle+0xa2>
	handle = sys_le16_to_cpu(cmd->handle);
   1a9e0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   1a9e2:	8818      	ldrh	r0, [r3, #0]
   1a9e4:	f7fe fc65 	bl	192b2 <ll_version_ind_send>
   1a9e8:	e004      	b.n	1a9f4 <hci_cmd_handle+0x108>
		disconnect(cmd, evt);
   1a9ea:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1a9ec:	7899      	ldrb	r1, [r3, #2]
   1a9ee:	8818      	ldrh	r0, [r3, #0]
   1a9f0:	f7fe fc73 	bl	192da <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
   1a9f4:	2800      	cmp	r0, #0
   1a9f6:	bf14      	ite	ne
   1a9f8:	200c      	movne	r0, #12
   1a9fa:	2000      	moveq	r0, #0
   1a9fc:	f7ff fdde 	bl	1a5bc <cmd_status>
   1aa00:	900c      	str	r0, [sp, #48]	; 0x30
   1aa02:	e03c      	b.n	1aa7e <hci_cmd_handle+0x192>
	switch (ocf) {
   1aa04:	2a2d      	cmp	r2, #45	; 0x2d
   1aa06:	d03c      	beq.n	1aa82 <hci_cmd_handle+0x196>
   1aa08:	d821      	bhi.n	1aa4e <hci_cmd_handle+0x162>
   1aa0a:	2a01      	cmp	r2, #1
   1aa0c:	d02c      	beq.n	1aa68 <hci_cmd_handle+0x17c>
   1aa0e:	2a03      	cmp	r2, #3
   1aa10:	d1bd      	bne.n	1a98e <hci_cmd_handle+0xa2>
	dup_count = -1;
   1aa12:	4b85      	ldr	r3, [pc, #532]	; (1ac28 <hci_cmd_handle+0x33c>)
   1aa14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aa18:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
   1aa1a:	4b84      	ldr	r3, [pc, #528]	; (1ac2c <hci_cmd_handle+0x340>)
   1aa1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa20:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1aa24:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1aa28:	4b81      	ldr	r3, [pc, #516]	; (1ac30 <hci_cmd_handle+0x344>)
   1aa2a:	2000      	movs	r0, #0
   1aa2c:	2100      	movs	r1, #0
   1aa2e:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1aa32:	4b80      	ldr	r3, [pc, #512]	; (1ac34 <hci_cmd_handle+0x348>)
   1aa34:	201f      	movs	r0, #31
   1aa36:	2100      	movs	r1, #0
   1aa38:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   1aa3c:	f7fe f8a8 	bl	18b90 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1aa40:	2101      	movs	r1, #1
   1aa42:	a80c      	add	r0, sp, #48	; 0x30
   1aa44:	f7ff fdd4 	bl	1a5f0 <cmd_complete>
	ccst->status = 0x00;
   1aa48:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   1aa4a:	7003      	strb	r3, [r0, #0]
   1aa4c:	e017      	b.n	1aa7e <hci_cmd_handle+0x192>
	switch (ocf) {
   1aa4e:	2a7b      	cmp	r2, #123	; 0x7b
   1aa50:	d02d      	beq.n	1aaae <hci_cmd_handle+0x1c2>
   1aa52:	2a7c      	cmp	r2, #124	; 0x7c
   1aa54:	d042      	beq.n	1aadc <hci_cmd_handle+0x1f0>
   1aa56:	2a63      	cmp	r2, #99	; 0x63
   1aa58:	d199      	bne.n	1a98e <hci_cmd_handle+0xa2>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1aa5a:	68a0      	ldr	r0, [r4, #8]
   1aa5c:	f7ff ff42 	bl	1a8e4 <sys_get_le64>
   1aa60:	4b73      	ldr	r3, [pc, #460]	; (1ac30 <hci_cmd_handle+0x344>)
   1aa62:	e9c3 0100 	strd	r0, r1, [r3]
   1aa66:	e7eb      	b.n	1aa40 <hci_cmd_handle+0x154>
	event_mask = sys_get_le64(cmd->events);
   1aa68:	68a0      	ldr	r0, [r4, #8]
   1aa6a:	f7ff ff3b 	bl	1a8e4 <sys_get_le64>
   1aa6e:	4b6f      	ldr	r3, [pc, #444]	; (1ac2c <hci_cmd_handle+0x340>)
   1aa70:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
   1aa74:	4611      	mov	r1, r2
   1aa76:	a80c      	add	r0, sp, #48	; 0x30
   1aa78:	f7ff fdba 	bl	1a5f0 <cmd_complete>
	ccst->status = 0x00;
   1aa7c:	7005      	strb	r5, [r0, #0]
	return evt;
   1aa7e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1aa80:	e742      	b.n	1a908 <hci_cmd_handle+0x1c>
		read_tx_power_level(cmd, evt);
   1aa82:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1aa84:	2104      	movs	r1, #4
   1aa86:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
   1aa88:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   1aa8a:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
   1aa8c:	f7ff fdb0 	bl	1a5f0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1aa90:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   1aa92:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
   1aa94:	1cc2      	adds	r2, r0, #3
   1aa96:	4639      	mov	r1, r7
   1aa98:	4630      	mov	r0, r6
   1aa9a:	f7fe fc32 	bl	19302 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aa9e:	2800      	cmp	r0, #0
   1aaa0:	bf14      	ite	ne
   1aaa2:	2302      	movne	r3, #2
   1aaa4:	2300      	moveq	r3, #0
   1aaa6:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   1aaa8:	f8a4 5001 	strh.w	r5, [r4, #1]
   1aaac:	e7e7      	b.n	1aa7e <hci_cmd_handle+0x192>
	handle = sys_le16_to_cpu(cmd->handle);
   1aaae:	68a3      	ldr	r3, [r4, #8]
   1aab0:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   1aab2:	a90d      	add	r1, sp, #52	; 0x34
   1aab4:	4620      	mov	r0, r4
   1aab6:	f7fe fc2e 	bl	19316 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
   1aaba:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1aabc:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   1aabe:	a80c      	add	r0, sp, #48	; 0x30
   1aac0:	f7ff fd96 	bl	1a5f0 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1aac4:	2d00      	cmp	r5, #0
   1aac6:	bf14      	ite	ne
   1aac8:	230c      	movne	r3, #12
   1aaca:	2300      	moveq	r3, #0
   1aacc:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1aace:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1aad2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1aad6:	f8a0 3003 	strh.w	r3, [r0, #3]
   1aada:	e7d0      	b.n	1aa7e <hci_cmd_handle+0x192>
		write_auth_payload_timeout(cmd, evt);
   1aadc:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1aade:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1aae0:	8859      	ldrh	r1, [r3, #2]
   1aae2:	4620      	mov	r0, r4
   1aae4:	f7fe fc2b 	bl	1933e <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1aae8:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   1aaea:	2103      	movs	r1, #3
   1aaec:	a80c      	add	r0, sp, #48	; 0x30
   1aaee:	f7ff fd7f 	bl	1a5f0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1aaf2:	2d00      	cmp	r5, #0
   1aaf4:	bf14      	ite	ne
   1aaf6:	230c      	movne	r3, #12
   1aaf8:	2300      	moveq	r3, #0
   1aafa:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1aafc:	f8a0 4001 	strh.w	r4, [r0, #1]
   1ab00:	e7bd      	b.n	1aa7e <hci_cmd_handle+0x192>
	switch (ocf) {
   1ab02:	3a01      	subs	r2, #1
   1ab04:	2a08      	cmp	r2, #8
   1ab06:	f63f af42 	bhi.w	1a98e <hci_cmd_handle+0xa2>
   1ab0a:	a301      	add	r3, pc, #4	; (adr r3, 1ab10 <hci_cmd_handle+0x224>)
   1ab0c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1ab10:	0001ab35 	.word	0x0001ab35
   1ab14:	0001ab5f 	.word	0x0001ab5f
   1ab18:	0001ac39 	.word	0x0001ac39
   1ab1c:	0001a98f 	.word	0x0001a98f
   1ab20:	0001a98f 	.word	0x0001a98f
   1ab24:	0001a98f 	.word	0x0001a98f
   1ab28:	0001a98f 	.word	0x0001a98f
   1ab2c:	0001a98f 	.word	0x0001a98f
   1ab30:	0001ac55 	.word	0x0001ac55
	rp = cmd_complete(evt, sizeof(*rp));
   1ab34:	2109      	movs	r1, #9
   1ab36:	a80c      	add	r0, sp, #48	; 0x30
   1ab38:	f7ff fd5a 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ab3c:	2300      	movs	r3, #0
   1ab3e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   1ab40:	7083      	strb	r3, [r0, #2]
   1ab42:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
   1ab44:	f06f 030e 	mvn.w	r3, #14
   1ab48:	7143      	strb	r3, [r0, #5]
   1ab4a:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
   1ab4c:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
   1ab4e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
   1ab50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
   1ab54:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
   1ab56:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
   1ab58:	71c3      	strb	r3, [r0, #7]
   1ab5a:	7203      	strb	r3, [r0, #8]
   1ab5c:	e78f      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1ab5e:	2141      	movs	r1, #65	; 0x41
   1ab60:	a80c      	add	r0, sp, #48	; 0x30
   1ab62:	f7ff fd45 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ab66:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1ab68:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1ab6a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1ab6c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1ab70:	f7eb f9b7 	bl	5ee2 <memset>
	rp->commands[2] |= BIT(7);
   1ab74:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1ab76:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
   1ab78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ab7c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
   1ab7e:	79a3      	ldrb	r3, [r4, #6]
   1ab80:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ab84:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   1ab86:	7ae3      	ldrb	r3, [r4, #11]
   1ab88:	f043 0304 	orr.w	r3, r3, #4
   1ab8c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1ab8e:	7be3      	ldrb	r3, [r4, #15]
   1ab90:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1ab94:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   1ab96:	7c23      	ldrb	r3, [r4, #16]
   1ab98:	f043 0302 	orr.w	r3, r3, #2
   1ab9c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   1ab9e:	7de3      	ldrb	r3, [r4, #23]
   1aba0:	f043 0304 	orr.w	r3, r3, #4
   1aba4:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
   1aba6:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(1) | BIT(2);
   1aba8:	f043 030f 	orr.w	r3, r3, #15
   1abac:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
   1abae:	7863      	ldrb	r3, [r4, #1]
   1abb0:	f043 0320 	orr.w	r3, r3, #32
   1abb4:	7063      	strb	r3, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
   1abb6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
   1abba:	f063 030f 	orn	r3, r3, #15
   1abbe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
   1abc2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1abc6:	f062 0208 	orn	r2, r2, #8
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1abca:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1abce:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
   1abd0:	22ff      	movs	r2, #255	; 0xff
   1abd2:	76e2      	strb	r2, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1abd4:	7722      	strb	r2, [r4, #28]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1abd6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   1abda:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   1abde:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
   1abe2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
   1abe6:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
   1abea:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   1abee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1abf2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
   1abf6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1abfa:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
   1abfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1ac02:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
   1ac06:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   1ac0a:	e738      	b.n	1aa7e <hci_cmd_handle+0x192>
   1ac0c:	2000d724 	.word	0x2000d724
   1ac10:	0002cff8 	.word	0x0002cff8
   1ac14:	0002d020 	.word	0x0002d020
   1ac18:	00031709 	.word	0x00031709
   1ac1c:	000315f6 	.word	0x000315f6
   1ac20:	20001a9c 	.word	0x20001a9c
   1ac24:	00031723 	.word	0x00031723
   1ac28:	20001aa4 	.word	0x20001aa4
   1ac2c:	2000d0b0 	.word	0x2000d0b0
   1ac30:	20001b30 	.word	0x20001b30
   1ac34:	2000d0b8 	.word	0x2000d0b8
	rp = cmd_complete(evt, sizeof(*rp));
   1ac38:	2109      	movs	r1, #9
   1ac3a:	a80c      	add	r0, sp, #48	; 0x30
   1ac3c:	f7ff fcd8 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ac40:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1ac42:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1ac44:	2208      	movs	r2, #8
	rp->status = 0x00;
   1ac46:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1ac4a:	f7eb f94a 	bl	5ee2 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   1ac4e:	2360      	movs	r3, #96	; 0x60
   1ac50:	7163      	strb	r3, [r4, #5]
   1ac52:	e714      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1ac54:	2107      	movs	r1, #7
   1ac56:	a80c      	add	r0, sp, #48	; 0x30
   1ac58:	f7ff fcca 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ac5c:	4601      	mov	r1, r0
   1ac5e:	2300      	movs	r3, #0
   1ac60:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1ac64:	4618      	mov	r0, r3
   1ac66:	f7f6 fc25 	bl	114b4 <ll_addr_get>
   1ac6a:	e708      	b.n	1aa7e <hci_cmd_handle+0x192>
	switch (ocf) {
   1ac6c:	3a01      	subs	r2, #1
   1ac6e:	2a4d      	cmp	r2, #77	; 0x4d
   1ac70:	f63f ae8d 	bhi.w	1a98e <hci_cmd_handle+0xa2>
   1ac74:	a301      	add	r3, pc, #4	; (adr r3, 1ac7c <hci_cmd_handle+0x390>)
   1ac76:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1ac7a:	bf00      	nop
   1ac7c:	0001adb5 	.word	0x0001adb5
   1ac80:	0001adbf 	.word	0x0001adbf
   1ac84:	0001add7 	.word	0x0001add7
   1ac88:	0001a98f 	.word	0x0001a98f
   1ac8c:	0001adfb 	.word	0x0001adfb
   1ac90:	0001aeab 	.word	0x0001aeab
   1ac94:	0001b31b 	.word	0x0001b31b
   1ac98:	0001aedb 	.word	0x0001aedb
   1ac9c:	0001aee7 	.word	0x0001aee7
   1aca0:	0001aef3 	.word	0x0001aef3
   1aca4:	0001af11 	.word	0x0001af11
   1aca8:	0001af29 	.word	0x0001af29
   1acac:	0001af49 	.word	0x0001af49
   1acb0:	0001af73 	.word	0x0001af73
   1acb4:	0001ae11 	.word	0x0001ae11
   1acb8:	0001ae27 	.word	0x0001ae27
   1acbc:	0001ae39 	.word	0x0001ae39
   1acc0:	0001ae41 	.word	0x0001ae41
   1acc4:	0001afd5 	.word	0x0001afd5
   1acc8:	0001af7b 	.word	0x0001af7b
   1accc:	0001afb1 	.word	0x0001afb1
   1acd0:	0001afcb 	.word	0x0001afcb
   1acd4:	0001ae49 	.word	0x0001ae49
   1acd8:	0001ae6f 	.word	0x0001ae6f
   1acdc:	0001af83 	.word	0x0001af83
   1ace0:	0001af97 	.word	0x0001af97
   1ace4:	0001afa7 	.word	0x0001afa7
   1ace8:	0001ae85 	.word	0x0001ae85
   1acec:	0001a98f 	.word	0x0001a98f
   1acf0:	0001a98f 	.word	0x0001a98f
   1acf4:	0001a98f 	.word	0x0001a98f
   1acf8:	0001afef 	.word	0x0001afef
   1acfc:	0001b015 	.word	0x0001b015
   1ad00:	0001b023 	.word	0x0001b023
   1ad04:	0001b033 	.word	0x0001b033
   1ad08:	0001b04b 	.word	0x0001b04b
   1ad0c:	0001a98f 	.word	0x0001a98f
   1ad10:	0001a98f 	.word	0x0001a98f
   1ad14:	0001b157 	.word	0x0001b157
   1ad18:	0001b165 	.word	0x0001b165
   1ad1c:	0001b16d 	.word	0x0001b16d
   1ad20:	0001b17d 	.word	0x0001b17d
   1ad24:	0001b18f 	.word	0x0001b18f
   1ad28:	0001b1ad 	.word	0x0001b1ad
   1ad2c:	0001b1cb 	.word	0x0001b1cb
   1ad30:	0001b1e1 	.word	0x0001b1e1
   1ad34:	0001b067 	.word	0x0001b067
   1ad38:	0001b08d 	.word	0x0001b08d
   1ad3c:	0001b0e3 	.word	0x0001b0e3
   1ad40:	0001b101 	.word	0x0001b101
   1ad44:	0001a98f 	.word	0x0001a98f
   1ad48:	0001a98f 	.word	0x0001a98f
   1ad4c:	0001a98f 	.word	0x0001a98f
   1ad50:	0001a98f 	.word	0x0001a98f
   1ad54:	0001a98f 	.word	0x0001a98f
   1ad58:	0001a98f 	.word	0x0001a98f
   1ad5c:	0001a98f 	.word	0x0001a98f
   1ad60:	0001a98f 	.word	0x0001a98f
   1ad64:	0001a98f 	.word	0x0001a98f
   1ad68:	0001a98f 	.word	0x0001a98f
   1ad6c:	0001a98f 	.word	0x0001a98f
   1ad70:	0001a98f 	.word	0x0001a98f
   1ad74:	0001a98f 	.word	0x0001a98f
   1ad78:	0001a98f 	.word	0x0001a98f
   1ad7c:	0001a98f 	.word	0x0001a98f
   1ad80:	0001a98f 	.word	0x0001a98f
   1ad84:	0001a98f 	.word	0x0001a98f
   1ad88:	0001a98f 	.word	0x0001a98f
   1ad8c:	0001a98f 	.word	0x0001a98f
   1ad90:	0001a98f 	.word	0x0001a98f
   1ad94:	0001a98f 	.word	0x0001a98f
   1ad98:	0001a98f 	.word	0x0001a98f
   1ad9c:	0001a98f 	.word	0x0001a98f
   1ada0:	0001a98f 	.word	0x0001a98f
   1ada4:	0001b1f5 	.word	0x0001b1f5
   1ada8:	0001a98f 	.word	0x0001a98f
   1adac:	0001a98f 	.word	0x0001a98f
   1adb0:	0001b1eb 	.word	0x0001b1eb
	le_event_mask = sys_get_le64(cmd->events);
   1adb4:	68a0      	ldr	r0, [r4, #8]
   1adb6:	f7ff fd95 	bl	1a8e4 <sys_get_le64>
   1adba:	4bb1      	ldr	r3, [pc, #708]	; (1b080 <hci_cmd_handle+0x794>)
   1adbc:	e651      	b.n	1aa62 <hci_cmd_handle+0x176>
	rp = cmd_complete(evt, sizeof(*rp));
   1adbe:	2104      	movs	r1, #4
   1adc0:	a80c      	add	r0, sp, #48	; 0x30
   1adc2:	f7ff fc15 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1adc6:	2300      	movs	r3, #0
   1adc8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
   1adca:	221b      	movs	r2, #27
   1adcc:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
   1adce:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
   1add0:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
   1add2:	70c3      	strb	r3, [r0, #3]
   1add4:	e653      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1add6:	2109      	movs	r1, #9
   1add8:	a80c      	add	r0, sp, #48	; 0x30
   1adda:	f7ff fc09 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1adde:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1ade0:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1ade2:	2208      	movs	r2, #8
	rp->status = 0x00;
   1ade4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1ade8:	f7eb f87b 	bl	5ee2 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
   1adec:	23ff      	movs	r3, #255	; 0xff
   1adee:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
   1adf0:	2341      	movs	r3, #65	; 0x41
   1adf2:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
   1adf4:	2301      	movs	r3, #1
   1adf6:	70e3      	strb	r3, [r4, #3]
   1adf8:	e641      	b.n	1aa7e <hci_cmd_handle+0x192>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1adfa:	68a1      	ldr	r1, [r4, #8]
   1adfc:	2001      	movs	r0, #1
   1adfe:	f7f6 fb73 	bl	114e8 <ll_addr_set>
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1ae02:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   1ae04:	2101      	movs	r1, #1
   1ae06:	a80c      	add	r0, sp, #48	; 0x30
   1ae08:	f7ff fbf2 	bl	1a5f0 <cmd_complete>
	ccst->status = status;
   1ae0c:	7004      	strb	r4, [r0, #0]
   1ae0e:	e636      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1ae10:	2102      	movs	r1, #2
   1ae12:	a80c      	add	r0, sp, #48	; 0x30
   1ae14:	f7ff fbec 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ae18:	2300      	movs	r3, #0
   1ae1a:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   1ae1c:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   1ae1e:	f001 fdb5 	bl	1c98c <ll_wl_size_get>
   1ae22:	7060      	strb	r0, [r4, #1]
   1ae24:	e62b      	b.n	1aa7e <hci_cmd_handle+0x192>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1ae26:	2101      	movs	r1, #1
   1ae28:	a80c      	add	r0, sp, #48	; 0x30
   1ae2a:	f7ff fbe1 	bl	1a5f0 <cmd_complete>
   1ae2e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   1ae30:	f001 fdae 	bl	1c990 <ll_wl_clear>
	ccst->status = ll_rl_clear();
   1ae34:	7020      	strb	r0, [r4, #0]
   1ae36:	e622      	b.n	1aa7e <hci_cmd_handle+0x192>
	status = ll_wl_add(&cmd->addr);
   1ae38:	68a0      	ldr	r0, [r4, #8]
   1ae3a:	f001 fe95 	bl	1cb68 <ll_wl_add>
   1ae3e:	e7e0      	b.n	1ae02 <hci_cmd_handle+0x516>
	status = ll_wl_remove(&cmd->addr);
   1ae40:	68a0      	ldr	r0, [r4, #8]
   1ae42:	f001 fde1 	bl	1ca08 <ll_wl_remove>
   1ae46:	e7dc      	b.n	1ae02 <hci_cmd_handle+0x516>
		le_encrypt(cmd, evt);
   1ae48:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1ae4a:	2300      	movs	r3, #0
   1ae4c:	aa0d      	add	r2, sp, #52	; 0x34
   1ae4e:	f100 0110 	add.w	r1, r0, #16
   1ae52:	f002 fc85 	bl	1d760 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
   1ae56:	2111      	movs	r1, #17
   1ae58:	a80c      	add	r0, sp, #48	; 0x30
   1ae5a:	f7ff fbc9 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ae5e:	2300      	movs	r3, #0
   1ae60:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1ae64:	2210      	movs	r2, #16
   1ae66:	a90d      	add	r1, sp, #52	; 0x34
	memcpy(rp->info, build_info, sizeof(build_info));
   1ae68:	f7eb f80e 	bl	5e88 <memcpy>
   1ae6c:	e607      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1ae6e:	2109      	movs	r1, #9
   1ae70:	a80c      	add	r0, sp, #48	; 0x30
   1ae72:	f7ff fbbd 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ae76:	2300      	movs	r3, #0
   1ae78:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
   1ae7c:	2108      	movs	r1, #8
   1ae7e:	f001 f8a1 	bl	1bfc4 <bt_rand>
   1ae82:	e5fc      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1ae84:	2109      	movs	r1, #9
   1ae86:	a80c      	add	r0, sp, #48	; 0x30
   1ae88:	f7ff fbb2 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1ae8c:	4601      	mov	r1, r0
   1ae8e:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1ae90:	4602      	mov	r2, r0
	rp->status = 0x00;
   1ae92:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
   1ae96:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
   1ae9a:	f7ff fb7b 	bl	1a594 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
   1ae9e:	f240 30ff 	movw	r0, #1023	; 0x3ff
   1aea2:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   1aea4:	f7ff fb76 	bl	1a594 <sys_put_le32>
   1aea8:	e5e9      	b.n	1aa7e <hci_cmd_handle+0x192>
		le_set_adv_param(cmd, evt);
   1aeaa:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
   1aeac:	2100      	movs	r1, #0
   1aeae:	7903      	ldrb	r3, [r0, #4]
   1aeb0:	8802      	ldrh	r2, [r0, #0]
   1aeb2:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
   1aeb6:	e9cd 1107 	strd	r1, r1, [sp, #28]
   1aeba:	e9cd 1105 	strd	r1, r1, [sp, #20]
   1aebe:	7b84      	ldrb	r4, [r0, #14]
   1aec0:	9404      	str	r4, [sp, #16]
   1aec2:	7b44      	ldrb	r4, [r0, #13]
   1aec4:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1aec6:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
   1aec8:	9402      	str	r4, [sp, #8]
   1aeca:	7984      	ldrb	r4, [r0, #6]
   1aecc:	9401      	str	r4, [sp, #4]
   1aece:	7940      	ldrb	r0, [r0, #5]
   1aed0:	9000      	str	r0, [sp, #0]
   1aed2:	4608      	mov	r0, r1
   1aed4:	f001 f89a 	bl	1c00c <ll_adv_params_set>
   1aed8:	e793      	b.n	1ae02 <hci_cmd_handle+0x516>
		le_set_adv_data(cmd, evt);
   1aeda:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
   1aedc:	1c59      	adds	r1, r3, #1
   1aede:	7818      	ldrb	r0, [r3, #0]
   1aee0:	f001 f99e 	bl	1c220 <ll_adv_data_set>
   1aee4:	e5ac      	b.n	1aa40 <hci_cmd_handle+0x154>
		le_set_scan_rsp_data(cmd, evt);
   1aee6:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
   1aee8:	1c59      	adds	r1, r3, #1
   1aeea:	7818      	ldrb	r0, [r3, #0]
   1aeec:	f001 f9f0 	bl	1c2d0 <ll_scan_data_set>
   1aef0:	e5a6      	b.n	1aa40 <hci_cmd_handle+0x154>
	status = ll_adv_enable(cmd->enable);
   1aef2:	68a3      	ldr	r3, [r4, #8]
   1aef4:	7818      	ldrb	r0, [r3, #0]
   1aef6:	f001 fa31 	bl	1c35c <ll_adv_enable>
	status = ll_scan_enable(cmd->enable);
   1aefa:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   1aefc:	2101      	movs	r1, #1
   1aefe:	a80c      	add	r0, sp, #48	; 0x30
   1af00:	f7ff fb76 	bl	1a5f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1af04:	2c00      	cmp	r4, #0
   1af06:	bf18      	it	ne
   1af08:	230c      	movne	r3, #12
   1af0a:	bf08      	it	eq
   1af0c:	2300      	moveq	r3, #0
   1af0e:	e59c      	b.n	1aa4a <hci_cmd_handle+0x15e>
		le_set_scan_param(cmd, evt);
   1af10:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   1af12:	7963      	ldrb	r3, [r4, #5]
   1af14:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   1af18:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1af1c:	7820      	ldrb	r0, [r4, #0]
   1af1e:	79a4      	ldrb	r4, [r4, #6]
   1af20:	9400      	str	r4, [sp, #0]
   1af22:	f001 fa99 	bl	1c458 <ll_scan_params_set>
   1af26:	e7e8      	b.n	1aefa <hci_cmd_handle+0x60e>
		le_set_scan_enable(cmd, evt);
   1af28:	68a2      	ldr	r2, [r4, #8]
   1af2a:	4b56      	ldr	r3, [pc, #344]	; (1b084 <hci_cmd_handle+0x798>)
	if (cmd->enable && cmd->filter_dup) {
   1af2c:	7810      	ldrb	r0, [r2, #0]
   1af2e:	b140      	cbz	r0, 1af42 <hci_cmd_handle+0x656>
   1af30:	7852      	ldrb	r2, [r2, #1]
   1af32:	b132      	cbz	r2, 1af42 <hci_cmd_handle+0x656>
		dup_count = 0;
   1af34:	2200      	movs	r2, #0
   1af36:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
   1af38:	4b53      	ldr	r3, [pc, #332]	; (1b088 <hci_cmd_handle+0x79c>)
		dup_count = -1;
   1af3a:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
   1af3c:	f001 faac 	bl	1c498 <ll_scan_enable>
   1af40:	e7db      	b.n	1aefa <hci_cmd_handle+0x60e>
		dup_count = -1;
   1af42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1af46:	e7f8      	b.n	1af3a <hci_cmd_handle+0x64e>
		le_create_connection(cmd, evt);
   1af48:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   1af4a:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   1af4e:	7963      	ldrb	r3, [r4, #5]
   1af50:	7922      	ldrb	r2, [r4, #4]
   1af52:	8861      	ldrh	r1, [r4, #2]
   1af54:	8820      	ldrh	r0, [r4, #0]
   1af56:	9504      	str	r5, [sp, #16]
   1af58:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   1af5c:	9503      	str	r5, [sp, #12]
   1af5e:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   1af62:	9502      	str	r5, [sp, #8]
   1af64:	7b25      	ldrb	r5, [r4, #12]
   1af66:	9501      	str	r5, [sp, #4]
   1af68:	3406      	adds	r4, #6
   1af6a:	9400      	str	r4, [sp, #0]
   1af6c:	f001 face 	bl	1c50c <ll_create_connection>
   1af70:	e540      	b.n	1a9f4 <hci_cmd_handle+0x108>
	status = ll_connect_disable(node_rx);
   1af72:	4630      	mov	r0, r6
   1af74:	f7fe fef4 	bl	19d60 <ll_connect_disable>
   1af78:	e7bf      	b.n	1aefa <hci_cmd_handle+0x60e>
	status = ll_chm_update(&cmd->ch_map[0]);
   1af7a:	68a0      	ldr	r0, [r4, #8]
   1af7c:	f7fe f8ec 	bl	19158 <ll_chm_update>
   1af80:	e7bb      	b.n	1aefa <hci_cmd_handle+0x60e>
		le_start_encryption(cmd, evt);
   1af82:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
   1af84:	f100 030c 	add.w	r3, r0, #12
   1af88:	f100 020a 	add.w	r2, r0, #10
   1af8c:	1c81      	adds	r1, r0, #2
   1af8e:	8800      	ldrh	r0, [r0, #0]
   1af90:	f7fe fba8 	bl	196e4 <ll_enc_req_send>
   1af94:	e52e      	b.n	1a9f4 <hci_cmd_handle+0x108>
	handle = sys_le16_to_cpu(cmd->handle);
   1af96:	68a2      	ldr	r2, [r4, #8]
   1af98:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1af9c:	2100      	movs	r1, #0
   1af9e:	4620      	mov	r0, r4
   1afa0:	f7fe f931 	bl	19206 <ll_start_enc_req_send>
   1afa4:	e5a0      	b.n	1aae8 <hci_cmd_handle+0x1fc>
	handle = sys_le16_to_cpu(cmd->handle);
   1afa6:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1afa8:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1afaa:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1afac:	2106      	movs	r1, #6
   1afae:	e7f6      	b.n	1af9e <hci_cmd_handle+0x6b2>
	handle = sys_le16_to_cpu(cmd->handle);
   1afb0:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1afb2:	2108      	movs	r1, #8
   1afb4:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
   1afb6:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   1afb8:	f7ff fb1a 	bl	1a5f0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1afbc:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   1afbe:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1afc0:	1cc1      	adds	r1, r0, #3
   1afc2:	4630      	mov	r0, r6
   1afc4:	f7fe f90a 	bl	191dc <ll_chm_get>
   1afc8:	e569      	b.n	1aa9e <hci_cmd_handle+0x1b2>
	handle = sys_le16_to_cpu(cmd->handle);
   1afca:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1afcc:	8818      	ldrh	r0, [r3, #0]
   1afce:	f7fe f95c 	bl	1928a <ll_feature_req_send>
   1afd2:	e50f      	b.n	1a9f4 <hci_cmd_handle+0x108>
		le_conn_update(cmd, evt);
   1afd4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
   1afd6:	8911      	ldrh	r1, [r2, #8]
   1afd8:	8893      	ldrh	r3, [r2, #4]
   1afda:	8810      	ldrh	r0, [r2, #0]
   1afdc:	9101      	str	r1, [sp, #4]
   1afde:	88d2      	ldrh	r2, [r2, #6]
   1afe0:	9200      	str	r2, [sp, #0]
   1afe2:	2200      	movs	r2, #0
   1afe4:	4611      	mov	r1, r2
   1afe6:	f7fe f83f 	bl	19068 <ll_conn_update>
	*evt = cmd_status(status);
   1afea:	b2c0      	uxtb	r0, r0
   1afec:	e506      	b.n	1a9fc <hci_cmd_handle+0x110>
		le_conn_param_req_reply(cmd, evt);
   1afee:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
   1aff0:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1aff2:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
   1aff4:	8893      	ldrh	r3, [r2, #4]
   1aff6:	9101      	str	r1, [sp, #4]
   1aff8:	88d2      	ldrh	r2, [r2, #6]
   1affa:	9200      	str	r2, [sp, #0]
   1affc:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   1affe:	2102      	movs	r1, #2
   1b000:	4620      	mov	r0, r4
   1b002:	f7fe f831 	bl	19068 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
   1b006:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   1b008:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   1b00a:	a80c      	add	r0, sp, #48	; 0x30
   1b00c:	f7ff faf0 	bl	1a5f0 <cmd_complete>
	rp->status = status;
   1b010:	7005      	strb	r5, [r0, #0]
   1b012:	e573      	b.n	1aafc <hci_cmd_handle+0x210>
		le_conn_param_req_neg_reply(cmd, evt);
   1b014:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1b016:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   1b018:	789a      	ldrb	r2, [r3, #2]
   1b01a:	2300      	movs	r3, #0
   1b01c:	e9cd 3300 	strd	r3, r3, [sp]
   1b020:	e7ed      	b.n	1affe <hci_cmd_handle+0x712>
		le_set_data_len(cmd, evt);
   1b022:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1b024:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1b026:	889a      	ldrh	r2, [r3, #4]
   1b028:	8859      	ldrh	r1, [r3, #2]
   1b02a:	4620      	mov	r0, r4
   1b02c:	f7fe f99d 	bl	1936a <ll_length_req_send>
   1b030:	e55a      	b.n	1aae8 <hci_cmd_handle+0x1fc>
	rp = cmd_complete(evt, sizeof(*rp));
   1b032:	2105      	movs	r1, #5
   1b034:	a80c      	add	r0, sp, #48	; 0x30
   1b036:	f7ff fadb 	bl	1a5f0 <cmd_complete>
   1b03a:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
   1b03c:	1cc1      	adds	r1, r0, #3
   1b03e:	3001      	adds	r0, #1
   1b040:	f7fe f9b6 	bl	193b0 <ll_length_default_get>
	rp->status = 0x00;
   1b044:	2300      	movs	r3, #0
   1b046:	7023      	strb	r3, [r4, #0]
   1b048:	e519      	b.n	1aa7e <hci_cmd_handle+0x192>
		le_write_default_data_len(cmd, evt);
   1b04a:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
   1b04c:	8859      	ldrh	r1, [r3, #2]
   1b04e:	8818      	ldrh	r0, [r3, #0]
   1b050:	f7fe f9b8 	bl	193c4 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1b054:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   1b056:	2101      	movs	r1, #1
   1b058:	a80c      	add	r0, sp, #48	; 0x30
   1b05a:	f7ff fac9 	bl	1a5f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
   1b05e:	2c00      	cmp	r4, #0
   1b060:	bf18      	it	ne
   1b062:	231e      	movne	r3, #30
   1b064:	e751      	b.n	1af0a <hci_cmd_handle+0x61e>
	rp = cmd_complete(evt, sizeof(*rp));
   1b066:	2109      	movs	r1, #9
   1b068:	a80c      	add	r0, sp, #48	; 0x30
   1b06a:	f7ff fac1 	bl	1a5f0 <cmd_complete>
   1b06e:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
   1b070:	1dc3      	adds	r3, r0, #7
   1b072:	1d42      	adds	r2, r0, #5
   1b074:	1cc1      	adds	r1, r0, #3
   1b076:	3001      	adds	r0, #1
   1b078:	f7fe f9ae 	bl	193d8 <ll_length_max_get>
   1b07c:	e7e2      	b.n	1b044 <hci_cmd_handle+0x758>
   1b07e:	bf00      	nop
   1b080:	2000d0b8 	.word	0x2000d0b8
   1b084:	20001aa4 	.word	0x20001aa4
   1b088:	20001aa8 	.word	0x20001aa8
	handle = sys_le16_to_cpu(cmd->handle);
   1b08c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1b08e:	2105      	movs	r1, #5
   1b090:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
   1b092:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   1b094:	f7ff faac 	bl	1a5f0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1b098:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   1b09a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1b09c:	1d02      	adds	r2, r0, #4
   1b09e:	1cc1      	adds	r1, r0, #3
   1b0a0:	4630      	mov	r0, r6
   1b0a2:	f7fe f9a2 	bl	193ea <ll_phy_get>
	return __builtin_ffs(op);
   1b0a6:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
   1b0a8:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   1b0ac:	2800      	cmp	r0, #0
   1b0ae:	bf14      	ite	ne
   1b0b0:	230c      	movne	r3, #12
   1b0b2:	2300      	moveq	r3, #0
   1b0b4:	7023      	strb	r3, [r4, #0]
   1b0b6:	2a00      	cmp	r2, #0
   1b0b8:	fa92 f3a2 	rbit	r3, r2
   1b0bc:	fab3 f383 	clz	r3, r3
   1b0c0:	7922      	ldrb	r2, [r4, #4]
   1b0c2:	bf08      	it	eq
   1b0c4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1b0c8:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1b0ca:	70e3      	strb	r3, [r4, #3]
   1b0cc:	2a00      	cmp	r2, #0
   1b0ce:	fa92 f3a2 	rbit	r3, r2
   1b0d2:	fab3 f383 	clz	r3, r3
   1b0d6:	bf08      	it	eq
   1b0d8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1b0dc:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   1b0de:	7123      	strb	r3, [r4, #4]
   1b0e0:	e4cd      	b.n	1aa7e <hci_cmd_handle+0x192>
		le_set_default_phy(cmd, evt);
   1b0e2:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1b0e4:	781a      	ldrb	r2, [r3, #0]
   1b0e6:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1b0e8:	bf44      	itt	mi
   1b0ea:	2107      	movmi	r1, #7
   1b0ec:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1b0ee:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1b0f0:	bf44      	itt	mi
   1b0f2:	2207      	movmi	r2, #7
   1b0f4:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1b0f6:	7899      	ldrb	r1, [r3, #2]
   1b0f8:	7858      	ldrb	r0, [r3, #1]
   1b0fa:	f7fe f98b 	bl	19414 <ll_phy_default_set>
   1b0fe:	e7a9      	b.n	1b054 <hci_cmd_handle+0x768>
		le_set_phy(cmd, evt);
   1b100:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1b102:	7899      	ldrb	r1, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
   1b104:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1b106:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1b10a:	07cf      	lsls	r7, r1, #31
		cmd->tx_phys |= mask_phys;
   1b10c:	bf42      	ittt	mi
   1b10e:	78da      	ldrbmi	r2, [r3, #3]
   1b110:	f042 0203 	orrmi.w	r2, r2, #3
   1b114:	70da      	strbmi	r2, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1b116:	078e      	lsls	r6, r1, #30
		cmd->rx_phys |= mask_phys;
   1b118:	bf48      	it	mi
   1b11a:	791a      	ldrbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1b11c:	78d9      	ldrb	r1, [r3, #3]
		cmd->rx_phys |= mask_phys;
   1b11e:	bf44      	itt	mi
   1b120:	f042 0203 	orrmi.w	r2, r2, #3
   1b124:	711a      	strbmi	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1b126:	791b      	ldrb	r3, [r3, #4]
   1b128:	ea41 0203 	orr.w	r2, r1, r3
   1b12c:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   1b130:	d001      	beq.n	1b136 <hci_cmd_handle+0x84a>
		*evt = cmd_status(BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL);
   1b132:	2011      	movs	r0, #17
   1b134:	e462      	b.n	1a9fc <hci_cmd_handle+0x110>
	if (!(cmd->tx_phys & 0x07) ||
   1b136:	074d      	lsls	r5, r1, #29
   1b138:	d001      	beq.n	1b13e <hci_cmd_handle+0x852>
   1b13a:	075a      	lsls	r2, r3, #29
   1b13c:	d101      	bne.n	1b142 <hci_cmd_handle+0x856>
		*evt = cmd_status(BT_HCI_ERR_INVALID_PARAM);
   1b13e:	2012      	movs	r0, #18
   1b140:	e45c      	b.n	1a9fc <hci_cmd_handle+0x110>
	if (phy_opts & 0x03) {
   1b142:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
   1b146:	bf1c      	itt	ne
   1b148:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   1b14c:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   1b150:	f7fe f96a 	bl	19428 <ll_phy_req_send>
   1b154:	e44e      	b.n	1a9f4 <hci_cmd_handle+0x108>
		le_add_dev_to_rl(cmd, evt);
   1b156:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1b158:	f100 0217 	add.w	r2, r0, #23
   1b15c:	1dc1      	adds	r1, r0, #7
   1b15e:	f002 f843 	bl	1d1e8 <ll_rl_add>
   1b162:	e64e      	b.n	1ae02 <hci_cmd_handle+0x516>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1b164:	68a0      	ldr	r0, [r4, #8]
   1b166:	f002 f8df 	bl	1d328 <ll_rl_remove>
   1b16a:	e64a      	b.n	1ae02 <hci_cmd_handle+0x516>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1b16c:	2101      	movs	r1, #1
   1b16e:	a80c      	add	r0, sp, #48	; 0x30
   1b170:	f7ff fa3e 	bl	1a5f0 <cmd_complete>
   1b174:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   1b176:	f001 fff9 	bl	1d16c <ll_rl_clear>
   1b17a:	e65b      	b.n	1ae34 <hci_cmd_handle+0x548>
	rp = cmd_complete(evt, sizeof(*rp));
   1b17c:	2102      	movs	r1, #2
   1b17e:	a80c      	add	r0, sp, #48	; 0x30
   1b180:	f7ff fa36 	bl	1a5f0 <cmd_complete>
   1b184:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1b186:	f001 ffef 	bl	1d168 <ll_rl_size_get>
   1b18a:	7060      	strb	r0, [r4, #1]
   1b18c:	e75a      	b.n	1b044 <hci_cmd_handle+0x758>
	memcpy(dst, src, sizeof(*dst));
   1b18e:	2207      	movs	r2, #7
   1b190:	68a1      	ldr	r1, [r4, #8]
   1b192:	a80d      	add	r0, sp, #52	; 0x34
   1b194:	f7ea fe78 	bl	5e88 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
   1b198:	2107      	movs	r1, #7
   1b19a:	a80c      	add	r0, sp, #48	; 0x30
   1b19c:	f7ff fa28 	bl	1a5f0 <cmd_complete>
   1b1a0:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   1b1a2:	1c41      	adds	r1, r0, #1
   1b1a4:	a80d      	add	r0, sp, #52	; 0x34
   1b1a6:	f002 f94b 	bl	1d440 <ll_rl_crpa_get>
   1b1aa:	e643      	b.n	1ae34 <hci_cmd_handle+0x548>
   1b1ac:	2207      	movs	r2, #7
   1b1ae:	68a1      	ldr	r1, [r4, #8]
   1b1b0:	a80d      	add	r0, sp, #52	; 0x34
   1b1b2:	f7ea fe69 	bl	5e88 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
   1b1b6:	2107      	movs	r1, #7
   1b1b8:	a80c      	add	r0, sp, #48	; 0x30
   1b1ba:	f7ff fa19 	bl	1a5f0 <cmd_complete>
   1b1be:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1b1c0:	1c41      	adds	r1, r0, #1
   1b1c2:	a80d      	add	r0, sp, #52	; 0x34
   1b1c4:	f002 f95c 	bl	1d480 <ll_rl_lrpa_get>
   1b1c8:	e634      	b.n	1ae34 <hci_cmd_handle+0x548>
	u8_t enable = cmd->enable;
   1b1ca:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
   1b1cc:	2101      	movs	r1, #1
   1b1ce:	a80c      	add	r0, sp, #48	; 0x30
	u8_t enable = cmd->enable;
   1b1d0:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
   1b1d2:	f7ff fa0d 	bl	1a5f0 <cmd_complete>
   1b1d6:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   1b1d8:	4628      	mov	r0, r5
   1b1da:	f002 f969 	bl	1d4b0 <ll_rl_enable>
   1b1de:	e629      	b.n	1ae34 <hci_cmd_handle+0x548>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1b1e0:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   1b1e2:	8818      	ldrh	r0, [r3, #0]
   1b1e4:	f002 f976 	bl	1d4d4 <ll_rl_timeout_set>
   1b1e8:	e42a      	b.n	1aa40 <hci_cmd_handle+0x154>
		le_set_privacy_mode(cmd, evt);
   1b1ea:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1b1ec:	79c1      	ldrb	r1, [r0, #7]
   1b1ee:	f002 f979 	bl	1d4e4 <ll_priv_mode_set>
   1b1f2:	e606      	b.n	1ae02 <hci_cmd_handle+0x516>
	rp = cmd_complete(evt, sizeof(*rp));
   1b1f4:	2103      	movs	r1, #3
   1b1f6:	a80c      	add	r0, sp, #48	; 0x30
   1b1f8:	f7ff f9fa 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1b1fc:	4601      	mov	r1, r0
   1b1fe:	2300      	movs	r3, #0
   1b200:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1b204:	3001      	adds	r0, #1
   1b206:	f7f6 f98b 	bl	11520 <ll_tx_pwr_get>
   1b20a:	e438      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1b20c:	210d      	movs	r1, #13
   1b20e:	a80c      	add	r0, sp, #48	; 0x30
   1b210:	f7ff f9ee 	bl	1a5f0 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
   1b214:	2202      	movs	r2, #2
   1b216:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
   1b218:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1b21a:	2201      	movs	r2, #1
   1b21c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
   1b21e:	220d      	movs	r2, #13
	rp->status = 0x00;
   1b220:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
   1b222:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
   1b224:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
   1b226:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
   1b228:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
   1b22a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
   1b22c:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
   1b22e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
   1b230:	7242      	strb	r2, [r0, #9]
   1b232:	7283      	strb	r3, [r0, #10]
   1b234:	72c3      	strb	r3, [r0, #11]
   1b236:	7303      	strb	r3, [r0, #12]
   1b238:	e421      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1b23a:	2141      	movs	r1, #65	; 0x41
   1b23c:	a80c      	add	r0, sp, #48	; 0x30
   1b23e:	f7ff f9d7 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1b242:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1b244:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1b246:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1b248:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1b24c:	f7ea fe49 	bl	5ee2 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   1b250:	7863      	ldrb	r3, [r4, #1]
   1b252:	f063 0358 	orn	r3, r3, #88	; 0x58
   1b256:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   1b258:	78a3      	ldrb	r3, [r4, #2]
   1b25a:	f043 0303 	orr.w	r3, r3, #3
   1b25e:	70a3      	strb	r3, [r4, #2]
   1b260:	e40d      	b.n	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1b262:	2109      	movs	r1, #9
   1b264:	a80c      	add	r0, sp, #48	; 0x30
   1b266:	f7ff f9c3 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1b26a:	2100      	movs	r1, #0
   1b26c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1b270:	2208      	movs	r2, #8
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   1b272:	f7ea fe36 	bl	5ee2 <memset>
   1b276:	e402      	b.n	1aa7e <hci_cmd_handle+0x192>
	const char build_info[] = HCI_VS_BUILD_INFO;
   1b278:	4b5f      	ldr	r3, [pc, #380]	; (1b3f8 <hci_cmd_handle+0xb0c>)
   1b27a:	aa0d      	add	r2, sp, #52	; 0x34
   1b27c:	f103 0610 	add.w	r6, r3, #16
   1b280:	4615      	mov	r5, r2
   1b282:	6818      	ldr	r0, [r3, #0]
   1b284:	6859      	ldr	r1, [r3, #4]
   1b286:	4614      	mov	r4, r2
   1b288:	c403      	stmia	r4!, {r0, r1}
   1b28a:	3308      	adds	r3, #8
   1b28c:	42b3      	cmp	r3, r6
   1b28e:	4622      	mov	r2, r4
   1b290:	d1f7      	bne.n	1b282 <hci_cmd_handle+0x996>
   1b292:	8819      	ldrh	r1, [r3, #0]
   1b294:	789b      	ldrb	r3, [r3, #2]
   1b296:	8021      	strh	r1, [r4, #0]
   1b298:	70a3      	strb	r3, [r4, #2]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   1b29a:	2114      	movs	r1, #20
   1b29c:	a80c      	add	r0, sp, #48	; 0x30
   1b29e:	f7ff f9a7 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1b2a2:	2300      	movs	r3, #0
   1b2a4:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   1b2a8:	2213      	movs	r2, #19
   1b2aa:	4629      	mov	r1, r5
   1b2ac:	e5dc      	b.n	1ae68 <hci_cmd_handle+0x57c>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   1b2ae:	68a1      	ldr	r1, [r4, #8]
   1b2b0:	2000      	movs	r0, #0
   1b2b2:	f7f6 f919 	bl	114e8 <ll_addr_set>
   1b2b6:	f7ff bbc3 	b.w	1aa40 <hci_cmd_handle+0x154>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b2ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b2be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1b2c2:	3201      	adds	r2, #1
   1b2c4:	d106      	bne.n	1b2d4 <hci_cmd_handle+0x9e8>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b2c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b2ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b2ce:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b2d0:	4293      	cmp	r3, r2
   1b2d2:	d022      	beq.n	1b31a <hci_cmd_handle+0xa2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1b2d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1b2d8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b2dc:	07db      	lsls	r3, r3, #31
   1b2de:	d51c      	bpl.n	1b31a <hci_cmd_handle+0xa2e>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   1b2e0:	2118      	movs	r1, #24
   1b2e2:	a80c      	add	r0, sp, #48	; 0x30
   1b2e4:	f7ff f984 	bl	1a5f0 <cmd_complete>
		rp->status = 0x00;
   1b2e8:	2600      	movs	r6, #0
		rp->num_addrs = 1;
   1b2ea:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   1b2ec:	4604      	mov	r4, r0
		rp->num_addrs = 1;
   1b2ee:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
   1b2f0:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
   1b2f2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1b2f6:	1ca1      	adds	r1, r4, #2
   1b2f8:	f7ff f94c 	bl	1a594 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
   1b2fc:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   1b300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b304:	b29b      	uxth	r3, r3
	dst[0] = val;
   1b306:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   1b308:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
   1b30a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b30e:	71e3      	strb	r3, [r4, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
   1b310:	2210      	movs	r2, #16
   1b312:	4631      	mov	r1, r6
   1b314:	f104 0008 	add.w	r0, r4, #8
   1b318:	e7ab      	b.n	1b272 <hci_cmd_handle+0x986>
	rp = cmd_complete(evt, sizeof(*rp));
   1b31a:	2102      	movs	r1, #2
   1b31c:	a80c      	add	r0, sp, #48	; 0x30
   1b31e:	f7ff f967 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1b322:	2300      	movs	r3, #0
   1b324:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
   1b326:	7043      	strb	r3, [r0, #1]
   1b328:	f7ff bba9 	b.w	1aa7e <hci_cmd_handle+0x192>
	rp = cmd_complete(evt, sizeof(*rp));
   1b32c:	2121      	movs	r1, #33	; 0x21
   1b32e:	a80c      	add	r0, sp, #48	; 0x30
   1b330:	f7ff f95e 	bl	1a5f0 <cmd_complete>
	rp->status = 0x00;
   1b334:	4603      	mov	r3, r0
   1b336:	2200      	movs	r2, #0
   1b338:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
   1b340:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b342:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   1b346:	3101      	adds	r1, #1
   1b348:	d04b      	beq.n	1b3e2 <hci_cmd_handle+0xaf6>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b34a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b34e:	3101      	adds	r1, #1
   1b350:	d047      	beq.n	1b3e2 <hci_cmd_handle+0xaf6>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b352:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b356:	3101      	adds	r1, #1
   1b358:	d043      	beq.n	1b3e2 <hci_cmd_handle+0xaf6>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1b35a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b35e:	3101      	adds	r1, #1
   1b360:	d03f      	beq.n	1b3e2 <hci_cmd_handle+0xaf6>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
   1b362:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   1b366:	4619      	mov	r1, r3
   1b368:	f7ff f914 	bl	1a594 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
   1b36c:	1d61      	adds	r1, r4, #5
   1b36e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   1b372:	f7ff f90f 	bl	1a594 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
   1b376:	f104 0109 	add.w	r1, r4, #9
   1b37a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   1b37e:	f7ff f909 	bl	1a594 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
   1b382:	f104 010d 	add.w	r1, r4, #13
   1b386:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1b38a:	f7ff f903 	bl	1a594 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b392:	f104 0311 	add.w	r3, r4, #17
   1b396:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
   1b39a:	3101      	adds	r1, #1
   1b39c:	d027      	beq.n	1b3ee <hci_cmd_handle+0xb02>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b39e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b3a2:	3101      	adds	r1, #1
   1b3a4:	d023      	beq.n	1b3ee <hci_cmd_handle+0xb02>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b3a6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b3aa:	3101      	adds	r1, #1
   1b3ac:	d01f      	beq.n	1b3ee <hci_cmd_handle+0xb02>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1b3ae:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b3b2:	3101      	adds	r1, #1
   1b3b4:	d01b      	beq.n	1b3ee <hci_cmd_handle+0xb02>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
   1b3b6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1b3ba:	4619      	mov	r1, r3
   1b3bc:	f7ff f8ea 	bl	1a594 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
   1b3c0:	f104 0115 	add.w	r1, r4, #21
   1b3c4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1b3c8:	f7ff f8e4 	bl	1a594 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
   1b3cc:	f104 0119 	add.w	r1, r4, #25
   1b3d0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   1b3d4:	f7ff f8de 	bl	1a594 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   1b3d8:	f104 011d 	add.w	r1, r4, #29
   1b3dc:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   1b3e0:	e560      	b.n	1aea4 <hci_cmd_handle+0x5b8>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
   1b3e2:	2210      	movs	r2, #16
   1b3e4:	2100      	movs	r1, #0
   1b3e6:	4618      	mov	r0, r3
   1b3e8:	f7ea fd7b 	bl	5ee2 <memset>
   1b3ec:	e7cf      	b.n	1b38e <hci_cmd_handle+0xaa2>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   1b3ee:	2210      	movs	r2, #16
   1b3f0:	2100      	movs	r1, #0
   1b3f2:	4618      	mov	r0, r3
   1b3f4:	e73d      	b.n	1b272 <hci_cmd_handle+0x986>
   1b3f6:	bf00      	nop
   1b3f8:	00031745 	.word	0x00031745

0001b3fc <hci_acl_handle>:
{
   1b3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   1b400:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1b402:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   1b404:	2b03      	cmp	r3, #3
{
   1b406:	4606      	mov	r6, r0
   1b408:	460f      	mov	r7, r1
	*evt = NULL;
   1b40a:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1b40c:	d819      	bhi.n	1b442 <hci_acl_handle+0x46>
		BT_ERR("No HCI ACL header");
   1b40e:	4b53      	ldr	r3, [pc, #332]	; (1b55c <hci_acl_handle+0x160>)
   1b410:	681b      	ldr	r3, [r3, #0]
   1b412:	0758      	lsls	r0, r3, #29
   1b414:	d103      	bne.n	1b41e <hci_acl_handle+0x22>
		return -EINVAL;
   1b416:	f06f 0015 	mvn.w	r0, #21
}
   1b41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("No HCI ACL header");
   1b41e:	2301      	movs	r3, #1
   1b420:	f04f 0200 	mov.w	r2, #0
   1b424:	f363 0202 	bfi	r2, r3, #0, #3
   1b428:	494d      	ldr	r1, [pc, #308]	; (1b560 <hci_acl_handle+0x164>)
   1b42a:	4b4e      	ldr	r3, [pc, #312]	; (1b564 <hci_acl_handle+0x168>)
   1b42c:	484e      	ldr	r0, [pc, #312]	; (1b568 <hci_acl_handle+0x16c>)
   1b42e:	1a5b      	subs	r3, r3, r1
   1b430:	f364 02c5 	bfi	r2, r4, #3, #3
   1b434:	08db      	lsrs	r3, r3, #3
   1b436:	494d      	ldr	r1, [pc, #308]	; (1b56c <hci_acl_handle+0x170>)
   1b438:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Invalid HCI ACL packet length");
   1b43c:	f7e6 fc8c 	bl	1d58 <log_1>
   1b440:	e7e9      	b.n	1b416 <hci_acl_handle+0x1a>
	acl = (void *)buf->data;
   1b442:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
   1b446:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
   1b448:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1b44c:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
   1b44e:	f003 f8ad 	bl	1e5ac <net_buf_simple_pull>
	if (buf->len < len) {
   1b452:	89b3      	ldrh	r3, [r6, #12]
   1b454:	4543      	cmp	r3, r8
   1b456:	d213      	bcs.n	1b480 <hci_acl_handle+0x84>
		BT_ERR("Invalid HCI ACL packet length");
   1b458:	4b40      	ldr	r3, [pc, #256]	; (1b55c <hci_acl_handle+0x160>)
   1b45a:	681b      	ldr	r3, [r3, #0]
   1b45c:	0759      	lsls	r1, r3, #29
   1b45e:	d0da      	beq.n	1b416 <hci_acl_handle+0x1a>
   1b460:	2301      	movs	r3, #1
   1b462:	f04f 0200 	mov.w	r2, #0
   1b466:	f363 0202 	bfi	r2, r3, #0, #3
   1b46a:	493d      	ldr	r1, [pc, #244]	; (1b560 <hci_acl_handle+0x164>)
   1b46c:	4b3d      	ldr	r3, [pc, #244]	; (1b564 <hci_acl_handle+0x168>)
   1b46e:	4840      	ldr	r0, [pc, #256]	; (1b570 <hci_acl_handle+0x174>)
   1b470:	1a5b      	subs	r3, r3, r1
   1b472:	f364 02c5 	bfi	r2, r4, #3, #3
   1b476:	08db      	lsrs	r3, r3, #3
   1b478:	f363 128f 	bfi	r2, r3, #6, #10
   1b47c:	493b      	ldr	r1, [pc, #236]	; (1b56c <hci_acl_handle+0x170>)
   1b47e:	e7dd      	b.n	1b43c <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
   1b480:	f7fe f894 	bl	195ac <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1b484:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
   1b488:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
   1b48a:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
   1b48e:	bb88      	cbnz	r0, 1b4f4 <hci_acl_handle+0xf8>
		BT_ERR("Tx Buffer Overflow");
   1b490:	4b32      	ldr	r3, [pc, #200]	; (1b55c <hci_acl_handle+0x160>)
   1b492:	681b      	ldr	r3, [r3, #0]
   1b494:	075a      	lsls	r2, r3, #29
   1b496:	d010      	beq.n	1b4ba <hci_acl_handle+0xbe>
   1b498:	2301      	movs	r3, #1
   1b49a:	f04f 0200 	mov.w	r2, #0
   1b49e:	f363 0202 	bfi	r2, r3, #0, #3
   1b4a2:	492f      	ldr	r1, [pc, #188]	; (1b560 <hci_acl_handle+0x164>)
   1b4a4:	4b2f      	ldr	r3, [pc, #188]	; (1b564 <hci_acl_handle+0x168>)
   1b4a6:	1a5b      	subs	r3, r3, r1
   1b4a8:	f360 02c5 	bfi	r2, r0, #3, #3
   1b4ac:	08db      	lsrs	r3, r3, #3
   1b4ae:	f363 128f 	bfi	r2, r3, #6, #10
   1b4b2:	492e      	ldr	r1, [pc, #184]	; (1b56c <hci_acl_handle+0x170>)
   1b4b4:	482f      	ldr	r0, [pc, #188]	; (1b574 <hci_acl_handle+0x178>)
   1b4b6:	f7e6 fc4f 	bl	1d58 <log_1>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1b4ba:	4b2f      	ldr	r3, [pc, #188]	; (1b578 <hci_acl_handle+0x17c>)
   1b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b4c0:	2100      	movs	r1, #0
   1b4c2:	f002 7000 	and.w	r0, r2, #33554432	; 0x2000000
   1b4c6:	ea50 0301 	orrs.w	r3, r0, r1
   1b4ca:	d010      	beq.n	1b4ee <hci_acl_handle+0xf2>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1b4cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b4d0:	2001      	movs	r0, #1
   1b4d2:	f7ee f9b7 	bl	9844 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   1b4d6:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1b4d8:	6038      	str	r0, [r7, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   1b4da:	211a      	movs	r1, #26
   1b4dc:	f7ff f863 	bl	1a5a6 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   1b4e0:	6838      	ldr	r0, [r7, #0]
   1b4e2:	2101      	movs	r1, #1
   1b4e4:	3008      	adds	r0, #8
   1b4e6:	f003 f811 	bl	1e50c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1b4ea:	2301      	movs	r3, #1
   1b4ec:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   1b4ee:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b4f2:	e792      	b.n	1b41a <hci_acl_handle+0x1e>
   1b4f4:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
   1b4f6:	f1b9 0f00 	cmp.w	r9, #0
   1b4fa:	d002      	beq.n	1b502 <hci_acl_handle+0x106>
   1b4fc:	f1b9 0f02 	cmp.w	r9, #2
   1b500:	d12a      	bne.n	1b558 <hci_acl_handle+0x15c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1b502:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b504:	f362 0301 	bfi	r3, r2, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1b508:	68b1      	ldr	r1, [r6, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b50a:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
   1b50c:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1b510:	4642      	mov	r2, r8
   1b512:	1de0      	adds	r0, r4, #7
   1b514:	f7ea fcb8 	bl	5e88 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   1b518:	4621      	mov	r1, r4
   1b51a:	4628      	mov	r0, r5
   1b51c:	f7fe f852 	bl	195c4 <ll_tx_mem_enqueue>
   1b520:	2800      	cmp	r0, #0
   1b522:	f43f af7a 	beq.w	1b41a <hci_acl_handle+0x1e>
		BT_ERR("Invalid Tx Enqueue");
   1b526:	4b0d      	ldr	r3, [pc, #52]	; (1b55c <hci_acl_handle+0x160>)
   1b528:	681b      	ldr	r3, [r3, #0]
   1b52a:	075b      	lsls	r3, r3, #29
   1b52c:	d010      	beq.n	1b550 <hci_acl_handle+0x154>
   1b52e:	2301      	movs	r3, #1
   1b530:	f04f 0200 	mov.w	r2, #0
   1b534:	f363 0202 	bfi	r2, r3, #0, #3
   1b538:	4909      	ldr	r1, [pc, #36]	; (1b560 <hci_acl_handle+0x164>)
   1b53a:	4b0a      	ldr	r3, [pc, #40]	; (1b564 <hci_acl_handle+0x168>)
   1b53c:	480f      	ldr	r0, [pc, #60]	; (1b57c <hci_acl_handle+0x180>)
   1b53e:	1a5b      	subs	r3, r3, r1
   1b540:	f36f 02c5 	bfc	r2, #3, #3
   1b544:	08db      	lsrs	r3, r3, #3
   1b546:	f363 128f 	bfi	r2, r3, #6, #10
   1b54a:	4908      	ldr	r1, [pc, #32]	; (1b56c <hci_acl_handle+0x170>)
   1b54c:	f7e6 fc04 	bl	1d58 <log_1>
		ll_tx_mem_release(node_tx);
   1b550:	4620      	mov	r0, r4
   1b552:	f7fe f831 	bl	195b8 <ll_tx_mem_release>
   1b556:	e75e      	b.n	1b416 <hci_acl_handle+0x1a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b558:	2201      	movs	r2, #1
   1b55a:	e7d3      	b.n	1b504 <hci_acl_handle+0x108>
   1b55c:	2000d724 	.word	0x2000d724
   1b560:	0002cff8 	.word	0x0002cff8
   1b564:	0002d020 	.word	0x0002d020
   1b568:	000316a3 	.word	0x000316a3
   1b56c:	00031605 	.word	0x00031605
   1b570:	000316b9 	.word	0x000316b9
   1b574:	000316db 	.word	0x000316db
   1b578:	2000d0b0 	.word	0x2000d0b0
   1b57c:	000316f2 	.word	0x000316f2

0001b580 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1b580:	7a03      	ldrb	r3, [r0, #8]
   1b582:	f003 0303 	and.w	r3, r3, #3
   1b586:	3b01      	subs	r3, #1
   1b588:	2b01      	cmp	r3, #1
{
   1b58a:	b570      	push	{r4, r5, r6, lr}
   1b58c:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
   1b58e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
   1b590:	d81b      	bhi.n	1b5ca <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   1b592:	f101 0608 	add.w	r6, r1, #8
   1b596:	4630      	mov	r0, r6
   1b598:	2104      	movs	r1, #4
   1b59a:	f002 ffb7 	bl	1e50c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1b59e:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1b5a0:	7a61      	ldrb	r1, [r4, #9]
   1b5a2:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1b5a4:	f003 0303 	and.w	r3, r3, #3
   1b5a8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1b5aa:	bf0c      	ite	eq
   1b5ac:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1b5b0:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   1b5b4:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
   1b5b6:	4630      	mov	r0, r6
   1b5b8:	f002 ffa8 	bl	1e50c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1b5bc:	7a62      	ldrb	r2, [r4, #9]
   1b5be:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
   1b5c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1b5c6:	f7ea bc5f 	b.w	5e88 <memcpy>
		LL_ASSERT(0);
   1b5ca:	4b0d      	ldr	r3, [pc, #52]	; (1b600 <hci_acl_encode+0x80>)
   1b5cc:	681b      	ldr	r3, [r3, #0]
   1b5ce:	075b      	lsls	r3, r3, #29
   1b5d0:	d010      	beq.n	1b5f4 <hci_acl_encode+0x74>
   1b5d2:	2301      	movs	r3, #1
   1b5d4:	f04f 0200 	mov.w	r2, #0
   1b5d8:	f363 0202 	bfi	r2, r3, #0, #3
   1b5dc:	4909      	ldr	r1, [pc, #36]	; (1b604 <hci_acl_encode+0x84>)
   1b5de:	4b0a      	ldr	r3, [pc, #40]	; (1b608 <hci_acl_encode+0x88>)
   1b5e0:	480a      	ldr	r0, [pc, #40]	; (1b60c <hci_acl_encode+0x8c>)
   1b5e2:	1a5b      	subs	r3, r3, r1
   1b5e4:	f36f 02c5 	bfc	r2, #3, #3
   1b5e8:	08db      	lsrs	r3, r3, #3
   1b5ea:	f363 128f 	bfi	r2, r3, #6, #10
   1b5ee:	4908      	ldr	r1, [pc, #32]	; (1b610 <hci_acl_encode+0x90>)
   1b5f0:	f7e6 fbb2 	bl	1d58 <log_1>
   1b5f4:	4040      	eors	r0, r0
   1b5f6:	f380 8811 	msr	BASEPRI, r0
   1b5fa:	f04f 0004 	mov.w	r0, #4
   1b5fe:	df02      	svc	2
   1b600:	2000d724 	.word	0x2000d724
   1b604:	0002cff8 	.word	0x0002cff8
   1b608:	0002d020 	.word	0x0002d020
   1b60c:	0002f0b9 	.word	0x0002f0b9
   1b610:	00031694 	.word	0x00031694

0001b614 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
   1b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1b618:	7903      	ldrb	r3, [r0, #4]
   1b61a:	88c6      	ldrh	r6, [r0, #6]
   1b61c:	2b01      	cmp	r3, #1
{
   1b61e:	b093      	sub	sp, #76	; 0x4c
   1b620:	4604      	mov	r4, r0
   1b622:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
   1b624:	f100 0908 	add.w	r9, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1b628:	f000 835a 	beq.w	1bce0 <hci_evt_encode+0x6cc>
	switch (node_rx->hdr.type) {
   1b62c:	3b02      	subs	r3, #2
   1b62e:	2b0a      	cmp	r3, #10
   1b630:	f200 832b 	bhi.w	1bc8a <hci_evt_encode+0x676>
   1b634:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b638:	013a000b 	.word	0x013a000b
   1b63c:	01420140 	.word	0x01420140
   1b640:	022f01b9 	.word	0x022f01b9
   1b644:	0278024e 	.word	0x0278024e
   1b648:	02a70291 	.word	0x02a70291
   1b64c:	02c4      	.short	0x02c4
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1b64e:	4bc0      	ldr	r3, [pc, #768]	; (1b950 <hci_evt_encode+0x33c>)
   1b650:	930b      	str	r3, [sp, #44]	; 0x2c
   1b652:	f64f 7304 	movw	r3, #65284	; 0xff04
   1b656:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1b65a:	2302      	movs	r3, #2
   1b65c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b660:	7a43      	ldrb	r3, [r0, #9]
   1b662:	4403      	add	r3, r0
   1b664:	f893 b00b 	ldrb.w	fp, [r3, #11]
	if (adv->tx_addr) {
   1b668:	7a03      	ldrb	r3, [r0, #8]
   1b66a:	065e      	lsls	r6, r3, #25
   1b66c:	d506      	bpl.n	1b67c <hci_evt_encode+0x68>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   1b66e:	2100      	movs	r1, #0
   1b670:	f100 030a 	add.w	r3, r0, #10
   1b674:	465a      	mov	r2, fp
   1b676:	4608      	mov	r0, r1
   1b678:	f001 fec0 	bl	1d3fc <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
   1b67c:	4bb5      	ldr	r3, [pc, #724]	; (1b954 <hci_evt_encode+0x340>)
   1b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b682:	2000      	movs	r0, #0
   1b684:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1b688:	ea50 0301 	orrs.w	r3, r0, r1
   1b68c:	f000 80c9 	beq.w	1b822 <hci_evt_encode+0x20e>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b690:	7a63      	ldrb	r3, [r4, #9]
   1b692:	4423      	add	r3, r4
   1b694:	7b1b      	ldrb	r3, [r3, #12]
   1b696:	9302      	str	r3, [sp, #8]
   1b698:	4baf      	ldr	r3, [pc, #700]	; (1b958 <hci_evt_encode+0x344>)
   1b69a:	e9d3 0100 	ldrd	r0, r1, [r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
   1b69e:	9b02      	ldr	r3, [sp, #8]
   1b6a0:	2b00      	cmp	r3, #0
   1b6a2:	d13e      	bne.n	1b722 <hci_evt_encode+0x10e>
   1b6a4:	f000 0202 	and.w	r2, r0, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
   1b6a8:	2300      	movs	r3, #0
   1b6aa:	4313      	orrs	r3, r2
   1b6ac:	f000 80b9 	beq.w	1b822 <hci_evt_encode+0x20e>
	if (dup_count >= 0) {
   1b6b0:	4faa      	ldr	r7, [pc, #680]	; (1b95c <hci_evt_encode+0x348>)
   1b6b2:	683b      	ldr	r3, [r7, #0]
   1b6b4:	2b00      	cmp	r3, #0
   1b6b6:	f280 808c 	bge.w	1b7d2 <hci_evt_encode+0x1be>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1b6ba:	f894 8008 	ldrb.w	r8, [r4, #8]
   1b6be:	7a63      	ldrb	r3, [r4, #9]
   1b6c0:	f008 080f 	and.w	r8, r8, #15
   1b6c4:	f1b8 0f01 	cmp.w	r8, #1
		data_len = (adv->len - BDADDR_SIZE);
   1b6c8:	bf18      	it	ne
   1b6ca:	1f9e      	subne	r6, r3, #6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b6cc:	4423      	add	r3, r4
		data_len = (adv->len - BDADDR_SIZE);
   1b6ce:	bf18      	it	ne
   1b6d0:	b2f6      	uxtbne	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b6d2:	7a9f      	ldrb	r7, [r3, #10]
	if (direct) {
   1b6d4:	9b02      	ldr	r3, [sp, #8]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b6d6:	f1c7 0700 	rsb	r7, r7, #0
		data_len = 0;
   1b6da:	bf08      	it	eq
   1b6dc:	2600      	moveq	r6, #0
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b6de:	b27f      	sxtb	r7, r7
	if (direct) {
   1b6e0:	2b00      	cmp	r3, #0
   1b6e2:	f000 80ab 	beq.w	1b83c <hci_evt_encode+0x228>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1b6e6:	f1b8 0f01 	cmp.w	r8, #1
   1b6ea:	d078      	beq.n	1b7de <hci_evt_encode+0x1ca>
   1b6ec:	4b9c      	ldr	r3, [pc, #624]	; (1b960 <hci_evt_encode+0x34c>)
   1b6ee:	681b      	ldr	r3, [r3, #0]
   1b6f0:	0759      	lsls	r1, r3, #29
   1b6f2:	d010      	beq.n	1b716 <hci_evt_encode+0x102>
   1b6f4:	2301      	movs	r3, #1
   1b6f6:	f04f 0200 	mov.w	r2, #0
   1b6fa:	f363 0202 	bfi	r2, r3, #0, #3
   1b6fe:	4999      	ldr	r1, [pc, #612]	; (1b964 <hci_evt_encode+0x350>)
   1b700:	4b99      	ldr	r3, [pc, #612]	; (1b968 <hci_evt_encode+0x354>)
   1b702:	489a      	ldr	r0, [pc, #616]	; (1b96c <hci_evt_encode+0x358>)
   1b704:	1a5b      	subs	r3, r3, r1
   1b706:	f36f 02c5 	bfc	r2, #3, #3
   1b70a:	08db      	lsrs	r3, r3, #3
   1b70c:	4998      	ldr	r1, [pc, #608]	; (1b970 <hci_evt_encode+0x35c>)
   1b70e:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   1b712:	f7e6 fb21 	bl	1d58 <log_1>
   1b716:	4040      	eors	r0, r0
   1b718:	f380 8811 	msr	BASEPRI, r0
   1b71c:	f04f 0004 	mov.w	r0, #4
   1b720:	df02      	svc	2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
   1b722:	f000 020b 	and.w	r2, r0, #11
   1b726:	e7bf      	b.n	1b6a8 <hci_evt_encode+0x94>
			if (!memcmp(&adv->adv_ind.addr[0],
   1b728:	4992      	ldr	r1, [pc, #584]	; (1b974 <hci_evt_encode+0x360>)
   1b72a:	9303      	str	r3, [sp, #12]
   1b72c:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
   1b730:	4618      	mov	r0, r3
   1b732:	2206      	movs	r2, #6
   1b734:	4451      	add	r1, sl
   1b736:	f7ea fb80 	bl	5e3a <memcmp>
   1b73a:	9b03      	ldr	r3, [sp, #12]
   1b73c:	b9b8      	cbnz	r0, 1b76e <hci_evt_encode+0x15a>
			    adv->tx_addr == dup_filter[i].addr.type) {
   1b73e:	44b2      	add	sl, r6
   1b740:	7a21      	ldrb	r1, [r4, #8]
   1b742:	f89a 0001 	ldrb.w	r0, [sl, #1]
   1b746:	460a      	mov	r2, r1
   1b748:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
   1b74c:	4281      	cmp	r1, r0
   1b74e:	d10e      	bne.n	1b76e <hci_evt_encode+0x15a>
				if (dup_filter[i].mask & BIT(adv->type)) {
   1b750:	f816 3038 	ldrb.w	r3, [r6, r8, lsl #3]
   1b754:	f002 020f 	and.w	r2, r2, #15
   1b758:	fa23 f102 	lsr.w	r1, r3, r2
   1b75c:	07c8      	lsls	r0, r1, #31
   1b75e:	d460      	bmi.n	1b822 <hci_evt_encode+0x20e>
				dup_filter[i].mask |= BIT(adv->type);
   1b760:	2101      	movs	r1, #1
   1b762:	fa01 f202 	lsl.w	r2, r1, r2
   1b766:	4313      	orrs	r3, r2
   1b768:	f806 3038 	strb.w	r3, [r6, r8, lsl #3]
   1b76c:	e7a5      	b.n	1b6ba <hci_evt_encode+0xa6>
		for (i = 0; i < dup_count; i++) {
   1b76e:	f108 0801 	add.w	r8, r8, #1
   1b772:	683a      	ldr	r2, [r7, #0]
   1b774:	4590      	cmp	r8, r2
   1b776:	dbd7      	blt.n	1b728 <hci_evt_encode+0x114>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   1b778:	f8df 8208 	ldr.w	r8, [pc, #520]	; 1b984 <hci_evt_encode+0x370>
   1b77c:	f8d8 0000 	ldr.w	r0, [r8]
   1b780:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
   1b784:	4619      	mov	r1, r3
   1b786:	2206      	movs	r2, #6
   1b788:	3002      	adds	r0, #2
   1b78a:	f7ea fb7d 	bl	5e88 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   1b78e:	f8d8 2000 	ldr.w	r2, [r8]
   1b792:	7a23      	ldrb	r3, [r4, #8]
   1b794:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
   1b798:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b79c:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   1b79e:	7a23      	ldrb	r3, [r4, #8]
   1b7a0:	f003 010f 	and.w	r1, r3, #15
   1b7a4:	2301      	movs	r3, #1
   1b7a6:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1b7a8:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
   1b7aa:	f806 3032 	strb.w	r3, [r6, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1b7ae:	290f      	cmp	r1, #15
			dup_count++;
   1b7b0:	bfd5      	itete	le
   1b7b2:	3101      	addle	r1, #1
			dup_curr++;
   1b7b4:	3201      	addgt	r2, #1
			dup_curr = dup_count;
   1b7b6:	f8c8 1000 	strle.w	r1, [r8]
			dup_curr++;
   1b7ba:	f8c8 2000 	strgt.w	r2, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1b7be:	f8d8 2000 	ldr.w	r2, [r8]
			dup_count++;
   1b7c2:	bfd8      	it	le
   1b7c4:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1b7c6:	2a10      	cmp	r2, #16
			dup_curr = 0;
   1b7c8:	bf04      	itt	eq
   1b7ca:	2200      	moveq	r2, #0
   1b7cc:	f8c8 2000 	streq.w	r2, [r8]
   1b7d0:	e773      	b.n	1b6ba <hci_evt_encode+0xa6>
		for (i = 0; i < dup_count; i++) {
   1b7d2:	f04f 0800 	mov.w	r8, #0
   1b7d6:	f104 030a 	add.w	r3, r4, #10
   1b7da:	4e67      	ldr	r6, [pc, #412]	; (1b978 <hci_evt_encode+0x364>)
   1b7dc:	e7c9      	b.n	1b772 <hci_evt_encode+0x15e>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1b7de:	2211      	movs	r2, #17
   1b7e0:	210b      	movs	r1, #11
   1b7e2:	4628      	mov	r0, r5
   1b7e4:	f7fe ff26 	bl	1a634 <meta_evt>
		drp->num_reports = 1;
   1b7e8:	f880 8000 	strb.w	r8, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
   1b7ec:	f880 8001 	strb.w	r8, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1b7f0:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
   1b7f2:	f001 fcb9 	bl	1d168 <ll_rl_size_get>
   1b7f6:	4583      	cmp	fp, r0
   1b7f8:	f105 0003 	add.w	r0, r5, #3
   1b7fc:	d214      	bcs.n	1b828 <hci_evt_encode+0x214>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   1b7fe:	4602      	mov	r2, r0
   1b800:	1ca9      	adds	r1, r5, #2
   1b802:	4658      	mov	r0, fp
   1b804:	f001 fa46 	bl	1cc94 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
   1b808:	78ab      	ldrb	r3, [r5, #2]
   1b80a:	3302      	adds	r3, #2
   1b80c:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
   1b80e:	2301      	movs	r3, #1
   1b810:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
   1b812:	2206      	movs	r2, #6
   1b814:	f109 0108 	add.w	r1, r9, #8
   1b818:	f105 000a 	add.w	r0, r5, #10
   1b81c:	f7ea fb34 	bl	5e88 <memcpy>
		dir_info->rssi = rssi;
   1b820:	742f      	strb	r7, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1b822:	b013      	add	sp, #76	; 0x4c
   1b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
   1b828:	7a23      	ldrb	r3, [r4, #8]
   1b82a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b82e:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
   1b830:	2206      	movs	r2, #6
   1b832:	f104 010a 	add.w	r1, r4, #10
   1b836:	f7ea fb27 	bl	5e88 <memcpy>
   1b83a:	e7e8      	b.n	1b80e <hci_evt_encode+0x1fa>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1b83c:	f106 020b 	add.w	r2, r6, #11
   1b840:	b2d2      	uxtb	r2, r2
   1b842:	2102      	movs	r1, #2
   1b844:	4628      	mov	r0, r5
   1b846:	f7fe fef5 	bl	1a634 <meta_evt>
	sep->num_reports = 1;
   1b84a:	2301      	movs	r3, #1
   1b84c:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   1b84e:	7a23      	ldrb	r3, [r4, #8]
   1b850:	aa12      	add	r2, sp, #72	; 0x48
   1b852:	f003 030f 	and.w	r3, r3, #15
   1b856:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1b858:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   1b85a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   1b85e:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b860:	7a63      	ldrb	r3, [r4, #9]
   1b862:	4423      	add	r3, r4
   1b864:	f893 800b 	ldrb.w	r8, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
   1b868:	f001 fc7e 	bl	1d168 <ll_rl_size_get>
   1b86c:	4580      	cmp	r8, r0
   1b86e:	f105 0003 	add.w	r0, r5, #3
   1b872:	d211      	bcs.n	1b898 <hci_evt_encode+0x284>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   1b874:	4602      	mov	r2, r0
   1b876:	1ca9      	adds	r1, r5, #2
   1b878:	4640      	mov	r0, r8
   1b87a:	f001 fa0b 	bl	1cc94 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
   1b87e:	78ab      	ldrb	r3, [r5, #2]
   1b880:	3302      	adds	r3, #2
   1b882:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
   1b884:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1b886:	350a      	adds	r5, #10
   1b888:	4632      	mov	r2, r6
   1b88a:	f109 0108 	add.w	r1, r9, #8
   1b88e:	4628      	mov	r0, r5
   1b890:	f7ea fafa 	bl	5e88 <memcpy>
	*prssi = rssi;
   1b894:	55af      	strb	r7, [r5, r6]
   1b896:	e7c4      	b.n	1b822 <hci_evt_encode+0x20e>
		adv_info->addr.type = adv->tx_addr;
   1b898:	7a23      	ldrb	r3, [r4, #8]
   1b89a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b89e:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   1b8a0:	2206      	movs	r2, #6
   1b8a2:	f104 010a 	add.w	r1, r4, #10
   1b8a6:	f7ea faef 	bl	5e88 <memcpy>
   1b8aa:	e7eb      	b.n	1b884 <hci_evt_encode+0x270>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
   1b8ac:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
   1b8ae:	4621      	mov	r1, r4
   1b8b0:	4648      	mov	r0, r9
   1b8b2:	f7fe ff67 	bl	1a784 <le_adv_ext_report.isra.73>
   1b8b6:	e7b4      	b.n	1b822 <hci_evt_encode+0x20e>
   1b8b8:	2204      	movs	r2, #4
   1b8ba:	e7f8      	b.n	1b8ae <hci_evt_encode+0x29a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1b8bc:	4b25      	ldr	r3, [pc, #148]	; (1b954 <hci_evt_encode+0x340>)
   1b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b8c2:	f100 060a 	add.w	r6, r0, #10
   1b8c6:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1b8ca:	2000      	movs	r0, #0
   1b8cc:	ea50 0301 	orrs.w	r3, r0, r1
   1b8d0:	d008      	beq.n	1b8e4 <hci_evt_encode+0x2d0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
   1b8d2:	4b21      	ldr	r3, [pc, #132]	; (1b958 <hci_evt_encode+0x344>)
   1b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b8d8:	2100      	movs	r1, #0
   1b8da:	f402 2080 	and.w	r0, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1b8de:	ea50 0301 	orrs.w	r3, r0, r1
   1b8e2:	d151      	bne.n	1b988 <hci_evt_encode+0x374>
		addr.type = adv->tx_addr;
   1b8e4:	7a23      	ldrb	r3, [r4, #8]
   1b8e6:	ad12      	add	r5, sp, #72	; 0x48
   1b8e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
   1b8ec:	4631      	mov	r1, r6
   1b8ee:	2206      	movs	r2, #6
   1b8f0:	f10d 0015 	add.w	r0, sp, #21
		addr.type = adv->tx_addr;
   1b8f4:	f805 3d34 	strb.w	r3, [r5, #-52]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
   1b8f8:	f7ea fac6 	bl	5e88 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
   1b8fc:	7a63      	ldrb	r3, [r4, #9]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1b8fe:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b900:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1b902:	4631      	mov	r1, r6
   1b904:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b906:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1b908:	f7fe ff00 	bl	1a70c <bt_addr_le_to_str.constprop.77>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
   1b90c:	4b14      	ldr	r3, [pc, #80]	; (1b960 <hci_evt_encode+0x34c>)
   1b90e:	681b      	ldr	r3, [r3, #0]
   1b910:	f003 0307 	and.w	r3, r3, #7
   1b914:	2b01      	cmp	r3, #1
   1b916:	d984      	bls.n	1b822 <hci_evt_encode+0x20e>
   1b918:	2202      	movs	r2, #2
   1b91a:	f04f 0300 	mov.w	r3, #0
   1b91e:	f362 0302 	bfi	r3, r2, #0, #3
   1b922:	4910      	ldr	r1, [pc, #64]	; (1b964 <hci_evt_encode+0x350>)
   1b924:	4a10      	ldr	r2, [pc, #64]	; (1b968 <hci_evt_encode+0x354>)
   1b926:	4815      	ldr	r0, [pc, #84]	; (1b97c <hci_evt_encode+0x368>)
   1b928:	1a52      	subs	r2, r2, r1
   1b92a:	08d2      	lsrs	r2, r2, #3
   1b92c:	f36f 03c5 	bfc	r3, #3, #3
   1b930:	f362 138f 	bfi	r3, r2, #6, #10
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   1b934:	4264      	negs	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
   1b936:	4a12      	ldr	r2, [pc, #72]	; (1b980 <hci_evt_encode+0x36c>)
   1b938:	9207      	str	r2, [sp, #28]
   1b93a:	b264      	sxtb	r4, r4
   1b93c:	2200      	movs	r2, #0
   1b93e:	e9cd 2608 	strd	r2, r6, [sp, #32]
   1b942:	940a      	str	r4, [sp, #40]	; 0x28
   1b944:	2204      	movs	r2, #4
   1b946:	a907      	add	r1, sp, #28
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1b948:	f7e6 fa4d 	bl	1de6 <log_n>
   1b94c:	e769      	b.n	1b822 <hci_evt_encode+0x20e>
   1b94e:	bf00      	nop
   1b950:	ff030100 	.word	0xff030100
   1b954:	2000d0b0 	.word	0x2000d0b0
   1b958:	2000d0b8 	.word	0x2000d0b8
   1b95c:	20001aa4 	.word	0x20001aa4
   1b960:	2000d724 	.word	0x2000d724
   1b964:	0002cff8 	.word	0x0002cff8
   1b968:	0002d020 	.word	0x0002d020
   1b96c:	00031758 	.word	0x00031758
   1b970:	00031614 	.word	0x00031614
   1b974:	20001aae 	.word	0x20001aae
   1b978:	20001aac 	.word	0x20001aac
   1b97c:	00031792 	.word	0x00031792
   1b980:	0003163c 	.word	0x0003163c
   1b984:	20001aa8 	.word	0x20001aa8
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
   1b988:	2208      	movs	r2, #8
   1b98a:	2113      	movs	r1, #19
   1b98c:	4628      	mov	r0, r5
   1b98e:	f7fe fe51 	bl	1a634 <meta_evt>
	sep->handle = 0;
   1b992:	2300      	movs	r3, #0
   1b994:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
   1b996:	7a23      	ldrb	r3, [r4, #8]
   1b998:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b99c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
   1b99e:	2206      	movs	r2, #6
   1b9a0:	4631      	mov	r1, r6
   1b9a2:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
   1b9a4:	f7ea fa70 	bl	5e88 <memcpy>
   1b9a8:	e73b      	b.n	1b822 <hci_evt_encode+0x20e>
	u8_t status = radio_cc->status;
   1b9aa:	7a07      	ldrb	r7, [r0, #8]
	if (!status) {
   1b9ac:	b93f      	cbnz	r7, 1b9be <hci_evt_encode+0x3aa>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
   1b9ae:	f100 0311 	add.w	r3, r0, #17
   1b9b2:	f100 010b 	add.w	r1, r0, #11
   1b9b6:	22ff      	movs	r2, #255	; 0xff
   1b9b8:	7a80      	ldrb	r0, [r0, #10]
   1b9ba:	f001 fd1f 	bl	1d3fc <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1b9be:	4bbd      	ldr	r3, [pc, #756]	; (1bcb4 <hci_evt_encode+0x6a0>)
   1b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b9c4:	2000      	movs	r0, #0
   1b9c6:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1b9ca:	ea50 0301 	orrs.w	r3, r0, r1
   1b9ce:	f43f af28 	beq.w	1b822 <hci_evt_encode+0x20e>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1b9d2:	4bb9      	ldr	r3, [pc, #740]	; (1bcb8 <hci_evt_encode+0x6a4>)
   1b9d4:	e9d3 ab00 	ldrd	sl, fp, [r3]
   1b9d8:	f240 2001 	movw	r0, #513	; 0x201
   1b9dc:	2100      	movs	r1, #0
   1b9de:	ea0a 0200 	and.w	r2, sl, r0
   1b9e2:	ea0b 0301 	and.w	r3, fp, r1
   1b9e6:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1b9e8:	f40a 7800 	and.w	r8, sl, #512	; 0x200
   1b9ec:	f04f 0900 	mov.w	r9, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1b9f0:	f43f af17 	beq.w	1b822 <hci_evt_encode+0x20e>
	if (!status) {
   1b9f4:	2f00      	cmp	r7, #0
   1b9f6:	f040 825d 	bne.w	1beb4 <hci_evt_encode+0x8a0>
		conn_count++;
   1b9fa:	4ab0      	ldr	r2, [pc, #704]	; (1bcbc <hci_evt_encode+0x6a8>)
   1b9fc:	6813      	ldr	r3, [r2, #0]
   1b9fe:	3301      	adds	r3, #1
   1ba00:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1ba02:	ea58 0309 	orrs.w	r3, r8, r9
   1ba06:	f040 8265 	bne.w	1bed4 <hci_evt_encode+0x8c0>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1ba0a:	4628      	mov	r0, r5
   1ba0c:	2212      	movs	r2, #18
   1ba0e:	2101      	movs	r1, #1
   1ba10:	f7fe fe10 	bl	1a634 <meta_evt>
   1ba14:	4605      	mov	r5, r0
	if (status) {
   1ba16:	b327      	cbz	r7, 1ba62 <hci_evt_encode+0x44e>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1ba18:	2212      	movs	r2, #18
   1ba1a:	2100      	movs	r1, #0
   1ba1c:	f7ea fa61 	bl	5ee2 <memset>
		lecc->status = status;
   1ba20:	702f      	strb	r7, [r5, #0]
   1ba22:	e6fe      	b.n	1b822 <hci_evt_encode+0x20e>
		if ((radio_cc->own_addr_type) &&
   1ba24:	7f63      	ldrb	r3, [r4, #29]
   1ba26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ba2a:	2b40      	cmp	r3, #64	; 0x40
   1ba2c:	f040 826b 	bne.w	1bf06 <hci_evt_encode+0x8f2>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
   1ba30:	2206      	movs	r2, #6
   1ba32:	f104 0118 	add.w	r1, r4, #24
   1ba36:	f7ea fa27 	bl	5e88 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
   1ba3a:	2206      	movs	r2, #6
   1ba3c:	f104 0111 	add.w	r1, r4, #17
   1ba40:	f105 0011 	add.w	r0, r5, #17
   1ba44:	f7ea fa20 	bl	5e88 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
   1ba48:	8be3      	ldrh	r3, [r4, #30]
   1ba4a:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
   1ba4e:	8c23      	ldrh	r3, [r4, #32]
   1ba50:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
   1ba54:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1ba56:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = radio_cc->mca;
   1ba5a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ba5e:	776b      	strb	r3, [r5, #29]
   1ba60:	e6df      	b.n	1b822 <hci_evt_encode+0x20e>
	lecc->status = 0x00;
   1ba62:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   1ba64:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
   1ba68:	7a63      	ldrb	r3, [r4, #9]
   1ba6a:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
   1ba6c:	7aa3      	ldrb	r3, [r4, #10]
   1ba6e:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
   1ba70:	2206      	movs	r2, #6
   1ba72:	f104 010b 	add.w	r1, r4, #11
   1ba76:	3005      	adds	r0, #5
   1ba78:	f7ea fa06 	bl	5e88 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
   1ba7c:	8be3      	ldrh	r3, [r4, #30]
   1ba7e:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
   1ba82:	8c23      	ldrh	r3, [r4, #32]
   1ba84:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
   1ba88:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1ba8a:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = radio_cc->mca;
   1ba8e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ba92:	746b      	strb	r3, [r5, #17]
   1ba94:	e6c5      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1ba96:	4b87      	ldr	r3, [pc, #540]	; (1bcb4 <hci_evt_encode+0x6a0>)
   1ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ba9c:	2100      	movs	r1, #0
   1ba9e:	f002 0010 	and.w	r0, r2, #16
   1baa2:	ea50 0301 	orrs.w	r3, r0, r1
   1baa6:	f43f aebc 	beq.w	1b822 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   1baaa:	2204      	movs	r2, #4
   1baac:	2105      	movs	r1, #5
   1baae:	4628      	mov	r0, r5
   1bab0:	f7fe fd79 	bl	1a5a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1bab4:	2104      	movs	r1, #4
   1bab6:	f105 0008 	add.w	r0, r5, #8
   1baba:	f002 fd27 	bl	1e50c <net_buf_simple_add>
	ep->status = 0x00;
   1babe:	2300      	movs	r3, #0
	conn_count--;
   1bac0:	4a7e      	ldr	r2, [pc, #504]	; (1bcbc <hci_evt_encode+0x6a8>)
	ep->status = 0x00;
   1bac2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1bac4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   1bac8:	7a23      	ldrb	r3, [r4, #8]
   1baca:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   1bacc:	6813      	ldr	r3, [r2, #0]
   1bace:	3b01      	subs	r3, #1
   1bad0:	6013      	str	r3, [r2, #0]
   1bad2:	e6a6      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bad4:	4b77      	ldr	r3, [pc, #476]	; (1bcb4 <hci_evt_encode+0x6a0>)
   1bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bada:	2000      	movs	r0, #0
   1badc:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1bae0:	ea50 0301 	orrs.w	r3, r0, r1
   1bae4:	f43f ae9d 	beq.w	1b822 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1bae8:	4b73      	ldr	r3, [pc, #460]	; (1bcb8 <hci_evt_encode+0x6a4>)
   1baea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1baee:	2100      	movs	r1, #0
   1baf0:	f002 0004 	and.w	r0, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1baf4:	ea50 0301 	orrs.w	r3, r0, r1
   1baf8:	f43f ae93 	beq.w	1b822 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1bafc:	2209      	movs	r2, #9
   1bafe:	2103      	movs	r1, #3
   1bb00:	4628      	mov	r0, r5
   1bb02:	f7fe fd97 	bl	1a634 <meta_evt>
	sep->status = radio_cu->status;
   1bb06:	7a23      	ldrb	r3, [r4, #8]
   1bb08:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
   1bb0a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
	sep->handle = sys_cpu_to_le16(handle);
   1bb0e:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
   1bb12:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
   1bb16:	f8b4 300b 	ldrh.w	r3, [r4, #11]
   1bb1a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
   1bb1e:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1bb22:	f8a0 3007 	strh.w	r3, [r0, #7]
   1bb26:	e67c      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   1bb28:	4b62      	ldr	r3, [pc, #392]	; (1bcb4 <hci_evt_encode+0x6a0>)
   1bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb2e:	2000      	movs	r0, #0
   1bb30:	f403 4100 	and.w	r1, r3, #32768	; 0x8000
   1bb34:	ea50 0301 	orrs.w	r3, r0, r1
   1bb38:	f43f ae73 	beq.w	1b822 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
   1bb3c:	2203      	movs	r2, #3
   1bb3e:	2130      	movs	r1, #48	; 0x30
   1bb40:	4628      	mov	r0, r5
   1bb42:	f7fe fd30 	bl	1a5a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1bb46:	2103      	movs	r1, #3
   1bb48:	f105 0008 	add.w	r0, r5, #8
   1bb4c:	f002 fcde 	bl	1e50c <net_buf_simple_add>
	ep->status = 0x00;
   1bb50:	2300      	movs	r3, #0
   1bb52:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1bb54:	f8a0 6001 	strh.w	r6, [r0, #1]
   1bb58:	e663      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   1bb5a:	4b59      	ldr	r3, [pc, #356]	; (1bcc0 <hci_evt_encode+0x6ac>)
   1bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb60:	2100      	movs	r1, #0
   1bb62:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
   1bb66:	ea50 0301 	orrs.w	r3, r0, r1
   1bb6a:	f43f ae5a 	beq.w	1b822 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
   1bb6e:	2202      	movs	r2, #2
   1bb70:	2157      	movs	r1, #87	; 0x57
   1bb72:	4628      	mov	r0, r5
   1bb74:	f7fe fd17 	bl	1a5a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1bb78:	2102      	movs	r1, #2
   1bb7a:	f105 0008 	add.w	r0, r5, #8
   1bb7e:	f002 fcc5 	bl	1e50c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   1bb82:	8006      	strh	r6, [r0, #0]
   1bb84:	e64d      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bb86:	4b4b      	ldr	r3, [pc, #300]	; (1bcb4 <hci_evt_encode+0x6a0>)
   1bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb8c:	2000      	movs	r0, #0
   1bb8e:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1bb92:	ea50 0301 	orrs.w	r3, r0, r1
   1bb96:	f43f ae44 	beq.w	1b822 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1bb9a:	4b47      	ldr	r3, [pc, #284]	; (1bcb8 <hci_evt_encode+0x6a4>)
   1bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bba0:	2100      	movs	r1, #0
   1bba2:	f402 2000 	and.w	r0, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bba6:	ea50 0301 	orrs.w	r3, r0, r1
   1bbaa:	f43f ae3a 	beq.w	1b822 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   1bbae:	2203      	movs	r2, #3
   1bbb0:	2114      	movs	r1, #20
   1bbb2:	4628      	mov	r0, r5
   1bbb4:	f7fe fd3e 	bl	1a634 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1bbb8:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
   1bbba:	7a23      	ldrb	r3, [r4, #8]
   1bbbc:	7083      	strb	r3, [r0, #2]
   1bbbe:	e630      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bbc0:	4b3c      	ldr	r3, [pc, #240]	; (1bcb4 <hci_evt_encode+0x6a0>)
   1bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bbc6:	2000      	movs	r0, #0
   1bbc8:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1bbcc:	ea50 0301 	orrs.w	r3, r0, r1
   1bbd0:	d008      	beq.n	1bbe4 <hci_evt_encode+0x5d0>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1bbd2:	4b39      	ldr	r3, [pc, #228]	; (1bcb8 <hci_evt_encode+0x6a4>)
   1bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bbd8:	2100      	movs	r1, #0
   1bbda:	f402 6000 	and.w	r0, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bbde:	ea50 0301 	orrs.w	r3, r0, r1
   1bbe2:	d132      	bne.n	1bc4a <hci_evt_encode+0x636>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1bbe4:	4b37      	ldr	r3, [pc, #220]	; (1bcc4 <hci_evt_encode+0x6b0>)
   1bbe6:	681b      	ldr	r3, [r3, #0]
   1bbe8:	f003 0307 	and.w	r3, r3, #7
   1bbec:	2b01      	cmp	r3, #1
   1bbee:	f67f ae18 	bls.w	1b822 <hci_evt_encode+0x20e>
   1bbf2:	2202      	movs	r2, #2
   1bbf4:	f04f 0300 	mov.w	r3, #0
   1bbf8:	f362 0302 	bfi	r3, r2, #0, #3
   1bbfc:	4932      	ldr	r1, [pc, #200]	; (1bcc8 <hci_evt_encode+0x6b4>)
   1bbfe:	4a33      	ldr	r2, [pc, #204]	; (1bccc <hci_evt_encode+0x6b8>)
   1bc00:	4833      	ldr	r0, [pc, #204]	; (1bcd0 <hci_evt_encode+0x6bc>)
   1bc02:	1a52      	subs	r2, r2, r1
   1bc04:	08d2      	lsrs	r2, r2, #3
   1bc06:	f36f 03c5 	bfc	r3, #3, #3
   1bc0a:	f362 138f 	bfi	r3, r2, #6, #10
   1bc0e:	4a31      	ldr	r2, [pc, #196]	; (1bcd4 <hci_evt_encode+0x6c0>)
   1bc10:	7a61      	ldrb	r1, [r4, #9]
   1bc12:	e9cd 260b 	strd	r2, r6, [sp, #44]	; 0x2c
   1bc16:	7a22      	ldrb	r2, [r4, #8]
   1bc18:	920d      	str	r2, [sp, #52]	; 0x34
   1bc1a:	2900      	cmp	r1, #0
   1bc1c:	fa91 f2a1 	rbit	r2, r1
   1bc20:	fab2 f282 	clz	r2, r2
   1bc24:	7aa1      	ldrb	r1, [r4, #10]
   1bc26:	bf08      	it	eq
   1bc28:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1bc2c:	3201      	adds	r2, #1
   1bc2e:	2900      	cmp	r1, #0
   1bc30:	920e      	str	r2, [sp, #56]	; 0x38
   1bc32:	fa91 f2a1 	rbit	r2, r1
   1bc36:	fab2 f282 	clz	r2, r2
   1bc3a:	bf08      	it	eq
   1bc3c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1bc40:	3201      	adds	r2, #1
   1bc42:	920f      	str	r2, [sp, #60]	; 0x3c
   1bc44:	a90b      	add	r1, sp, #44	; 0x2c
   1bc46:	2205      	movs	r2, #5
   1bc48:	e67e      	b.n	1b948 <hci_evt_encode+0x334>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   1bc4a:	2205      	movs	r2, #5
   1bc4c:	210c      	movs	r1, #12
   1bc4e:	4628      	mov	r0, r5
   1bc50:	f7fe fcf0 	bl	1a634 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
   1bc54:	7a23      	ldrb	r3, [r4, #8]
   1bc56:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1bc58:	f8a0 6001 	strh.w	r6, [r0, #1]
   1bc5c:	7a62      	ldrb	r2, [r4, #9]
   1bc5e:	2a00      	cmp	r2, #0
   1bc60:	fa92 f3a2 	rbit	r3, r2
   1bc64:	fab3 f383 	clz	r3, r3
   1bc68:	bf08      	it	eq
   1bc6a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1bc6e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
   1bc70:	70c3      	strb	r3, [r0, #3]
   1bc72:	7aa2      	ldrb	r2, [r4, #10]
   1bc74:	fa92 f3a2 	rbit	r3, r2
   1bc78:	2a00      	cmp	r2, #0
   1bc7a:	fab3 f383 	clz	r3, r3
   1bc7e:	bf08      	it	eq
   1bc80:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1bc84:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
   1bc86:	7103      	strb	r3, [r0, #4]
   1bc88:	e5cb      	b.n	1b822 <hci_evt_encode+0x20e>
		LL_ASSERT(0);
   1bc8a:	4b0e      	ldr	r3, [pc, #56]	; (1bcc4 <hci_evt_encode+0x6b0>)
   1bc8c:	681b      	ldr	r3, [r3, #0]
   1bc8e:	075a      	lsls	r2, r3, #29
   1bc90:	f43f ad41 	beq.w	1b716 <hci_evt_encode+0x102>
   1bc94:	2301      	movs	r3, #1
   1bc96:	f04f 0200 	mov.w	r2, #0
   1bc9a:	f363 0202 	bfi	r2, r3, #0, #3
   1bc9e:	490a      	ldr	r1, [pc, #40]	; (1bcc8 <hci_evt_encode+0x6b4>)
   1bca0:	4b0a      	ldr	r3, [pc, #40]	; (1bccc <hci_evt_encode+0x6b8>)
   1bca2:	1a5b      	subs	r3, r3, r1
   1bca4:	f36f 02c5 	bfc	r2, #3, #3
   1bca8:	08db      	lsrs	r3, r3, #3
   1bcaa:	490b      	ldr	r1, [pc, #44]	; (1bcd8 <hci_evt_encode+0x6c4>)
   1bcac:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(0);
   1bcb0:	480a      	ldr	r0, [pc, #40]	; (1bcdc <hci_evt_encode+0x6c8>)
   1bcb2:	e52e      	b.n	1b712 <hci_evt_encode+0xfe>
   1bcb4:	2000d0b0 	.word	0x2000d0b0
   1bcb8:	2000d0b8 	.word	0x2000d0b8
   1bcbc:	20001aa0 	.word	0x20001aa0
   1bcc0:	20001b30 	.word	0x20001b30
   1bcc4:	2000d724 	.word	0x2000d724
   1bcc8:	0002cff8 	.word	0x0002cff8
   1bccc:	0002d020 	.word	0x0002d020
   1bcd0:	000317b9 	.word	0x000317b9
   1bcd4:	00031651 	.word	0x00031651
   1bcd8:	00031665 	.word	0x00031665
   1bcdc:	0002f0b9 	.word	0x0002f0b9
	switch (pdu_data->llctrl.opcode) {
   1bce0:	7ac3      	ldrb	r3, [r0, #11]
   1bce2:	3b03      	subs	r3, #3
   1bce4:	2b12      	cmp	r3, #18
   1bce6:	f200 80d1 	bhi.w	1be8c <hci_evt_encode+0x878>
   1bcea:	e8df f003 	tbb	[pc, r3]
   1bcee:	cf0a      	.short	0xcf0a
   1bcf0:	cfae31cf 	.word	0xcfae31cf
   1bcf4:	3ecfcf37 	.word	0x3ecfcf37
   1bcf8:	cf62cf5e 	.word	0xcf62cf5e
   1bcfc:	8ccfcfcf 	.word	0x8ccfcfcf
   1bd00:	8c          	.byte	0x8c
   1bd01:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bd02:	4b83      	ldr	r3, [pc, #524]	; (1bf10 <hci_evt_encode+0x8fc>)
   1bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bd08:	2000      	movs	r0, #0
   1bd0a:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1bd0e:	ea50 0301 	orrs.w	r3, r0, r1
   1bd12:	f43f ad86 	beq.w	1b822 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   1bd16:	4b7f      	ldr	r3, [pc, #508]	; (1bf14 <hci_evt_encode+0x900>)
   1bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bd1c:	2100      	movs	r1, #0
   1bd1e:	f002 0010 	and.w	r0, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bd22:	ea50 0301 	orrs.w	r3, r0, r1
   1bd26:	f43f ad7c 	beq.w	1b822 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1bd2a:	220c      	movs	r2, #12
   1bd2c:	2105      	movs	r1, #5
   1bd2e:	4628      	mov	r0, r5
   1bd30:	f7fe fc80 	bl	1a634 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   1bd34:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1bd36:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   1bd38:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
   1bd3c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
   1bd40:	f7ea f8a2 	bl	5e88 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
   1bd44:	2202      	movs	r2, #2
   1bd46:	f104 0114 	add.w	r1, r4, #20
   1bd4a:	f105 000a 	add.w	r0, r5, #10
   1bd4e:	e629      	b.n	1b9a4 <hci_evt_encode+0x390>
		encrypt_change(0x00, handle, buf);
   1bd50:	460a      	mov	r2, r1
   1bd52:	2000      	movs	r0, #0
   1bd54:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1bd56:	f7fe fc83 	bl	1a660 <encrypt_change>
   1bd5a:	e562      	b.n	1b822 <hci_evt_encode+0x20e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1bd5c:	460b      	mov	r3, r1
   1bd5e:	4632      	mov	r2, r6
   1bd60:	4649      	mov	r1, r9
   1bd62:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1bd64:	f7fe fc9e 	bl	1a6a4 <le_remote_feat_complete>
   1bd68:	e55b      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
   1bd6a:	4b69      	ldr	r3, [pc, #420]	; (1bf10 <hci_evt_encode+0x8fc>)
   1bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bd70:	2100      	movs	r1, #0
   1bd72:	f402 6000 	and.w	r0, r2, #2048	; 0x800
   1bd76:	ea50 0301 	orrs.w	r3, r0, r1
   1bd7a:	f43f ad52 	beq.w	1b822 <hci_evt_encode+0x20e>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
   1bd7e:	2208      	movs	r2, #8
   1bd80:	210c      	movs	r1, #12
   1bd82:	4628      	mov	r0, r5
   1bd84:	f7fe fc0f 	bl	1a5a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1bd88:	2108      	movs	r1, #8
   1bd8a:	1868      	adds	r0, r5, r1
   1bd8c:	f002 fbbe 	bl	1e50c <net_buf_simple_add>
	ep->status = 0x00;
   1bd90:	2300      	movs	r3, #0
   1bd92:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1bd94:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
   1bd98:	7b23      	ldrb	r3, [r4, #12]
   1bd9a:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
   1bd9c:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1bda0:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
   1bda2:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1bda6:	80c3      	strh	r3, [r0, #6]
   1bda8:	e53b      	b.n	1b822 <hci_evt_encode+0x20e>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1bdaa:	460a      	mov	r2, r1
   1bdac:	7b00      	ldrb	r0, [r0, #12]
   1bdae:	4631      	mov	r1, r6
   1bdb0:	e7d1      	b.n	1bd56 <hci_evt_encode+0x742>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bdb2:	4b57      	ldr	r3, [pc, #348]	; (1bf10 <hci_evt_encode+0x8fc>)
   1bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bdb8:	2000      	movs	r0, #0
   1bdba:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1bdbe:	ea50 0301 	orrs.w	r3, r0, r1
   1bdc2:	d008      	beq.n	1bdd6 <hci_evt_encode+0x7c2>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1bdc4:	4b53      	ldr	r3, [pc, #332]	; (1bf14 <hci_evt_encode+0x900>)
   1bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bdca:	2100      	movs	r1, #0
   1bdcc:	f002 0020 	and.w	r0, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1bdd0:	ea50 0301 	orrs.w	r3, r0, r1
   1bdd4:	d108      	bne.n	1bde8 <hci_evt_encode+0x7d4>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1bdd6:	2300      	movs	r3, #0
   1bdd8:	e9cd 3300 	strd	r3, r3, [sp]
   1bddc:	221a      	movs	r2, #26
   1bdde:	2102      	movs	r1, #2
   1bde0:	4630      	mov	r0, r6
   1bde2:	f7fd f941 	bl	19068 <ll_conn_update>
   1bde6:	e51c      	b.n	1b822 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   1bde8:	220a      	movs	r2, #10
   1bdea:	2106      	movs	r1, #6
   1bdec:	4628      	mov	r0, r5
   1bdee:	f7fe fc21 	bl	1a634 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1bdf2:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1bdf4:	89a3      	ldrh	r3, [r4, #12]
   1bdf6:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1bdf8:	89e3      	ldrh	r3, [r4, #14]
   1bdfa:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1bdfc:	8a23      	ldrh	r3, [r4, #16]
   1bdfe:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1be00:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1be02:	8103      	strh	r3, [r0, #8]
   1be04:	e50d      	b.n	1b822 <hci_evt_encode+0x20e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1be06:	4b42      	ldr	r3, [pc, #264]	; (1bf10 <hci_evt_encode+0x8fc>)
   1be08:	e9d3 2300 	ldrd	r2, r3, [r3]
   1be0c:	2000      	movs	r0, #0
   1be0e:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
   1be12:	ea50 0301 	orrs.w	r3, r0, r1
   1be16:	f43f ad04 	beq.w	1b822 <hci_evt_encode+0x20e>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1be1a:	4b3e      	ldr	r3, [pc, #248]	; (1bf14 <hci_evt_encode+0x900>)
   1be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1be20:	2100      	movs	r1, #0
   1be22:	f002 0040 	and.w	r0, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1be26:	ea50 0301 	orrs.w	r3, r0, r1
   1be2a:	f43f acfa 	beq.w	1b822 <hci_evt_encode+0x20e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   1be2e:	220a      	movs	r2, #10
   1be30:	2107      	movs	r1, #7
   1be32:	4628      	mov	r0, r5
   1be34:	f7fe fbfe 	bl	1a634 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1be38:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   1be3a:	8a23      	ldrh	r3, [r4, #16]
   1be3c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1be3e:	8a63      	ldrh	r3, [r4, #18]
   1be40:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   1be42:	89a3      	ldrh	r3, [r4, #12]
   1be44:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1be46:	89e3      	ldrh	r3, [r4, #14]
   1be48:	e7db      	b.n	1be02 <hci_evt_encode+0x7ee>
		le_unknown_rsp(pdu_data, handle, buf);
   1be4a:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1be4c:	2a0e      	cmp	r2, #14
   1be4e:	d104      	bne.n	1be5a <hci_evt_encode+0x846>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1be50:	460b      	mov	r3, r1
   1be52:	4632      	mov	r2, r6
   1be54:	2100      	movs	r1, #0
   1be56:	201a      	movs	r0, #26
   1be58:	e784      	b.n	1bd64 <hci_evt_encode+0x750>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1be5a:	4b2f      	ldr	r3, [pc, #188]	; (1bf18 <hci_evt_encode+0x904>)
   1be5c:	681b      	ldr	r3, [r3, #0]
   1be5e:	f003 0307 	and.w	r3, r3, #7
   1be62:	2b01      	cmp	r3, #1
   1be64:	f67f acdd 	bls.w	1b822 <hci_evt_encode+0x20e>
   1be68:	2102      	movs	r1, #2
   1be6a:	f04f 0300 	mov.w	r3, #0
   1be6e:	f361 0302 	bfi	r3, r1, #0, #3
   1be72:	482a      	ldr	r0, [pc, #168]	; (1bf1c <hci_evt_encode+0x908>)
   1be74:	492a      	ldr	r1, [pc, #168]	; (1bf20 <hci_evt_encode+0x90c>)
   1be76:	1a09      	subs	r1, r1, r0
   1be78:	08c9      	lsrs	r1, r1, #3
   1be7a:	f36f 03c5 	bfc	r3, #3, #3
   1be7e:	f361 138f 	bfi	r3, r1, #6, #10
   1be82:	4828      	ldr	r0, [pc, #160]	; (1bf24 <hci_evt_encode+0x910>)
   1be84:	4928      	ldr	r1, [pc, #160]	; (1bf28 <hci_evt_encode+0x914>)
   1be86:	f7e5 ff7b 	bl	1d80 <log_2>
   1be8a:	e4ca      	b.n	1b822 <hci_evt_encode+0x20e>
		LL_ASSERT(0);
   1be8c:	4b22      	ldr	r3, [pc, #136]	; (1bf18 <hci_evt_encode+0x904>)
   1be8e:	681b      	ldr	r3, [r3, #0]
   1be90:	075b      	lsls	r3, r3, #29
   1be92:	f43f ac40 	beq.w	1b716 <hci_evt_encode+0x102>
   1be96:	2301      	movs	r3, #1
   1be98:	f04f 0200 	mov.w	r2, #0
   1be9c:	f363 0202 	bfi	r2, r3, #0, #3
   1bea0:	491e      	ldr	r1, [pc, #120]	; (1bf1c <hci_evt_encode+0x908>)
   1bea2:	4b1f      	ldr	r3, [pc, #124]	; (1bf20 <hci_evt_encode+0x90c>)
   1bea4:	1a5b      	subs	r3, r3, r1
   1bea6:	f36f 02c5 	bfc	r2, #3, #3
   1beaa:	08db      	lsrs	r3, r3, #3
   1beac:	f363 128f 	bfi	r2, r3, #6, #10
   1beb0:	491e      	ldr	r1, [pc, #120]	; (1bf2c <hci_evt_encode+0x918>)
   1beb2:	e6fd      	b.n	1bcb0 <hci_evt_encode+0x69c>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1beb4:	ea58 0309 	orrs.w	r3, r8, r9
   1beb8:	f43f ada7 	beq.w	1ba0a <hci_evt_encode+0x3f6>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1bebc:	221e      	movs	r2, #30
   1bebe:	210a      	movs	r1, #10
   1bec0:	4628      	mov	r0, r5
   1bec2:	f7fe fbb7 	bl	1a634 <meta_evt>
   1bec6:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   1bec8:	221e      	movs	r2, #30
   1beca:	2100      	movs	r1, #0
   1becc:	f7ea f809 	bl	5ee2 <memset>
			leecc->status = status;
   1bed0:	7027      	strb	r7, [r4, #0]
   1bed2:	e4a6      	b.n	1b822 <hci_evt_encode+0x20e>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1bed4:	221e      	movs	r2, #30
   1bed6:	210a      	movs	r1, #10
   1bed8:	4628      	mov	r0, r5
   1beda:	f7fe fbab 	bl	1a634 <meta_evt>
		leecc->status = 0x00;
   1bede:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   1bee0:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
   1bee4:	7a63      	ldrb	r3, [r4, #9]
   1bee6:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
   1bee8:	7aa3      	ldrb	r3, [r4, #10]
   1beea:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1beec:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
   1beee:	2206      	movs	r2, #6
   1bef0:	f104 010b 	add.w	r1, r4, #11
   1bef4:	3005      	adds	r0, #5
   1bef6:	f7e9 ffc7 	bl	5e88 <memcpy>
		if ((radio_cc->own_addr_type) &&
   1befa:	7de3      	ldrb	r3, [r4, #23]
   1befc:	f105 000b 	add.w	r0, r5, #11
   1bf00:	2b00      	cmp	r3, #0
   1bf02:	f47f ad8f 	bne.w	1ba24 <hci_evt_encode+0x410>
			(void)memset(&leecc->local_rpa.val[0], 0x0,
   1bf06:	2206      	movs	r2, #6
   1bf08:	2100      	movs	r1, #0
   1bf0a:	f7e9 ffea 	bl	5ee2 <memset>
   1bf0e:	e594      	b.n	1ba3a <hci_evt_encode+0x426>
   1bf10:	2000d0b0 	.word	0x2000d0b0
   1bf14:	2000d0b8 	.word	0x2000d0b8
   1bf18:	2000d724 	.word	0x2000d724
   1bf1c:	0002cff8 	.word	0x0002cff8
   1bf20:	0002d020 	.word	0x0002d020
   1bf24:	000317e9 	.word	0x000317e9
   1bf28:	00031674 	.word	0x00031674
   1bf2c:	00031683 	.word	0x00031683

0001bf30 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
   1bf30:	b570      	push	{r4, r5, r6, lr}
   1bf32:	4606      	mov	r6, r0
   1bf34:	460d      	mov	r5, r1
   1bf36:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   1bf38:	2113      	movs	r1, #19
   1bf3a:	2205      	movs	r2, #5
   1bf3c:	f7fe fb33 	bl	1a5a6 <evt_create>

	ep = net_buf_add(buf, len);
   1bf40:	2105      	movs	r1, #5
   1bf42:	f106 0008 	add.w	r0, r6, #8
   1bf46:	f002 fae1 	bl	1e50c <net_buf_simple_add>
	ep->num_handles = num_handles;
   1bf4a:	2301      	movs	r3, #1
   1bf4c:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1bf4e:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1bf52:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   1bf56:	bd70      	pop	{r4, r5, r6, pc}

0001bf58 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1bf58:	7903      	ldrb	r3, [r0, #4]
   1bf5a:	2b01      	cmp	r3, #1
   1bf5c:	d006      	beq.n	1bf6c <hci_get_class+0x14>
   1bf5e:	3b02      	subs	r3, #2
   1bf60:	b2db      	uxtb	r3, r3
   1bf62:	2b0a      	cmp	r3, #10
   1bf64:	d80a      	bhi.n	1bf7c <hci_get_class+0x24>
   1bf66:	4a07      	ldr	r2, [pc, #28]	; (1bf84 <hci_get_class+0x2c>)
   1bf68:	56d0      	ldrsb	r0, [r2, r3]
   1bf6a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1bf6c:	7a03      	ldrb	r3, [r0, #8]
   1bf6e:	f003 0303 	and.w	r3, r3, #3
   1bf72:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
   1bf74:	bf0c      	ite	eq
   1bf76:	2002      	moveq	r0, #2
   1bf78:	2003      	movne	r0, #3
   1bf7a:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1bf7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
   1bf80:	4770      	bx	lr
   1bf82:	bf00      	nop
   1bf84:	000315eb 	.word	0x000315eb

0001bf88 <hci_init>:
	dup_count = -1;
   1bf88:	4b0a      	ldr	r3, [pc, #40]	; (1bfb4 <hci_init+0x2c>)
   1bf8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bf8e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
   1bf90:	4b09      	ldr	r3, [pc, #36]	; (1bfb8 <hci_init+0x30>)
   1bf92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bf96:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1bf9a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1bf9e:	4b07      	ldr	r3, [pc, #28]	; (1bfbc <hci_init+0x34>)
   1bfa0:	2000      	movs	r0, #0
   1bfa2:	2100      	movs	r1, #0
   1bfa4:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1bfa8:	4b05      	ldr	r3, [pc, #20]	; (1bfc0 <hci_init+0x38>)
   1bfaa:	201f      	movs	r0, #31
   1bfac:	2100      	movs	r1, #0
   1bfae:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1bfb2:	4770      	bx	lr
   1bfb4:	20001aa4 	.word	0x20001aa4
   1bfb8:	2000d0b0 	.word	0x2000d0b0
   1bfbc:	20001b30 	.word	0x20001b30
   1bfc0:	2000d0b8 	.word	0x2000d0b8

0001bfc4 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
   1bfc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bfc6:	460c      	mov	r4, r1
   1bfc8:	1846      	adds	r6, r0, r1
   1bfca:	1b35      	subs	r5, r6, r4
	u8_t *buf8 = buf;

	while (len) {
   1bfcc:	b18c      	cbz	r4, 1bff2 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
   1bfce:	f7e9 f877 	bl	50c0 <sys_rand32_get>

		if (len >= sizeof(v)) {
   1bfd2:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
   1bfd4:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
   1bfd6:	d907      	bls.n	1bfe8 <bt_rand+0x24>
			memcpy(buf8, &v, sizeof(v));
   1bfd8:	2204      	movs	r2, #4
   1bfda:	eb0d 0102 	add.w	r1, sp, r2
   1bfde:	4628      	mov	r0, r5
   1bfe0:	f7e9 ff52 	bl	5e88 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
   1bfe4:	3c04      	subs	r4, #4
   1bfe6:	e7f0      	b.n	1bfca <bt_rand+0x6>
		} else {
			memcpy(buf8, &v, len);
   1bfe8:	4622      	mov	r2, r4
   1bfea:	a901      	add	r1, sp, #4
   1bfec:	4628      	mov	r0, r5
   1bfee:	f7e9 ff4b 	bl	5e88 <memcpy>
			break;
		}
	}

	return 0;
}
   1bff2:	2000      	movs	r0, #0
   1bff4:	b002      	add	sp, #8
   1bff6:	bd70      	pop	{r4, r5, r6, pc}

0001bff8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   1bff8:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1bffa:	2300      	movs	r3, #0
   1bffc:	f001 fbb0 	bl	1d760 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1c000:	2000      	movs	r0, #0
   1c002:	bd08      	pop	{r3, pc}

0001c004 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1c004:	4800      	ldr	r0, [pc, #0]	; (1c008 <ll_adv_set_get+0x4>)
   1c006:	4770      	bx	lr
   1c008:	20001b38 	.word	0x20001b38

0001c00c <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c010:	b087      	sub	sp, #28
   1c012:	4698      	mov	r8, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c014:	4b7e      	ldr	r3, [pc, #504]	; (1c210 <ll_adv_params_set+0x204>)
   1c016:	9304      	str	r3, [sp, #16]
   1c018:	f240 7301 	movw	r3, #1793	; 0x701
{
   1c01c:	460e      	mov	r6, r1
   1c01e:	4614      	mov	r4, r2
   1c020:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
   1c024:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1c028:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c02c:	f8ad 3014 	strh.w	r3, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
   1c030:	f7fc fe04 	bl	18c3c <ll_adv_is_enabled>
   1c034:	4607      	mov	r7, r0
   1c036:	2800      	cmp	r0, #0
   1c038:	f040 80e5 	bne.w	1c206 <ll_adv_params_set+0x1fa>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   1c03c:	4975      	ldr	r1, [pc, #468]	; (1c214 <ll_adv_params_set+0x208>)
   1c03e:	7a0b      	ldrb	r3, [r1, #8]
   1c040:	2001      	movs	r0, #1
   1c042:	f360 0302 	bfi	r3, r0, #0, #3

	/* extended */
	if (adv_type > 0x04) {
   1c046:	f1b8 0f04 	cmp.w	r8, #4
	ll_adv.phy_p = BIT(0);
   1c04a:	720b      	strb	r3, [r1, #8]
	if (adv_type > 0x04) {
   1c04c:	d90b      	bls.n	1c066 <ll_adv_params_set+0x5a>
		/* legacy */
		if (evt_prop & BIT(4)) {
   1c04e:	06f2      	lsls	r2, r6, #27
   1c050:	f006 0303 	and.w	r3, r6, #3
   1c054:	d50f      	bpl.n	1c076 <ll_adv_params_set+0x6a>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1c056:	4a70      	ldr	r2, [pc, #448]	; (1c218 <ll_adv_params_set+0x20c>)
   1c058:	9203      	str	r2, [sp, #12]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   1c05a:	0735      	lsls	r5, r6, #28
   1c05c:	d406      	bmi.n	1c06c <ll_adv_params_set+0x60>
			adv_type = leg_adv_type[evt_prop & 0x03];
   1c05e:	aa06      	add	r2, sp, #24
   1c060:	4413      	add	r3, r2
   1c062:	f813 8c0c 	ldrb.w	r8, [r3, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   1c066:	f1b8 0f01 	cmp.w	r8, #1
   1c06a:	d112      	bne.n	1c092 <ll_adv_params_set+0x86>
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
   1c06c:	2300      	movs	r3, #0
   1c06e:	60cb      	str	r3, [r1, #12]
   1c070:	f04f 0801 	mov.w	r8, #1
   1c074:	e00e      	b.n	1c094 <ll_adv_params_set+0x88>
			if (((evt_prop & 0x03) == 0x03) ||
   1c076:	2b03      	cmp	r3, #3
   1c078:	f000 80c7 	beq.w	1c20a <ll_adv_params_set+0x1fe>
   1c07c:	f006 030c 	and.w	r3, r6, #12
   1c080:	2b0c      	cmp	r3, #12
   1c082:	f000 80c2 	beq.w	1c20a <ll_adv_params_set+0x1fe>
			ll_adv.phy_p = phy_p;
   1c086:	7a0b      	ldrb	r3, [r1, #8]
   1c088:	f369 0302 	bfi	r3, r9, #0, #3
   1c08c:	720b      	strb	r3, [r1, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1c08e:	f04f 0805 	mov.w	r8, #5
		ll_adv.interval = interval;
   1c092:	60cc      	str	r4, [r1, #12]
	}
	ll_adv.chan_map = chan_map;
   1c094:	780b      	ldrb	r3, [r1, #0]
   1c096:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
	ll_adv.filter_policy = filter_policy;
   1c09a:	9101      	str	r1, [sp, #4]
	ll_adv.chan_map = chan_map;
   1c09c:	f360 0302 	bfi	r3, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   1c0a0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   1c0a4:	f360 03c4 	bfi	r3, r0, #3, #2
   1c0a8:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   1c0aa:	f7fc fdbf 	bl	18c2c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c0ae:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
	pdu->type = pdu_adv_type[adv_type];
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1c0b2:	9901      	ldr	r1, [sp, #4]
	radio_adv_data = radio_adv_data_get();
   1c0b4:	4603      	mov	r3, r0
	pdu->type = pdu_adv_type[adv_type];
   1c0b6:	aa06      	add	r2, sp, #24
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c0b8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1c0bc:	ebc5 05c0 	rsb	r5, r5, r0, lsl #3
	pdu->type = pdu_adv_type[adv_type];
   1c0c0:	eb02 0008 	add.w	r0, r2, r8
   1c0c4:	5d5a      	ldrb	r2, [r3, r5]
   1c0c6:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1c0ca:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   1c0ce:	f36f 1204 	bfc	r2, #4, #1
   1c0d2:	555a      	strb	r2, [r3, r5]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1c0d4:	b2d2      	uxtb	r2, r2
   1c0d6:	f002 000f 	and.w	r0, r2, #15
   1c0da:	2801      	cmp	r0, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   1c0dc:	bf94      	ite	ls
   1c0de:	f042 0220 	orrls.w	r2, r2, #32
	} else {
		pdu->chan_sel = 0;
   1c0e2:	f36f 1245 	bfchi	r2, #5, #1
   1c0e6:	555a      	strb	r2, [r3, r5]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   1c0e8:	780a      	ldrb	r2, [r1, #0]
   1c0ea:	f36b 1246 	bfi	r2, fp, #5, #2
   1c0ee:	700a      	strb	r2, [r1, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c0f0:	b2d2      	uxtb	r2, r2
   1c0f2:	0650      	lsls	r0, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c0f4:	eb03 0405 	add.w	r4, r3, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c0f8:	d509      	bpl.n	1c10e <ll_adv_params_set+0x102>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   1c0fa:	f36a 12c7 	bfi	r2, sl, #7, #1
   1c0fe:	700a      	strb	r2, [r1, #0]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1c100:	4846      	ldr	r0, [pc, #280]	; (1c21c <ll_adv_params_set+0x210>)
   1c102:	9912      	ldr	r1, [sp, #72]	; 0x48
   1c104:	9301      	str	r3, [sp, #4]
   1c106:	2206      	movs	r2, #6
   1c108:	f7e9 febe 	bl	5e88 <memcpy>
   1c10c:	9b01      	ldr	r3, [sp, #4]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   1c10e:	5d5a      	ldrb	r2, [r3, r5]
   1c110:	f00b 0b01 	and.w	fp, fp, #1
   1c114:	f36b 1286 	bfi	r2, fp, #6, #1
	pdu->rx_addr = 0;
   1c118:	f36f 12c7 	bfc	r2, #7, #1
   1c11c:	555a      	strb	r2, [r3, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c11e:	b2d2      	uxtb	r2, r2
   1c120:	f002 010f 	and.w	r1, r2, #15
   1c124:	2901      	cmp	r1, #1
   1c126:	d10b      	bne.n	1c140 <ll_adv_params_set+0x134>
		pdu->rx_addr = direct_addr_type;
   1c128:	f36a 12c7 	bfi	r2, sl, #7, #1
   1c12c:	555a      	strb	r2, [r3, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1c12e:	9912      	ldr	r1, [sp, #72]	; 0x48
   1c130:	2206      	movs	r2, #6
   1c132:	f104 0008 	add.w	r0, r4, #8
   1c136:	f7e9 fea7 	bl	5e88 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1c13a:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   1c13c:	7063      	strb	r3, [r4, #1]
   1c13e:	e03f      	b.n	1c1c0 <ll_adv_params_set+0x1b4>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1c140:	2907      	cmp	r1, #7
   1c142:	d15b      	bne.n	1c1fc <ll_adv_params_set+0x1f0>
		p->ext_hdr_len = 0;
   1c144:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
   1c146:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
   1c14a:	f366 1187 	bfi	r1, r6, #6, #2
   1c14e:	70a1      	strb	r1, [r4, #2]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1c150:	06b0      	lsls	r0, r6, #26
		*(u8_t *)h = 0;
   1c152:	f04f 0100 	mov.w	r1, #0
		p = (void *)&pdu->adv_ext_ind;
   1c156:	f104 0302 	add.w	r3, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   1c15a:	f104 0204 	add.w	r2, r4, #4
		*(u8_t *)h = 0;
   1c15e:	70e1      	strb	r1, [r4, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1c160:	d40a      	bmi.n	1c178 <ll_adv_params_set+0x16c>
   1c162:	78a1      	ldrb	r1, [r4, #2]
   1c164:	f011 0fc0 	tst.w	r1, #192	; 0xc0
   1c168:	d106      	bne.n	1c178 <ll_adv_params_set+0x16c>
   1c16a:	f1b9 0f04 	cmp.w	r9, #4
			h->adv_addr = 1;
   1c16e:	bf1e      	ittt	ne
   1c170:	2201      	movne	r2, #1
   1c172:	70e2      	strbne	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   1c174:	f104 020a 	addne.w	r2, r4, #10
		if (evt_prop & BIT(6)) {
   1c178:	0671      	lsls	r1, r6, #25
			h->tx_pwr = 1;
   1c17a:	bf44      	itt	mi
   1c17c:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
   1c17e:	3201      	addmi	r2, #1
		len = ptr - (u8_t *)p;
   1c180:	eba2 0303 	sub.w	r3, r2, r3
			h->tx_pwr = 1;
   1c184:	bf48      	it	mi
   1c186:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
		len = ptr - (u8_t *)p;
   1c18a:	b2db      	uxtb	r3, r3
			h->tx_pwr = 1;
   1c18c:	bf48      	it	mi
   1c18e:	70e1      	strbmi	r1, [r4, #3]
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   1c190:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
   1c192:	bf8a      	itet	hi
   1c194:	78a1      	ldrbhi	r1, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   1c196:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
   1c198:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   1c19c:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
   1c19e:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
   1c1a0:	bf84      	itt	hi
   1c1a2:	f360 0105 	bfihi	r1, r0, #0, #6
   1c1a6:	70a1      	strbhi	r1, [r4, #2]
		if (h->tx_pwr) {
   1c1a8:	065b      	lsls	r3, r3, #25
   1c1aa:	d509      	bpl.n	1c1c0 <ll_adv_params_set+0x1b4>
			if (tx_pwr) {
   1c1ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1c1ae:	b31b      	cbz	r3, 1c1f8 <ll_adv_params_set+0x1ec>
				if (*tx_pwr != 0x7F) {
   1c1b0:	781b      	ldrb	r3, [r3, #0]
   1c1b2:	2b7f      	cmp	r3, #127	; 0x7f
   1c1b4:	d102      	bne.n	1c1bc <ll_adv_params_set+0x1b0>
					*tx_pwr = _tx_pwr;
   1c1b6:	9915      	ldr	r1, [sp, #84]	; 0x54
   1c1b8:	2300      	movs	r3, #0
   1c1ba:	700b      	strb	r3, [r1, #0]
			*ptr = _tx_pwr;
   1c1bc:	f802 3c01 	strb.w	r3, [r2, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   1c1c0:	f7fc fd38 	bl	18c34 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c1c4:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1c1c8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1c1cc:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1c1d0:	2404      	movs	r4, #4
   1c1d2:	5c83      	ldrb	r3, [r0, r2]
   1c1d4:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   1c1d8:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1c1dc:	f36b 1386 	bfi	r3, fp, #6, #1
	pdu->rx_addr = 0;
   1c1e0:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c1e4:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   1c1e6:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1c1e8:	784b      	ldrb	r3, [r1, #1]
   1c1ea:	b90b      	cbnz	r3, 1c1f0 <ll_adv_params_set+0x1e4>
		pdu->len = BDADDR_SIZE;
   1c1ec:	2306      	movs	r3, #6
   1c1ee:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   1c1f0:	4638      	mov	r0, r7
   1c1f2:	b007      	add	sp, #28
   1c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_tx_pwr = 0;
   1c1f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1c1fa:	e7df      	b.n	1c1bc <ll_adv_params_set+0x1b0>
	} else if (pdu->len == 0) {
   1c1fc:	7863      	ldrb	r3, [r4, #1]
   1c1fe:	2b00      	cmp	r3, #0
   1c200:	d1de      	bne.n	1c1c0 <ll_adv_params_set+0x1b4>
		pdu->len = BDADDR_SIZE;
   1c202:	2306      	movs	r3, #6
   1c204:	e79a      	b.n	1c13c <ll_adv_params_set+0x130>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c206:	270c      	movs	r7, #12
   1c208:	e7f2      	b.n	1c1f0 <ll_adv_params_set+0x1e4>
				return 0x12; /* invalid HCI cmd param */
   1c20a:	2712      	movs	r7, #18
   1c20c:	e7f0      	b.n	1c1f0 <ll_adv_params_set+0x1e4>
   1c20e:	bf00      	nop
   1c210:	02060100 	.word	0x02060100
   1c214:	20001b38 	.word	0x20001b38
   1c218:	00020403 	.word	0x00020403
   1c21c:	20001b3a 	.word	0x20001b3a

0001c220 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1c220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c224:	460f      	mov	r7, r1
   1c226:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1c228:	f7fc fd00 	bl	18c2c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c22c:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1c230:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1c234:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   1c238:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1c23a:	f810 c002 	ldrb.w	ip, [r0, r2]
   1c23e:	f00c 030f 	and.w	r3, ip, #15
   1c242:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c244:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1c248:	d040      	beq.n	1c2cc <ll_adv_data_set+0xac>
   1c24a:	2b07      	cmp	r3, #7
   1c24c:	d03e      	beq.n	1c2cc <ll_adv_data_set+0xac>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1c24e:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1c252:	42ab      	cmp	r3, r5
   1c254:	d104      	bne.n	1c260 <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
   1c256:	3501      	adds	r5, #1
   1c258:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
   1c25a:	2d02      	cmp	r5, #2
   1c25c:	bf08      	it	eq
   1c25e:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1c260:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1c264:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1c268:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1c26c:	5ce0      	ldrb	r0, [r4, r3]
   1c26e:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
   1c272:	f36f 1004 	bfc	r0, #4, #1
   1c276:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1c278:	5ca0      	ldrb	r0, [r4, r2]
   1c27a:	f814 c003 	ldrb.w	ip, [r4, r3]
   1c27e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c282:	f360 1c45 	bfi	ip, r0, #5, #1
   1c286:	f804 c003 	strb.w	ip, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1c28a:	5ca0      	ldrb	r0, [r4, r2]
   1c28c:	fa5f fc8c 	uxtb.w	ip, ip
   1c290:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c294:	f360 1c86 	bfi	ip, r0, #6, #1
   1c298:	f804 c003 	strb.w	ip, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1c29c:	5ca2      	ldrb	r2, [r4, r2]
   1c29e:	fa5f f08c 	uxtb.w	r0, ip
   1c2a2:	09d2      	lsrs	r2, r2, #7
   1c2a4:	f362 10c7 	bfi	r0, r2, #7, #1
   1c2a8:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1c2aa:	2206      	movs	r2, #6
   1c2ac:	3102      	adds	r1, #2
   1c2ae:	f108 0002 	add.w	r0, r8, #2
   1c2b2:	f7e9 fde9 	bl	5e88 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1c2b6:	4632      	mov	r2, r6
   1c2b8:	4639      	mov	r1, r7
   1c2ba:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   1c2be:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1c2c0:	f7e9 fde2 	bl	5e88 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1c2c4:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1c2c8:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   1c2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c2d0 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2d4:	4606      	mov	r6, r0
   1c2d6:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1c2d8:	f7fc fcac 	bl	18c34 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   1c2dc:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1c2e0:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1c2e4:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   1c2e6:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1c2e8:	d136      	bne.n	1c358 <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
   1c2ea:	1c5d      	adds	r5, r3, #1
   1c2ec:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1c2ee:	2d02      	cmp	r5, #2
			last = 0;
   1c2f0:	bf08      	it	eq
   1c2f2:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1c2f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1c2f8:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1c2fc:	b22b      	sxth	r3, r5
   1c2fe:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1c302:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1c306:	f04f 0c04 	mov.w	ip, #4
   1c30a:	5ce0      	ldrb	r0, [r4, r3]
   1c30c:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1c310:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1c314:	f36f 1045 	bfc	r0, #5, #1
   1c318:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   1c31a:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   1c31c:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
   1c31e:	5ce2      	ldrb	r2, [r4, r3]
   1c320:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c324:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1c328:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   1c32c:	f36f 12c7 	bfc	r2, #7, #1
   1c330:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   1c332:	1db3      	adds	r3, r6, #6
   1c334:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1c338:	2206      	movs	r2, #6
   1c33a:	3102      	adds	r1, #2
   1c33c:	f108 0002 	add.w	r0, r8, #2
   1c340:	f7e9 fda2 	bl	5e88 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1c344:	4632      	mov	r2, r6
   1c346:	4639      	mov	r1, r7
   1c348:	f108 0008 	add.w	r0, r8, #8
   1c34c:	f7e9 fd9c 	bl	5e88 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1c350:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   1c354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c358:	461d      	mov	r5, r3
   1c35a:	e7cb      	b.n	1c2f4 <ll_scan_data_set+0x24>

0001c35c <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
   1c35c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1c360:	b920      	cbnz	r0, 1c36c <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1c362:	b002      	add	sp, #8
   1c364:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   1c368:	f7fd bbd0 	b.w	19b0c <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   1c36c:	f7fc fc66 	bl	18c3c <ll_adv_is_enabled>
   1c370:	4681      	mov	r9, r0
   1c372:	2800      	cmp	r0, #0
   1c374:	d16b      	bne.n	1c44e <ll_adv_enable+0xf2>
	radio_adv_data = radio_adv_data_get();
   1c376:	f7fc fc59 	bl	18c2c <radio_adv_data_get>
   1c37a:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   1c37c:	f7fc fc5a 	bl	18c34 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1c380:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
   1c384:	4d33      	ldr	r5, [pc, #204]	; (1c454 <ll_adv_enable+0xf8>)
   1c386:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c38a:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1c38e:	eb07 0804 	add.w	r8, r7, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1c392:	5d3b      	ldrb	r3, [r7, r4]
   1c394:	f003 020f 	and.w	r2, r3, #15
   1c398:	2a07      	cmp	r2, #7
   1c39a:	d110      	bne.n	1c3be <ll_adv_enable+0x62>
		if (h->adv_addr) {
   1c39c:	f898 2003 	ldrb.w	r2, [r8, #3]
   1c3a0:	07d2      	lsls	r2, r2, #31
   1c3a2:	d50a      	bpl.n	1c3ba <ll_adv_enable+0x5e>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1c3a4:	4649      	mov	r1, r9
   1c3a6:	f3c3 1080 	ubfx	r0, r3, #6, #1
   1c3aa:	f7f5 f883 	bl	114b4 <ll_addr_get>
   1c3ae:	2206      	movs	r2, #6
   1c3b0:	4601      	mov	r1, r0
   1c3b2:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   1c3b6:	f7e9 fd67 	bl	5e88 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1c3ba:	24ff      	movs	r4, #255	; 0xff
   1c3bc:	e038      	b.n	1c430 <ll_adv_enable+0xd4>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1c3be:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1c3c2:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   1c3c6:	ebc3 03c6 	rsb	r3, r3, r6, lsl #3
   1c3ca:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   1c3cc:	7828      	ldrb	r0, [r5, #0]
   1c3ce:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1c3d2:	f000 fb4f 	bl	1ca74 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c3d6:	7828      	ldrb	r0, [r5, #0]
   1c3d8:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   1c3dc:	d115      	bne.n	1c40a <ll_adv_enable+0xae>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1c3de:	5d38      	ldrb	r0, [r7, r4]
   1c3e0:	4651      	mov	r1, sl
   1c3e2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c3e6:	f7f5 f865 	bl	114b4 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   1c3ea:	2206      	movs	r2, #6
   1c3ec:	4601      	mov	r1, r0
   1c3ee:	f108 0002 	add.w	r0, r8, #2
   1c3f2:	f7e9 fd49 	bl	5e88 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1c3f6:	5d38      	ldrb	r0, [r7, r4]
   1c3f8:	4651      	mov	r1, sl
   1c3fa:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c3fe:	f7f5 f859 	bl	114b4 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   1c402:	2206      	movs	r2, #6
   1c404:	4601      	mov	r1, r0
   1c406:	1cb0      	adds	r0, r6, #2
   1c408:	e7d5      	b.n	1c3b6 <ll_adv_enable+0x5a>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1c40a:	464a      	mov	r2, r9
   1c40c:	1ca9      	adds	r1, r5, #2
   1c40e:	09c0      	lsrs	r0, r0, #7
   1c410:	f000 fb74 	bl	1cafc <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   1c414:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1c416:	4604      	mov	r4, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1c418:	d002      	beq.n	1c420 <ll_adv_enable+0xc4>
				ll_rl_rpa_update(false);
   1c41a:	4648      	mov	r0, r9
   1c41c:	f000 fd6a 	bl	1cef4 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1c420:	4641      	mov	r1, r8
   1c422:	4620      	mov	r0, r4
   1c424:	f000 fcf0 	bl	1ce08 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1c428:	4631      	mov	r1, r6
   1c42a:	4620      	mov	r0, r4
   1c42c:	f000 fcec 	bl	1ce08 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   1c430:	782a      	ldrb	r2, [r5, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1c432:	7a28      	ldrb	r0, [r5, #8]
   1c434:	89a9      	ldrh	r1, [r5, #12]
   1c436:	9400      	str	r4, [sp, #0]
   1c438:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1c43c:	f000 0007 	and.w	r0, r0, #7
   1c440:	f002 0207 	and.w	r2, r2, #7
   1c444:	f7fd f9b8 	bl	197b8 <radio_adv_enable>
}
   1c448:	b002      	add	sp, #8
   1c44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1c44e:	2000      	movs	r0, #0
   1c450:	e7fa      	b.n	1c448 <ll_adv_enable+0xec>
   1c452:	bf00      	nop
   1c454:	20001b38 	.word	0x20001b38

0001c458 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1c458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c45c:	4681      	mov	r9, r0
   1c45e:	4688      	mov	r8, r1
   1c460:	4617      	mov	r7, r2
   1c462:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   1c464:	f7fc fbfe 	bl	18c64 <ll_scan_is_enabled>
   1c468:	b988      	cbnz	r0, 1c48e <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   1c46a:	4d0a      	ldr	r5, [pc, #40]	; (1c494 <ll_scan_params_set+0x3c>)
   1c46c:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   1c46e:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   1c472:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   1c476:	4622      	mov	r2, r4
   1c478:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   1c47c:	4613      	mov	r3, r2
   1c47e:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   1c482:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   1c484:	f362 1387 	bfi	r3, r2, #6, #2
   1c488:	712b      	strb	r3, [r5, #4]

	return 0;
}
   1c48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c48e:	200c      	movs	r0, #12
   1c490:	e7fb      	b.n	1c48a <ll_scan_params_set+0x32>
   1c492:	bf00      	nop
   1c494:	20001b48 	.word	0x20001b48

0001c498 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1c498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c49a:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1c49c:	b920      	cbnz	r0, 1c4a8 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1c49e:	b005      	add	sp, #20
   1c4a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   1c4a4:	f7fd bc3e 	b.w	19d24 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   1c4a8:	f7fc fbdc 	bl	18c64 <ll_scan_is_enabled>
   1c4ac:	4606      	mov	r6, r0
   1c4ae:	bb40      	cbnz	r0, 1c502 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   1c4b0:	4c15      	ldr	r4, [pc, #84]	; (1c508 <ll_scan_enable+0x70>)
   1c4b2:	7920      	ldrb	r0, [r4, #4]
   1c4b4:	0980      	lsrs	r0, r0, #6
   1c4b6:	f000 faff 	bl	1cab8 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1c4ba:	7923      	ldrb	r3, [r4, #4]
   1c4bc:	f013 0501 	ands.w	r5, r3, #1
   1c4c0:	d006      	beq.n	1c4d0 <ll_scan_enable+0x38>
   1c4c2:	f013 0520 	ands.w	r5, r3, #32
   1c4c6:	d003      	beq.n	1c4d0 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   1c4c8:	4630      	mov	r0, r6
   1c4ca:	f000 fd13 	bl	1cef4 <ll_rl_rpa_update>
		rpa_gen = 1;
   1c4ce:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1c4d0:	7926      	ldrb	r6, [r4, #4]
   1c4d2:	f006 070f 	and.w	r7, r6, #15
   1c4d6:	f3c6 1600 	ubfx	r6, r6, #4, #1
   1c4da:	2100      	movs	r1, #0
   1c4dc:	4630      	mov	r0, r6
   1c4de:	f7f4 ffe9 	bl	114b4 <ll_addr_get>
   1c4e2:	22ff      	movs	r2, #255	; 0xff
   1c4e4:	e9cd 5202 	strd	r5, r2, [sp, #8]
				   ll_scan.filter_policy, rpa_gen,
   1c4e8:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1c4ea:	8823      	ldrh	r3, [r4, #0]
   1c4ec:	0992      	lsrs	r2, r2, #6
   1c4ee:	9201      	str	r2, [sp, #4]
   1c4f0:	8862      	ldrh	r2, [r4, #2]
   1c4f2:	9200      	str	r2, [sp, #0]
   1c4f4:	4631      	mov	r1, r6
   1c4f6:	4602      	mov	r2, r0
   1c4f8:	4638      	mov	r0, r7
   1c4fa:	f7fd fb35 	bl	19b68 <radio_scan_enable>
}
   1c4fe:	b005      	add	sp, #20
   1c500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1c502:	2000      	movs	r0, #0
   1c504:	e7fb      	b.n	1c4fe <ll_scan_enable+0x66>
   1c506:	bf00      	nop
   1c508:	20001b48 	.word	0x20001b48

0001c50c <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1c50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c510:	b085      	sub	sp, #20
   1c512:	461e      	mov	r6, r3
   1c514:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1c518:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1c51a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1c51e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1c522:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
   1c526:	9303      	str	r3, [sp, #12]
   1c528:	4680      	mov	r8, r0
   1c52a:	4689      	mov	r9, r1
   1c52c:	4615      	mov	r5, r2
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   1c52e:	f7fc fb99 	bl	18c64 <ll_scan_is_enabled>
   1c532:	bba0      	cbnz	r0, 1c59e <ll_create_connection+0x92>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1c534:	9b03      	ldr	r3, [sp, #12]
   1c536:	9300      	str	r3, [sp, #0]
   1c538:	4652      	mov	r2, sl
   1c53a:	465b      	mov	r3, fp
   1c53c:	4639      	mov	r1, r7
   1c53e:	4630      	mov	r0, r6
   1c540:	f7fc fbb6 	bl	18cb0 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   1c544:	bb60      	cbnz	r0, 1c5a0 <ll_create_connection+0x94>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1c546:	4628      	mov	r0, r5
   1c548:	f000 fab6 	bl	1cab8 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   1c54c:	b1d5      	cbz	r5, 1c584 <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1c54e:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c550:	1ea3      	subs	r3, r4, #2
   1c552:	2b01      	cmp	r3, #1
   1c554:	d821      	bhi.n	1c59a <ll_create_connection+0x8e>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1c556:	2000      	movs	r0, #0
   1c558:	f000 fccc 	bl	1cef4 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1c55c:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1c560:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   1c562:	2100      	movs	r1, #0
   1c564:	4620      	mov	r0, r4
   1c566:	f7f4 ffa5 	bl	114b4 <ll_addr_get>
   1c56a:	4643      	mov	r3, r8
   1c56c:	4602      	mov	r2, r0
   1c56e:	4621      	mov	r1, r4
   1c570:	2000      	movs	r0, #0
   1c572:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1c576:	e9cd 950e 	strd	r9, r5, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1c57a:	b005      	add	sp, #20
   1c57c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   1c580:	f7fd baf2 	b.w	19b68 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   1c584:	f000 fc38 	bl	1cdf8 <ctrl_rl_enabled>
   1c588:	2800      	cmp	r0, #0
   1c58a:	d0e0      	beq.n	1c54e <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1c58c:	4639      	mov	r1, r7
   1c58e:	462a      	mov	r2, r5
   1c590:	4630      	mov	r0, r6
   1c592:	f000 fab3 	bl	1cafc <ll_rl_find>
   1c596:	4607      	mov	r7, r0
   1c598:	e7da      	b.n	1c550 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   1c59a:	2600      	movs	r6, #0
   1c59c:	e7e1      	b.n	1c562 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c59e:	200c      	movs	r0, #12
}
   1c5a0:	b005      	add	sp, #20
   1c5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001c5a8 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   1c5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5ac:	4688      	mov	r8, r1
	int i;

	if (free) {
   1c5ae:	4615      	mov	r5, r2
   1c5b0:	b10a      	cbz	r2, 1c5b6 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1c5b2:	23ff      	movs	r3, #255	; 0xff
   1c5b4:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1c5b6:	4f14      	ldr	r7, [pc, #80]	; (1c608 <wl_find+0x60>)
{
   1c5b8:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1c5ba:	f000 0601 	and.w	r6, r0, #1
   1c5be:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1c5c2:	07da      	lsls	r2, r3, #31
   1c5c4:	d51c      	bpl.n	1c600 <wl_find+0x58>
   1c5c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1c5ca:	42b3      	cmp	r3, r6
   1c5cc:	d113      	bne.n	1c5f6 <wl_find+0x4e>
   1c5ce:	480f      	ldr	r0, [pc, #60]	; (1c60c <wl_find+0x64>)
   1c5d0:	2206      	movs	r2, #6
   1c5d2:	4641      	mov	r1, r8
   1c5d4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1c5d8:	f7e9 fc2f 	bl	5e3a <memcmp>
   1c5dc:	b910      	cbnz	r0, 1c5e4 <wl_find+0x3c>
			return i;
   1c5de:	b2e0      	uxtb	r0, r4
			*free = i;
		}
	}

	return FILTER_IDX_NONE;
}
   1c5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1c5e4:	b13d      	cbz	r5, 1c5f6 <wl_find+0x4e>
   1c5e6:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1c5ea:	07db      	lsls	r3, r3, #31
   1c5ec:	d403      	bmi.n	1c5f6 <wl_find+0x4e>
   1c5ee:	782b      	ldrb	r3, [r5, #0]
   1c5f0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1c5f2:	bf08      	it	eq
   1c5f4:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1c5f6:	3401      	adds	r4, #1
   1c5f8:	2c08      	cmp	r4, #8
   1c5fa:	d1e0      	bne.n	1c5be <wl_find+0x16>
	return FILTER_IDX_NONE;
   1c5fc:	20ff      	movs	r0, #255	; 0xff
   1c5fe:	e7ef      	b.n	1c5e0 <wl_find+0x38>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1c600:	2d00      	cmp	r5, #0
   1c602:	d1f4      	bne.n	1c5ee <wl_find+0x46>
   1c604:	e7f7      	b.n	1c5f6 <wl_find+0x4e>
   1c606:	bf00      	nop
   1c608:	20001d7b 	.word	0x20001d7b
   1c60c:	20001d7d 	.word	0x20001d7d

0001c610 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   1c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	filter->enable_bitmask |= BIT(index);
   1c612:	4d10      	ldr	r5, [pc, #64]	; (1c654 <filter_rl_update+0x44>)
	u8_t i;

	/* Populate filter from rl peers */
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   1c614:	4e10      	ldr	r6, [pc, #64]	; (1c658 <filter_rl_update+0x48>)
{
   1c616:	2400      	movs	r4, #0
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1c618:	1caf      	adds	r7, r5, #2
		if (rl[i].taken) {
   1c61a:	2128      	movs	r1, #40	; 0x28
   1c61c:	4361      	muls	r1, r4
   1c61e:	5c73      	ldrb	r3, [r6, r1]
   1c620:	07da      	lsls	r2, r3, #31
   1c622:	d512      	bpl.n	1c64a <filter_rl_update+0x3a>
	filter->enable_bitmask |= BIT(index);
   1c624:	2201      	movs	r2, #1
   1c626:	fa02 f004 	lsl.w	r0, r2, r4
   1c62a:	782a      	ldrb	r2, [r5, #0]
   1c62c:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1c62e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1c632:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1c634:	786a      	ldrb	r2, [r5, #1]
   1c636:	40a3      	lsls	r3, r4
   1c638:	4313      	orrs	r3, r2
   1c63a:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1c63c:	4b07      	ldr	r3, [pc, #28]	; (1c65c <filter_rl_update+0x4c>)
   1c63e:	2206      	movs	r2, #6
   1c640:	4419      	add	r1, r3
   1c642:	fb02 7004 	mla	r0, r2, r4, r7
   1c646:	f7e9 fc1f 	bl	5e88 <memcpy>
   1c64a:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c64c:	2c08      	cmp	r4, #8
   1c64e:	d1e4      	bne.n	1c61a <filter_rl_update+0xa>
				      rl[i].id_addr.val);
		}
	}
}
   1c650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c652:	bf00      	nop
   1c654:	20001d49 	.word	0x20001d49
   1c658:	20001c08 	.word	0x20001c08
   1c65c:	20001c09 	.word	0x20001c09

0001c660 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   1c660:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1c662:	f7fc faeb 	bl	18c3c <ll_adv_is_enabled>
   1c666:	b928      	cbnz	r0, 1c674 <rl_access_check.constprop.1+0x14>
   1c668:	f7fc fafc 	bl	18c64 <ll_scan_is_enabled>
   1c66c:	fab0 f080 	clz	r0, r0
   1c670:	0940      	lsrs	r0, r0, #5
}
   1c672:	bd08      	pop	{r3, pc}
	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1c674:	2000      	movs	r0, #0
   1c676:	e7fc      	b.n	1c672 <rl_access_check.constprop.1+0x12>

0001c678 <filter_wl_update>:
{
   1c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!wl[i].taken) {
   1c67a:	4d19      	ldr	r5, [pc, #100]	; (1c6e0 <filter_wl_update+0x68>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1c67c:	4f19      	ldr	r7, [pc, #100]	; (1c6e4 <filter_wl_update+0x6c>)
{
   1c67e:	2400      	movs	r4, #0
   1c680:	462e      	mov	r6, r5
		if (!wl[i].taken) {
   1c682:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1c686:	07d9      	lsls	r1, r3, #31
   1c688:	d526      	bpl.n	1c6d8 <filter_wl_update+0x60>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1c68a:	783b      	ldrb	r3, [r7, #0]
   1c68c:	00e1      	lsls	r1, r4, #3
   1c68e:	b15b      	cbz	r3, 1c6a8 <filter_wl_update+0x30>
		j = wl[i].rl_idx;
   1c690:	186b      	adds	r3, r5, r1
   1c692:	785a      	ldrb	r2, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1c694:	2a07      	cmp	r2, #7
   1c696:	d807      	bhi.n	1c6a8 <filter_wl_update+0x30>
   1c698:	2328      	movs	r3, #40	; 0x28
   1c69a:	4353      	muls	r3, r2
   1c69c:	4a12      	ldr	r2, [pc, #72]	; (1c6e8 <filter_wl_update+0x70>)
   1c69e:	5cd3      	ldrb	r3, [r2, r3]
   1c6a0:	075a      	lsls	r2, r3, #29
   1c6a2:	d501      	bpl.n	1c6a8 <filter_wl_update+0x30>
   1c6a4:	06db      	lsls	r3, r3, #27
   1c6a6:	d517      	bpl.n	1c6d8 <filter_wl_update+0x60>
	filter->enable_bitmask |= BIT(index);
   1c6a8:	4810      	ldr	r0, [pc, #64]	; (1c6ec <filter_wl_update+0x74>)
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1c6aa:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1c6ae:	2201      	movs	r2, #1
   1c6b0:	fa02 fc04 	lsl.w	ip, r2, r4
   1c6b4:	7802      	ldrb	r2, [r0, #0]
   1c6b6:	ea42 020c 	orr.w	r2, r2, ip
   1c6ba:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1c6bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1c6c0:	7842      	ldrb	r2, [r0, #1]
   1c6c2:	40a3      	lsls	r3, r4
   1c6c4:	4313      	orrs	r3, r2
   1c6c6:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1c6c8:	4b09      	ldr	r3, [pc, #36]	; (1c6f0 <filter_wl_update+0x78>)
   1c6ca:	3002      	adds	r0, #2
   1c6cc:	2206      	movs	r2, #6
   1c6ce:	4419      	add	r1, r3
   1c6d0:	fb02 0004 	mla	r0, r2, r4, r0
   1c6d4:	f7e9 fbd8 	bl	5e88 <memcpy>
   1c6d8:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   1c6da:	2c08      	cmp	r4, #8
   1c6dc:	d1d1      	bne.n	1c682 <filter_wl_update+0xa>
}
   1c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6e0:	20001d7b 	.word	0x20001d7b
   1c6e4:	20001d48 	.word	0x20001d48
   1c6e8:	20001c08 	.word	0x20001c08
   1c6ec:	20001dbb 	.word	0x20001dbb
   1c6f0:	20001d7d 	.word	0x20001d7d

0001c6f4 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1c6f4:	2807      	cmp	r0, #7
   1c6f6:	d80c      	bhi.n	1c712 <ctrl_lrpa_get+0x1e>
   1c6f8:	2328      	movs	r3, #40	; 0x28
   1c6fa:	4358      	muls	r0, r3
   1c6fc:	4a06      	ldr	r2, [pc, #24]	; (1c718 <ctrl_lrpa_get+0x24>)
   1c6fe:	5c13      	ldrb	r3, [r2, r0]
   1c700:	1811      	adds	r1, r2, r0
   1c702:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1c706:	b128      	cbz	r0, 1c714 <ctrl_lrpa_get+0x20>
   1c708:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1c70c:	b110      	cbz	r0, 1c714 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1c70e:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1c710:	4770      	bx	lr
		return NULL;
   1c712:	2000      	movs	r0, #0
}
   1c714:	4770      	bx	lr
   1c716:	bf00      	nop
   1c718:	20001c08 	.word	0x20001c08

0001c71c <ctrl_irks_get>:
	*count = peer_irk_count;
   1c71c:	4b02      	ldr	r3, [pc, #8]	; (1c728 <ctrl_irks_get+0xc>)
   1c71e:	781b      	ldrb	r3, [r3, #0]
   1c720:	7003      	strb	r3, [r0, #0]
}
   1c722:	4802      	ldr	r0, [pc, #8]	; (1c72c <ctrl_irks_get+0x10>)
   1c724:	4770      	bx	lr
   1c726:	bf00      	nop
   1c728:	20001b7e 	.word	0x20001b7e
   1c72c:	20001b87 	.word	0x20001b87

0001c730 <ctrl_rl_idx>:
{
   1c730:	b508      	push	{r3, lr}
	if (whitelist) {
   1c732:	2800      	cmp	r0, #0
   1c734:	d03b      	beq.n	1c7ae <ctrl_rl_idx+0x7e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1c736:	2907      	cmp	r1, #7
   1c738:	d91a      	bls.n	1c770 <ctrl_rl_idx+0x40>
   1c73a:	4b35      	ldr	r3, [pc, #212]	; (1c810 <ctrl_rl_idx+0xe0>)
   1c73c:	681b      	ldr	r3, [r3, #0]
   1c73e:	075a      	lsls	r2, r3, #29
   1c740:	d010      	beq.n	1c764 <ctrl_rl_idx+0x34>
   1c742:	2301      	movs	r3, #1
   1c744:	f04f 0200 	mov.w	r2, #0
   1c748:	f363 0202 	bfi	r2, r3, #0, #3
   1c74c:	4931      	ldr	r1, [pc, #196]	; (1c814 <ctrl_rl_idx+0xe4>)
   1c74e:	4b32      	ldr	r3, [pc, #200]	; (1c818 <ctrl_rl_idx+0xe8>)
   1c750:	4832      	ldr	r0, [pc, #200]	; (1c81c <ctrl_rl_idx+0xec>)
   1c752:	1a5b      	subs	r3, r3, r1
   1c754:	f36f 02c5 	bfc	r2, #3, #3
   1c758:	08db      	lsrs	r3, r3, #3
   1c75a:	4931      	ldr	r1, [pc, #196]	; (1c820 <ctrl_rl_idx+0xf0>)
   1c75c:	f363 128f 	bfi	r2, r3, #6, #10
		LL_ASSERT(rl[i].taken);
   1c760:	f7e5 fafa 	bl	1d58 <log_1>
   1c764:	4040      	eors	r0, r0
   1c766:	f380 8811 	msr	BASEPRI, r0
   1c76a:	f04f 0004 	mov.w	r0, #4
   1c76e:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1c770:	4b2c      	ldr	r3, [pc, #176]	; (1c824 <ctrl_rl_idx+0xf4>)
   1c772:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   1c776:	f012 0001 	ands.w	r0, r2, #1
   1c77a:	d113      	bne.n	1c7a4 <ctrl_rl_idx+0x74>
   1c77c:	4b24      	ldr	r3, [pc, #144]	; (1c810 <ctrl_rl_idx+0xe0>)
   1c77e:	681b      	ldr	r3, [r3, #0]
   1c780:	075b      	lsls	r3, r3, #29
   1c782:	d0ef      	beq.n	1c764 <ctrl_rl_idx+0x34>
   1c784:	2301      	movs	r3, #1
   1c786:	f04f 0200 	mov.w	r2, #0
   1c78a:	f363 0202 	bfi	r2, r3, #0, #3
   1c78e:	4921      	ldr	r1, [pc, #132]	; (1c814 <ctrl_rl_idx+0xe4>)
   1c790:	4b21      	ldr	r3, [pc, #132]	; (1c818 <ctrl_rl_idx+0xe8>)
   1c792:	1a5b      	subs	r3, r3, r1
   1c794:	f360 02c5 	bfi	r2, r0, #3, #3
   1c798:	08db      	lsrs	r3, r3, #3
   1c79a:	f363 128f 	bfi	r2, r3, #6, #10
   1c79e:	4920      	ldr	r1, [pc, #128]	; (1c820 <ctrl_rl_idx+0xf0>)
   1c7a0:	4821      	ldr	r0, [pc, #132]	; (1c828 <ctrl_rl_idx+0xf8>)
   1c7a2:	e7dd      	b.n	1c760 <ctrl_rl_idx+0x30>
		i = wl[devmatch_id].rl_idx;
   1c7a4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1c7a8:	7849      	ldrb	r1, [r1, #1]
}
   1c7aa:	4608      	mov	r0, r1
   1c7ac:	bd08      	pop	{r3, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1c7ae:	2907      	cmp	r1, #7
   1c7b0:	d913      	bls.n	1c7da <ctrl_rl_idx+0xaa>
   1c7b2:	4b17      	ldr	r3, [pc, #92]	; (1c810 <ctrl_rl_idx+0xe0>)
   1c7b4:	681b      	ldr	r3, [r3, #0]
   1c7b6:	0759      	lsls	r1, r3, #29
   1c7b8:	d0d4      	beq.n	1c764 <ctrl_rl_idx+0x34>
   1c7ba:	2301      	movs	r3, #1
   1c7bc:	f04f 0200 	mov.w	r2, #0
   1c7c0:	f363 0202 	bfi	r2, r3, #0, #3
   1c7c4:	4913      	ldr	r1, [pc, #76]	; (1c814 <ctrl_rl_idx+0xe4>)
   1c7c6:	4b14      	ldr	r3, [pc, #80]	; (1c818 <ctrl_rl_idx+0xe8>)
   1c7c8:	1a5b      	subs	r3, r3, r1
   1c7ca:	f360 02c5 	bfi	r2, r0, #3, #3
   1c7ce:	08db      	lsrs	r3, r3, #3
   1c7d0:	f363 128f 	bfi	r2, r3, #6, #10
   1c7d4:	4912      	ldr	r1, [pc, #72]	; (1c820 <ctrl_rl_idx+0xf0>)
   1c7d6:	4815      	ldr	r0, [pc, #84]	; (1c82c <ctrl_rl_idx+0xfc>)
   1c7d8:	e7c2      	b.n	1c760 <ctrl_rl_idx+0x30>
		LL_ASSERT(rl[i].taken);
   1c7da:	2328      	movs	r3, #40	; 0x28
   1c7dc:	434b      	muls	r3, r1
   1c7de:	4a14      	ldr	r2, [pc, #80]	; (1c830 <ctrl_rl_idx+0x100>)
   1c7e0:	5cd3      	ldrb	r3, [r2, r3]
   1c7e2:	f013 0301 	ands.w	r3, r3, #1
   1c7e6:	d1e0      	bne.n	1c7aa <ctrl_rl_idx+0x7a>
   1c7e8:	4a09      	ldr	r2, [pc, #36]	; (1c810 <ctrl_rl_idx+0xe0>)
   1c7ea:	6812      	ldr	r2, [r2, #0]
   1c7ec:	0752      	lsls	r2, r2, #29
   1c7ee:	d0b9      	beq.n	1c764 <ctrl_rl_idx+0x34>
   1c7f0:	2101      	movs	r1, #1
   1c7f2:	f04f 0200 	mov.w	r2, #0
   1c7f6:	f361 0202 	bfi	r2, r1, #0, #3
   1c7fa:	f363 02c5 	bfi	r2, r3, #3, #3
   1c7fe:	4905      	ldr	r1, [pc, #20]	; (1c814 <ctrl_rl_idx+0xe4>)
   1c800:	4b05      	ldr	r3, [pc, #20]	; (1c818 <ctrl_rl_idx+0xe8>)
   1c802:	480c      	ldr	r0, [pc, #48]	; (1c834 <ctrl_rl_idx+0x104>)
   1c804:	1a5b      	subs	r3, r3, r1
   1c806:	08db      	lsrs	r3, r3, #3
   1c808:	f363 128f 	bfi	r2, r3, #6, #10
   1c80c:	4904      	ldr	r1, [pc, #16]	; (1c820 <ctrl_rl_idx+0xf0>)
   1c80e:	e7a7      	b.n	1c760 <ctrl_rl_idx+0x30>
   1c810:	2000d734 	.word	0x2000d734
   1c814:	0002cff8 	.word	0x0002cff8
   1c818:	0002d040 	.word	0x0002d040
   1c81c:	0003194d 	.word	0x0003194d
   1c820:	0003189a 	.word	0x0003189a
   1c824:	20001d7b 	.word	0x20001d7b
   1c828:	00031a0e 	.word	0x00031a0e
   1c82c:	00031a39 	.word	0x00031a39
   1c830:	20001c08 	.word	0x20001c08
   1c834:	00031afa 	.word	0x00031afa

0001c838 <ctrl_rl_irk_idx>:
{
   1c838:	b508      	push	{r3, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c83a:	4b29      	ldr	r3, [pc, #164]	; (1c8e0 <ctrl_rl_irk_idx+0xa8>)
   1c83c:	781b      	ldrb	r3, [r3, #0]
   1c83e:	4283      	cmp	r3, r0
   1c840:	d81a      	bhi.n	1c878 <ctrl_rl_irk_idx+0x40>
   1c842:	4b28      	ldr	r3, [pc, #160]	; (1c8e4 <ctrl_rl_irk_idx+0xac>)
   1c844:	681b      	ldr	r3, [r3, #0]
   1c846:	0758      	lsls	r0, r3, #29
   1c848:	d010      	beq.n	1c86c <ctrl_rl_irk_idx+0x34>
   1c84a:	2301      	movs	r3, #1
   1c84c:	f04f 0200 	mov.w	r2, #0
   1c850:	f363 0202 	bfi	r2, r3, #0, #3
   1c854:	4924      	ldr	r1, [pc, #144]	; (1c8e8 <ctrl_rl_irk_idx+0xb0>)
   1c856:	4b25      	ldr	r3, [pc, #148]	; (1c8ec <ctrl_rl_irk_idx+0xb4>)
   1c858:	4825      	ldr	r0, [pc, #148]	; (1c8f0 <ctrl_rl_irk_idx+0xb8>)
   1c85a:	1a5b      	subs	r3, r3, r1
   1c85c:	f36f 02c5 	bfc	r2, #3, #3
   1c860:	08db      	lsrs	r3, r3, #3
   1c862:	4924      	ldr	r1, [pc, #144]	; (1c8f4 <ctrl_rl_irk_idx+0xbc>)
   1c864:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(rl[i].taken);
   1c868:	f7e5 fa76 	bl	1d58 <log_1>
   1c86c:	4040      	eors	r0, r0
   1c86e:	f380 8811 	msr	BASEPRI, r0
   1c872:	f04f 0004 	mov.w	r0, #4
   1c876:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1c878:	4b1f      	ldr	r3, [pc, #124]	; (1c8f8 <ctrl_rl_irk_idx+0xc0>)
   1c87a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1c87c:	2807      	cmp	r0, #7
   1c87e:	d913      	bls.n	1c8a8 <ctrl_rl_irk_idx+0x70>
   1c880:	4b18      	ldr	r3, [pc, #96]	; (1c8e4 <ctrl_rl_irk_idx+0xac>)
   1c882:	681b      	ldr	r3, [r3, #0]
   1c884:	0759      	lsls	r1, r3, #29
   1c886:	d0f1      	beq.n	1c86c <ctrl_rl_irk_idx+0x34>
   1c888:	2301      	movs	r3, #1
   1c88a:	f04f 0200 	mov.w	r2, #0
   1c88e:	f363 0202 	bfi	r2, r3, #0, #3
   1c892:	4915      	ldr	r1, [pc, #84]	; (1c8e8 <ctrl_rl_irk_idx+0xb0>)
   1c894:	4b15      	ldr	r3, [pc, #84]	; (1c8ec <ctrl_rl_irk_idx+0xb4>)
   1c896:	4819      	ldr	r0, [pc, #100]	; (1c8fc <ctrl_rl_irk_idx+0xc4>)
   1c898:	1a5b      	subs	r3, r3, r1
   1c89a:	f36f 02c5 	bfc	r2, #3, #3
   1c89e:	08db      	lsrs	r3, r3, #3
   1c8a0:	f363 128f 	bfi	r2, r3, #6, #10
   1c8a4:	4913      	ldr	r1, [pc, #76]	; (1c8f4 <ctrl_rl_irk_idx+0xbc>)
   1c8a6:	e7df      	b.n	1c868 <ctrl_rl_irk_idx+0x30>
	LL_ASSERT(rl[i].taken);
   1c8a8:	2328      	movs	r3, #40	; 0x28
   1c8aa:	4343      	muls	r3, r0
   1c8ac:	4a14      	ldr	r2, [pc, #80]	; (1c900 <ctrl_rl_irk_idx+0xc8>)
   1c8ae:	5cd3      	ldrb	r3, [r2, r3]
   1c8b0:	f013 0301 	ands.w	r3, r3, #1
   1c8b4:	d113      	bne.n	1c8de <ctrl_rl_irk_idx+0xa6>
   1c8b6:	4a0b      	ldr	r2, [pc, #44]	; (1c8e4 <ctrl_rl_irk_idx+0xac>)
   1c8b8:	6812      	ldr	r2, [r2, #0]
   1c8ba:	0752      	lsls	r2, r2, #29
   1c8bc:	d0d6      	beq.n	1c86c <ctrl_rl_irk_idx+0x34>
   1c8be:	2101      	movs	r1, #1
   1c8c0:	f04f 0200 	mov.w	r2, #0
   1c8c4:	f361 0202 	bfi	r2, r1, #0, #3
   1c8c8:	f363 02c5 	bfi	r2, r3, #3, #3
   1c8cc:	4906      	ldr	r1, [pc, #24]	; (1c8e8 <ctrl_rl_irk_idx+0xb0>)
   1c8ce:	4b07      	ldr	r3, [pc, #28]	; (1c8ec <ctrl_rl_irk_idx+0xb4>)
   1c8d0:	480c      	ldr	r0, [pc, #48]	; (1c904 <ctrl_rl_irk_idx+0xcc>)
   1c8d2:	1a5b      	subs	r3, r3, r1
   1c8d4:	08db      	lsrs	r3, r3, #3
   1c8d6:	f363 128f 	bfi	r2, r3, #6, #10
   1c8da:	4906      	ldr	r1, [pc, #24]	; (1c8f4 <ctrl_rl_irk_idx+0xbc>)
   1c8dc:	e7c4      	b.n	1c868 <ctrl_rl_irk_idx+0x30>
}
   1c8de:	bd08      	pop	{r3, pc}
   1c8e0:	20001b7e 	.word	0x20001b7e
   1c8e4:	2000d734 	.word	0x2000d734
   1c8e8:	0002cff8 	.word	0x0002cff8
   1c8ec:	0002d040 	.word	0x0002d040
   1c8f0:	00031b1b 	.word	0x00031b1b
   1c8f4:	000318a6 	.word	0x000318a6
   1c8f8:	20001b7f 	.word	0x20001b7f
   1c8fc:	00031b4d 	.word	0x00031b4d
   1c900:	20001c08 	.word	0x20001c08
   1c904:	00031afa 	.word	0x00031afa

0001c908 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1c908:	2807      	cmp	r0, #7
{
   1c90a:	b508      	push	{r3, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1c90c:	d824      	bhi.n	1c958 <ctrl_irk_whitelisted+0x50>
	LL_ASSERT(rl[rl_idx].taken);
   1c90e:	2328      	movs	r3, #40	; 0x28
   1c910:	4358      	muls	r0, r3
   1c912:	4b12      	ldr	r3, [pc, #72]	; (1c95c <ctrl_irk_whitelisted+0x54>)
   1c914:	5c18      	ldrb	r0, [r3, r0]
   1c916:	f010 0301 	ands.w	r3, r0, #1
   1c91a:	d11a      	bne.n	1c952 <ctrl_irk_whitelisted+0x4a>
   1c91c:	4a10      	ldr	r2, [pc, #64]	; (1c960 <ctrl_irk_whitelisted+0x58>)
   1c91e:	6812      	ldr	r2, [r2, #0]
   1c920:	0752      	lsls	r2, r2, #29
   1c922:	d010      	beq.n	1c946 <ctrl_irk_whitelisted+0x3e>
   1c924:	2101      	movs	r1, #1
   1c926:	f04f 0200 	mov.w	r2, #0
   1c92a:	f361 0202 	bfi	r2, r1, #0, #3
   1c92e:	f363 02c5 	bfi	r2, r3, #3, #3
   1c932:	490c      	ldr	r1, [pc, #48]	; (1c964 <ctrl_irk_whitelisted+0x5c>)
   1c934:	4b0c      	ldr	r3, [pc, #48]	; (1c968 <ctrl_irk_whitelisted+0x60>)
   1c936:	480d      	ldr	r0, [pc, #52]	; (1c96c <ctrl_irk_whitelisted+0x64>)
   1c938:	1a5b      	subs	r3, r3, r1
   1c93a:	08db      	lsrs	r3, r3, #3
   1c93c:	f363 128f 	bfi	r2, r3, #6, #10
   1c940:	490b      	ldr	r1, [pc, #44]	; (1c970 <ctrl_irk_whitelisted+0x68>)
   1c942:	f7e5 fa09 	bl	1d58 <log_1>
   1c946:	4040      	eors	r0, r0
   1c948:	f380 8811 	msr	BASEPRI, r0
   1c94c:	f04f 0004 	mov.w	r0, #4
   1c950:	df02      	svc	2
	return rl[rl_idx].wl;
   1c952:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1c956:	bd08      	pop	{r3, pc}
		return false;
   1c958:	2000      	movs	r0, #0
   1c95a:	e7fc      	b.n	1c956 <ctrl_irk_whitelisted+0x4e>
   1c95c:	20001c08 	.word	0x20001c08
   1c960:	2000d734 	.word	0x2000d734
   1c964:	0002cff8 	.word	0x0002cff8
   1c968:	0002d040 	.word	0x0002d040
   1c96c:	00031927 	.word	0x00031927
   1c970:	000318b6 	.word	0x000318b6

0001c974 <ctrl_filter_get>:
}
   1c974:	4a03      	ldr	r2, [pc, #12]	; (1c984 <ctrl_filter_get+0x10>)
   1c976:	4b04      	ldr	r3, [pc, #16]	; (1c988 <ctrl_filter_get+0x14>)
   1c978:	2800      	cmp	r0, #0
   1c97a:	bf14      	ite	ne
   1c97c:	4610      	movne	r0, r2
   1c97e:	4618      	moveq	r0, r3
   1c980:	4770      	bx	lr
   1c982:	bf00      	nop
   1c984:	20001dbb 	.word	0x20001dbb
   1c988:	20001d49 	.word	0x20001d49

0001c98c <ll_wl_size_get>:
}
   1c98c:	2008      	movs	r0, #8
   1c98e:	4770      	bx	lr

0001c990 <ll_wl_clear>:
{
   1c990:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1c992:	f7fc f95b 	bl	18c4c <radio_adv_filter_pol_get>
   1c996:	4604      	mov	r4, r0
   1c998:	b110      	cbz	r0, 1c9a0 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c99a:	240c      	movs	r4, #12
}
   1c99c:	4620      	mov	r0, r4
   1c99e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1c9a0:	f7fc f976 	bl	18c90 <radio_scan_filter_pol_get>
   1c9a4:	07c3      	lsls	r3, r0, #31
   1c9a6:	d4f8      	bmi.n	1c99a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   1c9a8:	4b15      	ldr	r3, [pc, #84]	; (1ca00 <ll_wl_clear+0x70>)
   1c9aa:	781a      	ldrb	r2, [r3, #0]
   1c9ac:	f364 0200 	bfi	r2, r4, #0, #1
   1c9b0:	701a      	strb	r2, [r3, #0]
   1c9b2:	7a1a      	ldrb	r2, [r3, #8]
   1c9b4:	f364 0200 	bfi	r2, r4, #0, #1
   1c9b8:	721a      	strb	r2, [r3, #8]
   1c9ba:	7c1a      	ldrb	r2, [r3, #16]
   1c9bc:	f364 0200 	bfi	r2, r4, #0, #1
   1c9c0:	741a      	strb	r2, [r3, #16]
   1c9c2:	7e1a      	ldrb	r2, [r3, #24]
   1c9c4:	f364 0200 	bfi	r2, r4, #0, #1
   1c9c8:	761a      	strb	r2, [r3, #24]
   1c9ca:	f893 2020 	ldrb.w	r2, [r3, #32]
   1c9ce:	f364 0200 	bfi	r2, r4, #0, #1
   1c9d2:	f883 2020 	strb.w	r2, [r3, #32]
   1c9d6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1c9da:	f364 0200 	bfi	r2, r4, #0, #1
   1c9de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1c9e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   1c9e6:	f364 0200 	bfi	r2, r4, #0, #1
   1c9ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   1c9ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1c9f2:	f364 0200 	bfi	r2, r4, #0, #1
   1c9f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	wl_anon = 0;
   1c9fa:	4b02      	ldr	r3, [pc, #8]	; (1ca04 <ll_wl_clear+0x74>)
   1c9fc:	701c      	strb	r4, [r3, #0]
	return 0;
   1c9fe:	e7cd      	b.n	1c99c <ll_wl_clear+0xc>
   1ca00:	20001d7b 	.word	0x20001d7b
   1ca04:	20003180 	.word	0x20003180

0001ca08 <ll_wl_remove>:
{
   1ca08:	b538      	push	{r3, r4, r5, lr}
   1ca0a:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1ca0c:	f7fc f91e 	bl	18c4c <radio_adv_filter_pol_get>
   1ca10:	4604      	mov	r4, r0
   1ca12:	b110      	cbz	r0, 1ca1a <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ca14:	240c      	movs	r4, #12
}
   1ca16:	4620      	mov	r0, r4
   1ca18:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1ca1a:	f7fc f939 	bl	18c90 <radio_scan_filter_pol_get>
   1ca1e:	07c3      	lsls	r3, r0, #31
   1ca20:	d4f8      	bmi.n	1ca14 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1ca22:	7828      	ldrb	r0, [r5, #0]
   1ca24:	28ff      	cmp	r0, #255	; 0xff
   1ca26:	d102      	bne.n	1ca2e <ll_wl_remove+0x26>
		wl_anon = 0;
   1ca28:	4b0f      	ldr	r3, [pc, #60]	; (1ca68 <ll_wl_remove+0x60>)
   1ca2a:	701c      	strb	r4, [r3, #0]
		return 0;
   1ca2c:	e7f3      	b.n	1ca16 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1ca2e:	4622      	mov	r2, r4
   1ca30:	1c69      	adds	r1, r5, #1
   1ca32:	f7ff fdb9 	bl	1c5a8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1ca36:	2807      	cmp	r0, #7
   1ca38:	d813      	bhi.n	1ca62 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1ca3a:	4b0c      	ldr	r3, [pc, #48]	; (1ca6c <ll_wl_remove+0x64>)
   1ca3c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   1ca40:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1ca42:	2d07      	cmp	r5, #7
   1ca44:	d806      	bhi.n	1ca54 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1ca46:	2228      	movs	r2, #40	; 0x28
   1ca48:	4909      	ldr	r1, [pc, #36]	; (1ca70 <ll_wl_remove+0x68>)
   1ca4a:	436a      	muls	r2, r5
   1ca4c:	5c8d      	ldrb	r5, [r1, r2]
   1ca4e:	f364 1545 	bfi	r5, r4, #5, #1
   1ca52:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   1ca54:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1ca58:	f36f 0200 	bfc	r2, #0, #1
   1ca5c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   1ca60:	e7d9      	b.n	1ca16 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ca62:	2402      	movs	r4, #2
   1ca64:	e7d7      	b.n	1ca16 <ll_wl_remove+0xe>
   1ca66:	bf00      	nop
   1ca68:	20003180 	.word	0x20003180
   1ca6c:	20001d7b 	.word	0x20001d7b
   1ca70:	20001c08 	.word	0x20001c08

0001ca74 <ll_filters_adv_update>:
{
   1ca74:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1ca76:	4b0d      	ldr	r3, [pc, #52]	; (1caac <ll_filters_adv_update+0x38>)
   1ca78:	2200      	movs	r2, #0
   1ca7a:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1ca7c:	705a      	strb	r2, [r3, #1]
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1ca7e:	b128      	cbz	r0, 1ca8c <ll_filters_adv_update+0x18>
   1ca80:	f7fc f906 	bl	18c90 <radio_scan_filter_pol_get>
   1ca84:	07c3      	lsls	r3, r0, #31
   1ca86:	d401      	bmi.n	1ca8c <ll_filters_adv_update+0x18>
		filter_wl_update();
   1ca88:	f7ff fdf6 	bl	1c678 <filter_wl_update>
	filter->enable_bitmask = 0;
   1ca8c:	4b08      	ldr	r3, [pc, #32]	; (1cab0 <ll_filters_adv_update+0x3c>)
   1ca8e:	2200      	movs	r2, #0
   1ca90:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1ca92:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_scan_is_enabled()) {
   1ca94:	4b07      	ldr	r3, [pc, #28]	; (1cab4 <ll_filters_adv_update+0x40>)
   1ca96:	781b      	ldrb	r3, [r3, #0]
   1ca98:	b133      	cbz	r3, 1caa8 <ll_filters_adv_update+0x34>
   1ca9a:	f7fc f8e3 	bl	18c64 <ll_scan_is_enabled>
   1ca9e:	b918      	cbnz	r0, 1caa8 <ll_filters_adv_update+0x34>
}
   1caa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1caa4:	f7ff bdb4 	b.w	1c610 <filter_rl_update>
}
   1caa8:	bd08      	pop	{r3, pc}
   1caaa:	bf00      	nop
   1caac:	20001dbb 	.word	0x20001dbb
   1cab0:	20001d49 	.word	0x20001d49
   1cab4:	20001d48 	.word	0x20001d48

0001cab8 <ll_filters_scan_update>:
{
   1cab8:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1caba:	4b0d      	ldr	r3, [pc, #52]	; (1caf0 <ll_filters_scan_update+0x38>)
   1cabc:	2200      	movs	r2, #0
   1cabe:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1cac0:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1cac2:	07c3      	lsls	r3, r0, #31
   1cac4:	d504      	bpl.n	1cad0 <ll_filters_scan_update+0x18>
   1cac6:	f7fc f8c1 	bl	18c4c <radio_adv_filter_pol_get>
   1caca:	b908      	cbnz	r0, 1cad0 <ll_filters_scan_update+0x18>
		filter_wl_update();
   1cacc:	f7ff fdd4 	bl	1c678 <filter_wl_update>
	filter->enable_bitmask = 0;
   1cad0:	4b08      	ldr	r3, [pc, #32]	; (1caf4 <ll_filters_scan_update+0x3c>)
   1cad2:	2200      	movs	r2, #0
   1cad4:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1cad6:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   1cad8:	4b07      	ldr	r3, [pc, #28]	; (1caf8 <ll_filters_scan_update+0x40>)
   1cada:	781b      	ldrb	r3, [r3, #0]
   1cadc:	b133      	cbz	r3, 1caec <ll_filters_scan_update+0x34>
   1cade:	f7fc f8ad 	bl	18c3c <ll_adv_is_enabled>
   1cae2:	b918      	cbnz	r0, 1caec <ll_filters_scan_update+0x34>
}
   1cae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1cae8:	f7ff bd92 	b.w	1c610 <filter_rl_update>
}
   1caec:	bd08      	pop	{r3, pc}
   1caee:	bf00      	nop
   1caf0:	20001dbb 	.word	0x20001dbb
   1caf4:	20001d49 	.word	0x20001d49
   1caf8:	20001d48 	.word	0x20001d48

0001cafc <ll_rl_find>:
{
   1cafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb00:	468a      	mov	sl, r1
	if (free) {
   1cb02:	4614      	mov	r4, r2
   1cb04:	b10a      	cbz	r2, 1cb0a <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1cb06:	23ff      	movs	r3, #255	; 0xff
   1cb08:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1cb0a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1cb64 <ll_rl_find+0x68>
{
   1cb0e:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1cb10:	f000 0801 	and.w	r8, r0, #1
   1cb14:	2628      	movs	r6, #40	; 0x28
   1cb16:	436e      	muls	r6, r5
   1cb18:	b2ef      	uxtb	r7, r5
   1cb1a:	f819 3006 	ldrb.w	r3, [r9, r6]
   1cb1e:	07da      	lsls	r2, r3, #31
   1cb20:	d51a      	bpl.n	1cb58 <ll_rl_find+0x5c>
   1cb22:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1cb26:	4543      	cmp	r3, r8
   1cb28:	d10f      	bne.n	1cb4a <ll_rl_find+0x4e>
   1cb2a:	480d      	ldr	r0, [pc, #52]	; (1cb60 <ll_rl_find+0x64>)
   1cb2c:	2206      	movs	r2, #6
   1cb2e:	4651      	mov	r1, sl
   1cb30:	4430      	add	r0, r6
   1cb32:	f7e9 f982 	bl	5e3a <memcmp>
   1cb36:	b160      	cbz	r0, 1cb52 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1cb38:	b13c      	cbz	r4, 1cb4a <ll_rl_find+0x4e>
   1cb3a:	f819 3006 	ldrb.w	r3, [r9, r6]
   1cb3e:	07db      	lsls	r3, r3, #31
   1cb40:	d403      	bmi.n	1cb4a <ll_rl_find+0x4e>
   1cb42:	7823      	ldrb	r3, [r4, #0]
   1cb44:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1cb46:	bf08      	it	eq
   1cb48:	7027      	strbeq	r7, [r4, #0]
   1cb4a:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1cb4c:	2d08      	cmp	r5, #8
   1cb4e:	d1e1      	bne.n	1cb14 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   1cb50:	27ff      	movs	r7, #255	; 0xff
}
   1cb52:	4638      	mov	r0, r7
   1cb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1cb58:	2c00      	cmp	r4, #0
   1cb5a:	d1f2      	bne.n	1cb42 <ll_rl_find+0x46>
   1cb5c:	e7f5      	b.n	1cb4a <ll_rl_find+0x4e>
   1cb5e:	bf00      	nop
   1cb60:	20001c09 	.word	0x20001c09
   1cb64:	20001c08 	.word	0x20001c08

0001cb68 <ll_wl_add>:
{
   1cb68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cb6c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1cb6e:	f7fc f86d 	bl	18c4c <radio_adv_filter_pol_get>
   1cb72:	4605      	mov	r5, r0
   1cb74:	b120      	cbz	r0, 1cb80 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1cb76:	250c      	movs	r5, #12
}
   1cb78:	4628      	mov	r0, r5
   1cb7a:	b002      	add	sp, #8
   1cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1cb80:	f7fc f886 	bl	18c90 <radio_scan_filter_pol_get>
   1cb84:	07c3      	lsls	r3, r0, #31
   1cb86:	d4f6      	bmi.n	1cb76 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1cb88:	7838      	ldrb	r0, [r7, #0]
   1cb8a:	28ff      	cmp	r0, #255	; 0xff
   1cb8c:	d103      	bne.n	1cb96 <ll_wl_add+0x2e>
		wl_anon = 1;
   1cb8e:	4b1f      	ldr	r3, [pc, #124]	; (1cc0c <ll_wl_add+0xa4>)
   1cb90:	2201      	movs	r2, #1
   1cb92:	701a      	strb	r2, [r3, #0]
		return 0;
   1cb94:	e7f0      	b.n	1cb78 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1cb96:	f107 0801 	add.w	r8, r7, #1
   1cb9a:	f10d 0207 	add.w	r2, sp, #7
   1cb9e:	4641      	mov	r1, r8
   1cba0:	f7ff fd02 	bl	1c5a8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1cba4:	2807      	cmp	r0, #7
   1cba6:	d92d      	bls.n	1cc04 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   1cba8:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1cbac:	2e07      	cmp	r6, #7
   1cbae:	d82b      	bhi.n	1cc08 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1cbb0:	4c17      	ldr	r4, [pc, #92]	; (1cc10 <ll_wl_add+0xa8>)
   1cbb2:	783a      	ldrb	r2, [r7, #0]
   1cbb4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1cbb8:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1cbbc:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   1cbc0:	4641      	mov	r1, r8
   1cbc2:	2206      	movs	r2, #6
   1cbc4:	3002      	adds	r0, #2
   1cbc6:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1cbca:	f7e9 f95d 	bl	5e88 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1cbce:	462a      	mov	r2, r5
   1cbd0:	4641      	mov	r1, r8
   1cbd2:	7838      	ldrb	r0, [r7, #0]
   1cbd4:	f7ff ff92 	bl	1cafc <ll_rl_find>
   1cbd8:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   1cbda:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   1cbdc:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1cbde:	d80e      	bhi.n	1cbfe <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   1cbe0:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1cbe2:	2328      	movs	r3, #40	; 0x28
   1cbe4:	4a0b      	ldr	r2, [pc, #44]	; (1cc14 <ll_wl_add+0xac>)
   1cbe6:	4358      	muls	r0, r3
   1cbe8:	5c13      	ldrb	r3, [r2, r0]
   1cbea:	f043 0320 	orr.w	r3, r3, #32
   1cbee:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   1cbf0:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   1cbf4:	f043 0301 	orr.w	r3, r3, #1
   1cbf8:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1cbfc:	e7bc      	b.n	1cb78 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1cbfe:	22ff      	movs	r2, #255	; 0xff
   1cc00:	705a      	strb	r2, [r3, #1]
   1cc02:	e7f5      	b.n	1cbf0 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   1cc04:	2512      	movs	r5, #18
   1cc06:	e7b7      	b.n	1cb78 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1cc08:	2507      	movs	r5, #7
	return wl_add(addr);
   1cc0a:	e7b5      	b.n	1cb78 <ll_wl_add+0x10>
   1cc0c:	20003180 	.word	0x20003180
   1cc10:	20001d7b 	.word	0x20001d7b
   1cc14:	20001c08 	.word	0x20001c08

0001cc18 <ctrl_rl_idx_allowed>:
{
   1cc18:	b508      	push	{r3, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1cc1a:	4b17      	ldr	r3, [pc, #92]	; (1cc78 <ctrl_rl_idx_allowed+0x60>)
   1cc1c:	781b      	ldrb	r3, [r3, #0]
   1cc1e:	b34b      	cbz	r3, 1cc74 <ctrl_rl_idx_allowed+0x5c>
   1cc20:	2907      	cmp	r1, #7
   1cc22:	d827      	bhi.n	1cc74 <ctrl_rl_idx_allowed+0x5c>
   1cc24:	bb30      	cbnz	r0, 1cc74 <ctrl_rl_idx_allowed+0x5c>
	LL_ASSERT(rl[rl_idx].taken);
   1cc26:	2328      	movs	r3, #40	; 0x28
   1cc28:	4359      	muls	r1, r3
   1cc2a:	4b14      	ldr	r3, [pc, #80]	; (1cc7c <ctrl_rl_idx_allowed+0x64>)
   1cc2c:	5c58      	ldrb	r0, [r3, r1]
   1cc2e:	f010 0301 	ands.w	r3, r0, #1
   1cc32:	d11a      	bne.n	1cc6a <ctrl_rl_idx_allowed+0x52>
   1cc34:	4a12      	ldr	r2, [pc, #72]	; (1cc80 <ctrl_rl_idx_allowed+0x68>)
   1cc36:	6812      	ldr	r2, [r2, #0]
   1cc38:	0752      	lsls	r2, r2, #29
   1cc3a:	d010      	beq.n	1cc5e <ctrl_rl_idx_allowed+0x46>
   1cc3c:	2101      	movs	r1, #1
   1cc3e:	f04f 0200 	mov.w	r2, #0
   1cc42:	f361 0202 	bfi	r2, r1, #0, #3
   1cc46:	f363 02c5 	bfi	r2, r3, #3, #3
   1cc4a:	490e      	ldr	r1, [pc, #56]	; (1cc84 <ctrl_rl_idx_allowed+0x6c>)
   1cc4c:	4b0e      	ldr	r3, [pc, #56]	; (1cc88 <ctrl_rl_idx_allowed+0x70>)
   1cc4e:	480f      	ldr	r0, [pc, #60]	; (1cc8c <ctrl_rl_idx_allowed+0x74>)
   1cc50:	1a5b      	subs	r3, r3, r1
   1cc52:	08db      	lsrs	r3, r3, #3
   1cc54:	f363 128f 	bfi	r2, r3, #6, #10
   1cc58:	490d      	ldr	r1, [pc, #52]	; (1cc90 <ctrl_rl_idx_allowed+0x78>)
   1cc5a:	f7e5 f87d 	bl	1d58 <log_1>
   1cc5e:	4040      	eors	r0, r0
   1cc60:	f380 8811 	msr	BASEPRI, r0
   1cc64:	f04f 0004 	mov.w	r0, #4
   1cc68:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1cc6a:	0743      	lsls	r3, r0, #29
   1cc6c:	d502      	bpl.n	1cc74 <ctrl_rl_idx_allowed+0x5c>
   1cc6e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1cc72:	bd08      	pop	{r3, pc}
		return true;
   1cc74:	2001      	movs	r0, #1
   1cc76:	e7fc      	b.n	1cc72 <ctrl_rl_idx_allowed+0x5a>
   1cc78:	20001d48 	.word	0x20001d48
   1cc7c:	20001c08 	.word	0x20001c08
   1cc80:	2000d734 	.word	0x2000d734
   1cc84:	0002cff8 	.word	0x0002cff8
   1cc88:	0002d040 	.word	0x0002d040
   1cc8c:	00031927 	.word	0x00031927
   1cc90:	000318cb 	.word	0x000318cb

0001cc94 <ll_rl_id_addr_get>:
{
   1cc94:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1cc96:	2b07      	cmp	r3, #7
{
   1cc98:	b570      	push	{r4, r5, r6, lr}
   1cc9a:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1cc9c:	d91a      	bls.n	1ccd4 <ll_rl_id_addr_get+0x40>
   1cc9e:	4b21      	ldr	r3, [pc, #132]	; (1cd24 <ll_rl_id_addr_get+0x90>)
   1cca0:	681b      	ldr	r3, [r3, #0]
   1cca2:	075a      	lsls	r2, r3, #29
   1cca4:	d010      	beq.n	1ccc8 <ll_rl_id_addr_get+0x34>
   1cca6:	2301      	movs	r3, #1
   1cca8:	f04f 0200 	mov.w	r2, #0
   1ccac:	f363 0202 	bfi	r2, r3, #0, #3
   1ccb0:	491d      	ldr	r1, [pc, #116]	; (1cd28 <ll_rl_id_addr_get+0x94>)
   1ccb2:	4b1e      	ldr	r3, [pc, #120]	; (1cd2c <ll_rl_id_addr_get+0x98>)
   1ccb4:	481e      	ldr	r0, [pc, #120]	; (1cd30 <ll_rl_id_addr_get+0x9c>)
   1ccb6:	1a5b      	subs	r3, r3, r1
   1ccb8:	f36f 02c5 	bfc	r2, #3, #3
   1ccbc:	08db      	lsrs	r3, r3, #3
   1ccbe:	491d      	ldr	r1, [pc, #116]	; (1cd34 <ll_rl_id_addr_get+0xa0>)
   1ccc0:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(rl[rl_idx].taken);
   1ccc4:	f7e5 f848 	bl	1d58 <log_1>
   1ccc8:	4040      	eors	r0, r0
   1ccca:	f380 8811 	msr	BASEPRI, r0
   1ccce:	f04f 0004 	mov.w	r0, #4
   1ccd2:	df02      	svc	2
   1ccd4:	2528      	movs	r5, #40	; 0x28
   1ccd6:	4c18      	ldr	r4, [pc, #96]	; (1cd38 <ll_rl_id_addr_get+0xa4>)
   1ccd8:	fb05 f203 	mul.w	r2, r5, r3
   1ccdc:	5ca2      	ldrb	r2, [r4, r2]
   1ccde:	f012 0601 	ands.w	r6, r2, #1
   1cce2:	d113      	bne.n	1cd0c <ll_rl_id_addr_get+0x78>
   1cce4:	4b0f      	ldr	r3, [pc, #60]	; (1cd24 <ll_rl_id_addr_get+0x90>)
   1cce6:	681b      	ldr	r3, [r3, #0]
   1cce8:	075b      	lsls	r3, r3, #29
   1ccea:	d0ed      	beq.n	1ccc8 <ll_rl_id_addr_get+0x34>
   1ccec:	2301      	movs	r3, #1
   1ccee:	f04f 0200 	mov.w	r2, #0
   1ccf2:	f363 0202 	bfi	r2, r3, #0, #3
   1ccf6:	490c      	ldr	r1, [pc, #48]	; (1cd28 <ll_rl_id_addr_get+0x94>)
   1ccf8:	4b0c      	ldr	r3, [pc, #48]	; (1cd2c <ll_rl_id_addr_get+0x98>)
   1ccfa:	4810      	ldr	r0, [pc, #64]	; (1cd3c <ll_rl_id_addr_get+0xa8>)
   1ccfc:	1a5b      	subs	r3, r3, r1
   1ccfe:	f366 02c5 	bfi	r2, r6, #3, #3
   1cd02:	08db      	lsrs	r3, r3, #3
   1cd04:	f363 128f 	bfi	r2, r3, #6, #10
   1cd08:	490a      	ldr	r1, [pc, #40]	; (1cd34 <ll_rl_id_addr_get+0xa0>)
   1cd0a:	e7db      	b.n	1ccc4 <ll_rl_id_addr_get+0x30>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1cd0c:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1cd10:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1cd12:	fb05 4103 	mla	r1, r5, r3, r4
   1cd16:	2206      	movs	r2, #6
   1cd18:	3101      	adds	r1, #1
}
   1cd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1cd1e:	f7e9 b8b3 	b.w	5e88 <memcpy>
   1cd22:	bf00      	nop
   1cd24:	2000d734 	.word	0x2000d734
   1cd28:	0002cff8 	.word	0x0002cff8
   1cd2c:	0002d040 	.word	0x0002d040
   1cd30:	00031b68 	.word	0x00031b68
   1cd34:	000318df 	.word	0x000318df
   1cd38:	20001c08 	.word	0x20001c08
   1cd3c:	00031927 	.word	0x00031927

0001cd40 <ctrl_rl_addr_allowed>:
{
   1cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1cd44:	4b1a      	ldr	r3, [pc, #104]	; (1cdb0 <ctrl_rl_addr_allowed+0x70>)
   1cd46:	781b      	ldrb	r3, [r3, #0]
   1cd48:	b383      	cbz	r3, 1cdac <ctrl_rl_addr_allowed+0x6c>
   1cd4a:	7813      	ldrb	r3, [r2, #0]
   1cd4c:	2bff      	cmp	r3, #255	; 0xff
   1cd4e:	d12d      	bne.n	1cdac <ctrl_rl_addr_allowed+0x6c>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1cd50:	4e18      	ldr	r6, [pc, #96]	; (1cdb4 <ctrl_rl_addr_allowed+0x74>)
   1cd52:	2300      	movs	r3, #0
   1cd54:	f04f 0828 	mov.w	r8, #40	; 0x28
   1cd58:	46b4      	mov	ip, r6
   1cd5a:	f106 0906 	add.w	r9, r6, #6
   1cd5e:	fb08 f403 	mul.w	r4, r8, r3
   1cd62:	fa5f fe83 	uxtb.w	lr, r3
   1cd66:	5d37      	ldrb	r7, [r6, r4]
   1cd68:	f017 0f01 	tst.w	r7, #1
   1cd6c:	eb06 0504 	add.w	r5, r6, r4
   1cd70:	d019      	beq.n	1cda6 <ctrl_rl_addr_allowed+0x66>
   1cd72:	f3c7 1780 	ubfx	r7, r7, #6, #1
   1cd76:	4287      	cmp	r7, r0
   1cd78:	d115      	bne.n	1cda6 <ctrl_rl_addr_allowed+0x66>
   1cd7a:	1e4f      	subs	r7, r1, #1
   1cd7c:	444c      	add	r4, r9
				if (addr[j] != id_addr[j]) {
   1cd7e:	f815 bf01 	ldrb.w	fp, [r5, #1]!
   1cd82:	f817 af01 	ldrb.w	sl, [r7, #1]!
   1cd86:	45d3      	cmp	fp, sl
   1cd88:	d10d      	bne.n	1cda6 <ctrl_rl_addr_allowed+0x66>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1cd8a:	42a5      	cmp	r5, r4
   1cd8c:	d1f7      	bne.n	1cd7e <ctrl_rl_addr_allowed+0x3e>
				*rl_idx = i;
   1cd8e:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   1cd92:	2228      	movs	r2, #40	; 0x28
   1cd94:	4353      	muls	r3, r2
   1cd96:	f81c 0003 	ldrb.w	r0, [ip, r3]
   1cd9a:	0743      	lsls	r3, r0, #29
   1cd9c:	d506      	bpl.n	1cdac <ctrl_rl_addr_allowed+0x6c>
   1cd9e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1cda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cda6:	3301      	adds	r3, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1cda8:	2b08      	cmp	r3, #8
   1cdaa:	d1d8      	bne.n	1cd5e <ctrl_rl_addr_allowed+0x1e>
				return !rl[i].pirk || rl[i].dev;
   1cdac:	2001      	movs	r0, #1
   1cdae:	e7f8      	b.n	1cda2 <ctrl_rl_addr_allowed+0x62>
   1cdb0:	20001d48 	.word	0x20001d48
   1cdb4:	20001c08 	.word	0x20001c08

0001cdb8 <ctrl_rl_addr_resolve>:
{
   1cdb8:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1cdba:	4c0d      	ldr	r4, [pc, #52]	; (1cdf0 <ctrl_rl_addr_resolve+0x38>)
   1cdbc:	7824      	ldrb	r4, [r4, #0]
   1cdbe:	b1a4      	cbz	r4, 1cdea <ctrl_rl_addr_resolve+0x32>
   1cdc0:	2a07      	cmp	r2, #7
   1cdc2:	d812      	bhi.n	1cdea <ctrl_rl_addr_resolve+0x32>
   1cdc4:	2528      	movs	r5, #40	; 0x28
   1cdc6:	4c0b      	ldr	r4, [pc, #44]	; (1cdf4 <ctrl_rl_addr_resolve+0x3c>)
   1cdc8:	fb05 f602 	mul.w	r6, r5, r2
   1cdcc:	5da6      	ldrb	r6, [r4, r6]
   1cdce:	0736      	lsls	r6, r6, #28
   1cdd0:	d50b      	bpl.n	1cdea <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   1cdd2:	b150      	cbz	r0, 1cdea <ctrl_rl_addr_resolve+0x32>
   1cdd4:	794b      	ldrb	r3, [r1, #5]
   1cdd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cdda:	2b40      	cmp	r3, #64	; 0x40
   1cddc:	d105      	bne.n	1cdea <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1cdde:	fb05 4202 	mla	r2, r5, r2, r4
   1cde2:	1dd0      	adds	r0, r2, #7
}
   1cde4:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1cde6:	f7e9 bdb2 	b.w	694e <bt_rpa_irk_matches>
}
   1cdea:	2000      	movs	r0, #0
   1cdec:	bc70      	pop	{r4, r5, r6}
   1cdee:	4770      	bx	lr
   1cdf0:	20001d48 	.word	0x20001d48
   1cdf4:	20001c08 	.word	0x20001c08

0001cdf8 <ctrl_rl_enabled>:
	return rl_enable;
   1cdf8:	4b02      	ldr	r3, [pc, #8]	; (1ce04 <ctrl_rl_enabled+0xc>)
   1cdfa:	7818      	ldrb	r0, [r3, #0]
}
   1cdfc:	3000      	adds	r0, #0
   1cdfe:	bf18      	it	ne
   1ce00:	2001      	movne	r0, #1
   1ce02:	4770      	bx	lr
   1ce04:	20001d48 	.word	0x20001d48

0001ce08 <ll_rl_pdu_adv_update>:
{
   1ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce0a:	4605      	mov	r5, r0
   1ce0c:	460c      	mov	r4, r1
   1ce0e:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1ce10:	f7ff f8f8 	bl	1c004 <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1ce14:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1ce16:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1ce18:	d848      	bhi.n	1ceac <ll_rl_pdu_adv_update+0xa4>
   1ce1a:	2328      	movs	r3, #40	; 0x28
   1ce1c:	4a2f      	ldr	r2, [pc, #188]	; (1cedc <ll_rl_pdu_adv_update+0xd4>)
   1ce1e:	436b      	muls	r3, r5
   1ce20:	18d1      	adds	r1, r2, r3
   1ce22:	5cd3      	ldrb	r3, [r2, r3]
   1ce24:	0718      	lsls	r0, r3, #28
   1ce26:	d541      	bpl.n	1ceac <ll_rl_pdu_adv_update+0xa4>
		LL_ASSERT(rl[idx].rpas_ready);
   1ce28:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1ce2c:	b9d3      	cbnz	r3, 1ce64 <ll_rl_pdu_adv_update+0x5c>
   1ce2e:	4a2c      	ldr	r2, [pc, #176]	; (1cee0 <ll_rl_pdu_adv_update+0xd8>)
   1ce30:	6812      	ldr	r2, [r2, #0]
   1ce32:	0752      	lsls	r2, r2, #29
   1ce34:	d010      	beq.n	1ce58 <ll_rl_pdu_adv_update+0x50>
   1ce36:	2101      	movs	r1, #1
   1ce38:	f04f 0200 	mov.w	r2, #0
   1ce3c:	f361 0202 	bfi	r2, r1, #0, #3
   1ce40:	f363 02c5 	bfi	r2, r3, #3, #3
   1ce44:	4927      	ldr	r1, [pc, #156]	; (1cee4 <ll_rl_pdu_adv_update+0xdc>)
   1ce46:	4b28      	ldr	r3, [pc, #160]	; (1cee8 <ll_rl_pdu_adv_update+0xe0>)
   1ce48:	4828      	ldr	r0, [pc, #160]	; (1ceec <ll_rl_pdu_adv_update+0xe4>)
   1ce4a:	1a5b      	subs	r3, r3, r1
   1ce4c:	08db      	lsrs	r3, r3, #3
   1ce4e:	f363 128f 	bfi	r2, r3, #6, #10
   1ce52:	4927      	ldr	r1, [pc, #156]	; (1cef0 <ll_rl_pdu_adv_update+0xe8>)
   1ce54:	f7e4 ff80 	bl	1d58 <log_1>
   1ce58:	4040      	eors	r0, r0
   1ce5a:	f380 8811 	msr	BASEPRI, r0
   1ce5e:	f04f 0004 	mov.w	r0, #4
   1ce62:	df02      	svc	2
		pdu->tx_addr = 1;
   1ce64:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1ce66:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   1ce68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ce6c:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1ce6e:	2206      	movs	r2, #6
   1ce70:	4638      	mov	r0, r7
   1ce72:	f7e9 f809 	bl	5e88 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ce76:	7823      	ldrb	r3, [r4, #0]
   1ce78:	f003 020f 	and.w	r2, r3, #15
   1ce7c:	2a01      	cmp	r2, #1
   1ce7e:	d12c      	bne.n	1ceda <ll_rl_pdu_adv_update+0xd2>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1ce80:	2d07      	cmp	r5, #7
   1ce82:	f104 0008 	add.w	r0, r4, #8
   1ce86:	d81e      	bhi.n	1cec6 <ll_rl_pdu_adv_update+0xbe>
   1ce88:	2228      	movs	r2, #40	; 0x28
   1ce8a:	4914      	ldr	r1, [pc, #80]	; (1cedc <ll_rl_pdu_adv_update+0xd4>)
   1ce8c:	fb02 f705 	mul.w	r7, r2, r5
   1ce90:	5dcf      	ldrb	r7, [r1, r7]
   1ce92:	077f      	lsls	r7, r7, #29
   1ce94:	d517      	bpl.n	1cec6 <ll_rl_pdu_adv_update+0xbe>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   1ce96:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   1ce9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ce9e:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1cea0:	2206      	movs	r2, #6
   1cea2:	311e      	adds	r1, #30
}
   1cea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1cea8:	f7e8 bfee 	b.w	5e88 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   1ceac:	7830      	ldrb	r0, [r6, #0]
   1ceae:	7823      	ldrb	r3, [r4, #0]
   1ceb0:	f3c0 1041 	ubfx	r0, r0, #5, #2
   1ceb4:	f360 1386 	bfi	r3, r0, #6, #1
   1ceb8:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1ceba:	4639      	mov	r1, r7
   1cebc:	f000 0001 	and.w	r0, r0, #1
   1cec0:	f7f4 faf8 	bl	114b4 <ll_addr_get>
   1cec4:	e7d7      	b.n	1ce76 <ll_rl_pdu_adv_update+0x6e>
			pdu->rx_addr = ll_adv->id_addr_type;
   1cec6:	4631      	mov	r1, r6
   1cec8:	7822      	ldrb	r2, [r4, #0]
   1ceca:	f811 3b02 	ldrb.w	r3, [r1], #2
   1cece:	09db      	lsrs	r3, r3, #7
   1ced0:	f363 12c7 	bfi	r2, r3, #7, #1
   1ced4:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1ced6:	2206      	movs	r2, #6
   1ced8:	e7e4      	b.n	1cea4 <ll_rl_pdu_adv_update+0x9c>
}
   1ceda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cedc:	20001c08 	.word	0x20001c08
   1cee0:	2000d734 	.word	0x2000d734
   1cee4:	0002cff8 	.word	0x0002cff8
   1cee8:	0002d040 	.word	0x0002d040
   1ceec:	00031b88 	.word	0x00031b88
   1cef0:	000318f1 	.word	0x000318f1

0001cef4 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   1cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef8:	b087      	sub	sp, #28
   1cefa:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1cefc:	f00f fdd6 	bl	2caac <_impl_k_uptime_get>
   1cf00:	e9cd 0100 	strd	r0, r1, [sp]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   1cf04:	f1b9 0f00 	cmp.w	r9, #0
   1cf08:	d15a      	bne.n	1cfc0 <ll_rl_rpa_update+0xcc>
   1cf0a:	4b75      	ldr	r3, [pc, #468]	; (1d0e0 <ll_rl_rpa_update+0x1ec>)
   1cf0c:	e9d3 0100 	ldrd	r0, r1, [r3]
   1cf10:	1c4b      	adds	r3, r1, #1
   1cf12:	bf08      	it	eq
   1cf14:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1cf18:	d052      	beq.n	1cfc0 <ll_rl_rpa_update+0xcc>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1cf1a:	e9dd 3400 	ldrd	r3, r4, [sp]
   1cf1e:	1a1b      	subs	r3, r3, r0
   1cf20:	4618      	mov	r0, r3
   1cf22:	4b70      	ldr	r3, [pc, #448]	; (1d0e4 <ll_rl_rpa_update+0x1f0>)
   1cf24:	681a      	ldr	r2, [r3, #0]
   1cf26:	eb64 0401 	sbc.w	r4, r4, r1
   1cf2a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1cf2c:	4290      	cmp	r0, r2
   1cf2e:	eb74 0303 	sbcs.w	r3, r4, r3
   1cf32:	bfac      	ite	ge
   1cf34:	2601      	movge	r6, #1
   1cf36:	2600      	movlt	r6, #0
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1cf38:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 1d110 <ll_rl_rpa_update+0x21c>
	bool all = timeout || (rpa_last_ms == -1) ||
   1cf3c:	2400      	movs	r4, #0
   1cf3e:	4645      	mov	r5, r8
			}

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1cf40:	f108 0b07 	add.w	fp, r8, #7
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1cf44:	2328      	movs	r3, #40	; 0x28
   1cf46:	4363      	muls	r3, r4
   1cf48:	f818 3003 	ldrb.w	r3, [r8, r3]
   1cf4c:	07df      	lsls	r7, r3, #31
   1cf4e:	d559      	bpl.n	1d004 <ll_rl_rpa_update+0x110>
   1cf50:	b90e      	cbnz	r6, 1cf56 <ll_rl_rpa_update+0x62>
   1cf52:	0798      	lsls	r0, r3, #30
   1cf54:	d456      	bmi.n	1d004 <ll_rl_rpa_update+0x110>
			if (rl[i].pirk) {
   1cf56:	2328      	movs	r3, #40	; 0x28
   1cf58:	4363      	muls	r3, r4
   1cf5a:	18ea      	adds	r2, r5, r3
   1cf5c:	5ce9      	ldrb	r1, [r5, r3]
   1cf5e:	0749      	lsls	r1, r1, #29
   1cf60:	d530      	bpl.n	1cfc4 <ll_rl_rpa_update+0xd0>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1cf62:	7dd1      	ldrb	r1, [r2, #23]
   1cf64:	4a60      	ldr	r2, [pc, #384]	; (1d0e8 <ll_rl_rpa_update+0x1f4>)
   1cf66:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   1cf6a:	f102 0110 	add.w	r1, r2, #16
   1cf6e:	f10d 0007 	add.w	r0, sp, #7
		*pdst++ = *psrc--;
   1cf72:	f811 7d01 	ldrb.w	r7, [r1, #-1]!
   1cf76:	f800 7f01 	strb.w	r7, [r0, #1]!
	for (; length > 0; length--) {
   1cf7a:	4291      	cmp	r1, r2
   1cf7c:	d1f9      	bne.n	1cf72 <ll_rl_rpa_update+0x7e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1cf7e:	495b      	ldr	r1, [pc, #364]	; (1d0ec <ll_rl_rpa_update+0x1f8>)
   1cf80:	a802      	add	r0, sp, #8
   1cf82:	4419      	add	r1, r3
   1cf84:	f7e9 fcf6 	bl	6974 <bt_rpa_create>
				LL_ASSERT(!err);
   1cf88:	b1e0      	cbz	r0, 1cfc4 <ll_rl_rpa_update+0xd0>
				LL_ASSERT(!err);
   1cf8a:	4b59      	ldr	r3, [pc, #356]	; (1d0f0 <ll_rl_rpa_update+0x1fc>)
   1cf8c:	681b      	ldr	r3, [r3, #0]
   1cf8e:	0759      	lsls	r1, r3, #29
   1cf90:	d010      	beq.n	1cfb4 <ll_rl_rpa_update+0xc0>
   1cf92:	2301      	movs	r3, #1
   1cf94:	f04f 0200 	mov.w	r2, #0
   1cf98:	f363 0202 	bfi	r2, r3, #0, #3
   1cf9c:	4955      	ldr	r1, [pc, #340]	; (1d0f4 <ll_rl_rpa_update+0x200>)
   1cf9e:	4b56      	ldr	r3, [pc, #344]	; (1d0f8 <ll_rl_rpa_update+0x204>)
   1cfa0:	4856      	ldr	r0, [pc, #344]	; (1d0fc <ll_rl_rpa_update+0x208>)
   1cfa2:	1a5b      	subs	r3, r3, r1
   1cfa4:	f36f 02c5 	bfc	r2, #3, #3
   1cfa8:	08db      	lsrs	r3, r3, #3
   1cfaa:	4955      	ldr	r1, [pc, #340]	; (1d100 <ll_rl_rpa_update+0x20c>)
   1cfac:	f363 128f 	bfi	r2, r3, #6, #10
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1cfb0:	f7e4 fed2 	bl	1d58 <log_1>
   1cfb4:	4040      	eors	r0, r0
   1cfb6:	f380 8811 	msr	BASEPRI, r0
   1cfba:	f04f 0004 	mov.w	r0, #4
   1cfbe:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   1cfc0:	2601      	movs	r6, #1
   1cfc2:	e7b9      	b.n	1cf38 <ll_rl_rpa_update+0x44>
			if (rl[i].lirk) {
   1cfc4:	2028      	movs	r0, #40	; 0x28
   1cfc6:	4360      	muls	r0, r4
   1cfc8:	eb05 0a00 	add.w	sl, r5, r0
   1cfcc:	5c2b      	ldrb	r3, [r5, r0]
   1cfce:	071f      	lsls	r7, r3, #28
   1cfd0:	d512      	bpl.n	1cff8 <ll_rl_rpa_update+0x104>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1cfd2:	a902      	add	r1, sp, #8
   1cfd4:	4458      	add	r0, fp
   1cfd6:	f7e9 fccd 	bl	6974 <bt_rpa_create>
				LL_ASSERT(!err);
   1cfda:	2800      	cmp	r0, #0
   1cfdc:	d1d5      	bne.n	1cf8a <ll_rl_rpa_update+0x96>
   1cfde:	4f49      	ldr	r7, [pc, #292]	; (1d104 <ll_rl_rpa_update+0x210>)
   1cfe0:	2206      	movs	r2, #6
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   1cfe2:	ab02      	add	r3, sp, #8
   1cfe4:	fb02 7704 	mla	r7, r2, r4, r7
   1cfe8:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
   1cfec:	4619      	mov	r1, r3
   1cfee:	4638      	mov	r0, r7
   1cff0:	f7e8 ff4a 	bl	5e88 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   1cff4:	f8ca 7024 	str.w	r7, [sl, #36]	; 0x24
			}

			rl[i].rpas_ready = 1;
   1cff8:	2328      	movs	r3, #40	; 0x28
   1cffa:	4363      	muls	r3, r4
   1cffc:	5cea      	ldrb	r2, [r5, r3]
   1cffe:	f042 0202 	orr.w	r2, r2, #2
   1d002:	54ea      	strb	r2, [r5, r3]
   1d004:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1d006:	2c08      	cmp	r4, #8
   1d008:	d19c      	bne.n	1cf44 <ll_rl_rpa_update+0x50>
		}
	}

	if (all) {
   1d00a:	b126      	cbz	r6, 1d016 <ll_rl_rpa_update+0x122>
		rpa_last_ms = now;
   1d00c:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d010:	4b33      	ldr	r3, [pc, #204]	; (1d0e0 <ll_rl_rpa_update+0x1ec>)
   1d012:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   1d016:	f1b9 0f00 	cmp.w	r9, #0
   1d01a:	d05d      	beq.n	1d0d8 <ll_rl_rpa_update+0x1e4>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   1d01c:	f7fb fe0e 	bl	18c3c <ll_adv_is_enabled>
   1d020:	2800      	cmp	r0, #0
   1d022:	d059      	beq.n	1d0d8 <ll_rl_rpa_update+0x1e4>
	ll_adv = ll_adv_set_get();
   1d024:	f7fe ffee 	bl	1c004 <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1d028:	7803      	ldrb	r3, [r0, #0]
   1d02a:	065a      	lsls	r2, r3, #25
	ll_adv = ll_adv_set_get();
   1d02c:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1d02e:	d553      	bpl.n	1d0d8 <ll_rl_rpa_update+0x1e4>
	radio_adv_data = radio_adv_data_get();
   1d030:	f7fb fdfc 	bl	18c2c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1d034:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
	if (radio_adv_data->first == radio_adv_data->last) {
   1d038:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1d03c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d040:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
	if (radio_adv_data->first == radio_adv_data->last) {
   1d044:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
   1d046:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1d048:	eb00 0702 	add.w	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   1d04c:	d104      	bne.n	1d058 <ll_rl_rpa_update+0x164>
		last = radio_adv_data->last + 1;
   1d04e:	3401      	adds	r4, #1
   1d050:	b2e4      	uxtb	r4, r4
			last = 0;
   1d052:	2c02      	cmp	r4, #2
   1d054:	bf08      	it	eq
   1d056:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1d058:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d05c:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
	pdu->type = prev->type;
   1d060:	5ca9      	ldrb	r1, [r5, r2]
   1d062:	5ce8      	ldrb	r0, [r5, r3]
   1d064:	f361 0003 	bfi	r0, r1, #0, #4
	pdu->rfu = 0;
   1d068:	f36f 1004 	bfc	r0, #4, #1
   1d06c:	54e8      	strb	r0, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   1d06e:	5caa      	ldrb	r2, [r5, r2]
   1d070:	b2c1      	uxtb	r1, r0
   1d072:	f3c2 1240 	ubfx	r2, r2, #5, #1
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1d076:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
   1d07a:	f362 1145 	bfi	r1, r2, #5, #1
   1d07e:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1d080:	2200      	movs	r2, #0
   1d082:	f108 0102 	add.w	r1, r8, #2
   1d086:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1d088:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1d08a:	f7ff fd37 	bl	1cafc <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1d08e:	2807      	cmp	r0, #7
   1d090:	d913      	bls.n	1d0ba <ll_rl_rpa_update+0x1c6>
   1d092:	4b17      	ldr	r3, [pc, #92]	; (1d0f0 <ll_rl_rpa_update+0x1fc>)
   1d094:	681b      	ldr	r3, [r3, #0]
   1d096:	075b      	lsls	r3, r3, #29
   1d098:	d08c      	beq.n	1cfb4 <ll_rl_rpa_update+0xc0>
   1d09a:	2301      	movs	r3, #1
   1d09c:	f04f 0200 	mov.w	r2, #0
   1d0a0:	f363 0202 	bfi	r2, r3, #0, #3
   1d0a4:	4913      	ldr	r1, [pc, #76]	; (1d0f4 <ll_rl_rpa_update+0x200>)
   1d0a6:	4b14      	ldr	r3, [pc, #80]	; (1d0f8 <ll_rl_rpa_update+0x204>)
   1d0a8:	4817      	ldr	r0, [pc, #92]	; (1d108 <ll_rl_rpa_update+0x214>)
   1d0aa:	1a5b      	subs	r3, r3, r1
   1d0ac:	f36f 02c5 	bfc	r2, #3, #3
   1d0b0:	08db      	lsrs	r3, r3, #3
   1d0b2:	f363 128f 	bfi	r2, r3, #6, #10
   1d0b6:	4915      	ldr	r1, [pc, #84]	; (1d10c <ll_rl_rpa_update+0x218>)
   1d0b8:	e77a      	b.n	1cfb0 <ll_rl_rpa_update+0xbc>
	ll_rl_pdu_adv_update(idx, pdu);
   1d0ba:	4631      	mov	r1, r6
   1d0bc:	f7ff fea4 	bl	1ce08 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   1d0c0:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   1d0c2:	f107 0108 	add.w	r1, r7, #8
   1d0c6:	3a06      	subs	r2, #6
   1d0c8:	f106 0008 	add.w	r0, r6, #8
   1d0cc:	f7e8 fedc 	bl	5e88 <memcpy>
	pdu->len = prev->len;
   1d0d0:	787b      	ldrb	r3, [r7, #1]
   1d0d2:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
   1d0d4:	f885 404f 	strb.w	r4, [r5, #79]	; 0x4f
			rpa_adv_refresh();
		}
#endif
	}
}
   1d0d8:	b007      	add	sp, #28
   1d0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0de:	bf00      	nop
   1d0e0:	20003178 	.word	0x20003178
   1d0e4:	200031a4 	.word	0x200031a4
   1d0e8:	20001b87 	.word	0x20001b87
   1d0ec:	20001c26 	.word	0x20001c26
   1d0f0:	2000d734 	.word	0x2000d734
   1d0f4:	0002cff8 	.word	0x0002cff8
   1d0f8:	0002d040 	.word	0x0002d040
   1d0fc:	000314d4 	.word	0x000314d4
   1d100:	00031916 	.word	0x00031916
   1d104:	20001b4e 	.word	0x20001b4e
   1d108:	00031bb0 	.word	0x00031bb0
   1d10c:	00031906 	.word	0x00031906
   1d110:	20001c08 	.word	0x20001c08

0001d114 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   1d114:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1d116:	2001      	movs	r0, #1
   1d118:	f7ff feec 	bl	1cef4 <ll_rl_rpa_update>
   1d11c:	4b03      	ldr	r3, [pc, #12]	; (1d12c <rpa_timeout+0x18>)
   1d11e:	4904      	ldr	r1, [pc, #16]	; (1d130 <rpa_timeout+0x1c>)
   1d120:	681a      	ldr	r2, [r3, #0]
   1d122:	4804      	ldr	r0, [pc, #16]	; (1d134 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   1d124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d128:	f00f bb4a 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
   1d12c:	200031a4 	.word	0x200031a4
   1d130:	20003184 	.word	0x20003184
   1d134:	200031d8 	.word	0x200031d8

0001d138 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1d138:	4b07      	ldr	r3, [pc, #28]	; (1d158 <ll_adv_scan_state_cb+0x20>)
   1d13a:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   1d13c:	b130      	cbz	r0, 1d14c <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   1d13e:	b14b      	cbz	r3, 1d154 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1d140:	4b06      	ldr	r3, [pc, #24]	; (1d15c <ll_adv_scan_state_cb+0x24>)
   1d142:	4907      	ldr	r1, [pc, #28]	; (1d160 <ll_adv_scan_state_cb+0x28>)
   1d144:	681a      	ldr	r2, [r3, #0]
   1d146:	4807      	ldr	r0, [pc, #28]	; (1d164 <ll_adv_scan_state_cb+0x2c>)
   1d148:	f00f bb3a 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   1d14c:	b113      	cbz	r3, 1d154 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   1d14e:	4804      	ldr	r0, [pc, #16]	; (1d160 <ll_adv_scan_state_cb+0x28>)
   1d150:	f00f bae7 	b.w	2c722 <k_delayed_work_cancel>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   1d154:	4770      	bx	lr
   1d156:	bf00      	nop
   1d158:	20001d48 	.word	0x20001d48
   1d15c:	200031a4 	.word	0x200031a4
   1d160:	20003184 	.word	0x20003184
   1d164:	200031d8 	.word	0x200031d8

0001d168 <ll_rl_size_get>:
   1d168:	2008      	movs	r0, #8
   1d16a:	4770      	bx	lr

0001d16c <ll_rl_clear>:
{
	return CONFIG_BT_CTLR_RL_SIZE;
}

u32_t ll_rl_clear(void)
{
   1d16c:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1d16e:	f7ff fa77 	bl	1c660 <rl_access_check.constprop.1>
   1d172:	b390      	cbz	r0, 1d1da <ll_rl_clear+0x6e>
		rl[i].taken = 0;
   1d174:	4b1a      	ldr	r3, [pc, #104]	; (1d1e0 <ll_rl_clear+0x74>)
   1d176:	781a      	ldrb	r2, [r3, #0]
   1d178:	f36f 0200 	bfc	r2, #0, #1
   1d17c:	701a      	strb	r2, [r3, #0]
   1d17e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1d182:	f36f 0200 	bfc	r2, #0, #1
   1d186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1d18a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1d18e:	f36f 0200 	bfc	r2, #0, #1
   1d192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   1d196:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1d19a:	f36f 0200 	bfc	r2, #0, #1
   1d19e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1d1a2:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
   1d1a6:	f36f 0200 	bfc	r2, #0, #1
   1d1aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   1d1ae:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1d1b2:	f36f 0200 	bfc	r2, #0, #1
   1d1b6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1d1ba:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
   1d1be:	f36f 0200 	bfc	r2, #0, #1
   1d1c2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
   1d1c6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1d1ca:	f36f 0200 	bfc	r2, #0, #1
   1d1ce:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	peer_irk_count = 0;
   1d1d2:	4b04      	ldr	r3, [pc, #16]	; (1d1e4 <ll_rl_clear+0x78>)
   1d1d4:	2000      	movs	r0, #0
   1d1d6:	7018      	strb	r0, [r3, #0]
	}

	rl_clear();

	return 0;
}
   1d1d8:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d1da:	200c      	movs	r0, #12
   1d1dc:	e7fc      	b.n	1d1d8 <ll_rl_clear+0x6c>
   1d1de:	bf00      	nop
   1d1e0:	20001c08 	.word	0x20001c08
   1d1e4:	20001b7e 	.word	0x20001b7e

0001d1e8 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1ec:	b085      	sub	sp, #20
   1d1ee:	4607      	mov	r7, r0
   1d1f0:	4689      	mov	r9, r1
   1d1f2:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1d1f4:	f7ff fa34 	bl	1c660 <rl_access_check.constprop.1>
   1d1f8:	2800      	cmp	r0, #0
   1d1fa:	f000 8085 	beq.w	1d308 <ll_rl_add+0x120>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1d1fe:	f107 0801 	add.w	r8, r7, #1
   1d202:	f10d 020f 	add.w	r2, sp, #15
   1d206:	4641      	mov	r1, r8
   1d208:	7838      	ldrb	r0, [r7, #0]
   1d20a:	f7ff fc77 	bl	1cafc <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   1d20e:	2807      	cmp	r0, #7
   1d210:	d97c      	bls.n	1d30c <ll_rl_add+0x124>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   1d212:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1d216:	2d07      	cmp	r5, #7
   1d218:	d87a      	bhi.n	1d310 <ll_rl_add+0x128>
   1d21a:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1d21e:	4c3d      	ldr	r4, [pc, #244]	; (1d314 <ll_rl_add+0x12c>)
   1d220:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   1d224:	2628      	movs	r6, #40	; 0x28
   1d226:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1d228:	f10b 0001 	add.w	r0, fp, #1
   1d22c:	2206      	movs	r2, #6
   1d22e:	4641      	mov	r1, r8
   1d230:	4420      	add	r0, r4
   1d232:	f7e8 fe29 	bl	5e88 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1d236:	7839      	ldrb	r1, [r7, #0]
   1d238:	5da3      	ldrb	r3, [r4, r6]
   1d23a:	19a2      	adds	r2, r4, r6
   1d23c:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1d240:	4648      	mov	r0, r9
   1d242:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1d244:	9201      	str	r2, [sp, #4]
   1d246:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1d248:	f7f3 f997 	bl	1057a <mem_nz>
   1d24c:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1d24e:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1d250:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1d254:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1d256:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1d258:	f7f3 f98f 	bl	1057a <mem_nz>
   1d25c:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   1d25e:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1d260:	f000 0001 	and.w	r0, r0, #1
   1d264:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   1d268:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1d26c:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   1d26e:	d012      	beq.n	1d296 <ll_rl_add+0xae>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
   1d270:	4b29      	ldr	r3, [pc, #164]	; (1d318 <ll_rl_add+0x130>)
   1d272:	7819      	ldrb	r1, [r3, #0]
   1d274:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1d276:	4a29      	ldr	r2, [pc, #164]	; (1d31c <ll_rl_add+0x134>)
   1d278:	5455      	strb	r5, [r2, r1]
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1d27a:	1c4a      	adds	r2, r1, #1
   1d27c:	701a      	strb	r2, [r3, #0]
   1d27e:	4b28      	ldr	r3, [pc, #160]	; (1d320 <ll_rl_add+0x138>)
   1d280:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   1d284:	f109 0210 	add.w	r2, r9, #16
   1d288:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   1d28a:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   1d28e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1d292:	454a      	cmp	r2, r9
   1d294:	d1f9      	bne.n	1d28a <ll_rl_add+0xa2>
	}
	if (rl[i].lirk) {
   1d296:	b158      	cbz	r0, 1d2b0 <ll_rl_add+0xc8>
		memcpy(rl[i].local_irk, lirk, 16);
   1d298:	f10b 0007 	add.w	r0, fp, #7
   1d29c:	2210      	movs	r2, #16
   1d29e:	4651      	mov	r1, sl
   1d2a0:	4420      	add	r0, r4
   1d2a2:	f7e8 fdf1 	bl	5e88 <memcpy>
		rl[i].local_rpa = NULL;
   1d2a6:	2328      	movs	r3, #40	; 0x28
   1d2a8:	fb03 4305 	mla	r3, r3, r5, r4
   1d2ac:	2200      	movs	r2, #0
   1d2ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	(void)memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   1d2b0:	2628      	movs	r6, #40	; 0x28
   1d2b2:	436e      	muls	r6, r5
	(void)memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1d2b4:	f10b 0018 	add.w	r0, fp, #24
   1d2b8:	2206      	movs	r2, #6
   1d2ba:	2100      	movs	r1, #0
   1d2bc:	4420      	add	r0, r4
   1d2be:	f7e8 fe10 	bl	5ee2 <memset>
	rl[i].rpas_ready = 0;
   1d2c2:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   1d2c4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1d2c8:	f36f 1304 	bfc	r3, #4, #1
   1d2cc:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1d2ce:	2200      	movs	r2, #0
   1d2d0:	4641      	mov	r1, r8
   1d2d2:	7838      	ldrb	r0, [r7, #0]
   1d2d4:	f7ff f968 	bl	1c5a8 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1d2d8:	2807      	cmp	r0, #7
   1d2da:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1d2dc:	bf9d      	ittte	ls
   1d2de:	4a11      	ldrls	r2, [pc, #68]	; (1d324 <ll_rl_add+0x13c>)
		rl[i].wl = 1;
   1d2e0:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   1d2e4:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   1d2e8:	f36f 1345 	bfchi	r3, #5, #1
   1d2ec:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   1d2ee:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   1d2f2:	bf98      	it	ls
   1d2f4:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   1d2f6:	435d      	muls	r5, r3

	return 0;
   1d2f8:	2000      	movs	r0, #0
	rl[i].taken = 1;
   1d2fa:	5d63      	ldrb	r3, [r4, r5]
   1d2fc:	f043 0301 	orr.w	r3, r3, #1
   1d300:	5563      	strb	r3, [r4, r5]
}
   1d302:	b005      	add	sp, #20
   1d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d308:	200c      	movs	r0, #12
   1d30a:	e7fa      	b.n	1d302 <ll_rl_add+0x11a>
		return BT_HCI_ERR_INVALID_PARAM;
   1d30c:	2012      	movs	r0, #18
   1d30e:	e7f8      	b.n	1d302 <ll_rl_add+0x11a>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1d310:	2007      	movs	r0, #7
   1d312:	e7f6      	b.n	1d302 <ll_rl_add+0x11a>
   1d314:	20001c08 	.word	0x20001c08
   1d318:	20001b7e 	.word	0x20001b7e
   1d31c:	20001b7f 	.word	0x20001b7f
   1d320:	20001b87 	.word	0x20001b87
   1d324:	20001d7b 	.word	0x20001d7b

0001d328 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1d328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d32c:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1d32e:	f7ff f997 	bl	1c660 <rl_access_check.constprop.1>
   1d332:	2800      	cmp	r0, #0
   1d334:	d053      	beq.n	1d3de <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d336:	f109 0a01 	add.w	sl, r9, #1
   1d33a:	2200      	movs	r2, #0
   1d33c:	4651      	mov	r1, sl
   1d33e:	f899 0000 	ldrb.w	r0, [r9]
   1d342:	f7ff fbdb 	bl	1cafc <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1d346:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d348:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   1d34a:	d84a      	bhi.n	1d3e2 <ll_rl_remove+0xba>
		u8_t j, k;

		if (rl[i].pirk) {
   1d34c:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1d350:	4c25      	ldr	r4, [pc, #148]	; (1d3e8 <ll_rl_remove+0xc0>)
   1d352:	fb0b f300 	mul.w	r3, fp, r0
   1d356:	18e2      	adds	r2, r4, r3
   1d358:	5ce3      	ldrb	r3, [r4, r3]
   1d35a:	075b      	lsls	r3, r3, #29
   1d35c:	d524      	bpl.n	1d3a8 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1d35e:	4e23      	ldr	r6, [pc, #140]	; (1d3ec <ll_rl_remove+0xc4>)
   1d360:	7835      	ldrb	r5, [r6, #0]
   1d362:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   1d364:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1d368:	d01b      	beq.n	1d3a2 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1d36a:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   1d36c:	42af      	cmp	r7, r5
   1d36e:	d018      	beq.n	1d3a2 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1d370:	481f      	ldr	r0, [pc, #124]	; (1d3f0 <ll_rl_remove+0xc8>)
   1d372:	2210      	movs	r2, #16
   1d374:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   1d378:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1d37c:	f7e8 fd84 	bl	5e88 <memcpy>
   1d380:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1d382:	fb0b f103 	mul.w	r1, fp, r3
   1d386:	1862      	adds	r2, r4, r1
   1d388:	5c61      	ldrb	r1, [r4, r1]
   1d38a:	f011 0f01 	tst.w	r1, #1
   1d38e:	b2d8      	uxtb	r0, r3
   1d390:	d021      	beq.n	1d3d6 <ll_rl_remove+0xae>
   1d392:	0749      	lsls	r1, r1, #29
   1d394:	d51f      	bpl.n	1d3d6 <ll_rl_remove+0xae>
   1d396:	7dd1      	ldrb	r1, [r2, #23]
   1d398:	42a9      	cmp	r1, r5
   1d39a:	d11c      	bne.n	1d3d6 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   1d39c:	4b15      	ldr	r3, [pc, #84]	; (1d3f4 <ll_rl_remove+0xcc>)
						rl[k].pirk_idx = pi;
   1d39e:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1d3a0:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1d3a2:	7833      	ldrb	r3, [r6, #0]
   1d3a4:	3b01      	subs	r3, #1
   1d3a6:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1d3a8:	2200      	movs	r2, #0
   1d3aa:	4651      	mov	r1, sl
   1d3ac:	f899 0000 	ldrb.w	r0, [r9]
   1d3b0:	f7ff f8fa 	bl	1c5a8 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1d3b4:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   1d3b6:	bf9f      	itttt	ls
   1d3b8:	4b0f      	ldrls	r3, [pc, #60]	; (1d3f8 <ll_rl_remove+0xd0>)
   1d3ba:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   1d3be:	23ff      	movls	r3, #255	; 0xff
   1d3c0:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   1d3c2:	2028      	movs	r0, #40	; 0x28
   1d3c4:	fb00 f008 	mul.w	r0, r0, r8
   1d3c8:	5c23      	ldrb	r3, [r4, r0]
   1d3ca:	f36f 0300 	bfc	r3, #0, #1
   1d3ce:	5423      	strb	r3, [r4, r0]
		return 0;
   1d3d0:	2000      	movs	r0, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
   1d3d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3d6:	3301      	adds	r3, #1
				for (k = 0;
   1d3d8:	2b08      	cmp	r3, #8
   1d3da:	d1d2      	bne.n	1d382 <ll_rl_remove+0x5a>
   1d3dc:	e7e1      	b.n	1d3a2 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d3de:	200c      	movs	r0, #12
   1d3e0:	e7f7      	b.n	1d3d2 <ll_rl_remove+0xaa>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d3e2:	2002      	movs	r0, #2
   1d3e4:	e7f5      	b.n	1d3d2 <ll_rl_remove+0xaa>
   1d3e6:	bf00      	nop
   1d3e8:	20001c08 	.word	0x20001c08
   1d3ec:	20001b7e 	.word	0x20001b7e
   1d3f0:	20001b87 	.word	0x20001b87
   1d3f4:	20001b7f 	.word	0x20001b7f
   1d3f8:	20001d7b 	.word	0x20001d7b

0001d3fc <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1d3fc:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1d3fe:	795c      	ldrb	r4, [r3, #5]
   1d400:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1d404:	2c40      	cmp	r4, #64	; 0x40
{
   1d406:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1d408:	d117      	bne.n	1d43a <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   1d40a:	b119      	cbz	r1, 1d414 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1d40c:	2200      	movs	r2, #0
   1d40e:	f7ff fb75 	bl	1cafc <ll_rl_find>
   1d412:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1d414:	2a07      	cmp	r2, #7
   1d416:	d810      	bhi.n	1d43a <ll_rl_crpa_set+0x3e>
   1d418:	2128      	movs	r1, #40	; 0x28
   1d41a:	4c08      	ldr	r4, [pc, #32]	; (1d43c <ll_rl_crpa_set+0x40>)
   1d41c:	fb01 f302 	mul.w	r3, r1, r2
   1d420:	5ce3      	ldrb	r3, [r4, r3]
   1d422:	07db      	lsls	r3, r3, #31
   1d424:	d509      	bpl.n	1d43a <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1d426:	2018      	movs	r0, #24
   1d428:	fb11 0002 	smlabb	r0, r1, r2, r0
   1d42c:	4420      	add	r0, r4
   1d42e:	4629      	mov	r1, r5
   1d430:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   1d432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1d436:	f7e8 bd27 	b.w	5e88 <memcpy>
}
   1d43a:	bd70      	pop	{r4, r5, r6, pc}
   1d43c:	20001c08 	.word	0x20001c08

0001d440 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1d440:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d442:	2200      	movs	r2, #0
{
   1d444:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d446:	1c41      	adds	r1, r0, #1
   1d448:	7800      	ldrb	r0, [r0, #0]
   1d44a:	f7ff fb57 	bl	1cafc <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1d44e:	2807      	cmp	r0, #7
   1d450:	d901      	bls.n	1d456 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d452:	2002      	movs	r0, #2
}
   1d454:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1d456:	2428      	movs	r4, #40	; 0x28
   1d458:	2318      	movs	r3, #24
   1d45a:	fb14 3000 	smlabb	r0, r4, r0, r3
   1d45e:	4c07      	ldr	r4, [pc, #28]	; (1d47c <ll_rl_crpa_get+0x3c>)
   1d460:	4404      	add	r4, r0
   1d462:	2106      	movs	r1, #6
   1d464:	4620      	mov	r0, r4
   1d466:	f7f3 f888 	bl	1057a <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1d46a:	2800      	cmp	r0, #0
   1d46c:	d0f1      	beq.n	1d452 <ll_rl_crpa_get+0x12>
   1d46e:	2206      	movs	r2, #6
   1d470:	4621      	mov	r1, r4
   1d472:	4628      	mov	r0, r5
   1d474:	f7e8 fd08 	bl	5e88 <memcpy>
			return 0;
   1d478:	2000      	movs	r0, #0
   1d47a:	e7eb      	b.n	1d454 <ll_rl_crpa_get+0x14>
   1d47c:	20001c08 	.word	0x20001c08

0001d480 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1d480:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d482:	2200      	movs	r2, #0
{
   1d484:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d486:	1c41      	adds	r1, r0, #1
   1d488:	7800      	ldrb	r0, [r0, #0]
   1d48a:	f7ff fb37 	bl	1cafc <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1d48e:	2807      	cmp	r0, #7
   1d490:	d80a      	bhi.n	1d4a8 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1d492:	4b06      	ldr	r3, [pc, #24]	; (1d4ac <ll_rl_lrpa_get+0x2c>)
   1d494:	2228      	movs	r2, #40	; 0x28
   1d496:	fb02 3000 	mla	r0, r2, r0, r3
   1d49a:	2206      	movs	r2, #6
   1d49c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1d49e:	4620      	mov	r0, r4
   1d4a0:	f7e8 fcf2 	bl	5e88 <memcpy>
		return 0;
   1d4a4:	2000      	movs	r0, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
   1d4a6:	bd10      	pop	{r4, pc}
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d4a8:	2002      	movs	r0, #2
   1d4aa:	e7fc      	b.n	1d4a6 <ll_rl_lrpa_get+0x26>
   1d4ac:	20001c08 	.word	0x20001c08

0001d4b0 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1d4b0:	b510      	push	{r4, lr}
   1d4b2:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1d4b4:	f7ff f8d4 	bl	1c660 <rl_access_check.constprop.1>
   1d4b8:	b140      	cbz	r0, 1d4cc <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   1d4ba:	b11c      	cbz	r4, 1d4c4 <ll_rl_enable+0x14>
   1d4bc:	2c01      	cmp	r4, #1
   1d4be:	d001      	beq.n	1d4c4 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1d4c0:	2012      	movs	r0, #18
   1d4c2:	e002      	b.n	1d4ca <ll_rl_enable+0x1a>
		rl_enable = 1;
   1d4c4:	4b02      	ldr	r3, [pc, #8]	; (1d4d0 <ll_rl_enable+0x20>)
	}

	return 0;
   1d4c6:	2000      	movs	r0, #0
		rl_enable = 1;
   1d4c8:	701c      	strb	r4, [r3, #0]
}
   1d4ca:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d4cc:	200c      	movs	r0, #12
   1d4ce:	e7fc      	b.n	1d4ca <ll_rl_enable+0x1a>
   1d4d0:	20001d48 	.word	0x20001d48

0001d4d4 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1d4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d4d8:	4358      	muls	r0, r3
   1d4da:	4b01      	ldr	r3, [pc, #4]	; (1d4e0 <ll_rl_timeout_set+0xc>)
   1d4dc:	6018      	str	r0, [r3, #0]
}
   1d4de:	4770      	bx	lr
   1d4e0:	200031a4 	.word	0x200031a4

0001d4e4 <ll_priv_mode_set>:

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1d4e4:	b538      	push	{r3, r4, r5, lr}
   1d4e6:	4605      	mov	r5, r0
   1d4e8:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1d4ea:	f7ff f8b9 	bl	1c660 <rl_access_check.constprop.1>
   1d4ee:	b1d8      	cbz	r0, 1d528 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1d4f0:	2200      	movs	r2, #0
   1d4f2:	1c69      	adds	r1, r5, #1
   1d4f4:	7828      	ldrb	r0, [r5, #0]
   1d4f6:	f7ff fb01 	bl	1cafc <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1d4fa:	2807      	cmp	r0, #7
   1d4fc:	d816      	bhi.n	1d52c <ll_priv_mode_set+0x48>
		switch (mode) {
   1d4fe:	b11c      	cbz	r4, 1d508 <ll_priv_mode_set+0x24>
   1d500:	2c01      	cmp	r4, #1
   1d502:	d00a      	beq.n	1d51a <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   1d504:	2012      	movs	r0, #18
   1d506:	e007      	b.n	1d518 <ll_priv_mode_set+0x34>
			rl[i].dev = 0;
   1d508:	2328      	movs	r3, #40	; 0x28
   1d50a:	4a09      	ldr	r2, [pc, #36]	; (1d530 <ll_priv_mode_set+0x4c>)
   1d50c:	4358      	muls	r0, r3
   1d50e:	5c13      	ldrb	r3, [r2, r0]
   1d510:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   1d514:	5413      	strb	r3, [r2, r0]
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
   1d516:	2000      	movs	r0, #0
}
   1d518:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1d51a:	2328      	movs	r3, #40	; 0x28
   1d51c:	4a04      	ldr	r2, [pc, #16]	; (1d530 <ll_priv_mode_set+0x4c>)
   1d51e:	4358      	muls	r0, r3
   1d520:	5c13      	ldrb	r3, [r2, r0]
   1d522:	f043 0310 	orr.w	r3, r3, #16
   1d526:	e7f5      	b.n	1d514 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d528:	200c      	movs	r0, #12
   1d52a:	e7f5      	b.n	1d518 <ll_priv_mode_set+0x34>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d52c:	2002      	movs	r0, #2
   1d52e:	e7f3      	b.n	1d518 <ll_priv_mode_set+0x34>
   1d530:	20001c08 	.word	0x20001c08

0001d534 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   1d534:	4a39      	ldr	r2, [pc, #228]	; (1d61c <ll_filter_reset+0xe8>)
   1d536:	2300      	movs	r3, #0
{
   1d538:	b430      	push	{r4, r5}
	wl_anon = 0;
   1d53a:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   1d53c:	4a38      	ldr	r2, [pc, #224]	; (1d620 <ll_filter_reset+0xec>)
   1d53e:	7811      	ldrb	r1, [r2, #0]
   1d540:	f363 0100 	bfi	r1, r3, #0, #1
   1d544:	7011      	strb	r1, [r2, #0]
   1d546:	7a11      	ldrb	r1, [r2, #8]
   1d548:	f363 0100 	bfi	r1, r3, #0, #1
   1d54c:	7211      	strb	r1, [r2, #8]
   1d54e:	7c11      	ldrb	r1, [r2, #16]
   1d550:	f363 0100 	bfi	r1, r3, #0, #1
   1d554:	7411      	strb	r1, [r2, #16]
   1d556:	7e11      	ldrb	r1, [r2, #24]
   1d558:	f363 0100 	bfi	r1, r3, #0, #1
   1d55c:	7611      	strb	r1, [r2, #24]
   1d55e:	f892 1020 	ldrb.w	r1, [r2, #32]
   1d562:	f363 0100 	bfi	r1, r3, #0, #1
   1d566:	f882 1020 	strb.w	r1, [r2, #32]
   1d56a:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   1d56e:	f363 0100 	bfi	r1, r3, #0, #1
   1d572:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1d576:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   1d57a:	f363 0100 	bfi	r1, r3, #0, #1
   1d57e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
   1d582:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   1d586:	f363 0100 	bfi	r1, r3, #0, #1
   1d58a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   1d58e:	4a25      	ldr	r2, [pc, #148]	; (1d624 <ll_filter_reset+0xf0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1d590:	4925      	ldr	r1, [pc, #148]	; (1d628 <ll_filter_reset+0xf4>)
	rl_enable = 0;
   1d592:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1d594:	4a25      	ldr	r2, [pc, #148]	; (1d62c <ll_filter_reset+0xf8>)
   1d596:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1d598:	4a25      	ldr	r2, [pc, #148]	; (1d630 <ll_filter_reset+0xfc>)
   1d59a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d59e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d5a2:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   1d5a6:	4a23      	ldr	r2, [pc, #140]	; (1d634 <ll_filter_reset+0x100>)
   1d5a8:	7811      	ldrb	r1, [r2, #0]
   1d5aa:	f363 0100 	bfi	r1, r3, #0, #1
   1d5ae:	7011      	strb	r1, [r2, #0]
   1d5b0:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   1d5b4:	f363 0100 	bfi	r1, r3, #0, #1
   1d5b8:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1d5bc:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   1d5c0:	f363 0100 	bfi	r1, r3, #0, #1
   1d5c4:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
   1d5c8:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
   1d5cc:	f363 0100 	bfi	r1, r3, #0, #1
   1d5d0:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
   1d5d4:	f892 10a0 	ldrb.w	r1, [r2, #160]	; 0xa0
   1d5d8:	f363 0100 	bfi	r1, r3, #0, #1
   1d5dc:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
   1d5e0:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
   1d5e4:	f363 0100 	bfi	r1, r3, #0, #1
   1d5e8:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
   1d5ec:	f892 10f0 	ldrb.w	r1, [r2, #240]	; 0xf0
   1d5f0:	f363 0100 	bfi	r1, r3, #0, #1
   1d5f4:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
   1d5f8:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
   1d5fc:	f363 0100 	bfi	r1, r3, #0, #1
   1d600:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
	peer_irk_count = 0;
   1d604:	4a0c      	ldr	r2, [pc, #48]	; (1d638 <ll_filter_reset+0x104>)
   1d606:	7013      	strb	r3, [r2, #0]
	rl_clear();
	if (init) {
   1d608:	b120      	cbz	r0, 1d614 <ll_filter_reset+0xe0>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1d60a:	490c      	ldr	r1, [pc, #48]	; (1d63c <ll_filter_reset+0x108>)
   1d60c:	480c      	ldr	r0, [pc, #48]	; (1d640 <ll_filter_reset+0x10c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   1d60e:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1d610:	f00f b87e 	b.w	2c710 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   1d614:	480a      	ldr	r0, [pc, #40]	; (1d640 <ll_filter_reset+0x10c>)
}
   1d616:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   1d618:	f00f b883 	b.w	2c722 <k_delayed_work_cancel>
   1d61c:	20003180 	.word	0x20003180
   1d620:	20001d7b 	.word	0x20001d7b
   1d624:	20001d48 	.word	0x20001d48
   1d628:	000dbba0 	.word	0x000dbba0
   1d62c:	200031a4 	.word	0x200031a4
   1d630:	20003178 	.word	0x20003178
   1d634:	20001c08 	.word	0x20001c08
   1d638:	20001b7e 	.word	0x20001b7e
   1d63c:	0001d115 	.word	0x0001d115
   1d640:	20003184 	.word	0x20003184

0001d644 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1d644:	4b05      	ldr	r3, [pc, #20]	; (1d65c <cntr_init+0x18>)
   1d646:	2200      	movs	r2, #0
   1d648:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_rtc->EVTENSET = mask;
   1d64c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1d650:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_rtc->INTENSET = mask;
   1d654:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk |
			     RTC_EVTENSET_COMPARE1_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk |
			     RTC_INTENSET_COMPARE1_Msk);
}
   1d658:	4770      	bx	lr
   1d65a:	bf00      	nop
   1d65c:	4000b000 	.word	0x4000b000

0001d660 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   1d660:	4a04      	ldr	r2, [pc, #16]	; (1d674 <cntr_start+0x14>)
   1d662:	7813      	ldrb	r3, [r2, #0]
   1d664:	1c59      	adds	r1, r3, #1
   1d666:	7011      	strb	r1, [r2, #0]
   1d668:	2001      	movs	r0, #1
   1d66a:	b913      	cbnz	r3, 1d672 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
   1d66c:	4a02      	ldr	r2, [pc, #8]	; (1d678 <cntr_start+0x18>)
   1d66e:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1d670:	4618      	mov	r0, r3
}
   1d672:	4770      	bx	lr
   1d674:	20001ded 	.word	0x20001ded
   1d678:	4000b000 	.word	0x4000b000

0001d67c <cntr_stop>:

u32_t cntr_stop(void)
{
   1d67c:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
   1d67e:	4b14      	ldr	r3, [pc, #80]	; (1d6d0 <cntr_stop+0x54>)
   1d680:	7818      	ldrb	r0, [r3, #0]
   1d682:	b9d0      	cbnz	r0, 1d6ba <cntr_stop+0x3e>
   1d684:	4b13      	ldr	r3, [pc, #76]	; (1d6d4 <cntr_stop+0x58>)
   1d686:	681b      	ldr	r3, [r3, #0]
   1d688:	075b      	lsls	r3, r3, #29
   1d68a:	d010      	beq.n	1d6ae <cntr_stop+0x32>
   1d68c:	2301      	movs	r3, #1
   1d68e:	f04f 0200 	mov.w	r2, #0
   1d692:	f363 0202 	bfi	r2, r3, #0, #3
   1d696:	4910      	ldr	r1, [pc, #64]	; (1d6d8 <cntr_stop+0x5c>)
   1d698:	4b10      	ldr	r3, [pc, #64]	; (1d6dc <cntr_stop+0x60>)
   1d69a:	1a5b      	subs	r3, r3, r1
   1d69c:	f360 02c5 	bfi	r2, r0, #3, #3
   1d6a0:	08db      	lsrs	r3, r3, #3
   1d6a2:	f363 128f 	bfi	r2, r3, #6, #10
   1d6a6:	490e      	ldr	r1, [pc, #56]	; (1d6e0 <cntr_stop+0x64>)
   1d6a8:	480e      	ldr	r0, [pc, #56]	; (1d6e4 <cntr_stop+0x68>)
   1d6aa:	f7e4 fb55 	bl	1d58 <log_1>
   1d6ae:	4040      	eors	r0, r0
   1d6b0:	f380 8811 	msr	BASEPRI, r0
   1d6b4:	f04f 0004 	mov.w	r0, #4
   1d6b8:	df02      	svc	2

	if (--_refcount) {
   1d6ba:	3801      	subs	r0, #1
   1d6bc:	b2c0      	uxtb	r0, r0
   1d6be:	7018      	strb	r0, [r3, #0]
   1d6c0:	2301      	movs	r3, #1
   1d6c2:	b910      	cbnz	r0, 1d6ca <cntr_stop+0x4e>
   1d6c4:	4a08      	ldr	r2, [pc, #32]	; (1d6e8 <cntr_stop+0x6c>)
   1d6c6:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1d6c8:	bd08      	pop	{r3, pc}
		return 1;
   1d6ca:	4618      	mov	r0, r3
   1d6cc:	e7fc      	b.n	1d6c8 <cntr_stop+0x4c>
   1d6ce:	bf00      	nop
   1d6d0:	20001ded 	.word	0x20001ded
   1d6d4:	2000d71c 	.word	0x2000d71c
   1d6d8:	0002cff8 	.word	0x0002cff8
   1d6dc:	0002d010 	.word	0x0002d010
   1d6e0:	00031c7f 	.word	0x00031c7f
   1d6e4:	00031c89 	.word	0x00031c89
   1d6e8:	4000b004 	.word	0x4000b004

0001d6ec <cntr_cnt_get>:
     return p_rtc->COUNTER;
   1d6ec:	4b01      	ldr	r3, [pc, #4]	; (1d6f4 <cntr_cnt_get+0x8>)
   1d6ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1d6f2:	4770      	bx	lr
   1d6f4:	4000b000 	.word	0x4000b000

0001d6f8 <cntr_cmp_set>:
    p_rtc->CC[ch] = cc_val;
   1d6f8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1d6fc:	4b01      	ldr	r3, [pc, #4]	; (1d704 <cntr_cmp_set+0xc>)
   1d6fe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1d702:	4770      	bx	lr
   1d704:	4000b000 	.word	0x4000b000

0001d708 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1d708:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1d70a:	4b13      	ldr	r3, [pc, #76]	; (1d758 <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d70c:	4c13      	ldr	r4, [pc, #76]	; (1d75c <do_ecb+0x54>)
   1d70e:	2501      	movs	r5, #1
{
   1d710:	4684      	mov	ip, r0
   1d712:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1d714:	2700      	movs	r7, #0
   1d716:	46a6      	mov	lr, r4
   1d718:	461a      	mov	r2, r3
   1d71a:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1d71c:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1d720:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1d724:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1d728:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1d72a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1d72e:	b931      	cbnz	r1, 1d73e <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1d730:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1d734:	b919      	cbnz	r1, 1d73e <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1d736:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1d73a:	2900      	cmp	r1, #0
   1d73c:	d1f5      	bne.n	1d72a <do_ecb+0x22>
   1d73e:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1d742:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1d746:	2900      	cmp	r1, #0
   1d748:	d1e7      	bne.n	1d71a <do_ecb+0x12>
   1d74a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1d74e:	2800      	cmp	r0, #0
   1d750:	d0e3      	beq.n	1d71a <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1d752:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1d756:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d758:	4000e000 	.word	0x4000e000
   1d75c:	4000e004 	.word	0x4000e004

0001d760 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   1d760:	b570      	push	{r4, r5, r6, lr}
   1d762:	b08c      	sub	sp, #48	; 0x30
   1d764:	460e      	mov	r6, r1
   1d766:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1d768:	4601      	mov	r1, r0
   1d76a:	2210      	movs	r2, #16
   1d76c:	4668      	mov	r0, sp
{
   1d76e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1d770:	f7f2 fef4 	bl	1055c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1d774:	2210      	movs	r2, #16
   1d776:	eb0d 0002 	add.w	r0, sp, r2
   1d77a:	4631      	mov	r1, r6
   1d77c:	f7f2 feee 	bl	1055c <mem_rcopy>

	do_ecb(&ecb);
   1d780:	4668      	mov	r0, sp
   1d782:	f7ff ffc1 	bl	1d708 <do_ecb>

	if (cipher_text_le) {
   1d786:	b125      	cbz	r5, 1d792 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1d788:	2210      	movs	r2, #16
   1d78a:	a908      	add	r1, sp, #32
   1d78c:	4628      	mov	r0, r5
   1d78e:	f7f2 fee5 	bl	1055c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1d792:	b124      	cbz	r4, 1d79e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1d794:	2210      	movs	r2, #16
   1d796:	a908      	add	r1, sp, #32
   1d798:	4620      	mov	r0, r4
   1d79a:	f7e8 fb75 	bl	5e88 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1d79e:	b00c      	add	sp, #48	; 0x30
   1d7a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0001d7a4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	nrf_ppi_channel_endpoint_setup(HAL_RADIO_ENABLE_ON_TICK_PPI,
   1d7a4:	4b09      	ldr	r3, [pc, #36]	; (1d7cc <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   1d7a6:	4a0a      	ldr	r2, [pc, #40]	; (1d7d0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   1d7a8:	2800      	cmp	r0, #0
   1d7aa:	bf14      	ite	ne
   1d7ac:	4618      	movne	r0, r3
   1d7ae:	4610      	moveq	r0, r2

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d7b0:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1d7b4:	f502 42e2 	add.w	r2, r2, #28928	; 0x7100
   1d7b8:	323c      	adds	r2, #60	; 0x3c
   1d7ba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_PPI->CHENSET = mask;
   1d7be:	2201      	movs	r2, #1
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d7c0:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    NRF_PPI->CHENSET = mask;
   1d7c4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
					HAL_RADIO_ENABLE_ON_TICK_PPI_EVT,
				(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
					HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX);
	nrf_ppi_channels_enable(HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE);
}
   1d7c8:	4770      	bx	lr
   1d7ca:	bf00      	nop
   1d7cc:	40001000 	.word	0x40001000
   1d7d0:	40001004 	.word	0x40001004

0001d7d4 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1d7d6:	4e2d      	ldr	r6, [pc, #180]	; (1d88c <sw_switch.isra.10+0xb8>)
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d7d8:	4f2d      	ldr	r7, [pc, #180]	; (1d890 <sw_switch.isra.10+0xbc>)
   1d7da:	7835      	ldrb	r5, [r6, #0]
   1d7dc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1d89c <sw_switch.isra.10+0xc8>
   1d7e0:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
   1d7e4:	b22b      	sxth	r3, r5
   1d7e6:	00dc      	lsls	r4, r3, #3
   1d7e8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d7ec:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d7f0:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1d7f4:	f105 040b 	add.w	r4, r5, #11
   1d7f8:	b2e4      	uxtb	r4, r4
   1d7fa:	00e4      	lsls	r4, r4, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));

	nrf_ppi_event_endpoint_setup(ppi,
   1d7fc:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1d800:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d804:	3fc0      	subs	r7, #192	; 0xc0
   1d806:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1d80a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d80e:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));

	if (dir) {
   1d812:	2800      	cmp	r0, #0
   1d814:	d034      	beq.n	1d880 <sw_switch.isra.10+0xac>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   1d816:	f649 4040 	movw	r0, #40000	; 0x9c40
   1d81a:	f24a 075a 	movw	r7, #41050	; 0xa05a
   1d81e:	2a02      	cmp	r2, #2
   1d820:	bf0c      	ite	eq
   1d822:	4602      	moveq	r2, r0
   1d824:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   1d826:	f241 504a 	movw	r0, #5450	; 0x154a
   1d82a:	f242 47b8 	movw	r7, #9400	; 0x24b8
   1d82e:	2902      	cmp	r1, #2
   1d830:	bf18      	it	ne
   1d832:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1d834:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   1d838:	4401      	add	r1, r0
   1d83a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d83e:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d842:	4a14      	ldr	r2, [pc, #80]	; (1d894 <sw_switch.isra.10+0xc0>)
   1d844:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1d848:	009b      	lsls	r3, r3, #2
   1d84a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d84e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   1d852:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1d856:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
   1d858:	bf8b      	itete	hi
   1d85a:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1d85e:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
   1d860:	1a51      	subhi	r1, r2, r1
   1d862:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1d866:	bf88      	it	hi
   1d868:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   1d86c:	4b08      	ldr	r3, [pc, #32]	; (1d890 <sw_switch.isra.10+0xbc>)
   1d86e:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1d872:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1d876:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1d878:	f003 0301 	and.w	r3, r3, #1
   1d87c:	7033      	strb	r3, [r6, #0]
}
   1d87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d880:	4a05      	ldr	r2, [pc, #20]	; (1d898 <sw_switch.isra.10+0xc4>)
   1d882:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1d886:	212d      	movs	r1, #45	; 0x2d
   1d888:	e7de      	b.n	1d848 <sw_switch.isra.10+0x74>
   1d88a:	bf00      	nop
   1d88c:	20002010 	.word	0x20002010
   1d890:	4001f000 	.word	0x4001f000
   1d894:	40001000 	.word	0x40001000
   1d898:	40001004 	.word	0x40001004
   1d89c:	4000110c 	.word	0x4000110c

0001d8a0 <isr_radio>:
	if (sfp_radio_isr) {
   1d8a0:	4b02      	ldr	r3, [pc, #8]	; (1d8ac <isr_radio+0xc>)
   1d8a2:	681b      	ldr	r3, [r3, #0]
   1d8a4:	b103      	cbz	r3, 1d8a8 <isr_radio+0x8>
		sfp_radio_isr();
   1d8a6:	4718      	bx	r3
}
   1d8a8:	4770      	bx	lr
   1d8aa:	bf00      	nop
   1d8ac:	2000200c 	.word	0x2000200c

0001d8b0 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   1d8b0:	4b06      	ldr	r3, [pc, #24]	; (1d8cc <radio_isr_set+0x1c>)
   1d8b2:	6018      	str	r0, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
   1d8b4:	4b06      	ldr	r3, [pc, #24]	; (1d8d0 <radio_isr_set+0x20>)
   1d8b6:	2210      	movs	r2, #16
   1d8b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d8bc:	4b05      	ldr	r3, [pc, #20]	; (1d8d4 <radio_isr_set+0x24>)
   1d8be:	2202      	movs	r2, #2
   1d8c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1d8c4:	2001      	movs	r0, #1
   1d8c6:	f7e8 b821 	b.w	590c <_arch_irq_enable>
   1d8ca:	bf00      	nop
   1d8cc:	2000200c 	.word	0x2000200c
   1d8d0:	40001000 	.word	0x40001000
   1d8d4:	e000e100 	.word	0xe000e100

0001d8d8 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1d8d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d8dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1d8e0:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1d8e2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1d8e6:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1d8ea:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1d8ee:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1d8f2:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1d8f6:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1d8fa:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1d8fe:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1d902:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1d906:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1d90a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1d90e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1d912:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1d916:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1d91a:	4770      	bx	lr

0001d91c <radio_reset>:
{
   1d91c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1d91e:	2001      	movs	r0, #1
   1d920:	f7e8 f804 	bl	592c <_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
   1d924:	4b08      	ldr	r3, [pc, #32]	; (1d948 <radio_reset+0x2c>)
   1d926:	2200      	movs	r2, #0
   1d928:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1d92c:	2201      	movs	r2, #1
   1d92e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1d932:	4a06      	ldr	r2, [pc, #24]	; (1d94c <radio_reset+0x30>)
   1d934:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1d936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d93a:	f023 0301 	bic.w	r3, r3, #1
   1d93e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1d942:	6013      	str	r3, [r2, #0]
}
   1d944:	bd08      	pop	{r3, pc}
   1d946:	bf00      	nop
   1d948:	40001000 	.word	0x40001000
   1d94c:	40001774 	.word	0x40001774

0001d950 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1d950:	4b06      	ldr	r3, [pc, #24]	; (1d96c <radio_phy_set+0x1c>)
	switch (phy) {
   1d952:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1d954:	bf0c      	ite	eq
   1d956:	2204      	moveq	r2, #4
   1d958:	2203      	movne	r2, #3
   1d95a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1d95e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1d962:	f042 0201 	orr.w	r2, r2, #1
   1d966:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1d96a:	4770      	bx	lr
   1d96c:	40001000 	.word	0x40001000

0001d970 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   1d970:	4b01      	ldr	r3, [pc, #4]	; (1d978 <radio_tx_power_set+0x8>)
   1d972:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1d976:	4770      	bx	lr
   1d978:	40001000 	.word	0x40001000

0001d97c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1d97c:	4b01      	ldr	r3, [pc, #4]	; (1d984 <radio_freq_chan_set+0x8>)
   1d97e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1d982:	4770      	bx	lr
   1d984:	40001000 	.word	0x40001000

0001d988 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1d988:	4b07      	ldr	r3, [pc, #28]	; (1d9a8 <radio_whiten_iv_set+0x20>)
   1d98a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1d98e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d992:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1d996:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1d99a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d99e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1d9a2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1d9a6:	4770      	bx	lr
   1d9a8:	40001000 	.word	0x40001000

0001d9ac <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1d9ac:	4a0a      	ldr	r2, [pc, #40]	; (1d9d8 <radio_aa_set+0x2c>)
   1d9ae:	2300      	movs	r3, #0
   1d9b0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1d9b4:	2301      	movs	r3, #1
   1d9b6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1d9ba:	78c3      	ldrb	r3, [r0, #3]
   1d9bc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1d9c0:	7843      	ldrb	r3, [r0, #1]
   1d9c2:	7881      	ldrb	r1, [r0, #2]
   1d9c4:	041b      	lsls	r3, r3, #16
   1d9c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1d9ca:	7801      	ldrb	r1, [r0, #0]
   1d9cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d9d0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1d9d4:	4770      	bx	lr
   1d9d6:	bf00      	nop
   1d9d8:	40001000 	.word	0x40001000

0001d9dc <radio_pkt_configure>:
	switch (phy) {
   1d9dc:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   1d9e0:	2b02      	cmp	r3, #2
{
   1d9e2:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   1d9e4:	bf0c      	ite	eq
   1d9e6:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   1d9ea:	2400      	movne	r4, #0
	if (dc) {
   1d9ec:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d9ee:	f1c0 0308 	rsb	r3, r0, #8
   1d9f2:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1d9f6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1d9fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d9fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1da02:	4a0b      	ldr	r2, [pc, #44]	; (1da30 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1da04:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1da08:	bf48      	it	mi
   1da0a:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   1da0e:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1da10:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1da14:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1da18:	4b06      	ldr	r3, [pc, #24]	; (1da34 <radio_pkt_configure+0x58>)
   1da1a:	4003      	ands	r3, r0
   1da1c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1da20:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1da24:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   1da28:	4319      	orrs	r1, r3
   1da2a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1da2e:	bd10      	pop	{r4, pc}
   1da30:	40001000 	.word	0x40001000
   1da34:	fef80000 	.word	0xfef80000

0001da38 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   1da38:	4b01      	ldr	r3, [pc, #4]	; (1da40 <radio_pkt_rx_set+0x8>)
   1da3a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1da3e:	4770      	bx	lr
   1da40:	40001000 	.word	0x40001000

0001da44 <radio_pkt_tx_set>:
   1da44:	4b01      	ldr	r3, [pc, #4]	; (1da4c <radio_pkt_tx_set+0x8>)
   1da46:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1da4a:	4770      	bx	lr
   1da4c:	40001000 	.word	0x40001000

0001da50 <radio_tx_ready_delay_get>:
	switch (phy) {
   1da50:	2802      	cmp	r0, #2
}
   1da52:	bf0c      	ite	eq
   1da54:	2028      	moveq	r0, #40	; 0x28
   1da56:	2029      	movne	r0, #41	; 0x29
   1da58:	4770      	bx	lr

0001da5a <radio_tx_chain_delay_get>:
}
   1da5a:	2001      	movs	r0, #1
   1da5c:	4770      	bx	lr

0001da5e <radio_rx_ready_delay_get>:
}
   1da5e:	2029      	movs	r0, #41	; 0x29
   1da60:	4770      	bx	lr

0001da62 <radio_rx_chain_delay_get>:
	switch (phy) {
   1da62:	2802      	cmp	r0, #2
}
   1da64:	bf0c      	ite	eq
   1da66:	2006      	moveq	r0, #6
   1da68:	200a      	movne	r0, #10
   1da6a:	4770      	bx	lr

0001da6c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
   1da6c:	4b01      	ldr	r3, [pc, #4]	; (1da74 <radio_rx_enable+0x8>)
   1da6e:	2201      	movs	r2, #1
   1da70:	601a      	str	r2, [r3, #0]
}
   1da72:	4770      	bx	lr
   1da74:	40001004 	.word	0x40001004

0001da78 <radio_tx_enable>:
   1da78:	4b01      	ldr	r3, [pc, #4]	; (1da80 <radio_tx_enable+0x8>)
   1da7a:	2201      	movs	r2, #1
   1da7c:	601a      	str	r2, [r3, #0]
}
   1da7e:	4770      	bx	lr
   1da80:	40001000 	.word	0x40001000

0001da84 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
   1da84:	4a07      	ldr	r2, [pc, #28]	; (1daa4 <radio_disable+0x20>)
   1da86:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1da8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
   1da8e:	2301      	movs	r3, #1
   1da90:	6053      	str	r3, [r2, #4]
   1da92:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1da94:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1da98:	2100      	movs	r1, #0
   1da9a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1da9e:	6113      	str	r3, [r2, #16]
}
   1daa0:	4770      	bx	lr
   1daa2:	bf00      	nop
   1daa4:	4001f000 	.word	0x4001f000

0001daa8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1daa8:	4b04      	ldr	r3, [pc, #16]	; (1dabc <radio_status_reset+0x14>)
   1daaa:	2200      	movs	r2, #0
   1daac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1dab0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1dab4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1dab8:	4770      	bx	lr
   1daba:	bf00      	nop
   1dabc:	40001000 	.word	0x40001000

0001dac0 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1dac0:	4b03      	ldr	r3, [pc, #12]	; (1dad0 <radio_is_ready+0x10>)
   1dac2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1dac6:	3000      	adds	r0, #0
   1dac8:	bf18      	it	ne
   1daca:	2001      	movne	r0, #1
   1dacc:	4770      	bx	lr
   1dace:	bf00      	nop
   1dad0:	40001000 	.word	0x40001000

0001dad4 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1dad4:	4b03      	ldr	r3, [pc, #12]	; (1dae4 <radio_is_done+0x10>)
   1dad6:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1dada:	3000      	adds	r0, #0
   1dadc:	bf18      	it	ne
   1dade:	2001      	movne	r0, #1
   1dae0:	4770      	bx	lr
   1dae2:	bf00      	nop
   1dae4:	40001000 	.word	0x40001000

0001dae8 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1dae8:	4b03      	ldr	r3, [pc, #12]	; (1daf8 <radio_is_idle+0x10>)
   1daea:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1daee:	fab0 f080 	clz	r0, r0
   1daf2:	0940      	lsrs	r0, r0, #5
   1daf4:	4770      	bx	lr
   1daf6:	bf00      	nop
   1daf8:	40001000 	.word	0x40001000

0001dafc <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1dafc:	4b04      	ldr	r3, [pc, #16]	; (1db10 <radio_crc_configure+0x14>)
   1dafe:	f240 1203 	movw	r2, #259	; 0x103
   1db02:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1db06:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1db0a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1db0e:	4770      	bx	lr
   1db10:	40001000 	.word	0x40001000

0001db14 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1db14:	4b03      	ldr	r3, [pc, #12]	; (1db24 <radio_crc_is_valid+0x10>)
   1db16:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1db1a:	3000      	adds	r0, #0
   1db1c:	bf18      	it	ne
   1db1e:	2001      	movne	r0, #1
   1db20:	4770      	bx	lr
   1db22:	bf00      	nop
   1db24:	40001000 	.word	0x40001000

0001db28 <radio_pkt_empty_get>:
}
   1db28:	4800      	ldr	r0, [pc, #0]	; (1db2c <radio_pkt_empty_get+0x4>)
   1db2a:	4770      	bx	lr
   1db2c:	20001f00 	.word	0x20001f00

0001db30 <radio_pkt_scratch_get>:
}
   1db30:	4800      	ldr	r0, [pc, #0]	; (1db34 <radio_pkt_scratch_get+0x4>)
   1db32:	4770      	bx	lr
   1db34:	20001f04 	.word	0x20001f04

0001db38 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1db38:	4b04      	ldr	r3, [pc, #16]	; (1db4c <radio_switch_complete_and_rx+0x14>)
   1db3a:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1db3c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1db3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1db42:	4602      	mov	r2, r0
   1db44:	4608      	mov	r0, r1
   1db46:	f7ff be45 	b.w	1d7d4 <sw_switch.isra.10>
   1db4a:	bf00      	nop
   1db4c:	40001000 	.word	0x40001000

0001db50 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1db50:	4b03      	ldr	r3, [pc, #12]	; (1db60 <radio_switch_complete_and_tx+0x10>)
   1db52:	2103      	movs	r1, #3
   1db54:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1db58:	4601      	mov	r1, r0
   1db5a:	2001      	movs	r0, #1
   1db5c:	f7ff be3a 	b.w	1d7d4 <sw_switch.isra.10>
   1db60:	40001000 	.word	0x40001000

0001db64 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1db64:	4b05      	ldr	r3, [pc, #20]	; (1db7c <radio_switch_complete_and_disable+0x18>)
   1db66:	2203      	movs	r2, #3
   1db68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
   1db6c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1db70:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1db74:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
				 HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1db78:	4770      	bx	lr
   1db7a:	bf00      	nop
   1db7c:	40001000 	.word	0x40001000

0001db80 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1db80:	4a03      	ldr	r2, [pc, #12]	; (1db90 <radio_rssi_measure+0x10>)
   1db82:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1db86:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1db8a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1db8e:	4770      	bx	lr
   1db90:	40001000 	.word	0x40001000

0001db94 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1db94:	4b01      	ldr	r3, [pc, #4]	; (1db9c <radio_rssi_get+0x8>)
   1db96:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1db9a:	4770      	bx	lr
   1db9c:	40001000 	.word	0x40001000

0001dba0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1dba0:	4b02      	ldr	r3, [pc, #8]	; (1dbac <radio_rssi_status_reset+0xc>)
   1dba2:	2200      	movs	r2, #0
   1dba4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1dba8:	4770      	bx	lr
   1dbaa:	bf00      	nop
   1dbac:	40001000 	.word	0x40001000

0001dbb0 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1dbb0:	4b03      	ldr	r3, [pc, #12]	; (1dbc0 <radio_rssi_is_ready+0x10>)
   1dbb2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1dbb6:	3000      	adds	r0, #0
   1dbb8:	bf18      	it	ne
   1dbba:	2001      	movne	r0, #1
   1dbbc:	4770      	bx	lr
   1dbbe:	bf00      	nop
   1dbc0:	40001000 	.word	0x40001000

0001dbc4 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1dbc4:	b530      	push	{r4, r5, lr}
   1dbc6:	2400      	movs	r4, #0
   1dbc8:	00a3      	lsls	r3, r4, #2
   1dbca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dbce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1dbd2:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1dbd4:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   1dbd8:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1dbda:	8895      	ldrh	r5, [r2, #4]
   1dbdc:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   1dbe0:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1dbe2:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1dbe6:	d1ef      	bne.n	1dbc8 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1dbe8:	4b02      	ldr	r3, [pc, #8]	; (1dbf4 <radio_filter_configure+0x30>)
   1dbea:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1dbee:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1dbf2:	bd30      	pop	{r4, r5, pc}
   1dbf4:	40001000 	.word	0x40001000

0001dbf8 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1dbf8:	4a03      	ldr	r2, [pc, #12]	; (1dc08 <radio_filter_disable+0x10>)
   1dbfa:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1dbfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1dc02:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1dc06:	4770      	bx	lr
   1dc08:	40001000 	.word	0x40001000

0001dc0c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1dc0c:	4b02      	ldr	r3, [pc, #8]	; (1dc18 <radio_filter_status_reset+0xc>)
   1dc0e:	2200      	movs	r2, #0
   1dc10:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1dc14:	4770      	bx	lr
   1dc16:	bf00      	nop
   1dc18:	40001000 	.word	0x40001000

0001dc1c <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1dc1c:	4b03      	ldr	r3, [pc, #12]	; (1dc2c <radio_filter_has_match+0x10>)
   1dc1e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1dc22:	3000      	adds	r0, #0
   1dc24:	bf18      	it	ne
   1dc26:	2001      	movne	r0, #1
   1dc28:	4770      	bx	lr
   1dc2a:	bf00      	nop
   1dc2c:	40001000 	.word	0x40001000

0001dc30 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1dc30:	4b01      	ldr	r3, [pc, #4]	; (1dc38 <radio_filter_match_get+0x8>)
   1dc32:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1dc36:	4770      	bx	lr
   1dc38:	40001000 	.word	0x40001000

0001dc3c <radio_bc_configure>:
    NRF_RADIO->BCC = radio_bcc;
   1dc3c:	4b04      	ldr	r3, [pc, #16]	; (1dc50 <radio_bc_configure+0x14>)
   1dc3e:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560

void radio_bc_configure(u32_t n)
{
	nrf_radio_bcc_set(n);
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1dc42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1dc46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1dc4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   1dc4e:	4770      	bx	lr
   1dc50:	40001000 	.word	0x40001000

0001dc54 <radio_tmr_status_reset>:
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENCLR = mask;
   1dc54:	4b05      	ldr	r3, [pc, #20]	; (1dc6c <radio_tmr_status_reset+0x18>)
   1dc56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1dc5a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1dc5e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1dc62:	227f      	movs	r2, #127	; 0x7f
   1dc64:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_DISABLE |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			HAL_TRIGGER_CRYPT_PPI_DISABLE);
}
   1dc68:	4770      	bx	lr
   1dc6a:	bf00      	nop
   1dc6c:	4000b000 	.word	0x4000b000

0001dc70 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
   1dc70:	4b03      	ldr	r3, [pc, #12]	; (1dc80 <radio_tmr_tifs_set+0x10>)
   1dc72:	4a04      	ldr	r2, [pc, #16]	; (1dc84 <radio_tmr_tifs_set+0x14>)
   1dc74:	781b      	ldrb	r3, [r3, #0]
   1dc76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1dc7a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1dc7e:	4770      	bx	lr
   1dc80:	20002010 	.word	0x20002010
   1dc84:	40009000 	.word	0x40009000

0001dc88 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1dc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1dc8a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1dc8e:	4c31      	ldr	r4, [pc, #196]	; (1dd54 <radio_tmr_start+0xcc>)
    p_rtc->CC[ch] = cc_val;
   1dc90:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1dd6c <radio_tmr_start+0xe4>
   1dc94:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1dc98:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1dc9a:	bf88      	it	hi
   1dc9c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dca0:	4b2d      	ldr	r3, [pc, #180]	; (1dd58 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;
   1dca2:	4c2e      	ldr	r4, [pc, #184]	; (1dd5c <radio_tmr_start+0xd4>)
		remainder += 30517578UL;
   1dca4:	bf82      	ittt	hi
   1dca6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1dcaa:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   1dcae:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1dcb2:	2501      	movs	r5, #1
	remainder /= 1000000UL;
   1dcb4:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1dcb8:	2600      	movs	r6, #0
	EVENT_TIMER->PRESCALER = 4;
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1dcba:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   1dcbc:	2704      	movs	r7, #4
   1dcbe:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1dcc0:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1dcc4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1dcc8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[cc_channel] = cc_value;
   1dccc:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
   1dcd0:	f8cc 1548 	str.w	r1, [ip, #1352]	; 0x548
    p_rtc->EVTENSET = mask;
   1dcd4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1dcd8:	f8cc 1344 	str.w	r1, [ip, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1dcdc:	4920      	ldr	r1, [pc, #128]	; (1dd60 <radio_tmr_start+0xd8>)
	EVENT_TIMER->MODE = 0;
   1dcde:	3b0c      	subs	r3, #12
   1dce0:	f50c 7ca4 	add.w	ip, ip, #328	; 0x148
   1dce4:	f8c1 c518 	str.w	ip, [r1, #1304]	; 0x518
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1dce8:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
    NRF_PPI->CHENSET = mask;
   1dcec:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
	nrf_ppi_channel_endpoint_setup(HAL_EVENT_TIMER_START_PPI,
				       HAL_EVENT_TIMER_START_EVT,
				       HAL_EVENT_TIMER_START_TASK);
	nrf_ppi_channels_enable(HAL_EVENT_TIMER_START_PPI_ENABLE);

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1dcf0:	f7ff fd58 	bl	1d7a4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1dcf4:	4b1b      	ldr	r3, [pc, #108]	; (1dd64 <radio_tmr_start+0xdc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dcf6:	4a1c      	ldr	r2, [pc, #112]	; (1dd68 <radio_tmr_start+0xe0>)
   1dcf8:	6015      	str	r5, [r2, #0]
   1dcfa:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1dcfe:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1dd02:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1dd06:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1dd08:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1dd0c:	3b74      	subs	r3, #116	; 0x74
   1dd0e:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   1dd12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1dd16:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1dd18:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1dd1c:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1dd20:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1dd24:	33c4      	adds	r3, #196	; 0xc4
   1dd26:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1dd2a:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1dd2e:	3bc0      	subs	r3, #192	; 0xc0
   1dd30:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1dd34:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1dd38:	33c8      	adds	r3, #200	; 0xc8
   1dd3a:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1dd3e:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1dd42:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1dd46:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1dd4a:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1dd4e:	4620      	mov	r0, r4
   1dd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd52:	bf00      	nop
   1dd54:	7ff0bdbf 	.word	0x7ff0bdbf
   1dd58:	4000800c 	.word	0x4000800c
   1dd5c:	000f4240 	.word	0x000f4240
   1dd60:	4001f000 	.word	0x4001f000
   1dd64:	40009000 	.word	0x40009000
   1dd68:	4000900c 	.word	0x4000900c
   1dd6c:	4000b000 	.word	0x4000b000

0001dd70 <radio_tmr_stop>:
   1dd70:	4a04      	ldr	r2, [pc, #16]	; (1dd84 <radio_tmr_stop+0x14>)
   1dd72:	2301      	movs	r3, #1
   1dd74:	6013      	str	r3, [r2, #0]
   1dd76:	60d3      	str	r3, [r2, #12]
   1dd78:	320c      	adds	r2, #12
   1dd7a:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1dd7e:	6013      	str	r3, [r2, #0]
   1dd80:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1dd82:	4770      	bx	lr
   1dd84:	40008004 	.word	0x40008004

0001dd88 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1dd88:	4b0c      	ldr	r3, [pc, #48]	; (1ddbc <radio_tmr_hcto_configure+0x34>)
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1dd8a:	4a0d      	ldr	r2, [pc, #52]	; (1ddc0 <radio_tmr_hcto_configure+0x38>)
   1dd8c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   1dd90:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1dd94:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1dd98:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1dd9c:	3240      	adds	r2, #64	; 0x40
   1dd9e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1dda2:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1dda6:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1ddaa:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1ddae:	3a34      	subs	r2, #52	; 0x34
   1ddb0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_PPI->CHENSET = mask;
   1ddb4:	2218      	movs	r2, #24
   1ddb6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
				       HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT,
				       HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK);

	nrf_ppi_channels_enable(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
				HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE);
}
   1ddba:	4770      	bx	lr
   1ddbc:	40008000 	.word	0x40008000
   1ddc0:	40001104 	.word	0x40001104

0001ddc4 <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1ddc4:	4b0b      	ldr	r3, [pc, #44]	; (1ddf4 <radio_tmr_aa_capture+0x30>)
   1ddc6:	4a0c      	ldr	r2, [pc, #48]	; (1ddf8 <radio_tmr_aa_capture+0x34>)
   1ddc8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1ddcc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1ddd0:	3240      	adds	r2, #64	; 0x40
   1ddd2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1ddd6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1ddda:	3a3c      	subs	r2, #60	; 0x3c
   1dddc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1dde0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1dde4:	3240      	adds	r2, #64	; 0x40
   1dde6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    NRF_PPI->CHENSET = mask;
   1ddea:	220c      	movs	r2, #12
   1ddec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
				       HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK);

	nrf_ppi_channels_enable(
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE);
}
   1ddf0:	4770      	bx	lr
   1ddf2:	bf00      	nop
   1ddf4:	4001f000 	.word	0x4001f000
   1ddf8:	40001100 	.word	0x40001100

0001ddfc <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1ddfc:	4b01      	ldr	r3, [pc, #4]	; (1de04 <radio_tmr_aa_get+0x8>)
   1ddfe:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1de02:	4770      	bx	lr
   1de04:	40008000 	.word	0x40008000

0001de08 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1de08:	4b01      	ldr	r3, [pc, #4]	; (1de10 <radio_tmr_aa_save+0x8>)
   1de0a:	6018      	str	r0, [r3, #0]
}
   1de0c:	4770      	bx	lr
   1de0e:	bf00      	nop
   1de10:	20002008 	.word	0x20002008

0001de14 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1de14:	4b01      	ldr	r3, [pc, #4]	; (1de1c <radio_tmr_aa_restore+0x8>)
   1de16:	6818      	ldr	r0, [r3, #0]
   1de18:	4770      	bx	lr
   1de1a:	bf00      	nop
   1de1c:	20002008 	.word	0x20002008

0001de20 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1de20:	4b01      	ldr	r3, [pc, #4]	; (1de28 <radio_tmr_ready_get+0x8>)
   1de22:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1de26:	4770      	bx	lr
   1de28:	40008000 	.word	0x40008000

0001de2c <radio_tmr_end_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1de2c:	4b06      	ldr	r3, [pc, #24]	; (1de48 <radio_tmr_end_capture+0x1c>)
   1de2e:	4a07      	ldr	r2, [pc, #28]	; (1de4c <radio_tmr_end_capture+0x20>)
   1de30:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1de34:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1de38:	323c      	adds	r2, #60	; 0x3c
   1de3a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
   1de3e:	2220      	movs	r2, #32
   1de40:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channel_endpoint_setup(HAL_RADIO_END_TIME_CAPTURE_PPI,
				       HAL_RADIO_END_TIME_CAPTURE_PPI_EVT,
				       HAL_RADIO_END_TIME_CAPTURE_PPI_TASK);

	nrf_ppi_channels_enable(HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE);
}
   1de44:	4770      	bx	lr
   1de46:	bf00      	nop
   1de48:	4001f000 	.word	0x4001f000
   1de4c:	4000110c 	.word	0x4000110c

0001de50 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1de50:	4b01      	ldr	r3, [pc, #4]	; (1de58 <radio_tmr_end_get+0x8>)
   1de52:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1de56:	4770      	bx	lr
   1de58:	40008000 	.word	0x40008000

0001de5c <radio_tmr_tifs_base_get>:
   1de5c:	4b01      	ldr	r3, [pc, #4]	; (1de64 <radio_tmr_tifs_base_get+0x8>)
   1de5e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1de62:	4770      	bx	lr
   1de64:	40008000 	.word	0x40008000

0001de68 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1de68:	4b16      	ldr	r3, [pc, #88]	; (1dec4 <radio_ccm_rx_pkt_set+0x5c>)
{
   1de6a:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1de6c:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1de6e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1de70:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1de74:	4e14      	ldr	r6, [pc, #80]	; (1dec8 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1de76:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1de7a:	4d14      	ldr	r5, [pc, #80]	; (1decc <radio_ccm_rx_pkt_set+0x64>)
   1de7c:	2902      	cmp	r1, #2
   1de7e:	bf0c      	ite	eq
   1de80:	4629      	moveq	r1, r5
   1de82:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1de84:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1de88:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1de8c:	4810      	ldr	r0, [pc, #64]	; (1ded0 <radio_ccm_rx_pkt_set+0x68>)
   1de8e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1de92:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1de96:	4a0f      	ldr	r2, [pc, #60]	; (1ded4 <radio_ccm_rx_pkt_set+0x6c>)
   1de98:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1de9c:	490e      	ldr	r1, [pc, #56]	; (1ded8 <radio_ccm_rx_pkt_set+0x70>)
   1de9e:	4a0f      	ldr	r2, [pc, #60]	; (1dedc <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   1dea0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1dea4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1dea8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1deac:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1deb0:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   1deb4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1deb8:	2140      	movs	r1, #64	; 0x40
   1deba:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1debe:	2201      	movs	r2, #1
   1dec0:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(HAL_TRIGGER_CRYPT_PPI_ENABLE);

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1dec2:	bd70      	pop	{r4, r5, r6, pc}
   1dec4:	4000f000 	.word	0x4000f000
   1dec8:	01000001 	.word	0x01000001
   1decc:	01010001 	.word	0x01010001
   1ded0:	20001f04 	.word	0x20001f04
   1ded4:	20001df4 	.word	0x20001df4
   1ded8:	40001104 	.word	0x40001104
   1dedc:	4001f000 	.word	0x4001f000

0001dee0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1dee0:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1dee2:	4b0e      	ldr	r3, [pc, #56]	; (1df1c <radio_ccm_tx_pkt_set+0x3c>)
   1dee4:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1dee6:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1dee8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1deec:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1def0:	4c0b      	ldr	r4, [pc, #44]	; (1df20 <radio_ccm_tx_pkt_set+0x40>)
   1def2:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1def6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1defa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1defe:	4809      	ldr	r0, [pc, #36]	; (1df24 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1df00:	4909      	ldr	r1, [pc, #36]	; (1df28 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1df02:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1df06:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1df0a:	2101      	movs	r1, #1
   1df0c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1df10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1df14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1df18:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1df1a:	bd10      	pop	{r4, pc}
   1df1c:	4000f000 	.word	0x4000f000
   1df20:	01010000 	.word	0x01010000
   1df24:	20001f04 	.word	0x20001f04
   1df28:	20001df4 	.word	0x20001df4

0001df2c <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1df2c:	4b0c      	ldr	r3, [pc, #48]	; (1df60 <radio_ccm_is_done+0x34>)
   1df2e:	2202      	movs	r2, #2
   1df30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1df34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1df38:	b16a      	cbz	r2, 1df56 <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1df3a:	2202      	movs	r2, #2
   1df3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1df40:	4a08      	ldr	r2, [pc, #32]	; (1df64 <radio_ccm_is_done+0x38>)
   1df42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1df46:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1df4a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1df4e:	fab0 f080 	clz	r0, r0
   1df52:	0940      	lsrs	r0, r0, #5
   1df54:	4770      	bx	lr
		__WFE();
   1df56:	bf20      	wfe
		__SEV();
   1df58:	bf40      	sev
		__WFE();
   1df5a:	bf20      	wfe
   1df5c:	e7ea      	b.n	1df34 <radio_ccm_is_done+0x8>
   1df5e:	bf00      	nop
   1df60:	4000f000 	.word	0x4000f000
   1df64:	e000e100 	.word	0xe000e100

0001df68 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1df68:	4b03      	ldr	r3, [pc, #12]	; (1df78 <radio_ccm_mic_is_valid+0x10>)
   1df6a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1df6e:	3000      	adds	r0, #0
   1df70:	bf18      	it	ne
   1df72:	2001      	movne	r0, #1
   1df74:	4770      	bx	lr
   1df76:	bf00      	nop
   1df78:	4000f000 	.word	0x4000f000

0001df7c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   1df7c:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1df7e:	4c13      	ldr	r4, [pc, #76]	; (1dfcc <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1df80:	4d13      	ldr	r5, [pc, #76]	; (1dfd0 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1df82:	2303      	movs	r3, #3
   1df84:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1df88:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   1df8c:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1df90:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   1df94:	3b01      	subs	r3, #1
   1df96:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   1df9a:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   1df9c:	4b0d      	ldr	r3, [pc, #52]	; (1dfd4 <radio_ar_configure+0x58>)
   1df9e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1dfa2:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   1dfa4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1dfa8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1dfac:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   1dfb0:	f7ff fe44 	bl	1dc3c <radio_bc_configure>
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1dfb4:	4b08      	ldr	r3, [pc, #32]	; (1dfd8 <radio_ar_configure+0x5c>)
   1dfb6:	4a09      	ldr	r2, [pc, #36]	; (1dfdc <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1dfb8:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
   1dfbc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   1dfc0:	2240      	movs	r2, #64	; 0x40
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1dfc2:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1dfc6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	nrf_ppi_channel_endpoint_setup(HAL_TRIGGER_AAR_PPI,
				       HAL_TRIGGER_AAR_PPI_EVT,
				       HAL_TRIGGER_AAR_PPI_TASK);
	nrf_ppi_channels_enable(HAL_TRIGGER_AAR_PPI_ENABLE);
}
   1dfca:	bd38      	pop	{r3, r4, r5, pc}
   1dfcc:	4000f000 	.word	0x4000f000
   1dfd0:	40001000 	.word	0x40001000
   1dfd4:	20001df0 	.word	0x20001df0
   1dfd8:	4001f000 	.word	0x4001f000
   1dfdc:	40001128 	.word	0x40001128

0001dfe0 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1dfe0:	4b01      	ldr	r3, [pc, #4]	; (1dfe8 <radio_ar_match_get+0x8>)
   1dfe2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1dfe6:	4770      	bx	lr
   1dfe8:	4000f000 	.word	0x4000f000

0001dfec <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1dfec:	4a04      	ldr	r2, [pc, #16]	; (1e000 <radio_ar_status_reset+0x14>)
   1dfee:	2300      	movs	r3, #0
   1dff0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1dff4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1dff8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1dffc:	4770      	bx	lr
   1dffe:	bf00      	nop
   1e000:	40001000 	.word	0x40001000

0001e004 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1e004:	4b08      	ldr	r3, [pc, #32]	; (1e028 <radio_ar_has_match+0x24>)
   1e006:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1e00a:	b160      	cbz	r0, 1e026 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1e00c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1e010:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1e014:	b138      	cbz	r0, 1e026 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1e016:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1e01a:	b120      	cbz	r0, 1e026 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1e01c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1e020:	fab0 f080 	clz	r0, r0
   1e024:	0940      	lsrs	r0, r0, #5
}
   1e026:	4770      	bx	lr
   1e028:	40001000 	.word	0x40001000

0001e02c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1e02c:	2901      	cmp	r1, #1
{
   1e02e:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1e030:	d01a      	beq.n	1e068 <mayfly_enable_cb+0x3c>
   1e032:	4b12      	ldr	r3, [pc, #72]	; (1e07c <mayfly_enable_cb+0x50>)
   1e034:	681b      	ldr	r3, [r3, #0]
   1e036:	075b      	lsls	r3, r3, #29
   1e038:	d010      	beq.n	1e05c <mayfly_enable_cb+0x30>
   1e03a:	2301      	movs	r3, #1
   1e03c:	f04f 0200 	mov.w	r2, #0
   1e040:	f363 0202 	bfi	r2, r3, #0, #3
   1e044:	490e      	ldr	r1, [pc, #56]	; (1e080 <mayfly_enable_cb+0x54>)
   1e046:	4b0f      	ldr	r3, [pc, #60]	; (1e084 <mayfly_enable_cb+0x58>)
   1e048:	480f      	ldr	r0, [pc, #60]	; (1e088 <mayfly_enable_cb+0x5c>)
   1e04a:	1a5b      	subs	r3, r3, r1
   1e04c:	f36f 02c5 	bfc	r2, #3, #3
   1e050:	08db      	lsrs	r3, r3, #3
   1e052:	f363 128f 	bfi	r2, r3, #6, #10
   1e056:	490d      	ldr	r1, [pc, #52]	; (1e08c <mayfly_enable_cb+0x60>)
   1e058:	f7e3 fe7e 	bl	1d58 <log_1>
   1e05c:	4040      	eors	r0, r0
   1e05e:	f380 8811 	msr	BASEPRI, r0
   1e062:	f04f 0004 	mov.w	r0, #4
   1e066:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1e068:	2018      	movs	r0, #24
	if (enable) {
   1e06a:	b11a      	cbz	r2, 1e074 <mayfly_enable_cb+0x48>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   1e06c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI4_IRQn);
   1e070:	f7e7 bc4c 	b.w	590c <_arch_irq_enable>
}
   1e074:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI4_IRQn);
   1e078:	f7e7 bc58 	b.w	592c <_arch_irq_disable>
   1e07c:	2000d73c 	.word	0x2000d73c
   1e080:	0002cff8 	.word	0x0002cff8
   1e084:	0002d050 	.word	0x0002d050
   1e088:	00031cf5 	.word	0x00031cf5
   1e08c:	00031cc6 	.word	0x00031cc6

0001e090 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   1e090:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   1e092:	b1e1      	cbz	r1, 1e0ce <mayfly_is_enabled+0x3e>
   1e094:	2901      	cmp	r1, #1
   1e096:	d01f      	beq.n	1e0d8 <mayfly_is_enabled+0x48>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   1e098:	4b10      	ldr	r3, [pc, #64]	; (1e0dc <mayfly_is_enabled+0x4c>)
   1e09a:	681b      	ldr	r3, [r3, #0]
   1e09c:	075b      	lsls	r3, r3, #29
   1e09e:	d010      	beq.n	1e0c2 <mayfly_is_enabled+0x32>
   1e0a0:	2301      	movs	r3, #1
   1e0a2:	f04f 0200 	mov.w	r2, #0
   1e0a6:	f363 0202 	bfi	r2, r3, #0, #3
   1e0aa:	490d      	ldr	r1, [pc, #52]	; (1e0e0 <mayfly_is_enabled+0x50>)
   1e0ac:	4b0d      	ldr	r3, [pc, #52]	; (1e0e4 <mayfly_is_enabled+0x54>)
   1e0ae:	480e      	ldr	r0, [pc, #56]	; (1e0e8 <mayfly_is_enabled+0x58>)
   1e0b0:	1a5b      	subs	r3, r3, r1
   1e0b2:	f36f 02c5 	bfc	r2, #3, #3
   1e0b6:	08db      	lsrs	r3, r3, #3
   1e0b8:	f363 128f 	bfi	r2, r3, #6, #10
   1e0bc:	490b      	ldr	r1, [pc, #44]	; (1e0ec <mayfly_is_enabled+0x5c>)
   1e0be:	f7e3 fe4b 	bl	1d58 <log_1>
   1e0c2:	4040      	eors	r0, r0
   1e0c4:	f380 8811 	msr	BASEPRI, r0
   1e0c8:	f04f 0004 	mov.w	r0, #4
   1e0cc:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1e0ce:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   1e0d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI4_IRQn);
   1e0d4:	f7e7 bc3e 	b.w	5954 <_arch_irq_is_enabled>
   1e0d8:	2018      	movs	r0, #24
   1e0da:	e7f9      	b.n	1e0d0 <mayfly_is_enabled+0x40>
   1e0dc:	2000d73c 	.word	0x2000d73c
   1e0e0:	0002cff8 	.word	0x0002cff8
   1e0e4:	0002d050 	.word	0x0002d050
   1e0e8:	0002f0b9 	.word	0x0002f0b9
   1e0ec:	00031cd7 	.word	0x00031cd7

0001e0f0 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1e0f0:	4288      	cmp	r0, r1
   1e0f2:	d00a      	beq.n	1e10a <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1e0f4:	b918      	cbnz	r0, 1e0fe <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1e0f6:	1e4b      	subs	r3, r1, #1
   1e0f8:	4258      	negs	r0, r3
   1e0fa:	4158      	adcs	r0, r3
   1e0fc:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1e0fe:	2801      	cmp	r0, #1
   1e100:	d105      	bne.n	1e10e <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1e102:	fab1 f081 	clz	r0, r1
   1e106:	0940      	lsrs	r0, r0, #5
   1e108:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1e10a:	2001      	movs	r0, #1
   1e10c:	4770      	bx	lr
   1e10e:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   1e110:	4770      	bx	lr
	...

0001e114 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   1e114:	b508      	push	{r3, lr}
   1e116:	4b13      	ldr	r3, [pc, #76]	; (1e164 <mayfly_pend+0x50>)
	(void)caller_id;

	switch (callee_id) {
   1e118:	b1e1      	cbz	r1, 1e154 <mayfly_pend+0x40>
   1e11a:	2901      	cmp	r1, #1
   1e11c:	d01f      	beq.n	1e15e <mayfly_pend+0x4a>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1e11e:	4b12      	ldr	r3, [pc, #72]	; (1e168 <mayfly_pend+0x54>)
   1e120:	681b      	ldr	r3, [r3, #0]
   1e122:	075b      	lsls	r3, r3, #29
   1e124:	d010      	beq.n	1e148 <mayfly_pend+0x34>
   1e126:	2301      	movs	r3, #1
   1e128:	f04f 0200 	mov.w	r2, #0
   1e12c:	f363 0202 	bfi	r2, r3, #0, #3
   1e130:	490e      	ldr	r1, [pc, #56]	; (1e16c <mayfly_pend+0x58>)
   1e132:	4b0f      	ldr	r3, [pc, #60]	; (1e170 <mayfly_pend+0x5c>)
   1e134:	480f      	ldr	r0, [pc, #60]	; (1e174 <mayfly_pend+0x60>)
   1e136:	1a5b      	subs	r3, r3, r1
   1e138:	f36f 02c5 	bfc	r2, #3, #3
   1e13c:	08db      	lsrs	r3, r3, #3
   1e13e:	f363 128f 	bfi	r2, r3, #6, #10
   1e142:	490d      	ldr	r1, [pc, #52]	; (1e178 <mayfly_pend+0x64>)
   1e144:	f7e3 fe08 	bl	1d58 <log_1>
   1e148:	4040      	eors	r0, r0
   1e14a:	f380 8811 	msr	BASEPRI, r0
   1e14e:	f04f 0004 	mov.w	r0, #4
   1e152:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e154:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1e158:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   1e15c:	bd08      	pop	{r3, pc}
   1e15e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1e162:	e7f9      	b.n	1e158 <mayfly_pend+0x44>
   1e164:	e000e100 	.word	0xe000e100
   1e168:	2000d73c 	.word	0x2000d73c
   1e16c:	0002cff8 	.word	0x0002cff8
   1e170:	0002d050 	.word	0x0002d050
   1e174:	0002f0b9 	.word	0x0002f0b9
   1e178:	00031ce9 	.word	0x00031ce9

0001e17c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1e17c:	2803      	cmp	r0, #3
{
   1e17e:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1e180:	d91a      	bls.n	1e1b8 <hal_ticker_instance0_caller_id_get+0x3c>
   1e182:	4b19      	ldr	r3, [pc, #100]	; (1e1e8 <hal_ticker_instance0_caller_id_get+0x6c>)
   1e184:	681b      	ldr	r3, [r3, #0]
   1e186:	075a      	lsls	r2, r3, #29
   1e188:	d010      	beq.n	1e1ac <hal_ticker_instance0_caller_id_get+0x30>
   1e18a:	2301      	movs	r3, #1
   1e18c:	f04f 0200 	mov.w	r2, #0
   1e190:	f363 0202 	bfi	r2, r3, #0, #3
   1e194:	4915      	ldr	r1, [pc, #84]	; (1e1ec <hal_ticker_instance0_caller_id_get+0x70>)
   1e196:	4b16      	ldr	r3, [pc, #88]	; (1e1f0 <hal_ticker_instance0_caller_id_get+0x74>)
   1e198:	4816      	ldr	r0, [pc, #88]	; (1e1f4 <hal_ticker_instance0_caller_id_get+0x78>)
   1e19a:	1a5b      	subs	r3, r3, r1
   1e19c:	f36f 02c5 	bfc	r2, #3, #3
   1e1a0:	08db      	lsrs	r3, r3, #3
   1e1a2:	4915      	ldr	r1, [pc, #84]	; (1e1f8 <hal_ticker_instance0_caller_id_get+0x7c>)
   1e1a4:	f363 128f 	bfi	r2, r3, #6, #10

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1e1a8:	f7e3 fdd6 	bl	1d58 <log_1>
   1e1ac:	4040      	eors	r0, r0
   1e1ae:	f380 8811 	msr	BASEPRI, r0
   1e1b2:	f04f 0004 	mov.w	r0, #4
   1e1b6:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1e1b8:	4b10      	ldr	r3, [pc, #64]	; (1e1fc <hal_ticker_instance0_caller_id_get+0x80>)
   1e1ba:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1e1bc:	b998      	cbnz	r0, 1e1e6 <hal_ticker_instance0_caller_id_get+0x6a>
   1e1be:	4b0a      	ldr	r3, [pc, #40]	; (1e1e8 <hal_ticker_instance0_caller_id_get+0x6c>)
   1e1c0:	681b      	ldr	r3, [r3, #0]
   1e1c2:	075b      	lsls	r3, r3, #29
   1e1c4:	d0f2      	beq.n	1e1ac <hal_ticker_instance0_caller_id_get+0x30>
   1e1c6:	2301      	movs	r3, #1
   1e1c8:	f04f 0200 	mov.w	r2, #0
   1e1cc:	f363 0202 	bfi	r2, r3, #0, #3
   1e1d0:	4906      	ldr	r1, [pc, #24]	; (1e1ec <hal_ticker_instance0_caller_id_get+0x70>)
   1e1d2:	4b07      	ldr	r3, [pc, #28]	; (1e1f0 <hal_ticker_instance0_caller_id_get+0x74>)
   1e1d4:	1a5b      	subs	r3, r3, r1
   1e1d6:	f360 02c5 	bfi	r2, r0, #3, #3
   1e1da:	08db      	lsrs	r3, r3, #3
   1e1dc:	f363 128f 	bfi	r2, r3, #6, #10
   1e1e0:	4905      	ldr	r1, [pc, #20]	; (1e1f8 <hal_ticker_instance0_caller_id_get+0x7c>)
   1e1e2:	4807      	ldr	r0, [pc, #28]	; (1e200 <hal_ticker_instance0_caller_id_get+0x84>)
   1e1e4:	e7e0      	b.n	1e1a8 <hal_ticker_instance0_caller_id_get+0x2c>

	return caller_id;
}
   1e1e6:	bd08      	pop	{r3, pc}
   1e1e8:	2000d740 	.word	0x2000d740
   1e1ec:	0002cff8 	.word	0x0002cff8
   1e1f0:	0002d058 	.word	0x0002d058
   1e1f4:	00031d6f 	.word	0x00031d6f
   1e1f8:	00031d2d 	.word	0x00031d2d
   1e1fc:	00031d6b 	.word	0x00031d6b
   1e200:	00031da4 	.word	0x00031da4

0001e204 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1e204:	3802      	subs	r0, #2
{
   1e206:	b510      	push	{r4, lr}
   1e208:	461c      	mov	r4, r3
	switch (caller_id) {
   1e20a:	2803      	cmp	r0, #3
   1e20c:	d817      	bhi.n	1e23e <hal_ticker_instance0_sched+0x3a>
   1e20e:	e8df f000 	tbb	[pc, r0]
   1e212:	0c02      	.short	0x0c02
   1e214:	3a12      	.short	0x3a12
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1e216:	2903      	cmp	r1, #3
   1e218:	d111      	bne.n	1e23e <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1e21a:	4b1e      	ldr	r3, [pc, #120]	; (1e294 <hal_ticker_instance0_sched+0x90>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1e21c:	2100      	movs	r1, #0
			m.param = instance;
   1e21e:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1e220:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1e222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1e226:	f7f2 ba25 	b.w	10674 <mayfly_enqueue>
		switch (callee_id) {
   1e22a:	2904      	cmp	r1, #4
   1e22c:	d107      	bne.n	1e23e <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1e22e:	4b1a      	ldr	r3, [pc, #104]	; (1e298 <hal_ticker_instance0_sched+0x94>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1e230:	2101      	movs	r1, #1
			m.param = instance;
   1e232:	609c      	str	r4, [r3, #8]
   1e234:	e7f4      	b.n	1e220 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   1e236:	2903      	cmp	r1, #3
   1e238:	d01c      	beq.n	1e274 <hal_ticker_instance0_sched+0x70>
   1e23a:	2904      	cmp	r1, #4
   1e23c:	d01f      	beq.n	1e27e <hal_ticker_instance0_sched+0x7a>
		LL_ASSERT(0);
   1e23e:	4b17      	ldr	r3, [pc, #92]	; (1e29c <hal_ticker_instance0_sched+0x98>)
   1e240:	681b      	ldr	r3, [r3, #0]
   1e242:	075b      	lsls	r3, r3, #29
   1e244:	d010      	beq.n	1e268 <hal_ticker_instance0_sched+0x64>
   1e246:	2301      	movs	r3, #1
   1e248:	f04f 0200 	mov.w	r2, #0
   1e24c:	f363 0202 	bfi	r2, r3, #0, #3
   1e250:	4913      	ldr	r1, [pc, #76]	; (1e2a0 <hal_ticker_instance0_sched+0x9c>)
   1e252:	4b14      	ldr	r3, [pc, #80]	; (1e2a4 <hal_ticker_instance0_sched+0xa0>)
   1e254:	4814      	ldr	r0, [pc, #80]	; (1e2a8 <hal_ticker_instance0_sched+0xa4>)
   1e256:	1a5b      	subs	r3, r3, r1
   1e258:	f36f 02c5 	bfc	r2, #3, #3
   1e25c:	08db      	lsrs	r3, r3, #3
   1e25e:	f363 128f 	bfi	r2, r3, #6, #10
   1e262:	4912      	ldr	r1, [pc, #72]	; (1e2ac <hal_ticker_instance0_sched+0xa8>)
   1e264:	f7e3 fd78 	bl	1d58 <log_1>
   1e268:	4040      	eors	r0, r0
   1e26a:	f380 8811 	msr	BASEPRI, r0
   1e26e:	f04f 0004 	mov.w	r0, #4
   1e272:	df02      	svc	2
			m.param = instance;
   1e274:	4b0e      	ldr	r3, [pc, #56]	; (1e2b0 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1e276:	2100      	movs	r1, #0
			m.param = instance;
   1e278:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1e27a:	2001      	movs	r0, #1
   1e27c:	e7d1      	b.n	1e222 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1e27e:	4b0d      	ldr	r3, [pc, #52]	; (1e2b4 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1e280:	2101      	movs	r1, #1
			m.param = instance;
   1e282:	609c      	str	r4, [r3, #8]
   1e284:	e7f9      	b.n	1e27a <hal_ticker_instance0_sched+0x76>
		switch (callee_id) {
   1e286:	2904      	cmp	r1, #4
   1e288:	d1d9      	bne.n	1e23e <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1e28a:	4b0b      	ldr	r3, [pc, #44]	; (1e2b8 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1e28c:	2101      	movs	r1, #1
			m.param = instance;
   1e28e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1e290:	2003      	movs	r0, #3
   1e292:	e7c6      	b.n	1e222 <hal_ticker_instance0_sched+0x1e>
   1e294:	2000d0c0 	.word	0x2000d0c0
   1e298:	2000d0d0 	.word	0x2000d0d0
   1e29c:	2000d740 	.word	0x2000d740
   1e2a0:	0002cff8 	.word	0x0002cff8
   1e2a4:	0002d058 	.word	0x0002d058
   1e2a8:	0002f0b9 	.word	0x0002f0b9
   1e2ac:	00031d50 	.word	0x00031d50
   1e2b0:	2000d0e0 	.word	0x2000d0e0
   1e2b4:	2000d0f0 	.word	0x2000d0f0
   1e2b8:	2000d100 	.word	0x2000d100

0001e2bc <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   1e2bc:	4601      	mov	r1, r0
   1e2be:	2000      	movs	r0, #0
   1e2c0:	f7ff ba1a 	b.w	1d6f8 <cntr_cmp_set>

0001e2c4 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1e2c4:	4770      	bx	lr
	...

0001e2c8 <net_buf_pool_get>:
}
   1e2c8:	4b01      	ldr	r3, [pc, #4]	; (1e2d0 <net_buf_pool_get+0x8>)
   1e2ca:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1e2ce:	4770      	bx	lr
   1e2d0:	2000d908 	.word	0x2000d908

0001e2d4 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e2d4:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1e2d6:	4b04      	ldr	r3, [pc, #16]	; (1e2e8 <net_buf_id+0x14>)
   1e2d8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1e2dc:	69db      	ldr	r3, [r3, #28]
   1e2de:	1ac0      	subs	r0, r0, r3
}
   1e2e0:	4b02      	ldr	r3, [pc, #8]	; (1e2ec <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1e2e2:	10c0      	asrs	r0, r0, #3
}
   1e2e4:	4358      	muls	r0, r3
   1e2e6:	4770      	bx	lr
   1e2e8:	2000d908 	.word	0x2000d908
   1e2ec:	aaaaaaab 	.word	0xaaaaaaab

0001e2f0 <fixed_data_alloc>:
{
   1e2f0:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e2f2:	4b09      	ldr	r3, [pc, #36]	; (1e318 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e2f4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e2f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   1e2fa:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e2fc:	699b      	ldr	r3, [r3, #24]
   1e2fe:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   1e300:	6823      	ldr	r3, [r4, #0]
   1e302:	429a      	cmp	r2, r3
   1e304:	bf94      	ite	ls
   1e306:	600a      	strls	r2, [r1, #0]
   1e308:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1e30a:	f7ff ffe3 	bl	1e2d4 <net_buf_id>
   1e30e:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1e312:	fb02 3000 	mla	r0, r2, r0, r3
   1e316:	bd10      	pop	{r4, pc}
   1e318:	2000d908 	.word	0x2000d908

0001e31c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   1e31c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e320:	4605      	mov	r5, r0
   1e322:	9101      	str	r1, [sp, #4]
   1e324:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1e326:	f00e fbab 	bl	2ca80 <_impl_k_uptime_get_32>
   1e32a:	4607      	mov	r7, r0
	__asm__ volatile(
   1e32c:	f04f 0320 	mov.w	r3, #32
   1e330:	f3ef 8811 	mrs	r8, BASEPRI
   1e334:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1e338:	8a6b      	ldrh	r3, [r5, #18]
   1e33a:	2b00      	cmp	r3, #0
   1e33c:	d03d      	beq.n	1e3ba <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1e33e:	8a2a      	ldrh	r2, [r5, #16]
   1e340:	429a      	cmp	r2, r3
   1e342:	d92a      	bls.n	1e39a <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1e344:	2100      	movs	r1, #0
   1e346:	4628      	mov	r0, r5
   1e348:	f00d fd1e 	bl	2bd88 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1e34c:	4604      	mov	r4, r0
   1e34e:	b320      	cbz	r0, 1e39a <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1e350:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1e354:	9b01      	ldr	r3, [sp, #4]
   1e356:	2b00      	cmp	r3, #0
   1e358:	d03c      	beq.n	1e3d4 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1e35a:	1c73      	adds	r3, r6, #1
   1e35c:	2b01      	cmp	r3, #1
   1e35e:	d906      	bls.n	1e36e <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1e360:	f00e fb8e 	bl	2ca80 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1e364:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   1e366:	42b0      	cmp	r0, r6
   1e368:	bf94      	ite	ls
   1e36a:	1a36      	subls	r6, r6, r0
   1e36c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e36e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1e370:	4f1e      	ldr	r7, [pc, #120]	; (1e3ec <net_buf_alloc_len+0xd0>)
   1e372:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1e376:	4632      	mov	r2, r6
   1e378:	699b      	ldr	r3, [r3, #24]
   1e37a:	681b      	ldr	r3, [r3, #0]
   1e37c:	a901      	add	r1, sp, #4
   1e37e:	681b      	ldr	r3, [r3, #0]
   1e380:	4620      	mov	r0, r4
   1e382:	4798      	blx	r3
   1e384:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1e386:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1e388:	bb28      	cbnz	r0, 1e3d6 <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   1e38a:	79a0      	ldrb	r0, [r4, #6]
   1e38c:	4621      	mov	r1, r4
   1e38e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1e392:	f00d fcda 	bl	2bd4a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1e396:	462c      	mov	r4, r5
   1e398:	e018      	b.n	1e3cc <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   1e39a:	8a6b      	ldrh	r3, [r5, #18]
   1e39c:	1e5a      	subs	r2, r3, #1
   1e39e:	826a      	strh	r2, [r5, #18]
   1e3a0:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1e3a4:	8a2c      	ldrh	r4, [r5, #16]
   1e3a6:	1ae4      	subs	r4, r4, r3
   1e3a8:	69eb      	ldr	r3, [r5, #28]
   1e3aa:	2218      	movs	r2, #24
   1e3ac:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1e3b0:	4b0e      	ldr	r3, [pc, #56]	; (1e3ec <net_buf_alloc_len+0xd0>)
   1e3b2:	1aed      	subs	r5, r5, r3
   1e3b4:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1e3b6:	71a5      	strb	r5, [r4, #6]
		goto success;
   1e3b8:	e7cc      	b.n	1e354 <net_buf_alloc_len+0x38>
   1e3ba:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1e3be:	4631      	mov	r1, r6
   1e3c0:	4628      	mov	r0, r5
   1e3c2:	f00d fce1 	bl	2bd88 <_impl_k_queue_get>
	if (!buf) {
   1e3c6:	4604      	mov	r4, r0
   1e3c8:	2800      	cmp	r0, #0
   1e3ca:	d1c3      	bne.n	1e354 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1e3cc:	4620      	mov	r0, r4
   1e3ce:	b002      	add	sp, #8
   1e3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1e3d4:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1e3d6:	2300      	movs	r3, #0
   1e3d8:	6023      	str	r3, [r4, #0]
   1e3da:	2201      	movs	r2, #1
   1e3dc:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
   1e3de:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1e3e0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1e3e2:	6923      	ldr	r3, [r4, #16]
   1e3e4:	81e2      	strh	r2, [r4, #14]
   1e3e6:	60a3      	str	r3, [r4, #8]
	return buf;
   1e3e8:	e7f0      	b.n	1e3cc <net_buf_alloc_len+0xb0>
   1e3ea:	bf00      	nop
   1e3ec:	2000d908 	.word	0x2000d908

0001e3f0 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e3f0:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1e3f2:	685b      	ldr	r3, [r3, #4]
   1e3f4:	460a      	mov	r2, r1
   1e3f6:	6819      	ldr	r1, [r3, #0]
   1e3f8:	f7ff bf90 	b.w	1e31c <net_buf_alloc_len>

0001e3fc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1e3fc:	b570      	push	{r4, r5, r6, lr}
   1e3fe:	4606      	mov	r6, r0
   1e400:	f00d fcc2 	bl	2bd88 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1e404:	4605      	mov	r5, r0
   1e406:	b128      	cbz	r0, 1e414 <net_buf_get+0x18>
   1e408:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e40a:	7963      	ldrb	r3, [r4, #5]
   1e40c:	f013 0301 	ands.w	r3, r3, #1
   1e410:	d102      	bne.n	1e418 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1e412:	6023      	str	r3, [r4, #0]

	return buf;
}
   1e414:	4628      	mov	r0, r5
   1e416:	bd70      	pop	{r4, r5, r6, pc}
   1e418:	2100      	movs	r1, #0
   1e41a:	4630      	mov	r0, r6
   1e41c:	f00d fcb4 	bl	2bd88 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1e420:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1e422:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1e424:	f023 0301 	bic.w	r3, r3, #1
   1e428:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e42a:	4604      	mov	r4, r0
   1e42c:	e7ed      	b.n	1e40a <net_buf_get+0xe>

0001e42e <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1e42e:	6883      	ldr	r3, [r0, #8]
   1e430:	4419      	add	r1, r3
   1e432:	6001      	str	r1, [r0, #0]
}
   1e434:	4770      	bx	lr

0001e436 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1e436:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1e438:	460a      	mov	r2, r1
   1e43a:	6814      	ldr	r4, [r2, #0]
   1e43c:	b914      	cbnz	r4, 1e444 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   1e43e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1e440:	f00d bc88 	b.w	2bd54 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1e444:	7953      	ldrb	r3, [r2, #5]
   1e446:	f043 0301 	orr.w	r3, r3, #1
   1e44a:	7153      	strb	r3, [r2, #5]
   1e44c:	4622      	mov	r2, r4
   1e44e:	e7f4      	b.n	1e43a <net_buf_put+0x4>

0001e450 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e452:	4d15      	ldr	r5, [pc, #84]	; (1e4a8 <net_buf_unref+0x58>)
   1e454:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1e456:	2600      	movs	r6, #0
	while (buf) {
   1e458:	b904      	cbnz	r4, 1e45c <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1e45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   1e45c:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1e45e:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   1e460:	3b01      	subs	r3, #1
   1e462:	b2db      	uxtb	r3, r3
   1e464:	7123      	strb	r3, [r4, #4]
   1e466:	2b00      	cmp	r3, #0
   1e468:	d1f7      	bne.n	1e45a <net_buf_unref+0xa>
		if (buf->__buf) {
   1e46a:	6921      	ldr	r1, [r4, #16]
   1e46c:	b159      	cbz	r1, 1e486 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1e46e:	7963      	ldrb	r3, [r4, #5]
   1e470:	079b      	lsls	r3, r3, #30
   1e472:	d407      	bmi.n	1e484 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   1e474:	79a3      	ldrb	r3, [r4, #6]
   1e476:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1e47a:	4620      	mov	r0, r4
   1e47c:	699b      	ldr	r3, [r3, #24]
   1e47e:	681b      	ldr	r3, [r3, #0]
   1e480:	689b      	ldr	r3, [r3, #8]
   1e482:	4798      	blx	r3
			buf->__buf = NULL;
   1e484:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1e486:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1e488:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1e48a:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   1e48e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1e490:	695b      	ldr	r3, [r3, #20]
   1e492:	b11b      	cbz	r3, 1e49c <net_buf_unref+0x4c>
			pool->destroy(buf);
   1e494:	4620      	mov	r0, r4
   1e496:	4798      	blx	r3
{
   1e498:	463c      	mov	r4, r7
   1e49a:	e7dd      	b.n	1e458 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   1e49c:	4621      	mov	r1, r4
   1e49e:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1e4a2:	f00d fc52 	bl	2bd4a <k_queue_prepend>
   1e4a6:	e7f7      	b.n	1e498 <net_buf_unref+0x48>
   1e4a8:	2000d908 	.word	0x2000d908

0001e4ac <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1e4ac:	7903      	ldrb	r3, [r0, #4]
   1e4ae:	3301      	adds	r3, #1
   1e4b0:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1e4b2:	4770      	bx	lr

0001e4b4 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1e4b4:	6803      	ldr	r3, [r0, #0]
   1e4b6:	b903      	cbnz	r3, 1e4ba <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   1e4b8:	4770      	bx	lr
   1e4ba:	4618      	mov	r0, r3
   1e4bc:	e7fa      	b.n	1e4b4 <net_buf_frag_last>

0001e4be <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1e4be:	6802      	ldr	r2, [r0, #0]
{
   1e4c0:	b510      	push	{r4, lr}
	if (parent->frags) {
   1e4c2:	b11a      	cbz	r2, 1e4cc <net_buf_frag_insert+0xe>
   1e4c4:	460b      	mov	r3, r1
	while (buf->frags) {
   1e4c6:	681c      	ldr	r4, [r3, #0]
   1e4c8:	b914      	cbnz	r4, 1e4d0 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1e4ca:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1e4cc:	6001      	str	r1, [r0, #0]
}
   1e4ce:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   1e4d0:	4623      	mov	r3, r4
   1e4d2:	e7f8      	b.n	1e4c6 <net_buf_frag_insert+0x8>

0001e4d4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1e4d4:	b510      	push	{r4, lr}
	NET_BUF_ASSERT(frag);

	if (!head) {
   1e4d6:	4604      	mov	r4, r0
   1e4d8:	b928      	cbnz	r0, 1e4e6 <net_buf_frag_add+0x12>
	buf->ref++;
   1e4da:	790b      	ldrb	r3, [r1, #4]
   1e4dc:	3301      	adds	r3, #1
   1e4de:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1e4e0:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1e4e2:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   1e4e4:	4618      	mov	r0, r3
   1e4e6:	6803      	ldr	r3, [r0, #0]
   1e4e8:	2b00      	cmp	r3, #0
   1e4ea:	d1fb      	bne.n	1e4e4 <net_buf_frag_add+0x10>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1e4ec:	f7ff ffe7 	bl	1e4be <net_buf_frag_insert>
   1e4f0:	4620      	mov	r0, r4
   1e4f2:	e7f6      	b.n	1e4e2 <net_buf_frag_add+0xe>

0001e4f4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1e4f4:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1e4f6:	b108      	cbz	r0, 1e4fc <net_buf_frag_del+0x8>
   1e4f8:	680b      	ldr	r3, [r1, #0]
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1e4fa:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1e4fc:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1e4fe:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1e500:	4608      	mov	r0, r1
	frag->frags = NULL;
   1e502:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1e504:	f7ff ffa4 	bl	1e450 <net_buf_unref>
#endif

	return next_frag;
}
   1e508:	4620      	mov	r0, r4
   1e50a:	bd10      	pop	{r4, pc}

0001e50c <net_buf_simple_add>:
	return buf->data + buf->len;
   1e50c:	8883      	ldrh	r3, [r0, #4]
   1e50e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1e510:	4419      	add	r1, r3
   1e512:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1e514:	18d0      	adds	r0, r2, r3
   1e516:	4770      	bx	lr

0001e518 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1e518:	b430      	push	{r4, r5}
   1e51a:	8883      	ldrh	r3, [r0, #4]
   1e51c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1e51e:	189d      	adds	r5, r3, r2
   1e520:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1e522:	18e0      	adds	r0, r4, r3
}
   1e524:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1e526:	f7e7 bcaf 	b.w	5e88 <memcpy>

0001e52a <net_buf_simple_add_u8>:
   1e52a:	8883      	ldrh	r3, [r0, #4]
   1e52c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1e52e:	b510      	push	{r4, lr}
	buf->len += len;
   1e530:	1c5c      	adds	r4, r3, #1
   1e532:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1e534:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1e536:	18d0      	adds	r0, r2, r3
   1e538:	bd10      	pop	{r4, pc}

0001e53a <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1e53a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e53c:	ab02      	add	r3, sp, #8
   1e53e:	8884      	ldrh	r4, [r0, #4]
   1e540:	f823 1d02 	strh.w	r1, [r3, #-2]!
   1e544:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1e546:	1ca2      	adds	r2, r4, #2
   1e548:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1e54a:	4619      	mov	r1, r3
   1e54c:	2202      	movs	r2, #2
   1e54e:	1928      	adds	r0, r5, r4
   1e550:	f7e7 fc9a 	bl	5e88 <memcpy>
}
   1e554:	b003      	add	sp, #12
   1e556:	bd30      	pop	{r4, r5, pc}

0001e558 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1e558:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1e55a:	020b      	lsls	r3, r1, #8
   1e55c:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   1e560:	a902      	add	r1, sp, #8
   1e562:	6804      	ldr	r4, [r0, #0]
   1e564:	f821 3d02 	strh.w	r3, [r1, #-2]!
   1e568:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   1e56a:	1c9a      	adds	r2, r3, #2
   1e56c:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1e56e:	2202      	movs	r2, #2
   1e570:	18e0      	adds	r0, r4, r3
   1e572:	f7e7 fc89 	bl	5e88 <memcpy>
}
   1e576:	b002      	add	sp, #8
   1e578:	bd10      	pop	{r4, pc}

0001e57a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1e57a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1e57c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1e57e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1e580:	4411      	add	r1, r2
	buf->data -= len;
   1e582:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1e584:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1e586:	4618      	mov	r0, r3
   1e588:	4770      	bx	lr

0001e58a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1e58a:	b513      	push	{r0, r1, r4, lr}
   1e58c:	ac02      	add	r4, sp, #8
	buf->data -= len;
   1e58e:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1e590:	8882      	ldrh	r2, [r0, #4]
{
   1e592:	f824 1d02 	strh.w	r1, [r4, #-2]!
	buf->data -= len;
   1e596:	3b02      	subs	r3, #2
	buf->len += len;
   1e598:	3202      	adds	r2, #2
	buf->data -= len;
   1e59a:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1e59c:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1e59e:	4621      	mov	r1, r4
   1e5a0:	2202      	movs	r2, #2
   1e5a2:	4618      	mov	r0, r3
   1e5a4:	f7e7 fc70 	bl	5e88 <memcpy>
}
   1e5a8:	b002      	add	sp, #8
   1e5aa:	bd10      	pop	{r4, pc}

0001e5ac <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1e5ac:	8883      	ldrh	r3, [r0, #4]
   1e5ae:	1a5b      	subs	r3, r3, r1
   1e5b0:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1e5b2:	6803      	ldr	r3, [r0, #0]
   1e5b4:	4419      	add	r1, r3
   1e5b6:	6001      	str	r1, [r0, #0]
}
   1e5b8:	4608      	mov	r0, r1
   1e5ba:	4770      	bx	lr

0001e5bc <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1e5bc:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1e5be:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1e5c0:	2101      	movs	r1, #1
	val = buf->data[0];
   1e5c2:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1e5c4:	f7ff fff2 	bl	1e5ac <net_buf_simple_pull>

	return val;
}
   1e5c8:	4610      	mov	r0, r2
   1e5ca:	bd08      	pop	{r3, pc}

0001e5cc <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1e5cc:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1e5ce:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1e5d0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1e5d2:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1e5d4:	f7ff ffea 	bl	1e5ac <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1e5d8:	4610      	mov	r0, r2
   1e5da:	bd08      	pop	{r3, pc}

0001e5dc <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1e5dc:	6802      	ldr	r2, [r0, #0]
   1e5de:	6880      	ldr	r0, [r0, #8]
}
   1e5e0:	1a10      	subs	r0, r2, r0
   1e5e2:	4770      	bx	lr

0001e5e4 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   1e5e4:	6802      	ldr	r2, [r0, #0]
   1e5e6:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1e5e8:	88c3      	ldrh	r3, [r0, #6]
   1e5ea:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   1e5ec:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1e5ee:	1a9b      	subs	r3, r3, r2
}
   1e5f0:	1a18      	subs	r0, r3, r0
   1e5f2:	4770      	bx	lr

0001e5f4 <net_buf_append_bytes>:
{
   1e5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1e5fa:	4681      	mov	r9, r0
   1e5fc:	460f      	mov	r7, r1
   1e5fe:	4690      	mov	r8, r2
   1e600:	469a      	mov	sl, r3
   1e602:	4604      	mov	r4, r0
	while (buf->frags) {
   1e604:	6825      	ldr	r5, [r4, #0]
   1e606:	b9ed      	cbnz	r5, 1e644 <net_buf_append_bytes+0x50>
		u16_t count = min(len, net_buf_tailroom(frag));
   1e608:	3408      	adds	r4, #8
   1e60a:	4620      	mov	r0, r4
   1e60c:	f7ff ffea 	bl	1e5e4 <net_buf_simple_tailroom>
   1e610:	42b8      	cmp	r0, r7
   1e612:	bf94      	ite	ls
   1e614:	fa1f fb80 	uxthls.w	fp, r0
   1e618:	fa1f fb87 	uxthhi.w	fp, r7
		net_buf_add_mem(frag, value8, count);
   1e61c:	4641      	mov	r1, r8
   1e61e:	465a      	mov	r2, fp
   1e620:	4620      	mov	r0, r4
   1e622:	f7ff ff79 	bl	1e518 <net_buf_simple_add_mem>
		if (len == 0) {
   1e626:	ebb7 070b 	subs.w	r7, r7, fp
		added_len += count;
   1e62a:	445d      	add	r5, fp
		value8 += count;
   1e62c:	44d8      	add	r8, fp
		if (len == 0) {
   1e62e:	d00b      	beq.n	1e648 <net_buf_append_bytes+0x54>
		frag = allocate_cb(timeout, user_data);
   1e630:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e632:	4650      	mov	r0, sl
   1e634:	47b0      	blx	r6
		if (!frag) {
   1e636:	4604      	mov	r4, r0
   1e638:	b130      	cbz	r0, 1e648 <net_buf_append_bytes+0x54>
		net_buf_frag_add(buf, frag);
   1e63a:	4601      	mov	r1, r0
   1e63c:	4648      	mov	r0, r9
   1e63e:	f7ff ff49 	bl	1e4d4 <net_buf_frag_add>
	do {
   1e642:	e7e1      	b.n	1e608 <net_buf_append_bytes+0x14>
	while (buf->frags) {
   1e644:	462c      	mov	r4, r5
   1e646:	e7dd      	b.n	1e604 <net_buf_append_bytes+0x10>
}
   1e648:	4628      	mov	r0, r5
   1e64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e64e <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1e64e:	2000      	movs	r0, #0
   1e650:	4770      	bx	lr

0001e652 <net_bt_enable>:
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1e652:	b151      	cbz	r1, 1e66a <net_bt_enable+0x18>
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1e654:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e656:	681b      	ldr	r3, [r3, #0]
	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1e658:	689b      	ldr	r3, [r3, #8]
   1e65a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   1e65e:	2b03      	cmp	r3, #3
		return -ENETDOWN;
   1e660:	bf0c      	ite	eq
   1e662:	2000      	moveq	r0, #0
   1e664:	f06f 003d 	mvnne.w	r0, #61	; 0x3d
   1e668:	4770      	bx	lr
	}

	return 0;
   1e66a:	4608      	mov	r0, r1
}
   1e66c:	4770      	bx	lr

0001e66e <net_bt_flags>:

static enum net_l2_flags net_bt_flags(struct net_if *iface)
{
	return NET_L2_MULTICAST | NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE;
}
   1e66e:	2003      	movs	r0, #3
   1e670:	4770      	bx	lr

0001e672 <net_bt_send>:
{
   1e672:	b538      	push	{r3, r4, r5, lr}
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
   1e674:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
	if (net_pkt_family(pkt) != AF_INET6) {
   1e678:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1e67c:	2b0a      	cmp	r3, #10
{
   1e67e:	460c      	mov	r4, r1
	if (net_pkt_family(pkt) != AF_INET6) {
   1e680:	d001      	beq.n	1e686 <net_bt_send+0x14>
		return NET_DROP;
   1e682:	2002      	movs	r0, #2
}
   1e684:	bd38      	pop	{r3, r4, r5, pc}
   1e686:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e688:	681b      	ldr	r3, [r3, #0]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1e68a:	2200      	movs	r2, #0
   1e68c:	2101      	movs	r1, #1
   1e68e:	4620      	mov	r0, r4
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e690:	689d      	ldr	r5, [r3, #8]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1e692:	f003 ff2f 	bl	224f4 <net_6lo_compress>
   1e696:	2800      	cmp	r0, #0
   1e698:	d0f3      	beq.n	1e682 <net_bt_send+0x10>
	net_if_queue_tx(ctxt->iface, pkt);
   1e69a:	6828      	ldr	r0, [r5, #0]
   1e69c:	4621      	mov	r1, r4
   1e69e:	f001 fb1d 	bl	1fcdc <net_if_queue_tx>
	return NET_OK;
   1e6a2:	2000      	movs	r0, #0
   1e6a4:	e7ee      	b.n	1e684 <net_bt_send+0x12>

0001e6a6 <net_bt_recv>:
{
   1e6a6:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1e6a8:	4608      	mov	r0, r1
   1e6aa:	f004 f9d3 	bl	22a54 <net_6lo_uncompress>
   1e6ae:	2800      	cmp	r0, #0
}
   1e6b0:	bf0c      	ite	eq
   1e6b2:	2002      	moveq	r0, #2
   1e6b4:	2001      	movne	r0, #1
   1e6b6:	bd08      	pop	{r3, pc}

0001e6b8 <ipsp_recv>:
	default_conn = NULL;
#endif
}

static int ipsp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
   1e6b8:	b570      	push	{r4, r5, r6, lr}
   1e6ba:	4605      	mov	r5, r0
   1e6bc:	460e      	mov	r6, r1

	NET_DBG("Incoming data channel %p len %zu", chan,
		net_buf_frags_len(buf));

	/* Get packet for bearer / protocol related data */
	pkt = net_pkt_get_reserve_rx(0, BUF_TIMEOUT);
   1e6be:	2000      	movs	r0, #0
   1e6c0:	2132      	movs	r1, #50	; 0x32
   1e6c2:	f002 fecb 	bl	2145c <net_pkt_get_reserve_rx>
	if (!pkt) {
   1e6c6:	4604      	mov	r4, r0
   1e6c8:	b1e0      	cbz	r0, 1e704 <ipsp_recv+0x4c>
		return -ENOMEM;
	}

	/* Set destination address */
	net_pkt_lladdr_dst(pkt)->addr = ctxt->src.val;
   1e6ca:	f105 0394 	add.w	r3, r5, #148	; 0x94
	net_pkt_lladdr_dst(pkt)->len = sizeof(ctxt->src);
	net_pkt_lladdr_dst(pkt)->type = NET_LINK_BLUETOOTH;

	/* Set source address */
	net_pkt_lladdr_src(pkt)->addr = ctxt->dst.val;
   1e6ce:	f105 029a 	add.w	r2, r5, #154	; 0x9a
	net_pkt_lladdr_dst(pkt)->addr = ctxt->src.val;
   1e6d2:	6343      	str	r3, [r0, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->len = sizeof(ctxt->src);
   1e6d4:	f240 2306 	movw	r3, #518	; 0x206
   1e6d8:	8703      	strh	r3, [r0, #56]	; 0x38
	net_pkt_lladdr_src(pkt)->addr = ctxt->dst.val;
   1e6da:	62c2      	str	r2, [r0, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = sizeof(ctxt->dst);
   1e6dc:	8603      	strh	r3, [r0, #48]	; 0x30
	net_pkt_lladdr_src(pkt)->type = NET_LINK_BLUETOOTH;

	/* Add data buffer as fragment of RX buffer, take a reference while
	 * doing so since L2CAP will unref the buffer after return.
	 */
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1e6de:	4630      	mov	r0, r6
   1e6e0:	f7ff fee4 	bl	1e4ac <net_buf_ref>
   1e6e4:	4601      	mov	r1, r0
   1e6e6:	4620      	mov	r0, r4
   1e6e8:	f002 ffc0 	bl	2166c <net_pkt_frag_add>

	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1e6ec:	4621      	mov	r1, r4
   1e6ee:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1e6f2:	f001 f92b 	bl	1f94c <net_recv_data>
   1e6f6:	2800      	cmp	r0, #0
   1e6f8:	da02      	bge.n	1e700 <ipsp_recv+0x48>
		NET_DBG("Packet dropped by NET stack");
		net_pkt_unref(pkt);
   1e6fa:	4620      	mov	r0, r4
   1e6fc:	f002 ff8f 	bl	2161e <net_pkt_unref>
	}

	return 0;
   1e700:	2000      	movs	r0, #0
   1e702:	e001      	b.n	1e708 <ipsp_recv+0x50>
		return -ENOMEM;
   1e704:	f06f 000b 	mvn.w	r0, #11
}
   1e708:	bd70      	pop	{r4, r5, r6, pc}

0001e70a <ipsp_alloc_buf>:

static struct net_buf *ipsp_alloc_buf(struct bt_l2cap_chan *chan)
{
	NET_DBG("Channel %p requires buffer", chan);

	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1e70a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e70e:	2000      	movs	r0, #0
   1e710:	f002 beb4 	b.w	2147c <net_pkt_get_reserve_rx_data>

0001e714 <ipsp_disconnected>:
{
   1e714:	b510      	push	{r4, lr}
   1e716:	4604      	mov	r4, r0
	net_if_carrier_down(ctxt->iface);
   1e718:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e71c:	f002 fc3a 	bl	20f94 <net_if_carrier_down>
	if (chan->conn != default_conn) {
   1e720:	6820      	ldr	r0, [r4, #0]
   1e722:	4c04      	ldr	r4, [pc, #16]	; (1e734 <ipsp_disconnected+0x20>)
   1e724:	6823      	ldr	r3, [r4, #0]
   1e726:	4298      	cmp	r0, r3
   1e728:	d103      	bne.n	1e732 <ipsp_disconnected+0x1e>
	bt_conn_unref(default_conn);
   1e72a:	f7eb fe75 	bl	a418 <bt_conn_unref>
	default_conn = NULL;
   1e72e:	2300      	movs	r3, #0
   1e730:	6023      	str	r3, [r4, #0]
}
   1e732:	bd10      	pop	{r4, pc}
   1e734:	2000203c 	.word	0x2000203c

0001e738 <disconnected>:
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1e738:	b510      	push	{r4, lr}
	if (conn != default_conn) {
   1e73a:	4c04      	ldr	r4, [pc, #16]	; (1e74c <disconnected+0x14>)
   1e73c:	6823      	ldr	r3, [r4, #0]
   1e73e:	4283      	cmp	r3, r0
   1e740:	d103      	bne.n	1e74a <disconnected+0x12>

		NET_DBG("Disconnected: %s (reason %u)\n",
			log_strdup(addr), reason);
	}

	bt_conn_unref(default_conn);
   1e742:	f7eb fe69 	bl	a418 <bt_conn_unref>
	default_conn = NULL;
   1e746:	2300      	movs	r3, #0
   1e748:	6023      	str	r3, [r4, #0]
}
   1e74a:	bd10      	pop	{r4, pc}
   1e74c:	2000203c 	.word	0x2000203c

0001e750 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1e750:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1e752:	4804      	ldr	r0, [pc, #16]	; (1e764 <net_bt_init+0x14>)
   1e754:	f7eb fa88 	bl	9c68 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1e758:	4803      	ldr	r0, [pc, #12]	; (1e768 <net_bt_init+0x18>)
   1e75a:	f7ec fc49 	bl	aff0 <bt_l2cap_server_register>

	net_bt_shell_init();

	return 0;
}
   1e75e:	2000      	movs	r0, #0
   1e760:	bd08      	pop	{r3, pc}
   1e762:	bf00      	nop
   1e764:	2000d1c0 	.word	0x2000d1c0
   1e768:	2000d1f0 	.word	0x2000d1f0

0001e76c <bt_iface_send>:
   1e76c:	6802      	ldr	r2, [r0, #0]
{
   1e76e:	b538      	push	{r3, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e770:	6812      	ldr	r2, [r2, #0]
	frags = pkt->frags;
   1e772:	694d      	ldr	r5, [r1, #20]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e774:	6894      	ldr	r4, [r2, #8]
	pkt->frags = NULL;
   1e776:	2200      	movs	r2, #0
	net_pkt_unref(pkt);
   1e778:	4608      	mov	r0, r1
	pkt->frags = NULL;
   1e77a:	614a      	str	r2, [r1, #20]
	net_pkt_unref(pkt);
   1e77c:	f002 ff4f 	bl	2161e <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1e780:	4629      	mov	r1, r5
   1e782:	1d20      	adds	r0, r4, #4
}
   1e784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1e788:	f7ed ba64 	b.w	bc54 <bt_l2cap_chan_send>

0001e78c <ipsp_accept>:
{
   1e78c:	b508      	push	{r3, lr}
	if (bt_context_data.ipsp_chan.chan.conn) {
   1e78e:	4b0f      	ldr	r3, [pc, #60]	; (1e7cc <ipsp_accept+0x40>)
   1e790:	6858      	ldr	r0, [r3, #4]
   1e792:	b1b8      	cbz	r0, 1e7c4 <ipsp_accept+0x38>
		NET_ERR("No channels available");
   1e794:	4b0e      	ldr	r3, [pc, #56]	; (1e7d0 <ipsp_accept+0x44>)
   1e796:	681b      	ldr	r3, [r3, #0]
   1e798:	075b      	lsls	r3, r3, #29
   1e79a:	d010      	beq.n	1e7be <ipsp_accept+0x32>
   1e79c:	2301      	movs	r3, #1
   1e79e:	f04f 0200 	mov.w	r2, #0
   1e7a2:	f363 0202 	bfi	r2, r3, #0, #3
   1e7a6:	490b      	ldr	r1, [pc, #44]	; (1e7d4 <ipsp_accept+0x48>)
   1e7a8:	4b0b      	ldr	r3, [pc, #44]	; (1e7d8 <ipsp_accept+0x4c>)
   1e7aa:	480c      	ldr	r0, [pc, #48]	; (1e7dc <ipsp_accept+0x50>)
   1e7ac:	1a5b      	subs	r3, r3, r1
   1e7ae:	f36f 02c5 	bfc	r2, #3, #3
   1e7b2:	08db      	lsrs	r3, r3, #3
   1e7b4:	f363 128f 	bfi	r2, r3, #6, #10
   1e7b8:	4909      	ldr	r1, [pc, #36]	; (1e7e0 <ipsp_accept+0x54>)
   1e7ba:	f7e3 facd 	bl	1d58 <log_1>
		return -ENOMEM;
   1e7be:	f06f 000b 	mvn.w	r0, #11
   1e7c2:	e001      	b.n	1e7c8 <ipsp_accept+0x3c>
	*chan = &bt_context_data.ipsp_chan.chan;
   1e7c4:	3304      	adds	r3, #4
   1e7c6:	600b      	str	r3, [r1, #0]
}
   1e7c8:	bd08      	pop	{r3, pc}
   1e7ca:	bf00      	nop
   1e7cc:	2000d114 	.word	0x2000d114
   1e7d0:	2000d774 	.word	0x2000d774
   1e7d4:	0002cff8 	.word	0x0002cff8
   1e7d8:	0002d0c0 	.word	0x0002d0c0
   1e7dc:	00031e1c 	.word	0x00031e1c
   1e7e0:	00031dff 	.word	0x00031dff

0001e7e4 <connected>:
	if (err) {
   1e7e4:	b939      	cbnz	r1, 1e7f6 <connected+0x12>
	if (conn != default_conn) {
   1e7e6:	4b04      	ldr	r3, [pc, #16]	; (1e7f8 <connected+0x14>)
   1e7e8:	681b      	ldr	r3, [r3, #0]
   1e7ea:	4298      	cmp	r0, r3
   1e7ec:	d103      	bne.n	1e7f6 <connected+0x12>
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1e7ee:	2223      	movs	r2, #35	; 0x23
   1e7f0:	4902      	ldr	r1, [pc, #8]	; (1e7fc <connected+0x18>)
   1e7f2:	f7ec bc73 	b.w	b0dc <bt_l2cap_chan_connect>
}
   1e7f6:	4770      	bx	lr
   1e7f8:	2000203c 	.word	0x2000203c
   1e7fc:	2000d118 	.word	0x2000d118

0001e800 <bt_iface_init>:
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e800:	6803      	ldr	r3, [r0, #0]
   1e802:	f853 2b0c 	ldr.w	r2, [r3], #12
	ctxt->iface = iface;
   1e806:	6892      	ldr	r2, [r2, #8]
   1e808:	6010      	str	r0, [r2, #0]
   1e80a:	f3bf 8f5b 	dmb	ish
   1e80e:	e853 2f00 	ldrex	r2, [r3]
   1e812:	f042 0202 	orr.w	r2, r2, #2
   1e816:	e843 2100 	strex	r1, r2, [r3]
   1e81a:	2900      	cmp	r1, #0
   1e81c:	d1f7      	bne.n	1e80e <bt_iface_init+0xe>
   1e81e:	f3bf 8f5b 	dmb	ish
}
   1e822:	4770      	bx	lr

0001e824 <ipsp_connected>:
{
   1e824:	b570      	push	{r4, r5, r6, lr}
   1e826:	b08e      	sub	sp, #56	; 0x38
   1e828:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1e82a:	a909      	add	r1, sp, #36	; 0x24
   1e82c:	6800      	ldr	r0, [r0, #0]
   1e82e:	f7eb fdf6 	bl	a41e <bt_conn_get_info>
   1e832:	2800      	cmp	r0, #0
   1e834:	da19      	bge.n	1e86a <ipsp_connected+0x46>
		NET_ERR("Unable to get connection info");
   1e836:	4b4c      	ldr	r3, [pc, #304]	; (1e968 <ipsp_connected+0x144>)
   1e838:	681b      	ldr	r3, [r3, #0]
   1e83a:	0759      	lsls	r1, r3, #29
   1e83c:	d010      	beq.n	1e860 <ipsp_connected+0x3c>
   1e83e:	2301      	movs	r3, #1
   1e840:	f04f 0200 	mov.w	r2, #0
   1e844:	f363 0202 	bfi	r2, r3, #0, #3
   1e848:	4948      	ldr	r1, [pc, #288]	; (1e96c <ipsp_connected+0x148>)
   1e84a:	4b49      	ldr	r3, [pc, #292]	; (1e970 <ipsp_connected+0x14c>)
   1e84c:	4849      	ldr	r0, [pc, #292]	; (1e974 <ipsp_connected+0x150>)
   1e84e:	1a5b      	subs	r3, r3, r1
   1e850:	f36f 02c5 	bfc	r2, #3, #3
   1e854:	08db      	lsrs	r3, r3, #3
   1e856:	f363 128f 	bfi	r2, r3, #6, #10
   1e85a:	4947      	ldr	r1, [pc, #284]	; (1e978 <ipsp_connected+0x154>)
   1e85c:	f7e3 fa7c 	bl	1d58 <log_1>
		bt_l2cap_chan_disconnect(chan);
   1e860:	4620      	mov	r0, r4
   1e862:	f7ec fc6d 	bl	b140 <bt_l2cap_chan_disconnect>
}
   1e866:	b00e      	add	sp, #56	; 0x38
   1e868:	bd70      	pop	{r4, r5, r6, pc}
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1e86a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e86c:	f104 0594 	add.w	r5, r4, #148	; 0x94
	psrc += length - 1;
   1e870:	1d93      	adds	r3, r2, #6
   1e872:	f104 0193 	add.w	r1, r4, #147	; 0x93
		*pdst++ = *psrc--;
   1e876:	f813 0901 	ldrb.w	r0, [r3], #-1
   1e87a:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   1e87e:	429a      	cmp	r2, r3
   1e880:	d1f9      	bne.n	1e876 <ipsp_connected+0x52>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1e882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e884:	f104 009a 	add.w	r0, r4, #154	; 0x9a
	psrc += length - 1;
   1e888:	1d93      	adds	r3, r2, #6
   1e88a:	f104 0199 	add.w	r1, r4, #153	; 0x99
		*pdst++ = *psrc--;
   1e88e:	f813 6901 	ldrb.w	r6, [r3], #-1
   1e892:	f801 6f01 	strb.w	r6, [r1, #1]!
	for (; length > 0; length--) {
   1e896:	429a      	cmp	r2, r3
   1e898:	d1f9      	bne.n	1e88e <ipsp_connected+0x6a>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1e89a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e89e:	681a      	ldr	r2, [r3, #0]
   1e8a0:	f3bf 8f5b 	dmb	ish
   1e8a4:	68d2      	ldr	r2, [r2, #12]
   1e8a6:	f3bf 8f5b 	dmb	ish
 */
static inline int net_if_set_link_addr(struct net_if *iface,
				       u8_t *addr, u8_t len,
				       enum net_link_type type)
{
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   1e8aa:	07d2      	lsls	r2, r2, #31
   1e8ac:	d405      	bmi.n	1e8ba <ipsp_connected+0x96>
		return -EPERM;
	}

	net_if_get_link_addr(iface)->addr = addr;
   1e8ae:	681b      	ldr	r3, [r3, #0]
	net_if_get_link_addr(iface)->len = len;
   1e8b0:	2206      	movs	r2, #6
   1e8b2:	751a      	strb	r2, [r3, #20]
	net_if_get_link_addr(iface)->type = type;
   1e8b4:	2202      	movs	r2, #2
	net_if_get_link_addr(iface)->addr = addr;
   1e8b6:	611d      	str	r5, [r3, #16]
	net_if_get_link_addr(iface)->type = type;
   1e8b8:	755a      	strb	r2, [r3, #21]
	ll.len = sizeof(ctxt->dst.val);
   1e8ba:	f240 2306 	movw	r3, #518	; 0x206
   1e8be:	f8ad 3010 	strh.w	r3, [sp, #16]
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1e8c2:	f248 03fe 	movw	r3, #33022	; 0x80fe
	ll.addr = ctxt->dst.val;
   1e8c6:	9003      	str	r0, [sp, #12]
   1e8c8:	9305      	str	r3, [sp, #20]
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1e8ca:	2300      	movs	r3, #0
   1e8cc:	9306      	str	r3, [sp, #24]

	switch (lladdr->len) {
   1e8ce:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1e8d2:	2a06      	cmp	r2, #6
   1e8d4:	d025      	beq.n	1e922 <ipsp_connected+0xfe>
   1e8d6:	2a08      	cmp	r2, #8
   1e8d8:	d041      	beq.n	1e95e <ipsp_connected+0x13a>
   1e8da:	2a02      	cmp	r2, #2
   1e8dc:	d113      	bne.n	1e906 <ipsp_connected+0xe2>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1e8de:	f89d 2011 	ldrb.w	r2, [sp, #17]
   1e8e2:	2a01      	cmp	r2, #1
   1e8e4:	d10f      	bne.n	1e906 <ipsp_connected+0xe2>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1e8e6:	9307      	str	r3, [sp, #28]
			addr->s6_addr[11] = 0xff;
   1e8e8:	22ff      	movs	r2, #255	; 0xff
   1e8ea:	f88d 201f 	strb.w	r2, [sp, #31]
			addr->s6_addr[12] = 0xfe;
			addr->s6_addr[13] = 0;
   1e8ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			addr->s6_addr[12] = 0xfe;
   1e8f2:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   1e8f4:	9b03      	ldr	r3, [sp, #12]
			addr->s6_addr[12] = 0xfe;
   1e8f6:	f88d 2020 	strb.w	r2, [sp, #32]
			addr->s6_addr[14] = lladdr->addr[0];
   1e8fa:	781a      	ldrb	r2, [r3, #0]
   1e8fc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			addr->s6_addr[15] = lladdr->addr[1];
   1e900:	785b      	ldrb	r3, [r3, #1]
   1e902:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1e906:	2305      	movs	r3, #5
   1e908:	9300      	str	r3, [sp, #0]
   1e90a:	aa03      	add	r2, sp, #12
   1e90c:	2300      	movs	r3, #0
   1e90e:	a905      	add	r1, sp, #20
   1e910:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e914:	f006 fb46 	bl	24fa4 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1e918:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e91c:	f002 fb0c 	bl	20f38 <net_if_up>
   1e920:	e7a1      	b.n	1e866 <ipsp_connected+0x42>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e922:	2203      	movs	r2, #3
   1e924:	9903      	ldr	r1, [sp, #12]
   1e926:	a807      	add	r0, sp, #28
   1e928:	f7e7 faae 	bl	5e88 <memcpy>
		addr->s6_addr[11] = 0xff;
		addr->s6_addr[12] = 0xfe;
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e92c:	9903      	ldr	r1, [sp, #12]
		addr->s6_addr[11] = 0xff;
   1e92e:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e930:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   1e932:	f88d 301f 	strb.w	r3, [sp, #31]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e936:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   1e938:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e93a:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		addr->s6_addr[12] = 0xfe;
   1e93e:	f88d 3020 	strb.w	r3, [sp, #32]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e942:	f7e7 faa1 	bl	5e88 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1e946:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1e94a:	3b02      	subs	r3, #2
   1e94c:	2b01      	cmp	r3, #1
   1e94e:	d8da      	bhi.n	1e906 <ipsp_connected+0xe2>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
   1e950:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1e954:	f083 0302 	eor.w	r3, r3, #2
   1e958:	f88d 301c 	strb.w	r3, [sp, #28]
   1e95c:	e7d3      	b.n	1e906 <ipsp_connected+0xe2>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1e95e:	9903      	ldr	r1, [sp, #12]
   1e960:	a807      	add	r0, sp, #28
   1e962:	f7e7 fa91 	bl	5e88 <memcpy>
   1e966:	e7f3      	b.n	1e950 <ipsp_connected+0x12c>
   1e968:	2000d774 	.word	0x2000d774
   1e96c:	0002cff8 	.word	0x0002cff8
   1e970:	0002d0c0 	.word	0x0002d0c0
   1e974:	00031e36 	.word	0x00031e36
   1e978:	00031df0 	.word	0x00031df0

0001e97c <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1e97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!strcmp(data, "on")) {
   1e97e:	4912      	ldr	r1, [pc, #72]	; (1e9c8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>)
   1e980:	4610      	mov	r0, r2
{
   1e982:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1e984:	f7e7 fa32 	bl	5dec <strcmp>
   1e988:	b998      	cbnz	r0, 1e9b2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1e98a:	22a0      	movs	r2, #160	; 0xa0
   1e98c:	2301      	movs	r3, #1
   1e98e:	f8ad 200a 	strh.w	r2, [sp, #10]
   1e992:	22f0      	movs	r2, #240	; 0xf0
   1e994:	f8ad 0008 	strh.w	r0, [sp, #8]
   1e998:	f8ad 200c 	strh.w	r2, [sp, #12]
   1e99c:	f88d 3009 	strb.w	r3, [sp, #9]
   1e9a0:	9300      	str	r3, [sp, #0]
   1e9a2:	2202      	movs	r2, #2
   1e9a4:	4b09      	ldr	r3, [pc, #36]	; (1e9cc <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x50>)
   1e9a6:	490a      	ldr	r1, [pc, #40]	; (1e9d0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1e9a8:	a802      	add	r0, sp, #8
   1e9aa:	f7ea ff15 	bl	97d8 <bt_le_adv_start>
}
   1e9ae:	b004      	add	sp, #16
   1e9b0:	bd10      	pop	{r4, pc}
	} else if (!strcmp(data, "off")) {
   1e9b2:	4908      	ldr	r1, [pc, #32]	; (1e9d4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1e9b4:	4620      	mov	r0, r4
   1e9b6:	f7e7 fa19 	bl	5dec <strcmp>
   1e9ba:	b910      	cbnz	r0, 1e9c2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x46>
		return bt_le_adv_stop();
   1e9bc:	f7ea ff1c 	bl	97f8 <bt_le_adv_stop>
   1e9c0:	e7f5      	b.n	1e9ae <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x32>
		return -EINVAL;
   1e9c2:	f06f 0015 	mvn.w	r0, #21
   1e9c6:	e7f2      	b.n	1e9ae <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x32>
   1e9c8:	0002fc6f 	.word	0x0002fc6f
   1e9cc:	00031e58 	.word	0x00031e58
   1e9d0:	00031e0c 	.word	0x00031e0c
   1e9d4:	0002dc41 	.word	0x0002dc41

0001e9d8 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e9d8:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e9da:	b942      	cbnz	r2, 1e9ee <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e9dc:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e9de:	b933      	cbnz	r3, 1e9ee <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e9e0:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e9e2:	b922      	cbnz	r2, 1e9ee <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1e9e4:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e9e6:	fab0 f080 	clz	r0, r0
   1e9ea:	0940      	lsrs	r0, r0, #5
   1e9ec:	4770      	bx	lr
   1e9ee:	2000      	movs	r0, #0
   1e9f0:	4770      	bx	lr
	...

0001e9f4 <net_context_is_used>:
	/** Flags for the context */
	u8_t flags;
};

static inline bool net_context_is_used(struct net_context *context)
{
   1e9f4:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1e9f6:	4604      	mov	r4, r0
   1e9f8:	b9a0      	cbnz	r0, 1ea24 <net_context_is_used+0x30>
   1e9fa:	4b0d      	ldr	r3, [pc, #52]	; (1ea30 <net_context_is_used+0x3c>)
   1e9fc:	681b      	ldr	r3, [r3, #0]
   1e9fe:	075b      	lsls	r3, r3, #29
   1ea00:	d010      	beq.n	1ea24 <net_context_is_used+0x30>
   1ea02:	2301      	movs	r3, #1
   1ea04:	f04f 0200 	mov.w	r2, #0
   1ea08:	f363 0202 	bfi	r2, r3, #0, #3
   1ea0c:	4909      	ldr	r1, [pc, #36]	; (1ea34 <net_context_is_used+0x40>)
   1ea0e:	4b0a      	ldr	r3, [pc, #40]	; (1ea38 <net_context_is_used+0x44>)
   1ea10:	1a5b      	subs	r3, r3, r1
   1ea12:	f360 02c5 	bfi	r2, r0, #3, #3
   1ea16:	08db      	lsrs	r3, r3, #3
   1ea18:	f363 128f 	bfi	r2, r3, #6, #10
   1ea1c:	4907      	ldr	r1, [pc, #28]	; (1ea3c <net_context_is_used+0x48>)
   1ea1e:	4808      	ldr	r0, [pc, #32]	; (1ea40 <net_context_is_used+0x4c>)
   1ea20:	f7e3 f99a 	bl	1d58 <log_1>

	return context->flags & NET_CONTEXT_IN_USE;
   1ea24:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   1ea28:	f000 0001 	and.w	r0, r0, #1
   1ea2c:	bd10      	pop	{r4, pc}
   1ea2e:	bf00      	nop
   1ea30:	2000d78c 	.word	0x2000d78c
   1ea34:	0002cff8 	.word	0x0002cff8
   1ea38:	0002d0f0 	.word	0x0002d0f0
   1ea3c:	00031e94 	.word	0x00031e94
   1ea40:	000322d6 	.word	0x000322d6

0001ea44 <net_context_get_ip_proto>:
 *
 * @return Network context IP protocol.
 */
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
   1ea44:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1ea46:	4604      	mov	r4, r0
   1ea48:	b9a0      	cbnz	r0, 1ea74 <net_context_get_ip_proto+0x30>
   1ea4a:	4b0e      	ldr	r3, [pc, #56]	; (1ea84 <net_context_get_ip_proto+0x40>)
   1ea4c:	681b      	ldr	r3, [r3, #0]
   1ea4e:	075b      	lsls	r3, r3, #29
   1ea50:	d010      	beq.n	1ea74 <net_context_get_ip_proto+0x30>
   1ea52:	2301      	movs	r3, #1
   1ea54:	f04f 0200 	mov.w	r2, #0
   1ea58:	f363 0202 	bfi	r2, r3, #0, #3
   1ea5c:	490a      	ldr	r1, [pc, #40]	; (1ea88 <net_context_get_ip_proto+0x44>)
   1ea5e:	4b0b      	ldr	r3, [pc, #44]	; (1ea8c <net_context_get_ip_proto+0x48>)
   1ea60:	1a5b      	subs	r3, r3, r1
   1ea62:	f360 02c5 	bfi	r2, r0, #3, #3
   1ea66:	08db      	lsrs	r3, r3, #3
   1ea68:	f363 128f 	bfi	r2, r3, #6, #10
   1ea6c:	4908      	ldr	r1, [pc, #32]	; (1ea90 <net_context_get_ip_proto+0x4c>)
   1ea6e:	4809      	ldr	r0, [pc, #36]	; (1ea94 <net_context_get_ip_proto+0x50>)
   1ea70:	f7e3 f972 	bl	1d58 <log_1>

	if (context->flags & NET_CONTEXT_PROTO) {
   1ea74:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
		return IPPROTO_TCP;
	}

	return IPPROTO_UDP;
   1ea78:	f013 0f40 	tst.w	r3, #64	; 0x40
}
   1ea7c:	bf14      	ite	ne
   1ea7e:	2006      	movne	r0, #6
   1ea80:	2011      	moveq	r0, #17
   1ea82:	bd10      	pop	{r4, pc}
   1ea84:	2000d78c 	.word	0x2000d78c
   1ea88:	0002cff8 	.word	0x0002cff8
   1ea8c:	0002d0f0 	.word	0x0002d0f0
   1ea90:	00031eea 	.word	0x00031eea
   1ea94:	000322d6 	.word	0x000322d6

0001ea98 <net_context_get_state>:
{
   1ea98:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1ea9a:	4604      	mov	r4, r0
   1ea9c:	b9a0      	cbnz	r0, 1eac8 <net_context_get_state+0x30>
   1ea9e:	4b0d      	ldr	r3, [pc, #52]	; (1ead4 <net_context_get_state+0x3c>)
   1eaa0:	681b      	ldr	r3, [r3, #0]
   1eaa2:	075b      	lsls	r3, r3, #29
   1eaa4:	d010      	beq.n	1eac8 <net_context_get_state+0x30>
   1eaa6:	2301      	movs	r3, #1
   1eaa8:	f04f 0200 	mov.w	r2, #0
   1eaac:	f363 0202 	bfi	r2, r3, #0, #3
   1eab0:	4909      	ldr	r1, [pc, #36]	; (1ead8 <net_context_get_state+0x40>)
   1eab2:	4b0a      	ldr	r3, [pc, #40]	; (1eadc <net_context_get_state+0x44>)
   1eab4:	1a5b      	subs	r3, r3, r1
   1eab6:	f360 02c5 	bfi	r2, r0, #3, #3
   1eaba:	08db      	lsrs	r3, r3, #3
   1eabc:	f363 128f 	bfi	r2, r3, #6, #10
   1eac0:	4907      	ldr	r1, [pc, #28]	; (1eae0 <net_context_get_state+0x48>)
   1eac2:	4808      	ldr	r0, [pc, #32]	; (1eae4 <net_context_get_state+0x4c>)
   1eac4:	f7e3 f948 	bl	1d58 <log_1>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1eac8:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   1eacc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1ead0:	bd10      	pop	{r4, pc}
   1ead2:	bf00      	nop
   1ead4:	2000d78c 	.word	0x2000d78c
   1ead8:	0002cff8 	.word	0x0002cff8
   1eadc:	0002d0f0 	.word	0x0002d0f0
   1eae0:	00031ea8 	.word	0x00031ea8
   1eae4:	000322d6 	.word	0x000322d6

0001eae8 <net_context_get_family>:
{
   1eae8:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1eaea:	4604      	mov	r4, r0
   1eaec:	b9a0      	cbnz	r0, 1eb18 <net_context_get_family+0x30>
   1eaee:	4b0e      	ldr	r3, [pc, #56]	; (1eb28 <net_context_get_family+0x40>)
   1eaf0:	681b      	ldr	r3, [r3, #0]
   1eaf2:	075b      	lsls	r3, r3, #29
   1eaf4:	d010      	beq.n	1eb18 <net_context_get_family+0x30>
   1eaf6:	2301      	movs	r3, #1
   1eaf8:	f04f 0200 	mov.w	r2, #0
   1eafc:	f363 0202 	bfi	r2, r3, #0, #3
   1eb00:	490a      	ldr	r1, [pc, #40]	; (1eb2c <net_context_get_family+0x44>)
   1eb02:	4b0b      	ldr	r3, [pc, #44]	; (1eb30 <net_context_get_family+0x48>)
   1eb04:	1a5b      	subs	r3, r3, r1
   1eb06:	f360 02c5 	bfi	r2, r0, #3, #3
   1eb0a:	08db      	lsrs	r3, r3, #3
   1eb0c:	f363 128f 	bfi	r2, r3, #6, #10
   1eb10:	4908      	ldr	r1, [pc, #32]	; (1eb34 <net_context_get_family+0x4c>)
   1eb12:	4809      	ldr	r0, [pc, #36]	; (1eb38 <net_context_get_family+0x50>)
   1eb14:	f7e3 f920 	bl	1d58 <log_1>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1eb18:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return AF_INET;
   1eb1c:	f013 0f10 	tst.w	r3, #16
}
   1eb20:	bf14      	ite	ne
   1eb22:	200a      	movne	r0, #10
   1eb24:	2002      	moveq	r0, #2
   1eb26:	bd10      	pop	{r4, pc}
   1eb28:	2000d78c 	.word	0x2000d78c
   1eb2c:	0002cff8 	.word	0x0002cff8
   1eb30:	0002d0f0 	.word	0x0002d0f0
   1eb34:	00031ebe 	.word	0x00031ebe
   1eb38:	000322d6 	.word	0x000322d6

0001eb3c <net_context_get_type>:
{
   1eb3c:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1eb3e:	4604      	mov	r4, r0
   1eb40:	b9a0      	cbnz	r0, 1eb6c <net_context_get_type+0x30>
   1eb42:	4b0e      	ldr	r3, [pc, #56]	; (1eb7c <net_context_get_type+0x40>)
   1eb44:	681b      	ldr	r3, [r3, #0]
   1eb46:	075b      	lsls	r3, r3, #29
   1eb48:	d010      	beq.n	1eb6c <net_context_get_type+0x30>
   1eb4a:	2301      	movs	r3, #1
   1eb4c:	f04f 0200 	mov.w	r2, #0
   1eb50:	f363 0202 	bfi	r2, r3, #0, #3
   1eb54:	490a      	ldr	r1, [pc, #40]	; (1eb80 <net_context_get_type+0x44>)
   1eb56:	4b0b      	ldr	r3, [pc, #44]	; (1eb84 <net_context_get_type+0x48>)
   1eb58:	1a5b      	subs	r3, r3, r1
   1eb5a:	f360 02c5 	bfi	r2, r0, #3, #3
   1eb5e:	08db      	lsrs	r3, r3, #3
   1eb60:	f363 128f 	bfi	r2, r3, #6, #10
   1eb64:	4908      	ldr	r1, [pc, #32]	; (1eb88 <net_context_get_type+0x4c>)
   1eb66:	4809      	ldr	r0, [pc, #36]	; (1eb8c <net_context_get_type+0x50>)
   1eb68:	f7e3 f8f6 	bl	1d58 <log_1>
	if (context->flags & NET_CONTEXT_TYPE) {
   1eb6c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return SOCK_DGRAM;
   1eb70:	f013 0f20 	tst.w	r3, #32
}
   1eb74:	bf14      	ite	ne
   1eb76:	2001      	movne	r0, #1
   1eb78:	2002      	moveq	r0, #2
   1eb7a:	bd10      	pop	{r4, pc}
   1eb7c:	2000d78c 	.word	0x2000d78c
   1eb80:	0002cff8 	.word	0x0002cff8
   1eb84:	0002d0f0 	.word	0x0002d0f0
   1eb88:	00031ed5 	.word	0x00031ed5
   1eb8c:	000322d6 	.word	0x000322d6

0001eb90 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1eb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb94:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1ebf4 <check_used_port+0x64>
   1eb98:	4607      	mov	r7, r0
   1eb9a:	4688      	mov	r8, r1
   1eb9c:	4616      	mov	r6, r2
   1eb9e:	2400      	movs	r4, #0

		if (local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   1eba0:	f102 0a04 	add.w	sl, r2, #4
   1eba4:	eb09 0504 	add.w	r5, r9, r4
		if (!net_context_is_used(&contexts[i])) {
   1eba8:	4628      	mov	r0, r5
   1ebaa:	f7ff ff23 	bl	1e9f4 <net_context_is_used>
   1ebae:	b930      	cbnz	r0, 1ebbe <check_used_port+0x2e>
   1ebb0:	3468      	adds	r4, #104	; 0x68
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ebb2:	f5b4 7f02 	cmp.w	r4, #520	; 0x208
   1ebb6:	d1f5      	bne.n	1eba4 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   1ebb8:	2000      	movs	r0, #0
}
   1ebba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1ebbe:	4628      	mov	r0, r5
   1ebc0:	f7ff ff40 	bl	1ea44 <net_context_get_ip_proto>
   1ebc4:	42b8      	cmp	r0, r7
   1ebc6:	d1f3      	bne.n	1ebb0 <check_used_port+0x20>
   1ebc8:	896b      	ldrh	r3, [r5, #10]
   1ebca:	4543      	cmp	r3, r8
   1ebcc:	d1f0      	bne.n	1ebb0 <check_used_port+0x20>
		if (local_addr->sa_family == AF_INET6) {
   1ebce:	8833      	ldrh	r3, [r6, #0]
   1ebd0:	68e8      	ldr	r0, [r5, #12]
   1ebd2:	2b0a      	cmp	r3, #10
   1ebd4:	d108      	bne.n	1ebe8 <check_used_port+0x58>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ebd6:	2210      	movs	r2, #16
   1ebd8:	4651      	mov	r1, sl
   1ebda:	f7e7 f92e 	bl	5e3a <memcmp>
			if (net_ipv6_addr_cmp(
   1ebde:	2800      	cmp	r0, #0
   1ebe0:	d1e6      	bne.n	1ebb0 <check_used_port+0x20>
				return -EEXIST;
   1ebe2:	f06f 0010 	mvn.w	r0, #16
   1ebe6:	e7e8      	b.n	1ebba <check_used_port+0x2a>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1ebe8:	6872      	ldr	r2, [r6, #4]
   1ebea:	6803      	ldr	r3, [r0, #0]
			if (net_ipv4_addr_cmp(
   1ebec:	429a      	cmp	r2, r3
   1ebee:	d1df      	bne.n	1ebb0 <check_used_port+0x20>
   1ebf0:	e7f7      	b.n	1ebe2 <check_used_port+0x52>
   1ebf2:	bf00      	nop
   1ebf4:	20002040 	.word	0x20002040

0001ebf8 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   1ebfa:	4e0a      	ldr	r6, [pc, #40]	; (1ec24 <find_available_port+0x2c>)
{
   1ebfc:	4607      	mov	r7, r0
   1ebfe:	460d      	mov	r5, r1
		local_port = sys_rand32_get() | 0x8000;
   1ec00:	f7e6 fa5e 	bl	50c0 <sys_rand32_get>
   1ec04:	4604      	mov	r4, r0
   1ec06:	4334      	orrs	r4, r6
   1ec08:	ba64      	rev16	r4, r4
		if (local_port <= 1023) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(
   1ec0a:	4638      	mov	r0, r7
   1ec0c:	b2a4      	uxth	r4, r4
   1ec0e:	f7ff ff19 	bl	1ea44 <net_context_get_ip_proto>
   1ec12:	462a      	mov	r2, r5
   1ec14:	4621      	mov	r1, r4
   1ec16:	f7ff ffbb 	bl	1eb90 <check_used_port>
				net_context_get_ip_proto(context),
				htons(local_port), addr) == -EEXIST);
   1ec1a:	3011      	adds	r0, #17
   1ec1c:	d0f0      	beq.n	1ec00 <find_available_port+0x8>

	return htons(local_port);
}
   1ec1e:	4620      	mov	r0, r4
   1ec20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec22:	bf00      	nop
   1ec24:	ffff8000 	.word	0xffff8000

0001ec28 <net_context_set_iface.isra.10>:
 * @details This function binds network interface to this context.
 *
 * @param context Network context.
 * @param iface Network interface.
 */
static inline void net_context_set_iface(struct net_context *context,
   1ec28:	b538      	push	{r3, r4, r5, lr}
   1ec2a:	4605      	mov	r5, r0
					 struct net_if *iface)
{
	NET_ASSERT(iface);
   1ec2c:	460c      	mov	r4, r1
   1ec2e:	b9a1      	cbnz	r1, 1ec5a <net_context_set_iface.isra.10+0x32>
   1ec30:	4b0c      	ldr	r3, [pc, #48]	; (1ec64 <net_context_set_iface.isra.10+0x3c>)
   1ec32:	681b      	ldr	r3, [r3, #0]
   1ec34:	075b      	lsls	r3, r3, #29
   1ec36:	d010      	beq.n	1ec5a <net_context_set_iface.isra.10+0x32>
   1ec38:	2301      	movs	r3, #1
   1ec3a:	f04f 0200 	mov.w	r2, #0
   1ec3e:	f363 0202 	bfi	r2, r3, #0, #3
   1ec42:	f361 02c5 	bfi	r2, r1, #3, #3
   1ec46:	4b08      	ldr	r3, [pc, #32]	; (1ec68 <net_context_set_iface.isra.10+0x40>)
   1ec48:	4908      	ldr	r1, [pc, #32]	; (1ec6c <net_context_set_iface.isra.10+0x44>)
   1ec4a:	4809      	ldr	r0, [pc, #36]	; (1ec70 <net_context_set_iface.isra.10+0x48>)
   1ec4c:	1a5b      	subs	r3, r3, r1
   1ec4e:	08db      	lsrs	r3, r3, #3
   1ec50:	f363 128f 	bfi	r2, r3, #6, #10
   1ec54:	4907      	ldr	r1, [pc, #28]	; (1ec74 <net_context_set_iface.isra.10+0x4c>)
   1ec56:	f7e3 f87f 	bl	1d58 <log_1>

	context->iface = net_if_get_by_iface(iface);
   1ec5a:	4620      	mov	r0, r4
   1ec5c:	f002 f924 	bl	20ea8 <net_if_get_by_iface>
   1ec60:	7028      	strb	r0, [r5, #0]
}
   1ec62:	bd38      	pop	{r3, r4, r5, pc}
   1ec64:	2000d78c 	.word	0x2000d78c
   1ec68:	0002d0f0 	.word	0x0002d0f0
   1ec6c:	0002cff8 	.word	0x0002cff8
   1ec70:	0003231f 	.word	0x0003231f
   1ec74:	00031f03 	.word	0x00031f03

0001ec78 <net_context_packet_received>:
}

enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     void *user_data)
{
   1ec78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec7c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1ed58 <net_context_packet_received+0xe0>
   1ec80:	4680      	mov	r8, r0
   1ec82:	460d      	mov	r5, r1
   1ec84:	4616      	mov	r6, r2
   1ec86:	2700      	movs	r7, #0
   1ec88:	eb09 0407 	add.w	r4, r9, r7
		if (!net_context_is_used(&contexts[i])) {
   1ec8c:	4620      	mov	r0, r4
   1ec8e:	f7ff feb1 	bl	1e9f4 <net_context_is_used>
   1ec92:	b110      	cbz	r0, 1ec9a <net_context_packet_received+0x22>
		if (contexts[i].conn_handler == conn_handler) {
   1ec94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ec96:	4598      	cmp	r8, r3
   1ec98:	d01a      	beq.n	1ecd0 <net_context_packet_received+0x58>
   1ec9a:	3768      	adds	r7, #104	; 0x68
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ec9c:	f5b7 7f02 	cmp.w	r7, #520	; 0x208
   1eca0:	d1f2      	bne.n	1ec88 <net_context_packet_received+0x10>
	struct net_context *context = find_context(conn);

	NET_ASSERT(context);
   1eca2:	4b27      	ldr	r3, [pc, #156]	; (1ed40 <net_context_packet_received+0xc8>)
   1eca4:	681c      	ldr	r4, [r3, #0]
   1eca6:	f014 0407 	ands.w	r4, r4, #7
   1ecaa:	d011      	beq.n	1ecd0 <net_context_packet_received+0x58>
   1ecac:	2301      	movs	r3, #1
   1ecae:	f04f 0200 	mov.w	r2, #0
   1ecb2:	f363 0202 	bfi	r2, r3, #0, #3
   1ecb6:	4923      	ldr	r1, [pc, #140]	; (1ed44 <net_context_packet_received+0xcc>)
   1ecb8:	4b23      	ldr	r3, [pc, #140]	; (1ed48 <net_context_packet_received+0xd0>)
   1ecba:	4824      	ldr	r0, [pc, #144]	; (1ed4c <net_context_packet_received+0xd4>)
   1ecbc:	1a5b      	subs	r3, r3, r1
   1ecbe:	08db      	lsrs	r3, r3, #3
   1ecc0:	f36f 02c5 	bfc	r2, #3, #3
   1ecc4:	f363 128f 	bfi	r2, r3, #6, #10
   1ecc8:	4921      	ldr	r1, [pc, #132]	; (1ed50 <net_context_packet_received+0xd8>)
   1ecca:	f7e3 f845 	bl	1d58 <log_1>
	return NULL;
   1ecce:	2400      	movs	r4, #0
	NET_ASSERT(net_pkt_iface(pkt));
   1ecd0:	6a2b      	ldr	r3, [r5, #32]
   1ecd2:	b9a3      	cbnz	r3, 1ecfe <net_context_packet_received+0x86>
   1ecd4:	4a1a      	ldr	r2, [pc, #104]	; (1ed40 <net_context_packet_received+0xc8>)
   1ecd6:	6812      	ldr	r2, [r2, #0]
   1ecd8:	0752      	lsls	r2, r2, #29
   1ecda:	d010      	beq.n	1ecfe <net_context_packet_received+0x86>
   1ecdc:	2101      	movs	r1, #1
   1ecde:	f04f 0200 	mov.w	r2, #0
   1ece2:	f361 0202 	bfi	r2, r1, #0, #3
   1ece6:	f363 02c5 	bfi	r2, r3, #3, #3
   1ecea:	4916      	ldr	r1, [pc, #88]	; (1ed44 <net_context_packet_received+0xcc>)
   1ecec:	4b16      	ldr	r3, [pc, #88]	; (1ed48 <net_context_packet_received+0xd0>)
   1ecee:	4819      	ldr	r0, [pc, #100]	; (1ed54 <net_context_packet_received+0xdc>)
   1ecf0:	1a5b      	subs	r3, r3, r1
   1ecf2:	08db      	lsrs	r3, r3, #3
   1ecf4:	f363 128f 	bfi	r2, r3, #6, #10
   1ecf8:	4915      	ldr	r1, [pc, #84]	; (1ed50 <net_context_packet_received+0xd8>)
   1ecfa:	f7e3 f82d 	bl	1d58 <log_1>

	net_context_set_iface(context, net_pkt_iface(pkt));
   1ecfe:	6a29      	ldr	r1, [r5, #32]
   1ed00:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1ed04:	f7ff ff90 	bl	1ec28 <net_context_set_iface.isra.10>

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1ed08:	6b23      	ldr	r3, [r4, #48]	; 0x30
	pkt->context = ctx;
   1ed0a:	61ac      	str	r4, [r5, #24]
   1ed0c:	b1ab      	cbz	r3, 1ed3a <net_context_packet_received+0xc2>
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1ed0e:	4620      	mov	r0, r4
   1ed10:	f7ff fe98 	bl	1ea44 <net_context_get_ip_proto>
   1ed14:	2806      	cmp	r0, #6
   1ed16:	d003      	beq.n	1ed20 <net_context_packet_received+0xa8>
		/* TCP packets get appdata earlier in tcp_established(). */
		net_pkt_set_appdata_values(pkt, IPPROTO_UDP);
   1ed18:	2111      	movs	r1, #17
   1ed1a:	4628      	mov	r0, r5
   1ed1c:	f002 ff84 	bl	21c28 <net_pkt_set_appdata_values>

	NET_DBG("Set appdata %p to len %u (total %zu)",
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1ed20:	4633      	mov	r3, r6
   1ed22:	2200      	movs	r2, #0
   1ed24:	4629      	mov	r1, r5
   1ed26:	4620      	mov	r0, r4
   1ed28:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1ed2a:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1ed2c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1ed30:	f00d fb25 	bl	2c37e <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1ed34:	2000      	movs	r0, #0
}
   1ed36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NET_DROP;
   1ed3a:	2002      	movs	r0, #2
   1ed3c:	e7fb      	b.n	1ed36 <net_context_packet_received+0xbe>
   1ed3e:	bf00      	nop
   1ed40:	2000d78c 	.word	0x2000d78c
   1ed44:	0002cff8 	.word	0x0002cff8
   1ed48:	0002d0f0 	.word	0x0002d0f0
   1ed4c:	000322d6 	.word	0x000322d6
   1ed50:	00031e78 	.word	0x00031e78
   1ed54:	000322f5 	.word	0x000322f5
   1ed58:	20002040 	.word	0x20002040

0001ed5c <net_context_get>:
{
   1ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (family == AF_INET) {
   1ed60:	2802      	cmp	r0, #2
{
   1ed62:	b085      	sub	sp, #20
   1ed64:	468a      	mov	sl, r1
   1ed66:	4691      	mov	r9, r2
   1ed68:	4698      	mov	r8, r3
	if (family == AF_INET) {
   1ed6a:	d117      	bne.n	1ed9c <net_context_get+0x40>
		NET_ASSERT_INFO(family != AF_INET, "IPv4 disabled");
   1ed6c:	4b99      	ldr	r3, [pc, #612]	; (1efd4 <net_context_get+0x278>)
   1ed6e:	681b      	ldr	r3, [r3, #0]
   1ed70:	075d      	lsls	r5, r3, #29
   1ed72:	d010      	beq.n	1ed96 <net_context_get+0x3a>
   1ed74:	2301      	movs	r3, #1
   1ed76:	f04f 0200 	mov.w	r2, #0
   1ed7a:	f363 0202 	bfi	r2, r3, #0, #3
   1ed7e:	4996      	ldr	r1, [pc, #600]	; (1efd8 <net_context_get+0x27c>)
   1ed80:	4b96      	ldr	r3, [pc, #600]	; (1efdc <net_context_get+0x280>)
   1ed82:	4897      	ldr	r0, [pc, #604]	; (1efe0 <net_context_get+0x284>)
   1ed84:	1a5b      	subs	r3, r3, r1
   1ed86:	f36f 02c5 	bfc	r2, #3, #3
   1ed8a:	08db      	lsrs	r3, r3, #3
   1ed8c:	f363 128f 	bfi	r2, r3, #6, #10
   1ed90:	4994      	ldr	r1, [pc, #592]	; (1efe4 <net_context_get+0x288>)
   1ed92:	f7e2 ffe1 	bl	1d58 <log_1>
		return -EPFNOSUPPORT;
   1ed96:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   1ed9a:	e06f      	b.n	1ee7c <net_context_get+0x120>
	if (family != AF_INET && family != AF_INET6) {
   1ed9c:	280a      	cmp	r0, #10
   1ed9e:	d018      	beq.n	1edd2 <net_context_get+0x76>
		NET_ASSERT_INFO(family == AF_INET || family == AF_INET6,
   1eda0:	4b8c      	ldr	r3, [pc, #560]	; (1efd4 <net_context_get+0x278>)
   1eda2:	681b      	ldr	r3, [r3, #0]
   1eda4:	075c      	lsls	r4, r3, #29
   1eda6:	d011      	beq.n	1edcc <net_context_get+0x70>
   1eda8:	2201      	movs	r2, #1
   1edaa:	f04f 0300 	mov.w	r3, #0
   1edae:	f362 0302 	bfi	r3, r2, #0, #3
   1edb2:	4989      	ldr	r1, [pc, #548]	; (1efd8 <net_context_get+0x27c>)
   1edb4:	4a89      	ldr	r2, [pc, #548]	; (1efdc <net_context_get+0x280>)
   1edb6:	1a52      	subs	r2, r2, r1
   1edb8:	08d2      	lsrs	r2, r2, #3
   1edba:	f36f 03c5 	bfc	r3, #3, #3
   1edbe:	f362 138f 	bfi	r3, r2, #6, #10
   1edc2:	4988      	ldr	r1, [pc, #544]	; (1efe4 <net_context_get+0x288>)
   1edc4:	4602      	mov	r2, r0
   1edc6:	4888      	ldr	r0, [pc, #544]	; (1efe8 <net_context_get+0x28c>)
   1edc8:	f7e2 ffda 	bl	1d80 <log_2>
		return -EAFNOSUPPORT;
   1edcc:	f06f 042e 	mvn.w	r4, #46	; 0x2e
   1edd0:	e054      	b.n	1ee7c <net_context_get+0x120>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1edd2:	1e4b      	subs	r3, r1, #1
   1edd4:	2b01      	cmp	r3, #1
   1edd6:	d917      	bls.n	1ee08 <net_context_get+0xac>
		NET_ASSERT_INFO(type == SOCK_DGRAM || type == SOCK_STREAM,
   1edd8:	4b7e      	ldr	r3, [pc, #504]	; (1efd4 <net_context_get+0x278>)
   1edda:	681b      	ldr	r3, [r3, #0]
   1eddc:	0758      	lsls	r0, r3, #29
   1edde:	d010      	beq.n	1ee02 <net_context_get+0xa6>
   1ede0:	2301      	movs	r3, #1
   1ede2:	f04f 0200 	mov.w	r2, #0
   1ede6:	f363 0202 	bfi	r2, r3, #0, #3
   1edea:	497b      	ldr	r1, [pc, #492]	; (1efd8 <net_context_get+0x27c>)
   1edec:	4b7b      	ldr	r3, [pc, #492]	; (1efdc <net_context_get+0x280>)
   1edee:	487f      	ldr	r0, [pc, #508]	; (1efec <net_context_get+0x290>)
   1edf0:	1a5b      	subs	r3, r3, r1
   1edf2:	f36f 02c5 	bfc	r2, #3, #3
   1edf6:	08db      	lsrs	r3, r3, #3
   1edf8:	f363 128f 	bfi	r2, r3, #6, #10
   1edfc:	4979      	ldr	r1, [pc, #484]	; (1efe4 <net_context_get+0x288>)
   1edfe:	f7e2 ffab 	bl	1d58 <log_1>
		return -EPROTOTYPE;
   1ee02:	f06f 0428 	mvn.w	r4, #40	; 0x28
   1ee06:	e039      	b.n	1ee7c <net_context_get+0x120>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1ee08:	2a11      	cmp	r2, #17
   1ee0a:	f000 80a6 	beq.w	1ef5a <net_context_get+0x1fe>
   1ee0e:	2a06      	cmp	r2, #6
   1ee10:	f000 80c1 	beq.w	1ef96 <net_context_get+0x23a>
		NET_ASSERT_INFO(ip_proto == IPPROTO_UDP ||
   1ee14:	4b6f      	ldr	r3, [pc, #444]	; (1efd4 <net_context_get+0x278>)
   1ee16:	681b      	ldr	r3, [r3, #0]
   1ee18:	0759      	lsls	r1, r3, #29
   1ee1a:	d010      	beq.n	1ee3e <net_context_get+0xe2>
   1ee1c:	2101      	movs	r1, #1
   1ee1e:	f04f 0300 	mov.w	r3, #0
   1ee22:	f361 0302 	bfi	r3, r1, #0, #3
   1ee26:	486c      	ldr	r0, [pc, #432]	; (1efd8 <net_context_get+0x27c>)
   1ee28:	496c      	ldr	r1, [pc, #432]	; (1efdc <net_context_get+0x280>)
   1ee2a:	1a09      	subs	r1, r1, r0
   1ee2c:	08c9      	lsrs	r1, r1, #3
   1ee2e:	f36f 03c5 	bfc	r3, #3, #3
   1ee32:	f361 138f 	bfi	r3, r1, #6, #10
   1ee36:	486e      	ldr	r0, [pc, #440]	; (1eff0 <net_context_get+0x294>)
   1ee38:	496a      	ldr	r1, [pc, #424]	; (1efe4 <net_context_get+0x288>)
   1ee3a:	f7e2 ffa1 	bl	1d80 <log_2>
		return -EPROTONOSUPPORT;
   1ee3e:	f06f 042a 	mvn.w	r4, #42	; 0x2a
   1ee42:	e01b      	b.n	1ee7c <net_context_get+0x120>
   1ee44:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 1f000 <net_context_get+0x2a4>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1ee48:	486a      	ldr	r0, [pc, #424]	; (1eff4 <net_context_get+0x298>)
   1ee4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ee4e:	f00d fabd 	bl	2c3cc <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ee52:	2400      	movs	r4, #0
   1ee54:	2368      	movs	r3, #104	; 0x68
   1ee56:	465d      	mov	r5, fp
   1ee58:	fb03 f604 	mul.w	r6, r3, r4
   1ee5c:	eb0b 0706 	add.w	r7, fp, r6
		if (net_context_is_used(&contexts[i])) {
   1ee60:	4638      	mov	r0, r7
   1ee62:	9303      	str	r3, [sp, #12]
   1ee64:	f7ff fdc6 	bl	1e9f4 <net_context_is_used>
   1ee68:	9b03      	ldr	r3, [sp, #12]
   1ee6a:	b158      	cbz	r0, 1ee84 <net_context_get+0x128>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ee6c:	3401      	adds	r4, #1
   1ee6e:	2c05      	cmp	r4, #5
   1ee70:	d1f2      	bne.n	1ee58 <net_context_get+0xfc>
	int i, ret = -ENOENT;
   1ee72:	f06f 0401 	mvn.w	r4, #1
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1ee76:	485f      	ldr	r0, [pc, #380]	; (1eff4 <net_context_get+0x298>)
   1ee78:	f00d fa81 	bl	2c37e <_impl_k_sem_give>
}
   1ee7c:	4620      	mov	r0, r4
   1ee7e:	b005      	add	sp, #20
   1ee80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ip_proto == IPPROTO_TCP) {
   1ee84:	f1b9 0f06 	cmp.w	r9, #6
   1ee88:	d059      	beq.n	1ef3e <net_context_get+0x1e2>
		contexts[i].iface = 0;
   1ee8a:	2268      	movs	r2, #104	; 0x68
   1ee8c:	fb02 5204 	mla	r2, r2, r4, r5
   1ee90:	2100      	movs	r1, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ee92:	19ab      	adds	r3, r5, r6
   1ee94:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
   1ee98:	3304      	adds	r3, #4
   1ee9a:	2101      	movs	r1, #1
   1ee9c:	f3bf 8f5b 	dmb	ish
   1eea0:	e853 0f00 	ldrex	r0, [r3]
   1eea4:	e843 1c00 	strex	ip, r1, [r3]
   1eea8:	f1bc 0f00 	cmp.w	ip, #0
   1eeac:	d1f8      	bne.n	1eea0 <net_context_get+0x144>
   1eeae:	f3bf 8f5b 	dmb	ish
		context->flags |= NET_CONTEXT_FAMILY;
   1eeb2:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
	if (type == SOCK_STREAM) {
   1eeb6:	f1ba 0f01 	cmp.w	sl, #1
		context->flags |= NET_CONTEXT_FAMILY;
   1eeba:	f043 0110 	orr.w	r1, r3, #16
   1eebe:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
	if (type == SOCK_STREAM) {
   1eec2:	d142      	bne.n	1ef4a <net_context_get+0x1ee>
		context->flags |= NET_CONTEXT_TYPE;
   1eec4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	context->flags &= ~NET_CONTEXT_TYPE;
   1eec8:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
   1eecc:	2268      	movs	r2, #104	; 0x68
   1eece:	fb02 5204 	mla	r2, r2, r4, r5
	if (ip_proto == IPPROTO_TCP) {
   1eed2:	f1b9 0f06 	cmp.w	r9, #6
   1eed6:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
		(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1eeda:	f106 0014 	add.w	r0, r6, #20
		context->flags |= NET_CONTEXT_PROTO;
   1eede:	bf0c      	ite	eq
   1eee0:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
	context->flags &= ~NET_CONTEXT_PROTO;
   1eee4:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
		(void)memset(&contexts[i].local, 0,
   1eee8:	f106 0908 	add.w	r9, r6, #8
   1eeec:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
   1eef0:	44a9      	add	r9, r5
		(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1eef2:	2218      	movs	r2, #24
   1eef4:	2100      	movs	r1, #0
   1eef6:	4428      	add	r0, r5
   1eef8:	f7e6 fff3 	bl	5ee2 <memset>
		(void)memset(&contexts[i].local, 0,
   1eefc:	220c      	movs	r2, #12
   1eefe:	2100      	movs	r1, #0
   1ef00:	4648      	mov	r0, r9
   1ef02:	f7e6 ffee 	bl	5ee2 <memset>
			addr6->sin6_port = find_available_port(&contexts[i],
   1ef06:	4649      	mov	r1, r9
   1ef08:	4638      	mov	r0, r7
   1ef0a:	f7ff fe75 	bl	1ebf8 <find_available_port>
   1ef0e:	f8a9 0002 	strh.w	r0, [r9, #2]
			if (!addr6->sin6_port) {
   1ef12:	b1f8      	cbz	r0, 1ef54 <net_context_get+0x1f8>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1ef14:	f106 004c 	add.w	r0, r6, #76	; 0x4c
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1ef18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ef1c:	2101      	movs	r1, #1
   1ef1e:	4428      	add	r0, r5
   1ef20:	f00d fa24 	bl	2c36c <_impl_k_sem_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1ef24:	2368      	movs	r3, #104	; 0x68
   1ef26:	fb03 5404 	mla	r4, r3, r4, r5
   1ef2a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1ef2e:	f043 0301 	orr.w	r3, r3, #1
   1ef32:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
		*context = &contexts[i];
   1ef36:	f8c8 7000 	str.w	r7, [r8]
		ret = 0;
   1ef3a:	2400      	movs	r4, #0
		break;
   1ef3c:	e79b      	b.n	1ee76 <net_context_get+0x11a>
			if (net_tcp_get(&contexts[i]) < 0) {
   1ef3e:	4638      	mov	r0, r7
   1ef40:	f00b f800 	bl	29f44 <net_tcp_get>
   1ef44:	2800      	cmp	r0, #0
   1ef46:	daa0      	bge.n	1ee8a <net_context_get+0x12e>
   1ef48:	e793      	b.n	1ee72 <net_context_get+0x116>
	context->flags &= ~NET_CONTEXT_TYPE;
   1ef4a:	f023 0320 	bic.w	r3, r3, #32
   1ef4e:	f043 0310 	orr.w	r3, r3, #16
   1ef52:	e7b9      	b.n	1eec8 <net_context_get+0x16c>
				ret = -EADDRINUSE;
   1ef54:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1ef58:	e78d      	b.n	1ee76 <net_context_get+0x11a>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1ef5a:	2901      	cmp	r1, #1
   1ef5c:	d11d      	bne.n	1ef9a <net_context_get+0x23e>
		NET_ASSERT_INFO(\
   1ef5e:	4b1d      	ldr	r3, [pc, #116]	; (1efd4 <net_context_get+0x278>)
   1ef60:	681b      	ldr	r3, [r3, #0]
   1ef62:	075a      	lsls	r2, r3, #29
   1ef64:	d014      	beq.n	1ef90 <net_context_get+0x234>
   1ef66:	2301      	movs	r3, #1
   1ef68:	f04f 0200 	mov.w	r2, #0
   1ef6c:	f363 0202 	bfi	r2, r3, #0, #3
   1ef70:	4919      	ldr	r1, [pc, #100]	; (1efd8 <net_context_get+0x27c>)
   1ef72:	4b1a      	ldr	r3, [pc, #104]	; (1efdc <net_context_get+0x280>)
   1ef74:	4820      	ldr	r0, [pc, #128]	; (1eff8 <net_context_get+0x29c>)
   1ef76:	1a5b      	subs	r3, r3, r1
   1ef78:	08db      	lsrs	r3, r3, #3
   1ef7a:	f36f 02c5 	bfc	r2, #3, #3
   1ef7e:	f363 128f 	bfi	r2, r3, #6, #10
   1ef82:	f8ad 2000 	strh.w	r2, [sp]
   1ef86:	464b      	mov	r3, r9
   1ef88:	4652      	mov	r2, sl
   1ef8a:	4916      	ldr	r1, [pc, #88]	; (1efe4 <net_context_get+0x288>)
   1ef8c:	f7e2 ff10 	bl	1db0 <log_3>
		return -EOPNOTSUPP;
   1ef90:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   1ef94:	e772      	b.n	1ee7c <net_context_get+0x120>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1ef96:	2901      	cmp	r1, #1
   1ef98:	d1e1      	bne.n	1ef5e <net_context_get+0x202>
	if (!context) {
   1ef9a:	f1b8 0f00 	cmp.w	r8, #0
   1ef9e:	f47f af51 	bne.w	1ee44 <net_context_get+0xe8>
		NET_ASSERT_INFO(context, "Invalid context");
   1efa2:	4b0c      	ldr	r3, [pc, #48]	; (1efd4 <net_context_get+0x278>)
   1efa4:	681b      	ldr	r3, [r3, #0]
   1efa6:	075b      	lsls	r3, r3, #29
   1efa8:	d010      	beq.n	1efcc <net_context_get+0x270>
   1efaa:	2301      	movs	r3, #1
   1efac:	f04f 0200 	mov.w	r2, #0
   1efb0:	f363 0202 	bfi	r2, r3, #0, #3
   1efb4:	4908      	ldr	r1, [pc, #32]	; (1efd8 <net_context_get+0x27c>)
   1efb6:	4b09      	ldr	r3, [pc, #36]	; (1efdc <net_context_get+0x280>)
   1efb8:	4810      	ldr	r0, [pc, #64]	; (1effc <net_context_get+0x2a0>)
   1efba:	1a5b      	subs	r3, r3, r1
   1efbc:	f368 02c5 	bfi	r2, r8, #3, #3
   1efc0:	08db      	lsrs	r3, r3, #3
   1efc2:	f363 128f 	bfi	r2, r3, #6, #10
   1efc6:	4907      	ldr	r1, [pc, #28]	; (1efe4 <net_context_get+0x288>)
   1efc8:	f7e2 fec6 	bl	1d58 <log_1>
		return -EINVAL;
   1efcc:	f06f 0415 	mvn.w	r4, #21
   1efd0:	e754      	b.n	1ee7c <net_context_get+0x120>
   1efd2:	bf00      	nop
   1efd4:	2000d78c 	.word	0x2000d78c
   1efd8:	0002cff8 	.word	0x0002cff8
   1efdc:	0002d0f0 	.word	0x0002d0f0
   1efe0:	000320b0 	.word	0x000320b0
   1efe4:	00031f19 	.word	0x00031f19
   1efe8:	000320e7 	.word	0x000320e7
   1efec:	00032140 	.word	0x00032140
   1eff0:	00032196 	.word	0x00032196
   1eff4:	20002248 	.word	0x20002248
   1eff8:	000321f7 	.word	0x000321f7
   1effc:	000322a7 	.word	0x000322a7
   1f000:	20002040 	.word	0x20002040

0001f004 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f004:	1d03      	adds	r3, r0, #4
   1f006:	f3bf 8f5b 	dmb	ish
   1f00a:	e853 0f00 	ldrex	r0, [r3]
   1f00e:	1c42      	adds	r2, r0, #1
   1f010:	e843 2100 	strex	r1, r2, [r3]
   1f014:	2900      	cmp	r1, #0
   1f016:	d1f8      	bne.n	1f00a <net_context_ref+0x6>
   1f018:	f3bf 8f5b 	dmb	ish
}
   1f01c:	3001      	adds	r0, #1
   1f01e:	4770      	bx	lr

0001f020 <net_context_unref>:
{
   1f020:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f022:	1d03      	adds	r3, r0, #4
   1f024:	4604      	mov	r4, r0
   1f026:	f3bf 8f5b 	dmb	ish
   1f02a:	e853 0f00 	ldrex	r0, [r3]
   1f02e:	1e42      	subs	r2, r0, #1
   1f030:	e843 2100 	strex	r1, r2, [r3]
   1f034:	2900      	cmp	r1, #0
   1f036:	d1f8      	bne.n	1f02a <net_context_unref+0xa>
   1f038:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1f03c:	2801      	cmp	r0, #1
   1f03e:	d001      	beq.n	1f044 <net_context_unref+0x24>
		return old_rc - 1;
   1f040:	3801      	subs	r0, #1
}
   1f042:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1f044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f048:	480b      	ldr	r0, [pc, #44]	; (1f078 <net_context_unref+0x58>)
   1f04a:	f00d f9bf 	bl	2c3cc <_impl_k_sem_take>
	net_tcp_unref(context);
   1f04e:	4620      	mov	r0, r4
   1f050:	f00a ffb6 	bl	29fc0 <net_tcp_unref>
	if (context->conn_handler) {
   1f054:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1f056:	b118      	cbz	r0, 1f060 <net_context_unref+0x40>
		net_conn_unregister(context->conn_handler);
   1f058:	f009 f980 	bl	2835c <net_conn_unregister>
		context->conn_handler = NULL;
   1f05c:	2300      	movs	r3, #0
   1f05e:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   1f060:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1f064:	4804      	ldr	r0, [pc, #16]	; (1f078 <net_context_unref+0x58>)
   1f066:	f023 0307 	bic.w	r3, r3, #7
   1f06a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   1f06e:	f00d f986 	bl	2c37e <_impl_k_sem_give>
   1f072:	2000      	movs	r0, #0
   1f074:	e7e5      	b.n	1f042 <net_context_unref+0x22>
   1f076:	bf00      	nop
   1f078:	20002248 	.word	0x20002248

0001f07c <net_context_put>:
{
   1f07c:	b538      	push	{r3, r4, r5, lr}
	NET_ASSERT(context);
   1f07e:	4605      	mov	r5, r0
   1f080:	b9b8      	cbnz	r0, 1f0b2 <net_context_put+0x36>
   1f082:	4b16      	ldr	r3, [pc, #88]	; (1f0dc <net_context_put+0x60>)
   1f084:	681b      	ldr	r3, [r3, #0]
   1f086:	075b      	lsls	r3, r3, #29
   1f088:	d010      	beq.n	1f0ac <net_context_put+0x30>
   1f08a:	2301      	movs	r3, #1
   1f08c:	f04f 0200 	mov.w	r2, #0
   1f090:	f363 0202 	bfi	r2, r3, #0, #3
   1f094:	4912      	ldr	r1, [pc, #72]	; (1f0e0 <net_context_put+0x64>)
   1f096:	4b13      	ldr	r3, [pc, #76]	; (1f0e4 <net_context_put+0x68>)
   1f098:	1a5b      	subs	r3, r3, r1
   1f09a:	f360 02c5 	bfi	r2, r0, #3, #3
   1f09e:	08db      	lsrs	r3, r3, #3
   1f0a0:	f363 128f 	bfi	r2, r3, #6, #10
   1f0a4:	4910      	ldr	r1, [pc, #64]	; (1f0e8 <net_context_put+0x6c>)
   1f0a6:	4811      	ldr	r0, [pc, #68]	; (1f0ec <net_context_put+0x70>)
   1f0a8:	f7e2 fe56 	bl	1d58 <log_1>
		return -EINVAL;
   1f0ac:	f06f 0015 	mvn.w	r0, #21
   1f0b0:	e012      	b.n	1f0d8 <net_context_put+0x5c>
	if (!PART_OF_ARRAY(contexts, context)) {
   1f0b2:	4b0f      	ldr	r3, [pc, #60]	; (1f0f0 <net_context_put+0x74>)
   1f0b4:	4298      	cmp	r0, r3
   1f0b6:	d3f9      	bcc.n	1f0ac <net_context_put+0x30>
   1f0b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1f0bc:	429d      	cmp	r5, r3
   1f0be:	d2f5      	bcs.n	1f0ac <net_context_put+0x30>
	context->connect_cb = NULL;
   1f0c0:	2400      	movs	r4, #0
   1f0c2:	63ac      	str	r4, [r5, #56]	; 0x38
	context->send_cb = NULL;
   1f0c4:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
	if (net_tcp_put(context) >= 0) {
   1f0c8:	f00a fef9 	bl	29ebe <net_tcp_put>
   1f0cc:	42a0      	cmp	r0, r4
   1f0ce:	da02      	bge.n	1f0d6 <net_context_put+0x5a>
	net_context_unref(context);
   1f0d0:	4628      	mov	r0, r5
   1f0d2:	f7ff ffa5 	bl	1f020 <net_context_unref>
		return 0;
   1f0d6:	4620      	mov	r0, r4
}
   1f0d8:	bd38      	pop	{r3, r4, r5, pc}
   1f0da:	bf00      	nop
   1f0dc:	2000d78c 	.word	0x2000d78c
   1f0e0:	0002cff8 	.word	0x0002cff8
   1f0e4:	0002d0f0 	.word	0x0002d0f0
   1f0e8:	00031f29 	.word	0x00031f29
   1f0ec:	000322d6 	.word	0x000322d6
   1f0f0:	20002040 	.word	0x20002040

0001f0f4 <net_context_bind>:
{
   1f0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f0f6:	4605      	mov	r5, r0
   1f0f8:	4614      	mov	r4, r2
	NET_ASSERT(addr);
   1f0fa:	460e      	mov	r6, r1
   1f0fc:	b9a9      	cbnz	r1, 1f12a <net_context_bind+0x36>
   1f0fe:	4b5f      	ldr	r3, [pc, #380]	; (1f27c <net_context_bind+0x188>)
   1f100:	681b      	ldr	r3, [r3, #0]
   1f102:	0758      	lsls	r0, r3, #29
   1f104:	f000 80b2 	beq.w	1f26c <net_context_bind+0x178>
   1f108:	2301      	movs	r3, #1
   1f10a:	f04f 0200 	mov.w	r2, #0
   1f10e:	f363 0202 	bfi	r2, r3, #0, #3
   1f112:	f361 02c5 	bfi	r2, r1, #3, #3
   1f116:	4b5a      	ldr	r3, [pc, #360]	; (1f280 <net_context_bind+0x18c>)
   1f118:	495a      	ldr	r1, [pc, #360]	; (1f284 <net_context_bind+0x190>)
   1f11a:	485b      	ldr	r0, [pc, #364]	; (1f288 <net_context_bind+0x194>)
   1f11c:	1a5b      	subs	r3, r3, r1
   1f11e:	08db      	lsrs	r3, r3, #3
   1f120:	f363 128f 	bfi	r2, r3, #6, #10
   1f124:	4959      	ldr	r1, [pc, #356]	; (1f28c <net_context_bind+0x198>)
   1f126:	f7e2 fe17 	bl	1d58 <log_1>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1f12a:	b9ad      	cbnz	r5, 1f158 <net_context_bind+0x64>
   1f12c:	4b53      	ldr	r3, [pc, #332]	; (1f27c <net_context_bind+0x188>)
   1f12e:	681b      	ldr	r3, [r3, #0]
   1f130:	0759      	lsls	r1, r3, #29
   1f132:	d017      	beq.n	1f164 <net_context_bind+0x70>
   1f134:	2301      	movs	r3, #1
   1f136:	f04f 0200 	mov.w	r2, #0
   1f13a:	f363 0202 	bfi	r2, r3, #0, #3
   1f13e:	4951      	ldr	r1, [pc, #324]	; (1f284 <net_context_bind+0x190>)
   1f140:	4b4f      	ldr	r3, [pc, #316]	; (1f280 <net_context_bind+0x18c>)
   1f142:	4853      	ldr	r0, [pc, #332]	; (1f290 <net_context_bind+0x19c>)
   1f144:	1a5b      	subs	r3, r3, r1
   1f146:	08db      	lsrs	r3, r3, #3
   1f148:	f36f 02c5 	bfc	r2, #3, #3
   1f14c:	f363 128f 	bfi	r2, r3, #6, #10
   1f150:	494e      	ldr	r1, [pc, #312]	; (1f28c <net_context_bind+0x198>)
   1f152:	f7e2 fe01 	bl	1d58 <log_1>
   1f156:	e005      	b.n	1f164 <net_context_bind+0x70>
   1f158:	4b4e      	ldr	r3, [pc, #312]	; (1f294 <net_context_bind+0x1a0>)
   1f15a:	429d      	cmp	r5, r3
   1f15c:	d3e6      	bcc.n	1f12c <net_context_bind+0x38>
   1f15e:	4b4e      	ldr	r3, [pc, #312]	; (1f298 <net_context_bind+0x1a4>)
   1f160:	429d      	cmp	r5, r3
   1f162:	d2e3      	bcs.n	1f12c <net_context_bind+0x38>
	if (context->conn_handler) {
   1f164:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1f166:	2b00      	cmp	r3, #0
   1f168:	d17a      	bne.n	1f260 <net_context_bind+0x16c>
	if (addr->sa_family == AF_INET6) {
   1f16a:	8832      	ldrh	r2, [r6, #0]
   1f16c:	2a0a      	cmp	r2, #10
   1f16e:	d17a      	bne.n	1f266 <net_context_bind+0x172>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1f170:	2c17      	cmp	r4, #23
		struct net_if *iface = NULL;
   1f172:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1f174:	d977      	bls.n	1f266 <net_context_bind+0x172>
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1f176:	7933      	ldrb	r3, [r6, #4]
   1f178:	2bff      	cmp	r3, #255	; 0xff
   1f17a:	f106 0704 	add.w	r7, r6, #4
   1f17e:	d10a      	bne.n	1f196 <net_context_bind+0xa2>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1f180:	a901      	add	r1, sp, #4
   1f182:	4638      	mov	r0, r7
   1f184:	f001 fa88 	bl	20698 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1f188:	2800      	cmp	r0, #0
   1f18a:	d137      	bne.n	1f1fc <net_context_bind+0x108>
				return -ENOENT;
   1f18c:	f06f 0401 	mvn.w	r4, #1
}
   1f190:	4620      	mov	r0, r4
   1f192:	b003      	add	sp, #12
   1f194:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1f196:	4638      	mov	r0, r7
   1f198:	f7ff fc1e 	bl	1e9d8 <net_is_ipv6_addr_unspecified>
   1f19c:	b348      	cbz	r0, 1f1f2 <net_context_bind+0xfe>
			iface = net_if_ipv6_select_src_iface(
   1f19e:	f105 0018 	add.w	r0, r5, #24
   1f1a2:	f001 fd9d 	bl	20ce0 <net_if_ipv6_select_src_iface>
   1f1a6:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1f1a8:	f004 fe0e 	bl	23dc8 <net_ipv6_unspecified_address>
   1f1ac:	4604      	mov	r4, r0
		if (!iface) {
   1f1ae:	9901      	ldr	r1, [sp, #4]
   1f1b0:	bb31      	cbnz	r1, 1f200 <net_context_bind+0x10c>
			NET_ERR("Cannot bind to %s",
   1f1b2:	4b32      	ldr	r3, [pc, #200]	; (1f27c <net_context_bind+0x188>)
   1f1b4:	681b      	ldr	r3, [r3, #0]
   1f1b6:	075a      	lsls	r2, r3, #29
   1f1b8:	d018      	beq.n	1f1ec <net_context_bind+0xf8>
   1f1ba:	2301      	movs	r3, #1
   1f1bc:	f04f 0400 	mov.w	r4, #0
   1f1c0:	f363 0402 	bfi	r4, r3, #0, #3
   1f1c4:	4a2e      	ldr	r2, [pc, #184]	; (1f280 <net_context_bind+0x18c>)
   1f1c6:	4b2f      	ldr	r3, [pc, #188]	; (1f284 <net_context_bind+0x190>)
   1f1c8:	1ad2      	subs	r2, r2, r3
   1f1ca:	08d2      	lsrs	r2, r2, #3
   1f1cc:	f361 04c5 	bfi	r4, r1, #3, #3
   1f1d0:	200a      	movs	r0, #10
   1f1d2:	4639      	mov	r1, r7
   1f1d4:	f362 148f 	bfi	r4, r2, #6, #10
   1f1d8:	f002 ff8e 	bl	220f8 <net_sprint_addr>
   1f1dc:	f7e2 ff4e 	bl	207c <log_strdup>
   1f1e0:	4623      	mov	r3, r4
   1f1e2:	4602      	mov	r2, r0
   1f1e4:	4929      	ldr	r1, [pc, #164]	; (1f28c <net_context_bind+0x198>)
   1f1e6:	482d      	ldr	r0, [pc, #180]	; (1f29c <net_context_bind+0x1a8>)
   1f1e8:	f7e2 fdca 	bl	1d80 <log_2>
			return -EADDRNOTAVAIL;
   1f1ec:	f06f 0430 	mvn.w	r4, #48	; 0x30
   1f1f0:	e7ce      	b.n	1f190 <net_context_bind+0x9c>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1f1f2:	a901      	add	r1, sp, #4
   1f1f4:	4638      	mov	r0, r7
   1f1f6:	f000 fde5 	bl	1fdc4 <net_if_ipv6_addr_lookup>
   1f1fa:	e7c5      	b.n	1f188 <net_context_bind+0x94>
			ptr = &ifaddr->address.in6_addr;
   1f1fc:	1d04      	adds	r4, r0, #4
   1f1fe:	e7d6      	b.n	1f1ae <net_context_bind+0xba>
		net_context_set_iface(context, iface);
   1f200:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1f204:	f7ff fd10 	bl	1ec28 <net_context_set_iface.isra.10>
		if (addr6->sin6_port) {
   1f208:	8871      	ldrh	r1, [r6, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1f20a:	60ec      	str	r4, [r5, #12]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1f20c:	200a      	movs	r0, #10
   1f20e:	8128      	strh	r0, [r5, #8]
		if (addr6->sin6_port) {
   1f210:	b311      	cbz	r1, 1f258 <net_context_bind+0x164>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1f212:	4632      	mov	r2, r6
   1f214:	f7ff fcbc 	bl	1eb90 <check_used_port>
			if (!ret) {
   1f218:	4604      	mov	r4, r0
   1f21a:	b910      	cbnz	r0, 1f222 <net_context_bind+0x12e>
				net_sin6_ptr(&context->local)->sin6_port =
   1f21c:	8873      	ldrh	r3, [r6, #2]
   1f21e:	816b      	strh	r3, [r5, #10]
   1f220:	e7b6      	b.n	1f190 <net_context_bind+0x9c>
				NET_ERR("Port %d is in use!",
   1f222:	4b16      	ldr	r3, [pc, #88]	; (1f27c <net_context_bind+0x188>)
   1f224:	681b      	ldr	r3, [r3, #0]
   1f226:	075b      	lsls	r3, r3, #29
   1f228:	d0b2      	beq.n	1f190 <net_context_bind+0x9c>
   1f22a:	2201      	movs	r2, #1
   1f22c:	f04f 0300 	mov.w	r3, #0
   1f230:	f362 0302 	bfi	r3, r2, #0, #3
   1f234:	4913      	ldr	r1, [pc, #76]	; (1f284 <net_context_bind+0x190>)
   1f236:	4a12      	ldr	r2, [pc, #72]	; (1f280 <net_context_bind+0x18c>)
   1f238:	4819      	ldr	r0, [pc, #100]	; (1f2a0 <net_context_bind+0x1ac>)
   1f23a:	1a52      	subs	r2, r2, r1
   1f23c:	8871      	ldrh	r1, [r6, #2]
   1f23e:	08d2      	lsrs	r2, r2, #3
   1f240:	f36f 03c5 	bfc	r3, #3, #3
   1f244:	f362 138f 	bfi	r3, r2, #6, #10
   1f248:	020a      	lsls	r2, r1, #8
   1f24a:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   1f24e:	b292      	uxth	r2, r2
   1f250:	490e      	ldr	r1, [pc, #56]	; (1f28c <net_context_bind+0x198>)
   1f252:	f7e2 fd95 	bl	1d80 <log_2>
   1f256:	e79b      	b.n	1f190 <net_context_bind+0x9c>
			addr6->sin6_port =
   1f258:	896b      	ldrh	r3, [r5, #10]
   1f25a:	8073      	strh	r3, [r6, #2]
		return 0;
   1f25c:	460c      	mov	r4, r1
   1f25e:	e797      	b.n	1f190 <net_context_bind+0x9c>
		return -EISCONN;
   1f260:	f06f 0437 	mvn.w	r4, #55	; 0x37
   1f264:	e794      	b.n	1f190 <net_context_bind+0x9c>
	return -EINVAL;
   1f266:	f06f 0415 	mvn.w	r4, #21
   1f26a:	e791      	b.n	1f190 <net_context_bind+0x9c>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1f26c:	2d00      	cmp	r5, #0
   1f26e:	f43f af79 	beq.w	1f164 <net_context_bind+0x70>
   1f272:	4b08      	ldr	r3, [pc, #32]	; (1f294 <net_context_bind+0x1a0>)
   1f274:	429d      	cmp	r5, r3
   1f276:	f4ff af75 	bcc.w	1f164 <net_context_bind+0x70>
   1f27a:	e770      	b.n	1f15e <net_context_bind+0x6a>
   1f27c:	2000d78c 	.word	0x2000d78c
   1f280:	0002d0f0 	.word	0x0002d0f0
   1f284:	0002cff8 	.word	0x0002cff8
   1f288:	00031f76 	.word	0x00031f76
   1f28c:	00031f39 	.word	0x00031f39
   1f290:	00031f92 	.word	0x00031f92
   1f294:	20002040 	.word	0x20002040
   1f298:	20002248 	.word	0x20002248
   1f29c:	00031fca 	.word	0x00031fca
   1f2a0:	00031fe0 	.word	0x00031fe0

0001f2a4 <bind_default>:
{
   1f2a4:	b530      	push	{r4, r5, lr}
   1f2a6:	b087      	sub	sp, #28
   1f2a8:	4605      	mov	r5, r0
	sa_family_t family = net_context_get_family(context);
   1f2aa:	f7ff fc1d 	bl	1eae8 <net_context_get_family>
	if (family == AF_INET6) {
   1f2ae:	280a      	cmp	r0, #10
   1f2b0:	d11a      	bne.n	1f2e8 <bind_default+0x44>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1f2b2:	68eb      	ldr	r3, [r5, #12]
   1f2b4:	b9b3      	cbnz	r3, 1f2e4 <bind_default+0x40>
		addr6.sin6_family = AF_INET6;
   1f2b6:	ac06      	add	r4, sp, #24
   1f2b8:	f824 0d18 	strh.w	r0, [r4, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1f2bc:	f004 fd84 	bl	23dc8 <net_ipv6_unspecified_address>
   1f2c0:	2210      	movs	r2, #16
   1f2c2:	4601      	mov	r1, r0
   1f2c4:	a801      	add	r0, sp, #4
   1f2c6:	f7e6 fddf 	bl	5e88 <memcpy>
			find_available_port(context,
   1f2ca:	4621      	mov	r1, r4
   1f2cc:	4628      	mov	r0, r5
   1f2ce:	f7ff fc93 	bl	1ebf8 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1f2d2:	2218      	movs	r2, #24
		addr6.sin6_port =
   1f2d4:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1f2d8:	4621      	mov	r1, r4
   1f2da:	4628      	mov	r0, r5
   1f2dc:	f7ff ff0a 	bl	1f0f4 <net_context_bind>
}
   1f2e0:	b007      	add	sp, #28
   1f2e2:	bd30      	pop	{r4, r5, pc}
			return 0;
   1f2e4:	2000      	movs	r0, #0
   1f2e6:	e7fb      	b.n	1f2e0 <bind_default+0x3c>
	return -EINVAL;
   1f2e8:	f06f 0015 	mvn.w	r0, #21
   1f2ec:	e7f8      	b.n	1f2e0 <bind_default+0x3c>
	...

0001f2f0 <net_context_create_ipv6>:
{
   1f2f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f2f4:	461f      	mov	r7, r3
	NET_ASSERT(((struct sockaddr_in6_ptr *)&context->local)->sin6_addr);
   1f2f6:	68c3      	ldr	r3, [r0, #12]
{
   1f2f8:	4605      	mov	r5, r0
   1f2fa:	460e      	mov	r6, r1
   1f2fc:	4614      	mov	r4, r2
	NET_ASSERT(((struct sockaddr_in6_ptr *)&context->local)->sin6_addr);
   1f2fe:	b9a3      	cbnz	r3, 1f32a <net_context_create_ipv6+0x3a>
   1f300:	4a1a      	ldr	r2, [pc, #104]	; (1f36c <net_context_create_ipv6+0x7c>)
   1f302:	6812      	ldr	r2, [r2, #0]
   1f304:	0752      	lsls	r2, r2, #29
   1f306:	d010      	beq.n	1f32a <net_context_create_ipv6+0x3a>
   1f308:	2101      	movs	r1, #1
   1f30a:	f04f 0200 	mov.w	r2, #0
   1f30e:	f361 0202 	bfi	r2, r1, #0, #3
   1f312:	f363 02c5 	bfi	r2, r3, #3, #3
   1f316:	4916      	ldr	r1, [pc, #88]	; (1f370 <net_context_create_ipv6+0x80>)
   1f318:	4b16      	ldr	r3, [pc, #88]	; (1f374 <net_context_create_ipv6+0x84>)
   1f31a:	4817      	ldr	r0, [pc, #92]	; (1f378 <net_context_create_ipv6+0x88>)
   1f31c:	1a5b      	subs	r3, r3, r1
   1f31e:	08db      	lsrs	r3, r3, #3
   1f320:	f363 128f 	bfi	r2, r3, #6, #10
   1f324:	4915      	ldr	r1, [pc, #84]	; (1f37c <net_context_create_ipv6+0x8c>)
   1f326:	f7e2 fd17 	bl	1d58 <log_1>
	if (!src) {
   1f32a:	b904      	cbnz	r4, 1f32e <net_context_create_ipv6+0x3e>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1f32c:	68ec      	ldr	r4, [r5, #12]
	if (net_is_ipv6_addr_unspecified(src)
   1f32e:	4620      	mov	r0, r4
   1f330:	f7ff fb52 	bl	1e9d8 <net_is_ipv6_addr_unspecified>
   1f334:	b910      	cbnz	r0, 1f33c <net_context_create_ipv6+0x4c>
	    || net_is_ipv6_addr_mcast(src)) {
   1f336:	7823      	ldrb	r3, [r4, #0]
   1f338:	2bff      	cmp	r3, #255	; 0xff
   1f33a:	d104      	bne.n	1f346 <net_context_create_ipv6+0x56>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1f33c:	4639      	mov	r1, r7
   1f33e:	6a30      	ldr	r0, [r6, #32]
   1f340:	f001 fc8c 	bl	20c5c <net_if_ipv6_select_src_addr>
   1f344:	4604      	mov	r4, r0
	return net_if_get_by_index(context->iface);
   1f346:	f895 0064 	ldrb.w	r0, [r5, #100]	; 0x64
   1f34a:	f001 fda1 	bl	20e90 <net_if_get_by_index>
   1f34e:	4680      	mov	r8, r0
			       net_context_get_ip_proto(context));
   1f350:	4628      	mov	r0, r5
   1f352:	f7ff fb77 	bl	1ea44 <net_context_get_ip_proto>
	return net_ipv6_create(pkt,
   1f356:	4643      	mov	r3, r8
   1f358:	9000      	str	r0, [sp, #0]
   1f35a:	463a      	mov	r2, r7
   1f35c:	4621      	mov	r1, r4
   1f35e:	4630      	mov	r0, r6
   1f360:	f004 fd36 	bl	23dd0 <net_ipv6_create>
}
   1f364:	b002      	add	sp, #8
   1f366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f36a:	bf00      	nop
   1f36c:	2000d78c 	.word	0x2000d78c
   1f370:	0002cff8 	.word	0x0002cff8
   1f374:	0002d0f0 	.word	0x0002d0f0
   1f378:	00032061 	.word	0x00032061
   1f37c:	00031f4a 	.word	0x00031f4a

0001f380 <sendto.isra.13>:
static int sendto(struct net_pkt *pkt,
   1f380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_context *context = net_pkt_context(pkt);
   1f384:	6985      	ldr	r5, [r0, #24]
static int sendto(struct net_pkt *pkt,
   1f386:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   1f388:	4628      	mov	r0, r5
static int sendto(struct net_pkt *pkt,
   1f38a:	460e      	mov	r6, r1
   1f38c:	4692      	mov	sl, r2
   1f38e:	461f      	mov	r7, r3
   1f390:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	if (!net_context_is_used(context)) {
   1f394:	f7ff fb2e 	bl	1e9f4 <net_context_is_used>
   1f398:	2800      	cmp	r0, #0
   1f39a:	d065      	beq.n	1f468 <sendto.isra.13+0xe8>
	if (!dst_addr) {
   1f39c:	2e00      	cmp	r6, #0
   1f39e:	d069      	beq.n	1f474 <sendto.isra.13+0xf4>
	return pkt->family;
   1f3a0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   1f3a4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1f3a8:	2b0a      	cmp	r3, #10
   1f3aa:	d160      	bne.n	1f46e <sendto.isra.13+0xee>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1f3ac:	f1ba 0f17 	cmp.w	sl, #23
   1f3b0:	d95d      	bls.n	1f46e <sendto.isra.13+0xee>
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1f3b2:	f106 0a04 	add.w	sl, r6, #4
   1f3b6:	4650      	mov	r0, sl
   1f3b8:	f7ff fb0e 	bl	1e9d8 <net_is_ipv6_addr_unspecified>
   1f3bc:	2800      	cmp	r0, #0
   1f3be:	d159      	bne.n	1f474 <sendto.isra.13+0xf4>
	switch (net_context_get_ip_proto(context)) {
   1f3c0:	4628      	mov	r0, r5
   1f3c2:	f7ff fb3f 	bl	1ea44 <net_context_get_ip_proto>
   1f3c6:	2806      	cmp	r0, #6
   1f3c8:	d041      	beq.n	1f44e <sendto.isra.13+0xce>
   1f3ca:	2811      	cmp	r0, #17
   1f3cc:	d002      	beq.n	1f3d4 <sendto.isra.13+0x54>
		return -EPROTONOSUPPORT;
   1f3ce:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   1f3d2:	e012      	b.n	1f3fa <sendto.isra.13+0x7a>
		ret = bind_default(context);
   1f3d4:	4628      	mov	r0, r5
   1f3d6:	f7ff ff65 	bl	1f2a4 <bind_default>
		if (ret) {
   1f3da:	b970      	cbnz	r0, 1f3fa <sendto.isra.13+0x7a>
   1f3dc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   1f3e0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1f3e4:	2b0a      	cmp	r3, #10
   1f3e6:	d1f2      	bne.n	1f3ce <sendto.isra.13+0x4e>
		if (!net_context_create_ipv6(context, pkt,
   1f3e8:	4602      	mov	r2, r0
   1f3ea:	4653      	mov	r3, sl
   1f3ec:	4621      	mov	r1, r4
   1f3ee:	4628      	mov	r0, r5
   1f3f0:	f7ff ff7e 	bl	1f2f0 <net_context_create_ipv6>
   1f3f4:	b918      	cbnz	r0, 1f3fe <sendto.isra.13+0x7e>
			return -ENOMEM;
   1f3f6:	f06f 000b 	mvn.w	r0, #11
}
   1f3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tmp = net_udp_insert(pkt,
   1f3fe:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
				     net_pkt_ip_hdr_len(pkt) +
   1f402:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
		tmp = net_udp_insert(pkt,
   1f406:	896a      	ldrh	r2, [r5, #10]
   1f408:	4419      	add	r1, r3
   1f40a:	4620      	mov	r0, r4
   1f40c:	8873      	ldrh	r3, [r6, #2]
   1f40e:	b289      	uxth	r1, r1
   1f410:	f00a fe64 	bl	2a0dc <net_udp_insert>
		if (!tmp) {
   1f414:	4604      	mov	r4, r0
   1f416:	2800      	cmp	r0, #0
   1f418:	d0ed      	beq.n	1f3f6 <sendto.isra.13+0x76>
		r = net_ipv6_finalize(pkt, net_context_get_ip_proto(context));
   1f41a:	4628      	mov	r0, r5
   1f41c:	f7ff fb12 	bl	1ea44 <net_context_get_ip_proto>
   1f420:	4601      	mov	r1, r0
   1f422:	4620      	mov	r0, r4
   1f424:	f004 fd48 	bl	23eb8 <net_ipv6_finalize>
	if (ret < 0) {
   1f428:	2800      	cmp	r0, #0
   1f42a:	dbe6      	blt.n	1f3fa <sendto.isra.13+0x7a>
	context->send_cb = cb;
   1f42c:	636f      	str	r7, [r5, #52]	; 0x34
	context->user_data = user_data;
   1f42e:	f8c5 9000 	str.w	r9, [r5]
	switch (net_context_get_ip_proto(context)) {
   1f432:	4628      	mov	r0, r5
	pkt->token = token;
   1f434:	f8c4 801c 	str.w	r8, [r4, #28]
   1f438:	f7ff fb04 	bl	1ea44 <net_context_get_ip_proto>
   1f43c:	2806      	cmp	r0, #6
   1f43e:	d00b      	beq.n	1f458 <sendto.isra.13+0xd8>
   1f440:	2811      	cmp	r0, #17
   1f442:	d1c4      	bne.n	1f3ce <sendto.isra.13+0x4e>
		return net_send_data(pkt);
   1f444:	4620      	mov	r0, r4
}
   1f446:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_send_data(pkt);
   1f44a:	f000 b9ef 	b.w	1f82c <net_send_data>
		ret = net_tcp_queue_data(context, pkt);
   1f44e:	4621      	mov	r1, r4
   1f450:	4628      	mov	r0, r5
   1f452:	f009 fe31 	bl	290b8 <net_tcp_queue_data>
   1f456:	e7e7      	b.n	1f428 <sendto.isra.13+0xa8>
		return net_tcp_send_data(context, cb, token, user_data);
   1f458:	464b      	mov	r3, r9
   1f45a:	4642      	mov	r2, r8
   1f45c:	4639      	mov	r1, r7
   1f45e:	4628      	mov	r0, r5
}
   1f460:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_tcp_send_data(context, cb, token, user_data);
   1f464:	f00a bae2 	b.w	29a2c <net_tcp_send_data>
		return -EBADF;
   1f468:	f06f 0008 	mvn.w	r0, #8
   1f46c:	e7c5      	b.n	1f3fa <sendto.isra.13+0x7a>
		return -EINVAL;
   1f46e:	f06f 0015 	mvn.w	r0, #21
   1f472:	e7c2      	b.n	1f3fa <sendto.isra.13+0x7a>
		return -EDESTADDRREQ;
   1f474:	f06f 0027 	mvn.w	r0, #39	; 0x27
   1f478:	e7bf      	b.n	1f3fa <sendto.isra.13+0x7a>
	...

0001f47c <net_context_connect>:
{
   1f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f480:	b08f      	sub	sp, #60	; 0x3c
   1f482:	4604      	mov	r4, r0
   1f484:	4615      	mov	r5, r2
   1f486:	461f      	mov	r7, r3
   1f488:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
	NET_ASSERT(addr);
   1f48c:	460e      	mov	r6, r1
   1f48e:	b9a9      	cbnz	r1, 1f4bc <net_context_connect+0x40>
   1f490:	4b76      	ldr	r3, [pc, #472]	; (1f66c <net_context_connect+0x1f0>)
   1f492:	681b      	ldr	r3, [r3, #0]
   1f494:	0759      	lsls	r1, r3, #29
   1f496:	f000 80e1 	beq.w	1f65c <net_context_connect+0x1e0>
   1f49a:	2301      	movs	r3, #1
   1f49c:	f04f 0200 	mov.w	r2, #0
   1f4a0:	f363 0202 	bfi	r2, r3, #0, #3
   1f4a4:	4972      	ldr	r1, [pc, #456]	; (1f670 <net_context_connect+0x1f4>)
   1f4a6:	4b73      	ldr	r3, [pc, #460]	; (1f674 <net_context_connect+0x1f8>)
   1f4a8:	4873      	ldr	r0, [pc, #460]	; (1f678 <net_context_connect+0x1fc>)
   1f4aa:	1a5b      	subs	r3, r3, r1
   1f4ac:	f366 02c5 	bfi	r2, r6, #3, #3
   1f4b0:	08db      	lsrs	r3, r3, #3
   1f4b2:	f363 128f 	bfi	r2, r3, #6, #10
   1f4b6:	4971      	ldr	r1, [pc, #452]	; (1f67c <net_context_connect+0x200>)
   1f4b8:	f7e2 fc4e 	bl	1d58 <log_1>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1f4bc:	b9ac      	cbnz	r4, 1f4ea <net_context_connect+0x6e>
   1f4be:	4b6b      	ldr	r3, [pc, #428]	; (1f66c <net_context_connect+0x1f0>)
   1f4c0:	681b      	ldr	r3, [r3, #0]
   1f4c2:	075a      	lsls	r2, r3, #29
   1f4c4:	d017      	beq.n	1f4f6 <net_context_connect+0x7a>
   1f4c6:	2301      	movs	r3, #1
   1f4c8:	f04f 0200 	mov.w	r2, #0
   1f4cc:	f363 0202 	bfi	r2, r3, #0, #3
   1f4d0:	4967      	ldr	r1, [pc, #412]	; (1f670 <net_context_connect+0x1f4>)
   1f4d2:	4b68      	ldr	r3, [pc, #416]	; (1f674 <net_context_connect+0x1f8>)
   1f4d4:	486a      	ldr	r0, [pc, #424]	; (1f680 <net_context_connect+0x204>)
   1f4d6:	1a5b      	subs	r3, r3, r1
   1f4d8:	08db      	lsrs	r3, r3, #3
   1f4da:	f36f 02c5 	bfc	r2, #3, #3
   1f4de:	f363 128f 	bfi	r2, r3, #6, #10
   1f4e2:	4966      	ldr	r1, [pc, #408]	; (1f67c <net_context_connect+0x200>)
   1f4e4:	f7e2 fc38 	bl	1d58 <log_1>
   1f4e8:	e005      	b.n	1f4f6 <net_context_connect+0x7a>
   1f4ea:	4b66      	ldr	r3, [pc, #408]	; (1f684 <net_context_connect+0x208>)
   1f4ec:	429c      	cmp	r4, r3
   1f4ee:	d3e6      	bcc.n	1f4be <net_context_connect+0x42>
   1f4f0:	4b65      	ldr	r3, [pc, #404]	; (1f688 <net_context_connect+0x20c>)
   1f4f2:	429c      	cmp	r4, r3
   1f4f4:	d2e3      	bcs.n	1f4be <net_context_connect+0x42>
	if (!net_context_is_used(context)) {
   1f4f6:	4620      	mov	r0, r4
   1f4f8:	f7ff fa7c 	bl	1e9f4 <net_context_is_used>
   1f4fc:	2800      	cmp	r0, #0
   1f4fe:	f000 80a1 	beq.w	1f644 <net_context_connect+0x1c8>
	if (addr->sa_family != net_context_get_family(context)) {
   1f502:	4620      	mov	r0, r4
   1f504:	f8b6 9000 	ldrh.w	r9, [r6]
   1f508:	f7ff faee 	bl	1eae8 <net_context_get_family>
   1f50c:	4581      	cmp	r9, r0
   1f50e:	d029      	beq.n	1f564 <net_context_connect+0xe8>
		NET_ASSERT_INFO(addr->sa_family == \
   1f510:	4620      	mov	r0, r4
   1f512:	8835      	ldrh	r5, [r6, #0]
   1f514:	f7ff fae8 	bl	1eae8 <net_context_get_family>
   1f518:	4285      	cmp	r5, r0
   1f51a:	d105      	bne.n	1f528 <net_context_connect+0xac>
		return -EINVAL;
   1f51c:	f06f 0515 	mvn.w	r5, #21
}
   1f520:	4628      	mov	r0, r5
   1f522:	b00f      	add	sp, #60	; 0x3c
   1f524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_ASSERT_INFO(addr->sa_family == \
   1f528:	4b50      	ldr	r3, [pc, #320]	; (1f66c <net_context_connect+0x1f0>)
   1f52a:	681b      	ldr	r3, [r3, #0]
   1f52c:	075b      	lsls	r3, r3, #29
   1f52e:	d0f5      	beq.n	1f51c <net_context_connect+0xa0>
   1f530:	2301      	movs	r3, #1
   1f532:	f04f 0500 	mov.w	r5, #0
   1f536:	4a4e      	ldr	r2, [pc, #312]	; (1f670 <net_context_connect+0x1f4>)
   1f538:	8836      	ldrh	r6, [r6, #0]
   1f53a:	f363 0502 	bfi	r5, r3, #0, #3
   1f53e:	4b4d      	ldr	r3, [pc, #308]	; (1f674 <net_context_connect+0x1f8>)
   1f540:	1a9b      	subs	r3, r3, r2
   1f542:	08db      	lsrs	r3, r3, #3
   1f544:	4620      	mov	r0, r4
   1f546:	f36f 05c5 	bfc	r5, #3, #3
   1f54a:	f363 158f 	bfi	r5, r3, #6, #10
   1f54e:	f7ff facb 	bl	1eae8 <net_context_get_family>
   1f552:	f8ad 5000 	strh.w	r5, [sp]
   1f556:	4603      	mov	r3, r0
   1f558:	4632      	mov	r2, r6
   1f55a:	4948      	ldr	r1, [pc, #288]	; (1f67c <net_context_connect+0x200>)
   1f55c:	484b      	ldr	r0, [pc, #300]	; (1f68c <net_context_connect+0x210>)
   1f55e:	f7e2 fc27 	bl	1db0 <log_3>
   1f562:	e7db      	b.n	1f51c <net_context_connect+0xa0>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1f564:	4620      	mov	r0, r4
   1f566:	f7ff fa97 	bl	1ea98 <net_context_get_state>
   1f56a:	2803      	cmp	r0, #3
   1f56c:	d06d      	beq.n	1f64a <net_context_connect+0x1ce>
	if (net_context_get_family(context) == AF_INET6) {
   1f56e:	4620      	mov	r0, r4
   1f570:	f7ff faba 	bl	1eae8 <net_context_get_family>
   1f574:	280a      	cmp	r0, #10
   1f576:	d1d1      	bne.n	1f51c <net_context_connect+0xa0>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1f578:	2d17      	cmp	r5, #23
   1f57a:	d9cf      	bls.n	1f51c <net_context_connect+0xa0>
		if (net_context_get_ip_proto(context) == IPPROTO_TCP &&
   1f57c:	4620      	mov	r0, r4
   1f57e:	f7ff fa61 	bl	1ea44 <net_context_get_ip_proto>
   1f582:	2806      	cmp	r0, #6
   1f584:	d102      	bne.n	1f58c <net_context_connect+0x110>
   1f586:	7e23      	ldrb	r3, [r4, #24]
   1f588:	2bff      	cmp	r3, #255	; 0xff
   1f58a:	d061      	beq.n	1f650 <net_context_connect+0x1d4>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1f58c:	f104 0518 	add.w	r5, r4, #24
   1f590:	2210      	movs	r2, #16
   1f592:	1d31      	adds	r1, r6, #4
   1f594:	4628      	mov	r0, r5
   1f596:	f7e6 fc77 	bl	5e88 <memcpy>
		addr6->sin6_family = AF_INET6;
   1f59a:	230a      	movs	r3, #10
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1f59c:	f8b6 9002 	ldrh.w	r9, [r6, #2]
   1f5a0:	f8a4 9016 	strh.w	r9, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1f5a4:	82a3      	strh	r3, [r4, #20]
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1f5a6:	4628      	mov	r0, r5
   1f5a8:	f7ff fa16 	bl	1e9d8 <net_is_ipv6_addr_unspecified>
   1f5ac:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1f5b0:	bbb0      	cbnz	r0, 1f620 <net_context_connect+0x1a4>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1f5b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1f5b6:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
		ret = bind_default(context);
   1f5ba:	4620      	mov	r0, r4
   1f5bc:	f7ff fe72 	bl	1f2a4 <bind_default>
		if (ret) {
   1f5c0:	4605      	mov	r5, r0
   1f5c2:	2800      	cmp	r0, #0
   1f5c4:	d1ac      	bne.n	1f520 <net_context_connect+0xa4>
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1f5c6:	230a      	movs	r3, #10
   1f5c8:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1f5ca:	f8ad 3020 	strh.w	r3, [sp, #32]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1f5ce:	68e3      	ldr	r3, [r4, #12]
		net_sin6(&local_addr)->sin6_port = lport =
   1f5d0:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
   1f5d4:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1f5d8:	b32b      	cbz	r3, 1f626 <net_context_connect+0x1aa>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1f5da:	f10d 0c10 	add.w	ip, sp, #16
   1f5de:	f103 0b10 	add.w	fp, r3, #16
   1f5e2:	4662      	mov	r2, ip
   1f5e4:	6818      	ldr	r0, [r3, #0]
   1f5e6:	6859      	ldr	r1, [r3, #4]
   1f5e8:	46e6      	mov	lr, ip
   1f5ea:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1f5ee:	3308      	adds	r3, #8
   1f5f0:	455b      	cmp	r3, fp
   1f5f2:	46f4      	mov	ip, lr
   1f5f4:	d1f6      	bne.n	1f5e4 <net_context_connect+0x168>
   1f5f6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   1f5f8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   1f5fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			laddr = &local_addr;
   1f600:	f10d 0b20 	add.w	fp, sp, #32
	switch (net_context_get_type(context)) {
   1f604:	4620      	mov	r0, r4
   1f606:	f7ff fa99 	bl	1eb3c <net_context_get_type>
   1f60a:	2801      	cmp	r0, #1
   1f60c:	d00d      	beq.n	1f62a <net_context_connect+0x1ae>
   1f60e:	2802      	cmp	r0, #2
   1f610:	d121      	bne.n	1f656 <net_context_connect+0x1da>
		if (cb) {
   1f612:	2f00      	cmp	r7, #0
   1f614:	d084      	beq.n	1f520 <net_context_connect+0xa4>
			cb(context, 0, user_data);
   1f616:	4642      	mov	r2, r8
   1f618:	2100      	movs	r1, #0
   1f61a:	4620      	mov	r0, r4
   1f61c:	47b8      	blx	r7
   1f61e:	e77f      	b.n	1f520 <net_context_connect+0xa4>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1f620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f624:	e7c7      	b.n	1f5b6 <net_context_connect+0x13a>
	struct sockaddr *laddr = NULL;
   1f626:	4683      	mov	fp, r0
   1f628:	e7ec      	b.n	1f604 <net_context_connect+0x188>
		return net_tcp_connect(context, addr, laddr, rport, lport,
   1f62a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1f62c:	e9cd 7802 	strd	r7, r8, [sp, #8]
   1f630:	e9cd a300 	strd	sl, r3, [sp]
   1f634:	465a      	mov	r2, fp
   1f636:	464b      	mov	r3, r9
   1f638:	4631      	mov	r1, r6
   1f63a:	4620      	mov	r0, r4
   1f63c:	f00a fcdc 	bl	29ff8 <net_tcp_connect>
   1f640:	4605      	mov	r5, r0
   1f642:	e76d      	b.n	1f520 <net_context_connect+0xa4>
		return -EBADF;
   1f644:	f06f 0508 	mvn.w	r5, #8
   1f648:	e76a      	b.n	1f520 <net_context_connect+0xa4>
		return -EOPNOTSUPP;
   1f64a:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   1f64e:	e767      	b.n	1f520 <net_context_connect+0xa4>
			return -EADDRNOTAVAIL;
   1f650:	f06f 0530 	mvn.w	r5, #48	; 0x30
   1f654:	e764      	b.n	1f520 <net_context_connect+0xa4>
		return -ENOTSUP;
   1f656:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1f65a:	e761      	b.n	1f520 <net_context_connect+0xa4>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1f65c:	2800      	cmp	r0, #0
   1f65e:	f43f af4a 	beq.w	1f4f6 <net_context_connect+0x7a>
   1f662:	4b08      	ldr	r3, [pc, #32]	; (1f684 <net_context_connect+0x208>)
   1f664:	4298      	cmp	r0, r3
   1f666:	f4ff af46 	bcc.w	1f4f6 <net_context_connect+0x7a>
   1f66a:	e741      	b.n	1f4f0 <net_context_connect+0x74>
   1f66c:	2000d78c 	.word	0x2000d78c
   1f670:	0002cff8 	.word	0x0002cff8
   1f674:	0002d0f0 	.word	0x0002d0f0
   1f678:	00031f76 	.word	0x00031f76
   1f67c:	00031f62 	.word	0x00031f62
   1f680:	00031f92 	.word	0x00031f92
   1f684:	20002040 	.word	0x20002040
   1f688:	20002248 	.word	0x20002248
   1f68c:	00031ff7 	.word	0x00031ff7

0001f690 <net_context_send>:
{
   1f690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct net_context *context = net_pkt_context(pkt);
   1f692:	6984      	ldr	r4, [r0, #24]
{
   1f694:	4605      	mov	r5, r0
   1f696:	460e      	mov	r6, r1
   1f698:	461f      	mov	r7, r3
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1f69a:	b134      	cbz	r4, 1f6aa <net_context_send+0x1a>
   1f69c:	4a1c      	ldr	r2, [pc, #112]	; (1f710 <net_context_send+0x80>)
   1f69e:	4294      	cmp	r4, r2
   1f6a0:	d303      	bcc.n	1f6aa <net_context_send+0x1a>
   1f6a2:	f502 7202 	add.w	r2, r2, #520	; 0x208
   1f6a6:	4294      	cmp	r4, r2
   1f6a8:	d314      	bcc.n	1f6d4 <net_context_send+0x44>
   1f6aa:	4b1a      	ldr	r3, [pc, #104]	; (1f714 <net_context_send+0x84>)
   1f6ac:	681b      	ldr	r3, [r3, #0]
   1f6ae:	075b      	lsls	r3, r3, #29
   1f6b0:	d010      	beq.n	1f6d4 <net_context_send+0x44>
   1f6b2:	2301      	movs	r3, #1
   1f6b4:	f04f 0200 	mov.w	r2, #0
   1f6b8:	f363 0202 	bfi	r2, r3, #0, #3
   1f6bc:	4916      	ldr	r1, [pc, #88]	; (1f718 <net_context_send+0x88>)
   1f6be:	4b17      	ldr	r3, [pc, #92]	; (1f71c <net_context_send+0x8c>)
   1f6c0:	4817      	ldr	r0, [pc, #92]	; (1f720 <net_context_send+0x90>)
   1f6c2:	1ac9      	subs	r1, r1, r3
   1f6c4:	08c9      	lsrs	r1, r1, #3
   1f6c6:	f36f 02c5 	bfc	r2, #3, #3
   1f6ca:	f361 128f 	bfi	r2, r1, #6, #10
   1f6ce:	4915      	ldr	r1, [pc, #84]	; (1f724 <net_context_send+0x94>)
   1f6d0:	f7e2 fb42 	bl	1d58 <log_1>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1f6d4:	f994 3065 	ldrsb.w	r3, [r4, #101]	; 0x65
   1f6d8:	2b00      	cmp	r3, #0
   1f6da:	da15      	bge.n	1f708 <net_context_send+0x78>
   1f6dc:	8ae3      	ldrh	r3, [r4, #22]
   1f6de:	b19b      	cbz	r3, 1f708 <net_context_send+0x78>
	return pkt->family;
   1f6e0:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   1f6e4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		addrlen = 0;
   1f6e8:	2b0a      	cmp	r3, #10
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1f6ea:	9b08      	ldr	r3, [sp, #32]
   1f6ec:	bf08      	it	eq
   1f6ee:	2218      	moveq	r2, #24
   1f6f0:	e9cd 7300 	strd	r7, r3, [sp]
   1f6f4:	bf18      	it	ne
   1f6f6:	2200      	movne	r2, #0
   1f6f8:	4633      	mov	r3, r6
   1f6fa:	f104 0114 	add.w	r1, r4, #20
   1f6fe:	4628      	mov	r0, r5
   1f700:	f7ff fe3e 	bl	1f380 <sendto.isra.13>
}
   1f704:	b003      	add	sp, #12
   1f706:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EDESTADDRREQ;
   1f708:	f06f 0027 	mvn.w	r0, #39	; 0x27
   1f70c:	e7fa      	b.n	1f704 <net_context_send+0x74>
   1f70e:	bf00      	nop
   1f710:	20002040 	.word	0x20002040
   1f714:	2000d78c 	.word	0x2000d78c
   1f718:	0002d0f0 	.word	0x0002d0f0
   1f71c:	0002cff8 	.word	0x0002cff8
   1f720:	00031f92 	.word	0x00031f92
   1f724:	00031e67 	.word	0x00031e67

0001f728 <net_context_foreach>:

	return ret;
}

void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1f728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f72c:	4606      	mov	r6, r0
   1f72e:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1f730:	480d      	ldr	r0, [pc, #52]	; (1f768 <net_context_foreach+0x40>)
   1f732:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1f76c <net_context_foreach+0x44>
   1f736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f73a:	f00c fe47 	bl	2c3cc <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1f73e:	2400      	movs	r4, #0
   1f740:	f04f 0868 	mov.w	r8, #104	; 0x68
   1f744:	fb08 9504 	mla	r5, r8, r4, r9
		if (!net_context_is_used(&contexts[i])) {
   1f748:	4628      	mov	r0, r5
   1f74a:	f7ff f953 	bl	1e9f4 <net_context_is_used>
   1f74e:	b110      	cbz	r0, 1f756 <net_context_foreach+0x2e>
			continue;
		}

		cb(&contexts[i], user_data);
   1f750:	4639      	mov	r1, r7
   1f752:	4628      	mov	r0, r5
   1f754:	47b0      	blx	r6
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1f756:	3401      	adds	r4, #1
   1f758:	2c05      	cmp	r4, #5
   1f75a:	d1f3      	bne.n	1f744 <net_context_foreach+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1f75c:	4802      	ldr	r0, [pc, #8]	; (1f768 <net_context_foreach+0x40>)
	}

	k_sem_give(&contexts_lock);
}
   1f75e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f762:	f00c be0c 	b.w	2c37e <_impl_k_sem_give>
   1f766:	bf00      	nop
   1f768:	20002248 	.word	0x20002248
   1f76c:	20002040 	.word	0x20002040

0001f770 <net_context_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1f770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f774:	2101      	movs	r1, #1
   1f776:	4801      	ldr	r0, [pc, #4]	; (1f77c <net_context_init+0xc>)
   1f778:	f00c bdf8 	b.w	2c36c <_impl_k_sem_init>
   1f77c:	20002248 	.word	0x20002248

0001f780 <net_is_ipv6_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f780:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f782:	b94a      	cbnz	r2, 1f798 <net_is_ipv6_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f784:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f786:	b93b      	cbnz	r3, 1f798 <net_is_ipv6_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f788:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f78a:	b92a      	cbnz	r2, 1f798 <net_is_ipv6_addr_loopback+0x18>
   1f78c:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f78e:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   1f792:	4258      	negs	r0, r3
   1f794:	4158      	adcs	r0, r3
   1f796:	4770      	bx	lr
   1f798:	2000      	movs	r0, #0
   1f79a:	4770      	bx	lr

0001f79c <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   1f79c:	6943      	ldr	r3, [r0, #20]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1f79e:	b510      	push	{r4, lr}
   1f7a0:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1f7a2:	b13b      	cbz	r3, 1f7b4 <processing_data+0x18>
	if (!is_loopback && !locally_routed) {
   1f7a4:	b159      	cbz	r1, 1f7be <processing_data+0x22>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1f7a6:	6963      	ldr	r3, [r4, #20]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1f7a8:	689b      	ldr	r3, [r3, #8]
   1f7aa:	781b      	ldrb	r3, [r3, #0]
   1f7ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1f7b0:	2b60      	cmp	r3, #96	; 0x60
   1f7b2:	d00d      	beq.n	1f7d0 <processing_data+0x34>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1f7b4:	4620      	mov	r0, r4
		break;
	}
}
   1f7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   1f7ba:	f001 bf30 	b.w	2161e <net_pkt_unref>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   1f7be:	4601      	mov	r1, r0
   1f7c0:	6a00      	ldr	r0, [r0, #32]
   1f7c2:	f001 fabb 	bl	20d3c <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   1f7c6:	2801      	cmp	r0, #1
   1f7c8:	d0ed      	beq.n	1f7a6 <processing_data+0xa>
	switch (process_data(pkt, is_loopback)) {
   1f7ca:	2800      	cmp	r0, #0
   1f7cc:	d1f2      	bne.n	1f7b4 <processing_data+0x18>
}
   1f7ce:	bd10      	pop	{r4, pc}
	pkt->family = family;
   1f7d0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1f7d4:	220a      	movs	r2, #10
   1f7d6:	f362 03c6 	bfi	r3, r2, #3, #4
   1f7da:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
		return net_ipv6_process_pkt(pkt);
   1f7de:	4620      	mov	r0, r4
   1f7e0:	f004 fb9c 	bl	23f1c <net_ipv6_process_pkt>
   1f7e4:	e7f1      	b.n	1f7ca <processing_data+0x2e>

0001f7e6 <net_init>:

	NET_DBG("Network L3 init done");
}

static int net_init(struct device *unused)
{
   1f7e6:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1f7e8:	f002 fad0 	bl	21d8c <net_pkt_init>

	net_context_init();
   1f7ec:	f7ff ffc0 	bl	1f770 <net_context_init>
	net_icmpv6_init();
   1f7f0:	f004 f914 	bl	23a1c <net_icmpv6_init>
	net_ipv6_init();
   1f7f4:	f004 fcb2 	bl	2415c <net_ipv6_init>
	net_conn_init();
   1f7f8:	f008 ffd4 	bl	287a4 <net_conn_init>
	net_tcp_init();
   1f7fc:	f009 fb06 	bl	28e0c <net_tcp_init>
	net_route_init();
   1f800:	f007 f93a 	bl	26a78 <net_route_init>

	l3_init();

	net_mgmt_event_init();
   1f804:	f006 fed2 	bl	265ac <net_mgmt_event_init>
	net_if_init();
   1f808:	f001 fc12 	bl	21030 <net_if_init>
	net_tc_rx_init();
   1f80c:	f002 fb18 	bl	21e40 <net_tc_rx_init>
	net_if_post_init();
   1f810:	f001 fcae 	bl	21170 <net_if_post_init>
	if (status) {
		return status;
	}
#endif

	net_shell_init();
   1f814:	f008 fd6e 	bl	282f4 <net_shell_init>

	return status;
}
   1f818:	2000      	movs	r0, #0
   1f81a:	bd08      	pop	{r3, pc}

0001f81c <process_rx_packet>:
{
   1f81c:	4603      	mov	r3, r0
	pkt = CONTAINER_OF(work, struct net_pkt, work);
   1f81e:	3804      	subs	r0, #4
	pkt_len = net_pkt_get_len(pkt);
   1f820:	6919      	ldr	r1, [r3, #16]
	while (buf) {
   1f822:	b909      	cbnz	r1, 1f828 <process_rx_packet+0xc>
	processing_data(pkt, false);
   1f824:	f7ff bfba 	b.w	1f79c <processing_data>
		buf = buf->frags;
   1f828:	6809      	ldr	r1, [r1, #0]
   1f82a:	e7fa      	b.n	1f822 <process_rx_packet+0x6>

0001f82c <net_send_data>:
{
   1f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt || !pkt->frags) {
   1f830:	4604      	mov	r4, r0
{
   1f832:	b090      	sub	sp, #64	; 0x40
	if (!pkt || !pkt->frags) {
   1f834:	2800      	cmp	r0, #0
   1f836:	f000 8082 	beq.w	1f93e <net_send_data+0x112>
   1f83a:	6942      	ldr	r2, [r0, #20]
   1f83c:	2a00      	cmp	r2, #0
   1f83e:	d07e      	beq.n	1f93e <net_send_data+0x112>
	if (!net_pkt_iface(pkt)) {
   1f840:	6a03      	ldr	r3, [r0, #32]
   1f842:	2b00      	cmp	r3, #0
   1f844:	d07e      	beq.n	1f944 <net_send_data+0x118>
	return pkt->family;
   1f846:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   1f84a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1f84e:	2b0a      	cmp	r3, #10
   1f850:	d16b      	bne.n	1f92a <net_send_data+0xfe>
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1f852:	6895      	ldr	r5, [r2, #8]
   1f854:	f004 fab8 	bl	23dc8 <net_ipv6_unspecified_address>
   1f858:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f85a:	4601      	mov	r1, r0
   1f85c:	2210      	movs	r2, #16
   1f85e:	4628      	mov	r0, r5
   1f860:	f7e6 faeb 	bl	5e3a <memcmp>
   1f864:	b920      	cbnz	r0, 1f870 <net_send_data+0x44>
			return -EADDRNOTAVAIL;
   1f866:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
   1f86a:	b010      	add	sp, #64	; 0x40
   1f86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return pkt->frags->data;
   1f870:	6963      	ldr	r3, [r4, #20]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1f872:	689d      	ldr	r5, [r3, #8]
   1f874:	3518      	adds	r5, #24
   1f876:	4628      	mov	r0, r5
   1f878:	f7ff ff82 	bl	1f780 <net_is_ipv6_addr_loopback>
   1f87c:	4601      	mov	r1, r0
   1f87e:	2800      	cmp	r0, #0
   1f880:	d047      	beq.n	1f912 <net_send_data+0xe6>
   1f882:	6963      	ldr	r3, [r4, #20]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1f884:	689a      	ldr	r2, [r3, #8]
   1f886:	ae0c      	add	r6, sp, #48	; 0x30
   1f888:	f102 0308 	add.w	r3, r2, #8
   1f88c:	4635      	mov	r5, r6
   1f88e:	3218      	adds	r2, #24
   1f890:	6818      	ldr	r0, [r3, #0]
   1f892:	6859      	ldr	r1, [r3, #4]
   1f894:	4637      	mov	r7, r6
   1f896:	c703      	stmia	r7!, {r0, r1}
   1f898:	3308      	adds	r3, #8
   1f89a:	4293      	cmp	r3, r2
   1f89c:	463e      	mov	r6, r7
   1f89e:	d1f7      	bne.n	1f890 <net_send_data+0x64>
   1f8a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1f8a4:	466e      	mov	r6, sp
   1f8a6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1f8aa:	6963      	ldr	r3, [r4, #20]
   1f8ac:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f8ae:	af08      	add	r7, sp, #32
   1f8b0:	f103 0218 	add.w	r2, r3, #24
   1f8b4:	f103 0828 	add.w	r8, r3, #40	; 0x28
   1f8b8:	46bc      	mov	ip, r7
   1f8ba:	6810      	ldr	r0, [r2, #0]
   1f8bc:	6851      	ldr	r1, [r2, #4]
   1f8be:	46be      	mov	lr, r7
   1f8c0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1f8c4:	3208      	adds	r2, #8
   1f8c6:	4542      	cmp	r2, r8
   1f8c8:	4677      	mov	r7, lr
   1f8ca:	d1f6      	bne.n	1f8ba <net_send_data+0x8e>
   1f8cc:	4667      	mov	r7, ip
   1f8ce:	3308      	adds	r3, #8
   1f8d0:	463a      	mov	r2, r7
   1f8d2:	ca03      	ldmia	r2!, {r0, r1}
   1f8d4:	42aa      	cmp	r2, r5
   1f8d6:	6018      	str	r0, [r3, #0]
   1f8d8:	6059      	str	r1, [r3, #4]
   1f8da:	4617      	mov	r7, r2
   1f8dc:	f103 0308 	add.w	r3, r3, #8
   1f8e0:	d1f6      	bne.n	1f8d0 <net_send_data+0xa4>
   1f8e2:	6963      	ldr	r3, [r4, #20]
   1f8e4:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1f8e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1f8ea:	ad04      	add	r5, sp, #16
   1f8ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1f8f0:	f107 0318 	add.w	r3, r7, #24
   1f8f4:	462a      	mov	r2, r5
   1f8f6:	ca03      	ldmia	r2!, {r0, r1}
   1f8f8:	4562      	cmp	r2, ip
   1f8fa:	6018      	str	r0, [r3, #0]
   1f8fc:	6059      	str	r1, [r3, #4]
   1f8fe:	4615      	mov	r5, r2
   1f900:	f103 0308 	add.w	r3, r3, #8
   1f904:	d1f6      	bne.n	1f8f4 <net_send_data+0xc8>
		processing_data(pkt, true);
   1f906:	2101      	movs	r1, #1
   1f908:	4620      	mov	r0, r4
   1f90a:	f7ff ff47 	bl	1f79c <processing_data>
		return 0;
   1f90e:	2000      	movs	r0, #0
   1f910:	e7ab      	b.n	1f86a <net_send_data+0x3e>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1f912:	4628      	mov	r0, r5
   1f914:	f000 fa56 	bl	1fdc4 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1f918:	2800      	cmp	r0, #0
   1f91a:	d1b2      	bne.n	1f882 <net_send_data+0x56>
   1f91c:	6963      	ldr	r3, [r4, #20]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1f91e:	6898      	ldr	r0, [r3, #8]
   1f920:	3008      	adds	r0, #8
   1f922:	f7ff ff2d 	bl	1f780 <net_is_ipv6_addr_loopback>
   1f926:	2800      	cmp	r0, #0
   1f928:	d19d      	bne.n	1f866 <net_send_data+0x3a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1f92a:	4621      	mov	r1, r4
   1f92c:	6a20      	ldr	r0, [r4, #32]
   1f92e:	f001 fa5a 	bl	20de6 <net_if_send_data>
	return 0;
   1f932:	2802      	cmp	r0, #2
   1f934:	bf0c      	ite	eq
   1f936:	f06f 0004 	mvneq.w	r0, #4
   1f93a:	2000      	movne	r0, #0
   1f93c:	e795      	b.n	1f86a <net_send_data+0x3e>
		return -ENODATA;
   1f93e:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1f942:	e792      	b.n	1f86a <net_send_data+0x3e>
		return -EINVAL;
   1f944:	f06f 0015 	mvn.w	r0, #21
   1f948:	e78f      	b.n	1f86a <net_send_data+0x3e>
	...

0001f94c <net_recv_data>:
{
   1f94c:	b538      	push	{r3, r4, r5, lr}
	if (!pkt || !iface) {
   1f94e:	460d      	mov	r5, r1
   1f950:	b309      	cbz	r1, 1f996 <net_recv_data+0x4a>
   1f952:	b300      	cbz	r0, 1f996 <net_recv_data+0x4a>
	if (!pkt->frags) {
   1f954:	694b      	ldr	r3, [r1, #20]
   1f956:	b30b      	cbz	r3, 1f99c <net_recv_data+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f958:	6803      	ldr	r3, [r0, #0]
   1f95a:	f3bf 8f5b 	dmb	ish
   1f95e:	68db      	ldr	r3, [r3, #12]
   1f960:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   1f964:	07db      	lsls	r3, r3, #31
   1f966:	d51c      	bpl.n	1f9a2 <net_recv_data+0x56>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1f968:	6803      	ldr	r3, [r0, #0]
	pkt->iface = iface;
   1f96a:	6208      	str	r0, [r1, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1f96c:	7d5b      	ldrb	r3, [r3, #21]
   1f96e:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1f972:	6803      	ldr	r3, [r0, #0]
   1f974:	7d5b      	ldrb	r3, [r3, #21]
   1f976:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
	u8_t tc = net_rx_priority2tc(prio);
   1f97a:	2000      	movs	r0, #0
   1f97c:	f002 fa3c 	bl	21df8 <net_rx_priority2tc>
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   1f980:	4b09      	ldr	r3, [pc, #36]	; (1f9a8 <net_recv_data+0x5c>)
   1f982:	2400      	movs	r4, #0
	net_tc_submit_to_rx_queue(tc, pkt);
   1f984:	b2c0      	uxtb	r0, r0
   1f986:	606c      	str	r4, [r5, #4]
   1f988:	e9c5 3402 	strd	r3, r4, [r5, #8]
   1f98c:	4629      	mov	r1, r5
   1f98e:	f002 fa21 	bl	21dd4 <net_tc_submit_to_rx_queue>
	return 0;
   1f992:	4620      	mov	r0, r4
}
   1f994:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f996:	f06f 0015 	mvn.w	r0, #21
   1f99a:	e7fb      	b.n	1f994 <net_recv_data+0x48>
		return -ENODATA;
   1f99c:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1f9a0:	e7f8      	b.n	1f994 <net_recv_data+0x48>
		return -ENETDOWN;
   1f9a2:	f06f 003d 	mvn.w	r0, #61	; 0x3d
   1f9a6:	e7f5      	b.n	1f994 <net_recv_data+0x48>
   1f9a8:	0001f81d 	.word	0x0001f81d

0001f9ac <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f9ac:	b510      	push	{r4, lr}
   1f9ae:	6803      	ldr	r3, [r0, #0]
   1f9b0:	2200      	movs	r2, #0
   1f9b2:	b90b      	cbnz	r3, 1f9b8 <sys_slist_find_and_remove+0xc>
   1f9b4:	4618      	mov	r0, r3
   1f9b6:	e00b      	b.n	1f9d0 <sys_slist_find_and_remove+0x24>
   1f9b8:	428b      	cmp	r3, r1
   1f9ba:	681c      	ldr	r4, [r3, #0]
   1f9bc:	d10f      	bne.n	1f9de <sys_slist_find_and_remove+0x32>
Z_GENLIST_REMOVE(slist, snode)
   1f9be:	b942      	cbnz	r2, 1f9d2 <sys_slist_find_and_remove+0x26>
   1f9c0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1f9c2:	6004      	str	r4, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f9c4:	4293      	cmp	r3, r2
   1f9c6:	d100      	bne.n	1f9ca <sys_slist_find_and_remove+0x1e>
	list->tail = node;
   1f9c8:	6044      	str	r4, [r0, #4]
	parent->next = child;
   1f9ca:	2200      	movs	r2, #0
   1f9cc:	601a      	str	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f9ce:	2001      	movs	r0, #1
   1f9d0:	bd10      	pop	{r4, pc}
	parent->next = child;
   1f9d2:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f9d4:	6841      	ldr	r1, [r0, #4]
   1f9d6:	428b      	cmp	r3, r1
	list->tail = node;
   1f9d8:	bf08      	it	eq
   1f9da:	6042      	streq	r2, [r0, #4]
   1f9dc:	e7f5      	b.n	1f9ca <sys_slist_find_and_remove+0x1e>
   1f9de:	461a      	mov	r2, r3
   1f9e0:	4623      	mov	r3, r4
   1f9e2:	e7e6      	b.n	1f9b2 <sys_slist_find_and_remove+0x6>

0001f9e4 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		log_strdup(net_sprint_ipv6_addr(&router->address.in6_addr)));

	router->is_used = false;
   1f9e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1f9e8:	f36f 0300 	bfc	r3, #0, #1
   1f9ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
   1f9f0:	4770      	bx	lr

0001f9f2 <atomic_test_bit>:
   1f9f2:	f3bf 8f5b 	dmb	ish
   1f9f6:	6800      	ldr	r0, [r0, #0]
   1f9f8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   1f9fc:	4108      	asrs	r0, r1
}
   1f9fe:	f000 0001 	and.w	r0, r0, #1
   1fa02:	4770      	bx	lr

0001fa04 <net_context_get_ip_proto>:
{
   1fa04:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1fa06:	4604      	mov	r4, r0
   1fa08:	b9a0      	cbnz	r0, 1fa34 <net_context_get_ip_proto+0x30>
   1fa0a:	4b0e      	ldr	r3, [pc, #56]	; (1fa44 <net_context_get_ip_proto+0x40>)
   1fa0c:	681b      	ldr	r3, [r3, #0]
   1fa0e:	075b      	lsls	r3, r3, #29
   1fa10:	d010      	beq.n	1fa34 <net_context_get_ip_proto+0x30>
   1fa12:	2301      	movs	r3, #1
   1fa14:	f04f 0200 	mov.w	r2, #0
   1fa18:	f363 0202 	bfi	r2, r3, #0, #3
   1fa1c:	490a      	ldr	r1, [pc, #40]	; (1fa48 <net_context_get_ip_proto+0x44>)
   1fa1e:	4b0b      	ldr	r3, [pc, #44]	; (1fa4c <net_context_get_ip_proto+0x48>)
   1fa20:	1a5b      	subs	r3, r3, r1
   1fa22:	f360 02c5 	bfi	r2, r0, #3, #3
   1fa26:	08db      	lsrs	r3, r3, #3
   1fa28:	f363 128f 	bfi	r2, r3, #6, #10
   1fa2c:	4908      	ldr	r1, [pc, #32]	; (1fa50 <net_context_get_ip_proto+0x4c>)
   1fa2e:	4809      	ldr	r0, [pc, #36]	; (1fa54 <net_context_get_ip_proto+0x50>)
   1fa30:	f7e2 f992 	bl	1d58 <log_1>
	if (context->flags & NET_CONTEXT_PROTO) {
   1fa34:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return IPPROTO_UDP;
   1fa38:	f013 0f40 	tst.w	r3, #64	; 0x40
}
   1fa3c:	bf14      	ite	ne
   1fa3e:	2006      	movne	r0, #6
   1fa40:	2011      	moveq	r0, #17
   1fa42:	bd10      	pop	{r4, pc}
   1fa44:	2000d794 	.word	0x2000d794
   1fa48:	0002cff8 	.word	0x0002cff8
   1fa4c:	0002d100 	.word	0x0002d100
   1fa50:	000323ed 	.word	0x000323ed
   1fa54:	000322d6 	.word	0x000322d6

0001fa58 <net_context_send_cb>:
{
   1fa58:	b570      	push	{r4, r5, r6, lr}
   1fa5a:	460e      	mov	r6, r1
	if (!context) {
   1fa5c:	4604      	mov	r4, r0
{
   1fa5e:	4611      	mov	r1, r2
	if (!context) {
   1fa60:	b170      	cbz	r0, 1fa80 <net_context_send_cb+0x28>
	if (context->send_cb) {
   1fa62:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1fa64:	b115      	cbz	r5, 1fa6c <net_context_send_cb+0x14>
		context->send_cb(context, status, token, context->user_data);
   1fa66:	6803      	ldr	r3, [r0, #0]
   1fa68:	4632      	mov	r2, r6
   1fa6a:	47a8      	blx	r5
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1fa6c:	4620      	mov	r0, r4
   1fa6e:	f7ff ffc9 	bl	1fa04 <net_context_get_ip_proto>
   1fa72:	2811      	cmp	r0, #17
   1fa74:	d004      	beq.n	1fa80 <net_context_send_cb+0x28>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1fa76:	4620      	mov	r0, r4
}
   1fa78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1fa7c:	f7ff bfc2 	b.w	1fa04 <net_context_get_ip_proto>
}
   1fa80:	bd70      	pop	{r4, r5, r6, pc}

0001fa82 <net_is_ipv6_prefix>:
	if (length > 128) {
   1fa82:	2a80      	cmp	r2, #128	; 0x80
{
   1fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa86:	4607      	mov	r7, r0
   1fa88:	460e      	mov	r6, r1
   1fa8a:	4614      	mov	r4, r2
	if (length > 128) {
   1fa8c:	d901      	bls.n	1fa92 <net_is_ipv6_prefix+0x10>
		return false;
   1fa8e:	2000      	movs	r0, #0
}
   1fa90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   1fa92:	08d5      	lsrs	r5, r2, #3
   1fa94:	462a      	mov	r2, r5
   1fa96:	f7e6 f9d0 	bl	5e3a <memcmp>
   1fa9a:	2800      	cmp	r0, #0
   1fa9c:	d1f7      	bne.n	1fa8e <net_is_ipv6_prefix+0xc>
	u8_t bits = 128 - length;
   1fa9e:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1faa2:	f014 0407 	ands.w	r4, r4, #7
   1faa6:	d00f      	beq.n	1fac8 <net_is_ipv6_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1faa8:	5d73      	ldrb	r3, [r6, r5]
   1faaa:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1faac:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1fab0:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1fab2:	23ff      	movs	r3, #255	; 0xff
   1fab4:	408b      	lsls	r3, r1
   1fab6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1faba:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1fabe:	4222      	tst	r2, r4
   1fac0:	bf0c      	ite	eq
   1fac2:	2001      	moveq	r0, #1
   1fac4:	2000      	movne	r0, #0
   1fac6:	e7e3      	b.n	1fa90 <net_is_ipv6_prefix+0xe>
		return true;
   1fac8:	2001      	movs	r0, #1
   1faca:	e7e1      	b.n	1fa90 <net_is_ipv6_prefix+0xe>

0001facc <net_ipv6_addr_cmp>:
{
   1facc:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1face:	2210      	movs	r2, #16
   1fad0:	f7e6 f9b3 	bl	5e3a <memcmp>
}
   1fad4:	fab0 f080 	clz	r0, r0
   1fad8:	0940      	lsrs	r0, r0, #5
   1fada:	bd08      	pop	{r3, pc}

0001fadc <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1fadc:	460a      	mov	r2, r1
   1fade:	4601      	mov	r1, r0
   1fae0:	4801      	ldr	r0, [pc, #4]	; (1fae8 <k_delayed_work_submit+0xc>)
   1fae2:	f00c be6d 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
   1fae6:	bf00      	nop
   1fae8:	200031d8 	.word	0x200031d8

0001faec <net_mgmt_event_notify>:
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1faec:	2300      	movs	r3, #0
   1faee:	461a      	mov	r2, r3
   1faf0:	f006 bd0a 	b.w	26508 <net_mgmt_event_notify_with_info>

0001faf4 <address_lifetime_timeout>:
{
   1faf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1faf8:	f00c ffc2 	bl	2ca80 <_impl_k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   1fafc:	4b31      	ldr	r3, [pc, #196]	; (1fbc4 <address_lifetime_timeout+0xd0>)
   1fafe:	681c      	ldr	r4, [r3, #0]
   1fb00:	4682      	mov	sl, r0
   1fb02:	2c00      	cmp	r4, #0
   1fb04:	d053      	beq.n	1fbae <address_lifetime_timeout+0xba>
   1fb06:	f1b4 0514 	subs.w	r5, r4, #20
   1fb0a:	d052      	beq.n	1fbb2 <address_lifetime_timeout+0xbe>
	return node->next;
   1fb0c:	6824      	ldr	r4, [r4, #0]
   1fb0e:	b104      	cbz	r4, 1fb12 <address_lifetime_timeout+0x1e>
   1fb10:	3c14      	subs	r4, #20
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   1fb12:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1fbc8 <address_lifetime_timeout+0xd4>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   1fb16:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1fbc4 <address_lifetime_timeout+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   1fb1a:	f04f 0800 	mov.w	r8, #0
   1fb1e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1fb22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1fb26:	b97d      	cbnz	r5, 1fb48 <address_lifetime_timeout+0x54>
	if (found) {
   1fb28:	f1b8 0f00 	cmp.w	r8, #0
   1fb2c:	d048      	beq.n	1fbc0 <address_lifetime_timeout+0xcc>
		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
   1fb2e:	4a26      	ldr	r2, [pc, #152]	; (1fbc8 <address_lifetime_timeout+0xd4>)
   1fb30:	4826      	ldr	r0, [pc, #152]	; (1fbcc <address_lifetime_timeout+0xd8>)
   1fb32:	2300      	movs	r3, #0
   1fb34:	42bb      	cmp	r3, r7
   1fb36:	bf08      	it	eq
   1fb38:	42b2      	cmpeq	r2, r6
   1fb3a:	bf38      	it	cc
   1fb3c:	4616      	movcc	r6, r2
   1fb3e:	4631      	mov	r1, r6
}
   1fb40:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
   1fb44:	f7ff bfca 	b.w	1fadc <k_delayed_work_submit>
	if (counter > 0) {
   1fb48:	6a29      	ldr	r1, [r5, #32]
   1fb4a:	b9c1      	cbnz	r1, 1fb7e <address_lifetime_timeout+0x8a>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   1fb4c:	69ab      	ldr	r3, [r5, #24]
   1fb4e:	69ea      	ldr	r2, [r5, #28]
   1fb50:	eba3 030a 	sub.w	r3, r3, sl
   1fb54:	4413      	add	r3, r2
   1fb56:	2b00      	cmp	r3, #0
   1fb58:	dc2f      	bgt.n	1fbba <address_lifetime_timeout+0xc6>
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1fb5a:	2302      	movs	r3, #2
	ifaddr->lifetime.timer_timeout = 0;
   1fb5c:	61e9      	str	r1, [r5, #28]
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1fb5e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   1fb62:	f105 0114 	add.w	r1, r5, #20
   1fb66:	4648      	mov	r0, r9
   1fb68:	f7ff ff20 	bl	1f9ac <sys_slist_find_and_remove>
		if (current == next) {
   1fb6c:	42a5      	cmp	r5, r4
   1fb6e:	d0db      	beq.n	1fb28 <address_lifetime_timeout+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   1fb70:	b30c      	cbz	r4, 1fbb6 <address_lifetime_timeout+0xc2>
   1fb72:	6963      	ldr	r3, [r4, #20]
   1fb74:	b103      	cbz	r3, 1fb78 <address_lifetime_timeout+0x84>
   1fb76:	3b14      	subs	r3, #20
   1fb78:	4625      	mov	r5, r4
   1fb7a:	461c      	mov	r4, r3
   1fb7c:	e7d3      	b.n	1fb26 <address_lifetime_timeout+0x32>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   1fb7e:	45da      	cmp	sl, fp
   1fb80:	d105      	bne.n	1fb8e <address_lifetime_timeout+0x9a>
   1fb82:	f00c ff7d 	bl	2ca80 <_impl_k_uptime_get_32>
		ifaddr->lifetime.wrap_counter--;
   1fb86:	6a2b      	ldr	r3, [r5, #32]
		ifaddr->lifetime.timer_start = k_uptime_get_32();
   1fb88:	61a8      	str	r0, [r5, #24]
		ifaddr->lifetime.wrap_counter--;
   1fb8a:	3b01      	subs	r3, #1
   1fb8c:	622b      	str	r3, [r5, #32]
	if (ifaddr->lifetime.wrap_counter > 0) {
   1fb8e:	6a2b      	ldr	r3, [r5, #32]
   1fb90:	2b00      	cmp	r3, #0
   1fb92:	dc0a      	bgt.n	1fbaa <address_lifetime_timeout+0xb6>
		*next_wakeup = ifaddr->lifetime.timer_timeout;
   1fb94:	69ea      	ldr	r2, [r5, #28]
			if (next_timeout < timeout_update) {
   1fb96:	2300      	movs	r3, #0
   1fb98:	42bb      	cmp	r3, r7
   1fb9a:	bf08      	it	eq
   1fb9c:	42b2      	cmpeq	r2, r6
   1fb9e:	bf3e      	ittt	cc
   1fba0:	4616      	movcc	r6, r2
   1fba2:	461f      	movcc	r7, r3
				found = true;
   1fba4:	f04f 0801 	movcc.w	r8, #1
   1fba8:	e7e0      	b.n	1fb6c <address_lifetime_timeout+0x78>
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   1fbaa:	465a      	mov	r2, fp
   1fbac:	e7f3      	b.n	1fb96 <address_lifetime_timeout+0xa2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   1fbae:	4625      	mov	r5, r4
   1fbb0:	e7af      	b.n	1fb12 <address_lifetime_timeout+0x1e>
   1fbb2:	462c      	mov	r4, r5
   1fbb4:	e7ad      	b.n	1fb12 <address_lifetime_timeout+0x1e>
   1fbb6:	4623      	mov	r3, r4
   1fbb8:	e7de      	b.n	1fb78 <address_lifetime_timeout+0x84>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   1fbba:	45da      	cmp	sl, fp
   1fbbc:	d1ea      	bne.n	1fb94 <address_lifetime_timeout+0xa0>
   1fbbe:	e7e0      	b.n	1fb82 <address_lifetime_timeout+0x8e>
}
   1fbc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbc4:	20002260 	.word	0x20002260
   1fbc8:	7fffff9b 	.word	0x7fffff9b
   1fbcc:	20002270 	.word	0x20002270

0001fbd0 <net_if_ipv6_start_dad>:
{
   1fbd0:	b538      	push	{r3, r4, r5, lr}
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1fbd2:	2300      	movs	r3, #0
{
   1fbd4:	460c      	mov	r4, r1
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1fbd6:	f881 3045 	strb.w	r3, [r1, #69]	; 0x45
 *
 * @return True if interface is up, False if it is down.
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);
   1fbda:	4605      	mov	r5, r0
   1fbdc:	b9a0      	cbnz	r0, 1fc08 <net_if_ipv6_start_dad+0x38>
   1fbde:	4b15      	ldr	r3, [pc, #84]	; (1fc34 <net_if_ipv6_start_dad+0x64>)
   1fbe0:	681b      	ldr	r3, [r3, #0]
   1fbe2:	075b      	lsls	r3, r3, #29
   1fbe4:	d010      	beq.n	1fc08 <net_if_ipv6_start_dad+0x38>
   1fbe6:	2301      	movs	r3, #1
   1fbe8:	f04f 0200 	mov.w	r2, #0
   1fbec:	f363 0202 	bfi	r2, r3, #0, #3
   1fbf0:	4911      	ldr	r1, [pc, #68]	; (1fc38 <net_if_ipv6_start_dad+0x68>)
   1fbf2:	4b12      	ldr	r3, [pc, #72]	; (1fc3c <net_if_ipv6_start_dad+0x6c>)
   1fbf4:	1a5b      	subs	r3, r3, r1
   1fbf6:	f360 02c5 	bfi	r2, r0, #3, #3
   1fbfa:	08db      	lsrs	r3, r3, #3
   1fbfc:	f363 128f 	bfi	r2, r3, #6, #10
   1fc00:	490f      	ldr	r1, [pc, #60]	; (1fc40 <net_if_ipv6_start_dad+0x70>)
   1fc02:	4810      	ldr	r0, [pc, #64]	; (1fc44 <net_if_ipv6_start_dad+0x74>)
   1fc04:	f7e2 f8a8 	bl	1d58 <log_1>

	return atomic_test_bit(iface->if_dev->flags, NET_IF_UP);
   1fc08:	6828      	ldr	r0, [r5, #0]
   1fc0a:	2100      	movs	r1, #0
   1fc0c:	300c      	adds	r0, #12
   1fc0e:	f7ff fef0 	bl	1f9f2 <atomic_test_bit>
	if (net_if_is_up(iface)) {
   1fc12:	b170      	cbz	r0, 1fc32 <net_if_ipv6_start_dad+0x62>
		ifaddr->dad_count = 1;
   1fc14:	2301      	movs	r3, #1
   1fc16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1fc1a:	4621      	mov	r1, r4
   1fc1c:	4628      	mov	r0, r5
   1fc1e:	f005 ff13 	bl	25a48 <net_ipv6_start_dad>
   1fc22:	b930      	cbnz	r0, 1fc32 <net_if_ipv6_start_dad+0x62>
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   1fc24:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1fc28:	2164      	movs	r1, #100	; 0x64
}
   1fc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   1fc2e:	f7ff bf55 	b.w	1fadc <k_delayed_work_submit>
}
   1fc32:	bd38      	pop	{r3, r4, r5, pc}
   1fc34:	2000d794 	.word	0x2000d794
   1fc38:	0002cff8 	.word	0x0002cff8
   1fc3c:	0002d100 	.word	0x0002d100
   1fc40:	000323e0 	.word	0x000323e0
   1fc44:	0003231f 	.word	0x0003231f

0001fc48 <net_if_ipv6_get_best_match.isra.16>:
	}

	return false;
}

static inline struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
   1fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
	struct in6_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv6) {
   1fc4c:	4606      	mov	r6, r0
   1fc4e:	b390      	cbz	r0, 1fcb6 <net_if_ipv6_get_best_match.isra.16+0x6e>
   1fc50:	1d05      	adds	r5, r0, #4
	struct in6_addr *src = NULL;
   1fc52:	2000      	movs	r0, #0
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fc54:	4607      	mov	r7, r0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1fc56:	f04f 0a48 	mov.w	sl, #72	; 0x48
	    addr->address.family == AF_INET6 &&
   1fc5a:	f248 0bfe 	movw	fp, #33022	; 0x80fe
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1fc5e:	fb0a 6307 	mla	r3, sl, r7, r6
   1fc62:	4c1d      	ldr	r4, [pc, #116]	; (1fcd8 <net_if_ipv6_get_best_match.isra.16+0x90>)
   1fc64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fc66:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
   1fc6a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
   1fc6e:	42a3      	cmp	r3, r4
   1fc70:	d11c      	bne.n	1fcac <net_if_ipv6_get_best_match.isra.16+0x64>
   1fc72:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   1fc76:	2b0a      	cmp	r3, #10
   1fc78:	d118      	bne.n	1fcac <net_if_ipv6_get_best_match.isra.16+0x64>
	    addr->address.family == AF_INET6 &&
   1fc7a:	882b      	ldrh	r3, [r5, #0]
   1fc7c:	455b      	cmp	r3, fp
   1fc7e:	d015      	beq.n	1fcac <net_if_ipv6_get_best_match.isra.16+0x64>
   1fc80:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1fc84:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
	u8_t len = 0;
   1fc88:	2300      	movs	r3, #0
		if (src[j] == dst[j]) {
   1fc8a:	f819 ef01 	ldrb.w	lr, [r9, #1]!
   1fc8e:	f818 4f01 	ldrb.w	r4, [r8, #1]!
   1fc92:	45a6      	cmp	lr, r4
   1fc94:	f103 0c08 	add.w	ip, r3, #8
   1fc98:	d10f      	bne.n	1fcba <net_if_ipv6_get_best_match.isra.16+0x72>
			len += 8;
   1fc9a:	fa5f f38c 	uxtb.w	r3, ip
	for (j = 0; j < addr_len; j++) {
   1fc9e:	2b80      	cmp	r3, #128	; 0x80
   1fca0:	d1f3      	bne.n	1fc8a <net_if_ipv6_get_best_match.isra.16+0x42>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
			continue;
		}

		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   1fca2:	7814      	ldrb	r4, [r2, #0]
   1fca4:	429c      	cmp	r4, r3
			*best_so_far = len;
   1fca6:	bf9c      	itt	ls
   1fca8:	7013      	strbls	r3, [r2, #0]
   1fcaa:	4628      	movls	r0, r5
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fcac:	3701      	adds	r7, #1
   1fcae:	2f03      	cmp	r7, #3
   1fcb0:	f105 0548 	add.w	r5, r5, #72	; 0x48
   1fcb4:	d1d3      	bne.n	1fc5e <net_if_ipv6_get_best_match.isra.16+0x16>
			src = &ipv6->unicast[i].address.in6_addr;
		}
	}

	return src;
}
   1fcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor = src[j] ^ dst[j];
   1fcba:	ea8e 0404 	eor.w	r4, lr, r4
   1fcbe:	fa5f fc8c 	uxtb.w	ip, ip
				if (!(xor & 0x80)) {
   1fcc2:	f014 0f80 	tst.w	r4, #128	; 0x80
   1fcc6:	d1ec      	bne.n	1fca2 <net_if_ipv6_get_best_match.isra.16+0x5a>
					len++;
   1fcc8:	3301      	adds	r3, #1
   1fcca:	b2db      	uxtb	r3, r3
					xor <<= 1;
   1fccc:	0064      	lsls	r4, r4, #1
			for (k = 0; k < 8; k++) {
   1fcce:	4563      	cmp	r3, ip
					xor <<= 1;
   1fcd0:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1fcd2:	d1f6      	bne.n	1fcc2 <net_if_ipv6_get_best_match.isra.16+0x7a>
   1fcd4:	e7e5      	b.n	1fca2 <net_if_ipv6_get_best_match.isra.16+0x5a>
   1fcd6:	bf00      	nop
   1fcd8:	02000100 	.word	0x02000100

0001fcdc <net_if_queue_tx>:
{
   1fcdc:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
   1fcde:	2000      	movs	r0, #0
{
   1fce0:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
   1fce2:	f002 f881 	bl	21de8 <net_tx_priority2tc>
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   1fce6:	4a05      	ldr	r2, [pc, #20]	; (1fcfc <net_if_queue_tx+0x20>)
   1fce8:	2300      	movs	r3, #0
   1fcea:	6063      	str	r3, [r4, #4]
   1fcec:	e9c4 2302 	strd	r2, r3, [r4, #8]
	net_tc_submit_to_tx_queue(tc, pkt);
   1fcf0:	4621      	mov	r1, r4
   1fcf2:	b2c0      	uxtb	r0, r0
}
   1fcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_tc_submit_to_tx_queue(tc, pkt);
   1fcf8:	f002 b862 	b.w	21dc0 <net_tc_submit_to_tx_queue>
   1fcfc:	00020d6d 	.word	0x00020d6d

0001fd00 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fd00:	4b06      	ldr	r3, [pc, #24]	; (1fd1c <net_if_lookup_by_dev+0x1c>)
   1fd02:	4a07      	ldr	r2, [pc, #28]	; (1fd20 <net_if_lookup_by_dev+0x20>)
   1fd04:	4293      	cmp	r3, r2
   1fd06:	d102      	bne.n	1fd0e <net_if_lookup_by_dev+0xe>
	return NULL;
   1fd08:	2300      	movs	r3, #0
}
   1fd0a:	4618      	mov	r0, r3
   1fd0c:	4770      	bx	lr
	return iface->if_dev->dev;
   1fd0e:	6819      	ldr	r1, [r3, #0]
		if (net_if_get_device(iface) == dev) {
   1fd10:	6809      	ldr	r1, [r1, #0]
   1fd12:	4288      	cmp	r0, r1
   1fd14:	d0f9      	beq.n	1fd0a <net_if_lookup_by_dev+0xa>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fd16:	3320      	adds	r3, #32
   1fd18:	e7f4      	b.n	1fd04 <net_if_lookup_by_dev+0x4>
   1fd1a:	bf00      	nop
   1fd1c:	2000da00 	.word	0x2000da00
   1fd20:	2000da20 	.word	0x2000da20

0001fd24 <net_if_get_default>:
}
   1fd24:	4b02      	ldr	r3, [pc, #8]	; (1fd30 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   1fd26:	4803      	ldr	r0, [pc, #12]	; (1fd34 <net_if_get_default+0x10>)
}
   1fd28:	4298      	cmp	r0, r3
   1fd2a:	bf08      	it	eq
   1fd2c:	2000      	moveq	r0, #0
   1fd2e:	4770      	bx	lr
   1fd30:	2000da20 	.word	0x2000da20
   1fd34:	2000da00 	.word	0x2000da00

0001fd38 <net_if_config_ipv6_get>:
	if (iface->config.ip.ipv6) {
   1fd38:	6843      	ldr	r3, [r0, #4]
   1fd3a:	b15b      	cbz	r3, 1fd54 <net_if_config_ipv6_get+0x1c>
		if (ipv6) {
   1fd3c:	b909      	cbnz	r1, 1fd42 <net_if_config_ipv6_get+0xa>
		return 0;
   1fd3e:	2000      	movs	r0, #0
   1fd40:	4770      	bx	lr
			*ipv6 = iface->config.ip.ipv6;
   1fd42:	600b      	str	r3, [r1, #0]
   1fd44:	e7fb      	b.n	1fd3e <net_if_config_ipv6_get+0x6>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
   1fd46:	6042      	str	r2, [r0, #4]
		ipv6_addresses[i].iface = iface;
   1fd48:	f8c2 01d0 	str.w	r0, [r2, #464]	; 0x1d0
		if (ipv6) {
   1fd4c:	2900      	cmp	r1, #0
   1fd4e:	d0f6      	beq.n	1fd3e <net_if_config_ipv6_get+0x6>
			*ipv6 = &ipv6_addresses[i].ipv6;
   1fd50:	600a      	str	r2, [r1, #0]
   1fd52:	e7f4      	b.n	1fd3e <net_if_config_ipv6_get+0x6>
		if (ipv6_addresses[i].iface) {
   1fd54:	4a03      	ldr	r2, [pc, #12]	; (1fd64 <net_if_config_ipv6_get+0x2c>)
   1fd56:	f8d2 31d0 	ldr.w	r3, [r2, #464]	; 0x1d0
   1fd5a:	2b00      	cmp	r3, #0
   1fd5c:	d0f3      	beq.n	1fd46 <net_if_config_ipv6_get+0xe>
	return -ESRCH;
   1fd5e:	f06f 0002 	mvn.w	r0, #2
}
   1fd62:	4770      	bx	lr
   1fd64:	20002290 	.word	0x20002290

0001fd68 <net_if_start_rs>:
{
   1fd68:	b510      	push	{r4, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1fd6a:	6844      	ldr	r4, [r0, #4]
	if (!ipv6) {
   1fd6c:	b154      	cbz	r4, 1fd84 <net_if_start_rs+0x1c>
	if (!net_ipv6_start_rs(iface)) {
   1fd6e:	f006 f8a8 	bl	25ec2 <net_ipv6_start_rs>
   1fd72:	b938      	cbnz	r0, 1fd84 <net_if_start_rs+0x1c>
		k_delayed_work_submit(&ipv6->rs_timer, RS_TIMEOUT);
   1fd74:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
   1fd78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   1fd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&ipv6->rs_timer, RS_TIMEOUT);
   1fd80:	f7ff beac 	b.w	1fadc <k_delayed_work_submit>
}
   1fd84:	bd10      	pop	{r4, pc}
	...

0001fd88 <rs_timeout>:
{
   1fd88:	b410      	push	{r4}
	struct net_if_ipv6 *ipv6 = CONTAINER_OF(work,
   1fd8a:	f5a0 72d0 	sub.w	r2, r0, #416	; 0x1a0
	ipv6->rs_count++;
   1fd8e:	f892 31ce 	ldrb.w	r3, [r2, #462]	; 0x1ce
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fd92:	480a      	ldr	r0, [pc, #40]	; (1fdbc <rs_timeout+0x34>)
   1fd94:	490a      	ldr	r1, [pc, #40]	; (1fdc0 <rs_timeout+0x38>)
	ipv6->rs_count++;
   1fd96:	3301      	adds	r3, #1
   1fd98:	b2db      	uxtb	r3, r3
   1fd9a:	f882 31ce 	strb.w	r3, [r2, #462]	; 0x1ce
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fd9e:	4288      	cmp	r0, r1
   1fda0:	d101      	bne.n	1fda6 <rs_timeout+0x1e>
}
   1fda2:	bc10      	pop	{r4}
   1fda4:	4770      	bx	lr
		if (iface->config.ip.ipv6 == ipv6) {
   1fda6:	6844      	ldr	r4, [r0, #4]
   1fda8:	4294      	cmp	r4, r2
   1fdaa:	d001      	beq.n	1fdb0 <rs_timeout+0x28>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fdac:	3020      	adds	r0, #32
   1fdae:	e7f6      	b.n	1fd9e <rs_timeout+0x16>
	if (ipv6->rs_count < RS_COUNT) {
   1fdb0:	2b02      	cmp	r3, #2
   1fdb2:	d8f6      	bhi.n	1fda2 <rs_timeout+0x1a>
}
   1fdb4:	bc10      	pop	{r4}
		net_if_start_rs(iface);
   1fdb6:	f7ff bfd7 	b.w	1fd68 <net_if_start_rs>
   1fdba:	bf00      	nop
   1fdbc:	2000da00 	.word	0x2000da00
   1fdc0:	2000da20 	.word	0x2000da20

0001fdc4 <net_if_ipv6_addr_lookup>:
{
   1fdc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fdc8:	4b17      	ldr	r3, [pc, #92]	; (1fe28 <net_if_ipv6_addr_lookup+0x64>)
   1fdca:	4d18      	ldr	r5, [pc, #96]	; (1fe2c <net_if_ipv6_addr_lookup+0x68>)
{
   1fdcc:	4682      	mov	sl, r0
   1fdce:	4688      	mov	r8, r1
			if (!ipv6->unicast[i].is_used ||
   1fdd0:	f04f 0b48 	mov.w	fp, #72	; 0x48
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fdd4:	429d      	cmp	r5, r3
   1fdd6:	d101      	bne.n	1fddc <net_if_ipv6_addr_lookup+0x18>
	return NULL;
   1fdd8:	2000      	movs	r0, #0
   1fdda:	e01c      	b.n	1fe16 <net_if_ipv6_addr_lookup+0x52>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1fddc:	686f      	ldr	r7, [r5, #4]
		if (!ipv6) {
   1fdde:	b307      	cbz	r7, 1fe22 <net_if_ipv6_addr_lookup+0x5e>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fde0:	2600      	movs	r6, #0
			if (net_is_ipv6_prefix(
   1fde2:	f107 0904 	add.w	r9, r7, #4
			if (!ipv6->unicast[i].is_used ||
   1fde6:	fb0b f106 	mul.w	r1, fp, r6
   1fdea:	187c      	adds	r4, r7, r1
   1fdec:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
   1fdf0:	0792      	lsls	r2, r2, #30
   1fdf2:	d513      	bpl.n	1fe1c <net_if_ipv6_addr_lookup+0x58>
   1fdf4:	5a7a      	ldrh	r2, [r7, r1]
   1fdf6:	2a0a      	cmp	r2, #10
   1fdf8:	d110      	bne.n	1fe1c <net_if_ipv6_addr_lookup+0x58>
			if (net_is_ipv6_prefix(
   1fdfa:	2280      	movs	r2, #128	; 0x80
   1fdfc:	4449      	add	r1, r9
   1fdfe:	4650      	mov	r0, sl
   1fe00:	9301      	str	r3, [sp, #4]
   1fe02:	f7ff fe3e 	bl	1fa82 <net_is_ipv6_prefix>
   1fe06:	9b01      	ldr	r3, [sp, #4]
   1fe08:	b140      	cbz	r0, 1fe1c <net_if_ipv6_addr_lookup+0x58>
				if (ret) {
   1fe0a:	f1b8 0f00 	cmp.w	r8, #0
   1fe0e:	d001      	beq.n	1fe14 <net_if_ipv6_addr_lookup+0x50>
					*ret = iface;
   1fe10:	f8c8 5000 	str.w	r5, [r8]
				return &ipv6->unicast[i];
   1fe14:	4620      	mov	r0, r4
}
   1fe16:	b003      	add	sp, #12
   1fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fe1c:	3601      	adds	r6, #1
   1fe1e:	2e03      	cmp	r6, #3
   1fe20:	d1e1      	bne.n	1fde6 <net_if_ipv6_addr_lookup+0x22>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1fe22:	3520      	adds	r5, #32
   1fe24:	e7d6      	b.n	1fdd4 <net_if_ipv6_addr_lookup+0x10>
   1fe26:	bf00      	nop
   1fe28:	2000da20 	.word	0x2000da20
   1fe2c:	2000da00 	.word	0x2000da00

0001fe30 <dad_timeout>:
{
   1fe30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_if *iface = NULL;
   1fe32:	a902      	add	r1, sp, #8
   1fe34:	2300      	movs	r3, #0
   1fe36:	f841 3d04 	str.w	r3, [r1, #-4]!
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1fe3a:	f1a0 0420 	sub.w	r4, r0, #32
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1fe3e:	2301      	movs	r3, #1
   1fe40:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1fe44:	f1a0 0524 	sub.w	r5, r0, #36	; 0x24
   1fe48:	4620      	mov	r0, r4
   1fe4a:	f7ff ffbb 	bl	1fdc4 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1fe4e:	4285      	cmp	r5, r0
   1fe50:	d107      	bne.n	1fe62 <dad_timeout+0x32>
		net_mgmt_event_notify(NET_EVENT_IPV6_DAD_SUCCEED, iface);
   1fe52:	9901      	ldr	r1, [sp, #4]
   1fe54:	4804      	ldr	r0, [pc, #16]	; (1fe68 <dad_timeout+0x38>)
   1fe56:	f7ff fe49 	bl	1faec <net_mgmt_event_notify>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1fe5a:	4621      	mov	r1, r4
   1fe5c:	9801      	ldr	r0, [sp, #4]
   1fe5e:	f004 fc77 	bl	24750 <net_ipv6_nbr_rm>
}
   1fe62:	b003      	add	sp, #12
   1fe64:	bd30      	pop	{r4, r5, pc}
   1fe66:	bf00      	nop
   1fe68:	f060000d 	.word	0xf060000d

0001fe6c <net_if_ipv6_addr_lookup_by_iface>:
{
   1fe6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1fe70:	6846      	ldr	r6, [r0, #4]
{
   1fe72:	460f      	mov	r7, r1
	if (!ipv6) {
   1fe74:	b1d6      	cbz	r6, 1feac <net_if_ipv6_addr_lookup_by_iface+0x40>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fe76:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used ||
   1fe78:	f04f 0848 	mov.w	r8, #72	; 0x48
		if (net_is_ipv6_prefix(
   1fe7c:	f106 0904 	add.w	r9, r6, #4
		if (!ipv6->unicast[i].is_used ||
   1fe80:	fb08 f105 	mul.w	r1, r8, r5
   1fe84:	1874      	adds	r4, r6, r1
   1fe86:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   1fe8a:	079b      	lsls	r3, r3, #30
   1fe8c:	d50b      	bpl.n	1fea6 <net_if_ipv6_addr_lookup_by_iface+0x3a>
   1fe8e:	5a73      	ldrh	r3, [r6, r1]
   1fe90:	2b0a      	cmp	r3, #10
   1fe92:	d108      	bne.n	1fea6 <net_if_ipv6_addr_lookup_by_iface+0x3a>
		if (net_is_ipv6_prefix(
   1fe94:	2280      	movs	r2, #128	; 0x80
   1fe96:	4449      	add	r1, r9
   1fe98:	4638      	mov	r0, r7
   1fe9a:	f7ff fdf2 	bl	1fa82 <net_is_ipv6_prefix>
   1fe9e:	b110      	cbz	r0, 1fea6 <net_if_ipv6_addr_lookup_by_iface+0x3a>
			return &ipv6->unicast[i];
   1fea0:	4620      	mov	r0, r4
}
   1fea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1fea6:	3501      	adds	r5, #1
   1fea8:	2d03      	cmp	r5, #3
   1feaa:	d1e9      	bne.n	1fe80 <net_if_ipv6_addr_lookup_by_iface+0x14>
		return NULL;
   1feac:	2000      	movs	r0, #0
   1feae:	e7f8      	b.n	1fea2 <net_if_ipv6_addr_lookup_by_iface+0x36>

0001feb0 <net_if_ipv6_addr_update_lifetime>:
{
   1feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1feb2:	4604      	mov	r4, r0
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1feb4:	2301      	movs	r3, #1
   1feb6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	parent->next = child;
   1feba:	2300      	movs	r3, #0
   1febc:	6163      	str	r3, [r4, #20]
Z_GENLIST_APPEND(slist, snode)
   1febe:	4b1f      	ldr	r3, [pc, #124]	; (1ff3c <net_if_ipv6_addr_update_lifetime+0x8c>)
	u64_t expire_timeout = K_SECONDS((u64_t)vlifetime);
   1fec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1fec4:	fba1 6700 	umull	r6, r7, r1, r0
   1fec8:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&active_address_lifetime_timers,
   1feca:	f104 0214 	add.w	r2, r4, #20
   1fece:	bb71      	cbnz	r1, 1ff2e <net_if_ipv6_addr_update_lifetime+0x7e>
	list->head = node;
   1fed0:	e9c3 2200 	strd	r2, r2, [r3]
   1fed4:	f00c fdd4 	bl	2ca80 <_impl_k_uptime_get_32>
	ifaddr->lifetime.wrap_counter = expire_timeout /
   1fed8:	4a19      	ldr	r2, [pc, #100]	; (1ff40 <net_if_ipv6_addr_update_lifetime+0x90>)
	ifaddr->lifetime.timer_start = k_uptime_get_32();
   1feda:	61a0      	str	r0, [r4, #24]
	ifaddr->lifetime.wrap_counter = expire_timeout /
   1fedc:	2300      	movs	r3, #0
   1fede:	4630      	mov	r0, r6
   1fee0:	4639      	mov	r1, r7
   1fee2:	f7e0 f9e7 	bl	2b4 <__aeabi_uldivmod>
	ifaddr->lifetime.timer_timeout = expire_timeout -
   1fee6:	4b16      	ldr	r3, [pc, #88]	; (1ff40 <net_if_ipv6_addr_update_lifetime+0x90>)
	ifaddr->lifetime.wrap_counter = expire_timeout /
   1fee8:	6220      	str	r0, [r4, #32]
	ifaddr->lifetime.timer_timeout = expire_timeout -
   1feea:	fb03 6010 	mls	r0, r3, r0, r6
   1feee:	61e0      	str	r0, [r4, #28]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   1fef0:	4814      	ldr	r0, [pc, #80]	; (1ff44 <net_if_ipv6_addr_update_lifetime+0x94>)
   1fef2:	f00c fcd5 	bl	2c8a0 <z_timeout_remaining>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   1fef6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1fefa:	2264      	movs	r2, #100	; 0x64
   1fefc:	2300      	movs	r3, #0
   1fefe:	fb80 0101 	smull	r0, r1, r0, r1
   1ff02:	f7e0 f9d7 	bl	2b4 <__aeabi_uldivmod>
	if (!remaining || (ifaddr->lifetime.wrap_counter == 0 &&
   1ff06:	4605      	mov	r5, r0
   1ff08:	b120      	cbz	r0, 1ff14 <net_if_ipv6_addr_update_lifetime+0x64>
   1ff0a:	6a23      	ldr	r3, [r4, #32]
   1ff0c:	b9a3      	cbnz	r3, 1ff38 <net_if_ipv6_addr_update_lifetime+0x88>
   1ff0e:	69e3      	ldr	r3, [r4, #28]
   1ff10:	4283      	cmp	r3, r0
   1ff12:	da11      	bge.n	1ff38 <net_if_ipv6_addr_update_lifetime+0x88>
		k_delayed_work_cancel(&address_lifetime_timer);
   1ff14:	480c      	ldr	r0, [pc, #48]	; (1ff48 <net_if_ipv6_addr_update_lifetime+0x98>)
   1ff16:	f00c fc04 	bl	2c722 <k_delayed_work_cancel>
		if (ifaddr->lifetime.wrap_counter > 0 && remaining == 0) {
   1ff1a:	6a23      	ldr	r3, [r4, #32]
   1ff1c:	2b00      	cmp	r3, #0
   1ff1e:	dd09      	ble.n	1ff34 <net_if_ipv6_addr_update_lifetime+0x84>
   1ff20:	b945      	cbnz	r5, 1ff34 <net_if_ipv6_addr_update_lifetime+0x84>
			k_delayed_work_submit(&address_lifetime_timer,
   1ff22:	4907      	ldr	r1, [pc, #28]	; (1ff40 <net_if_ipv6_addr_update_lifetime+0x90>)
			k_delayed_work_submit(&address_lifetime_timer,
   1ff24:	4808      	ldr	r0, [pc, #32]	; (1ff48 <net_if_ipv6_addr_update_lifetime+0x98>)
}
   1ff26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_delayed_work_submit(&address_lifetime_timer,
   1ff2a:	f7ff bdd7 	b.w	1fadc <k_delayed_work_submit>
	parent->next = child;
   1ff2e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1ff30:	605a      	str	r2, [r3, #4]
   1ff32:	e7cf      	b.n	1fed4 <net_if_ipv6_addr_update_lifetime+0x24>
   1ff34:	69e1      	ldr	r1, [r4, #28]
   1ff36:	e7f5      	b.n	1ff24 <net_if_ipv6_addr_update_lifetime+0x74>
}
   1ff38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff3a:	bf00      	nop
   1ff3c:	20002260 	.word	0x20002260
   1ff40:	7fffff9b 	.word	0x7fffff9b
   1ff44:	2000227c 	.word	0x2000227c
   1ff48:	20002270 	.word	0x20002270

0001ff4c <net_if_ipv6_addr_add>:
{
   1ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff50:	b08f      	sub	sp, #60	; 0x3c
   1ff52:	4688      	mov	r8, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1ff54:	a905      	add	r1, sp, #20
{
   1ff56:	4607      	mov	r7, r0
   1ff58:	4693      	mov	fp, r2
   1ff5a:	461c      	mov	r4, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1ff5c:	f7ff feec 	bl	1fd38 <net_if_config_ipv6_get>
   1ff60:	2800      	cmp	r0, #0
   1ff62:	da03      	bge.n	1ff6c <net_if_ipv6_addr_add+0x20>
		return NULL;
   1ff64:	2000      	movs	r0, #0
}
   1ff66:	b00f      	add	sp, #60	; 0x3c
   1ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
   1ff6c:	f8d7 9004 	ldr.w	r9, [r7, #4]
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ff70:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used) {
   1ff72:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (net_ipv6_addr_cmp(
   1ff76:	f109 0304 	add.w	r3, r9, #4
		if (!ipv6->unicast[i].is_used) {
   1ff7a:	fb0a f105 	mul.w	r1, sl, r5
   1ff7e:	eb09 0601 	add.w	r6, r9, r1
   1ff82:	f896 2047 	ldrb.w	r2, [r6, #71]	; 0x47
   1ff86:	0792      	lsls	r2, r2, #30
   1ff88:	d508      	bpl.n	1ff9c <net_if_ipv6_addr_add+0x50>
		if (net_ipv6_addr_cmp(
   1ff8a:	4419      	add	r1, r3
   1ff8c:	4640      	mov	r0, r8
   1ff8e:	9303      	str	r3, [sp, #12]
   1ff90:	f7ff fd9c 	bl	1facc <net_ipv6_addr_cmp>
   1ff94:	9b03      	ldr	r3, [sp, #12]
   1ff96:	b108      	cbz	r0, 1ff9c <net_if_ipv6_addr_add+0x50>
			return &ipv6->unicast[i];
   1ff98:	4630      	mov	r0, r6
   1ff9a:	e7e4      	b.n	1ff66 <net_if_ipv6_addr_add+0x1a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ff9c:	3501      	adds	r5, #1
   1ff9e:	2d03      	cmp	r5, #3
   1ffa0:	d1eb      	bne.n	1ff7a <net_if_ipv6_addr_add+0x2e>
		if (ipv6->unicast[i].is_used) {
   1ffa2:	f8dd a014 	ldr.w	sl, [sp, #20]
   1ffa6:	f89a 5047 	ldrb.w	r5, [sl, #71]	; 0x47
   1ffaa:	f3c5 0540 	ubfx	r5, r5, #1, #1
   1ffae:	b14d      	cbz	r5, 1ffc4 <net_if_ipv6_addr_add+0x78>
   1ffb0:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
   1ffb4:	079d      	lsls	r5, r3, #30
   1ffb6:	f140 80eb 	bpl.w	20190 <net_if_ipv6_addr_add+0x244>
   1ffba:	f89a 30d7 	ldrb.w	r3, [sl, #215]	; 0xd7
   1ffbe:	0798      	lsls	r0, r3, #30
   1ffc0:	d4d0      	bmi.n	1ff64 <net_if_ipv6_addr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ffc2:	2502      	movs	r5, #2
   1ffc4:	2648      	movs	r6, #72	; 0x48
   1ffc6:	436e      	muls	r6, r5
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
   1ffc8:	eb0a 0906 	add.w	r9, sl, r6
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1ffcc:	f10d 0c18 	add.w	ip, sp, #24
	ifaddr->is_used = true;
   1ffd0:	f899 3047 	ldrb.w	r3, [r9, #71]	; 0x47
   1ffd4:	f043 0302 	orr.w	r3, r3, #2
   1ffd8:	f889 3047 	strb.w	r3, [r9, #71]	; 0x47
	ifaddr->address.family = AF_INET6;
   1ffdc:	230a      	movs	r3, #10
   1ffde:	f82a 3006 	strh.w	r3, [sl, r6]
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1ffe2:	4642      	mov	r2, r8
	ifaddr->addr_type = addr_type;
   1ffe4:	f889 b044 	strb.w	fp, [r9, #68]	; 0x44
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1ffe8:	f108 0810 	add.w	r8, r8, #16
   1ffec:	4663      	mov	r3, ip
   1ffee:	6810      	ldr	r0, [r2, #0]
   1fff0:	6851      	ldr	r1, [r2, #4]
   1fff2:	46e6      	mov	lr, ip
   1fff4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1fff8:	3208      	adds	r2, #8
   1fffa:	4542      	cmp	r2, r8
   1fffc:	46f4      	mov	ip, lr
   1fffe:	d1f6      	bne.n	1ffee <net_if_ipv6_addr_add+0xa2>
   20000:	461a      	mov	r2, r3
   20002:	f109 0c04 	add.w	ip, r9, #4
   20006:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   2000a:	4613      	mov	r3, r2
   2000c:	cb03      	ldmia	r3!, {r0, r1}
   2000e:	4543      	cmp	r3, r8
   20010:	f8cc 0000 	str.w	r0, [ip]
   20014:	f8cc 1004 	str.w	r1, [ip, #4]
   20018:	461a      	mov	r2, r3
   2001a:	f10c 0c08 	add.w	ip, ip, #8
   2001e:	d1f4      	bne.n	2000a <net_if_ipv6_addr_add+0xbe>
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   20020:	f106 0024 	add.w	r0, r6, #36	; 0x24
   20024:	495e      	ldr	r1, [pc, #376]	; (201a0 <net_if_ipv6_addr_add+0x254>)
   20026:	4450      	add	r0, sl
   20028:	f00c fb72 	bl	2c710 <k_delayed_work_init>
   2002c:	2348      	movs	r3, #72	; 0x48
		ifaddr->is_infinite = false;
   2002e:	fb03 a305 	mla	r3, r3, r5, sl
   20032:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (vlifetime) {
   20036:	2c00      	cmp	r4, #0
   20038:	f000 80ac 	beq.w	20194 <net_if_ipv6_addr_add+0x248>
		ifaddr->is_infinite = false;
   2003c:	f36f 0200 	bfc	r2, #0, #1
   20040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   20044:	4621      	mov	r1, r4
   20046:	4648      	mov	r0, r9
   20048:	f7ff ff32 	bl	1feb0 <net_if_ipv6_addr_update_lifetime>
	return iface->if_dev->l2;
   2004c:	683b      	ldr	r3, [r7, #0]
		join_mcast_nodes(iface, &ipv6->unicast[i].address.in6_addr);
   2004e:	f8dd a014 	ldr.w	sl, [sp, #20]
	if (net_if_l2(iface)->get_flags) {
   20052:	685b      	ldr	r3, [r3, #4]
   20054:	691c      	ldr	r4, [r3, #16]
   20056:	b114      	cbz	r4, 2005e <net_if_ipv6_addr_add+0x112>
		flags = net_if_l2(iface)->get_flags(iface);
   20058:	4638      	mov	r0, r7
   2005a:	47a0      	blx	r4
   2005c:	4604      	mov	r4, r0
	if (flags & NET_L2_MULTICAST) {
   2005e:	07e1      	lsls	r1, r4, #31
   20060:	f140 808a 	bpl.w	20178 <net_if_ipv6_addr_add+0x22c>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20064:	f240 23ff 	movw	r3, #767	; 0x2ff
   20068:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2006c:	f04f 0900 	mov.w	r9, #0
   20070:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20074:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   20078:	f8ad 902e 	strh.w	r9, [sp, #46]	; 0x2e
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   2007c:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20080:	f8ad 9032 	strh.w	r9, [sp, #50]	; 0x32
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20084:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   20088:	f44f 7380 	mov.w	r3, #256	; 0x100
   2008c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	ret = net_ipv6_mld_join(iface, &addr);
   20090:	4641      	mov	r1, r8
   20092:	4638      	mov	r0, r7
   20094:	f006 f94e 	bl	26334 <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
   20098:	1e03      	subs	r3, r0, #0
   2009a:	da22      	bge.n	200e2 <net_if_ipv6_addr_add+0x196>
   2009c:	f113 0f45 	cmn.w	r3, #69	; 0x45
   200a0:	d01f      	beq.n	200e2 <net_if_ipv6_addr_add+0x196>
		NET_ERR("Cannot join all nodes address %s (%d)",
   200a2:	4a40      	ldr	r2, [pc, #256]	; (201a4 <net_if_ipv6_addr_add+0x258>)
   200a4:	6812      	ldr	r2, [r2, #0]
   200a6:	0752      	lsls	r2, r2, #29
   200a8:	d01b      	beq.n	200e2 <net_if_ipv6_addr_add+0x196>
   200aa:	2201      	movs	r2, #1
   200ac:	f04f 0b00 	mov.w	fp, #0
   200b0:	f362 0b02 	bfi	fp, r2, #0, #3
   200b4:	493c      	ldr	r1, [pc, #240]	; (201a8 <net_if_ipv6_addr_add+0x25c>)
   200b6:	4a3d      	ldr	r2, [pc, #244]	; (201ac <net_if_ipv6_addr_add+0x260>)
   200b8:	9303      	str	r3, [sp, #12]
   200ba:	1a52      	subs	r2, r2, r1
   200bc:	08d2      	lsrs	r2, r2, #3
   200be:	4641      	mov	r1, r8
   200c0:	f369 0bc5 	bfi	fp, r9, #3, #3
   200c4:	200a      	movs	r0, #10
   200c6:	f362 1b8f 	bfi	fp, r2, #6, #10
   200ca:	f002 f815 	bl	220f8 <net_sprint_addr>
   200ce:	f7e1 ffd5 	bl	207c <log_strdup>
   200d2:	f8ad b000 	strh.w	fp, [sp]
   200d6:	4602      	mov	r2, r0
   200d8:	9b03      	ldr	r3, [sp, #12]
   200da:	4935      	ldr	r1, [pc, #212]	; (201b0 <net_if_ipv6_addr_add+0x264>)
   200dc:	4835      	ldr	r0, [pc, #212]	; (201b4 <net_if_ipv6_addr_add+0x268>)
   200de:	f7e1 fe67 	bl	1db0 <log_3>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
   200e2:	f014 0402 	ands.w	r4, r4, #2
   200e6:	d147      	bne.n	20178 <net_if_ipv6_addr_add+0x22c>
	dst->s6_addr[0]   = 0xFF;
   200e8:	f240 23ff 	movw	r3, #767	; 0x2ff
   200ec:	930a      	str	r3, [sp, #40]	; 0x28
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   200ee:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   200f2:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   200f6:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
	dst->s6_addr[10]  = 0;
   200fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   200fe:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	dst->s6_addr[11]  = 0x01;
   20102:	23ff      	movs	r3, #255	; 0xff
   20104:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	dst->s6_addr[13]  = src->s6_addr[13];
   20108:	2348      	movs	r3, #72	; 0x48
   2010a:	fb03 a505 	mla	r5, r3, r5, sl
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   2010e:	44b2      	add	sl, r6
	dst->s6_addr[13]  = src->s6_addr[13];
   20110:	7c6b      	ldrb	r3, [r5, #17]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   20112:	f89a 2013 	ldrb.w	r2, [sl, #19]
	dst->s6_addr[13]  = src->s6_addr[13];
   20116:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   2011a:	f89a 3012 	ldrb.w	r3, [sl, #18]
   2011e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20122:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	ret = net_ipv6_mld_join(iface, &addr);
   20126:	4641      	mov	r1, r8
   20128:	4638      	mov	r0, r7
   2012a:	f006 f903 	bl	26334 <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
   2012e:	f1b0 0900 	subs.w	r9, r0, #0
   20132:	da21      	bge.n	20178 <net_if_ipv6_addr_add+0x22c>
   20134:	f119 0f45 	cmn.w	r9, #69	; 0x45
   20138:	d01e      	beq.n	20178 <net_if_ipv6_addr_add+0x22c>
		NET_ERR("Cannot join solicit node address %s (%d)",
   2013a:	4b1a      	ldr	r3, [pc, #104]	; (201a4 <net_if_ipv6_addr_add+0x258>)
   2013c:	681b      	ldr	r3, [r3, #0]
   2013e:	075b      	lsls	r3, r3, #29
   20140:	d01a      	beq.n	20178 <net_if_ipv6_addr_add+0x22c>
   20142:	2301      	movs	r3, #1
   20144:	f04f 0500 	mov.w	r5, #0
   20148:	f363 0502 	bfi	r5, r3, #0, #3
   2014c:	4a17      	ldr	r2, [pc, #92]	; (201ac <net_if_ipv6_addr_add+0x260>)
   2014e:	4b16      	ldr	r3, [pc, #88]	; (201a8 <net_if_ipv6_addr_add+0x25c>)
   20150:	1ad2      	subs	r2, r2, r3
   20152:	08d2      	lsrs	r2, r2, #3
   20154:	4641      	mov	r1, r8
   20156:	f364 05c5 	bfi	r5, r4, #3, #3
   2015a:	200a      	movs	r0, #10
   2015c:	f362 158f 	bfi	r5, r2, #6, #10
   20160:	f001 ffca 	bl	220f8 <net_sprint_addr>
   20164:	f7e1 ff8a 	bl	207c <log_strdup>
   20168:	f8ad 5000 	strh.w	r5, [sp]
   2016c:	4602      	mov	r2, r0
   2016e:	464b      	mov	r3, r9
   20170:	4911      	ldr	r1, [pc, #68]	; (201b8 <net_if_ipv6_addr_add+0x26c>)
   20172:	4812      	ldr	r0, [pc, #72]	; (201bc <net_if_ipv6_addr_add+0x270>)
   20174:	f7e1 fe1c 	bl	1db0 <log_3>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   20178:	9905      	ldr	r1, [sp, #20]
   2017a:	4638      	mov	r0, r7
   2017c:	4431      	add	r1, r6
   2017e:	f7ff fd27 	bl	1fbd0 <net_if_ipv6_start_dad>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_ADD, iface);
   20182:	480f      	ldr	r0, [pc, #60]	; (201c0 <net_if_ipv6_addr_add+0x274>)
   20184:	4639      	mov	r1, r7
   20186:	f7ff fcb1 	bl	1faec <net_mgmt_event_notify>
		return &ipv6->unicast[i];
   2018a:	9805      	ldr	r0, [sp, #20]
   2018c:	4430      	add	r0, r6
   2018e:	e6ea      	b.n	1ff66 <net_if_ipv6_addr_add+0x1a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20190:	2501      	movs	r5, #1
   20192:	e717      	b.n	1ffc4 <net_if_ipv6_addr_add+0x78>
		ifaddr->is_infinite = true;
   20194:	f042 0201 	orr.w	r2, r2, #1
   20198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   2019c:	e756      	b.n	2004c <net_if_ipv6_addr_add+0x100>
   2019e:	bf00      	nop
   201a0:	0001fe31 	.word	0x0001fe31
   201a4:	2000d794 	.word	0x2000d794
   201a8:	0002cff8 	.word	0x0002cff8
   201ac:	0002d100 	.word	0x0002d100
   201b0:	00032358 	.word	0x00032358
   201b4:	000324c6 	.word	0x000324c6
   201b8:	0003236c 	.word	0x0003236c
   201bc:	000324f0 	.word	0x000324f0
   201c0:	f0600001 	.word	0xf0600001

000201c4 <net_if_start_dad>:
{
   201c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct in6_addr addr = { };
   201c6:	2210      	movs	r2, #16
{
   201c8:	b089      	sub	sp, #36	; 0x24
   201ca:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   201cc:	2100      	movs	r1, #0
   201ce:	eb0d 0002 	add.w	r0, sp, r2
   201d2:	f7e5 fe86 	bl	5ee2 <memset>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   201d6:	a903      	add	r1, sp, #12
   201d8:	4628      	mov	r0, r5
   201da:	f7ff fdad 	bl	1fd38 <net_if_config_ipv6_get>
   201de:	2800      	cmp	r0, #0
   201e0:	db5e      	blt.n	202a0 <net_if_start_dad+0xdc>
	if (!ipv6) {
   201e2:	9b03      	ldr	r3, [sp, #12]
   201e4:	2b00      	cmp	r3, #0
   201e6:	d05b      	beq.n	202a0 <net_if_start_dad+0xdc>
	addr->s6_addr[0] = 0xfe;
   201e8:	f248 03fe 	movw	r3, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));
   201ec:	682c      	ldr	r4, [r5, #0]
   201ee:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   201f0:	2300      	movs	r3, #0
   201f2:	9305      	str	r3, [sp, #20]
	switch (lladdr->len) {
   201f4:	7d22      	ldrb	r2, [r4, #20]
   201f6:	2a06      	cmp	r2, #6
   201f8:	d054      	beq.n	202a4 <net_if_start_dad+0xe0>
   201fa:	2a08      	cmp	r2, #8
   201fc:	d06f      	beq.n	202de <net_if_start_dad+0x11a>
   201fe:	2a02      	cmp	r2, #2
   20200:	d112      	bne.n	20228 <net_if_start_dad+0x64>
		if (lladdr->type == NET_LINK_IEEE802154) {
   20202:	7d62      	ldrb	r2, [r4, #21]
   20204:	2a01      	cmp	r2, #1
   20206:	d10f      	bne.n	20228 <net_if_start_dad+0x64>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   20208:	9306      	str	r3, [sp, #24]
			addr->s6_addr[11] = 0xff;
   2020a:	22ff      	movs	r2, #255	; 0xff
   2020c:	f88d 201b 	strb.w	r2, [sp, #27]
			addr->s6_addr[13] = 0;
   20210:	f88d 301d 	strb.w	r3, [sp, #29]
			addr->s6_addr[12] = 0xfe;
   20214:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   20216:	6923      	ldr	r3, [r4, #16]
			addr->s6_addr[12] = 0xfe;
   20218:	f88d 201c 	strb.w	r2, [sp, #28]
			addr->s6_addr[14] = lladdr->addr[0];
   2021c:	781a      	ldrb	r2, [r3, #0]
   2021e:	f88d 201e 	strb.w	r2, [sp, #30]
			addr->s6_addr[15] = lladdr->addr[1];
   20222:	785b      	ldrb	r3, [r3, #1]
   20224:	f88d 301f 	strb.w	r3, [sp, #31]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   20228:	2300      	movs	r3, #0
   2022a:	2201      	movs	r2, #1
   2022c:	a904      	add	r1, sp, #16
   2022e:	4628      	mov	r0, r5
   20230:	f7ff fe8c 	bl	1ff4c <net_if_ipv6_addr_add>
	if (!ifaddr) {
   20234:	4606      	mov	r6, r0
   20236:	b9f0      	cbnz	r0, 20276 <net_if_start_dad+0xb2>
		NET_ERR("Cannot add %s address to interface %p, DAD fails",
   20238:	4b2b      	ldr	r3, [pc, #172]	; (202e8 <net_if_start_dad+0x124>)
   2023a:	681b      	ldr	r3, [r3, #0]
   2023c:	075c      	lsls	r4, r3, #29
   2023e:	d01a      	beq.n	20276 <net_if_start_dad+0xb2>
   20240:	2301      	movs	r3, #1
   20242:	f04f 0400 	mov.w	r4, #0
   20246:	4a29      	ldr	r2, [pc, #164]	; (202ec <net_if_start_dad+0x128>)
   20248:	f363 0402 	bfi	r4, r3, #0, #3
   2024c:	4b28      	ldr	r3, [pc, #160]	; (202f0 <net_if_start_dad+0x12c>)
   2024e:	1a9b      	subs	r3, r3, r2
   20250:	08db      	lsrs	r3, r3, #3
   20252:	a904      	add	r1, sp, #16
   20254:	f360 04c5 	bfi	r4, r0, #3, #3
   20258:	200a      	movs	r0, #10
   2025a:	f363 148f 	bfi	r4, r3, #6, #10
   2025e:	f001 ff4b 	bl	220f8 <net_sprint_addr>
   20262:	f7e1 ff0b 	bl	207c <log_strdup>
   20266:	f8ad 4000 	strh.w	r4, [sp]
   2026a:	4602      	mov	r2, r0
   2026c:	462b      	mov	r3, r5
   2026e:	4921      	ldr	r1, [pc, #132]	; (202f4 <net_if_start_dad+0x130>)
   20270:	4821      	ldr	r0, [pc, #132]	; (202f8 <net_if_start_dad+0x134>)
   20272:	f7e1 fd9d 	bl	1db0 <log_3>
{
   20276:	2400      	movs	r4, #0
		if (!ipv6->unicast[i].is_used ||
   20278:	2748      	movs	r7, #72	; 0x48
   2027a:	9a03      	ldr	r2, [sp, #12]
   2027c:	fb07 f304 	mul.w	r3, r7, r4
   20280:	18d1      	adds	r1, r2, r3
   20282:	f891 0047 	ldrb.w	r0, [r1, #71]	; 0x47
   20286:	0780      	lsls	r0, r0, #30
   20288:	d507      	bpl.n	2029a <net_if_start_dad+0xd6>
   2028a:	5ad3      	ldrh	r3, [r2, r3]
   2028c:	2b0a      	cmp	r3, #10
   2028e:	d104      	bne.n	2029a <net_if_start_dad+0xd6>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   20290:	42b1      	cmp	r1, r6
   20292:	d002      	beq.n	2029a <net_if_start_dad+0xd6>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   20294:	4628      	mov	r0, r5
   20296:	f7ff fc9b 	bl	1fbd0 <net_if_ipv6_start_dad>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2029a:	3401      	adds	r4, #1
   2029c:	2c03      	cmp	r4, #3
   2029e:	d1ec      	bne.n	2027a <net_if_start_dad+0xb6>
}
   202a0:	b009      	add	sp, #36	; 0x24
   202a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   202a4:	2203      	movs	r2, #3
   202a6:	6921      	ldr	r1, [r4, #16]
   202a8:	a806      	add	r0, sp, #24
   202aa:	f7e5 fded 	bl	5e88 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   202ae:	6921      	ldr	r1, [r4, #16]
		addr->s6_addr[11] = 0xff;
   202b0:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   202b2:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   202b4:	f88d 301b 	strb.w	r3, [sp, #27]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   202b8:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   202ba:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   202bc:	f10d 001d 	add.w	r0, sp, #29
		addr->s6_addr[12] = 0xfe;
   202c0:	f88d 301c 	strb.w	r3, [sp, #28]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   202c4:	f7e5 fde0 	bl	5e88 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   202c8:	7d63      	ldrb	r3, [r4, #21]
   202ca:	3b02      	subs	r3, #2
   202cc:	2b01      	cmp	r3, #1
   202ce:	d8ab      	bhi.n	20228 <net_if_start_dad+0x64>
		addr->s6_addr[8] ^= 0x02;
   202d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   202d4:	f083 0302 	eor.w	r3, r3, #2
   202d8:	f88d 3018 	strb.w	r3, [sp, #24]
   202dc:	e7a4      	b.n	20228 <net_if_start_dad+0x64>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   202de:	6921      	ldr	r1, [r4, #16]
   202e0:	a806      	add	r0, sp, #24
   202e2:	f7e5 fdd1 	bl	5e88 <memcpy>
   202e6:	e7f3      	b.n	202d0 <net_if_start_dad+0x10c>
   202e8:	2000d794 	.word	0x2000d794
   202ec:	0002cff8 	.word	0x0002cff8
   202f0:	0002d100 	.word	0x0002d100
   202f4:	00032384 	.word	0x00032384
   202f8:	00032548 	.word	0x00032548

000202fc <net_if_ipv6_maddr_add>:
{
   202fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   202fe:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   20300:	a901      	add	r1, sp, #4
{
   20302:	4606      	mov	r6, r0
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   20304:	f7ff fd18 	bl	1fd38 <net_if_config_ipv6_get>
   20308:	2800      	cmp	r0, #0
   2030a:	db14      	blt.n	20336 <net_if_ipv6_maddr_add+0x3a>
	if (!net_is_ipv6_addr_mcast(addr)) {
   2030c:	782b      	ldrb	r3, [r5, #0]
   2030e:	2bff      	cmp	r3, #255	; 0xff
   20310:	d111      	bne.n	20336 <net_if_ipv6_maddr_add+0x3a>
		if (ipv6->mcast[i].is_used) {
   20312:	9801      	ldr	r0, [sp, #4]
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   20314:	2300      	movs	r3, #0
		if (ipv6->mcast[i].is_used) {
   20316:	f04f 0e18 	mov.w	lr, #24
   2031a:	fb0e f403 	mul.w	r4, lr, r3
   2031e:	1901      	adds	r1, r0, r4
   20320:	f101 07e8 	add.w	r7, r1, #232	; 0xe8
   20324:	f897 c004 	ldrb.w	ip, [r7, #4]
   20328:	f01c 0f01 	tst.w	ip, #1
   2032c:	4662      	mov	r2, ip
   2032e:	d004      	beq.n	2033a <net_if_ipv6_maddr_add+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   20330:	3301      	adds	r3, #1
   20332:	2b05      	cmp	r3, #5
   20334:	d1f1      	bne.n	2031a <net_if_ipv6_maddr_add+0x1e>
		return NULL;
   20336:	2000      	movs	r0, #0
   20338:	e013      	b.n	20362 <net_if_ipv6_maddr_add+0x66>
		ipv6->mcast[i].is_used = true;
   2033a:	f042 0301 	orr.w	r3, r2, #1
   2033e:	713b      	strb	r3, [r7, #4]
		ipv6->mcast[i].address.family = AF_INET6;
   20340:	230a      	movs	r3, #10
   20342:	f8a1 30d8 	strh.w	r3, [r1, #216]	; 0xd8
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
   20346:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
   2034a:	2210      	movs	r2, #16
   2034c:	4629      	mov	r1, r5
   2034e:	4418      	add	r0, r3
   20350:	f7e5 fd9a 	bl	5e88 <memcpy>
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_ADD, iface);
   20354:	4804      	ldr	r0, [pc, #16]	; (20368 <net_if_ipv6_maddr_add+0x6c>)
   20356:	4631      	mov	r1, r6
   20358:	f7ff fbc8 	bl	1faec <net_mgmt_event_notify>
		return &ipv6->mcast[i];
   2035c:	9801      	ldr	r0, [sp, #4]
   2035e:	34d8      	adds	r4, #216	; 0xd8
   20360:	4420      	add	r0, r4
}
   20362:	b003      	add	sp, #12
   20364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20366:	bf00      	nop
   20368:	f0600003 	.word	0xf0600003

0002036c <net_if_ipv6_maddr_rm>:
{
   2036c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   20370:	6847      	ldr	r7, [r0, #4]
{
   20372:	4680      	mov	r8, r0
   20374:	4689      	mov	r9, r1
	if (!ipv6) {
   20376:	b1ff      	cbz	r7, 203b8 <net_if_ipv6_maddr_rm+0x4c>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   20378:	2500      	movs	r5, #0
		if (!ipv6->mcast[i].is_used) {
   2037a:	f04f 0a18 	mov.w	sl, #24
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   2037e:	f107 0bdc 	add.w	fp, r7, #220	; 0xdc
		if (!ipv6->mcast[i].is_used) {
   20382:	fb0a f005 	mul.w	r0, sl, r5
   20386:	183c      	adds	r4, r7, r0
   20388:	34e8      	adds	r4, #232	; 0xe8
   2038a:	7923      	ldrb	r3, [r4, #4]
   2038c:	07db      	lsls	r3, r3, #31
   2038e:	d510      	bpl.n	203b2 <net_if_ipv6_maddr_rm+0x46>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   20390:	4649      	mov	r1, r9
   20392:	4458      	add	r0, fp
   20394:	f7ff fb9a 	bl	1facc <net_ipv6_addr_cmp>
   20398:	4606      	mov	r6, r0
   2039a:	b150      	cbz	r0, 203b2 <net_if_ipv6_maddr_rm+0x46>
		ipv6->mcast[i].is_used = false;
   2039c:	7923      	ldrb	r3, [r4, #4]
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   2039e:	4807      	ldr	r0, [pc, #28]	; (203bc <net_if_ipv6_maddr_rm+0x50>)
		ipv6->mcast[i].is_used = false;
   203a0:	f36f 0300 	bfc	r3, #0, #1
   203a4:	7123      	strb	r3, [r4, #4]
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   203a6:	4641      	mov	r1, r8
   203a8:	f7ff fba0 	bl	1faec <net_mgmt_event_notify>
}
   203ac:	4630      	mov	r0, r6
   203ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   203b2:	3501      	adds	r5, #1
   203b4:	2d05      	cmp	r5, #5
   203b6:	d1e4      	bne.n	20382 <net_if_ipv6_maddr_rm+0x16>
		return false;
   203b8:	2600      	movs	r6, #0
   203ba:	e7f7      	b.n	203ac <net_if_ipv6_maddr_rm+0x40>
   203bc:	f0600004 	.word	0xf0600004

000203c0 <net_if_ipv6_addr_rm>:
{
   203c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203c4:	4680      	mov	r8, r0
   203c6:	b087      	sub	sp, #28
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   203c8:	6846      	ldr	r6, [r0, #4]
	NET_ASSERT(addr);
   203ca:	460c      	mov	r4, r1
   203cc:	b9a1      	cbnz	r1, 203f8 <net_if_ipv6_addr_rm+0x38>
   203ce:	4b3a      	ldr	r3, [pc, #232]	; (204b8 <net_if_ipv6_addr_rm+0xf8>)
   203d0:	681b      	ldr	r3, [r3, #0]
   203d2:	0759      	lsls	r1, r3, #29
   203d4:	d010      	beq.n	203f8 <net_if_ipv6_addr_rm+0x38>
   203d6:	2301      	movs	r3, #1
   203d8:	f04f 0200 	mov.w	r2, #0
   203dc:	f363 0202 	bfi	r2, r3, #0, #3
   203e0:	4936      	ldr	r1, [pc, #216]	; (204bc <net_if_ipv6_addr_rm+0xfc>)
   203e2:	4b37      	ldr	r3, [pc, #220]	; (204c0 <net_if_ipv6_addr_rm+0x100>)
   203e4:	4837      	ldr	r0, [pc, #220]	; (204c4 <net_if_ipv6_addr_rm+0x104>)
   203e6:	1a5b      	subs	r3, r3, r1
   203e8:	f364 02c5 	bfi	r2, r4, #3, #3
   203ec:	08db      	lsrs	r3, r3, #3
   203ee:	f363 128f 	bfi	r2, r3, #6, #10
   203f2:	4935      	ldr	r1, [pc, #212]	; (204c8 <net_if_ipv6_addr_rm+0x108>)
   203f4:	f7e1 fcb0 	bl	1d58 <log_1>
	if (!ipv6) {
   203f8:	2e00      	cmp	r6, #0
   203fa:	d05b      	beq.n	204b4 <net_if_ipv6_addr_rm+0xf4>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   203fc:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used) {
   203fe:	f04f 0b48 	mov.w	fp, #72	; 0x48
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   20402:	1d33      	adds	r3, r6, #4
		if (!ipv6->unicast[i].is_used) {
   20404:	fb0b f905 	mul.w	r9, fp, r5
   20408:	eb06 0a09 	add.w	sl, r6, r9
   2040c:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
   20410:	f89a 2007 	ldrb.w	r2, [sl, #7]
   20414:	0792      	lsls	r2, r2, #30
   20416:	d54a      	bpl.n	204ae <net_if_ipv6_addr_rm+0xee>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   20418:	eb03 0009 	add.w	r0, r3, r9
   2041c:	4621      	mov	r1, r4
   2041e:	9301      	str	r3, [sp, #4]
   20420:	f7ff fb54 	bl	1facc <net_ipv6_addr_cmp>
   20424:	9b01      	ldr	r3, [sp, #4]
   20426:	4607      	mov	r7, r0
   20428:	2800      	cmp	r0, #0
   2042a:	d040      	beq.n	204ae <net_if_ipv6_addr_rm+0xee>
		if (!ipv6->unicast[i].is_infinite) {
   2042c:	f89a 3007 	ldrb.w	r3, [sl, #7]
   20430:	07db      	lsls	r3, r3, #31
   20432:	d40d      	bmi.n	20450 <net_if_ipv6_addr_rm+0x90>
			sys_slist_find_and_remove(
   20434:	f109 0114 	add.w	r1, r9, #20
   20438:	f8df 9098 	ldr.w	r9, [pc, #152]	; 204d4 <net_if_ipv6_addr_rm+0x114>
   2043c:	4431      	add	r1, r6
   2043e:	4648      	mov	r0, r9
   20440:	f7ff fab4 	bl	1f9ac <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
   20444:	f8d9 3000 	ldr.w	r3, [r9]
   20448:	b913      	cbnz	r3, 20450 <net_if_ipv6_addr_rm+0x90>
				k_delayed_work_cancel(&address_lifetime_timer);
   2044a:	4820      	ldr	r0, [pc, #128]	; (204cc <net_if_ipv6_addr_rm+0x10c>)
   2044c:	f00c f969 	bl	2c722 <k_delayed_work_cancel>
		ipv6->unicast[i].is_used = false;
   20450:	2348      	movs	r3, #72	; 0x48
   20452:	fb03 6305 	mla	r3, r3, r5, r6
   20456:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
   2045a:	f36f 0241 	bfc	r2, #1, #1
   2045e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	dst->s6_addr[0]   = 0xFF;
   20462:	f240 23ff 	movw	r3, #767	; 0x2ff
   20466:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   20468:	2300      	movs	r3, #0
   2046a:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   2046e:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   20472:	f8ad 3010 	strh.w	r3, [sp, #16]
	dst->s6_addr[10]  = 0;
   20476:	f44f 7380 	mov.w	r3, #256	; 0x100
   2047a:	f8ad 3012 	strh.w	r3, [sp, #18]
	dst->s6_addr[11]  = 0x01;
   2047e:	23ff      	movs	r3, #255	; 0xff
   20480:	f88d 3014 	strb.w	r3, [sp, #20]
	dst->s6_addr[13]  = src->s6_addr[13];
   20484:	7b63      	ldrb	r3, [r4, #13]
   20486:	f88d 3015 	strb.w	r3, [sp, #21]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   2048a:	7be2      	ldrb	r2, [r4, #15]
   2048c:	7ba3      	ldrb	r3, [r4, #14]
   2048e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20492:	f8ad 3016 	strh.w	r3, [sp, #22]
		net_if_ipv6_maddr_rm(iface, &maddr);
   20496:	a902      	add	r1, sp, #8
   20498:	4640      	mov	r0, r8
   2049a:	f7ff ff67 	bl	2036c <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_DEL, iface);
   2049e:	4641      	mov	r1, r8
   204a0:	480b      	ldr	r0, [pc, #44]	; (204d0 <net_if_ipv6_addr_rm+0x110>)
   204a2:	f7ff fb23 	bl	1faec <net_mgmt_event_notify>
}
   204a6:	4638      	mov	r0, r7
   204a8:	b007      	add	sp, #28
   204aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   204ae:	3501      	adds	r5, #1
   204b0:	2d03      	cmp	r5, #3
   204b2:	d1a7      	bne.n	20404 <net_if_ipv6_addr_rm+0x44>
		return false;
   204b4:	2700      	movs	r7, #0
   204b6:	e7f6      	b.n	204a6 <net_if_ipv6_addr_rm+0xe6>
   204b8:	2000d794 	.word	0x2000d794
   204bc:	0002cff8 	.word	0x0002cff8
   204c0:	0002d100 	.word	0x0002d100
   204c4:	00031f76 	.word	0x00031f76
   204c8:	000323ac 	.word	0x000323ac
   204cc:	20002270 	.word	0x20002270
   204d0:	f0600002 	.word	0xf0600002
   204d4:	20002260 	.word	0x20002260

000204d8 <net_if_ipv6_dad_failed>:
{
   204d8:	b530      	push	{r4, r5, lr}
   204da:	b085      	sub	sp, #20
   204dc:	ab04      	add	r3, sp, #16
   204de:	460d      	mov	r5, r1
   204e0:	f843 0d04 	str.w	r0, [r3, #-4]!
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   204e4:	4628      	mov	r0, r5
   204e6:	4619      	mov	r1, r3
   204e8:	f7ff fc6c 	bl	1fdc4 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   204ec:	bb00      	cbnz	r0, 20530 <net_if_ipv6_dad_failed+0x58>
		NET_ERR("Cannot find %s address in interface %p",
   204ee:	4b16      	ldr	r3, [pc, #88]	; (20548 <net_if_ipv6_dad_failed+0x70>)
   204f0:	681b      	ldr	r3, [r3, #0]
   204f2:	075b      	lsls	r3, r3, #29
   204f4:	d01a      	beq.n	2052c <net_if_ipv6_dad_failed+0x54>
   204f6:	2301      	movs	r3, #1
   204f8:	f04f 0400 	mov.w	r4, #0
   204fc:	4a13      	ldr	r2, [pc, #76]	; (2054c <net_if_ipv6_dad_failed+0x74>)
   204fe:	f363 0402 	bfi	r4, r3, #0, #3
   20502:	4b13      	ldr	r3, [pc, #76]	; (20550 <net_if_ipv6_dad_failed+0x78>)
   20504:	1a9b      	subs	r3, r3, r2
   20506:	08db      	lsrs	r3, r3, #3
   20508:	4629      	mov	r1, r5
   2050a:	f360 04c5 	bfi	r4, r0, #3, #3
   2050e:	200a      	movs	r0, #10
   20510:	f363 148f 	bfi	r4, r3, #6, #10
   20514:	f001 fdf0 	bl	220f8 <net_sprint_addr>
   20518:	f7e1 fdb0 	bl	207c <log_strdup>
   2051c:	f8ad 4000 	strh.w	r4, [sp]
   20520:	4602      	mov	r2, r0
   20522:	9b03      	ldr	r3, [sp, #12]
   20524:	490b      	ldr	r1, [pc, #44]	; (20554 <net_if_ipv6_dad_failed+0x7c>)
   20526:	480c      	ldr	r0, [pc, #48]	; (20558 <net_if_ipv6_dad_failed+0x80>)
   20528:	f7e1 fc42 	bl	1db0 <log_3>
}
   2052c:	b005      	add	sp, #20
   2052e:	bd30      	pop	{r4, r5, pc}
	k_delayed_work_cancel(&ifaddr->dad_timer);
   20530:	3024      	adds	r0, #36	; 0x24
   20532:	f00c f8f6 	bl	2c722 <k_delayed_work_cancel>
	net_mgmt_event_notify(NET_EVENT_IPV6_DAD_FAILED, iface);
   20536:	9903      	ldr	r1, [sp, #12]
   20538:	4808      	ldr	r0, [pc, #32]	; (2055c <net_if_ipv6_dad_failed+0x84>)
   2053a:	f7ff fad7 	bl	1faec <net_mgmt_event_notify>
	net_if_ipv6_addr_rm(iface, addr);
   2053e:	4629      	mov	r1, r5
   20540:	9803      	ldr	r0, [sp, #12]
   20542:	f7ff ff3d 	bl	203c0 <net_if_ipv6_addr_rm>
   20546:	e7f1      	b.n	2052c <net_if_ipv6_dad_failed+0x54>
   20548:	2000d794 	.word	0x2000d794
   2054c:	0002cff8 	.word	0x0002cff8
   20550:	0002d100 	.word	0x0002d100
   20554:	00032395 	.word	0x00032395
   20558:	0003251d 	.word	0x0003251d
   2055c:	f060000e 	.word	0xf060000e

00020560 <remove_prefix_addresses>:
{
   20560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20564:	4606      	mov	r6, r0
   20566:	460d      	mov	r5, r1
   20568:	4617      	mov	r7, r2
   2056a:	4698      	mov	r8, r3
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2056c:	f04f 0b00 	mov.w	fp, #0
		if (!ipv6->unicast[i].is_used ||
   20570:	f04f 0948 	mov.w	r9, #72	; 0x48
   20574:	f101 0a04 	add.w	sl, r1, #4
   20578:	fb09 f10b 	mul.w	r1, r9, fp
   2057c:	186b      	adds	r3, r5, r1
   2057e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
   20582:	0792      	lsls	r2, r2, #30
   20584:	d512      	bpl.n	205ac <remove_prefix_addresses+0x4c>
   20586:	5a6a      	ldrh	r2, [r5, r1]
   20588:	2a0a      	cmp	r2, #10
   2058a:	d10f      	bne.n	205ac <remove_prefix_addresses+0x4c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   2058c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   20590:	2b01      	cmp	r3, #1
   20592:	d10b      	bne.n	205ac <remove_prefix_addresses+0x4c>
   20594:	eb0a 0401 	add.w	r4, sl, r1
		if (net_is_ipv6_prefix(
   20598:	4642      	mov	r2, r8
   2059a:	4621      	mov	r1, r4
   2059c:	4638      	mov	r0, r7
   2059e:	f7ff fa70 	bl	1fa82 <net_is_ipv6_prefix>
   205a2:	b118      	cbz	r0, 205ac <remove_prefix_addresses+0x4c>
			net_if_ipv6_addr_rm(iface,
   205a4:	4621      	mov	r1, r4
   205a6:	4630      	mov	r0, r6
   205a8:	f7ff ff0a 	bl	203c0 <net_if_ipv6_addr_rm>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   205ac:	f10b 0b01 	add.w	fp, fp, #1
   205b0:	f1bb 0f03 	cmp.w	fp, #3
   205b4:	d1e0      	bne.n	20578 <remove_prefix_addresses+0x18>
}
   205b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000205bc <prefix_lifetime_timeout>:
{
   205bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205c0:	f00c fa5e 	bl	2ca80 <_impl_k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   205c4:	4b30      	ldr	r3, [pc, #192]	; (20688 <prefix_lifetime_timeout+0xcc>)
   205c6:	681c      	ldr	r4, [r3, #0]
   205c8:	4680      	mov	r8, r0
   205ca:	2c00      	cmp	r4, #0
   205cc:	d040      	beq.n	20650 <prefix_lifetime_timeout+0x94>
	return node->next;
   205ce:	6825      	ldr	r5, [r4, #0]
	if (ifprefix->lifetime.wrap_counter > 0) {
   205d0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 2068c <prefix_lifetime_timeout+0xd0>
	net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, ifprefix->iface);
   205d4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 20694 <prefix_lifetime_timeout+0xd8>
   205d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   205dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   205e0:	f04f 0a00 	mov.w	sl, #0
			  ifprefix->lifetime.wrap_counter,
   205e4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
	if (counter > 0) {
   205e8:	2b00      	cmp	r3, #0
   205ea:	d136      	bne.n	2065a <prefix_lifetime_timeout+0x9e>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   205ec:	6862      	ldr	r2, [r4, #4]
   205ee:	eba2 0208 	sub.w	r2, r2, r8
   205f2:	440a      	add	r2, r1
   205f4:	2a00      	cmp	r2, #0
   205f6:	dc44      	bgt.n	20682 <prefix_lifetime_timeout+0xc6>
	ifprefix->is_used = false;
   205f8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   205fc:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
   205fe:	f363 0241 	bfi	r2, r3, #1, #1
   20602:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   20606:	a901      	add	r1, sp, #4
   20608:	f7ff fb96 	bl	1fd38 <net_if_config_ipv6_get>
   2060c:	2800      	cmp	r0, #0
   2060e:	db0b      	blt.n	20628 <prefix_lifetime_timeout+0x6c>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
   20610:	9901      	ldr	r1, [sp, #4]
   20612:	6a20      	ldr	r0, [r4, #32]
   20614:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   20618:	f104 0210 	add.w	r2, r4, #16
   2061c:	f7ff ffa0 	bl	20560 <remove_prefix_addresses>
	net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, ifprefix->iface);
   20620:	6a21      	ldr	r1, [r4, #32]
   20622:	4658      	mov	r0, fp
   20624:	f7ff fa62 	bl	1faec <net_mgmt_event_notify>
		if (current == next) {
   20628:	42ac      	cmp	r4, r5
   2062a:	d003      	beq.n	20634 <prefix_lifetime_timeout+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   2062c:	b33d      	cbz	r5, 2067e <prefix_lifetime_timeout+0xc2>
   2062e:	682b      	ldr	r3, [r5, #0]
   20630:	462c      	mov	r4, r5
   20632:	b985      	cbnz	r5, 20656 <prefix_lifetime_timeout+0x9a>
	if (found) {
   20634:	f1ba 0f00 	cmp.w	sl, #0
   20638:	d00a      	beq.n	20650 <prefix_lifetime_timeout+0x94>
		k_delayed_work_submit(&prefix_lifetime_timer, timeout_update);
   2063a:	4a14      	ldr	r2, [pc, #80]	; (2068c <prefix_lifetime_timeout+0xd0>)
   2063c:	4814      	ldr	r0, [pc, #80]	; (20690 <prefix_lifetime_timeout+0xd4>)
   2063e:	2300      	movs	r3, #0
   20640:	42bb      	cmp	r3, r7
   20642:	bf08      	it	eq
   20644:	42b2      	cmpeq	r2, r6
   20646:	bf38      	it	cc
   20648:	4616      	movcc	r6, r2
   2064a:	4631      	mov	r1, r6
   2064c:	f7ff fa46 	bl	1fadc <k_delayed_work_submit>
}
   20650:	b003      	add	sp, #12
   20652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20656:	461d      	mov	r5, r3
   20658:	e7c4      	b.n	205e4 <prefix_lifetime_timeout+0x28>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   2065a:	45c8      	cmp	r8, r9
   2065c:	d101      	bne.n	20662 <prefix_lifetime_timeout+0xa6>
		ifprefix->lifetime.wrap_counter--;
   2065e:	3b01      	subs	r3, #1
   20660:	60e3      	str	r3, [r4, #12]
	if (ifprefix->lifetime.wrap_counter > 0) {
   20662:	68e3      	ldr	r3, [r4, #12]
   20664:	2b00      	cmp	r3, #0
   20666:	bfc8      	it	gt
   20668:	4649      	movgt	r1, r9
			if (next_timeout < timeout_update) {
   2066a:	2300      	movs	r3, #0
   2066c:	42bb      	cmp	r3, r7
   2066e:	bf08      	it	eq
   20670:	42b1      	cmpeq	r1, r6
   20672:	bf3e      	ittt	cc
   20674:	460e      	movcc	r6, r1
   20676:	461f      	movcc	r7, r3
				found = true;
   20678:	f04f 0a01 	movcc.w	sl, #1
   2067c:	e7d4      	b.n	20628 <prefix_lifetime_timeout+0x6c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   2067e:	462b      	mov	r3, r5
   20680:	e7d6      	b.n	20630 <prefix_lifetime_timeout+0x74>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   20682:	45c8      	cmp	r8, r9
   20684:	d1f1      	bne.n	2066a <prefix_lifetime_timeout+0xae>
   20686:	e7ea      	b.n	2065e <prefix_lifetime_timeout+0xa2>
   20688:	20002268 	.word	0x20002268
   2068c:	7fffff9b 	.word	0x7fffff9b
   20690:	20002474 	.word	0x20002474
   20694:	f0600006 	.word	0xf0600006

00020698 <net_if_ipv6_maddr_lookup>:
{
   20698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   2069c:	4d1a      	ldr	r5, [pc, #104]	; (20708 <net_if_ipv6_maddr_lookup+0x70>)
{
   2069e:	4682      	mov	sl, r0
   206a0:	460f      	mov	r7, r1
			if (!ipv6->mcast[i].is_used ||
   206a2:	f04f 0b18 	mov.w	fp, #24
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   206a6:	4b19      	ldr	r3, [pc, #100]	; (2070c <net_if_ipv6_maddr_lookup+0x74>)
   206a8:	429d      	cmp	r5, r3
   206aa:	d101      	bne.n	206b0 <net_if_ipv6_maddr_lookup+0x18>
	return NULL;
   206ac:	2000      	movs	r0, #0
   206ae:	e021      	b.n	206f4 <net_if_ipv6_maddr_lookup+0x5c>
		if (ret && *ret && iface != *ret) {
   206b0:	b11f      	cbz	r7, 206ba <net_if_ipv6_maddr_lookup+0x22>
   206b2:	683b      	ldr	r3, [r7, #0]
   206b4:	b10b      	cbz	r3, 206ba <net_if_ipv6_maddr_lookup+0x22>
   206b6:	42ab      	cmp	r3, r5
   206b8:	d123      	bne.n	20702 <net_if_ipv6_maddr_lookup+0x6a>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   206ba:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   206bc:	b30c      	cbz	r4, 20702 <net_if_ipv6_maddr_lookup+0x6a>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   206be:	f04f 0800 	mov.w	r8, #0
			if (net_is_ipv6_prefix(
   206c2:	f104 09dc 	add.w	r9, r4, #220	; 0xdc
			if (!ipv6->mcast[i].is_used ||
   206c6:	fb0b f608 	mul.w	r6, fp, r8
   206ca:	19a2      	adds	r2, r4, r6
   206cc:	f892 10ec 	ldrb.w	r1, [r2, #236]	; 0xec
   206d0:	07cb      	lsls	r3, r1, #31
   206d2:	d511      	bpl.n	206f8 <net_if_ipv6_maddr_lookup+0x60>
   206d4:	f8b2 20d8 	ldrh.w	r2, [r2, #216]	; 0xd8
   206d8:	2a0a      	cmp	r2, #10
   206da:	d10d      	bne.n	206f8 <net_if_ipv6_maddr_lookup+0x60>
			if (net_is_ipv6_prefix(
   206dc:	2280      	movs	r2, #128	; 0x80
   206de:	eb09 0106 	add.w	r1, r9, r6
   206e2:	4650      	mov	r0, sl
   206e4:	f7ff f9cd 	bl	1fa82 <net_is_ipv6_prefix>
   206e8:	b130      	cbz	r0, 206f8 <net_if_ipv6_maddr_lookup+0x60>
				if (ret) {
   206ea:	b107      	cbz	r7, 206ee <net_if_ipv6_maddr_lookup+0x56>
					*ret = iface;
   206ec:	603d      	str	r5, [r7, #0]
				return &ipv6->mcast[i];
   206ee:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
   206f2:	4420      	add	r0, r4
}
   206f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   206f8:	f108 0801 	add.w	r8, r8, #1
   206fc:	f1b8 0f05 	cmp.w	r8, #5
   20700:	d1e1      	bne.n	206c6 <net_if_ipv6_maddr_lookup+0x2e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20702:	3520      	adds	r5, #32
   20704:	e7cf      	b.n	206a6 <net_if_ipv6_maddr_lookup+0xe>
   20706:	bf00      	nop
   20708:	2000da00 	.word	0x2000da00
   2070c:	2000da20 	.word	0x2000da20

00020710 <net_if_mcast_monitor>:
{
   20710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   20712:	4b0a      	ldr	r3, [pc, #40]	; (2073c <net_if_mcast_monitor+0x2c>)
   20714:	681b      	ldr	r3, [r3, #0]
{
   20716:	4605      	mov	r5, r0
   20718:	460e      	mov	r6, r1
   2071a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   2071c:	b163      	cbz	r3, 20738 <net_if_mcast_monitor+0x28>
   2071e:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   20720:	685a      	ldr	r2, [r3, #4]
   20722:	42aa      	cmp	r2, r5
   20724:	d104      	bne.n	20730 <net_if_mcast_monitor+0x20>
			mon->cb(iface, addr, is_joined);
   20726:	689b      	ldr	r3, [r3, #8]
   20728:	463a      	mov	r2, r7
   2072a:	4631      	mov	r1, r6
   2072c:	4628      	mov	r0, r5
   2072e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   20730:	b114      	cbz	r4, 20738 <net_if_mcast_monitor+0x28>
   20732:	4623      	mov	r3, r4
   20734:	6824      	ldr	r4, [r4, #0]
   20736:	e7f3      	b.n	20720 <net_if_mcast_monitor+0x10>
}
   20738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2073a:	bf00      	nop
   2073c:	2000246c 	.word	0x2000246c

00020740 <net_if_ipv6_prefix_add>:
{
   20740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20744:	b087      	sub	sp, #28
   20746:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   20748:	a901      	add	r1, sp, #4
{
   2074a:	4606      	mov	r6, r0
   2074c:	4690      	mov	r8, r2
   2074e:	461f      	mov	r7, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   20750:	f7ff faf2 	bl	1fd38 <net_if_config_ipv6_get>
   20754:	2800      	cmp	r0, #0
   20756:	da03      	bge.n	20760 <net_if_ipv6_prefix_add+0x20>
		return NULL;
   20758:	2000      	movs	r0, #0
}
   2075a:	b007      	add	sp, #28
   2075c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
   20760:	6874      	ldr	r4, [r6, #4]
	if (!ipv6) {
   20762:	b314      	cbz	r4, 207aa <net_if_ipv6_prefix_add+0x6a>
		if (!ipv6->unicast[i].is_used) {
   20764:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   20768:	0799      	lsls	r1, r3, #30
   2076a:	d509      	bpl.n	20780 <net_if_ipv6_prefix_add+0x40>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   2076c:	f504 71b0 	add.w	r1, r4, #352	; 0x160
   20770:	4628      	mov	r0, r5
   20772:	f7ff f9ab 	bl	1facc <net_ipv6_addr_cmp>
   20776:	b118      	cbz	r0, 20780 <net_if_ipv6_prefix_add+0x40>
   20778:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   2077c:	4543      	cmp	r3, r8
   2077e:	d012      	beq.n	207a6 <net_if_ipv6_prefix_add+0x66>
		if (!ipv6->unicast[i].is_used) {
   20780:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
   20784:	079a      	lsls	r2, r3, #30
   20786:	d510      	bpl.n	207aa <net_if_ipv6_prefix_add+0x6a>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   20788:	f504 71c4 	add.w	r1, r4, #392	; 0x188
   2078c:	4628      	mov	r0, r5
   2078e:	f7ff f99d 	bl	1facc <net_ipv6_addr_cmp>
   20792:	b150      	cbz	r0, 207aa <net_if_ipv6_prefix_add+0x6a>
   20794:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   20798:	4543      	cmp	r3, r8
   2079a:	d106      	bne.n	207aa <net_if_ipv6_prefix_add+0x6a>
   2079c:	2028      	movs	r0, #40	; 0x28
			return &ipv6->prefix[i];
   2079e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
		return &ipv6->prefix[i];
   207a2:	4420      	add	r0, r4
   207a4:	e7d9      	b.n	2075a <net_if_ipv6_prefix_add+0x1a>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   207a6:	2000      	movs	r0, #0
   207a8:	e7f9      	b.n	2079e <net_if_ipv6_prefix_add+0x5e>
	if (!ipv6) {
   207aa:	f8dd c004 	ldr.w	ip, [sp, #4]
   207ae:	f1bc 0f00 	cmp.w	ip, #0
   207b2:	d0d1      	beq.n	20758 <net_if_ipv6_prefix_add+0x18>
		if (ipv6->prefix[i].is_used) {
   207b4:	f89c 3175 	ldrb.w	r3, [ip, #373]	; 0x175
   207b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   207bc:	b123      	cbz	r3, 207c8 <net_if_ipv6_prefix_add+0x88>
   207be:	f89c 319d 	ldrb.w	r3, [ip, #413]	; 0x19d
   207c2:	079b      	lsls	r3, r3, #30
   207c4:	d4c8      	bmi.n	20758 <net_if_ipv6_prefix_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   207c6:	2301      	movs	r3, #1
   207c8:	2228      	movs	r2, #40	; 0x28
   207ca:	435a      	muls	r2, r3
   207cc:	f502 74a8 	add.w	r4, r2, #336	; 0x150
	ifprefix->is_used = true;
   207d0:	4462      	add	r2, ip
   207d2:	f892 1175 	ldrb.w	r1, [r2, #373]	; 0x175
	ifprefix->len = len;
   207d6:	f882 8174 	strb.w	r8, [r2, #372]	; 0x174
	ifprefix->is_used = true;
   207da:	f041 0102 	orr.w	r1, r1, #2
   207de:	f882 1175 	strb.w	r1, [r2, #373]	; 0x175
	ifprefix->iface = iface;
   207e2:	f8c2 6170 	str.w	r6, [r2, #368]	; 0x170
	net_ipaddr_copy(&ifprefix->prefix, addr);
   207e6:	462a      	mov	r2, r5
   207e8:	ad02      	add	r5, sp, #8
   207ea:	f102 0910 	add.w	r9, r2, #16
   207ee:	46ae      	mov	lr, r5
   207f0:	6810      	ldr	r0, [r2, #0]
   207f2:	6851      	ldr	r1, [r2, #4]
   207f4:	46a8      	mov	r8, r5
   207f6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   207fa:	3208      	adds	r2, #8
   207fc:	454a      	cmp	r2, r9
   207fe:	4645      	mov	r5, r8
   20800:	d1f6      	bne.n	207f0 <net_if_ipv6_prefix_add+0xb0>
   20802:	eb0c 0204 	add.w	r2, ip, r4
   20806:	3210      	adds	r2, #16
   20808:	f10d 0818 	add.w	r8, sp, #24
   2080c:	4675      	mov	r5, lr
   2080e:	cd03      	ldmia	r5!, {r0, r1}
   20810:	4545      	cmp	r5, r8
   20812:	6010      	str	r0, [r2, #0]
   20814:	6051      	str	r1, [r2, #4]
   20816:	46ae      	mov	lr, r5
   20818:	f102 0208 	add.w	r2, r2, #8
   2081c:	d1f6      	bne.n	2080c <net_if_ipv6_prefix_add+0xcc>
   2081e:	2228      	movs	r2, #40	; 0x28
		ifprefix->is_infinite = true;
   20820:	fb02 c303 	mla	r3, r2, r3, ip
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   20824:	3701      	adds	r7, #1
		ifprefix->is_infinite = true;
   20826:	f893 2175 	ldrb.w	r2, [r3, #373]	; 0x175
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   2082a:	4806      	ldr	r0, [pc, #24]	; (20844 <net_if_ipv6_prefix_add+0x104>)
		ifprefix->is_infinite = true;
   2082c:	bf0c      	ite	eq
   2082e:	f042 0201 	orreq.w	r2, r2, #1
		ifprefix->is_infinite = false;
   20832:	f36f 0200 	bfcne	r2, #0, #1
   20836:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   2083a:	4631      	mov	r1, r6
   2083c:	f7ff f956 	bl	1faec <net_mgmt_event_notify>
		return &ipv6->prefix[i];
   20840:	9801      	ldr	r0, [sp, #4]
   20842:	e7ae      	b.n	207a2 <net_if_ipv6_prefix_add+0x62>
   20844:	f0600005 	.word	0xf0600005

00020848 <net_if_ipv6_prefix_get>:
{
   20848:	b570      	push	{r4, r5, r6, lr}
   2084a:	460e      	mov	r6, r1
	if (!iface) {
   2084c:	b920      	cbnz	r0, 20858 <net_if_ipv6_prefix_get+0x10>
	if (__net_if_start == __net_if_end) {
   2084e:	4b19      	ldr	r3, [pc, #100]	; (208b4 <net_if_ipv6_prefix_get+0x6c>)
   20850:	4a19      	ldr	r2, [pc, #100]	; (208b8 <net_if_ipv6_prefix_get+0x70>)
   20852:	4293      	cmp	r3, r2
   20854:	d02c      	beq.n	208b0 <net_if_ipv6_prefix_get+0x68>
	return iface ? iface : __net_if_start;
   20856:	4618      	mov	r0, r3
	ipv6 = iface->config.ip.ipv6;
   20858:	6845      	ldr	r5, [r0, #4]
	if (!ipv6) {
   2085a:	b33d      	cbz	r5, 208ac <net_if_ipv6_prefix_get+0x64>
		if (!ipv6->prefix[i].is_used) {
   2085c:	f895 4175 	ldrb.w	r4, [r5, #373]	; 0x175
   20860:	f3c4 0440 	ubfx	r4, r4, #1, #1
   20864:	b14c      	cbz	r4, 2087a <net_if_ipv6_prefix_get+0x32>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   20866:	f895 2174 	ldrb.w	r2, [r5, #372]	; 0x174
   2086a:	4631      	mov	r1, r6
   2086c:	f505 70b0 	add.w	r0, r5, #352	; 0x160
   20870:	f7ff f907 	bl	1fa82 <net_is_ipv6_prefix>
   20874:	b1c0      	cbz	r0, 208a8 <net_if_ipv6_prefix_get+0x60>
				prefix = &ipv6->prefix[i];
   20876:	f505 74a8 	add.w	r4, r5, #336	; 0x150
		if (!ipv6->prefix[i].is_used) {
   2087a:	f895 319d 	ldrb.w	r3, [r5, #413]	; 0x19d
   2087e:	079b      	lsls	r3, r3, #30
   20880:	d510      	bpl.n	208a4 <net_if_ipv6_prefix_get+0x5c>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   20882:	f895 219c 	ldrb.w	r2, [r5, #412]	; 0x19c
   20886:	4631      	mov	r1, r6
   20888:	f505 70c4 	add.w	r0, r5, #392	; 0x188
   2088c:	f7ff f8f9 	bl	1fa82 <net_is_ipv6_prefix>
   20890:	b140      	cbz	r0, 208a4 <net_if_ipv6_prefix_get+0x5c>
			if (!prefix || prefix->len > ipv6->prefix[i].len) {
   20892:	b12c      	cbz	r4, 208a0 <net_if_ipv6_prefix_get+0x58>
   20894:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   20898:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
   2089c:	429a      	cmp	r2, r3
   2089e:	d901      	bls.n	208a4 <net_if_ipv6_prefix_get+0x5c>
				prefix = &ipv6->prefix[i];
   208a0:	f505 74bc 	add.w	r4, r5, #376	; 0x178
}
   208a4:	4620      	mov	r0, r4
   208a6:	bd70      	pop	{r4, r5, r6, pc}
	struct net_if_ipv6_prefix *prefix = NULL;
   208a8:	4604      	mov	r4, r0
   208aa:	e7e6      	b.n	2087a <net_if_ipv6_prefix_get+0x32>
		return NULL;
   208ac:	462c      	mov	r4, r5
   208ae:	e7f9      	b.n	208a4 <net_if_ipv6_prefix_get+0x5c>
	ipv6 = iface->config.ip.ipv6;
   208b0:	6843      	ldr	r3, [r0, #4]
   208b2:	deff      	udf	#255	; 0xff
   208b4:	2000da00 	.word	0x2000da00
   208b8:	2000da20 	.word	0x2000da20

000208bc <net_if_ipv6_prefix_lookup>:
{
   208bc:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   208be:	6844      	ldr	r4, [r0, #4]
{
   208c0:	460d      	mov	r5, r1
   208c2:	4616      	mov	r6, r2
	if (!ipv6) {
   208c4:	b90c      	cbnz	r4, 208ca <net_if_ipv6_prefix_lookup+0xe>
		return NULL;
   208c6:	2000      	movs	r0, #0
}
   208c8:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv6->prefix[i].is_used) {
   208ca:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   208ce:	0798      	lsls	r0, r3, #30
   208d0:	d412      	bmi.n	208f8 <net_if_ipv6_prefix_lookup+0x3c>
   208d2:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
   208d6:	079b      	lsls	r3, r3, #30
   208d8:	d5f5      	bpl.n	208c6 <net_if_ipv6_prefix_lookup+0xa>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   208da:	4632      	mov	r2, r6
   208dc:	4629      	mov	r1, r5
   208de:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   208e2:	f7ff f8ce 	bl	1fa82 <net_is_ipv6_prefix>
   208e6:	2800      	cmp	r0, #0
   208e8:	d0ed      	beq.n	208c6 <net_if_ipv6_prefix_lookup+0xa>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   208ea:	2001      	movs	r0, #1
			return &ipv6->prefix[i];
   208ec:	2328      	movs	r3, #40	; 0x28
   208ee:	fb03 4000 	mla	r0, r3, r0, r4
   208f2:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   208f6:	e7e7      	b.n	208c8 <net_if_ipv6_prefix_lookup+0xc>
		if (net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   208f8:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   208fc:	f7ff f8c1 	bl	1fa82 <net_is_ipv6_prefix>
   20900:	2800      	cmp	r0, #0
   20902:	d0e6      	beq.n	208d2 <net_if_ipv6_prefix_lookup+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   20904:	2000      	movs	r0, #0
   20906:	e7f1      	b.n	208ec <net_if_ipv6_prefix_lookup+0x30>

00020908 <net_if_ipv6_addr_onlink>:
{
   20908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   2090c:	4d18      	ldr	r5, [pc, #96]	; (20970 <net_if_ipv6_addr_onlink+0x68>)
   2090e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 20974 <net_if_ipv6_addr_onlink+0x6c>
{
   20912:	4606      	mov	r6, r0
   20914:	460f      	mov	r7, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   20916:	4545      	cmp	r5, r8
   20918:	d101      	bne.n	2091e <net_if_ipv6_addr_onlink+0x16>
	return false;
   2091a:	2000      	movs	r0, #0
   2091c:	e023      	b.n	20966 <net_if_ipv6_addr_onlink+0x5e>
		if (iface && *iface && *iface != tmp) {
   2091e:	b11e      	cbz	r6, 20928 <net_if_ipv6_addr_onlink+0x20>
   20920:	6833      	ldr	r3, [r6, #0]
   20922:	b10b      	cbz	r3, 20928 <net_if_ipv6_addr_onlink+0x20>
   20924:	42ab      	cmp	r3, r5
   20926:	d111      	bne.n	2094c <net_if_ipv6_addr_onlink+0x44>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
   20928:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   2092a:	b17c      	cbz	r4, 2094c <net_if_ipv6_addr_onlink+0x44>
			if (ipv6->prefix[i].is_used &&
   2092c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   20930:	079a      	lsls	r2, r3, #30
   20932:	d40d      	bmi.n	20950 <net_if_ipv6_addr_onlink+0x48>
   20934:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
   20938:	079b      	lsls	r3, r3, #30
   2093a:	d507      	bpl.n	2094c <net_if_ipv6_addr_onlink+0x44>
			    net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   2093c:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
   20940:	4639      	mov	r1, r7
   20942:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   20946:	f7ff f89c 	bl	1fa82 <net_is_ipv6_prefix>
			if (ipv6->prefix[i].is_used &&
   2094a:	b950      	cbnz	r0, 20962 <net_if_ipv6_addr_onlink+0x5a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   2094c:	3520      	adds	r5, #32
   2094e:	e7e2      	b.n	20916 <net_if_ipv6_addr_onlink+0xe>
			    net_is_ipv6_prefix(ipv6->prefix[i].prefix.s6_addr,
   20950:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
   20954:	4639      	mov	r1, r7
   20956:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   2095a:	f7ff f892 	bl	1fa82 <net_is_ipv6_prefix>
			if (ipv6->prefix[i].is_used &&
   2095e:	2800      	cmp	r0, #0
   20960:	d0e8      	beq.n	20934 <net_if_ipv6_addr_onlink+0x2c>
				if (iface) {
   20962:	b916      	cbnz	r6, 2096a <net_if_ipv6_addr_onlink+0x62>
				return true;
   20964:	2001      	movs	r0, #1
}
   20966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*iface = tmp;
   2096a:	6035      	str	r5, [r6, #0]
   2096c:	e7fa      	b.n	20964 <net_if_ipv6_addr_onlink+0x5c>
   2096e:	bf00      	nop
   20970:	2000da00 	.word	0x2000da00
   20974:	2000da20 	.word	0x2000da20

00020978 <net_if_ipv6_prefix_set_timer>:
{
   20978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lifetime == 0xffffffff) {
   2097a:	1c4b      	adds	r3, r1, #1
{
   2097c:	4604      	mov	r4, r0
	if (lifetime == 0xffffffff) {
   2097e:	d03c      	beq.n	209fa <net_if_ipv6_prefix_set_timer+0x82>
	parent->next = child;
   20980:	2300      	movs	r3, #0
   20982:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   20984:	4b1d      	ldr	r3, [pc, #116]	; (209fc <net_if_ipv6_prefix_set_timer+0x84>)
   20986:	685a      	ldr	r2, [r3, #4]
	u64_t expire_timeout = K_SECONDS((u64_t)lifetime);
   20988:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   2098c:	fba1 6706 	umull	r6, r7, r1, r6
   20990:	bb72      	cbnz	r2, 209f0 <net_if_ipv6_prefix_set_timer+0x78>
	list->head = node;
   20992:	e9c3 0000 	strd	r0, r0, [r3]
   20996:	f00c f873 	bl	2ca80 <_impl_k_uptime_get_32>
	ifprefix->lifetime.wrap_counter = expire_timeout /
   2099a:	4a19      	ldr	r2, [pc, #100]	; (20a00 <net_if_ipv6_prefix_set_timer+0x88>)
	ifprefix->lifetime.timer_start = k_uptime_get_32();
   2099c:	6060      	str	r0, [r4, #4]
	ifprefix->lifetime.wrap_counter = expire_timeout /
   2099e:	2300      	movs	r3, #0
   209a0:	4630      	mov	r0, r6
   209a2:	4639      	mov	r1, r7
   209a4:	f7df fc86 	bl	2b4 <__aeabi_uldivmod>
	ifprefix->lifetime.timer_timeout = expire_timeout -
   209a8:	4915      	ldr	r1, [pc, #84]	; (20a00 <net_if_ipv6_prefix_set_timer+0x88>)
	ifprefix->lifetime.wrap_counter = expire_timeout /
   209aa:	60e0      	str	r0, [r4, #12]
	ifprefix->lifetime.timer_timeout = expire_timeout -
   209ac:	fb01 6010 	mls	r0, r1, r0, r6
   209b0:	60a0      	str	r0, [r4, #8]
   209b2:	4814      	ldr	r0, [pc, #80]	; (20a04 <net_if_ipv6_prefix_set_timer+0x8c>)
   209b4:	f00b ff74 	bl	2c8a0 <z_timeout_remaining>
   209b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   209bc:	2264      	movs	r2, #100	; 0x64
   209be:	2300      	movs	r3, #0
   209c0:	fb80 0101 	smull	r0, r1, r0, r1
   209c4:	f7df fc76 	bl	2b4 <__aeabi_uldivmod>
	if (!remaining || (ifprefix->lifetime.wrap_counter == 0 &&
   209c8:	4605      	mov	r5, r0
   209ca:	b120      	cbz	r0, 209d6 <net_if_ipv6_prefix_set_timer+0x5e>
   209cc:	68e3      	ldr	r3, [r4, #12]
   209ce:	b9a3      	cbnz	r3, 209fa <net_if_ipv6_prefix_set_timer+0x82>
   209d0:	68a3      	ldr	r3, [r4, #8]
   209d2:	4283      	cmp	r3, r0
   209d4:	da11      	bge.n	209fa <net_if_ipv6_prefix_set_timer+0x82>
		k_delayed_work_cancel(&prefix_lifetime_timer);
   209d6:	480c      	ldr	r0, [pc, #48]	; (20a08 <net_if_ipv6_prefix_set_timer+0x90>)
   209d8:	f00b fea3 	bl	2c722 <k_delayed_work_cancel>
		if (ifprefix->lifetime.wrap_counter > 0 && remaining == 0) {
   209dc:	68e3      	ldr	r3, [r4, #12]
   209de:	2b00      	cmp	r3, #0
   209e0:	dd09      	ble.n	209f6 <net_if_ipv6_prefix_set_timer+0x7e>
   209e2:	b945      	cbnz	r5, 209f6 <net_if_ipv6_prefix_set_timer+0x7e>
			k_delayed_work_submit(&prefix_lifetime_timer,
   209e4:	4906      	ldr	r1, [pc, #24]	; (20a00 <net_if_ipv6_prefix_set_timer+0x88>)
			k_delayed_work_submit(&prefix_lifetime_timer,
   209e6:	4808      	ldr	r0, [pc, #32]	; (20a08 <net_if_ipv6_prefix_set_timer+0x90>)
}
   209e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_delayed_work_submit(&prefix_lifetime_timer,
   209ec:	f7ff b876 	b.w	1fadc <k_delayed_work_submit>
	parent->next = child;
   209f0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   209f2:	6058      	str	r0, [r3, #4]
   209f4:	e7cf      	b.n	20996 <net_if_ipv6_prefix_set_timer+0x1e>
   209f6:	68a1      	ldr	r1, [r4, #8]
   209f8:	e7f5      	b.n	209e6 <net_if_ipv6_prefix_set_timer+0x6e>
}
   209fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   209fc:	20002268 	.word	0x20002268
   20a00:	7fffff9b 	.word	0x7fffff9b
   20a04:	20002480 	.word	0x20002480
   20a08:	20002474 	.word	0x20002474

00020a0c <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   20a0c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   20a10:	079b      	lsls	r3, r3, #30
{
   20a12:	4601      	mov	r1, r0
	if (!prefix->is_used) {
   20a14:	d505      	bpl.n	20a22 <net_if_ipv6_prefix_unset_timer+0x16>
	ifprefix->lifetime.timer_timeout = 0;
   20a16:	2300      	movs	r3, #0
	ifprefix->lifetime.wrap_counter = 0;
   20a18:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
   20a1c:	4801      	ldr	r0, [pc, #4]	; (20a24 <net_if_ipv6_prefix_unset_timer+0x18>)
   20a1e:	f7fe bfc5 	b.w	1f9ac <sys_slist_find_and_remove>
}
   20a22:	4770      	bx	lr
   20a24:	20002268 	.word	0x20002268

00020a28 <net_if_ipv6_prefix_rm>:
{
   20a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   20a2c:	6844      	ldr	r4, [r0, #4]
{
   20a2e:	4606      	mov	r6, r0
   20a30:	4688      	mov	r8, r1
   20a32:	4617      	mov	r7, r2
	if (!ipv6) {
   20a34:	b3d4      	cbz	r4, 20aac <net_if_ipv6_prefix_rm+0x84>
		if (!ipv6->prefix[i].is_used) {
   20a36:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   20a3a:	079a      	lsls	r2, r3, #30
   20a3c:	d508      	bpl.n	20a50 <net_if_ipv6_prefix_rm+0x28>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   20a3e:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   20a42:	f7ff f843 	bl	1facc <net_ipv6_addr_cmp>
   20a46:	b118      	cbz	r0, 20a50 <net_if_ipv6_prefix_rm+0x28>
   20a48:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   20a4c:	42bb      	cmp	r3, r7
   20a4e:	d02a      	beq.n	20aa6 <net_if_ipv6_prefix_rm+0x7e>
		if (!ipv6->prefix[i].is_used) {
   20a50:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
   20a54:	079b      	lsls	r3, r3, #30
   20a56:	d529      	bpl.n	20aac <net_if_ipv6_prefix_rm+0x84>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   20a58:	4641      	mov	r1, r8
   20a5a:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   20a5e:	f7ff f835 	bl	1facc <net_ipv6_addr_cmp>
   20a62:	b318      	cbz	r0, 20aac <net_if_ipv6_prefix_rm+0x84>
   20a64:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   20a68:	42bb      	cmp	r3, r7
   20a6a:	d11f      	bne.n	20aac <net_if_ipv6_prefix_rm+0x84>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   20a6c:	2501      	movs	r5, #1
   20a6e:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
   20a70:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   20a74:	4420      	add	r0, r4
   20a76:	f7ff ffc9 	bl	20a0c <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
   20a7a:	2328      	movs	r3, #40	; 0x28
   20a7c:	fb03 4505 	mla	r5, r3, r5, r4
		remove_prefix_addresses(iface, ipv6, addr, len);
   20a80:	4642      	mov	r2, r8
		ipv6->prefix[i].is_used = false;
   20a82:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   20a86:	f36f 0341 	bfc	r3, #1, #1
   20a8a:	f885 3175 	strb.w	r3, [r5, #373]	; 0x175
		remove_prefix_addresses(iface, ipv6, addr, len);
   20a8e:	4621      	mov	r1, r4
   20a90:	463b      	mov	r3, r7
   20a92:	4630      	mov	r0, r6
   20a94:	f7ff fd64 	bl	20560 <remove_prefix_addresses>
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, iface);
   20a98:	4805      	ldr	r0, [pc, #20]	; (20ab0 <net_if_ipv6_prefix_rm+0x88>)
   20a9a:	4631      	mov	r1, r6
   20a9c:	f7ff f826 	bl	1faec <net_mgmt_event_notify>
		return true;
   20aa0:	2001      	movs	r0, #1
}
   20aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   20aa6:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   20aa8:	4628      	mov	r0, r5
   20aaa:	e7e1      	b.n	20a70 <net_if_ipv6_prefix_rm+0x48>
		return false;
   20aac:	2000      	movs	r0, #0
   20aae:	e7f8      	b.n	20aa2 <net_if_ipv6_prefix_rm+0x7a>
   20ab0:	f0600006 	.word	0xf0600006

00020ab4 <net_if_ipv6_router_lookup>:
{
   20ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!routers[i].is_used ||
   20ab6:	4c0f      	ldr	r4, [pc, #60]	; (20af4 <net_if_ipv6_router_lookup+0x40>)
{
   20ab8:	4605      	mov	r5, r0
   20aba:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   20abc:	2300      	movs	r3, #0
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   20abe:	f104 0724 	add.w	r7, r4, #36	; 0x24
		if (!routers[i].is_used ||
   20ac2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		    routers[i].address.family != AF_INET6 ||
   20ac6:	8c20      	ldrh	r0, [r4, #32]
		    routers[i].iface != iface) {
   20ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (!routers[i].is_used ||
   20aca:	f002 0201 	and.w	r2, r2, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   20ace:	b113      	cbz	r3, 20ad6 <net_if_ipv6_router_lookup+0x22>
	return NULL;
   20ad0:	2300      	movs	r3, #0
}
   20ad2:	4618      	mov	r0, r3
   20ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!routers[i].is_used ||
   20ad6:	2a00      	cmp	r2, #0
   20ad8:	d0fb      	beq.n	20ad2 <net_if_ipv6_router_lookup+0x1e>
   20ada:	280a      	cmp	r0, #10
   20adc:	d1f9      	bne.n	20ad2 <net_if_ipv6_router_lookup+0x1e>
		    routers[i].address.family != AF_INET6 ||
   20ade:	42a9      	cmp	r1, r5
   20ae0:	d1f7      	bne.n	20ad2 <net_if_ipv6_router_lookup+0x1e>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   20ae2:	4631      	mov	r1, r6
   20ae4:	4638      	mov	r0, r7
   20ae6:	f7fe fff1 	bl	1facc <net_ipv6_addr_cmp>
   20aea:	2301      	movs	r3, #1
   20aec:	2800      	cmp	r0, #0
   20aee:	d0e8      	beq.n	20ac2 <net_if_ipv6_router_lookup+0xe>
			return &routers[i];
   20af0:	4b00      	ldr	r3, [pc, #0]	; (20af4 <net_if_ipv6_router_lookup+0x40>)
   20af2:	e7ee      	b.n	20ad2 <net_if_ipv6_router_lookup+0x1e>
   20af4:	20002494 	.word	0x20002494

00020af8 <net_if_ipv6_router_find_default>:
		    !routers[i].is_default ||
   20af8:	4b0b      	ldr	r3, [pc, #44]	; (20b28 <net_if_ipv6_router_find_default+0x30>)
   20afa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   20afe:	f3c2 0140 	ubfx	r1, r2, #1, #1
		if (!routers[i].is_used ||
   20b02:	f012 0201 	ands.w	r2, r2, #1
{
   20b06:	b530      	push	{r4, r5, lr}
		    routers[i].address.family != AF_INET6) {
   20b08:	8c1d      	ldrh	r5, [r3, #32]
		if (iface && iface != routers[i].iface) {
   20b0a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
		if (!routers[i].is_used ||
   20b0c:	d008      	beq.n	20b20 <net_if_ipv6_router_find_default+0x28>
   20b0e:	b139      	cbz	r1, 20b20 <net_if_ipv6_router_find_default+0x28>
		    !routers[i].is_default ||
   20b10:	2d0a      	cmp	r5, #10
   20b12:	d105      	bne.n	20b20 <net_if_ipv6_router_find_default+0x28>
		if (iface && iface != routers[i].iface) {
   20b14:	b130      	cbz	r0, 20b24 <net_if_ipv6_router_find_default+0x2c>
		return &routers[i];
   20b16:	4284      	cmp	r4, r0
   20b18:	bf0c      	ite	eq
   20b1a:	4618      	moveq	r0, r3
   20b1c:	2000      	movne	r0, #0
}
   20b1e:	bd30      	pop	{r4, r5, pc}
	return NULL;
   20b20:	2000      	movs	r0, #0
   20b22:	e7fc      	b.n	20b1e <net_if_ipv6_router_find_default+0x26>
		return &routers[i];
   20b24:	4618      	mov	r0, r3
   20b26:	e7fa      	b.n	20b1e <net_if_ipv6_router_find_default+0x26>
   20b28:	20002494 	.word	0x20002494

00020b2c <net_if_ipv6_router_update_lifetime>:
	k_delayed_work_submit(&router->lifetime, K_SECONDS(lifetime));
   20b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20b30:	4359      	muls	r1, r3
   20b32:	f7fe bfd3 	b.w	1fadc <k_delayed_work_submit>
	...

00020b38 <net_if_ipv6_router_add>:
{
   20b38:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (routers[i].is_used) {
   20b3a:	4c23      	ldr	r4, [pc, #140]	; (20bc8 <net_if_ipv6_router_add+0x90>)
   20b3c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
   20b40:	4616      	mov	r6, r2
		if (routers[i].is_used) {
   20b42:	07da      	lsls	r2, r3, #31
{
   20b44:	b085      	sub	sp, #20
   20b46:	4605      	mov	r5, r0
		if (routers[i].is_used) {
   20b48:	d43c      	bmi.n	20bc4 <net_if_ipv6_router_add+0x8c>
	router->is_used = true;
   20b4a:	f043 0301 	orr.w	r3, r3, #1
   20b4e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_ipaddr_copy(&router->address.in6_addr, addr);
   20b52:	466f      	mov	r7, sp
	router->address.family = AF_INET6;
   20b54:	230a      	movs	r3, #10
   20b56:	8423      	strh	r3, [r4, #32]
	router->iface = iface;
   20b58:	6360      	str	r0, [r4, #52]	; 0x34
	net_ipaddr_copy(&router->address.in6_addr, addr);
   20b5a:	460b      	mov	r3, r1
   20b5c:	f101 0e10 	add.w	lr, r1, #16
   20b60:	463a      	mov	r2, r7
   20b62:	6818      	ldr	r0, [r3, #0]
   20b64:	6859      	ldr	r1, [r3, #4]
   20b66:	46bc      	mov	ip, r7
   20b68:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   20b6c:	3308      	adds	r3, #8
   20b6e:	4573      	cmp	r3, lr
   20b70:	4667      	mov	r7, ip
   20b72:	d1f6      	bne.n	20b62 <net_if_ipv6_router_add+0x2a>
   20b74:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   20b76:	4f15      	ldr	r7, [pc, #84]	; (20bcc <net_if_ipv6_router_add+0x94>)
   20b78:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   20b7c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
	if (lifetime) {
   20b80:	b1c6      	cbz	r6, 20bb4 <net_if_ipv6_router_add+0x7c>
		router->is_infinite = false;
   20b82:	f043 0302 	orr.w	r3, r3, #2
   20b86:	f36f 0382 	bfc	r3, #2, #1
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   20b8a:	4911      	ldr	r1, [pc, #68]	; (20bd0 <net_if_ipv6_router_add+0x98>)
		router->is_infinite = false;
   20b8c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   20b90:	f1a7 0024 	sub.w	r0, r7, #36	; 0x24
   20b94:	f00b fdbc 	bl	2c710 <k_delayed_work_init>
		k_delayed_work_submit(&router->lifetime, K_SECONDS(lifetime));
   20b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20b9c:	4371      	muls	r1, r6
   20b9e:	f1a7 0024 	sub.w	r0, r7, #36	; 0x24
   20ba2:	f7fe ff9b 	bl	1fadc <k_delayed_work_submit>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);
   20ba6:	480b      	ldr	r0, [pc, #44]	; (20bd4 <net_if_ipv6_router_add+0x9c>)
   20ba8:	4629      	mov	r1, r5
   20baa:	f7fe ff9f 	bl	1faec <net_mgmt_event_notify>
		return &routers[i];
   20bae:	4806      	ldr	r0, [pc, #24]	; (20bc8 <net_if_ipv6_router_add+0x90>)
}
   20bb0:	b005      	add	sp, #20
   20bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router->is_default = false;
   20bb4:	f366 0341 	bfi	r3, r6, #1, #1
		router->is_infinite = true;
   20bb8:	b2db      	uxtb	r3, r3
   20bba:	f043 0304 	orr.w	r3, r3, #4
   20bbe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   20bc2:	e7f0      	b.n	20ba6 <net_if_ipv6_router_add+0x6e>
	return NULL;
   20bc4:	2000      	movs	r0, #0
   20bc6:	e7f3      	b.n	20bb0 <net_if_ipv6_router_add+0x78>
   20bc8:	20002494 	.word	0x20002494
   20bcc:	200024b8 	.word	0x200024b8
   20bd0:	0001f9e5 	.word	0x0001f9e5
   20bd4:	f0600009 	.word	0xf0600009

00020bd8 <net_if_ipv6_router_rm>:
		if (!routers[i].is_used) {
   20bd8:	4a0c      	ldr	r2, [pc, #48]	; (20c0c <net_if_ipv6_router_rm+0x34>)
   20bda:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   20bde:	f013 0301 	ands.w	r3, r3, #1
{
   20be2:	b510      	push	{r4, lr}
   20be4:	4604      	mov	r4, r0
		if (!routers[i].is_used) {
   20be6:	d00f      	beq.n	20c08 <net_if_ipv6_router_rm+0x30>
		if (&routers[i] != router) {
   20be8:	4290      	cmp	r0, r2
   20bea:	d10d      	bne.n	20c08 <net_if_ipv6_router_rm+0x30>
		k_delayed_work_cancel(&routers[i].lifetime);
   20bec:	f00b fd99 	bl	2c722 <k_delayed_work_cancel>
		routers[i].is_used = false;
   20bf0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   20bf4:	4806      	ldr	r0, [pc, #24]	; (20c10 <net_if_ipv6_router_rm+0x38>)
   20bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
		routers[i].is_used = false;
   20bf8:	f36f 0300 	bfc	r3, #0, #1
   20bfc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   20c00:	f7fe ff74 	bl	1faec <net_mgmt_event_notify>
		return true;
   20c04:	2001      	movs	r0, #1
}
   20c06:	bd10      	pop	{r4, pc}
	return false;
   20c08:	2000      	movs	r0, #0
   20c0a:	e7fc      	b.n	20c06 <net_if_ipv6_router_rm+0x2e>
   20c0c:	20002494 	.word	0x20002494
   20c10:	f060000a 	.word	0xf060000a

00020c14 <net_if_ipv6_get_ll>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   20c14:	6843      	ldr	r3, [r0, #4]
{
   20c16:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!ipv6) {
   20c18:	b1f3      	cbz	r3, 20c58 <net_if_ipv6_get_ll+0x44>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20c1a:	2200      	movs	r2, #0
		if (!ipv6->unicast[i].is_used ||
   20c1c:	2448      	movs	r4, #72	; 0x48
   20c1e:	1d1d      	adds	r5, r3, #4
		if (net_is_ipv6_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   20c20:	f248 06fe 	movw	r6, #33022	; 0x80fe
		if (!ipv6->unicast[i].is_used ||
   20c24:	fb04 3002 	mla	r0, r4, r2, r3
   20c28:	f890 7047 	ldrb.w	r7, [r0, #71]	; 0x47
   20c2c:	07bf      	lsls	r7, r7, #30
   20c2e:	d50e      	bpl.n	20c4e <net_if_ipv6_get_ll+0x3a>
   20c30:	1c4f      	adds	r7, r1, #1
   20c32:	d003      	beq.n	20c3c <net_if_ipv6_get_ll+0x28>
		    (addr_state != NET_ADDR_ANY_STATE &&
   20c34:	f990 0045 	ldrsb.w	r0, [r0, #69]	; 0x45
   20c38:	4288      	cmp	r0, r1
   20c3a:	d108      	bne.n	20c4e <net_if_ipv6_get_ll+0x3a>
   20c3c:	fb04 f002 	mul.w	r0, r4, r2
		     ipv6->unicast[i].addr_state != addr_state) ||
   20c40:	5a1f      	ldrh	r7, [r3, r0]
   20c42:	2f0a      	cmp	r7, #10
   20c44:	d103      	bne.n	20c4e <net_if_ipv6_get_ll+0x3a>
   20c46:	4428      	add	r0, r5
		if (net_is_ipv6_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   20c48:	8807      	ldrh	r7, [r0, #0]
   20c4a:	42b7      	cmp	r7, r6
   20c4c:	d003      	beq.n	20c56 <net_if_ipv6_get_ll+0x42>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20c4e:	3201      	adds	r2, #1
   20c50:	2a03      	cmp	r2, #3
   20c52:	d1e7      	bne.n	20c24 <net_if_ipv6_get_ll+0x10>
		return NULL;
   20c54:	2000      	movs	r0, #0
}
   20c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   20c58:	4618      	mov	r0, r3
   20c5a:	e7fc      	b.n	20c56 <net_if_ipv6_get_ll+0x42>

00020c5c <net_if_ipv6_select_src_addr>:

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   20c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   20c5e:	880a      	ldrh	r2, [r1, #0]
   20c60:	f248 03fe 	movw	r3, #33022	; 0x80fe
	u8_t best_match = 0;
   20c64:	2400      	movs	r4, #0
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   20c66:	429a      	cmp	r2, r3
{
   20c68:	460e      	mov	r6, r1
	u8_t best_match = 0;
   20c6a:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   20c6e:	d030      	beq.n	20cd2 <net_if_ipv6_select_src_addr+0x76>
   20c70:	780b      	ldrb	r3, [r1, #0]

		for (iface = __net_if_start;
   20c72:	4d19      	ldr	r5, [pc, #100]	; (20cd8 <net_if_ipv6_select_src_addr+0x7c>)
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   20c74:	2bff      	cmp	r3, #255	; 0xff
   20c76:	d113      	bne.n	20ca0 <net_if_ipv6_select_src_addr+0x44>
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   20c78:	4e18      	ldr	r6, [pc, #96]	; (20cdc <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
   20c7a:	b310      	cbz	r0, 20cc2 <net_if_ipv6_select_src_addr+0x66>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   20c7c:	2101      	movs	r1, #1
   20c7e:	f7ff ffc9 	bl	20c14 <net_if_ipv6_get_ll>
   20c82:	e015      	b.n	20cb0 <net_if_ipv6_select_src_addr+0x54>
			addr = net_if_ipv6_get_best_match(iface, dst,
   20c84:	6868      	ldr	r0, [r5, #4]
   20c86:	f10d 0207 	add.w	r2, sp, #7
   20c8a:	4631      	mov	r1, r6
   20c8c:	f7fe ffdc 	bl	1fc48 <net_if_ipv6_get_best_match.isra.16>
		     iface++) {
   20c90:	3520      	adds	r5, #32
   20c92:	2800      	cmp	r0, #0
   20c94:	bf18      	it	ne
   20c96:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
   20c98:	42bd      	cmp	r5, r7
   20c9a:	d1f3      	bne.n	20c84 <net_if_ipv6_select_src_addr+0x28>
		}
	}

	if (!src) {
   20c9c:	b9b4      	cbnz	r4, 20ccc <net_if_ipv6_select_src_addr+0x70>
   20c9e:	e012      	b.n	20cc6 <net_if_ipv6_select_src_addr+0x6a>
		     !dst_iface && iface != __net_if_end;
   20ca0:	4f0e      	ldr	r7, [pc, #56]	; (20cdc <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
   20ca2:	2800      	cmp	r0, #0
   20ca4:	d0f8      	beq.n	20c98 <net_if_ipv6_select_src_addr+0x3c>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   20ca6:	f10d 0207 	add.w	r2, sp, #7
   20caa:	6840      	ldr	r0, [r0, #4]
   20cac:	f7fe ffcc 	bl	1fc48 <net_if_ipv6_get_best_match.isra.16>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   20cb0:	4604      	mov	r4, r0
   20cb2:	e7f3      	b.n	20c9c <net_if_ipv6_select_src_addr+0x40>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   20cb4:	2101      	movs	r1, #1
   20cb6:	4628      	mov	r0, r5
   20cb8:	f7ff ffac 	bl	20c14 <net_if_ipv6_get_ll>
			if (addr) {
   20cbc:	4604      	mov	r4, r0
   20cbe:	b928      	cbnz	r0, 20ccc <net_if_ipv6_select_src_addr+0x70>
		     iface++) {
   20cc0:	3520      	adds	r5, #32
		     !dst_iface && iface != __net_if_end;
   20cc2:	42b5      	cmp	r5, r6
   20cc4:	d1f6      	bne.n	20cb4 <net_if_ipv6_select_src_addr+0x58>
		return net_ipv6_unspecified_address();
   20cc6:	f003 f87f 	bl	23dc8 <net_ipv6_unspecified_address>
   20cca:	4604      	mov	r4, r0
	}

	return src;
}
   20ccc:	4620      	mov	r0, r4
   20cce:	b003      	add	sp, #12
   20cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20cd2:	4d01      	ldr	r5, [pc, #4]	; (20cd8 <net_if_ipv6_select_src_addr+0x7c>)
   20cd4:	e7d0      	b.n	20c78 <net_if_ipv6_select_src_addr+0x1c>
   20cd6:	bf00      	nop
   20cd8:	2000da00 	.word	0x2000da00
   20cdc:	2000da20 	.word	0x2000da20

00020ce0 <net_if_ipv6_select_src_iface>:

struct net_if *net_if_ipv6_select_src_iface(struct in6_addr *dst)
{
   20ce0:	b513      	push	{r0, r1, r4, lr}
	const struct in6_addr *src;
	struct net_if *iface;

	src = net_if_ipv6_select_src_addr(NULL, dst);
   20ce2:	4601      	mov	r1, r0
   20ce4:	2000      	movs	r0, #0
   20ce6:	f7ff ffb9 	bl	20c5c <net_if_ipv6_select_src_addr>
   20cea:	4604      	mov	r4, r0
	if (src == net_ipv6_unspecified_address()) {
   20cec:	f003 f86c 	bl	23dc8 <net_ipv6_unspecified_address>
   20cf0:	4284      	cmp	r4, r0
   20cf2:	d106      	bne.n	20d02 <net_if_ipv6_select_src_iface+0x22>
	if (__net_if_start == __net_if_end) {
   20cf4:	4807      	ldr	r0, [pc, #28]	; (20d14 <net_if_ipv6_select_src_iface+0x34>)
	return iface ? iface : __net_if_start;
   20cf6:	4b08      	ldr	r3, [pc, #32]	; (20d18 <net_if_ipv6_select_src_iface+0x38>)
   20cf8:	4298      	cmp	r0, r3
   20cfa:	bf08      	it	eq
   20cfc:	2000      	moveq	r0, #0
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
		return net_if_get_default();
	}

	return iface;
}
   20cfe:	b002      	add	sp, #8
   20d00:	bd10      	pop	{r4, pc}
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
   20d02:	a901      	add	r1, sp, #4
   20d04:	4620      	mov	r0, r4
   20d06:	f7ff f85d 	bl	1fdc4 <net_if_ipv6_addr_lookup>
   20d0a:	2800      	cmp	r0, #0
   20d0c:	d0f2      	beq.n	20cf4 <net_if_ipv6_select_src_iface+0x14>
	return iface;
   20d0e:	9801      	ldr	r0, [sp, #4]
   20d10:	e7f5      	b.n	20cfe <net_if_ipv6_select_src_iface+0x1e>
   20d12:	bf00      	nop
   20d14:	2000da00 	.word	0x2000da00
   20d18:	2000da20 	.word	0x2000da20

00020d1c <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if_ipv6 *ipv6)
{
   20d1c:	b538      	push	{r3, r4, r5, lr}
	u32_t min_reachable, max_reachable;

	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   20d1e:	f8d0 41c0 	ldr.w	r4, [r0, #448]	; 0x1c0

	NET_DBG("min_reachable:%u max_reachable:%u", min_reachable,
		max_reachable);

	return min_reachable +
	       sys_rand32_get() % (max_reachable - min_reachable);
   20d22:	f7e4 f9cd 	bl	50c0 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   20d26:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
   20d28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   20d2c:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   20d30:	fbb0 f3f4 	udiv	r3, r0, r4
   20d34:	fb03 0014 	mls	r0, r3, r4, r0
}
   20d38:	4428      	add	r0, r5
   20d3a:	bd38      	pop	{r3, r4, r5, pc}

00020d3c <net_if_recv_data>:
   20d3c:	6803      	ldr	r3, [r0, #0]
		net_pkt_unref(pkt);

		return verdict;
	}

	return net_if_l2(iface)->recv(iface, pkt);
   20d3e:	685b      	ldr	r3, [r3, #4]
   20d40:	681b      	ldr	r3, [r3, #0]
   20d42:	4718      	bx	r3

00020d44 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   20d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   20d46:	4b08      	ldr	r3, [pc, #32]	; (20d68 <net_if_call_link_cb+0x24>)
   20d48:	681b      	ldr	r3, [r3, #0]
{
   20d4a:	4605      	mov	r5, r0
   20d4c:	460e      	mov	r6, r1
   20d4e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   20d50:	b14b      	cbz	r3, 20d66 <net_if_call_link_cb+0x22>
	return node->next;
   20d52:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   20d54:	685b      	ldr	r3, [r3, #4]
   20d56:	463a      	mov	r2, r7
   20d58:	4631      	mov	r1, r6
   20d5a:	4628      	mov	r0, r5
   20d5c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   20d5e:	b114      	cbz	r4, 20d66 <net_if_call_link_cb+0x22>
   20d60:	4623      	mov	r3, r4
   20d62:	6824      	ldr	r4, [r4, #0]
   20d64:	e7f6      	b.n	20d54 <net_if_call_link_cb+0x10>
	}
}
   20d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d68:	20002464 	.word	0x20002464

00020d6c <process_tx_packet>:
{
   20d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!pkt) {
   20d70:	f1b0 0804 	subs.w	r8, r0, #4
{
   20d74:	4604      	mov	r4, r0
	if (!pkt) {
   20d76:	d034      	beq.n	20de2 <process_tx_packet+0x76>
	net_if_tx(net_pkt_iface(pkt), pkt);
   20d78:	69c5      	ldr	r5, [r0, #28]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   20d7a:	6828      	ldr	r0, [r5, #0]
   20d7c:	f850 3b0c 	ldr.w	r3, [r0], #12
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   20d80:	2100      	movs	r1, #0
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   20d82:	685a      	ldr	r2, [r3, #4]
	context_token = net_pkt_token(pkt);
   20d84:	e9d4 7905 	ldrd	r7, r9, [r4, #20]
	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   20d88:	f7fe fe33 	bl	1f9f2 <atomic_test_bit>
   20d8c:	b330      	cbz	r0, 20ddc <process_tx_packet+0x70>
	pkt->sent_or_eof = sent;
   20d8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
	pkt->pkt_queued = send;
   20d92:	f043 0301 	orr.w	r3, r3, #1
   20d96:	f36f 0341 	bfc	r3, #1, #1
   20d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		status = api->send(iface, pkt);
   20d9e:	6853      	ldr	r3, [r2, #4]
   20da0:	4641      	mov	r1, r8
   20da2:	4628      	mov	r0, r5
   20da4:	4798      	blx	r3
	if (status < 0) {
   20da6:	1e06      	subs	r6, r0, #0
   20da8:	da08      	bge.n	20dbc <process_tx_packet+0x50>
	pkt->sent_or_eof = sent;
   20daa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   20dae:	f36f 0300 	bfc	r3, #0, #1
   20db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		net_pkt_unref(pkt);
   20db6:	4640      	mov	r0, r8
   20db8:	f000 fc31 	bl	2161e <net_pkt_unref>
	if (context) {
   20dbc:	b127      	cbz	r7, 20dc8 <process_tx_packet+0x5c>
		net_context_send_cb(context, context_token, status);
   20dbe:	4632      	mov	r2, r6
   20dc0:	4649      	mov	r1, r9
   20dc2:	4638      	mov	r0, r7
   20dc4:	f7fe fe48 	bl	1fa58 <net_context_send_cb>
	if (dst->addr) {
   20dc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20dca:	b153      	cbz	r3, 20de2 <process_tx_packet+0x76>
		net_if_call_link_cb(iface, dst, status);
   20dcc:	4632      	mov	r2, r6
   20dce:	f104 0130 	add.w	r1, r4, #48	; 0x30
   20dd2:	4628      	mov	r0, r5
}
   20dd4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_if_call_link_cb(iface, dst, status);
   20dd8:	f7ff bfb4 	b.w	20d44 <net_if_call_link_cb>
		status = -ENETDOWN;
   20ddc:	f06f 063d 	mvn.w	r6, #61	; 0x3d
   20de0:	e7e3      	b.n	20daa <process_tx_packet+0x3e>
}
   20de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020de6 <net_if_send_data>:
{
   20de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20dea:	4606      	mov	r6, r0
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   20dec:	6800      	ldr	r0, [r0, #0]
{
   20dee:	460c      	mov	r4, r1
	void *token = net_pkt_token(pkt);
   20df0:	e9d1 7806 	ldrd	r7, r8, [r1, #24]
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   20df4:	300c      	adds	r0, #12
   20df6:	2100      	movs	r1, #0
   20df8:	f7fe fdfb 	bl	1f9f2 <atomic_test_bit>
   20dfc:	2800      	cmp	r0, #0
   20dfe:	d03d      	beq.n	20e7c <net_if_send_data+0x96>
	if (!atomic_test_bit(iface->if_dev->flags, NET_IF_POINTOPOINT) &&
   20e00:	6830      	ldr	r0, [r6, #0]
   20e02:	2101      	movs	r1, #1
   20e04:	300c      	adds	r0, #12
   20e06:	f7fe fdf4 	bl	1f9f2 <atomic_test_bit>
   20e0a:	b940      	cbnz	r0, 20e1e <net_if_send_data+0x38>
   20e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20e0e:	b933      	cbnz	r3, 20e1e <net_if_send_data+0x38>
	return net_if_get_link_addr(pkt->iface);
   20e10:	6a23      	ldr	r3, [r4, #32]
   20e12:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   20e14:	691a      	ldr	r2, [r3, #16]
   20e16:	62e2      	str	r2, [r4, #44]	; 0x2c
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   20e18:	7d1b      	ldrb	r3, [r3, #20]
   20e1a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return pkt->family;
   20e1e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   20e22:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20e26:	2b0a      	cmp	r3, #10
   20e28:	d108      	bne.n	20e3c <net_if_send_data+0x56>
		pkt = net_ipv6_prepare_for_send(pkt);
   20e2a:	4620      	mov	r0, r4
   20e2c:	f004 fe1a 	bl	25a64 <net_ipv6_prepare_for_send>
		if (!pkt) {
   20e30:	4601      	mov	r1, r0
   20e32:	b920      	cbnz	r0, 20e3e <net_if_send_data+0x58>
			verdict = NET_CONTINUE;
   20e34:	2301      	movs	r3, #1
}
   20e36:	4618      	mov	r0, r3
   20e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20e3c:	4621      	mov	r1, r4
   20e3e:	6833      	ldr	r3, [r6, #0]
	verdict = net_if_l2(iface)->send(iface, pkt);
   20e40:	685b      	ldr	r3, [r3, #4]
   20e42:	4630      	mov	r0, r6
   20e44:	685b      	ldr	r3, [r3, #4]
   20e46:	4798      	blx	r3
   20e48:	4603      	mov	r3, r0
	if (context && verdict == NET_DROP) {
   20e4a:	b197      	cbz	r7, 20e72 <net_if_send_data+0x8c>
   20e4c:	2802      	cmp	r0, #2
   20e4e:	d1f2      	bne.n	20e36 <net_if_send_data+0x50>
	int status = -EIO;
   20e50:	f06f 0504 	mvn.w	r5, #4
		net_context_send_cb(context, token, status);
   20e54:	462a      	mov	r2, r5
   20e56:	4641      	mov	r1, r8
   20e58:	4638      	mov	r0, r7
   20e5a:	f7fe fdfd 	bl	1fa58 <net_context_send_cb>
	if (verdict == NET_DROP && dst->addr) {
   20e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20e60:	b12b      	cbz	r3, 20e6e <net_if_send_data+0x88>
		net_if_call_link_cb(iface, dst, status);
   20e62:	462a      	mov	r2, r5
   20e64:	f104 0134 	add.w	r1, r4, #52	; 0x34
   20e68:	4630      	mov	r0, r6
   20e6a:	f7ff ff6b 	bl	20d44 <net_if_call_link_cb>
   20e6e:	2302      	movs	r3, #2
	return verdict;
   20e70:	e7e1      	b.n	20e36 <net_if_send_data+0x50>
	if (verdict == NET_DROP && dst->addr) {
   20e72:	2802      	cmp	r0, #2
   20e74:	d1df      	bne.n	20e36 <net_if_send_data+0x50>
   20e76:	f06f 0504 	mvn.w	r5, #4
   20e7a:	e7f0      	b.n	20e5e <net_if_send_data+0x78>
		status = -ENETDOWN;
   20e7c:	f06f 053d 	mvn.w	r5, #61	; 0x3d
	if (context && verdict == NET_DROP) {
   20e80:	2f00      	cmp	r7, #0
   20e82:	d1e7      	bne.n	20e54 <net_if_send_data+0x6e>
   20e84:	e7eb      	b.n	20e5e <net_if_send_data+0x78>

00020e86 <net_if_need_calc_tx_checksum>:
   20e86:	2001      	movs	r0, #1
   20e88:	4770      	bx	lr

00020e8a <net_if_need_calc_rx_checksum>:
}

bool net_if_need_calc_rx_checksum(struct net_if *iface)
{
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}
   20e8a:	2001      	movs	r0, #1
   20e8c:	4770      	bx	lr
	...

00020e90 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   20e90:	4b03      	ldr	r3, [pc, #12]	; (20ea0 <net_if_get_by_index+0x10>)
   20e92:	eb03 1040 	add.w	r0, r3, r0, lsl #5
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   20e96:	4b03      	ldr	r3, [pc, #12]	; (20ea4 <net_if_get_by_index+0x14>)
   20e98:	4298      	cmp	r0, r3
   20e9a:	bf28      	it	cs
   20e9c:	2000      	movcs	r0, #0
   20e9e:	4770      	bx	lr
   20ea0:	2000da00 	.word	0x2000da00
   20ea4:	2000da20 	.word	0x2000da20

00020ea8 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
   20ea8:	b538      	push	{r3, r4, r5, lr}
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);
   20eaa:	4d10      	ldr	r5, [pc, #64]	; (20eec <net_if_get_by_iface+0x44>)
   20eac:	42a8      	cmp	r0, r5
{
   20eae:	4604      	mov	r4, r0
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);
   20eb0:	d302      	bcc.n	20eb8 <net_if_get_by_iface+0x10>
   20eb2:	4b0f      	ldr	r3, [pc, #60]	; (20ef0 <net_if_get_by_iface+0x48>)
   20eb4:	4298      	cmp	r0, r3
   20eb6:	d314      	bcc.n	20ee2 <net_if_get_by_iface+0x3a>
   20eb8:	4b0e      	ldr	r3, [pc, #56]	; (20ef4 <net_if_get_by_iface+0x4c>)
   20eba:	681b      	ldr	r3, [r3, #0]
   20ebc:	075b      	lsls	r3, r3, #29
   20ebe:	d010      	beq.n	20ee2 <net_if_get_by_iface+0x3a>
   20ec0:	2301      	movs	r3, #1
   20ec2:	f04f 0200 	mov.w	r2, #0
   20ec6:	f363 0202 	bfi	r2, r3, #0, #3
   20eca:	490b      	ldr	r1, [pc, #44]	; (20ef8 <net_if_get_by_iface+0x50>)
   20ecc:	4b0b      	ldr	r3, [pc, #44]	; (20efc <net_if_get_by_iface+0x54>)
   20ece:	480c      	ldr	r0, [pc, #48]	; (20f00 <net_if_get_by_iface+0x58>)
   20ed0:	1a5b      	subs	r3, r3, r1
   20ed2:	f36f 02c5 	bfc	r2, #3, #3
   20ed6:	08db      	lsrs	r3, r3, #3
   20ed8:	f363 128f 	bfi	r2, r3, #6, #10
   20edc:	4909      	ldr	r1, [pc, #36]	; (20f04 <net_if_get_by_iface+0x5c>)
   20ede:	f7e0 ff3b 	bl	1d58 <log_1>

	return iface - __net_if_start;
   20ee2:	1b60      	subs	r0, r4, r5
}
   20ee4:	f3c0 1047 	ubfx	r0, r0, #5, #8
   20ee8:	bd38      	pop	{r3, r4, r5, pc}
   20eea:	bf00      	nop
   20eec:	2000da00 	.word	0x2000da00
   20ef0:	2000da20 	.word	0x2000da20
   20ef4:	2000d794 	.word	0x2000d794
   20ef8:	0002cff8 	.word	0x0002cff8
   20efc:	0002d100 	.word	0x0002d100
   20f00:	00032406 	.word	0x00032406
   20f04:	000323c0 	.word	0x000323c0

00020f08 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   20f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f0c:	4e08      	ldr	r6, [pc, #32]	; (20f30 <net_if_foreach+0x28>)
   20f0e:	4c09      	ldr	r4, [pc, #36]	; (20f34 <net_if_foreach+0x2c>)
   20f10:	1ba4      	subs	r4, r4, r6
   20f12:	f024 041f 	bic.w	r4, r4, #31
   20f16:	4607      	mov	r7, r0
   20f18:	4688      	mov	r8, r1
   20f1a:	3420      	adds	r4, #32
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20f1c:	2500      	movs	r5, #0
   20f1e:	19a8      	adds	r0, r5, r6
   20f20:	3520      	adds	r5, #32
   20f22:	42a5      	cmp	r5, r4
   20f24:	d101      	bne.n	20f2a <net_if_foreach+0x22>
		cb(iface, user_data);
	}
}
   20f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cb(iface, user_data);
   20f2a:	4641      	mov	r1, r8
   20f2c:	47b8      	blx	r7
   20f2e:	e7f6      	b.n	20f1e <net_if_foreach+0x16>
   20f30:	2000da00 	.word	0x2000da00
   20f34:	2000da20 	.word	0x2000da20

00020f38 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   20f38:	b510      	push	{r4, lr}
   20f3a:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->if_dev->flags, NET_IF_UP)) {
   20f3c:	6800      	ldr	r0, [r0, #0]
   20f3e:	2100      	movs	r1, #0
   20f40:	300c      	adds	r0, #12
   20f42:	f7fe fd56 	bl	1f9f2 <atomic_test_bit>
   20f46:	b9d8      	cbnz	r0, 20f80 <net_if_up+0x48>
   20f48:	6823      	ldr	r3, [r4, #0]
		goto done;
	}
#endif

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface)->enable) {
   20f4a:	685b      	ldr	r3, [r3, #4]
   20f4c:	68db      	ldr	r3, [r3, #12]
   20f4e:	b9cb      	cbnz	r3, 20f84 <net_if_up+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20f50:	6823      	ldr	r3, [r4, #0]
   20f52:	f3bf 8f5b 	dmb	ish
   20f56:	330c      	adds	r3, #12
   20f58:	e853 2f00 	ldrex	r2, [r3]
   20f5c:	f042 0201 	orr.w	r2, r2, #1
   20f60:	e843 2100 	strex	r1, r2, [r3]
   20f64:	2900      	cmp	r1, #0
   20f66:	d1f7      	bne.n	20f58 <net_if_up+0x20>
   20f68:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->if_dev->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   20f6c:	4620      	mov	r0, r4
   20f6e:	f7ff f929 	bl	201c4 <net_if_start_dad>
			 &iface->config.ip.ipv6->mcast[0].address.in6_addr);
#endif /* CONFIG_NET_IPV6_DAD */

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   20f72:	4620      	mov	r0, r4
   20f74:	f7fe fef8 	bl	1fd68 <net_if_start_rs>

#if defined(CONFIG_NET_IPV4_AUTO)
	net_ipv4_autoconf_start(iface);
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);
   20f78:	4621      	mov	r1, r4
   20f7a:	4805      	ldr	r0, [pc, #20]	; (20f90 <net_if_up+0x58>)
   20f7c:	f7fe fdb6 	bl	1faec <net_mgmt_event_notify>
		return 0;
   20f80:	2000      	movs	r0, #0
   20f82:	e004      	b.n	20f8e <net_if_up+0x56>
	status = net_if_l2(iface)->enable(iface, true);
   20f84:	2101      	movs	r1, #1
   20f86:	4620      	mov	r0, r4
   20f88:	4798      	blx	r3
	if (status < 0) {
   20f8a:	2800      	cmp	r0, #0
   20f8c:	dae0      	bge.n	20f50 <net_if_up+0x18>

	return 0;
}
   20f8e:	bd10      	pop	{r4, pc}
   20f90:	d0010002 	.word	0xd0010002

00020f94 <net_if_carrier_down>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20f94:	6803      	ldr	r3, [r0, #0]
   20f96:	f3bf 8f5b 	dmb	ish

void net_if_carrier_down(struct net_if *iface)
{
   20f9a:	4601      	mov	r1, r0
   20f9c:	330c      	adds	r3, #12
   20f9e:	e853 2f00 	ldrex	r2, [r3]
   20fa2:	f022 0201 	bic.w	r2, r2, #1
   20fa6:	e843 2000 	strex	r0, r2, [r3]
   20faa:	2800      	cmp	r0, #0
   20fac:	d1f7      	bne.n	20f9e <net_if_carrier_down+0xa>
   20fae:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_IPV4_AUTO)
	net_ipv4_autoconf_reset(iface);
#endif

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   20fb2:	4801      	ldr	r0, [pc, #4]	; (20fb8 <net_if_carrier_down+0x24>)
   20fb4:	f7fe bd9a 	b.w	1faec <net_mgmt_event_notify>
   20fb8:	d0010001 	.word	0xd0010001

00020fbc <net_if_down>:
}

int net_if_down(struct net_if *iface)
{
   20fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   20fc0:	6846      	ldr	r6, [r0, #4]
{
   20fc2:	4604      	mov	r4, r0
	if (!ipv6) {
   20fc4:	b19e      	cbz	r6, 20fee <net_if_down+0x32>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   20fc6:	2500      	movs	r5, #0
		if (!ipv6->mcast[i].is_used ||
   20fc8:	2718      	movs	r7, #24
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
   20fca:	f106 08dc 	add.w	r8, r6, #220	; 0xdc
		if (!ipv6->mcast[i].is_used ||
   20fce:	fb07 f105 	mul.w	r1, r7, r5
   20fd2:	1873      	adds	r3, r6, r1
   20fd4:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   20fd8:	07da      	lsls	r2, r3, #31
   20fda:	d505      	bpl.n	20fe8 <net_if_down+0x2c>
   20fdc:	079b      	lsls	r3, r3, #30
   20fde:	d503      	bpl.n	20fe8 <net_if_down+0x2c>
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
   20fe0:	4441      	add	r1, r8
   20fe2:	4620      	mov	r0, r4
   20fe4:	f005 f9dc 	bl	263a0 <net_ipv6_mld_leave>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   20fe8:	3501      	adds	r5, #1
   20fea:	2d05      	cmp	r5, #5
   20fec:	d1ef      	bne.n	20fce <net_if_down+0x12>
   20fee:	6823      	ldr	r3, [r4, #0]
		goto done;
	}
#endif

	/* If the L2 does not support enable just clear the flag */
	if (!net_if_l2(iface)->enable) {
   20ff0:	685b      	ldr	r3, [r3, #4]
   20ff2:	68db      	ldr	r3, [r3, #12]
   20ff4:	b9a3      	cbnz	r3, 21020 <net_if_down+0x64>
   20ff6:	6823      	ldr	r3, [r4, #0]
   20ff8:	f3bf 8f5b 	dmb	ish
   20ffc:	330c      	adds	r3, #12
   20ffe:	e853 2f00 	ldrex	r2, [r3]
   21002:	f022 0201 	bic.w	r2, r2, #1
   21006:	e843 2100 	strex	r1, r2, [r3]
   2100a:	2900      	cmp	r1, #0
   2100c:	d1f7      	bne.n	20ffe <net_if_down+0x42>
   2100e:	f3bf 8f5b 	dmb	ish
	}

done:
	atomic_clear_bit(iface->if_dev->flags, NET_IF_UP);

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   21012:	4806      	ldr	r0, [pc, #24]	; (2102c <net_if_down+0x70>)
   21014:	4621      	mov	r1, r4
   21016:	f7fe fd69 	bl	1faec <net_mgmt_event_notify>

	return 0;
   2101a:	2000      	movs	r0, #0
}
   2101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = net_if_l2(iface)->enable(iface, false);
   21020:	2100      	movs	r1, #0
   21022:	4620      	mov	r0, r4
   21024:	4798      	blx	r3
	if (status < 0) {
   21026:	2800      	cmp	r0, #0
   21028:	dae5      	bge.n	20ff6 <net_if_down+0x3a>
   2102a:	e7f7      	b.n	2101c <net_if_down+0x60>
   2102c:	d0010001 	.word	0xd0010001

00021030 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP */

void net_if_init(void)
{
   21030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21034:	b085      	sub	sp, #20
	struct net_if *iface;
	int i, if_count;

	NET_DBG("");

	net_tc_tx_init();
   21036:	f000 fee1 	bl	21dfc <net_tc_tx_init>

#if defined(CONFIG_NET_IPV6)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
   2103a:	493d      	ldr	r1, [pc, #244]	; (21130 <net_if_init+0x100>)
   2103c:	483d      	ldr	r0, [pc, #244]	; (21134 <net_if_init+0x104>)
   2103e:	4c3e      	ldr	r4, [pc, #248]	; (21138 <net_if_init+0x108>)
   21040:	4f3e      	ldr	r7, [pc, #248]	; (2113c <net_if_init+0x10c>)
	NET_ASSERT(api && api->init);
   21042:	f8df b10c 	ldr.w	fp, [pc, #268]	; 21150 <net_if_init+0x120>
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
   21046:	f00b fb63 	bl	2c710 <k_delayed_work_init>
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
   2104a:	493d      	ldr	r1, [pc, #244]	; (21140 <net_if_init+0x110>)
   2104c:	483d      	ldr	r0, [pc, #244]	; (21144 <net_if_init+0x114>)
   2104e:	f00b fb5f 	bl	2c710 <k_delayed_work_init>
	NET_ASSERT(api && api->init);
   21052:	4b3d      	ldr	r3, [pc, #244]	; (21148 <net_if_init+0x118>)
   21054:	1ae4      	subs	r4, r4, r3
   21056:	4b3d      	ldr	r3, [pc, #244]	; (2114c <net_if_init+0x11c>)
   21058:	9302      	str	r3, [sp, #8]
   2105a:	1bda      	subs	r2, r3, r7
   2105c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21060:	9201      	str	r2, [sp, #4]
#endif

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   21062:	2500      	movs	r5, #0
   21064:	46ba      	mov	sl, r7
   21066:	9a01      	ldr	r2, [sp, #4]
   21068:	4295      	cmp	r5, r2
   2106a:	eb05 0307 	add.w	r3, r5, r7
   2106e:	d116      	bne.n	2109e <net_if_init+0x6e>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   21070:	9b02      	ldr	r3, [sp, #8]
   21072:	4553      	cmp	r3, sl
   21074:	d143      	bne.n	210fe <net_if_init+0xce>
		NET_ERR("There is no network interface to work with!");
   21076:	4b36      	ldr	r3, [pc, #216]	; (21150 <net_if_init+0x120>)
   21078:	681b      	ldr	r3, [r3, #0]
   2107a:	075b      	lsls	r3, r3, #29
   2107c:	d054      	beq.n	21128 <net_if_init+0xf8>
   2107e:	2301      	movs	r3, #1
   21080:	f04f 0200 	mov.w	r2, #0
   21084:	f363 0202 	bfi	r2, r3, #0, #3
   21088:	f36f 02c5 	bfc	r2, #3, #3
   2108c:	4931      	ldr	r1, [pc, #196]	; (21154 <net_if_init+0x124>)
   2108e:	4832      	ldr	r0, [pc, #200]	; (21158 <net_if_init+0x128>)
   21090:	f364 128f 	bfi	r2, r4, #6, #10
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   21094:	b005      	add	sp, #20
   21096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		NET_ERR("There is no network interface to work with!");
   2109a:	f7e0 be5d 	b.w	1d58 <log_1>
	return iface->if_dev->dev;
   2109e:	f85a 2005 	ldr.w	r2, [sl, r5]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   210a2:	6812      	ldr	r2, [r2, #0]
   210a4:	6856      	ldr	r6, [r2, #4]
	NET_ASSERT(api && api->init);
   210a6:	b10e      	cbz	r6, 210ac <net_if_init+0x7c>
   210a8:	6832      	ldr	r2, [r6, #0]
   210aa:	b98a      	cbnz	r2, 210d0 <net_if_init+0xa0>
   210ac:	f8db 2000 	ldr.w	r2, [fp]
   210b0:	0751      	lsls	r1, r2, #29
   210b2:	d00d      	beq.n	210d0 <net_if_init+0xa0>
   210b4:	2201      	movs	r2, #1
   210b6:	f362 0802 	bfi	r8, r2, #0, #3
   210ba:	f36f 08c5 	bfc	r8, #3, #3
   210be:	f364 188f 	bfi	r8, r4, #6, #10
   210c2:	4642      	mov	r2, r8
   210c4:	4925      	ldr	r1, [pc, #148]	; (2115c <net_if_init+0x12c>)
   210c6:	4826      	ldr	r0, [pc, #152]	; (21160 <net_if_init+0x130>)
   210c8:	9303      	str	r3, [sp, #12]
   210ca:	f7e0 fe45 	bl	1d58 <log_1>
   210ce:	9b03      	ldr	r3, [sp, #12]
	api->init(iface);
   210d0:	6832      	ldr	r2, [r6, #0]
   210d2:	4618      	mov	r0, r3
   210d4:	4790      	blx	r2
		NET_ASSERT(api->send);
   210d6:	6873      	ldr	r3, [r6, #4]
   210d8:	b97b      	cbnz	r3, 210fa <net_if_init+0xca>
   210da:	f8db 2000 	ldr.w	r2, [fp]
   210de:	0752      	lsls	r2, r2, #29
   210e0:	d00b      	beq.n	210fa <net_if_init+0xca>
   210e2:	2201      	movs	r2, #1
   210e4:	f362 0902 	bfi	r9, r2, #0, #3
   210e8:	f363 09c5 	bfi	r9, r3, #3, #3
   210ec:	f364 198f 	bfi	r9, r4, #6, #10
   210f0:	464a      	mov	r2, r9
   210f2:	491a      	ldr	r1, [pc, #104]	; (2115c <net_if_init+0x12c>)
   210f4:	481b      	ldr	r0, [pc, #108]	; (21164 <net_if_init+0x134>)
   210f6:	f7e0 fe2f 	bl	1d58 <log_1>
   210fa:	3520      	adds	r5, #32
   210fc:	e7b3      	b.n	21066 <net_if_init+0x36>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   210fe:	4c1a      	ldr	r4, [pc, #104]	; (21168 <net_if_init+0x138>)
   21100:	2340      	movs	r3, #64	; 0x40
   21102:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
   21106:	f247 5330 	movw	r3, #30000	; 0x7530
   2110a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   2110e:	4620      	mov	r0, r4
   21110:	f7ff fe04 	bl	20d1c <net_if_ipv6_calc_reachable_time>
		k_delayed_work_init(&ipv6_addresses[i].ipv6.rs_timer,
   21114:	4915      	ldr	r1, [pc, #84]	; (2116c <net_if_init+0x13c>)
   21116:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   2111a:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
}
   2111e:	b005      	add	sp, #20
   21120:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_init(&ipv6_addresses[i].ipv6.rs_timer,
   21124:	f00b baf4 	b.w	2c710 <k_delayed_work_init>
}
   21128:	b005      	add	sp, #20
   2112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2112e:	bf00      	nop
   21130:	0001faf5 	.word	0x0001faf5
   21134:	20002270 	.word	0x20002270
   21138:	0002d100 	.word	0x0002d100
   2113c:	2000da00 	.word	0x2000da00
   21140:	000205bd 	.word	0x000205bd
   21144:	20002474 	.word	0x20002474
   21148:	0002cff8 	.word	0x0002cff8
   2114c:	2000da20 	.word	0x2000da20
   21150:	2000d794 	.word	0x2000d794
   21154:	000323d4 	.word	0x000323d4
   21158:	00032496 	.word	0x00032496
   2115c:	0003234d 	.word	0x0003234d
   21160:	0003244d 	.word	0x0003244d
   21164:	00032475 	.word	0x00032475
   21168:	20002290 	.word	0x20002290
   2116c:	0001fd89 	.word	0x0001fd89

00021170 <net_if_post_init>:

void net_if_post_init(void)
{
   21170:	b570      	push	{r4, r5, r6, lr}
   21172:	4e07      	ldr	r6, [pc, #28]	; (21190 <net_if_post_init+0x20>)
   21174:	4c07      	ldr	r4, [pc, #28]	; (21194 <net_if_post_init+0x24>)
   21176:	1ba4      	subs	r4, r4, r6
   21178:	f024 041f 	bic.w	r4, r4, #31
   2117c:	3420      	adds	r4, #32
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   2117e:	2500      	movs	r5, #0
   21180:	19a8      	adds	r0, r5, r6
   21182:	3520      	adds	r5, #32
   21184:	42a5      	cmp	r5, r4
   21186:	d100      	bne.n	2118a <net_if_post_init+0x1a>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   21188:	bd70      	pop	{r4, r5, r6, pc}
		net_if_up(iface);
   2118a:	f7ff fed5 	bl	20f38 <net_if_up>
   2118e:	e7f7      	b.n	21180 <net_if_post_init+0x10>
   21190:	2000da00 	.word	0x2000da00
   21194:	2000da20 	.word	0x2000da20

00021198 <net_context_get_family>:
{
   21198:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   2119a:	4604      	mov	r4, r0
   2119c:	b9a0      	cbnz	r0, 211c8 <net_context_get_family+0x30>
   2119e:	4b0e      	ldr	r3, [pc, #56]	; (211d8 <net_context_get_family+0x40>)
   211a0:	681b      	ldr	r3, [r3, #0]
   211a2:	075b      	lsls	r3, r3, #29
   211a4:	d010      	beq.n	211c8 <net_context_get_family+0x30>
   211a6:	2301      	movs	r3, #1
   211a8:	f04f 0200 	mov.w	r2, #0
   211ac:	f363 0202 	bfi	r2, r3, #0, #3
   211b0:	490a      	ldr	r1, [pc, #40]	; (211dc <net_context_get_family+0x44>)
   211b2:	4b0b      	ldr	r3, [pc, #44]	; (211e0 <net_context_get_family+0x48>)
   211b4:	1a5b      	subs	r3, r3, r1
   211b6:	f360 02c5 	bfi	r2, r0, #3, #3
   211ba:	08db      	lsrs	r3, r3, #3
   211bc:	f363 128f 	bfi	r2, r3, #6, #10
   211c0:	4908      	ldr	r1, [pc, #32]	; (211e4 <net_context_get_family+0x4c>)
   211c2:	4809      	ldr	r0, [pc, #36]	; (211e8 <net_context_get_family+0x50>)
   211c4:	f7e0 fdc8 	bl	1d58 <log_1>
	if (context->flags & NET_CONTEXT_FAMILY) {
   211c8:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return AF_INET;
   211cc:	f013 0f10 	tst.w	r3, #16
}
   211d0:	bf14      	ite	ne
   211d2:	200a      	movne	r0, #10
   211d4:	2002      	moveq	r0, #2
   211d6:	bd10      	pop	{r4, pc}
   211d8:	2000d7b0 	.word	0x2000d7b0
   211dc:	0002cff8 	.word	0x0002cff8
   211e0:	0002d138 	.word	0x0002d138
   211e4:	000325b0 	.word	0x000325b0
   211e8:	000322d6 	.word	0x000322d6

000211ec <net_context_get_iface>:
{
   211ec:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   211ee:	4604      	mov	r4, r0
   211f0:	b9a0      	cbnz	r0, 2121c <net_context_get_iface+0x30>
   211f2:	4b0d      	ldr	r3, [pc, #52]	; (21228 <net_context_get_iface+0x3c>)
   211f4:	681b      	ldr	r3, [r3, #0]
   211f6:	075b      	lsls	r3, r3, #29
   211f8:	d010      	beq.n	2121c <net_context_get_iface+0x30>
   211fa:	2301      	movs	r3, #1
   211fc:	f04f 0200 	mov.w	r2, #0
   21200:	f363 0202 	bfi	r2, r3, #0, #3
   21204:	4909      	ldr	r1, [pc, #36]	; (2122c <net_context_get_iface+0x40>)
   21206:	4b0a      	ldr	r3, [pc, #40]	; (21230 <net_context_get_iface+0x44>)
   21208:	1a5b      	subs	r3, r3, r1
   2120a:	f360 02c5 	bfi	r2, r0, #3, #3
   2120e:	08db      	lsrs	r3, r3, #3
   21210:	f363 128f 	bfi	r2, r3, #6, #10
   21214:	4907      	ldr	r1, [pc, #28]	; (21234 <net_context_get_iface+0x48>)
   21216:	4808      	ldr	r0, [pc, #32]	; (21238 <net_context_get_iface+0x4c>)
   21218:	f7e0 fd9e 	bl	1d58 <log_1>
	return net_if_get_by_index(context->iface);
   2121c:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
}
   21220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_get_by_index(context->iface);
   21224:	f7ff be34 	b.w	20e90 <net_if_get_by_index>
   21228:	2000d7b0 	.word	0x2000d7b0
   2122c:	0002cff8 	.word	0x0002cff8
   21230:	0002d138 	.word	0x0002d138
   21234:	000325c7 	.word	0x000325c7
   21238:	000322d6 	.word	0x000322d6

0002123c <net_pkt_get_addr>:
	}
}

static int net_pkt_get_addr(struct net_pkt *pkt, bool is_src,
			    struct sockaddr *addr, socklen_t addrlen)
{
   2123c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21240:	4604      	mov	r4, r0
   21242:	b08b      	sub	sp, #44	; 0x2c
   21244:	4688      	mov	r8, r1
   21246:	4699      	mov	r9, r3
	enum net_ip_protocol proto;
	sa_family_t family;
	u16_t port;

	if (!addr || !pkt) {
   21248:	4615      	mov	r5, r2
   2124a:	b912      	cbnz	r2, 21252 <net_pkt_get_addr+0x16>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
		struct net_udp_hdr hdr, *udp_hdr;

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
		if (!udp_hdr) {
			return -EINVAL;
   2124c:	f06f 0015 	mvn.w	r0, #21
   21250:	e03d      	b.n	212ce <net_pkt_get_addr+0x92>
	if (!addr || !pkt) {
   21252:	2800      	cmp	r0, #0
   21254:	d0fa      	beq.n	2124c <net_pkt_get_addr+0x10>
   21256:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
	family = net_pkt_family(pkt);
   2125a:	f3c7 07c3 	ubfx	r7, r7, #3, #4
	addr->sa_family = family;
   2125e:	8017      	strh	r7, [r2, #0]
	proto = net_pkt_transport_proto(pkt);
   21260:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   21264:	2b06      	cmp	r3, #6
   21266:	d12e      	bne.n	212c6 <net_pkt_get_addr+0x8a>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   21268:	a905      	add	r1, sp, #20
   2126a:	f008 f80d 	bl	29288 <net_tcp_get_hdr>
		if (!udp_hdr) {
   2126e:	2800      	cmp	r0, #0
   21270:	d0ec      	beq.n	2124c <net_pkt_get_addr+0x10>
		}

		if (is_src) {
   21272:	f1b8 0f00 	cmp.w	r8, #0
   21276:	d031      	beq.n	212dc <net_pkt_get_addr+0xa0>
			port = udp_hdr->src_port;
   21278:	8806      	ldrh	r6, [r0, #0]
	} else {
		return -ENOTSUP;
	}

	/* Set address and port to addr */
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   2127a:	2f0a      	cmp	r7, #10
   2127c:	d125      	bne.n	212ca <net_pkt_get_addr+0x8e>
		struct sockaddr_in6 *addr6 = net_sin6(addr);

		if (addrlen < sizeof(struct sockaddr_in6)) {
   2127e:	f1b9 0f17 	cmp.w	r9, #23
   21282:	d9e3      	bls.n	2124c <net_pkt_get_addr+0x10>
   21284:	6963      	ldr	r3, [r4, #20]
   21286:	689b      	ldr	r3, [r3, #8]
   21288:	f103 0418 	add.w	r4, r3, #24
			return -EINVAL;
		}

		if (is_src) {
   2128c:	f1b8 0f00 	cmp.w	r8, #0
   21290:	d026      	beq.n	212e0 <net_pkt_get_addr+0xa4>
			net_ipaddr_copy(&addr6->sin6_addr,
   21292:	af01      	add	r7, sp, #4
   21294:	3308      	adds	r3, #8
   21296:	463a      	mov	r2, r7
   21298:	6818      	ldr	r0, [r3, #0]
   2129a:	6859      	ldr	r1, [r3, #4]
   2129c:	46bc      	mov	ip, r7
   2129e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   212a2:	3308      	adds	r3, #8
   212a4:	42a3      	cmp	r3, r4
   212a6:	4667      	mov	r7, ip
   212a8:	d1f6      	bne.n	21298 <net_pkt_get_addr+0x5c>
   212aa:	1d2c      	adds	r4, r5, #4
   212ac:	af05      	add	r7, sp, #20
   212ae:	4613      	mov	r3, r2
   212b0:	cb03      	ldmia	r3!, {r0, r1}
   212b2:	42bb      	cmp	r3, r7
   212b4:	6020      	str	r0, [r4, #0]
   212b6:	6061      	str	r1, [r4, #4]
   212b8:	461a      	mov	r2, r3
   212ba:	f104 0408 	add.w	r4, r4, #8
   212be:	d1f6      	bne.n	212ae <net_pkt_get_addr+0x72>
		addr4->sin_port = port;
	} else {
		return -ENOTSUP;
	}

	return 0;
   212c0:	2000      	movs	r0, #0
		addr6->sin6_port = port;
   212c2:	806e      	strh	r6, [r5, #2]
	return 0;
   212c4:	e003      	b.n	212ce <net_pkt_get_addr+0x92>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   212c6:	2b11      	cmp	r3, #17
   212c8:	d004      	beq.n	212d4 <net_pkt_get_addr+0x98>
		return -ENOTSUP;
   212ca:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   212ce:	b00b      	add	sp, #44	; 0x2c
   212d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   212d4:	a905      	add	r1, sp, #20
   212d6:	f009 f815 	bl	2a304 <net_udp_get_hdr>
   212da:	e7c8      	b.n	2126e <net_pkt_get_addr+0x32>
			port = udp_hdr->dst_port;
   212dc:	8846      	ldrh	r6, [r0, #2]
   212de:	e7cc      	b.n	2127a <net_pkt_get_addr+0x3e>
			net_ipaddr_copy(&addr6->sin6_addr,
   212e0:	af05      	add	r7, sp, #20
   212e2:	3328      	adds	r3, #40	; 0x28
   212e4:	463a      	mov	r2, r7
   212e6:	6820      	ldr	r0, [r4, #0]
   212e8:	6861      	ldr	r1, [r4, #4]
   212ea:	46bc      	mov	ip, r7
   212ec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   212f0:	3408      	adds	r4, #8
   212f2:	429c      	cmp	r4, r3
   212f4:	4667      	mov	r7, ip
   212f6:	d1f6      	bne.n	212e6 <net_pkt_get_addr+0xaa>
   212f8:	1d2c      	adds	r4, r5, #4
   212fa:	af09      	add	r7, sp, #36	; 0x24
   212fc:	4613      	mov	r3, r2
   212fe:	cb03      	ldmia	r3!, {r0, r1}
   21300:	42bb      	cmp	r3, r7
   21302:	6020      	str	r0, [r4, #0]
   21304:	6061      	str	r1, [r4, #4]
   21306:	461a      	mov	r2, r3
   21308:	f104 0408 	add.w	r4, r4, #8
   2130c:	d1f6      	bne.n	212fc <net_pkt_get_addr+0xc0>
   2130e:	e7d7      	b.n	212c0 <net_pkt_get_addr+0x84>

00021310 <net_pkt_get_reserve>:
{
   21310:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21312:	4604      	mov	r4, r0
   21314:	460d      	mov	r5, r1
   21316:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   21318:	f00b f8b8 	bl	2c48c <k_is_in_isr>
   2131c:	b198      	cbz	r0, 21346 <net_pkt_get_reserve+0x36>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   2131e:	2200      	movs	r2, #0
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   21320:	a901      	add	r1, sp, #4
   21322:	4620      	mov	r0, r4
   21324:	f00a faf6 	bl	2b914 <k_mem_slab_alloc>
	if (ret) {
   21328:	b978      	cbnz	r0, 2134a <net_pkt_get_reserve+0x3a>
	(void)memset(pkt, 0, sizeof(struct net_pkt));
   2132a:	4601      	mov	r1, r0
   2132c:	2254      	movs	r2, #84	; 0x54
   2132e:	9801      	ldr	r0, [sp, #4]
   21330:	f7e4 fdd7 	bl	5ee2 <memset>
	net_pkt_set_ll_reserve(pkt, reserve_head);
   21334:	9801      	ldr	r0, [sp, #4]
	pkt->ref = 1;
   21336:	2301      	movs	r3, #1
	net_pkt_set_ll_reserve(pkt, reserve_head);
   21338:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
	pkt->ref = 1;
   2133c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
	pkt->slab = slab;
   21340:	6104      	str	r4, [r0, #16]
}
   21342:	b002      	add	sp, #8
   21344:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   21346:	4632      	mov	r2, r6
   21348:	e7ea      	b.n	21320 <net_pkt_get_reserve+0x10>
		return NULL;
   2134a:	2000      	movs	r0, #0
   2134c:	e7f9      	b.n	21342 <net_pkt_get_reserve+0x32>
	...

00021350 <net_pkt_get>:
{
   21350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21352:	4607      	mov	r7, r0
   21354:	4614      	mov	r4, r2
	if (!context) {
   21356:	460e      	mov	r6, r1
   21358:	b1c9      	cbz	r1, 2138e <net_pkt_get+0x3e>
	iface = net_context_get_iface(context);
   2135a:	4608      	mov	r0, r1
   2135c:	f7ff ff46 	bl	211ec <net_context_get_iface>
	if (!iface) {
   21360:	4605      	mov	r5, r0
   21362:	b9b8      	cbnz	r0, 21394 <net_pkt_get+0x44>
		NET_ERR("Context has no interface");
   21364:	4b2c      	ldr	r3, [pc, #176]	; (21418 <net_pkt_get+0xc8>)
   21366:	681b      	ldr	r3, [r3, #0]
   21368:	0759      	lsls	r1, r3, #29
   2136a:	d010      	beq.n	2138e <net_pkt_get+0x3e>
   2136c:	2301      	movs	r3, #1
   2136e:	f04f 0200 	mov.w	r2, #0
   21372:	f363 0202 	bfi	r2, r3, #0, #3
   21376:	4929      	ldr	r1, [pc, #164]	; (2141c <net_pkt_get+0xcc>)
   21378:	4b29      	ldr	r3, [pc, #164]	; (21420 <net_pkt_get+0xd0>)
   2137a:	1a5b      	subs	r3, r3, r1
   2137c:	f360 02c5 	bfi	r2, r0, #3, #3
   21380:	08db      	lsrs	r3, r3, #3
   21382:	f363 128f 	bfi	r2, r3, #6, #10
   21386:	4927      	ldr	r1, [pc, #156]	; (21424 <net_pkt_get+0xd4>)
   21388:	4827      	ldr	r0, [pc, #156]	; (21428 <net_pkt_get+0xd8>)
   2138a:	f7e0 fce5 	bl	1d58 <log_1>
		return NULL;
   2138e:	2400      	movs	r4, #0
}
   21390:	4620      	mov	r0, r4
   21392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (net_context_get_family(context) == AF_INET6) {
   21394:	4630      	mov	r0, r6
   21396:	f7ff feff 	bl	21198 <net_context_get_family>
	return iface->if_dev->l2;
   2139a:	682b      	ldr	r3, [r5, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   2139c:	685b      	ldr	r3, [r3, #4]
   2139e:	280a      	cmp	r0, #10
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   213a0:	bf0c      	ite	eq
   213a2:	f106 0118 	addeq.w	r1, r6, #24
	struct in6_addr *addr6 = NULL;
   213a6:	2100      	movne	r1, #0
   213a8:	689b      	ldr	r3, [r3, #8]
   213aa:	4628      	mov	r0, r5
   213ac:	4798      	blx	r3
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   213ae:	4622      	mov	r2, r4
   213b0:	4601      	mov	r1, r0
   213b2:	4638      	mov	r0, r7
   213b4:	f7ff ffac 	bl	21310 <net_pkt_get_reserve>
	if (!pkt) {
   213b8:	4604      	mov	r4, r0
   213ba:	2800      	cmp	r0, #0
   213bc:	d0e7      	beq.n	2138e <net_pkt_get+0x3e>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   213be:	682b      	ldr	r3, [r5, #0]
	pkt->context = ctx;
   213c0:	6186      	str	r6, [r0, #24]
	pkt->iface = iface;
   213c2:	6205      	str	r5, [r0, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   213c4:	7d5b      	ldrb	r3, [r3, #21]
   213c6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   213ca:	682b      	ldr	r3, [r5, #0]
   213cc:	7d5b      	ldrb	r3, [r3, #21]
   213ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	family = net_context_get_family(context);
   213d2:	4630      	mov	r0, r6
   213d4:	f7ff fee0 	bl	21198 <net_context_get_family>
	pkt->family = family;
   213d8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   213dc:	f360 03c6 	bfi	r3, r0, #3, #4
   213e0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (slab != &rx_pkts) {
   213e4:	4b11      	ldr	r3, [pc, #68]	; (2142c <net_pkt_get+0xdc>)
   213e6:	429f      	cmp	r7, r3
   213e8:	d0d2      	beq.n	21390 <net_pkt_get+0x40>
	return iface->if_dev->mtu;
   213ea:	682b      	ldr	r3, [r5, #0]
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   213ec:	280a      	cmp	r0, #10
   213ee:	8b1b      	ldrh	r3, [r3, #24]
   213f0:	d10e      	bne.n	21410 <net_pkt_get+0xc0>
			data_len = max(iface_len, NET_IPV6_MTU);
   213f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   213f6:	bf38      	it	cc
   213f8:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
			data_len -= NET_IPV6H_LEN;
   213fc:	3b28      	subs	r3, #40	; 0x28
   213fe:	b29b      	uxth	r3, r3
	if (context->flags & NET_CONTEXT_PROTO) {
   21400:	f896 2065 	ldrb.w	r2, [r6, #101]	; 0x65
   21404:	0652      	lsls	r2, r2, #25
   21406:	d505      	bpl.n	21414 <net_pkt_get+0xc4>
			data_len -= NET_TCP_MAX_OPT_SIZE;
   21408:	3b1c      	subs	r3, #28
			data_len -= NET_UDPH_LEN;
   2140a:	b29b      	uxth	r3, r3
		pkt->data_len = data_len;
   2140c:	87a3      	strh	r3, [r4, #60]	; 0x3c
   2140e:	e7bf      	b.n	21390 <net_pkt_get+0x40>
		uint16_t iface_len, data_len = 0;
   21410:	2300      	movs	r3, #0
   21412:	e7f5      	b.n	21400 <net_pkt_get+0xb0>
			data_len -= NET_UDPH_LEN;
   21414:	3b08      	subs	r3, #8
   21416:	e7f8      	b.n	2140a <net_pkt_get+0xba>
   21418:	2000d7b0 	.word	0x2000d7b0
   2141c:	0002cff8 	.word	0x0002cff8
   21420:	0002d138 	.word	0x0002d138
   21424:	000325dd 	.word	0x000325dd
   21428:	000326a4 	.word	0x000326a4
   2142c:	2000d808 	.word	0x2000d808

00021430 <net_pkt_get_reserve_data>:
{
   21430:	b570      	push	{r4, r5, r6, lr}
   21432:	4604      	mov	r4, r0
   21434:	460d      	mov	r5, r1
   21436:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   21438:	f00b f828 	bl	2c48c <k_is_in_isr>
   2143c:	b158      	cbz	r0, 21456 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   2143e:	2100      	movs	r1, #0
		frag = net_buf_alloc(pool, timeout);
   21440:	4620      	mov	r0, r4
   21442:	f7fc ffd5 	bl	1e3f0 <net_buf_alloc_fixed>
   21446:	4604      	mov	r4, r0
	if (!frag) {
   21448:	b118      	cbz	r0, 21452 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   2144a:	4629      	mov	r1, r5
   2144c:	3008      	adds	r0, #8
   2144e:	f7fc ffee 	bl	1e42e <net_buf_simple_reserve>
}
   21452:	4620      	mov	r0, r4
   21454:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   21456:	4631      	mov	r1, r6
   21458:	e7f2      	b.n	21440 <net_pkt_get_reserve_data+0x10>
	...

0002145c <net_pkt_get_reserve_rx>:
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   2145c:	460a      	mov	r2, r1
   2145e:	4601      	mov	r1, r0
   21460:	4801      	ldr	r0, [pc, #4]	; (21468 <net_pkt_get_reserve_rx+0xc>)
   21462:	f7ff bf55 	b.w	21310 <net_pkt_get_reserve>
   21466:	bf00      	nop
   21468:	2000d808 	.word	0x2000d808

0002146c <net_pkt_get_reserve_tx>:
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   2146c:	460a      	mov	r2, r1
   2146e:	4601      	mov	r1, r0
   21470:	4801      	ldr	r0, [pc, #4]	; (21478 <net_pkt_get_reserve_tx+0xc>)
   21472:	f7ff bf4d 	b.w	21310 <net_pkt_get_reserve>
   21476:	bf00      	nop
   21478:	2000d824 	.word	0x2000d824

0002147c <net_pkt_get_reserve_rx_data>:
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   2147c:	460a      	mov	r2, r1
   2147e:	4601      	mov	r1, r0
   21480:	4801      	ldr	r0, [pc, #4]	; (21488 <net_pkt_get_reserve_rx_data+0xc>)
   21482:	f7ff bfd5 	b.w	21430 <net_pkt_get_reserve_data>
   21486:	bf00      	nop
   21488:	2000d9a8 	.word	0x2000d9a8

0002148c <net_pkt_get_reserve_tx_data>:
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   2148c:	460a      	mov	r2, r1
   2148e:	4601      	mov	r1, r0
   21490:	4801      	ldr	r0, [pc, #4]	; (21498 <net_pkt_get_reserve_tx_data+0xc>)
   21492:	f7ff bfcd 	b.w	21430 <net_pkt_get_reserve_data>
   21496:	bf00      	nop
   21498:	2000d9c8 	.word	0x2000d9c8

0002149c <net_pkt_get_frag>:
{
   2149c:	b538      	push	{r3, r4, r5, lr}
	context = net_pkt_context(pkt);
   2149e:	6983      	ldr	r3, [r0, #24]
{
   214a0:	4604      	mov	r4, r0
   214a2:	460d      	mov	r5, r1
	if (context && context->data_pool) {
   214a4:	b14b      	cbz	r3, 214ba <net_pkt_get_frag+0x1e>
   214a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   214a8:	b13b      	cbz	r3, 214ba <net_pkt_get_frag+0x1e>
		return net_pkt_get_reserve_data(context->data_pool(),
   214aa:	4798      	blx	r3
   214ac:	462a      	mov	r2, r5
   214ae:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
}
   214b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_data(context->data_pool(),
   214b6:	f7ff bfbb 	b.w	21430 <net_pkt_get_reserve_data>
	if (pkt->slab == &rx_pkts) {
   214ba:	6922      	ldr	r2, [r4, #16]
   214bc:	4b06      	ldr	r3, [pc, #24]	; (214d8 <net_pkt_get_frag+0x3c>)
   214be:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
   214c2:	429a      	cmp	r2, r3
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   214c4:	4629      	mov	r1, r5
	if (pkt->slab == &rx_pkts) {
   214c6:	d103      	bne.n	214d0 <net_pkt_get_frag+0x34>
}
   214c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   214cc:	f7ff bfd6 	b.w	2147c <net_pkt_get_reserve_rx_data>
}
   214d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   214d4:	f7ff bfda 	b.w	2148c <net_pkt_get_reserve_tx_data>
   214d8:	2000d808 	.word	0x2000d808

000214dc <net_pkt_append_allocator>:
{
   214dc:	460b      	mov	r3, r1
	return net_pkt_get_frag((struct net_pkt *)user_data, timeout);
   214de:	4601      	mov	r1, r0
   214e0:	4618      	mov	r0, r3
   214e2:	f7ff bfdb 	b.w	2149c <net_pkt_get_frag>
	...

000214e8 <net_pkt_get_tx>:
{
   214e8:	b538      	push	{r3, r4, r5, lr}
   214ea:	460d      	mov	r5, r1
	NET_ASSERT_INFO(context, "TX context not set");
   214ec:	4604      	mov	r4, r0
   214ee:	b9a0      	cbnz	r0, 2151a <net_pkt_get_tx+0x32>
   214f0:	4b0f      	ldr	r3, [pc, #60]	; (21530 <net_pkt_get_tx+0x48>)
   214f2:	681b      	ldr	r3, [r3, #0]
   214f4:	075b      	lsls	r3, r3, #29
   214f6:	d010      	beq.n	2151a <net_pkt_get_tx+0x32>
   214f8:	2301      	movs	r3, #1
   214fa:	f04f 0200 	mov.w	r2, #0
   214fe:	f363 0202 	bfi	r2, r3, #0, #3
   21502:	490c      	ldr	r1, [pc, #48]	; (21534 <net_pkt_get_tx+0x4c>)
   21504:	4b0c      	ldr	r3, [pc, #48]	; (21538 <net_pkt_get_tx+0x50>)
   21506:	1a5b      	subs	r3, r3, r1
   21508:	f360 02c5 	bfi	r2, r0, #3, #3
   2150c:	08db      	lsrs	r3, r3, #3
   2150e:	f363 128f 	bfi	r2, r3, #6, #10
   21512:	490a      	ldr	r1, [pc, #40]	; (2153c <net_pkt_get_tx+0x54>)
   21514:	480a      	ldr	r0, [pc, #40]	; (21540 <net_pkt_get_tx+0x58>)
   21516:	f7e0 fc1f 	bl	1d58 <log_1>
	slab = get_tx_slab(context);
   2151a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if (context->tx_slab) {
   2151c:	b10b      	cbz	r3, 21522 <net_pkt_get_tx+0x3a>
		return context->tx_slab();
   2151e:	4798      	blx	r3
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   21520:	b900      	cbnz	r0, 21524 <net_pkt_get_tx+0x3c>
   21522:	4808      	ldr	r0, [pc, #32]	; (21544 <net_pkt_get_tx+0x5c>)
   21524:	462a      	mov	r2, r5
   21526:	4621      	mov	r1, r4
}
   21528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   2152c:	f7ff bf10 	b.w	21350 <net_pkt_get>
   21530:	2000d7b0 	.word	0x2000d7b0
   21534:	0002cff8 	.word	0x0002cff8
   21538:	0002d138 	.word	0x0002d138
   2153c:	000325f7 	.word	0x000325f7
   21540:	000326f5 	.word	0x000326f5
   21544:	2000d824 	.word	0x2000d824

00021548 <net_pkt_get_data>:
{
   21548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2154a:	460f      	mov	r7, r1
	NET_ASSERT_INFO(context, "Data context not set");
   2154c:	4604      	mov	r4, r0
   2154e:	b9a0      	cbnz	r0, 2157a <net_pkt_get_data+0x32>
   21550:	4b25      	ldr	r3, [pc, #148]	; (215e8 <net_pkt_get_data+0xa0>)
   21552:	681b      	ldr	r3, [r3, #0]
   21554:	075a      	lsls	r2, r3, #29
   21556:	d010      	beq.n	2157a <net_pkt_get_data+0x32>
   21558:	2301      	movs	r3, #1
   2155a:	f04f 0200 	mov.w	r2, #0
   2155e:	f363 0202 	bfi	r2, r3, #0, #3
   21562:	4922      	ldr	r1, [pc, #136]	; (215ec <net_pkt_get_data+0xa4>)
   21564:	4b22      	ldr	r3, [pc, #136]	; (215f0 <net_pkt_get_data+0xa8>)
   21566:	1a5b      	subs	r3, r3, r1
   21568:	f360 02c5 	bfi	r2, r0, #3, #3
   2156c:	08db      	lsrs	r3, r3, #3
   2156e:	f363 128f 	bfi	r2, r3, #6, #10
   21572:	4920      	ldr	r1, [pc, #128]	; (215f4 <net_pkt_get_data+0xac>)
   21574:	4820      	ldr	r0, [pc, #128]	; (215f8 <net_pkt_get_data+0xb0>)
   21576:	f7e0 fbef 	bl	1d58 <log_1>
	pool = get_data_pool(context);
   2157a:	6c23      	ldr	r3, [r4, #64]	; 0x40
	if (context->data_pool) {
   2157c:	b113      	cbz	r3, 21584 <net_pkt_get_data+0x3c>
		return context->data_pool();
   2157e:	4798      	blx	r3
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   21580:	4606      	mov	r6, r0
   21582:	b900      	cbnz	r0, 21586 <net_pkt_get_data+0x3e>
   21584:	4e1d      	ldr	r6, [pc, #116]	; (215fc <net_pkt_get_data+0xb4>)
	iface = net_context_get_iface(context);
   21586:	4620      	mov	r0, r4
   21588:	f7ff fe30 	bl	211ec <net_context_get_iface>
	if (!iface) {
   2158c:	4605      	mov	r5, r0
   2158e:	b9b0      	cbnz	r0, 215be <net_pkt_get_data+0x76>
		NET_ERR("Context has no interface");
   21590:	4b15      	ldr	r3, [pc, #84]	; (215e8 <net_pkt_get_data+0xa0>)
   21592:	681b      	ldr	r3, [r3, #0]
   21594:	075b      	lsls	r3, r3, #29
   21596:	d010      	beq.n	215ba <net_pkt_get_data+0x72>
   21598:	2301      	movs	r3, #1
   2159a:	f04f 0200 	mov.w	r2, #0
   2159e:	f363 0202 	bfi	r2, r3, #0, #3
   215a2:	4912      	ldr	r1, [pc, #72]	; (215ec <net_pkt_get_data+0xa4>)
   215a4:	4b12      	ldr	r3, [pc, #72]	; (215f0 <net_pkt_get_data+0xa8>)
   215a6:	4816      	ldr	r0, [pc, #88]	; (21600 <net_pkt_get_data+0xb8>)
   215a8:	1a5b      	subs	r3, r3, r1
   215aa:	f365 02c5 	bfi	r2, r5, #3, #3
   215ae:	08db      	lsrs	r3, r3, #3
   215b0:	f363 128f 	bfi	r2, r3, #6, #10
   215b4:	4913      	ldr	r1, [pc, #76]	; (21604 <net_pkt_get_data+0xbc>)
   215b6:	f7e0 fbcf 	bl	1d58 <log_1>
}
   215ba:	2000      	movs	r0, #0
   215bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (net_context_get_family(context) == AF_INET6) {
   215be:	4620      	mov	r0, r4
   215c0:	f7ff fdea 	bl	21198 <net_context_get_family>
	return iface->if_dev->l2;
   215c4:	682b      	ldr	r3, [r5, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   215c6:	685b      	ldr	r3, [r3, #4]
   215c8:	280a      	cmp	r0, #10
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   215ca:	bf0c      	ite	eq
   215cc:	f104 0118 	addeq.w	r1, r4, #24
	struct in6_addr *addr6 = NULL;
   215d0:	2100      	movne	r1, #0
   215d2:	689b      	ldr	r3, [r3, #8]
   215d4:	4628      	mov	r0, r5
   215d6:	4798      	blx	r3
	frag = net_pkt_get_reserve_data(pool,
   215d8:	463a      	mov	r2, r7
   215da:	4601      	mov	r1, r0
   215dc:	4630      	mov	r0, r6
}
   215de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	frag = net_pkt_get_reserve_data(pool,
   215e2:	f7ff bf25 	b.w	21430 <net_pkt_get_reserve_data>
   215e6:	bf00      	nop
   215e8:	2000d7b0 	.word	0x2000d7b0
   215ec:	0002cff8 	.word	0x0002cff8
   215f0:	0002d138 	.word	0x0002d138
   215f4:	00032606 	.word	0x00032606
   215f8:	000326c1 	.word	0x000326c1
   215fc:	2000d9c8 	.word	0x2000d9c8
   21600:	000326a4 	.word	0x000326a4
   21604:	000325e9 	.word	0x000325e9

00021608 <net_pkt_ref>:
	if (!pkt) {
   21608:	b120      	cbz	r0, 21614 <net_pkt_ref+0xc>
	pkt->ref++;
   2160a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   2160e:	3301      	adds	r3, #1
   21610:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
   21614:	4770      	bx	lr

00021616 <net_pkt_frag_unref>:
	if (!frag) {
   21616:	b108      	cbz	r0, 2161c <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   21618:	f7fc bf1a 	b.w	1e450 <net_buf_unref>
}
   2161c:	4770      	bx	lr

0002161e <net_pkt_unref>:
{
   2161e:	b507      	push	{r0, r1, r2, lr}
   21620:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   21622:	b180      	cbz	r0, 21646 <net_pkt_unref+0x28>
	if (!pkt->ref) {
   21624:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   21628:	b16b      	cbz	r3, 21646 <net_pkt_unref+0x28>
	if (--pkt->ref > 0) {
   2162a:	3b01      	subs	r3, #1
   2162c:	b2db      	uxtb	r3, r3
   2162e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
   21632:	b943      	cbnz	r3, 21646 <net_pkt_unref+0x28>
	if (pkt->frags) {
   21634:	6940      	ldr	r0, [r0, #20]
   21636:	b108      	cbz	r0, 2163c <net_pkt_unref+0x1e>
		net_pkt_frag_unref(pkt->frags);
   21638:	f7ff ffed 	bl	21616 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   2163c:	9b01      	ldr	r3, [sp, #4]
   2163e:	a901      	add	r1, sp, #4
   21640:	6918      	ldr	r0, [r3, #16]
   21642:	f00a f98f 	bl	2b964 <k_mem_slab_free>
}
   21646:	b003      	add	sp, #12
   21648:	f85d fb04 	ldr.w	pc, [sp], #4

0002164c <net_pkt_frag_del>:
{
   2164c:	b510      	push	{r4, lr}
   2164e:	4604      	mov	r4, r0
   21650:	4608      	mov	r0, r1
	if (pkt->frags == frag && !parent) {
   21652:	6961      	ldr	r1, [r4, #20]
   21654:	4291      	cmp	r1, r2
   21656:	d104      	bne.n	21662 <net_pkt_frag_del+0x16>
   21658:	b918      	cbnz	r0, 21662 <net_pkt_frag_del+0x16>
		tmp = net_buf_frag_del(NULL, frag);
   2165a:	f7fc ff4b 	bl	1e4f4 <net_buf_frag_del>
		pkt->frags = tmp;
   2165e:	6160      	str	r0, [r4, #20]
}
   21660:	bd10      	pop	{r4, pc}
	return net_buf_frag_del(parent, frag);
   21662:	4611      	mov	r1, r2
}
   21664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_buf_frag_del(parent, frag);
   21668:	f7fc bf44 	b.w	1e4f4 <net_buf_frag_del>

0002166c <net_pkt_frag_add>:
	if (!pkt->frags) {
   2166c:	6943      	ldr	r3, [r0, #20]
{
   2166e:	b510      	push	{r4, lr}
   21670:	460c      	mov	r4, r1
	if (!pkt->frags) {
   21672:	b90b      	cbnz	r3, 21678 <net_pkt_frag_add+0xc>
		pkt->frags = frag;
   21674:	6141      	str	r1, [r0, #20]
}
   21676:	bd10      	pop	{r4, pc}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   21678:	4618      	mov	r0, r3
   2167a:	f7fc ff1b 	bl	1e4b4 <net_buf_frag_last>
   2167e:	4621      	mov	r1, r4
}
   21680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   21684:	f7fc bf1b 	b.w	1e4be <net_buf_frag_insert>

00021688 <check_and_create_data.part.23>:
static inline struct net_buf *check_and_create_data(struct net_pkt *pkt,
   21688:	b538      	push	{r3, r4, r5, lr}
   2168a:	4605      	mov	r5, r0
	frag = net_pkt_get_frag(pkt, timeout);
   2168c:	f7ff ff06 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   21690:	4604      	mov	r4, r0
   21692:	b118      	cbz	r0, 2169c <check_and_create_data.part.23+0x14>
	net_pkt_frag_add(pkt, frag);
   21694:	4601      	mov	r1, r0
   21696:	4628      	mov	r0, r5
   21698:	f7ff ffe8 	bl	2166c <net_pkt_frag_add>
}
   2169c:	4620      	mov	r0, r4
   2169e:	bd38      	pop	{r3, r4, r5, pc}

000216a0 <net_pkt_frag_insert>:
{
   216a0:	b538      	push	{r3, r4, r5, lr}
   216a2:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
   216a4:	4608      	mov	r0, r1
{
   216a6:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
   216a8:	f7fc ff04 	bl	1e4b4 <net_buf_frag_last>
   216ac:	6963      	ldr	r3, [r4, #20]
   216ae:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   216b0:	6165      	str	r5, [r4, #20]
}
   216b2:	bd38      	pop	{r3, r4, r5, pc}

000216b4 <net_pkt_copy>:
{
   216b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216b8:	b087      	sub	sp, #28
   216ba:	460f      	mov	r7, r1
   216bc:	9304      	str	r3, [sp, #16]
	frag = net_pkt_get_frag(pkt, timeout);
   216be:	9904      	ldr	r1, [sp, #16]
{
   216c0:	9003      	str	r0, [sp, #12]
   216c2:	4616      	mov	r6, r2
	orig = pkt->frags;
   216c4:	6945      	ldr	r5, [r0, #20]
	frag = net_pkt_get_frag(pkt, timeout);
   216c6:	f7ff fee9 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   216ca:	4604      	mov	r4, r0
   216cc:	b330      	cbz	r0, 2171c <net_pkt_copy+0x68>
	if (reserve > net_buf_tailroom(frag)) {
   216ce:	f100 0808 	add.w	r8, r0, #8
   216d2:	4640      	mov	r0, r8
   216d4:	f7fc ff86 	bl	1e5e4 <net_buf_simple_tailroom>
   216d8:	42b0      	cmp	r0, r6
   216da:	d223      	bcs.n	21724 <net_pkt_copy+0x70>
		NET_ERR("Reserve %zu is too long, max is %zu",
   216dc:	4b37      	ldr	r3, [pc, #220]	; (217bc <net_pkt_copy+0x108>)
   216de:	681b      	ldr	r3, [r3, #0]
   216e0:	075b      	lsls	r3, r3, #29
   216e2:	d017      	beq.n	21714 <net_pkt_copy+0x60>
   216e4:	2301      	movs	r3, #1
   216e6:	f04f 0500 	mov.w	r5, #0
   216ea:	4a35      	ldr	r2, [pc, #212]	; (217c0 <net_pkt_copy+0x10c>)
   216ec:	f363 0502 	bfi	r5, r3, #0, #3
   216f0:	4b34      	ldr	r3, [pc, #208]	; (217c4 <net_pkt_copy+0x110>)
   216f2:	1a9b      	subs	r3, r3, r2
   216f4:	08db      	lsrs	r3, r3, #3
   216f6:	f36f 05c5 	bfc	r5, #3, #3
   216fa:	4640      	mov	r0, r8
   216fc:	f363 158f 	bfi	r5, r3, #6, #10
   21700:	f7fc ff70 	bl	1e5e4 <net_buf_simple_tailroom>
   21704:	f8ad 5000 	strh.w	r5, [sp]
   21708:	4603      	mov	r3, r0
   2170a:	4632      	mov	r2, r6
   2170c:	492e      	ldr	r1, [pc, #184]	; (217c8 <net_pkt_copy+0x114>)
   2170e:	482f      	ldr	r0, [pc, #188]	; (217cc <net_pkt_copy+0x118>)
   21710:	f7e0 fb4e 	bl	1db0 <log_3>
		net_pkt_frag_unref(frag);
   21714:	4620      	mov	r0, r4
   21716:	f7ff ff7e 	bl	21616 <net_pkt_frag_unref>
		return NULL;
   2171a:	2400      	movs	r4, #0
}
   2171c:	4620      	mov	r0, r4
   2171e:	b007      	add	sp, #28
   21720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_add(frag, reserve);
   21724:	4631      	mov	r1, r6
   21726:	4640      	mov	r0, r8
   21728:	f7fc fef0 	bl	1e50c <net_buf_simple_add>
	if (!orig->len) {
   2172c:	89ae      	ldrh	r6, [r5, #12]
   2172e:	2e00      	cmp	r6, #0
   21730:	d0f4      	beq.n	2171c <net_pkt_copy+0x68>
	orig_data = orig->data;
   21732:	f8d5 9008 	ldr.w	r9, [r5, #8]
   21736:	46a3      	mov	fp, r4
	while (orig && amount) {
   21738:	2f00      	cmp	r7, #0
   2173a:	d0ef      	beq.n	2171c <net_pkt_copy+0x68>
		int left_len = net_buf_tailroom(frag);
   2173c:	f10b 0308 	add.w	r3, fp, #8
   21740:	4618      	mov	r0, r3
   21742:	9305      	str	r3, [sp, #20]
   21744:	f7fc ff4e 	bl	1e5e4 <net_buf_simple_tailroom>
			copy_len = orig_len;
   21748:	42be      	cmp	r6, r7
   2174a:	46b2      	mov	sl, r6
   2174c:	bf28      	it	cs
   2174e:	46ba      	movcs	sl, r7
		if ((copy_len - left_len) >= 0) {
   21750:	ebaa 0200 	sub.w	r2, sl, r0
   21754:	2a00      	cmp	r2, #0
		int left_len = net_buf_tailroom(frag);
   21756:	4680      	mov	r8, r0
		if ((copy_len - left_len) >= 0) {
   21758:	9b05      	ldr	r3, [sp, #20]
   2175a:	db1d      	blt.n	21798 <net_pkt_copy+0xe4>
			memcpy(net_buf_add(frag, left_len), orig_data,
   2175c:	4601      	mov	r1, r0
			amount -= left_len;
   2175e:	1a3f      	subs	r7, r7, r0
			memcpy(net_buf_add(frag, left_len), orig_data,
   21760:	4618      	mov	r0, r3
   21762:	f7fc fed3 	bl	1e50c <net_buf_simple_add>
   21766:	4642      	mov	r2, r8
   21768:	4649      	mov	r1, r9
   2176a:	f7e4 fb8d 	bl	5e88 <memcpy>
			if (!net_buf_tailroom(frag)) {
   2176e:	9b05      	ldr	r3, [sp, #20]
   21770:	4618      	mov	r0, r3
   21772:	f7fc ff37 	bl	1e5e4 <net_buf_simple_tailroom>
   21776:	b958      	cbnz	r0, 21790 <net_pkt_copy+0xdc>
				struct net_buf *new_frag =
   21778:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   2177c:	f7ff fe8e 	bl	2149c <net_pkt_get_frag>
				if (!new_frag) {
   21780:	4682      	mov	sl, r0
   21782:	2800      	cmp	r0, #0
   21784:	d0c6      	beq.n	21714 <net_pkt_copy+0x60>
				net_buf_frag_add(frag, new_frag);
   21786:	4601      	mov	r1, r0
   21788:	4658      	mov	r0, fp
   2178a:	f7fc fea3 	bl	1e4d4 <net_buf_frag_add>
   2178e:	46d3      	mov	fp, sl
			orig_len -= left_len;
   21790:	eba6 0608 	sub.w	r6, r6, r8
			orig_data += left_len;
   21794:	44c1      	add	r9, r8
   21796:	e7cf      	b.n	21738 <net_pkt_copy+0x84>
			memcpy(net_buf_add(frag, copy_len), orig_data,
   21798:	4651      	mov	r1, sl
   2179a:	4618      	mov	r0, r3
   2179c:	f7fc feb6 	bl	1e50c <net_buf_simple_add>
   217a0:	4652      	mov	r2, sl
   217a2:	4649      	mov	r1, r9
   217a4:	f7e4 fb70 	bl	5e88 <memcpy>
		orig = orig->frags;
   217a8:	682d      	ldr	r5, [r5, #0]
		if (orig) {
   217aa:	2d00      	cmp	r5, #0
   217ac:	d0b6      	beq.n	2171c <net_pkt_copy+0x68>
			amount -= copy_len;
   217ae:	eba7 070a 	sub.w	r7, r7, sl
			orig_len = orig->len;
   217b2:	89ae      	ldrh	r6, [r5, #12]
			orig_data = orig->data;
   217b4:	f8d5 9008 	ldr.w	r9, [r5, #8]
   217b8:	e7be      	b.n	21738 <net_pkt_copy+0x84>
   217ba:	bf00      	nop
   217bc:	2000d7b0 	.word	0x2000d7b0
   217c0:	0002cff8 	.word	0x0002cff8
   217c4:	0002d138 	.word	0x0002d138
   217c8:	00032617 	.word	0x00032617
   217cc:	0003267c 	.word	0x0003267c

000217d0 <net_pkt_compact>:
{
   217d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	frag = pkt->frags;
   217d4:	6944      	ldr	r4, [r0, #20]
{
   217d6:	4607      	mov	r7, r0
	prev = NULL;
   217d8:	f04f 0800 	mov.w	r8, #0
	while (frag) {
   217dc:	2c00      	cmp	r4, #0
   217de:	d035      	beq.n	2184c <net_pkt_compact+0x7c>
		if (frag->frags) {
   217e0:	6823      	ldr	r3, [r4, #0]
   217e2:	b363      	cbz	r3, 2183e <net_pkt_compact+0x6e>
			if (copy_len > net_buf_tailroom(frag)) {
   217e4:	f104 0608 	add.w	r6, r4, #8
   217e8:	4630      	mov	r0, r6
			copy_len = frag->frags->len;
   217ea:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   217ec:	f7fc fefa 	bl	1e5e4 <net_buf_simple_tailroom>
   217f0:	42a8      	cmp	r0, r5
   217f2:	d203      	bcs.n	217fc <net_pkt_compact+0x2c>
				copy_len = net_buf_tailroom(frag);
   217f4:	4630      	mov	r0, r6
   217f6:	f7fc fef5 	bl	1e5e4 <net_buf_simple_tailroom>
   217fa:	4605      	mov	r5, r0
	return buf->data + buf->len;
   217fc:	68a3      	ldr	r3, [r4, #8]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   217fe:	6821      	ldr	r1, [r4, #0]
   21800:	89a0      	ldrh	r0, [r4, #12]
   21802:	6889      	ldr	r1, [r1, #8]
   21804:	462a      	mov	r2, r5
   21806:	4418      	add	r0, r3
   21808:	f7e4 fb3e 	bl	5e88 <memcpy>
			net_buf_add(frag, copy_len);
   2180c:	4629      	mov	r1, r5
   2180e:	4630      	mov	r0, r6
   21810:	f7fc fe7c 	bl	1e50c <net_buf_simple_add>
			memmove(frag->frags->data,
   21814:	6823      	ldr	r3, [r4, #0]
   21816:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   21818:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   2181a:	1941      	adds	r1, r0, r5
   2181c:	1b52      	subs	r2, r2, r5
   2181e:	f7e4 fb1c 	bl	5e5a <memmove>
			frag->frags->len -= copy_len;
   21822:	6822      	ldr	r2, [r4, #0]
   21824:	8993      	ldrh	r3, [r2, #12]
   21826:	1b5d      	subs	r5, r3, r5
   21828:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   2182a:	4630      	mov	r0, r6
   2182c:	f7fc feda 	bl	1e5e4 <net_buf_simple_tailroom>
   21830:	b178      	cbz	r0, 21852 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, frag, frag->frags);
   21832:	6822      	ldr	r2, [r4, #0]
   21834:	4621      	mov	r1, r4
   21836:	4638      	mov	r0, r7
   21838:	f7ff ff08 	bl	2164c <net_pkt_frag_del>
				continue;
   2183c:	e7ce      	b.n	217dc <net_pkt_compact+0xc>
			if (!frag->len) {
   2183e:	89a3      	ldrh	r3, [r4, #12]
   21840:	b93b      	cbnz	r3, 21852 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, prev, frag);
   21842:	4622      	mov	r2, r4
   21844:	4641      	mov	r1, r8
   21846:	4638      	mov	r0, r7
   21848:	f7ff ff00 	bl	2164c <net_pkt_frag_del>
}
   2184c:	2001      	movs	r0, #1
   2184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
   21852:	46a0      	mov	r8, r4
   21854:	6824      	ldr	r4, [r4, #0]
   21856:	e7c1      	b.n	217dc <net_pkt_compact+0xc>

00021858 <net_pkt_append>:
{
   21858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2185c:	460e      	mov	r6, r1
   2185e:	4617      	mov	r7, r2
   21860:	4698      	mov	r8, r3
	if (!pkt || !data || !len) {
   21862:	4604      	mov	r4, r0
   21864:	b918      	cbnz	r0, 2186e <net_pkt_append+0x16>
		return 0;
   21866:	2000      	movs	r0, #0
}
   21868:	b002      	add	sp, #8
   2186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!pkt || !data || !len) {
   2186e:	2a00      	cmp	r2, #0
   21870:	d0f9      	beq.n	21866 <net_pkt_append+0xe>
   21872:	2900      	cmp	r1, #0
   21874:	d0f7      	beq.n	21866 <net_pkt_append+0xe>
	if (!pkt->frags) {
   21876:	6943      	ldr	r3, [r0, #20]
   21878:	b943      	cbnz	r3, 2188c <net_pkt_append+0x34>
		frag = net_pkt_get_frag(pkt, timeout);
   2187a:	4641      	mov	r1, r8
   2187c:	f7ff fe0e 	bl	2149c <net_pkt_get_frag>
		if (!frag) {
   21880:	4601      	mov	r1, r0
   21882:	2800      	cmp	r0, #0
   21884:	d0ef      	beq.n	21866 <net_pkt_append+0xe>
		net_pkt_frag_add(pkt, frag);
   21886:	4620      	mov	r0, r4
   21888:	f7ff fef0 	bl	2166c <net_pkt_frag_add>
	if (pkt->slab != &rx_pkts) {
   2188c:	6922      	ldr	r2, [r4, #16]
   2188e:	4b12      	ldr	r3, [pc, #72]	; (218d8 <net_pkt_append+0x80>)
   21890:	429a      	cmp	r2, r3
   21892:	d01e      	beq.n	218d2 <net_pkt_append+0x7a>
		ctx = net_pkt_context(pkt);
   21894:	69a5      	ldr	r5, [r4, #24]
	if (ctx) {
   21896:	b155      	cbz	r5, 218ae <net_pkt_append+0x56>
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   21898:	6c6a      	ldr	r2, [r5, #68]	; 0x44
		max_len = pkt->data_len;
   2189a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   2189c:	b122      	cbz	r2, 218a8 <net_pkt_append+0x50>
   2189e:	f8b2 20ba 	ldrh.w	r2, [r2, #186]	; 0xba
   218a2:	4293      	cmp	r3, r2
   218a4:	bf28      	it	cs
   218a6:	4613      	movcs	r3, r2
   218a8:	429e      	cmp	r6, r3
   218aa:	bf28      	it	cs
   218ac:	461e      	movcs	r6, r3
	appended = net_buf_append_bytes(net_buf_frag_last(pkt->frags),
   218ae:	6960      	ldr	r0, [r4, #20]
   218b0:	f7fc fe00 	bl	1e4b4 <net_buf_frag_last>
   218b4:	4b09      	ldr	r3, [pc, #36]	; (218dc <net_pkt_append+0x84>)
   218b6:	9300      	str	r3, [sp, #0]
   218b8:	9401      	str	r4, [sp, #4]
   218ba:	4643      	mov	r3, r8
   218bc:	463a      	mov	r2, r7
   218be:	4631      	mov	r1, r6
   218c0:	f7fc fe98 	bl	1e5f4 <net_buf_append_bytes>
   218c4:	b280      	uxth	r0, r0
	if (ctx) {
   218c6:	2d00      	cmp	r5, #0
   218c8:	d0ce      	beq.n	21868 <net_pkt_append+0x10>
		pkt->data_len -= appended;
   218ca:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   218cc:	1a1b      	subs	r3, r3, r0
   218ce:	87a3      	strh	r3, [r4, #60]	; 0x3c
   218d0:	e7ca      	b.n	21868 <net_pkt_append+0x10>
	struct net_context *ctx = NULL;
   218d2:	2500      	movs	r5, #0
   218d4:	e7eb      	b.n	218ae <net_pkt_append+0x56>
   218d6:	bf00      	nop
   218d8:	2000d808 	.word	0x2000d808
   218dc:	000214dd 	.word	0x000214dd

000218e0 <net_frag_read>:
{
   218e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   218e2:	9d06      	ldr	r5, [sp, #24]
   218e4:	4614      	mov	r4, r2
	if (!frag) {
   218e6:	2800      	cmp	r0, #0
   218e8:	d03b      	beq.n	21962 <net_frag_read+0x82>
		if (offset < frag->len) {
   218ea:	8982      	ldrh	r2, [r0, #12]
   218ec:	428a      	cmp	r2, r1
   218ee:	d907      	bls.n	21900 <net_frag_read+0x20>
	u16_t copy = 0;
   218f0:	2200      	movs	r2, #0
			*pos = offset;
   218f2:	8021      	strh	r1, [r4, #0]
		*pos = 0;
   218f4:	4696      	mov	lr, r2
	while (len-- > 0 && frag) {
   218f6:	1e59      	subs	r1, r3, #1
   218f8:	b289      	uxth	r1, r1
   218fa:	b103      	cbz	r3, 218fe <net_frag_read+0x1e>
   218fc:	b920      	cbnz	r0, 21908 <net_frag_read+0x28>
}
   218fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		offset -= frag->len;
   21900:	1a89      	subs	r1, r1, r2
   21902:	b289      	uxth	r1, r1
		frag = frag->frags;
   21904:	6800      	ldr	r0, [r0, #0]
   21906:	e7ee      	b.n	218e6 <net_frag_read+0x6>
   21908:	f8b4 c000 	ldrh.w	ip, [r4]
   2190c:	f10c 0301 	add.w	r3, ip, #1
   21910:	b29b      	uxth	r3, r3
		if (data) {
   21912:	b35d      	cbz	r5, 2196c <net_frag_read+0x8c>
	if (data) {
   21914:	42d5      	cmn	r5, r2
		*data = frag->data[offset];
   21916:	bf1e      	ittt	ne
   21918:	6887      	ldrne	r7, [r0, #8]
   2191a:	f817 700c 	ldrbne.w	r7, [r7, ip]
   2191e:	54af      	strbne	r7, [r5, r2]
	*pos = offset + 1;
   21920:	8023      	strh	r3, [r4, #0]
						  pos, data + copy++);
   21922:	1c56      	adds	r6, r2, #1
	if (*pos >= frag->len) {
   21924:	8982      	ldrh	r2, [r0, #12]
   21926:	429a      	cmp	r2, r3
						  pos, data + copy++);
   21928:	b2b6      	uxth	r6, r6
	if (*pos >= frag->len) {
   2192a:	d826      	bhi.n	2197a <net_frag_read+0x9a>
		return frag->frags;
   2192c:	6800      	ldr	r0, [r0, #0]
		*pos = 0;
   2192e:	f8a4 e000 	strh.w	lr, [r4]
						  pos, data + copy++);
   21932:	4632      	mov	r2, r6
		if (!frag && len) {
   21934:	bb10      	cbnz	r0, 2197c <net_frag_read+0x9c>
   21936:	b309      	cbz	r1, 2197c <net_frag_read+0x9c>
			NET_ERR("Not enough data to read");
   21938:	4b11      	ldr	r3, [pc, #68]	; (21980 <net_frag_read+0xa0>)
   2193a:	681b      	ldr	r3, [r3, #0]
   2193c:	075b      	lsls	r3, r3, #29
   2193e:	d010      	beq.n	21962 <net_frag_read+0x82>
   21940:	2301      	movs	r3, #1
   21942:	f04f 0200 	mov.w	r2, #0
   21946:	f363 0202 	bfi	r2, r3, #0, #3
   2194a:	490e      	ldr	r1, [pc, #56]	; (21984 <net_frag_read+0xa4>)
   2194c:	4b0e      	ldr	r3, [pc, #56]	; (21988 <net_frag_read+0xa8>)
   2194e:	1a5b      	subs	r3, r3, r1
   21950:	f360 02c5 	bfi	r2, r0, #3, #3
   21954:	08db      	lsrs	r3, r3, #3
   21956:	f363 128f 	bfi	r2, r3, #6, #10
   2195a:	490c      	ldr	r1, [pc, #48]	; (2198c <net_frag_read+0xac>)
   2195c:	480c      	ldr	r0, [pc, #48]	; (21990 <net_frag_read+0xb0>)
   2195e:	f7e0 f9fb 	bl	1d58 <log_1>
	*pos = 0xffff;
   21962:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21966:	8023      	strh	r3, [r4, #0]
	return NULL;
   21968:	2000      	movs	r0, #0
   2196a:	e7c8      	b.n	218fe <net_frag_read+0x1e>
	*pos = offset + 1;
   2196c:	8023      	strh	r3, [r4, #0]
	if (*pos >= frag->len) {
   2196e:	8986      	ldrh	r6, [r0, #12]
   21970:	429e      	cmp	r6, r3
   21972:	d803      	bhi.n	2197c <net_frag_read+0x9c>
		*pos = 0;
   21974:	8025      	strh	r5, [r4, #0]
		return frag->frags;
   21976:	6800      	ldr	r0, [r0, #0]
   21978:	e7dc      	b.n	21934 <net_frag_read+0x54>
						  pos, data + copy++);
   2197a:	4632      	mov	r2, r6
   2197c:	460b      	mov	r3, r1
   2197e:	e7ba      	b.n	218f6 <net_frag_read+0x16>
   21980:	2000d7b0 	.word	0x2000d7b0
   21984:	0002cff8 	.word	0x0002cff8
   21988:	0002d138 	.word	0x0002d138
   2198c:	00032624 	.word	0x00032624
   21990:	00032660 	.word	0x00032660

00021994 <net_frag_read_be16>:
{
   21994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21996:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   21998:	ab03      	add	r3, sp, #12
   2199a:	9300      	str	r3, [sp, #0]
   2199c:	2302      	movs	r3, #2
   2199e:	f7ff ff9f 	bl	218e0 <net_frag_read>
	*value = v16[0] << 8 | v16[1];
   219a2:	f89d 200c 	ldrb.w	r2, [sp, #12]
   219a6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   219aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   219ae:	8023      	strh	r3, [r4, #0]
}
   219b0:	b004      	add	sp, #16
   219b2:	bd10      	pop	{r4, pc}

000219b4 <net_frag_read_be32>:
{
   219b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   219b6:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   219b8:	ab03      	add	r3, sp, #12
   219ba:	9300      	str	r3, [sp, #0]
   219bc:	2304      	movs	r3, #4
   219be:	f7ff ff8f 	bl	218e0 <net_frag_read>
   219c2:	9b03      	ldr	r3, [sp, #12]
   219c4:	ba1b      	rev	r3, r3
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   219c6:	6023      	str	r3, [r4, #0]
}
   219c8:	b004      	add	sp, #16
   219ca:	bd10      	pop	{r4, pc}

000219cc <net_pkt_write>:
{
   219cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219d0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   219d4:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   219d8:	460c      	mov	r4, r1
   219da:	4615      	mov	r5, r2
   219dc:	469a      	mov	sl, r3
	if (!pkt) {
   219de:	4607      	mov	r7, r0
   219e0:	2800      	cmp	r0, #0
   219e2:	d164      	bne.n	21aae <net_pkt_write+0xe2>
		NET_ERR("Invalid packet");
   219e4:	4b48      	ldr	r3, [pc, #288]	; (21b08 <net_pkt_write+0x13c>)
   219e6:	681b      	ldr	r3, [r3, #0]
   219e8:	075b      	lsls	r3, r3, #29
   219ea:	d010      	beq.n	21a0e <net_pkt_write+0x42>
   219ec:	2301      	movs	r3, #1
   219ee:	f04f 0200 	mov.w	r2, #0
   219f2:	f363 0202 	bfi	r2, r3, #0, #3
   219f6:	4945      	ldr	r1, [pc, #276]	; (21b0c <net_pkt_write+0x140>)
   219f8:	4b45      	ldr	r3, [pc, #276]	; (21b10 <net_pkt_write+0x144>)
   219fa:	1a5b      	subs	r3, r3, r1
   219fc:	f360 02c5 	bfi	r2, r0, #3, #3
   21a00:	08db      	lsrs	r3, r3, #3
   21a02:	f363 128f 	bfi	r2, r3, #6, #10
   21a06:	4943      	ldr	r1, [pc, #268]	; (21b14 <net_pkt_write+0x148>)
   21a08:	4843      	ldr	r0, [pc, #268]	; (21b18 <net_pkt_write+0x14c>)
   21a0a:	f7e0 f9a5 	bl	1d58 <log_1>
	*pos = 0xffff;
   21a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21a12:	f8aa 3000 	strh.w	r3, [sl]
	return NULL;
   21a16:	2400      	movs	r4, #0
   21a18:	e032      	b.n	21a80 <net_pkt_write+0xb4>
		if (offset > frag->len) {
   21a1a:	d248      	bcs.n	21aae <net_pkt_write+0xe2>
			tailroom = net_buf_tailroom(frag);
   21a1c:	f104 0b08 	add.w	fp, r4, #8
   21a20:	4658      	mov	r0, fp
			offset -= frag->len;
   21a22:	1aed      	subs	r5, r5, r3
			tailroom = net_buf_tailroom(frag);
   21a24:	f7fc fdde 	bl	1e5e4 <net_buf_simple_tailroom>
			offset -= frag->len;
   21a28:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   21a2a:	b286      	uxth	r6, r0
			if (offset < tailroom) {
   21a2c:	42b5      	cmp	r5, r6
   21a2e:	d22a      	bcs.n	21a86 <net_pkt_write+0xba>
				net_buf_add(frag, offset);
   21a30:	4629      	mov	r1, r5
   21a32:	4658      	mov	r0, fp
   21a34:	f7fc fd6a 	bl	1e50c <net_buf_simple_add>
				*pos = frag->len;
   21a38:	89a5      	ldrh	r5, [r4, #12]
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   21a3a:	89e6      	ldrh	r6, [r4, #14]
   21a3c:	f104 0b08 	add.w	fp, r4, #8
   21a40:	4658      	mov	r0, fp
   21a42:	f7fc fdcb 	bl	1e5dc <net_buf_simple_headroom>
   21a46:	1a36      	subs	r6, r6, r0
   21a48:	1b76      	subs	r6, r6, r5
		u16_t count = min(len, space);
   21a4a:	b2b6      	uxth	r6, r6
   21a4c:	4546      	cmp	r6, r8
		memcpy(frag->data + offset, data, count);
   21a4e:	68a0      	ldr	r0, [r4, #8]
		u16_t count = min(len, space);
   21a50:	bf28      	it	cs
   21a52:	4646      	movcs	r6, r8
		memcpy(frag->data + offset, data, count);
   21a54:	4649      	mov	r1, r9
   21a56:	4428      	add	r0, r5
   21a58:	4632      	mov	r2, r6
   21a5a:	f7e4 fa15 	bl	5e88 <memcpy>
		size_to_add = offset + count - frag->len;
   21a5e:	89a1      	ldrh	r1, [r4, #12]
   21a60:	4435      	add	r5, r6
   21a62:	1a69      	subs	r1, r5, r1
		if (size_to_add > 0) {
   21a64:	2900      	cmp	r1, #0
   21a66:	dd02      	ble.n	21a6e <net_pkt_write+0xa2>
			net_buf_add(frag, size_to_add);
   21a68:	4658      	mov	r0, fp
   21a6a:	f7fc fd4f 	bl	1e50c <net_buf_simple_add>
		len -= count;
   21a6e:	eba8 0806 	sub.w	r8, r8, r6
   21a72:	fa1f f888 	uxth.w	r8, r8
		if (len == 0) {
   21a76:	f1b8 0f00 	cmp.w	r8, #0
   21a7a:	d135      	bne.n	21ae8 <net_pkt_write+0x11c>
			*pos = offset + count;
   21a7c:	f8aa 5000 	strh.w	r5, [sl]
}
   21a80:	4620      	mov	r0, r4
   21a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (offset == tailroom) {
   21a86:	d104      	bne.n	21a92 <net_pkt_write+0xc6>
				net_buf_add(frag, tailroom);
   21a88:	b281      	uxth	r1, r0
   21a8a:	4658      	mov	r0, fp
   21a8c:	f7fc fd3e 	bl	1e50c <net_buf_simple_add>
   21a90:	e01f      	b.n	21ad2 <net_pkt_write+0x106>
			if (offset > tailroom) {
   21a92:	d90c      	bls.n	21aae <net_pkt_write+0xe2>
				net_buf_add(frag, tailroom);
   21a94:	b281      	uxth	r1, r0
   21a96:	4658      	mov	r0, fp
   21a98:	f7fc fd38 	bl	1e50c <net_buf_simple_add>
				frag = check_and_create_data(pkt,
   21a9c:	6824      	ldr	r4, [r4, #0]
				offset -= tailroom;
   21a9e:	1bad      	subs	r5, r5, r6
   21aa0:	b2ad      	uxth	r5, r5
	if (data) {
   21aa2:	b924      	cbnz	r4, 21aae <net_pkt_write+0xe2>
   21aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
   21aa6:	4638      	mov	r0, r7
   21aa8:	f7ff fdee 	bl	21688 <check_and_create_data.part.23>
   21aac:	4604      	mov	r4, r0
   21aae:	b934      	cbnz	r4, 21abe <net_pkt_write+0xf2>
   21ab0:	990c      	ldr	r1, [sp, #48]	; 0x30
   21ab2:	4638      	mov	r0, r7
   21ab4:	f7ff fde8 	bl	21688 <check_and_create_data.part.23>
		if (!frag) {
   21ab8:	4604      	mov	r4, r0
   21aba:	2800      	cmp	r0, #0
   21abc:	d0a7      	beq.n	21a0e <net_pkt_write+0x42>
		if (offset < frag->len) {
   21abe:	89a3      	ldrh	r3, [r4, #12]
   21ac0:	42ab      	cmp	r3, r5
   21ac2:	d8ba      	bhi.n	21a3a <net_pkt_write+0x6e>
		if (offset == frag->len) {
   21ac4:	d1a9      	bne.n	21a1a <net_pkt_write+0x4e>
			if (net_buf_tailroom(frag)) {
   21ac6:	f104 0008 	add.w	r0, r4, #8
   21aca:	f7fc fd8b 	bl	1e5e4 <net_buf_simple_tailroom>
   21ace:	2800      	cmp	r0, #0
   21ad0:	d1b3      	bne.n	21a3a <net_pkt_write+0x6e>
				return check_and_create_data(pkt,
   21ad2:	6824      	ldr	r4, [r4, #0]
	if (data) {
   21ad4:	b934      	cbnz	r4, 21ae4 <net_pkt_write+0x118>
   21ad6:	990c      	ldr	r1, [sp, #48]	; 0x30
   21ad8:	4638      	mov	r0, r7
   21ada:	f7ff fdd5 	bl	21688 <check_and_create_data.part.23>
   21ade:	4604      	mov	r4, r0
	if (!frag) {
   21ae0:	2800      	cmp	r0, #0
   21ae2:	d094      	beq.n	21a0e <net_pkt_write+0x42>
   21ae4:	2500      	movs	r5, #0
   21ae6:	e7a8      	b.n	21a3a <net_pkt_write+0x6e>
		frag = frag->frags;
   21ae8:	6824      	ldr	r4, [r4, #0]
		data += count;
   21aea:	44b1      	add	r9, r6
		if (!frag) {
   21aec:	2c00      	cmp	r4, #0
   21aee:	d1f9      	bne.n	21ae4 <net_pkt_write+0x118>
			frag = net_pkt_get_frag(pkt, timeout);
   21af0:	990c      	ldr	r1, [sp, #48]	; 0x30
   21af2:	4638      	mov	r0, r7
   21af4:	f7ff fcd2 	bl	2149c <net_pkt_get_frag>
			if (!frag) {
   21af8:	4604      	mov	r4, r0
   21afa:	2800      	cmp	r0, #0
   21afc:	d087      	beq.n	21a0e <net_pkt_write+0x42>
			net_pkt_frag_add(pkt, frag);
   21afe:	4601      	mov	r1, r0
   21b00:	4638      	mov	r0, r7
   21b02:	f7ff fdb3 	bl	2166c <net_pkt_frag_add>
   21b06:	e7ed      	b.n	21ae4 <net_pkt_write+0x118>
   21b08:	2000d7b0 	.word	0x2000d7b0
   21b0c:	0002cff8 	.word	0x0002cff8
   21b10:	0002d138 	.word	0x0002d138
   21b14:	00032632 	.word	0x00032632
   21b18:	00032799 	.word	0x00032799

00021b1c <net_pkt_get_info>:
{
   21b1c:	b510      	push	{r4, lr}
	if (rx) {
   21b1e:	b108      	cbz	r0, 21b24 <net_pkt_get_info+0x8>
		*rx = &rx_pkts;
   21b20:	4c05      	ldr	r4, [pc, #20]	; (21b38 <net_pkt_get_info+0x1c>)
   21b22:	6004      	str	r4, [r0, #0]
	if (tx) {
   21b24:	b109      	cbz	r1, 21b2a <net_pkt_get_info+0xe>
		*tx = &tx_pkts;
   21b26:	4805      	ldr	r0, [pc, #20]	; (21b3c <net_pkt_get_info+0x20>)
   21b28:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   21b2a:	b10a      	cbz	r2, 21b30 <net_pkt_get_info+0x14>
		*rx_data = &rx_bufs;
   21b2c:	4904      	ldr	r1, [pc, #16]	; (21b40 <net_pkt_get_info+0x24>)
   21b2e:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   21b30:	b10b      	cbz	r3, 21b36 <net_pkt_get_info+0x1a>
		*tx_data = &tx_bufs;
   21b32:	4a04      	ldr	r2, [pc, #16]	; (21b44 <net_pkt_get_info+0x28>)
   21b34:	601a      	str	r2, [r3, #0]
}
   21b36:	bd10      	pop	{r4, pc}
   21b38:	2000d808 	.word	0x2000d808
   21b3c:	2000d824 	.word	0x2000d824
   21b40:	2000d9a8 	.word	0x2000d9a8
   21b44:	2000d9c8 	.word	0x2000d9c8

00021b48 <net_pkt_get_src_addr>:
}

int net_pkt_get_src_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, true, addr, addrlen);
   21b48:	4613      	mov	r3, r2
   21b4a:	460a      	mov	r2, r1
   21b4c:	2101      	movs	r1, #1
   21b4e:	f7ff bb75 	b.w	2123c <net_pkt_get_addr>

00021b52 <net_pkt_get_dst_addr>:
}

int net_pkt_get_dst_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, false, addr, addrlen);
   21b52:	4613      	mov	r3, r2
   21b54:	460a      	mov	r2, r1
   21b56:	2100      	movs	r1, #0
   21b58:	f7ff bb70 	b.w	2123c <net_pkt_get_addr>

00021b5c <net_frag_get_pos>:
#endif /* CONFIG_NET_PKT_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   21b5c:	b507      	push	{r0, r1, r2, lr}
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   21b5e:	2300      	movs	r3, #0
   21b60:	9300      	str	r3, [sp, #0]
   21b62:	6940      	ldr	r0, [r0, #20]
   21b64:	f7ff febc 	bl	218e0 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   21b68:	b003      	add	sp, #12
   21b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00021b6e <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   21b6e:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
   21b70:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
				net_pkt_ip_hdr_len(pkt) +
   21b74:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   21b78:	4419      	add	r1, r3
   21b7a:	f10d 0206 	add.w	r2, sp, #6
   21b7e:	b289      	uxth	r1, r1
   21b80:	f7ff ffec 	bl	21b5c <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt),
				&offset);
	if (!frag) {
   21b84:	b118      	cbz	r0, 21b8e <net_pkt_icmp_data+0x20>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   21b86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   21b8a:	6880      	ldr	r0, [r0, #8]
   21b8c:	4418      	add	r0, r3
}
   21b8e:	b003      	add	sp, #12
   21b90:	f85d fb04 	ldr.w	pc, [sp], #4

00021b94 <net_pkt_udp_data>:

	return frag->data + offset;
}

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   21b94:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
   21b96:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
				net_pkt_ip_hdr_len(pkt) +
   21b9a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   21b9e:	4419      	add	r1, r3
   21ba0:	f10d 0206 	add.w	r2, sp, #6
   21ba4:	b289      	uxth	r1, r1
   21ba6:	f7ff ffd9 	bl	21b5c <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt),
				&offset);
	if (!frag) {
   21baa:	b118      	cbz	r0, 21bb4 <net_pkt_udp_data+0x20>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   21bac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   21bb0:	6880      	ldr	r0, [r0, #8]
   21bb2:	4418      	add	r0, r3
}
   21bb4:	b003      	add	sp, #12
   21bb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00021bbc <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   21bbc:	b513      	push	{r0, r1, r4, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
   21bbe:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
				net_pkt_ip_hdr_len(pkt) +
   21bc2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   21bc6:	4419      	add	r1, r3
   21bc8:	f10d 0206 	add.w	r2, sp, #6
   21bcc:	b289      	uxth	r1, r1
   21bce:	f7ff ffc5 	bl	21b5c <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt),
				&offset);
	if (!frag) {
   21bd2:	b1c0      	cbz	r0, 21c06 <net_pkt_tcp_data+0x4a>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	if (!frag->data) {
   21bd4:	6884      	ldr	r4, [r0, #8]
   21bd6:	b9c4      	cbnz	r4, 21c0a <net_pkt_tcp_data+0x4e>
		NET_ERR("NULL fragment data!");
   21bd8:	4b0e      	ldr	r3, [pc, #56]	; (21c14 <net_pkt_tcp_data+0x58>)
   21bda:	6818      	ldr	r0, [r3, #0]
   21bdc:	f010 0007 	ands.w	r0, r0, #7
   21be0:	d011      	beq.n	21c06 <net_pkt_tcp_data+0x4a>
   21be2:	2301      	movs	r3, #1
   21be4:	f04f 0200 	mov.w	r2, #0
   21be8:	f363 0202 	bfi	r2, r3, #0, #3
   21bec:	490a      	ldr	r1, [pc, #40]	; (21c18 <net_pkt_tcp_data+0x5c>)
   21bee:	4b0b      	ldr	r3, [pc, #44]	; (21c1c <net_pkt_tcp_data+0x60>)
   21bf0:	480b      	ldr	r0, [pc, #44]	; (21c20 <net_pkt_tcp_data+0x64>)
   21bf2:	1a5b      	subs	r3, r3, r1
   21bf4:	08db      	lsrs	r3, r3, #3
   21bf6:	f364 02c5 	bfi	r2, r4, #3, #3
   21bfa:	f363 128f 	bfi	r2, r3, #6, #10
   21bfe:	4909      	ldr	r1, [pc, #36]	; (21c24 <net_pkt_tcp_data+0x68>)
   21c00:	f7e0 f8aa 	bl	1d58 <log_1>
		return NULL;
   21c04:	4620      	mov	r0, r4
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
}
   21c06:	b002      	add	sp, #8
   21c08:	bd10      	pop	{r4, pc}
	return (struct net_tcp_hdr *)(frag->data + offset);
   21c0a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   21c0e:	4420      	add	r0, r4
   21c10:	e7f9      	b.n	21c06 <net_pkt_tcp_data+0x4a>
   21c12:	bf00      	nop
   21c14:	2000d7b0 	.word	0x2000d7b0
   21c18:	0002cff8 	.word	0x0002cff8
   21c1c:	0002d138 	.word	0x0002d138
   21c20:	00032781 	.word	0x00032781
   21c24:	00032584 	.word	0x00032584

00021c28 <net_pkt_set_appdata_values>:

void net_pkt_set_appdata_values(struct net_pkt *pkt,
				    enum net_ip_protocol proto)
{
   21c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	size_t total_len = net_pkt_get_len(pkt);
   21c2a:	6943      	ldr	r3, [r0, #20]
{
   21c2c:	4604      	mov	r4, r0
	size_t bytes = 0;
   21c2e:	2500      	movs	r5, #0
	while (buf) {
   21c30:	b92b      	cbnz	r3, 21c3e <net_pkt_set_appdata_values+0x16>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

	switch (proto) {
   21c32:	2906      	cmp	r1, #6
   21c34:	d007      	beq.n	21c46 <net_pkt_set_appdata_values+0x1e>
   21c36:	2911      	cmp	r1, #17
   21c38:	d03f      	beq.n	21cba <net_pkt_set_appdata_values+0x92>
			       net_pkt_ipv6_ext_len(pkt) - proto_len);

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   21c3a:	b004      	add	sp, #16
   21c3c:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   21c3e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   21c40:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   21c42:	4415      	add	r5, r2
   21c44:	e7f4      	b.n	21c30 <net_pkt_set_appdata_values+0x8>
		proto_len = tcp_hdr_len(pkt);
   21c46:	4620      	mov	r0, r4
   21c48:	f008 f92e 	bl	29ea8 <tcp_hdr_len>
   21c4c:	b286      	uxth	r6, r0
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   21c4e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   21c52:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   21c56:	4419      	add	r1, r3
   21c58:	4431      	add	r1, r6
   21c5a:	f10d 020e 	add.w	r2, sp, #14
   21c5e:	b289      	uxth	r1, r1
   21c60:	4620      	mov	r0, r4
   21c62:	f7ff ff7b 	bl	21b5c <net_frag_get_pos>
	if (frag) {
   21c66:	b120      	cbz	r0, 21c72 <net_pkt_set_appdata_values+0x4a>
		net_pkt_set_appdata(pkt, frag->data + offset);
   21c68:	6883      	ldr	r3, [r0, #8]
   21c6a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   21c6e:	4413      	add	r3, r2
	pkt->appdata = data;
   21c70:	6263      	str	r3, [r4, #36]	; 0x24
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   21c72:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   21c76:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   21c7a:	1aaa      	subs	r2, r5, r2
   21c7c:	1ad2      	subs	r2, r2, r3
   21c7e:	1b92      	subs	r2, r2, r6
   21c80:	b292      	uxth	r2, r2
	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
   21c82:	42aa      	cmp	r2, r5
	pkt->appdatalen = len;
   21c84:	87e2      	strh	r2, [r4, #62]	; 0x3e
   21c86:	d3d8      	bcc.n	21c3a <net_pkt_set_appdata_values+0x12>
   21c88:	4b0d      	ldr	r3, [pc, #52]	; (21cc0 <net_pkt_set_appdata_values+0x98>)
   21c8a:	681b      	ldr	r3, [r3, #0]
   21c8c:	075b      	lsls	r3, r3, #29
   21c8e:	d0d4      	beq.n	21c3a <net_pkt_set_appdata_values+0x12>
   21c90:	2301      	movs	r3, #1
   21c92:	f04f 0100 	mov.w	r1, #0
   21c96:	f363 0102 	bfi	r1, r3, #0, #3
   21c9a:	480a      	ldr	r0, [pc, #40]	; (21cc4 <net_pkt_set_appdata_values+0x9c>)
   21c9c:	4b0a      	ldr	r3, [pc, #40]	; (21cc8 <net_pkt_set_appdata_values+0xa0>)
   21c9e:	1a1b      	subs	r3, r3, r0
   21ca0:	08db      	lsrs	r3, r3, #3
   21ca2:	f36f 01c5 	bfc	r1, #3, #3
   21ca6:	f363 118f 	bfi	r1, r3, #6, #10
   21caa:	f8ad 1000 	strh.w	r1, [sp]
   21cae:	462b      	mov	r3, r5
   21cb0:	4906      	ldr	r1, [pc, #24]	; (21ccc <net_pkt_set_appdata_values+0xa4>)
   21cb2:	4807      	ldr	r0, [pc, #28]	; (21cd0 <net_pkt_set_appdata_values+0xa8>)
   21cb4:	f7e0 f87c 	bl	1db0 <log_3>
   21cb8:	e7bf      	b.n	21c3a <net_pkt_set_appdata_values+0x12>
		proto_len = sizeof(struct net_udp_hdr);
   21cba:	2608      	movs	r6, #8
   21cbc:	e7c7      	b.n	21c4e <net_pkt_set_appdata_values+0x26>
   21cbe:	bf00      	nop
   21cc0:	2000d7b0 	.word	0x2000d7b0
   21cc4:	0002cff8 	.word	0x0002cff8
   21cc8:	0002d138 	.word	0x0002d138
   21ccc:	00032595 	.word	0x00032595
   21cd0:	00032727 	.word	0x00032727

00021cd4 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   21cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21cd6:	460f      	mov	r7, r1
	struct net_pkt *clone;

	if (!pkt) {
   21cd8:	4605      	mov	r5, r0
   21cda:	b910      	cbnz	r0, 21ce2 <net_pkt_clone+0xe>
		return NULL;
   21cdc:	2400      	movs	r4, #0
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   21cde:	4620      	mov	r0, r4
   21ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   21ce2:	460a      	mov	r2, r1
   21ce4:	6900      	ldr	r0, [r0, #16]
   21ce6:	2100      	movs	r1, #0
   21ce8:	f7ff fb12 	bl	21310 <net_pkt_get_reserve>
	if (!clone) {
   21cec:	4604      	mov	r4, r0
   21cee:	2800      	cmp	r0, #0
   21cf0:	d0f4      	beq.n	21cdc <net_pkt_clone+0x8>
	clone->frags = NULL;
   21cf2:	2100      	movs	r1, #0
   21cf4:	6141      	str	r1, [r0, #20]
	if (pkt->frags) {
   21cf6:	696e      	ldr	r6, [r5, #20]
   21cf8:	b17e      	cbz	r6, 21d1a <net_pkt_clone+0x46>
   21cfa:	89b3      	ldrh	r3, [r6, #12]
		buf = buf->frags;
   21cfc:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   21cfe:	4419      	add	r1, r3
	while (buf) {
   21d00:	2e00      	cmp	r6, #0
   21d02:	d1fa      	bne.n	21cfa <net_pkt_clone+0x26>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   21d04:	463b      	mov	r3, r7
   21d06:	4632      	mov	r2, r6
   21d08:	4628      	mov	r0, r5
   21d0a:	f7ff fcd3 	bl	216b4 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   21d0e:	6160      	str	r0, [r4, #20]
		if (!clone->frags) {
   21d10:	b918      	cbnz	r0, 21d1a <net_pkt_clone+0x46>
			net_pkt_unref(clone);
   21d12:	4620      	mov	r0, r4
   21d14:	f7ff fc83 	bl	2161e <net_pkt_unref>
   21d18:	e7e0      	b.n	21cdc <net_pkt_clone+0x8>
	clone->context = pkt->context;
   21d1a:	69ab      	ldr	r3, [r5, #24]
   21d1c:	61a3      	str	r3, [r4, #24]
	clone->token = pkt->token;
   21d1e:	69eb      	ldr	r3, [r5, #28]
   21d20:	61e3      	str	r3, [r4, #28]
	clone->iface = pkt->iface;
   21d22:	6a2b      	ldr	r3, [r5, #32]
   21d24:	6223      	str	r3, [r4, #32]
	if (clone->frags) {
   21d26:	6963      	ldr	r3, [r4, #20]
   21d28:	b16b      	cbz	r3, 21d46 <net_pkt_clone+0x72>
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   21d2a:	2208      	movs	r2, #8
   21d2c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   21d30:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   21d34:	f7e4 f8a8 	bl	5e88 <memcpy>
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   21d38:	2208      	movs	r2, #8
   21d3a:	f105 0134 	add.w	r1, r5, #52	; 0x34
   21d3e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   21d42:	f7e4 f8a1 	bl	5e88 <memcpy>
	pkt->next_hdr = hdr;
   21d46:	2300      	movs	r3, #0
   21d48:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));
   21d4a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
	pkt->ip_hdr_len = len;
   21d4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_set_appdatalen(clone, net_pkt_appdatalen(pkt));
   21d52:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	pkt->appdatalen = len;
   21d54:	87e3      	strh	r3, [r4, #62]	; 0x3e
	return pkt->family;
   21d56:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
	pkt->family = family;
   21d5a:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
	return pkt->family;
   21d5e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   21d62:	f363 02c6 	bfi	r2, r3, #3, #4
   21d66:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   21d6a:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   21d6e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   21d72:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   21d76:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   21d7a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
   21d7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   21d82:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
   21d86:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	return clone;
   21d8a:	e7a8      	b.n	21cde <net_pkt_clone+0xa>

00021d8c <net_pkt_init>:
			 sizeof(struct net_pkt)));
	NET_DBG("  %d RX data (%u bytes) and %d TX data (%u bytes) buffers",
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   21d8c:	4770      	bx	lr

00021d8e <k_work_submit_to_queue>:
{
   21d8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21d90:	f101 0308 	add.w	r3, r1, #8
   21d94:	f3bf 8f5b 	dmb	ish
   21d98:	e853 2f00 	ldrex	r2, [r3]
   21d9c:	f042 0c01 	orr.w	ip, r2, #1
   21da0:	e843 ce00 	strex	lr, ip, [r3]
   21da4:	f1be 0f00 	cmp.w	lr, #0
   21da8:	d1f6      	bne.n	21d98 <k_work_submit_to_queue+0xa>
   21daa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   21dae:	07d3      	lsls	r3, r2, #31
   21db0:	d403      	bmi.n	21dba <k_work_submit_to_queue+0x2c>
}
   21db2:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   21db6:	f009 bfc3 	b.w	2bd40 <k_queue_append>
}
   21dba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00021dc0 <net_tc_submit_to_tx_queue>:
static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

void net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   21dc0:	4b03      	ldr	r3, [pc, #12]	; (21dd0 <net_tc_submit_to_tx_queue+0x10>)
   21dc2:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   21dc6:	3104      	adds	r1, #4
   21dc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21dcc:	f7ff bfdf 	b.w	21d8e <k_work_submit_to_queue>
   21dd0:	20002554 	.word	0x20002554

00021dd4 <net_tc_submit_to_rx_queue>:
}

void net_tc_submit_to_rx_queue(u8_t tc, struct net_pkt *pkt)
{
	k_work_submit_to_queue(&rx_classes[tc].work_q, net_pkt_work(pkt));
   21dd4:	4b03      	ldr	r3, [pc, #12]	; (21de4 <net_tc_submit_to_rx_queue+0x10>)
   21dd6:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   21dda:	3104      	adds	r1, #4
   21ddc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21de0:	f7ff bfd5 	b.w	21d8e <k_work_submit_to_queue>
   21de4:	200024d0 	.word	0x200024d0

00021de8 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   21de8:	2807      	cmp	r0, #7
   21dea:	bf88      	it	hi
   21dec:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   21dee:	4b01      	ldr	r3, [pc, #4]	; (21df4 <net_tx_priority2tc+0xc>)
   21df0:	5c18      	ldrb	r0, [r3, r0]
   21df2:	4770      	bx	lr
   21df4:	000327c6 	.word	0x000327c6

00021df8 <net_rx_priority2tc>:
   21df8:	f7ff bff6 	b.w	21de8 <net_tx_priority2tc>

00021dfc <net_tc_tx_init>:
/* Create workqueue for each traffic class we are using. All the network
 * traffic goes through these classes. There needs to be at least one traffic
 * class in the system.
 */
void net_tc_tx_init(void)
{
   21dfc:	b510      	push	{r4, lr}

#if defined(CONFIG_NET_SHELL)
		/* Fix the thread start address so that "net stacks"
		 * command will print correct stack information.
		 */
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].stack = tx_stack[i];
   21dfe:	4b0c      	ldr	r3, [pc, #48]	; (21e30 <net_tc_tx_init+0x34>)
		tx_classes[i].tc = thread_priority;
   21e00:	4c0c      	ldr	r4, [pc, #48]	; (21e34 <net_tc_tx_init+0x38>)
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].stack = tx_stack[i];
   21e02:	490d      	ldr	r1, [pc, #52]	; (21e38 <net_tc_tx_init+0x3c>)
   21e04:	6019      	str	r1, [r3, #0]
		tx_classes[i].tc = thread_priority;
   21e06:	2207      	movs	r2, #7
   21e08:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].prio = thread_priority;
   21e0c:	615a      	str	r2, [r3, #20]
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].idx = i;
   21e0e:	2200      	movs	r2, #0
   21e10:	619a      	str	r2, [r3, #24]
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   21e12:	4620      	mov	r0, r4
   21e14:	f06f 0308 	mvn.w	r3, #8
   21e18:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   21e1c:	f00a fc54 	bl	2c6c8 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   21e20:	f104 0010 	add.w	r0, r4, #16
   21e24:	4905      	ldr	r1, [pc, #20]	; (21e3c <net_tc_tx_init+0x40>)
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   21e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21e2a:	f00a bb47 	b.w	2c4bc <_impl_k_thread_name_set>
   21e2e:	bf00      	nop
   21e30:	2000da40 	.word	0x2000da40
   21e34:	20002554 	.word	0x20002554
   21e38:	2000a9b0 	.word	0x2000a9b0
   21e3c:	000327bd 	.word	0x000327bd

00021e40 <net_tc_rx_init>:

void net_tc_rx_init(void)
{
   21e40:	b510      	push	{r4, lr}

#if defined(CONFIG_NET_SHELL)
		/* Fix the thread start address so that "net stacks"
		 * command will print correct stack information.
		 */
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].stack = rx_stack[i];
   21e42:	4b0c      	ldr	r3, [pc, #48]	; (21e74 <net_tc_rx_init+0x34>)
		rx_classes[i].tc = thread_priority;
   21e44:	4c0c      	ldr	r4, [pc, #48]	; (21e78 <net_tc_rx_init+0x38>)
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].stack = rx_stack[i];
   21e46:	490d      	ldr	r1, [pc, #52]	; (21e7c <net_tc_rx_init+0x3c>)
   21e48:	6219      	str	r1, [r3, #32]
		rx_classes[i].tc = thread_priority;
   21e4a:	2207      	movs	r2, #7
   21e4c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].prio = thread_priority;
   21e50:	635a      	str	r2, [r3, #52]	; 0x34
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].idx = i;
   21e52:	2200      	movs	r2, #0
   21e54:	639a      	str	r2, [r3, #56]	; 0x38
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   21e56:	4620      	mov	r0, r4
   21e58:	f06f 0308 	mvn.w	r3, #8
   21e5c:	f240 52dc 	movw	r2, #1500	; 0x5dc
   21e60:	f00a fc32 	bl	2c6c8 <k_work_q_start>
   21e64:	f104 0010 	add.w	r0, r4, #16
   21e68:	4905      	ldr	r1, [pc, #20]	; (21e80 <net_tc_rx_init+0x40>)
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   21e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21e6e:	f00a bb25 	b.w	2c4bc <_impl_k_thread_name_set>
   21e72:	bf00      	nop
   21e74:	2000da40 	.word	0x2000da40
   21e78:	200024d0 	.word	0x200024d0
   21e7c:	2000ae60 	.word	0x2000ae60
   21e80:	000327b4 	.word	0x000327b4

00021e84 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   21e84:	b510      	push	{r4, lr}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   21e86:	3a01      	subs	r2, #1
   21e88:	440a      	add	r2, r1

	while (ptr < end) {
   21e8a:	4291      	cmp	r1, r2
   21e8c:	d309      	bcc.n	21ea2 <calc_chksum+0x1e>
			sum++;
		}
		ptr += 2;
	}

	if (ptr == end) {
   21e8e:	d107      	bne.n	21ea0 <calc_chksum+0x1c>
		tmp = ptr[0] << 8;
   21e90:	780b      	ldrb	r3, [r1, #0]
   21e92:	021b      	lsls	r3, r3, #8
		sum += tmp;
   21e94:	4418      	add	r0, r3
   21e96:	b280      	uxth	r0, r0
		if (sum < tmp) {
   21e98:	4283      	cmp	r3, r0
			sum++;
   21e9a:	bf84      	itt	hi
   21e9c:	3001      	addhi	r0, #1
   21e9e:	b280      	uxthhi	r0, r0
		}
	}

	return sum;
}
   21ea0:	bd10      	pop	{r4, pc}
		tmp = (ptr[0] << 8) + ptr[1];
   21ea2:	780c      	ldrb	r4, [r1, #0]
   21ea4:	784b      	ldrb	r3, [r1, #1]
   21ea6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   21eaa:	b29b      	uxth	r3, r3
		sum += tmp;
   21eac:	4418      	add	r0, r3
   21eae:	b280      	uxth	r0, r0
		if (sum < tmp) {
   21eb0:	4283      	cmp	r3, r0
			sum++;
   21eb2:	bf84      	itt	hi
   21eb4:	3001      	addhi	r0, #1
   21eb6:	b280      	uxthhi	r0, r0
		ptr += 2;
   21eb8:	3102      	adds	r1, #2
   21eba:	e7e6      	b.n	21e8a <calc_chksum+0x6>

00021ebc <net_byte_to_hex>:
{
   21ebc:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   21ebe:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   21ec0:	b19b      	cbz	r3, 21eea <net_byte_to_hex+0x2e>
		if (val < 10) {
   21ec2:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   21ec4:	bf86      	itte	hi
   21ec6:	f1a2 050a 	subhi.w	r5, r2, #10
   21eca:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   21ecc:	3430      	addls	r4, #48	; 0x30
   21ece:	1c43      	adds	r3, r0, #1
   21ed0:	7004      	strb	r4, [r0, #0]
   21ed2:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   21ed6:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   21ed8:	bf86      	itte	hi
   21eda:	3a0a      	subhi	r2, #10
   21edc:	1889      	addhi	r1, r1, r2
			*ptr++ = (char) (val + '0');
   21ede:	3130      	addls	r1, #48	; 0x30
	*ptr = '\0';
   21ee0:	2200      	movs	r2, #0
			*ptr++ = (char) (val + '0');
   21ee2:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   21ee4:	705a      	strb	r2, [r3, #1]
   21ee6:	1c58      	adds	r0, r3, #1
}
   21ee8:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   21eea:	2c00      	cmp	r4, #0
   21eec:	d1e9      	bne.n	21ec2 <net_byte_to_hex+0x6>
   21eee:	4603      	mov	r3, r0
   21ef0:	e7ef      	b.n	21ed2 <net_byte_to_hex+0x16>

00021ef2 <net_sprint_ll_addr_buf>:
{
   21ef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21ef6:	4616      	mov	r6, r2
   21ef8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   21efc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		len = 6;
   21f00:	2908      	cmp	r1, #8
   21f02:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
{
   21f06:	460d      	mov	r5, r1
   21f08:	4607      	mov	r7, r0
   21f0a:	fa50 f483 	uxtab	r4, r0, r3
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   21f0e:	4680      	mov	r8, r0
		len = 6;
   21f10:	bf0c      	ite	eq
   21f12:	460d      	moveq	r5, r1
   21f14:	2506      	movne	r5, #6
	char *ptr = buf;
   21f16:	4630      	mov	r0, r6
		*ptr++ = ':';
   21f18:	f04f 093a 	mov.w	r9, #58	; 0x3a
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   21f1c:	45a0      	cmp	r8, r4
   21f1e:	d00e      	beq.n	21f3e <net_sprint_ll_addr_buf+0x4c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   21f20:	2301      	movs	r3, #1
   21f22:	f818 1b01 	ldrb.w	r1, [r8], #1
   21f26:	2241      	movs	r2, #65	; 0x41
   21f28:	f7ff ffc8 	bl	21ebc <net_byte_to_hex>
   21f2c:	4603      	mov	r3, r0
		*ptr++ = ':';
   21f2e:	3001      	adds	r0, #1
   21f30:	f883 9000 	strb.w	r9, [r3]
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   21f34:	eba8 0307 	sub.w	r3, r8, r7
   21f38:	b2db      	uxtb	r3, r3
   21f3a:	429d      	cmp	r5, r3
   21f3c:	d8ee      	bhi.n	21f1c <net_sprint_ll_addr_buf+0x2a>
	if (!(ptr - buf)) {
   21f3e:	42b0      	cmp	r0, r6
   21f40:	f04f 0300 	mov.w	r3, #0
	*(ptr - 1) = '\0';
   21f44:	bf16      	itet	ne
   21f46:	f800 3c01 	strbne.w	r3, [r0, #-1]
		return NULL;
   21f4a:	4618      	moveq	r0, r3
	return buf;
   21f4c:	4630      	movne	r0, r6
}
   21f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00021f54 <net_addr_ntop>:
{
   21f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char zeros[8] = { 0 };
   21f58:	2300      	movs	r3, #0
{
   21f5a:	b087      	sub	sp, #28
	if (family == AF_INET6) {
   21f5c:	280a      	cmp	r0, #10
{
   21f5e:	4682      	mov	sl, r0
   21f60:	468b      	mov	fp, r1
   21f62:	4691      	mov	r9, r2
	unsigned char zeros[8] = { 0 };
   21f64:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (family == AF_INET6) {
   21f68:	d140      	bne.n	21fec <net_addr_ntop+0x98>
		w = (u16_t *)addr6->s6_addr16;
   21f6a:	9103      	str	r1, [sp, #12]
   21f6c:	a904      	add	r1, sp, #16
   21f6e:	b2dc      	uxtb	r4, r3
{
   21f70:	2200      	movs	r2, #0
   21f72:	e007      	b.n	21f84 <net_addr_ntop+0x30>
				zeros[i]++;
   21f74:	7808      	ldrb	r0, [r1, #0]
   21f76:	3201      	adds	r2, #1
   21f78:	3001      	adds	r0, #1
   21f7a:	7008      	strb	r0, [r1, #0]
			for (j = i; j < 8; j++) {
   21f7c:	18a0      	adds	r0, r4, r2
   21f7e:	b2c0      	uxtb	r0, r0
   21f80:	2807      	cmp	r0, #7
   21f82:	d804      	bhi.n	21f8e <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   21f84:	1898      	adds	r0, r3, r2
   21f86:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
   21f8a:	2800      	cmp	r0, #0
   21f8c:	d0f2      	beq.n	21f74 <net_addr_ntop+0x20>
   21f8e:	3301      	adds	r3, #1
		for (i = 0; i < 8; i++) {
   21f90:	2b08      	cmp	r3, #8
   21f92:	f101 0101 	add.w	r1, r1, #1
   21f96:	d1ea      	bne.n	21f6e <net_addr_ntop+0x1a>
   21f98:	2300      	movs	r3, #0
	s8_t pos = -1;
   21f9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   21f9e:	f04f 0801 	mov.w	r8, #1
			if (zeros[i] > longest) {
   21fa2:	aa04      	add	r2, sp, #16
   21fa4:	5cd2      	ldrb	r2, [r2, r3]
   21fa6:	4542      	cmp	r2, r8
				pos = i;
   21fa8:	bf88      	it	hi
   21faa:	b25f      	sxtbhi	r7, r3
   21fac:	f103 0301 	add.w	r3, r3, #1
   21fb0:	bf88      	it	hi
   21fb2:	4690      	movhi	r8, r2
		for (i = 0; i < 8; i++) {
   21fb4:	2b08      	cmp	r3, #8
   21fb6:	d1f4      	bne.n	21fa2 <net_addr_ntop+0x4e>
		len = 8;
   21fb8:	9302      	str	r3, [sp, #8]
   21fba:	f1b8 0f01 	cmp.w	r8, #1
   21fbe:	f04f 033a 	mov.w	r3, #58	; 0x3a
   21fc2:	9301      	str	r3, [sp, #4]
   21fc4:	bf08      	it	eq
   21fc6:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	bool needcolon = false;
   21fca:	2200      	movs	r2, #0
	char *ptr = dst;
   21fcc:	464c      	mov	r4, r9
	for (i = 0; i < len; i++) {
   21fce:	4616      	mov	r6, r2
   21fd0:	9b02      	ldr	r3, [sp, #8]
   21fd2:	429e      	cmp	r6, r3
   21fd4:	db1b      	blt.n	2200e <net_addr_ntop+0xba>
	if (!(ptr - dst)) {
   21fd6:	454c      	cmp	r4, r9
   21fd8:	d00a      	beq.n	21ff0 <net_addr_ntop+0x9c>
	if (family == AF_INET) {
   21fda:	f1ba 0f02 	cmp.w	sl, #2
   21fde:	f04f 0300 	mov.w	r3, #0
		*(ptr - 1) = '\0';
   21fe2:	bf0c      	ite	eq
   21fe4:	f804 3c01 	strbeq.w	r3, [r4, #-1]
		*ptr = '\0';
   21fe8:	7023      	strbne	r3, [r4, #0]
   21fea:	e003      	b.n	21ff4 <net_addr_ntop+0xa0>
	} else if (family == AF_INET) {
   21fec:	2802      	cmp	r0, #2
   21fee:	d005      	beq.n	21ffc <net_addr_ntop+0xa8>
		return NULL;
   21ff0:	f04f 0900 	mov.w	r9, #0
}
   21ff4:	4648      	mov	r0, r9
   21ff6:	b007      	add	sp, #28
   21ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   21ffc:	232e      	movs	r3, #46	; 0x2e
   21ffe:	2604      	movs	r6, #4
   22000:	e9cd 3601 	strd	r3, r6, [sp, #4]
	s8_t pos = -1;
   22004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   22008:	f04f 0801 	mov.w	r8, #1
   2200c:	e7dd      	b.n	21fca <net_addr_ntop+0x76>
		if (len == 4) {
   2200e:	9b02      	ldr	r3, [sp, #8]
   22010:	2b04      	cmp	r3, #4
   22012:	d12d      	bne.n	22070 <net_addr_ntop+0x11c>
			value = (u32_t)addr->s4_addr[i];
   22014:	f81b 1006 	ldrb.w	r1, [fp, r6]
			if (value == 0) {
   22018:	b949      	cbnz	r1, 2202e <net_addr_ntop+0xda>
				*ptr++ = '0';
   2201a:	4620      	mov	r0, r4
   2201c:	2330      	movs	r3, #48	; 0x30
   2201e:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   22022:	9b01      	ldr	r3, [sp, #4]
   22024:	7063      	strb	r3, [r4, #1]
	for (i = 0; i < len; i++) {
   22026:	3601      	adds	r6, #1
   22028:	b2f6      	uxtb	r6, r6
   2202a:	4604      	mov	r4, r0
   2202c:	e7d0      	b.n	21fd0 <net_addr_ntop+0x7c>
			l = net_value_to_udec(ptr, value, 0);
   2202e:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 220f4 <net_addr_ntop+0x1a0>
   22032:	4623      	mov	r3, r4
   22034:	2009      	movs	r0, #9
   22036:	f04f 0e00 	mov.w	lr, #0
		if ((precision > i) || (temp != 0)) {
   2203a:	4586      	cmp	lr, r0
		temp = value / divisor;
   2203c:	fbb1 f5fc 	udiv	r5, r1, ip
		value = value % divisor;
   22040:	fb0c 1115 	mls	r1, ip, r5, r1
		if ((precision > i) || (temp != 0)) {
   22044:	dc00      	bgt.n	22048 <net_addr_ntop+0xf4>
   22046:	b11d      	cbz	r5, 22050 <net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   22048:	3530      	adds	r5, #48	; 0x30
   2204a:	701d      	strb	r5, [r3, #0]
   2204c:	4686      	mov	lr, r0
   2204e:	3301      	adds	r3, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   22050:	3801      	subs	r0, #1
   22052:	250a      	movs	r5, #10
   22054:	fbbc fcf5 	udiv	ip, ip, r5
   22058:	1c45      	adds	r5, r0, #1
   2205a:	d1ee      	bne.n	2203a <net_addr_ntop+0xe6>
	*buf = 0;
   2205c:	f04f 0100 	mov.w	r1, #0
   22060:	7019      	strb	r1, [r3, #0]
	return buf - start;
   22062:	1b1b      	subs	r3, r3, r4
			ptr += l;
   22064:	b2db      	uxtb	r3, r3
   22066:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   22068:	9901      	ldr	r1, [sp, #4]
   2206a:	54e1      	strb	r1, [r4, r3]
   2206c:	3001      	adds	r0, #1
			continue;
   2206e:	e7da      	b.n	22026 <net_addr_ntop+0xd2>
		if (i == pos) {
   22070:	42b7      	cmp	r7, r6
   22072:	d10d      	bne.n	22090 <net_addr_ntop+0x13c>
			if (needcolon || i == 0) {
   22074:	b902      	cbnz	r2, 22078 <net_addr_ntop+0x124>
   22076:	b917      	cbnz	r7, 2207e <net_addr_ntop+0x12a>
				*ptr++ = ':';
   22078:	233a      	movs	r3, #58	; 0x3a
   2207a:	7023      	strb	r3, [r4, #0]
   2207c:	3401      	adds	r4, #1
			*ptr++ = ':';
   2207e:	233a      	movs	r3, #58	; 0x3a
   22080:	7023      	strb	r3, [r4, #0]
			i += longest - 1;
   22082:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   22086:	441e      	add	r6, r3
			*ptr++ = ':';
   22088:	1c60      	adds	r0, r4, #1
			i += longest - 1;
   2208a:	b2f6      	uxtb	r6, r6
			needcolon = false;
   2208c:	2200      	movs	r2, #0
			continue;
   2208e:	e7ca      	b.n	22026 <net_addr_ntop+0xd2>
		if (needcolon) {
   22090:	b112      	cbz	r2, 22098 <net_addr_ntop+0x144>
			*ptr++ = ':';
   22092:	233a      	movs	r3, #58	; 0x3a
   22094:	7023      	strb	r3, [r4, #0]
   22096:	3401      	adds	r4, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   22098:	9b03      	ldr	r3, [sp, #12]
   2209a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   2209e:	021d      	lsls	r5, r3, #8
   220a0:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   220a4:	b22d      	sxth	r5, r5
		bh = value >> 8;
   220a6:	f3c5 2307 	ubfx	r3, r5, #8, #8
		bl = value & 0xff;
   220aa:	b2ed      	uxtb	r5, r5
		if (bh) {
   220ac:	b1ab      	cbz	r3, 220da <net_addr_ntop+0x186>
			if (bh > 0x0f) {
   220ae:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   220b0:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   220b2:	d90b      	bls.n	220cc <net_addr_ntop+0x178>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   220b4:	2300      	movs	r3, #0
   220b6:	2261      	movs	r2, #97	; 0x61
   220b8:	4620      	mov	r0, r4
   220ba:	f7ff feff 	bl	21ebc <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   220be:	2301      	movs	r3, #1
   220c0:	2261      	movs	r2, #97	; 0x61
   220c2:	4629      	mov	r1, r5
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   220c4:	f7ff fefa 	bl	21ebc <net_byte_to_hex>
		needcolon = true;
   220c8:	2201      	movs	r2, #1
   220ca:	e7ac      	b.n	22026 <net_addr_ntop+0xd2>
				if (bh < 10) {
   220cc:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   220ce:	bf94      	ite	ls
   220d0:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   220d2:	3157      	addhi	r1, #87	; 0x57
   220d4:	1c60      	adds	r0, r4, #1
   220d6:	7021      	strb	r1, [r4, #0]
   220d8:	e7f1      	b.n	220be <net_addr_ntop+0x16a>
		} else if (bl > 0x0f) {
   220da:	2d0f      	cmp	r5, #15
   220dc:	d903      	bls.n	220e6 <net_addr_ntop+0x192>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   220de:	2261      	movs	r2, #97	; 0x61
   220e0:	4629      	mov	r1, r5
   220e2:	4620      	mov	r0, r4
   220e4:	e7ee      	b.n	220c4 <net_addr_ntop+0x170>
			if (bl < 10) {
   220e6:	2d09      	cmp	r5, #9
				*ptr++ = (char)(bl + '0');
   220e8:	bf94      	ite	ls
   220ea:	3530      	addls	r5, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   220ec:	3557      	addhi	r5, #87	; 0x57
   220ee:	1c60      	adds	r0, r4, #1
   220f0:	7025      	strb	r5, [r4, #0]
   220f2:	e7e9      	b.n	220c8 <net_addr_ntop+0x174>
   220f4:	3b9aca00 	.word	0x3b9aca00

000220f8 <net_sprint_addr>:
	char *s = buf[++i % NBUFS];
   220f8:	4b08      	ldr	r3, [pc, #32]	; (2211c <net_sprint_addr+0x24>)
   220fa:	681a      	ldr	r2, [r3, #0]
   220fc:	3201      	adds	r2, #1
{
   220fe:	b410      	push	{r4}
	char *s = buf[++i % NBUFS];
   22100:	601a      	str	r2, [r3, #0]
	return net_addr_ntop(af, addr, s, NET_IPV6_ADDR_LEN);
   22102:	4c07      	ldr	r4, [pc, #28]	; (22120 <net_sprint_addr+0x28>)
	char *s = buf[++i % NBUFS];
   22104:	2303      	movs	r3, #3
   22106:	fb92 f3f3 	sdiv	r3, r2, r3
   2210a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2210e:	1ad2      	subs	r2, r2, r3
	return net_addr_ntop(af, addr, s, NET_IPV6_ADDR_LEN);
   22110:	2328      	movs	r3, #40	; 0x28
   22112:	fb03 4202 	mla	r2, r3, r2, r4
}
   22116:	bc10      	pop	{r4}
	return net_addr_ntop(af, addr, s, NET_IPV6_ADDR_LEN);
   22118:	f7ff bf1c 	b.w	21f54 <net_addr_ntop>
   2211c:	20002650 	.word	0x20002650
   22120:	200025d8 	.word	0x200025d8

00022124 <net_addr_pton>:
	if (family == AF_INET) {
   22124:	2802      	cmp	r0, #2
{
   22126:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2212a:	460c      	mov	r4, r1
   2212c:	4616      	mov	r6, r2
	if (family == AF_INET) {
   2212e:	d128      	bne.n	22182 <net_addr_pton+0x5e>
		len = strlen(src);
   22130:	4608      	mov	r0, r1
   22132:	f7e3 fe53 	bl	5ddc <strlen>
   22136:	4623      	mov	r3, r4
   22138:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   2213a:	4283      	cmp	r3, r0
   2213c:	d116      	bne.n	2216c <net_addr_pton+0x48>
		(void)memset(addr, 0, sizeof(struct in_addr));
   2213e:	4630      	mov	r0, r6
   22140:	2204      	movs	r2, #4
   22142:	2100      	movs	r1, #0
   22144:	f7e3 fecd 	bl	5ee2 <memset>
   22148:	1e75      	subs	r5, r6, #1
   2214a:	3603      	adds	r6, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   2214c:	4620      	mov	r0, r4
   2214e:	220a      	movs	r2, #10
   22150:	a901      	add	r1, sp, #4
   22152:	f7e3 fd95 	bl	5c80 <strtol>
   22156:	f805 0f01 	strb.w	r0, [r5, #1]!
			src = ++endptr;
   2215a:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   2215c:	42ae      	cmp	r6, r5
			src = ++endptr;
   2215e:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   22162:	d1f3      	bne.n	2214c <net_addr_pton+0x28>
	return 0;
   22164:	2000      	movs	r0, #0
}
   22166:	b003      	add	sp, #12
   22168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   2216c:	f813 2b01 	ldrb.w	r2, [r3], #1
   22170:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   22174:	2909      	cmp	r1, #9
   22176:	d9e0      	bls.n	2213a <net_addr_pton+0x16>
   22178:	2a2e      	cmp	r2, #46	; 0x2e
   2217a:	d0de      	beq.n	2213a <net_addr_pton+0x16>
				return -EINVAL;
   2217c:	f06f 0015 	mvn.w	r0, #21
   22180:	e7f1      	b.n	22166 <net_addr_pton+0x42>
	} else if (family == AF_INET6) {
   22182:	280a      	cmp	r0, #10
   22184:	d1fa      	bne.n	2217c <net_addr_pton+0x58>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   22186:	212e      	movs	r1, #46	; 0x2e
   22188:	4620      	mov	r0, r4
   2218a:	f7e3 fe0c 	bl	5da6 <strchr>
		if (*src == ':') {
   2218e:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   22190:	2800      	cmp	r0, #0
   22192:	bf14      	ite	ne
   22194:	2706      	movne	r7, #6
   22196:	2708      	moveq	r7, #8
		if (*src == ':') {
   22198:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   2219a:	bf08      	it	eq
   2219c:	3401      	addeq	r4, #1
		len = strlen(src);
   2219e:	4620      	mov	r0, r4
   221a0:	f7e3 fe1c 	bl	5ddc <strlen>
		for (i = 0; i < len; i++) {
   221a4:	4623      	mov	r3, r4
   221a6:	1b1a      	subs	r2, r3, r4
   221a8:	4290      	cmp	r0, r2
   221aa:	dc32      	bgt.n	22212 <net_addr_pton+0xee>
		for (i = 0; i < expected_groups; i++) {
   221ac:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   221ae:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   221b0:	2c00      	cmp	r4, #0
   221b2:	d0e3      	beq.n	2217c <net_addr_pton+0x58>
   221b4:	7823      	ldrb	r3, [r4, #0]
   221b6:	2b00      	cmp	r3, #0
   221b8:	d0e0      	beq.n	2217c <net_addr_pton+0x58>
			if (*src != ':') {
   221ba:	2b3a      	cmp	r3, #58	; 0x3a
   221bc:	ea4f 0345 	mov.w	r3, r5, lsl #1
   221c0:	d135      	bne.n	2222e <net_addr_pton+0x10a>
   221c2:	4433      	add	r3, r6
			for (; i < expected_groups; i++) {
   221c4:	42bd      	cmp	r5, r7
   221c6:	db52      	blt.n	2226e <net_addr_pton+0x14a>
			tmp = strrchr(src, ':');
   221c8:	213a      	movs	r1, #58	; 0x3a
   221ca:	4620      	mov	r0, r4
   221cc:	f7e3 fdf9 	bl	5dc2 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   221d0:	42a0      	cmp	r0, r4
   221d2:	d164      	bne.n	2229e <net_addr_pton+0x17a>
   221d4:	2f06      	cmp	r7, #6
   221d6:	d151      	bne.n	2227c <net_addr_pton+0x158>
				src++;
   221d8:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   221da:	2f06      	cmp	r7, #6
   221dc:	d1c2      	bne.n	22164 <net_addr_pton+0x40>
   221de:	360c      	adds	r6, #12
			for (i = 0; i < 4; i++) {
   221e0:	2500      	movs	r5, #0
				if (!src || !*src) {
   221e2:	2c00      	cmp	r4, #0
   221e4:	d0ca      	beq.n	2217c <net_addr_pton+0x58>
   221e6:	7823      	ldrb	r3, [r4, #0]
   221e8:	2b00      	cmp	r3, #0
   221ea:	d0c7      	beq.n	2217c <net_addr_pton+0x58>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   221ec:	220a      	movs	r2, #10
   221ee:	2100      	movs	r1, #0
   221f0:	4620      	mov	r0, r4
   221f2:	f7e3 fd45 	bl	5c80 <strtol>
				src = strchr(src, '.');
   221f6:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   221f8:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   221fc:	4620      	mov	r0, r4
   221fe:	f7e3 fdd2 	bl	5da6 <strchr>
				if (src) {
   22202:	4604      	mov	r4, r0
   22204:	2800      	cmp	r0, #0
   22206:	d04f      	beq.n	222a8 <net_addr_pton+0x184>
					src++;
   22208:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   2220a:	3501      	adds	r5, #1
   2220c:	2d04      	cmp	r5, #4
   2220e:	d1e8      	bne.n	221e2 <net_addr_pton+0xbe>
   22210:	e7a8      	b.n	22164 <net_addr_pton+0x40>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   22212:	f813 2b01 	ldrb.w	r2, [r3], #1
   22216:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2221a:	290a      	cmp	r1, #10
   2221c:	d9c3      	bls.n	221a6 <net_addr_pton+0x82>
   2221e:	f022 0120 	bic.w	r1, r2, #32
   22222:	3941      	subs	r1, #65	; 0x41
   22224:	2905      	cmp	r1, #5
   22226:	d9be      	bls.n	221a6 <net_addr_pton+0x82>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   22228:	2a2e      	cmp	r2, #46	; 0x2e
   2222a:	d1a7      	bne.n	2217c <net_addr_pton+0x58>
   2222c:	e7bb      	b.n	221a6 <net_addr_pton+0x82>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   2222e:	2210      	movs	r2, #16
   22230:	2100      	movs	r1, #0
   22232:	4620      	mov	r0, r4
   22234:	f7e3 fd24 	bl	5c80 <strtol>
   22238:	2210      	movs	r2, #16
   2223a:	4681      	mov	r9, r0
   2223c:	2100      	movs	r1, #0
   2223e:	4620      	mov	r0, r4
   22240:	f7e3 fd1e 	bl	5c80 <strtol>
   22244:	f3c9 2907 	ubfx	r9, r9, #8, #8
   22248:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   2224c:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   22250:	213a      	movs	r1, #58	; 0x3a
   22252:	4620      	mov	r0, r4
   22254:	f7e3 fda7 	bl	5da6 <strchr>
				if (src) {
   22258:	4604      	mov	r4, r0
   2225a:	b108      	cbz	r0, 22260 <net_addr_pton+0x13c>
			src++;
   2225c:	3401      	adds	r4, #1
   2225e:	e002      	b.n	22266 <net_addr_pton+0x142>
					if (i < expected_groups - 1) {
   22260:	1e7b      	subs	r3, r7, #1
   22262:	42ab      	cmp	r3, r5
   22264:	dc8a      	bgt.n	2217c <net_addr_pton+0x58>
		for (i = 0; i < expected_groups; i++) {
   22266:	3501      	adds	r5, #1
   22268:	42af      	cmp	r7, r5
   2226a:	dca1      	bgt.n	221b0 <net_addr_pton+0x8c>
   2226c:	e7b5      	b.n	221da <net_addr_pton+0xb6>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   2226e:	f883 8000 	strb.w	r8, [r3]
   22272:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   22276:	3501      	adds	r5, #1
   22278:	3302      	adds	r3, #2
   2227a:	e7a3      	b.n	221c4 <net_addr_pton+0xa0>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   2227c:	7863      	ldrb	r3, [r4, #1]
   2227e:	2b00      	cmp	r3, #0
   22280:	d0aa      	beq.n	221d8 <net_addr_pton+0xb4>
			i = expected_groups - 1;
   22282:	1e7d      	subs	r5, r7, #1
   22284:	3001      	adds	r0, #1
				if (*tmp == ':') {
   22286:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   2228a:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   2228c:	bf08      	it	eq
   2228e:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   22292:	2d00      	cmp	r5, #0
   22294:	f6ff af72 	blt.w	2217c <net_addr_pton+0x58>
			} while (tmp-- != src);
   22298:	42a0      	cmp	r0, r4
   2229a:	d1f4      	bne.n	22286 <net_addr_pton+0x162>
   2229c:	e7de      	b.n	2225c <net_addr_pton+0x138>
			if (expected_groups == 6) {
   2229e:	2f06      	cmp	r7, #6
				tmp--;
   222a0:	bf08      	it	eq
   222a2:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   222a6:	e7ec      	b.n	22282 <net_addr_pton+0x15e>
					if (i < 3) {
   222a8:	2d03      	cmp	r5, #3
   222aa:	f47f af67 	bne.w	2217c <net_addr_pton+0x58>
   222ae:	e7ac      	b.n	2220a <net_addr_pton+0xe6>

000222b0 <net_calc_chksum>:

	return sum;
}

u16_t net_calc_chksum(struct net_pkt *pkt, u8_t proto)
{
   222b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return pkt->family;
   222b2:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	u16_t upper_layer_len;
	u16_t sum = 0;

	switch (net_pkt_family(pkt)) {
   222b6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   222ba:	2b0a      	cmp	r3, #10
{
   222bc:	b085      	sub	sp, #20
   222be:	4606      	mov	r6, r0
	switch (net_pkt_family(pkt)) {
   222c0:	d161      	bne.n	22386 <net_calc_chksum+0xd6>
		}
		break;
#endif
#if defined(CONFIG_NET_IPV6)
	case AF_INET6:
		upper_layer_len = ntohs(NET_IPV6_HDR(pkt)->len) -
   222c2:	6947      	ldr	r7, [r0, #20]
			net_pkt_ipv6_ext_len(pkt);
   222c4:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
	return pkt->frags->data;
   222c8:	68bc      	ldr	r4, [r7, #8]
		upper_layer_len = ntohs(NET_IPV6_HDR(pkt)->len) -
   222ca:	88a3      	ldrh	r3, [r4, #4]
   222cc:	0218      	lsls	r0, r3, #8
   222ce:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
		sum = calc_chksum(upper_layer_len + proto,
   222d2:	1b4b      	subs	r3, r1, r5
   222d4:	4418      	add	r0, r3
   222d6:	f104 0108 	add.w	r1, r4, #8
   222da:	2220      	movs	r2, #32
   222dc:	b280      	uxth	r0, r0
   222de:	f7ff fdd1 	bl	21e84 <calc_chksum>
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   222e2:	f896 1041 	ldrb.w	r1, [r6, #65]	; 0x41
	return net_frag_read(frag, offset, pos, len, NULL);
   222e6:	2600      	movs	r6, #0
   222e8:	4429      	add	r1, r5
		sum = calc_chksum(upper_layer_len + proto,
   222ea:	4604      	mov	r4, r0
   222ec:	9600      	str	r6, [sp, #0]
   222ee:	4633      	mov	r3, r6
   222f0:	f10d 020e 	add.w	r2, sp, #14
   222f4:	b289      	uxth	r1, r1
   222f6:	4638      	mov	r0, r7
   222f8:	f7ff faf2 	bl	218e0 <net_frag_read>
	if (!frag) {
   222fc:	4605      	mov	r5, r0
   222fe:	b910      	cbnz	r0, 22306 <net_calc_chksum+0x56>
		return 0;
	}

	sum = calc_chksum_pkt(sum, pkt, upper_layer_len);

	sum = (sum == 0) ? 0xffff : htons(sum);
   22300:	f64f 70ff 	movw	r0, #65535	; 0xffff
   22304:	e03d      	b.n	22382 <net_calc_chksum+0xd2>
	NET_ASSERT(offset <= frag->len);
   22306:	8982      	ldrh	r2, [r0, #12]
   22308:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2230c:	429a      	cmp	r2, r3
   2230e:	d214      	bcs.n	2233a <net_calc_chksum+0x8a>
   22310:	4b1e      	ldr	r3, [pc, #120]	; (2238c <net_calc_chksum+0xdc>)
   22312:	681b      	ldr	r3, [r3, #0]
   22314:	075a      	lsls	r2, r3, #29
   22316:	d010      	beq.n	2233a <net_calc_chksum+0x8a>
   22318:	2301      	movs	r3, #1
   2231a:	f04f 0200 	mov.w	r2, #0
   2231e:	f363 0202 	bfi	r2, r3, #0, #3
   22322:	491b      	ldr	r1, [pc, #108]	; (22390 <net_calc_chksum+0xe0>)
   22324:	4b1b      	ldr	r3, [pc, #108]	; (22394 <net_calc_chksum+0xe4>)
   22326:	481c      	ldr	r0, [pc, #112]	; (22398 <net_calc_chksum+0xe8>)
   22328:	1a5b      	subs	r3, r3, r1
   2232a:	f366 02c5 	bfi	r2, r6, #3, #3
   2232e:	08db      	lsrs	r3, r3, #3
   22330:	f363 128f 	bfi	r2, r3, #6, #10
   22334:	4919      	ldr	r1, [pc, #100]	; (2239c <net_calc_chksum+0xec>)
   22336:	f7df fd0f 	bl	1d58 <log_1>
	ptr = frag->data + offset;
   2233a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2233e:	68a9      	ldr	r1, [r5, #8]
	len = frag->len - offset;
   22340:	89aa      	ldrh	r2, [r5, #12]
	ptr = frag->data + offset;
   22342:	4419      	add	r1, r3
	len = frag->len - offset;
   22344:	1ad2      	subs	r2, r2, r3
   22346:	b212      	sxth	r2, r2
		sum = calc_chksum(sum, ptr, len);
   22348:	b296      	uxth	r6, r2
   2234a:	4620      	mov	r0, r4
   2234c:	4632      	mov	r2, r6
   2234e:	f7ff fd99 	bl	21e84 <calc_chksum>
		frag = frag->frags;
   22352:	682d      	ldr	r5, [r5, #0]
		sum = calc_chksum(sum, ptr, len);
   22354:	4604      	mov	r4, r0
		if (!frag) {
   22356:	b185      	cbz	r5, 2237a <net_calc_chksum+0xca>
		if (len % 2) {
   22358:	07f3      	lsls	r3, r6, #31
		ptr = frag->data;
   2235a:	68a9      	ldr	r1, [r5, #8]
   2235c:	89aa      	ldrh	r2, [r5, #12]
		if (len % 2) {
   2235e:	d5f2      	bpl.n	22346 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   22360:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   22362:	441c      	add	r4, r3
   22364:	b2a4      	uxth	r4, r4
			if (sum < tmp) {
   22366:	42a3      	cmp	r3, r4
				sum++;
   22368:	bf88      	it	hi
   2236a:	3401      	addhi	r4, #1
			len = frag->len - 1;
   2236c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				sum++;
   22370:	bf88      	it	hi
   22372:	b2a4      	uxthhi	r4, r4
			len = frag->len - 1;
   22374:	b212      	sxth	r2, r2
			ptr++;
   22376:	3101      	adds	r1, #1
   22378:	e7e6      	b.n	22348 <net_calc_chksum+0x98>
	sum = (sum == 0) ? 0xffff : htons(sum);
   2237a:	2800      	cmp	r0, #0
   2237c:	d0c0      	beq.n	22300 <net_calc_chksum+0x50>
   2237e:	ba40      	rev16	r0, r0
   22380:	b280      	uxth	r0, r0

	return sum;
}
   22382:	b005      	add	sp, #20
   22384:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   22386:	2000      	movs	r0, #0
   22388:	e7fb      	b.n	22382 <net_calc_chksum+0xd2>
   2238a:	bf00      	nop
   2238c:	2000d7c8 	.word	0x2000d7c8
   22390:	0002cff8 	.word	0x0002cff8
   22394:	0002d168 	.word	0x0002d168
   22398:	000327fd 	.word	0x000327fd
   2239c:	000327ed 	.word	0x000327ed

000223a0 <net_header_fits>:
 * memory area. The start of the said area must be inside the first
 * fragment. This helper is used when checking whether various protocol
 * headers are split between two fragments.
 */
bool net_header_fits(struct net_pkt *pkt, u8_t *hdr, size_t hdr_size)
{
   223a0:	b510      	push	{r4, lr}
	if (hdr && hdr > pkt->frags->data &&
   223a2:	b159      	cbz	r1, 223bc <net_header_fits+0x1c>
   223a4:	6944      	ldr	r4, [r0, #20]
   223a6:	68a3      	ldr	r3, [r4, #8]
   223a8:	428b      	cmp	r3, r1
   223aa:	d207      	bcs.n	223bc <net_header_fits+0x1c>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   223ac:	89a0      	ldrh	r0, [r4, #12]
   223ae:	4411      	add	r1, r2
   223b0:	4418      	add	r0, r3
	if (hdr && hdr > pkt->frags->data &&
   223b2:	4281      	cmp	r1, r0
   223b4:	bf8c      	ite	hi
   223b6:	2000      	movhi	r0, #0
   223b8:	2001      	movls	r0, #1
		return true;
	}

	return false;
}
   223ba:	bd10      	pop	{r4, pc}
	return false;
   223bc:	2000      	movs	r0, #0
   223be:	e7fc      	b.n	223ba <net_header_fits+0x1a>

000223c0 <net_ipv6_addr_create_iid>:
{
   223c0:	b538      	push	{r3, r4, r5, lr}
	addr->s6_addr[0] = 0xfe;
   223c2:	f248 03fe 	movw	r3, #33022	; 0x80fe
{
   223c6:	4604      	mov	r4, r0
   223c8:	460d      	mov	r5, r1
	addr->s6_addr[0] = 0xfe;
   223ca:	6003      	str	r3, [r0, #0]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   223cc:	2300      	movs	r3, #0
   223ce:	7103      	strb	r3, [r0, #4]
   223d0:	7143      	strb	r3, [r0, #5]
   223d2:	7183      	strb	r3, [r0, #6]
   223d4:	71c3      	strb	r3, [r0, #7]
	switch (lladdr->len) {
   223d6:	790a      	ldrb	r2, [r1, #4]
   223d8:	2a06      	cmp	r2, #6
   223da:	d015      	beq.n	22408 <net_ipv6_addr_create_iid+0x48>
   223dc:	2a08      	cmp	r2, #8
   223de:	d02c      	beq.n	2243a <net_ipv6_addr_create_iid+0x7a>
   223e0:	2a02      	cmp	r2, #2
   223e2:	d110      	bne.n	22406 <net_ipv6_addr_create_iid+0x46>
		if (lladdr->type == NET_LINK_IEEE802154) {
   223e4:	794a      	ldrb	r2, [r1, #5]
   223e6:	2a01      	cmp	r2, #1
   223e8:	d10d      	bne.n	22406 <net_ipv6_addr_create_iid+0x46>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   223ea:	7203      	strb	r3, [r0, #8]
   223ec:	7243      	strb	r3, [r0, #9]
   223ee:	7283      	strb	r3, [r0, #10]
   223f0:	72c3      	strb	r3, [r0, #11]
			addr->s6_addr[11] = 0xff;
   223f2:	22ff      	movs	r2, #255	; 0xff
   223f4:	72c2      	strb	r2, [r0, #11]
			addr->s6_addr[13] = 0;
   223f6:	7343      	strb	r3, [r0, #13]
			addr->s6_addr[12] = 0xfe;
   223f8:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   223fa:	680b      	ldr	r3, [r1, #0]
			addr->s6_addr[12] = 0xfe;
   223fc:	7302      	strb	r2, [r0, #12]
			addr->s6_addr[14] = lladdr->addr[0];
   223fe:	781a      	ldrb	r2, [r3, #0]
   22400:	7382      	strb	r2, [r0, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   22402:	785b      	ldrb	r3, [r3, #1]
   22404:	73c3      	strb	r3, [r0, #15]
		break;
	}
}
   22406:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   22408:	2203      	movs	r2, #3
   2240a:	6809      	ldr	r1, [r1, #0]
   2240c:	3008      	adds	r0, #8
   2240e:	f7e3 fd3b 	bl	5e88 <memcpy>
		addr->s6_addr[11] = 0xff;
   22412:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22414:	6829      	ldr	r1, [r5, #0]
		addr->s6_addr[11] = 0xff;
   22416:	72e3      	strb	r3, [r4, #11]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22418:	2203      	movs	r2, #3
		addr->s6_addr[12] = 0xfe;
   2241a:	23fe      	movs	r3, #254	; 0xfe
   2241c:	7323      	strb	r3, [r4, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2241e:	4411      	add	r1, r2
   22420:	f104 000d 	add.w	r0, r4, #13
   22424:	f7e3 fd30 	bl	5e88 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   22428:	796b      	ldrb	r3, [r5, #5]
   2242a:	3b02      	subs	r3, #2
   2242c:	2b01      	cmp	r3, #1
   2242e:	d8ea      	bhi.n	22406 <net_ipv6_addr_create_iid+0x46>
		addr->s6_addr[8] ^= 0x02;
   22430:	7a23      	ldrb	r3, [r4, #8]
   22432:	f083 0302 	eor.w	r3, r3, #2
   22436:	7223      	strb	r3, [r4, #8]
}
   22438:	e7e5      	b.n	22406 <net_ipv6_addr_create_iid+0x46>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2243a:	6809      	ldr	r1, [r1, #0]
   2243c:	3008      	adds	r0, #8
   2243e:	f7e3 fd23 	bl	5e88 <memcpy>
   22442:	e7f5      	b.n	22430 <net_ipv6_addr_create_iid+0x70>

00022444 <net_ipv6_addr_based_on_ll>:
 *
 *  @return True if it is, False otherwise
 */
static inline bool net_ipv6_addr_based_on_ll(const struct in6_addr *addr,
					     const struct net_linkaddr *lladdr)
{
   22444:	b570      	push	{r4, r5, r6, lr}
   22446:	460d      	mov	r5, r1
	if (!addr || !lladdr) {
   22448:	4604      	mov	r4, r0
   2244a:	b908      	cbnz	r0, 22450 <net_ipv6_addr_based_on_ll+0xc>
		}

		break;
	}

	return false;
   2244c:	2000      	movs	r0, #0
   2244e:	e017      	b.n	22480 <net_ipv6_addr_based_on_ll+0x3c>
	if (!addr || !lladdr) {
   22450:	2900      	cmp	r1, #0
   22452:	d0fb      	beq.n	2244c <net_ipv6_addr_based_on_ll+0x8>
	switch (lladdr->len) {
   22454:	790a      	ldrb	r2, [r1, #4]
   22456:	2a06      	cmp	r2, #6
   22458:	d013      	beq.n	22482 <net_ipv6_addr_based_on_ll+0x3e>
   2245a:	2a08      	cmp	r2, #8
   2245c:	d040      	beq.n	224e0 <net_ipv6_addr_based_on_ll+0x9c>
   2245e:	2a02      	cmp	r2, #2
   22460:	d1f4      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   22462:	6809      	ldr	r1, [r1, #0]
   22464:	300e      	adds	r0, #14
   22466:	f7e3 fce8 	bl	5e3a <memcmp>
   2246a:	2800      	cmp	r0, #0
   2246c:	d1ee      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
		    addr->s6_addr[10] == 0 &&
   2246e:	68a3      	ldr	r3, [r4, #8]
   22470:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22474:	d1ea      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
		    addr->s6_addr[11] == 0xff &&
   22476:	7b20      	ldrb	r0, [r4, #12]
   22478:	28fe      	cmp	r0, #254	; 0xfe
			    lladdr->len - 1) &&
   2247a:	bf14      	ite	ne
   2247c:	2000      	movne	r0, #0
   2247e:	2001      	moveq	r0, #1
}
   22480:	bd70      	pop	{r4, r5, r6, pc}
		if (lladdr->type == NET_LINK_ETHERNET) {
   22482:	794e      	ldrb	r6, [r1, #5]
   22484:	2e03      	cmp	r6, #3
   22486:	d11d      	bne.n	224c4 <net_ipv6_addr_based_on_ll+0x80>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22488:	6809      	ldr	r1, [r1, #0]
   2248a:	2202      	movs	r2, #2
   2248c:	3101      	adds	r1, #1
   2248e:	3009      	adds	r0, #9
   22490:	f7e3 fcd3 	bl	5e3a <memcmp>
   22494:	2800      	cmp	r0, #0
   22496:	d1d9      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22498:	6829      	ldr	r1, [r5, #0]
   2249a:	4632      	mov	r2, r6
   2249c:	3103      	adds	r1, #3
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2249e:	f104 000d 	add.w	r0, r4, #13
   224a2:	f7e3 fcca 	bl	5e3a <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   224a6:	2800      	cmp	r0, #0
   224a8:	d1d0      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   224aa:	7ae3      	ldrb	r3, [r4, #11]
   224ac:	2bff      	cmp	r3, #255	; 0xff
   224ae:	d1cd      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   224b0:	7b23      	ldrb	r3, [r4, #12]
   224b2:	2bfe      	cmp	r3, #254	; 0xfe
   224b4:	d1ca      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   224b6:	682a      	ldr	r2, [r5, #0]
   224b8:	7a23      	ldrb	r3, [r4, #8]
			    lladdr->len - 1) &&
   224ba:	7810      	ldrb	r0, [r2, #0]
   224bc:	f083 0302 	eor.w	r3, r3, #2
   224c0:	4298      	cmp	r0, r3
   224c2:	e7da      	b.n	2247a <net_ipv6_addr_based_on_ll+0x36>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   224c4:	2e02      	cmp	r6, #2
   224c6:	d1c1      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   224c8:	6809      	ldr	r1, [r1, #0]
   224ca:	4632      	mov	r2, r6
   224cc:	3101      	adds	r1, #1
   224ce:	3009      	adds	r0, #9
   224d0:	f7e3 fcb3 	bl	5e3a <memcmp>
   224d4:	2800      	cmp	r0, #0
   224d6:	d1b9      	bne.n	2244c <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   224d8:	6829      	ldr	r1, [r5, #0]
   224da:	2203      	movs	r2, #3
   224dc:	4411      	add	r1, r2
   224de:	e7de      	b.n	2249e <net_ipv6_addr_based_on_ll+0x5a>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   224e0:	6809      	ldr	r1, [r1, #0]
   224e2:	2207      	movs	r2, #7
   224e4:	3101      	adds	r1, #1
   224e6:	3009      	adds	r0, #9
   224e8:	f7e3 fca7 	bl	5e3a <memcmp>
   224ec:	2800      	cmp	r0, #0
   224ee:	d0e2      	beq.n	224b6 <net_ipv6_addr_based_on_ll+0x72>
   224f0:	e7ac      	b.n	2244c <net_ipv6_addr_based_on_ll+0x8>
	...

000224f4 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   224f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   224f8:	4607      	mov	r7, r0
   224fa:	b085      	sub	sp, #20
   224fc:	4690      	mov	r8, r2
	if (iphc) {
   224fe:	2900      	cmp	r1, #0
   22500:	f000 8263 	beq.w	229ca <net_6lo_compress+0x4d6>
	struct net_ipv6_hdr *ipv6 = NET_IPV6_HDR(pkt);
   22504:	6943      	ldr	r3, [r0, #20]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   22506:	899a      	ldrh	r2, [r3, #12]
   22508:	2a27      	cmp	r2, #39	; 0x27
   2250a:	d81c      	bhi.n	22546 <net_6lo_compress+0x52>
		NET_ERR("Invalid length %d, min %d",
   2250c:	4bad      	ldr	r3, [pc, #692]	; (227c4 <net_6lo_compress+0x2d0>)
   2250e:	681b      	ldr	r3, [r3, #0]
   22510:	0758      	lsls	r0, r3, #29
   22512:	d103      	bne.n	2251c <net_6lo_compress+0x28>
		return false;
   22514:	2000      	movs	r0, #0
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   22516:	b005      	add	sp, #20
   22518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		NET_ERR("Invalid length %d, min %d",
   2251c:	2301      	movs	r3, #1
   2251e:	f04f 0100 	mov.w	r1, #0
   22522:	f363 0102 	bfi	r1, r3, #0, #3
   22526:	48a8      	ldr	r0, [pc, #672]	; (227c8 <net_6lo_compress+0x2d4>)
   22528:	4ba8      	ldr	r3, [pc, #672]	; (227cc <net_6lo_compress+0x2d8>)
   2252a:	1a1b      	subs	r3, r3, r0
   2252c:	08db      	lsrs	r3, r3, #3
   2252e:	f36f 01c5 	bfc	r1, #3, #3
   22532:	f363 118f 	bfi	r1, r3, #6, #10
   22536:	f8ad 1000 	strh.w	r1, [sp]
   2253a:	2328      	movs	r3, #40	; 0x28
   2253c:	49a4      	ldr	r1, [pc, #656]	; (227d0 <net_6lo_compress+0x2dc>)
   2253e:	48a5      	ldr	r0, [pc, #660]	; (227d4 <net_6lo_compress+0x2e0>)
   22540:	f7df fc36 	bl	1db0 <log_3>
   22544:	e7e6      	b.n	22514 <net_6lo_compress+0x20>
	return pkt->frags->data;
   22546:	689d      	ldr	r5, [r3, #8]
	if (ipv6->nexthdr == IPPROTO_UDP &&
   22548:	79ab      	ldrb	r3, [r5, #6]
   2254a:	2b11      	cmp	r3, #17
   2254c:	d116      	bne.n	2257c <net_6lo_compress+0x88>
   2254e:	2a2f      	cmp	r2, #47	; 0x2f
   22550:	d814      	bhi.n	2257c <net_6lo_compress+0x88>
		NET_ERR("Invalid length %d, min %d",
   22552:	4b9c      	ldr	r3, [pc, #624]	; (227c4 <net_6lo_compress+0x2d0>)
   22554:	681b      	ldr	r3, [r3, #0]
   22556:	0759      	lsls	r1, r3, #29
   22558:	d0dc      	beq.n	22514 <net_6lo_compress+0x20>
   2255a:	2301      	movs	r3, #1
   2255c:	f04f 0100 	mov.w	r1, #0
   22560:	f363 0102 	bfi	r1, r3, #0, #3
   22564:	4898      	ldr	r0, [pc, #608]	; (227c8 <net_6lo_compress+0x2d4>)
   22566:	4b99      	ldr	r3, [pc, #612]	; (227cc <net_6lo_compress+0x2d8>)
   22568:	1a1b      	subs	r3, r3, r0
   2256a:	08db      	lsrs	r3, r3, #3
   2256c:	f36f 01c5 	bfc	r1, #3, #3
   22570:	f363 118f 	bfi	r1, r3, #6, #10
   22574:	f8ad 1000 	strh.w	r1, [sp]
   22578:	2330      	movs	r3, #48	; 0x30
   2257a:	e7df      	b.n	2253c <net_6lo_compress+0x48>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   2257c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22580:	4638      	mov	r0, r7
   22582:	f7fe ff8b 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   22586:	4606      	mov	r6, r0
   22588:	2800      	cmp	r0, #0
   2258a:	d0c3      	beq.n	22514 <net_6lo_compress+0x20>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   2258c:	6883      	ldr	r3, [r0, #8]
   2258e:	2260      	movs	r2, #96	; 0x60
   22590:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   22592:	6883      	ldr	r3, [r0, #8]
   22594:	2200      	movs	r2, #0
   22596:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   22598:	f895 c001 	ldrb.w	ip, [r5, #1]
   2259c:	782a      	ldrb	r2, [r5, #0]
   2259e:	68b4      	ldr	r4, [r6, #8]
   225a0:	ea4f 131c 	mov.w	r3, ip, lsr #4
   225a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   225a8:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   225aa:	0898      	lsrs	r0, r3, #2
   225ac:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
   225b0:	b240      	sxtb	r0, r0
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   225b2:	f01c 0f0f 	tst.w	ip, #15
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   225b6:	fa5f fe80 	uxtb.w	lr, r0
   225ba:	f002 020f 	and.w	r2, r2, #15
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   225be:	d163      	bne.n	22688 <net_6lo_compress+0x194>
   225c0:	886b      	ldrh	r3, [r5, #2]
   225c2:	2b00      	cmp	r3, #0
   225c4:	d160      	bne.n	22688 <net_6lo_compress+0x194>
   225c6:	7823      	ldrb	r3, [r4, #0]
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   225c8:	2a00      	cmp	r2, #0
   225ca:	d155      	bne.n	22678 <net_6lo_compress+0x184>
   225cc:	f01c 0ff0 	tst.w	ip, #240	; 0xf0
   225d0:	d152      	bne.n	22678 <net_6lo_compress+0x184>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   225d2:	f043 0318 	orr.w	r3, r3, #24
   225d6:	7023      	strb	r3, [r4, #0]
   225d8:	2402      	movs	r4, #2
	offset = compress_nh(ipv6, frag, offset);
   225da:	79aa      	ldrb	r2, [r5, #6]
   225dc:	68b3      	ldr	r3, [r6, #8]
	if (ipv6->nexthdr == IPPROTO_UDP) {
   225de:	2a11      	cmp	r2, #17
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   225e0:	bf09      	itett	eq
   225e2:	781a      	ldrbeq	r2, [r3, #0]
		IPHC[offset++] = ipv6->nexthdr;
   225e4:	551a      	strbne	r2, [r3, r4]
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   225e6:	f042 0204 	orreq.w	r2, r2, #4
   225ea:	701a      	strbeq	r2, [r3, #0]
	offset = compress_hoplimit(ipv6, frag, offset);
   225ec:	79ea      	ldrb	r2, [r5, #7]
   225ee:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = ipv6->nexthdr;
   225f0:	bf1c      	itt	ne
   225f2:	1c61      	addne	r1, r4, #1
   225f4:	b2cc      	uxtbne	r4, r1
	switch (ipv6->hop_limit) {
   225f6:	2a40      	cmp	r2, #64	; 0x40
   225f8:	d06c      	beq.n	226d4 <net_6lo_compress+0x1e0>
   225fa:	2aff      	cmp	r2, #255	; 0xff
   225fc:	d06e      	beq.n	226dc <net_6lo_compress+0x1e8>
   225fe:	2a01      	cmp	r2, #1
   22600:	d170      	bne.n	226e4 <net_6lo_compress+0x1f0>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   22602:	781a      	ldrb	r2, [r3, #0]
   22604:	f042 0201 	orr.w	r2, r2, #1
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   22608:	701a      	strb	r2, [r3, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2260a:	68ab      	ldr	r3, [r5, #8]
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   2260c:	f105 0008 	add.w	r0, r5, #8
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22610:	2b00      	cmp	r3, #0
   22612:	d16b      	bne.n	226ec <net_6lo_compress+0x1f8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22614:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22616:	2b00      	cmp	r3, #0
   22618:	d168      	bne.n	226ec <net_6lo_compress+0x1f8>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2261a:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2261c:	2b00      	cmp	r3, #0
   2261e:	d165      	bne.n	226ec <net_6lo_compress+0x1f8>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   22620:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22622:	2b00      	cmp	r3, #0
   22624:	d162      	bne.n	226ec <net_6lo_compress+0x1f8>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   22626:	68b2      	ldr	r2, [r6, #8]
   22628:	7853      	ldrb	r3, [r2, #1]
   2262a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2262e:	7053      	strb	r3, [r2, #1]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   22630:	7e2b      	ldrb	r3, [r5, #24]
   22632:	2bff      	cmp	r3, #255	; 0xff
   22634:	f040 80d0 	bne.w	227d8 <net_6lo_compress+0x2e4>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   22638:	68b2      	ldr	r2, [r6, #8]
   2263a:	7853      	ldrb	r3, [r2, #1]
   2263c:	f043 0308 	orr.w	r3, r3, #8
   22640:	7053      	strb	r3, [r2, #1]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22642:	7e6b      	ldrb	r3, [r5, #25]
   22644:	68b0      	ldr	r0, [r6, #8]
   22646:	2b02      	cmp	r3, #2
   22648:	d10a      	bne.n	22660 <net_6lo_compress+0x16c>
	return ((addr->s6_addr[1] == 0x02) &&
   2264a:	8b6b      	ldrh	r3, [r5, #26]
   2264c:	b943      	cbnz	r3, 22660 <net_6lo_compress+0x16c>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2264e:	69eb      	ldr	r3, [r5, #28]
   22650:	b933      	cbnz	r3, 22660 <net_6lo_compress+0x16c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22652:	6a2b      	ldr	r3, [r5, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22654:	b923      	cbnz	r3, 22660 <net_6lo_compress+0x16c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22656:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   2265a:	2b00      	cmp	r3, #0
   2265c:	f000 8085 	beq.w	2276a <net_6lo_compress+0x276>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22660:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22662:	2b00      	cmp	r3, #0
   22664:	f000 808f 	beq.w	22786 <net_6lo_compress+0x292>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   22668:	2210      	movs	r2, #16
   2266a:	f105 0118 	add.w	r1, r5, #24
   2266e:	4420      	add	r0, r4
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   22670:	f7e3 fc0a 	bl	5e88 <memcpy>
		offset += 16;
   22674:	3410      	adds	r4, #16
   22676:	e084      	b.n	22782 <net_6lo_compress+0x28e>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   22678:	f043 0310 	orr.w	r3, r3, #16
   2267c:	7023      	strb	r3, [r4, #0]
			IPHC[offset++] = tcl;
   2267e:	68b3      	ldr	r3, [r6, #8]
   22680:	2403      	movs	r4, #3
   22682:	f883 e002 	strb.w	lr, [r3, #2]
   22686:	e7a8      	b.n	225da <net_6lo_compress+0xe6>
   22688:	1ca9      	adds	r1, r5, #2
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   2268a:	b9aa      	cbnz	r2, 226b8 <net_6lo_compress+0x1c4>
   2268c:	f01c 0f30 	tst.w	ip, #48	; 0x30
   22690:	d012      	beq.n	226b8 <net_6lo_compress+0x1c4>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   22692:	7823      	ldrb	r3, [r4, #0]
   22694:	f043 0308 	orr.w	r3, r3, #8
   22698:	7023      	strb	r3, [r4, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   2269a:	786b      	ldrb	r3, [r5, #1]
   2269c:	68b2      	ldr	r2, [r6, #8]
   2269e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   226a2:	f003 030f 	and.w	r3, r3, #15
   226a6:	4303      	orrs	r3, r0
   226a8:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   226aa:	68b0      	ldr	r0, [r6, #8]
   226ac:	2202      	movs	r2, #2
   226ae:	3003      	adds	r0, #3
   226b0:	f7e3 fbea 	bl	5e88 <memcpy>
			offset += 2;
   226b4:	2405      	movs	r4, #5
   226b6:	e790      	b.n	225da <net_6lo_compress+0xe6>
			IPHC[offset++] = tcl;
   226b8:	f884 e002 	strb.w	lr, [r4, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   226bc:	786b      	ldrb	r3, [r5, #1]
   226be:	68b2      	ldr	r2, [r6, #8]
   226c0:	f003 030f 	and.w	r3, r3, #15
   226c4:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   226c6:	68b0      	ldr	r0, [r6, #8]
   226c8:	2202      	movs	r2, #2
   226ca:	3004      	adds	r0, #4
   226cc:	f7e3 fbdc 	bl	5e88 <memcpy>
			offset += 2;
   226d0:	2406      	movs	r4, #6
   226d2:	e782      	b.n	225da <net_6lo_compress+0xe6>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   226d4:	781a      	ldrb	r2, [r3, #0]
   226d6:	f042 0202 	orr.w	r2, r2, #2
   226da:	e795      	b.n	22608 <net_6lo_compress+0x114>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   226dc:	781a      	ldrb	r2, [r3, #0]
   226de:	f042 0203 	orr.w	r2, r2, #3
   226e2:	e791      	b.n	22608 <net_6lo_compress+0x114>
		IPHC[offset++] = ipv6->hop_limit;
   226e4:	1c61      	adds	r1, r4, #1
   226e6:	551a      	strb	r2, [r3, r4]
   226e8:	b2cc      	uxtb	r4, r1
   226ea:	e78e      	b.n	2260a <net_6lo_compress+0x116>
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   226ec:	892a      	ldrh	r2, [r5, #8]
   226ee:	f248 03fe 	movw	r3, #33022	; 0x80fe
   226f2:	429a      	cmp	r2, r3
   226f4:	d131      	bne.n	2275a <net_6lo_compress+0x266>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   226f6:	896b      	ldrh	r3, [r5, #10]
   226f8:	bb7b      	cbnz	r3, 2275a <net_6lo_compress+0x266>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   226fa:	68eb      	ldr	r3, [r5, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   226fc:	bb6b      	cbnz	r3, 2275a <net_6lo_compress+0x266>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   226fe:	692b      	ldr	r3, [r5, #16]
   22700:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22704:	d102      	bne.n	2270c <net_6lo_compress+0x218>
   22706:	8aab      	ldrh	r3, [r5, #20]
   22708:	2bfe      	cmp	r3, #254	; 0xfe
   2270a:	d012      	beq.n	22732 <net_6lo_compress+0x23e>
			if (net_ipv6_addr_based_on_ll(
   2270c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   22710:	f7ff fe98 	bl	22444 <net_ipv6_addr_based_on_ll>
   22714:	68b3      	ldr	r3, [r6, #8]
   22716:	b9d8      	cbnz	r0, 22750 <net_6lo_compress+0x25c>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   22718:	785a      	ldrb	r2, [r3, #1]
   2271a:	f042 0210 	orr.w	r2, r2, #16
   2271e:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   22720:	68b0      	ldr	r0, [r6, #8]
   22722:	2208      	movs	r2, #8
   22724:	4420      	add	r0, r4
   22726:	f105 0110 	add.w	r1, r5, #16
   2272a:	f7e3 fbad 	bl	5e88 <memcpy>
				offset += 8;
   2272e:	3408      	adds	r4, #8
   22730:	e00c      	b.n	2274c <net_6lo_compress+0x258>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   22732:	68b2      	ldr	r2, [r6, #8]
   22734:	7853      	ldrb	r3, [r2, #1]
   22736:	f043 0320 	orr.w	r3, r3, #32
   2273a:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   2273c:	68b0      	ldr	r0, [r6, #8]
   2273e:	2202      	movs	r2, #2
   22740:	4420      	add	r0, r4
   22742:	f105 0116 	add.w	r1, r5, #22
   22746:	f7e3 fb9f 	bl	5e88 <memcpy>
			offset += 2;
   2274a:	3402      	adds	r4, #2
				offset += 8;
   2274c:	b2e4      	uxtb	r4, r4
   2274e:	e76f      	b.n	22630 <net_6lo_compress+0x13c>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   22750:	785a      	ldrb	r2, [r3, #1]
   22752:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   22756:	705a      	strb	r2, [r3, #1]
   22758:	e76a      	b.n	22630 <net_6lo_compress+0x13c>
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   2275a:	68b3      	ldr	r3, [r6, #8]
   2275c:	4601      	mov	r1, r0
   2275e:	2210      	movs	r2, #16
   22760:	1918      	adds	r0, r3, r4
   22762:	f7e3 fb91 	bl	5e88 <memcpy>
		offset += sizeof(struct in6_addr);
   22766:	3410      	adds	r4, #16
   22768:	e7f0      	b.n	2274c <net_6lo_compress+0x258>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   2276a:	7843      	ldrb	r3, [r0, #1]
   2276c:	f043 0303 	orr.w	r3, r3, #3
   22770:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   22772:	68b0      	ldr	r0, [r6, #8]
   22774:	2201      	movs	r2, #1
   22776:	4420      	add	r0, r4
   22778:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2277c:	f7e3 fb84 	bl	5e88 <memcpy>
		offset++;
   22780:	3401      	adds	r4, #1
				offset += 8;
   22782:	b2e4      	uxtb	r4, r4
   22784:	e061      	b.n	2284a <net_6lo_compress+0x356>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22786:	6a2b      	ldr	r3, [r5, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22788:	2b00      	cmp	r3, #0
   2278a:	f040 813a 	bne.w	22a02 <net_6lo_compress+0x50e>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2278e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   22792:	2b00      	cmp	r3, #0
   22794:	f040 8135 	bne.w	22a02 <net_6lo_compress+0x50e>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   22798:	7843      	ldrb	r3, [r0, #1]
   2279a:	f043 0302 	orr.w	r3, r3, #2
   2279e:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   227a0:	68b0      	ldr	r0, [r6, #8]
   227a2:	2201      	movs	r2, #1
   227a4:	f105 0119 	add.w	r1, r5, #25
   227a8:	4420      	add	r0, r4
   227aa:	f7e3 fb6d 	bl	5e88 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   227ae:	68b3      	ldr	r3, [r6, #8]
		offset++;
   227b0:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   227b2:	2203      	movs	r2, #3
   227b4:	f105 0125 	add.w	r1, r5, #37	; 0x25
   227b8:	fa53 f080 	uxtab	r0, r3, r0
   227bc:	f7e3 fb64 	bl	5e88 <memcpy>
		offset += 3;
   227c0:	3404      	adds	r4, #4
   227c2:	e7de      	b.n	22782 <net_6lo_compress+0x28e>
   227c4:	2000d768 	.word	0x2000d768
   227c8:	0002cff8 	.word	0x0002cff8
   227cc:	0002d0a8 	.word	0x0002d0a8
   227d0:	00032832 	.word	0x00032832
   227d4:	00032871 	.word	0x00032871
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   227d8:	8b2a      	ldrh	r2, [r5, #24]
   227da:	f248 03fe 	movw	r3, #33022	; 0x80fe
   227de:	429a      	cmp	r2, r3
   227e0:	f105 0018 	add.w	r0, r5, #24
   227e4:	d152      	bne.n	2288c <net_6lo_compress+0x398>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   227e6:	8b6b      	ldrh	r3, [r5, #26]
   227e8:	2b00      	cmp	r3, #0
   227ea:	d14f      	bne.n	2288c <net_6lo_compress+0x398>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   227ec:	69eb      	ldr	r3, [r5, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   227ee:	2b00      	cmp	r3, #0
   227f0:	d14c      	bne.n	2288c <net_6lo_compress+0x398>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   227f2:	6a2b      	ldr	r3, [r5, #32]
   227f4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   227f8:	d102      	bne.n	22800 <net_6lo_compress+0x30c>
   227fa:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   227fc:	2bfe      	cmp	r3, #254	; 0xfe
   227fe:	d012      	beq.n	22826 <net_6lo_compress+0x332>
			if (net_ipv6_addr_based_on_ll(
   22800:	f107 0134 	add.w	r1, r7, #52	; 0x34
   22804:	f7ff fe1e 	bl	22444 <net_ipv6_addr_based_on_ll>
   22808:	68b3      	ldr	r3, [r6, #8]
   2280a:	b9d0      	cbnz	r0, 22842 <net_6lo_compress+0x34e>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   2280c:	785a      	ldrb	r2, [r3, #1]
   2280e:	f042 0201 	orr.w	r2, r2, #1
   22812:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   22814:	68b0      	ldr	r0, [r6, #8]
   22816:	2208      	movs	r2, #8
   22818:	4420      	add	r0, r4
   2281a:	f105 0120 	add.w	r1, r5, #32
   2281e:	f7e3 fb33 	bl	5e88 <memcpy>
				offset += 8;
   22822:	3408      	adds	r4, #8
   22824:	e7ad      	b.n	22782 <net_6lo_compress+0x28e>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   22826:	68b2      	ldr	r2, [r6, #8]
   22828:	7853      	ldrb	r3, [r2, #1]
   2282a:	f043 0302 	orr.w	r3, r3, #2
   2282e:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   22830:	68b0      	ldr	r0, [r6, #8]
   22832:	2202      	movs	r2, #2
   22834:	4420      	add	r0, r4
   22836:	f105 0126 	add.w	r1, r5, #38	; 0x26
   2283a:	f7e3 fb25 	bl	5e88 <memcpy>
			offset += 2;
   2283e:	3402      	adds	r4, #2
   22840:	e79f      	b.n	22782 <net_6lo_compress+0x28e>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   22842:	785a      	ldrb	r2, [r3, #1]
   22844:	f042 0203 	orr.w	r2, r2, #3
   22848:	705a      	strb	r2, [r3, #1]
	if (ipv6->nexthdr != IPPROTO_UDP) {
   2284a:	79ab      	ldrb	r3, [r5, #6]
   2284c:	2b11      	cmp	r3, #17
   2284e:	f040 80b6 	bne.w	229be <net_6lo_compress+0x4ca>
		udp = net_udp_get_hdr(pkt, &hdr);
   22852:	a902      	add	r1, sp, #8
   22854:	4638      	mov	r0, r7
   22856:	f007 fd55 	bl	2a304 <net_udp_get_hdr>
		if (!udp) {
   2285a:	4681      	mov	r9, r0
   2285c:	b9d8      	cbnz	r0, 22896 <net_6lo_compress+0x3a2>
			NET_ERR("could not get UDP header");
   2285e:	4b78      	ldr	r3, [pc, #480]	; (22a40 <net_6lo_compress+0x54c>)
   22860:	681b      	ldr	r3, [r3, #0]
   22862:	075b      	lsls	r3, r3, #29
   22864:	f43f ae56 	beq.w	22514 <net_6lo_compress+0x20>
   22868:	2301      	movs	r3, #1
   2286a:	f04f 0200 	mov.w	r2, #0
   2286e:	f363 0202 	bfi	r2, r3, #0, #3
   22872:	4974      	ldr	r1, [pc, #464]	; (22a44 <net_6lo_compress+0x550>)
   22874:	4b74      	ldr	r3, [pc, #464]	; (22a48 <net_6lo_compress+0x554>)
   22876:	1a5b      	subs	r3, r3, r1
   22878:	f360 02c5 	bfi	r2, r0, #3, #3
   2287c:	08db      	lsrs	r3, r3, #3
   2287e:	f363 128f 	bfi	r2, r3, #6, #10
   22882:	4972      	ldr	r1, [pc, #456]	; (22a4c <net_6lo_compress+0x558>)
   22884:	4872      	ldr	r0, [pc, #456]	; (22a50 <net_6lo_compress+0x55c>)
   22886:	f7df fa67 	bl	1d58 <log_1>
   2288a:	e643      	b.n	22514 <net_6lo_compress+0x20>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   2288c:	68b3      	ldr	r3, [r6, #8]
   2288e:	4601      	mov	r1, r0
   22890:	2210      	movs	r2, #16
   22892:	1918      	adds	r0, r3, r4
   22894:	e6ec      	b.n	22670 <net_6lo_compress+0x17c>
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   22896:	68b3      	ldr	r3, [r6, #8]
   22898:	22f0      	movs	r2, #240	; 0xf0
   2289a:	551a      	strb	r2, [r3, r4]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   2289c:	8802      	ldrh	r2, [r0, #0]
   2289e:	68b5      	ldr	r5, [r6, #8]
   228a0:	0213      	lsls	r3, r2, #8
   228a2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   228a6:	b29b      	uxth	r3, r3
   228a8:	f640 720b 	movw	r2, #3851	; 0xf0b
   228ac:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   228b0:	1c60      	adds	r0, r4, #1
   228b2:	4594      	cmp	ip, r2
   228b4:	b2c0      	uxtb	r0, r0
   228b6:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   228ba:	d14b      	bne.n	22954 <net_6lo_compress+0x460>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   228bc:	0211      	lsls	r1, r2, #8
   228be:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   228c2:	f3c1 110b 	ubfx	r1, r1, #4, #12
   228c6:	4561      	cmp	r1, ip
   228c8:	d144      	bne.n	22954 <net_6lo_compress+0x460>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   228ca:	5d2b      	ldrb	r3, [r5, r4]
   228cc:	f043 0303 	orr.w	r3, r3, #3
   228d0:	552b      	strb	r3, [r5, r4]
		tmp = (u8_t)(htons(udp->src_port));
   228d2:	f8b9 3000 	ldrh.w	r3, [r9]
   228d6:	0a1a      	lsrs	r2, r3, #8
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   228d8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   228dc:	f3c3 2303 	ubfx	r3, r3, #8, #4
   228e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		IPHC[offset++] = tmp;
   228e4:	68b2      	ldr	r2, [r6, #8]
   228e6:	3402      	adds	r4, #2
   228e8:	5413      	strb	r3, [r2, r0]
   228ea:	b2e5      	uxtb	r5, r4
	memcpy(&IPHC[offset], &udp->chksum, 2);
   228ec:	68b0      	ldr	r0, [r6, #8]
   228ee:	2202      	movs	r2, #2
   228f0:	f109 0106 	add.w	r1, r9, #6
   228f4:	4428      	add	r0, r5
   228f6:	f7e3 fac7 	bl	5e88 <memcpy>
		net_udp_set_hdr(pkt, udp);
   228fa:	4649      	mov	r1, r9
   228fc:	4638      	mov	r0, r7
   228fe:	f007 fd5f 	bl	2a3c0 <net_udp_set_hdr>
	offset += 2;
   22902:	1cac      	adds	r4, r5, #2
   22904:	b2e4      	uxtb	r4, r4
		compressed += NET_UDPH_LEN;
   22906:	2530      	movs	r5, #48	; 0x30
	net_buf_add(frag, offset);
   22908:	f106 0908 	add.w	r9, r6, #8
   2290c:	4621      	mov	r1, r4
   2290e:	4648      	mov	r0, r9
   22910:	f7fb fdfc 	bl	1e50c <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   22914:	697b      	ldr	r3, [r7, #20]
   22916:	68b0      	ldr	r0, [r6, #8]
	       pkt->frags->len - compressed);
   22918:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   2291a:	6899      	ldr	r1, [r3, #8]
   2291c:	1b52      	subs	r2, r2, r5
   2291e:	4429      	add	r1, r5
   22920:	4420      	add	r0, r4
   22922:	f7e3 fab1 	bl	5e88 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   22926:	697b      	ldr	r3, [r7, #20]
   22928:	8999      	ldrh	r1, [r3, #12]
   2292a:	4648      	mov	r0, r9
   2292c:	1b49      	subs	r1, r1, r5
   2292e:	f7fb fded 	bl	1e50c <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   22932:	697a      	ldr	r2, [r7, #20]
   22934:	2100      	movs	r1, #0
   22936:	4638      	mov	r0, r7
   22938:	f7fe fe88 	bl	2164c <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   2293c:	4638      	mov	r0, r7
   2293e:	4631      	mov	r1, r6
   22940:	f7fe feae 	bl	216a0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22944:	4638      	mov	r0, r7
   22946:	f7fe ff43 	bl	217d0 <net_pkt_compact>
	if (fragment) {
   2294a:	f1b8 0f00 	cmp.w	r8, #0
   2294e:	d138      	bne.n	229c2 <net_6lo_compress+0x4ce>
	return true;
   22950:	2001      	movs	r0, #1
   22952:	e5e0      	b.n	22516 <net_6lo_compress+0x22>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   22954:	b2d2      	uxtb	r2, r2
   22956:	2af0      	cmp	r2, #240	; 0xf0
   22958:	d113      	bne.n	22982 <net_6lo_compress+0x48e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   2295a:	5d2b      	ldrb	r3, [r5, r4]
   2295c:	f043 0301 	orr.w	r3, r3, #1
   22960:	552b      	strb	r3, [r5, r4]
		memcpy(&IPHC[offset], &udp->src_port, 2);
   22962:	68b3      	ldr	r3, [r6, #8]
   22964:	2202      	movs	r2, #2
   22966:	4418      	add	r0, r3
   22968:	4649      	mov	r1, r9
   2296a:	f7e3 fa8d 	bl	5e88 <memcpy>
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   2296e:	1d25      	adds	r5, r4, #4
   22970:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   22974:	68b2      	ldr	r2, [r6, #8]
		offset += 2;
   22976:	3403      	adds	r4, #3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   22978:	b2e4      	uxtb	r4, r4
   2297a:	0a1b      	lsrs	r3, r3, #8
   2297c:	b2ed      	uxtb	r5, r5
   2297e:	5513      	strb	r3, [r2, r4]
   22980:	e7b4      	b.n	228ec <net_6lo_compress+0x3f8>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   22982:	0a1b      	lsrs	r3, r3, #8
   22984:	2bf0      	cmp	r3, #240	; 0xf0
   22986:	d113      	bne.n	229b0 <net_6lo_compress+0x4bc>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   22988:	5d2b      	ldrb	r3, [r5, r4]
   2298a:	f043 0302 	orr.w	r3, r3, #2
   2298e:	552b      	strb	r3, [r5, r4]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   22990:	4649      	mov	r1, r9
   22992:	68b3      	ldr	r3, [r6, #8]
   22994:	f831 2b02 	ldrh.w	r2, [r1], #2
   22998:	0a12      	lsrs	r2, r2, #8
   2299a:	541a      	strb	r2, [r3, r0]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   2299c:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   2299e:	1ca0      	adds	r0, r4, #2
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   229a0:	2202      	movs	r2, #2
   229a2:	fa53 f080 	uxtab	r0, r3, r0
   229a6:	f7e3 fa6f 	bl	5e88 <memcpy>
		offset += 2;
   229aa:	3404      	adds	r4, #4
		offset += 4;
   229ac:	b2e5      	uxtb	r5, r4
   229ae:	e79d      	b.n	228ec <net_6lo_compress+0x3f8>
		memcpy(&IPHC[offset], &udp->src_port, 4);
   229b0:	2204      	movs	r2, #4
   229b2:	4649      	mov	r1, r9
   229b4:	4428      	add	r0, r5
   229b6:	f7e3 fa67 	bl	5e88 <memcpy>
		offset += 4;
   229ba:	3405      	adds	r4, #5
   229bc:	e7f6      	b.n	229ac <net_6lo_compress+0x4b8>
	compressed = NET_IPV6H_LEN;
   229be:	2528      	movs	r5, #40	; 0x28
   229c0:	e7a2      	b.n	22908 <net_6lo_compress+0x414>
		return fragment(pkt, compressed - offset);
   229c2:	1b29      	subs	r1, r5, r4
		return fragment(pkt, -1);
   229c4:	4638      	mov	r0, r7
   229c6:	47c0      	blx	r8
   229c8:	e5a5      	b.n	22516 <net_6lo_compress+0x22>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   229ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   229ce:	f7fe fd65 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   229d2:	4604      	mov	r4, r0
   229d4:	2800      	cmp	r0, #0
   229d6:	f43f ad9d 	beq.w	22514 <net_6lo_compress+0x20>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   229da:	f850 3f08 	ldr.w	r3, [r0, #8]!
   229de:	2241      	movs	r2, #65	; 0x41
   229e0:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   229e2:	2101      	movs	r1, #1
   229e4:	f7fb fd92 	bl	1e50c <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   229e8:	4638      	mov	r0, r7
   229ea:	4621      	mov	r1, r4
   229ec:	f7fe fe58 	bl	216a0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   229f0:	4638      	mov	r0, r7
   229f2:	f7fe feed 	bl	217d0 <net_pkt_compact>
	if (fragment) {
   229f6:	f1b8 0f00 	cmp.w	r8, #0
   229fa:	d0a9      	beq.n	22950 <net_6lo_compress+0x45c>
		return fragment(pkt, -1);
   229fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a00:	e7e0      	b.n	229c4 <net_6lo_compress+0x4d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22a02:	8c2b      	ldrh	r3, [r5, #32]
   22a04:	2b00      	cmp	r3, #0
   22a06:	f47f ae2f 	bne.w	22668 <net_6lo_compress+0x174>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22a0a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   22a0e:	2b00      	cmp	r3, #0
   22a10:	f47f ae2a 	bne.w	22668 <net_6lo_compress+0x174>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   22a14:	7843      	ldrb	r3, [r0, #1]
   22a16:	f043 0301 	orr.w	r3, r3, #1
   22a1a:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22a1c:	68b0      	ldr	r0, [r6, #8]
   22a1e:	2201      	movs	r2, #1
   22a20:	f105 0119 	add.w	r1, r5, #25
   22a24:	4420      	add	r0, r4
   22a26:	f7e3 fa2f 	bl	5e88 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   22a2a:	68b3      	ldr	r3, [r6, #8]
		offset++;
   22a2c:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   22a2e:	2205      	movs	r2, #5
   22a30:	f105 0123 	add.w	r1, r5, #35	; 0x23
   22a34:	fa53 f080 	uxtab	r0, r3, r0
   22a38:	f7e3 fa26 	bl	5e88 <memcpy>
		offset += 5;
   22a3c:	3406      	adds	r4, #6
   22a3e:	e6a0      	b.n	22782 <net_6lo_compress+0x28e>
   22a40:	2000d768 	.word	0x2000d768
   22a44:	0002cff8 	.word	0x0002cff8
   22a48:	0002d0a8 	.word	0x0002d0a8
   22a4c:	00032832 	.word	0x00032832
   22a50:	0003288f 	.word	0x0003288f

00022a54 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_ASSERT(pkt && pkt->frags);
   22a58:	4606      	mov	r6, r0
{
   22a5a:	b087      	sub	sp, #28
	NET_ASSERT(pkt && pkt->frags);
   22a5c:	b108      	cbz	r0, 22a62 <net_6lo_uncompress+0xe>
   22a5e:	6943      	ldr	r3, [r0, #20]
   22a60:	b9a3      	cbnz	r3, 22a8c <net_6lo_uncompress+0x38>
   22a62:	4bbe      	ldr	r3, [pc, #760]	; (22d5c <net_6lo_uncompress+0x308>)
   22a64:	681b      	ldr	r3, [r3, #0]
   22a66:	075a      	lsls	r2, r3, #29
   22a68:	d010      	beq.n	22a8c <net_6lo_uncompress+0x38>
   22a6a:	2301      	movs	r3, #1
   22a6c:	f04f 0200 	mov.w	r2, #0
   22a70:	f363 0202 	bfi	r2, r3, #0, #3
   22a74:	49ba      	ldr	r1, [pc, #744]	; (22d60 <net_6lo_uncompress+0x30c>)
   22a76:	4bbb      	ldr	r3, [pc, #748]	; (22d64 <net_6lo_uncompress+0x310>)
   22a78:	48bb      	ldr	r0, [pc, #748]	; (22d68 <net_6lo_uncompress+0x314>)
   22a7a:	1a5b      	subs	r3, r3, r1
   22a7c:	f36f 02c5 	bfc	r2, #3, #3
   22a80:	08db      	lsrs	r3, r3, #3
   22a82:	f363 128f 	bfi	r2, r3, #6, #10
   22a86:	49b9      	ldr	r1, [pc, #740]	; (22d6c <net_6lo_uncompress+0x318>)
   22a88:	f7df f966 	bl	1d58 <log_1>

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22a8c:	6974      	ldr	r4, [r6, #20]
   22a8e:	68a0      	ldr	r0, [r4, #8]
   22a90:	7803      	ldrb	r3, [r0, #0]
   22a92:	f003 0860 	and.w	r8, r3, #96	; 0x60
   22a96:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
   22a9a:	f040 823a 	bne.w	22f12 <net_6lo_uncompress+0x4be>
	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   22a9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   22aa2:	2b00      	cmp	r3, #0
   22aa4:	da03      	bge.n	22aae <net_6lo_uncompress+0x5a>
	return false;
   22aa6:	2000      	movs	r0, #0
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
}
   22aa8:	b007      	add	sp, #28
   22aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   22aae:	2164      	movs	r1, #100	; 0x64
   22ab0:	4630      	mov	r0, r6
   22ab2:	f7fe fcf3 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   22ab6:	4607      	mov	r7, r0
   22ab8:	2800      	cmp	r0, #0
   22aba:	d0f4      	beq.n	22aa6 <net_6lo_uncompress+0x52>
	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   22abc:	6885      	ldr	r5, [r0, #8]
	pkt->ip_hdr_len = len;
   22abe:	2328      	movs	r3, #40	; 0x28
	ipv6->vtc = 0x60;
   22ac0:	f885 8000 	strb.w	r8, [r5]
   22ac4:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   22ac8:	6973      	ldr	r3, [r6, #20]
   22aca:	6899      	ldr	r1, [r3, #8]
   22acc:	780b      	ldrb	r3, [r1, #0]
   22ace:	f003 0318 	and.w	r3, r3, #24
   22ad2:	2b08      	cmp	r3, #8
   22ad4:	d054      	beq.n	22b80 <net_6lo_uncompress+0x12c>
   22ad6:	d802      	bhi.n	22ade <net_6lo_uncompress+0x8a>
   22ad8:	b153      	cbz	r3, 22af0 <net_6lo_uncompress+0x9c>
   22ada:	2402      	movs	r4, #2
   22adc:	e01d      	b.n	22b1a <net_6lo_uncompress+0xc6>
   22ade:	2b10      	cmp	r3, #16
   22ae0:	d05c      	beq.n	22b9c <net_6lo_uncompress+0x148>
   22ae2:	2b18      	cmp	r3, #24
   22ae4:	d1f9      	bne.n	22ada <net_6lo_uncompress+0x86>
		ipv6->tcflow = 0;
   22ae6:	2300      	movs	r3, #0
   22ae8:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   22aea:	70ab      	strb	r3, [r5, #2]
   22aec:	70eb      	strb	r3, [r5, #3]
   22aee:	e7f4      	b.n	22ada <net_6lo_uncompress+0x86>
		tcl = CIPHC[offset++];
   22af0:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   22af2:	0093      	lsls	r3, r2, #2
   22af4:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   22af8:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   22afa:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   22afc:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   22b00:	702a      	strb	r2, [r5, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   22b02:	78ca      	ldrb	r2, [r1, #3]
   22b04:	f002 020f 	and.w	r2, r2, #15
   22b08:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   22b0c:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   22b0e:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   22b10:	3104      	adds	r1, #4
   22b12:	18a8      	adds	r0, r5, r2
   22b14:	f7e3 f9b8 	bl	5e88 <memcpy>
		offset += 2;
   22b18:	2406      	movs	r4, #6
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   22b1a:	6973      	ldr	r3, [r6, #20]
   22b1c:	689a      	ldr	r2, [r3, #8]
   22b1e:	7813      	ldrb	r3, [r2, #0]
   22b20:	075b      	lsls	r3, r3, #29
		ipv6->nexthdr = CIPHC[offset];
   22b22:	bf5c      	itt	pl
   22b24:	5d13      	ldrbpl	r3, [r2, r4]
   22b26:	71ab      	strbpl	r3, [r5, #6]
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   22b28:	7813      	ldrb	r3, [r2, #0]
		offset++;
   22b2a:	bf58      	it	pl
   22b2c:	3401      	addpl	r4, #1
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   22b2e:	f003 0303 	and.w	r3, r3, #3
		offset++;
   22b32:	bf58      	it	pl
   22b34:	b2e4      	uxtbpl	r4, r4
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   22b36:	2b02      	cmp	r3, #2
   22b38:	d040      	beq.n	22bbc <net_6lo_uncompress+0x168>
   22b3a:	2b03      	cmp	r3, #3
   22b3c:	d041      	beq.n	22bc2 <net_6lo_uncompress+0x16e>
   22b3e:	2b01      	cmp	r3, #1
   22b40:	d03d      	beq.n	22bbe <net_6lo_uncompress+0x16a>
		ipv6->hop_limit = CIPHC[offset++];
   22b42:	5d12      	ldrb	r2, [r2, r4]
   22b44:	71ea      	strb	r2, [r5, #7]
   22b46:	1c63      	adds	r3, r4, #1
   22b48:	b2dc      	uxtb	r4, r3
	(void)memset(&ipv6->src.s6_addr[0], 0, 16);
   22b4a:	f105 0908 	add.w	r9, r5, #8
   22b4e:	2210      	movs	r2, #16
   22b50:	2100      	movs	r1, #0
   22b52:	4648      	mov	r0, r9
	(void)memset(&ipv6->dst.s6_addr[0], 0, 16);
   22b54:	f105 0818 	add.w	r8, r5, #24
	(void)memset(&ipv6->src.s6_addr[0], 0, 16);
   22b58:	f7e3 f9c3 	bl	5ee2 <memset>
	(void)memset(&ipv6->dst.s6_addr[0], 0, 16);
   22b5c:	2100      	movs	r1, #0
   22b5e:	2210      	movs	r2, #16
   22b60:	4640      	mov	r0, r8
   22b62:	f7e3 f9be 	bl	5ee2 <memset>
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   22b66:	6973      	ldr	r3, [r6, #20]
   22b68:	6899      	ldr	r1, [r3, #8]
   22b6a:	784b      	ldrb	r3, [r1, #1]
   22b6c:	f013 0f40 	tst.w	r3, #64	; 0x40
   22b70:	f003 0330 	and.w	r3, r3, #48	; 0x30
   22b74:	d027      	beq.n	22bc6 <net_6lo_uncompress+0x172>
		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   22b76:	b35b      	cbz	r3, 22bd0 <net_6lo_uncompress+0x17c>
	net_pkt_frag_unref(frag);
   22b78:	4638      	mov	r0, r7
   22b7a:	f7fe fd4c 	bl	21616 <net_pkt_frag_unref>
   22b7e:	e792      	b.n	22aa6 <net_6lo_uncompress+0x52>
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   22b80:	788b      	ldrb	r3, [r1, #2]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   22b82:	099a      	lsrs	r2, r3, #6
   22b84:	f003 030f 	and.w	r3, r3, #15
   22b88:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   22b8c:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   22b8e:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   22b90:	3103      	adds	r1, #3
   22b92:	18a8      	adds	r0, r5, r2
   22b94:	f7e3 f978 	bl	5e88 <memcpy>
		offset += 2;
   22b98:	2405      	movs	r4, #5
   22b9a:	e7be      	b.n	22b1a <net_6lo_uncompress+0xc6>
		tcl = CIPHC[offset];
   22b9c:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   22b9e:	0093      	lsls	r3, r2, #2
   22ba0:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   22ba4:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   22ba6:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   22ba8:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
		ipv6->tcflow = (tcl & 0x0F) << 4;
   22bac:	011b      	lsls	r3, r3, #4
   22bae:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   22bb0:	2300      	movs	r3, #0
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   22bb2:	702a      	strb	r2, [r5, #0]
		ipv6->flow = 0;
   22bb4:	70ab      	strb	r3, [r5, #2]
   22bb6:	70eb      	strb	r3, [r5, #3]
		offset++;
   22bb8:	2403      	movs	r4, #3
   22bba:	e7ae      	b.n	22b1a <net_6lo_uncompress+0xc6>
		ipv6->hop_limit = 64;
   22bbc:	2340      	movs	r3, #64	; 0x40
		ipv6->hop_limit = 255;
   22bbe:	71eb      	strb	r3, [r5, #7]
   22bc0:	e7c3      	b.n	22b4a <net_6lo_uncompress+0xf6>
   22bc2:	23ff      	movs	r3, #255	; 0xff
   22bc4:	e7fb      	b.n	22bbe <net_6lo_uncompress+0x16a>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   22bc6:	b2db      	uxtb	r3, r3
   22bc8:	2b10      	cmp	r3, #16
   22bca:	d02c      	beq.n	22c26 <net_6lo_uncompress+0x1d2>
   22bcc:	d819      	bhi.n	22c02 <net_6lo_uncompress+0x1ae>
   22bce:	b313      	cbz	r3, 22c16 <net_6lo_uncompress+0x1c2>
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   22bd0:	6973      	ldr	r3, [r6, #20]
   22bd2:	689b      	ldr	r3, [r3, #8]
   22bd4:	785a      	ldrb	r2, [r3, #1]
   22bd6:	0710      	lsls	r0, r2, #28
   22bd8:	f140 8091 	bpl.w	22cfe <net_6lo_uncompress+0x2aa>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   22bdc:	0751      	lsls	r1, r2, #29
   22bde:	f100 80ba 	bmi.w	22d56 <net_6lo_uncompress+0x302>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   22be2:	f002 0203 	and.w	r2, r2, #3
   22be6:	2a02      	cmp	r2, #2
   22be8:	eb03 0104 	add.w	r1, r3, r4
   22bec:	d045      	beq.n	22c7a <net_6lo_uncompress+0x226>
   22bee:	2a03      	cmp	r2, #3
   22bf0:	d051      	beq.n	22c96 <net_6lo_uncompress+0x242>
   22bf2:	2a01      	cmp	r2, #1
   22bf4:	d032      	beq.n	22c5c <net_6lo_uncompress+0x208>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   22bf6:	2210      	movs	r2, #16
   22bf8:	4640      	mov	r0, r8
   22bfa:	f7e3 f945 	bl	5e88 <memcpy>
		offset += 16;
   22bfe:	3410      	adds	r4, #16
   22c00:	e039      	b.n	22c76 <net_6lo_uncompress+0x222>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   22c02:	2b20      	cmp	r3, #32
   22c04:	d01b      	beq.n	22c3e <net_6lo_uncompress+0x1ea>
   22c06:	2b30      	cmp	r3, #48	; 0x30
   22c08:	d1e2      	bne.n	22bd0 <net_6lo_uncompress+0x17c>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_lladdr_src(pkt));
   22c0a:	f106 012c 	add.w	r1, r6, #44	; 0x2c
   22c0e:	4648      	mov	r0, r9
   22c10:	f7ff fbd6 	bl	223c0 <net_ipv6_addr_create_iid>
   22c14:	e7dc      	b.n	22bd0 <net_6lo_uncompress+0x17c>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   22c16:	4421      	add	r1, r4
   22c18:	2210      	movs	r2, #16
   22c1a:	4648      	mov	r0, r9
   22c1c:	f7e3 f934 	bl	5e88 <memcpy>
		offset += 16;
   22c20:	3410      	adds	r4, #16
		offset += 2;
   22c22:	b2e4      	uxtb	r4, r4
   22c24:	e7d4      	b.n	22bd0 <net_6lo_uncompress+0x17c>
		ipv6->src.s6_addr[0] = 0xFE;
   22c26:	23fe      	movs	r3, #254	; 0xfe
   22c28:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[1] = 0x80;
   22c2a:	2380      	movs	r3, #128	; 0x80
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   22c2c:	4421      	add	r1, r4
		ipv6->src.s6_addr[1] = 0x80;
   22c2e:	726b      	strb	r3, [r5, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   22c30:	2208      	movs	r2, #8
   22c32:	f105 0010 	add.w	r0, r5, #16
   22c36:	f7e3 f927 	bl	5e88 <memcpy>
		offset += 8;
   22c3a:	3408      	adds	r4, #8
   22c3c:	e7f1      	b.n	22c22 <net_6lo_uncompress+0x1ce>
		ipv6->src.s6_addr[1] = 0x80;
   22c3e:	2280      	movs	r2, #128	; 0x80
		ipv6->src.s6_addr[0] = 0xFE;
   22c40:	23fe      	movs	r3, #254	; 0xfe
		ipv6->src.s6_addr[1] = 0x80;
   22c42:	726a      	strb	r2, [r5, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   22c44:	22ff      	movs	r2, #255	; 0xff
   22c46:	74ea      	strb	r2, [r5, #19]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   22c48:	4421      	add	r1, r4
		ipv6->src.s6_addr[0] = 0xFE;
   22c4a:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[12] = 0xFE;
   22c4c:	752b      	strb	r3, [r5, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   22c4e:	2202      	movs	r2, #2
   22c50:	f105 0016 	add.w	r0, r5, #22
   22c54:	f7e3 f918 	bl	5e88 <memcpy>
		offset += 2;
   22c58:	3402      	adds	r4, #2
   22c5a:	e7e2      	b.n	22c22 <net_6lo_uncompress+0x1ce>
		ipv6->dst.s6_addr[0] = 0xFF;
   22c5c:	22ff      	movs	r2, #255	; 0xff
   22c5e:	762a      	strb	r2, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   22c60:	780a      	ldrb	r2, [r1, #0]
   22c62:	766a      	strb	r2, [r5, #25]
   22c64:	1c61      	adds	r1, r4, #1
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   22c66:	2205      	movs	r2, #5
   22c68:	fa53 f181 	uxtab	r1, r3, r1
   22c6c:	f105 0023 	add.w	r0, r5, #35	; 0x23
   22c70:	f7e3 f90a 	bl	5e88 <memcpy>
		offset += 5;
   22c74:	3406      	adds	r4, #6
		offset += 2;
   22c76:	b2e4      	uxtb	r4, r4
   22c78:	e016      	b.n	22ca8 <net_6lo_uncompress+0x254>
		ipv6->dst.s6_addr[0] = 0xFF;
   22c7a:	22ff      	movs	r2, #255	; 0xff
   22c7c:	762a      	strb	r2, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   22c7e:	5d1a      	ldrb	r2, [r3, r4]
   22c80:	766a      	strb	r2, [r5, #25]
   22c82:	1c61      	adds	r1, r4, #1
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   22c84:	2203      	movs	r2, #3
   22c86:	fa53 f181 	uxtab	r1, r3, r1
   22c8a:	f105 0025 	add.w	r0, r5, #37	; 0x25
   22c8e:	f7e3 f8fb 	bl	5e88 <memcpy>
		offset += 3;
   22c92:	3404      	adds	r4, #4
   22c94:	e7ef      	b.n	22c76 <net_6lo_uncompress+0x222>
		ipv6->dst.s6_addr[0] = 0xFF;
   22c96:	23ff      	movs	r3, #255	; 0xff
   22c98:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   22c9a:	2302      	movs	r3, #2
   22c9c:	766b      	strb	r3, [r5, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   22c9e:	3401      	adds	r4, #1
   22ca0:	780b      	ldrb	r3, [r1, #0]
   22ca2:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
   22ca6:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_IPV6H_LEN);
   22ca8:	f107 0308 	add.w	r3, r7, #8
   22cac:	4618      	mov	r0, r3
   22cae:	2128      	movs	r1, #40	; 0x28
   22cb0:	9301      	str	r3, [sp, #4]
   22cb2:	f7fb fc2b 	bl	1e50c <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   22cb6:	6973      	ldr	r3, [r6, #20]
   22cb8:	6898      	ldr	r0, [r3, #8]
   22cba:	f890 8000 	ldrb.w	r8, [r0]
   22cbe:	f018 0804 	ands.w	r8, r8, #4
   22cc2:	f000 80eb 	beq.w	22e9c <net_6lo_uncompress+0x448>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   22cc6:	5d03      	ldrb	r3, [r0, r4]
   22cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   22ccc:	2bf0      	cmp	r3, #240	; 0xf0
   22cce:	d053      	beq.n	22d78 <net_6lo_uncompress+0x324>
		NET_ERR("Unsupported next header");
   22cd0:	4b22      	ldr	r3, [pc, #136]	; (22d5c <net_6lo_uncompress+0x308>)
   22cd2:	681b      	ldr	r3, [r3, #0]
   22cd4:	075a      	lsls	r2, r3, #29
   22cd6:	f43f af4f 	beq.w	22b78 <net_6lo_uncompress+0x124>
   22cda:	2301      	movs	r3, #1
   22cdc:	f04f 0200 	mov.w	r2, #0
   22ce0:	f363 0202 	bfi	r2, r3, #0, #3
   22ce4:	491e      	ldr	r1, [pc, #120]	; (22d60 <net_6lo_uncompress+0x30c>)
   22ce6:	4b1f      	ldr	r3, [pc, #124]	; (22d64 <net_6lo_uncompress+0x310>)
   22ce8:	4821      	ldr	r0, [pc, #132]	; (22d70 <net_6lo_uncompress+0x31c>)
   22cea:	1a5b      	subs	r3, r3, r1
   22cec:	08db      	lsrs	r3, r3, #3
   22cee:	f36f 02c5 	bfc	r2, #3, #3
   22cf2:	f363 128f 	bfi	r2, r3, #6, #10
   22cf6:	491f      	ldr	r1, [pc, #124]	; (22d74 <net_6lo_uncompress+0x320>)
   22cf8:	f7df f82e 	bl	1d58 <log_1>
   22cfc:	e73c      	b.n	22b78 <net_6lo_uncompress+0x124>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   22cfe:	f002 0203 	and.w	r2, r2, #3
   22d02:	2a02      	cmp	r2, #2
   22d04:	d011      	beq.n	22d2a <net_6lo_uncompress+0x2d6>
   22d06:	2a03      	cmp	r2, #3
   22d08:	d01f      	beq.n	22d4a <net_6lo_uncompress+0x2f6>
   22d0a:	2a01      	cmp	r2, #1
   22d0c:	eb03 0104 	add.w	r1, r3, r4
   22d10:	f47f af71 	bne.w	22bf6 <net_6lo_uncompress+0x1a2>
		ipv6->dst.s6_addr[0] = 0xFE;
   22d14:	23fe      	movs	r3, #254	; 0xfe
   22d16:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   22d18:	2380      	movs	r3, #128	; 0x80
   22d1a:	766b      	strb	r3, [r5, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   22d1c:	2208      	movs	r2, #8
   22d1e:	f105 0020 	add.w	r0, r5, #32
   22d22:	f7e3 f8b1 	bl	5e88 <memcpy>
		offset += 8;
   22d26:	3408      	adds	r4, #8
   22d28:	e7a5      	b.n	22c76 <net_6lo_uncompress+0x222>
		ipv6->dst.s6_addr[1] = 0x80;
   22d2a:	2080      	movs	r0, #128	; 0x80
		ipv6->dst.s6_addr[0] = 0xFE;
   22d2c:	21fe      	movs	r1, #254	; 0xfe
		ipv6->dst.s6_addr[1] = 0x80;
   22d2e:	7668      	strb	r0, [r5, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   22d30:	20ff      	movs	r0, #255	; 0xff
		ipv6->dst.s6_addr[0] = 0xFE;
   22d32:	7629      	strb	r1, [r5, #24]
		ipv6->dst.s6_addr[11] = 0xFF;
   22d34:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   22d38:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   22d3c:	f105 0026 	add.w	r0, r5, #38	; 0x26
   22d40:	1919      	adds	r1, r3, r4
   22d42:	f7e3 f8a1 	bl	5e88 <memcpy>
		offset += 2;
   22d46:	3402      	adds	r4, #2
   22d48:	e795      	b.n	22c76 <net_6lo_uncompress+0x222>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_lladdr_dst(pkt));
   22d4a:	f106 0134 	add.w	r1, r6, #52	; 0x34
   22d4e:	4640      	mov	r0, r8
   22d50:	f7ff fb36 	bl	223c0 <net_ipv6_addr_create_iid>
   22d54:	e7a8      	b.n	22ca8 <net_6lo_uncompress+0x254>
		return 0;
   22d56:	2400      	movs	r4, #0
   22d58:	e7a6      	b.n	22ca8 <net_6lo_uncompress+0x254>
   22d5a:	bf00      	nop
   22d5c:	2000d768 	.word	0x2000d768
   22d60:	0002cff8 	.word	0x0002cff8
   22d64:	0002d0a8 	.word	0x0002d0a8
   22d68:	000328ac 	.word	0x000328ac
   22d6c:	0003285e 	.word	0x0003285e
   22d70:	000328d5 	.word	0x000328d5
   22d74:	00032847 	.word	0x00032847
	ipv6->nexthdr = IPPROTO_UDP;
   22d78:	2311      	movs	r3, #17
   22d7a:	71ab      	strb	r3, [r5, #6]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   22d7c:	5d02      	ldrb	r2, [r0, r4]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   22d7e:	f8d7 b008 	ldr.w	fp, [r7, #8]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   22d82:	f002 0808 	and.w	r8, r2, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22d86:	f104 0c01 	add.w	ip, r4, #1
   22d8a:	f002 0203 	and.w	r2, r2, #3
   22d8e:	fa5f fc8c 	uxtb.w	ip, ip
   22d92:	2a02      	cmp	r2, #2
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   22d94:	f10b 0928 	add.w	r9, fp, #40	; 0x28
   22d98:	eb00 010c 	add.w	r1, r0, ip
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22d9c:	d058      	beq.n	22e50 <net_6lo_uncompress+0x3fc>
   22d9e:	2a03      	cmp	r2, #3
   22da0:	d065      	beq.n	22e6e <net_6lo_uncompress+0x41a>
   22da2:	2a01      	cmp	r2, #1
   22da4:	f104 0a03 	add.w	sl, r4, #3
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22da8:	f04f 0202 	mov.w	r2, #2
   22dac:	4648      	mov	r0, r9
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22dae:	d040      	beq.n	22e32 <net_6lo_uncompress+0x3de>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22db0:	f7e3 f86a 	bl	5e88 <memcpy>
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22db4:	6972      	ldr	r2, [r6, #20]
   22db6:	6891      	ldr	r1, [r2, #8]
   22db8:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   22dbc:	2202      	movs	r2, #2
   22dbe:	fa51 f18a 	uxtab	r1, r1, sl
   22dc2:	f7e3 f861 	bl	5e88 <memcpy>
		offset += 2;
   22dc6:	3405      	adds	r4, #5
		offset++;
   22dc8:	b2e4      	uxtb	r4, r4
	if (!chksum) {
   22dca:	f1b8 0f00 	cmp.w	r8, #0
   22dce:	d109      	bne.n	22de4 <net_6lo_uncompress+0x390>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   22dd0:	6972      	ldr	r2, [r6, #20]
   22dd2:	6891      	ldr	r1, [r2, #8]
   22dd4:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   22dd8:	4421      	add	r1, r4
   22dda:	2202      	movs	r2, #2
   22ddc:	f7e3 f854 	bl	5e88 <memcpy>
		offset += 2;
   22de0:	3402      	adds	r4, #2
   22de2:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_UDPH_LEN);
   22de4:	2108      	movs	r1, #8
   22de6:	9801      	ldr	r0, [sp, #4]
   22de8:	f7fb fb90 	bl	1e50c <net_buf_simple_add>
	if (pkt->frags->len < offset) {
   22dec:	6973      	ldr	r3, [r6, #20]
   22dee:	899a      	ldrh	r2, [r3, #12]
   22df0:	fa1f fa84 	uxth.w	sl, r4
   22df4:	4552      	cmp	r2, sl
   22df6:	d253      	bcs.n	22ea0 <net_6lo_uncompress+0x44c>
		NET_ERR("pkt %p too short len %d vs %d", pkt,
   22df8:	4b4c      	ldr	r3, [pc, #304]	; (22f2c <net_6lo_uncompress+0x4d8>)
   22dfa:	681b      	ldr	r3, [r3, #0]
   22dfc:	075b      	lsls	r3, r3, #29
   22dfe:	f43f aebb 	beq.w	22b78 <net_6lo_uncompress+0x124>
   22e02:	2101      	movs	r1, #1
   22e04:	f04f 0300 	mov.w	r3, #0
   22e08:	f361 0302 	bfi	r3, r1, #0, #3
   22e0c:	4848      	ldr	r0, [pc, #288]	; (22f30 <net_6lo_uncompress+0x4dc>)
   22e0e:	4949      	ldr	r1, [pc, #292]	; (22f34 <net_6lo_uncompress+0x4e0>)
   22e10:	1a09      	subs	r1, r1, r0
   22e12:	08c9      	lsrs	r1, r1, #3
   22e14:	f36f 03c5 	bfc	r3, #3, #3
   22e18:	f361 138f 	bfi	r3, r1, #6, #10
   22e1c:	4946      	ldr	r1, [pc, #280]	; (22f38 <net_6lo_uncompress+0x4e4>)
   22e1e:	4847      	ldr	r0, [pc, #284]	; (22f3c <net_6lo_uncompress+0x4e8>)
   22e20:	e9cd 1602 	strd	r1, r6, [sp, #8]
   22e24:	e9cd 2404 	strd	r2, r4, [sp, #16]
   22e28:	a902      	add	r1, sp, #8
   22e2a:	2204      	movs	r2, #4
   22e2c:	f7de ffdb 	bl	1de6 <log_n>
   22e30:	e6a2      	b.n	22b78 <net_6lo_uncompress+0x124>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22e32:	f7e3 f829 	bl	5e88 <memcpy>
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   22e36:	6972      	ldr	r2, [r6, #20]
   22e38:	fa5f fa8a 	uxtb.w	sl, sl
   22e3c:	6892      	ldr	r2, [r2, #8]
   22e3e:	f812 200a 	ldrb.w	r2, [r2, sl]
   22e42:	0212      	lsls	r2, r2, #8
   22e44:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   22e48:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset += 2;
   22e4c:	3404      	adds	r4, #4
   22e4e:	e7bb      	b.n	22dc8 <net_6lo_uncompress+0x374>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   22e50:	f810 100c 	ldrb.w	r1, [r0, ip]
   22e54:	0209      	lsls	r1, r1, #8
   22e56:	f041 01f0 	orr.w	r1, r1, #240	; 0xf0
   22e5a:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
		offset++;
   22e5e:	1ca1      	adds	r1, r4, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22e60:	fa50 f181 	uxtab	r1, r0, r1
   22e64:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   22e68:	f7e3 f80e 	bl	5e88 <memcpy>
   22e6c:	e7ee      	b.n	22e4c <net_6lo_uncompress+0x3f8>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   22e6e:	f810 200c 	ldrb.w	r2, [r0, ip]
   22e72:	0912      	lsrs	r2, r2, #4
   22e74:	0212      	lsls	r2, r2, #8
   22e76:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   22e7a:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   22e7e:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   22e82:	f810 200c 	ldrb.w	r2, [r0, ip]
   22e86:	0212      	lsls	r2, r2, #8
   22e88:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   22e8c:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   22e90:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   22e94:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset++;
   22e98:	3402      	adds	r4, #2
   22e9a:	e795      	b.n	22dc8 <net_6lo_uncompress+0x374>
	struct net_udp_hdr *udp = NULL;
   22e9c:	46c1      	mov	r9, r8
   22e9e:	e7a5      	b.n	22dec <net_6lo_uncompress+0x398>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   22ea0:	6898      	ldr	r0, [r3, #8]
   22ea2:	1b12      	subs	r2, r2, r4
   22ea4:	1901      	adds	r1, r0, r4
   22ea6:	f7e2 ffd8 	bl	5e5a <memmove>
	pkt->frags->len -= offset;
   22eaa:	6973      	ldr	r3, [r6, #20]
   22eac:	899a      	ldrh	r2, [r3, #12]
   22eae:	eba2 020a 	sub.w	r2, r2, sl
   22eb2:	819a      	strh	r2, [r3, #12]
	if (net_pkt_ll_reserve(pkt)) {
   22eb4:	f896 2040 	ldrb.w	r2, [r6, #64]	; 0x40
   22eb8:	b132      	cbz	r2, 22ec8 <net_6lo_uncompress+0x474>
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   22eba:	6899      	ldr	r1, [r3, #8]
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   22ebc:	68bb      	ldr	r3, [r7, #8]
   22ebe:	4250      	negs	r0, r2
   22ec0:	4401      	add	r1, r0
   22ec2:	4418      	add	r0, r3
   22ec4:	f7e2 ffe0 	bl	5e88 <memcpy>
	net_pkt_frag_insert(pkt, frag);
   22ec8:	4639      	mov	r1, r7
   22eca:	4630      	mov	r0, r6
   22ecc:	f7fe fbe8 	bl	216a0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22ed0:	4630      	mov	r0, r6
   22ed2:	f7fe fc7d 	bl	217d0 <net_pkt_compact>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   22ed6:	6972      	ldr	r2, [r6, #20]
	size_t bytes = 0;
   22ed8:	2300      	movs	r3, #0
	while (buf) {
   22eda:	b93a      	cbnz	r2, 22eec <net_6lo_uncompress+0x498>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22edc:	79a9      	ldrb	r1, [r5, #6]
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   22ede:	3b28      	subs	r3, #40	; 0x28
   22ee0:	ba5b      	rev16	r3, r3
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22ee2:	2911      	cmp	r1, #17
	ipv6->len = htons(len);
   22ee4:	80ab      	strh	r3, [r5, #4]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22ee6:	d005      	beq.n	22ef4 <net_6lo_uncompress+0x4a0>
		return uncompress_ipv6_header(pkt);
   22ee8:	2001      	movs	r0, #1
   22eea:	e5dd      	b.n	22aa8 <net_6lo_uncompress+0x54>
		bytes += buf->len;
   22eec:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   22eee:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   22ef0:	440b      	add	r3, r1
   22ef2:	e7f2      	b.n	22eda <net_6lo_uncompress+0x486>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22ef4:	f1b9 0f00 	cmp.w	r9, #0
   22ef8:	d0f6      	beq.n	22ee8 <net_6lo_uncompress+0x494>
		udp->len = htons(len);
   22efa:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   22efe:	f1b8 0f00 	cmp.w	r8, #0
   22f02:	d0f1      	beq.n	22ee8 <net_6lo_uncompress+0x494>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
}

static inline u16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22f04:	4630      	mov	r0, r6
   22f06:	f7ff f9d3 	bl	222b0 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   22f0a:	43c0      	mvns	r0, r0
   22f0c:	f8a9 0006 	strh.w	r0, [r9, #6]
   22f10:	e7ea      	b.n	22ee8 <net_6lo_uncompress+0x494>
	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22f12:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22f16:	2b41      	cmp	r3, #65	; 0x41
   22f18:	d1e6      	bne.n	22ee8 <net_6lo_uncompress+0x494>
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22f1a:	89a2      	ldrh	r2, [r4, #12]
   22f1c:	1c41      	adds	r1, r0, #1
   22f1e:	3a01      	subs	r2, #1
   22f20:	f7e2 ff9b 	bl	5e5a <memmove>
	frag->len -= 1;
   22f24:	89a3      	ldrh	r3, [r4, #12]
   22f26:	3b01      	subs	r3, #1
   22f28:	81a3      	strh	r3, [r4, #12]
   22f2a:	e7dd      	b.n	22ee8 <net_6lo_uncompress+0x494>
   22f2c:	2000d768 	.word	0x2000d768
   22f30:	0002cff8 	.word	0x0002cff8
   22f34:	0002d0a8 	.word	0x0002d0a8
   22f38:	00032847 	.word	0x00032847
   22f3c:	000328f1 	.word	0x000328f1

00022f40 <net_pkt_append_be16_timeout.constprop.20>:
static inline bool net_pkt_append_be16_timeout(struct net_pkt *pkt,
   22f40:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   22f42:	aa02      	add	r2, sp, #8
   22f44:	ba49      	rev16	r1, r1
   22f46:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   22f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22f4e:	2102      	movs	r1, #2
   22f50:	f7fe fc82 	bl	21858 <net_pkt_append>
}
   22f54:	1e83      	subs	r3, r0, #2
   22f56:	4258      	negs	r0, r3
   22f58:	4158      	adcs	r0, r3
   22f5a:	b003      	add	sp, #12
   22f5c:	f85d fb04 	ldr.w	pc, [sp], #4

00022f60 <net_icmpv6_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   22f60:	4b03      	ldr	r3, [pc, #12]	; (22f70 <net_icmpv6_register_handler+0x10>)
   22f62:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   22f64:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   22f66:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   22f68:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   22f6a:	b902      	cbnz	r2, 22f6e <net_icmpv6_register_handler+0xe>
	list->tail = node;
   22f6c:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   22f6e:	4770      	bx	lr
   22f70:	20002654 	.word	0x20002654

00022f74 <net_icmpv6_unregister_handler>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22f74:	4b0c      	ldr	r3, [pc, #48]	; (22fa8 <net_icmpv6_unregister_handler+0x34>)
   22f76:	681a      	ldr	r2, [r3, #0]
   22f78:	2100      	movs	r1, #0
   22f7a:	b902      	cbnz	r2, 22f7e <net_icmpv6_unregister_handler+0xa>

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
}
   22f7c:	4770      	bx	lr
   22f7e:	4290      	cmp	r0, r2
   22f80:	d10f      	bne.n	22fa2 <net_icmpv6_unregister_handler+0x2e>
   22f82:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   22f84:	b939      	cbnz	r1, 22f96 <net_icmpv6_unregister_handler+0x22>
   22f86:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   22f88:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22f8a:	4288      	cmp	r0, r1
   22f8c:	d100      	bne.n	22f90 <net_icmpv6_unregister_handler+0x1c>
	list->tail = node;
   22f8e:	605a      	str	r2, [r3, #4]
	parent->next = child;
   22f90:	2300      	movs	r3, #0
   22f92:	6003      	str	r3, [r0, #0]
   22f94:	4770      	bx	lr
   22f96:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22f98:	685a      	ldr	r2, [r3, #4]
   22f9a:	4290      	cmp	r0, r2
	list->tail = node;
   22f9c:	bf08      	it	eq
   22f9e:	6059      	streq	r1, [r3, #4]
   22fa0:	e7f6      	b.n	22f90 <net_icmpv6_unregister_handler+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22fa2:	4611      	mov	r1, r2
   22fa4:	6812      	ldr	r2, [r2, #0]
   22fa6:	e7e8      	b.n	22f7a <net_icmpv6_unregister_handler+0x6>
   22fa8:	20002654 	.word	0x20002654

00022fac <net_icmpv6_set_chksum>:
	 */
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
}

int net_icmpv6_set_chksum(struct net_pkt *pkt)
{
   22fac:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *temp_frag;
	u16_t temp_pos;
	u16_t pos;

	/* Skip to the position of checksum */
	frag = net_frag_skip(pkt->frags, 0, &pos,
   22fae:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
{
   22fb2:	b086      	sub	sp, #24
	frag = net_frag_skip(pkt->frags, 0, &pos,
   22fb4:	1c9a      	adds	r2, r3, #2
			     net_pkt_ip_hdr_len(pkt) +
   22fb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
	u16_t chksum = 0;
   22fba:	2100      	movs	r1, #0
	frag = net_frag_skip(pkt->frags, 0, &pos,
   22fbc:	4413      	add	r3, r2
	return net_frag_read(frag, offset, pos, len, NULL);
   22fbe:	9100      	str	r1, [sp, #0]
   22fc0:	f10d 0216 	add.w	r2, sp, #22
{
   22fc4:	4604      	mov	r4, r0
   22fc6:	b29b      	uxth	r3, r3
   22fc8:	6940      	ldr	r0, [r0, #20]
	u16_t chksum = 0;
   22fca:	f8ad 1012 	strh.w	r1, [sp, #18]
   22fce:	f7fe fc87 	bl	218e0 <net_frag_read>
			     net_pkt_ipv6_ext_len(pkt) +
			     1 + 1 /* type + code */);
	if (pos > 0 && !frag) {
   22fd2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22fd6:	4605      	mov	r5, r0
   22fd8:	b122      	cbz	r2, 22fe4 <net_icmpv6_set_chksum+0x38>
   22fda:	b918      	cbnz	r0, 22fe4 <net_icmpv6_set_chksum+0x38>
		return -EINVAL;
   22fdc:	f06f 0015 	mvn.w	r0, #21
	if (temp_pos > 0 && !temp_frag) {
		return -EINVAL;
	}

	return 0;
}
   22fe0:	b006      	add	sp, #24
   22fe2:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(chksum),
   22fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22fe8:	9302      	str	r3, [sp, #8]
   22fea:	f10d 0612 	add.w	r6, sp, #18
   22fee:	2302      	movs	r3, #2
   22ff0:	9300      	str	r3, [sp, #0]
   22ff2:	9601      	str	r6, [sp, #4]
   22ff4:	f10d 0316 	add.w	r3, sp, #22
   22ff8:	4629      	mov	r1, r5
   22ffa:	4620      	mov	r0, r4
	temp_pos = pos;
   22ffc:	f8ad 2014 	strh.w	r2, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(chksum),
   23000:	f7fe fce4 	bl	219cc <net_pkt_write>
	if (pos > 0 && !frag) {
   23004:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   23008:	b10b      	cbz	r3, 2300e <net_icmpv6_set_chksum+0x62>
   2300a:	2800      	cmp	r0, #0
   2300c:	d0e6      	beq.n	22fdc <net_icmpv6_set_chksum+0x30>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   2300e:	213a      	movs	r1, #58	; 0x3a
   23010:	4620      	mov	r0, r4
   23012:	f7ff f94d 	bl	222b0 <net_calc_chksum>
	temp_frag = net_pkt_write(pkt, temp_frag, temp_pos, &temp_pos,
   23016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	chksum = ~net_calc_chksum_icmpv6(pkt);
   2301a:	43c0      	mvns	r0, r0
	temp_frag = net_pkt_write(pkt, temp_frag, temp_pos, &temp_pos,
   2301c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   23020:	2302      	movs	r3, #2
	chksum = ~net_calc_chksum_icmpv6(pkt);
   23022:	f8ad 0012 	strh.w	r0, [sp, #18]
	temp_frag = net_pkt_write(pkt, temp_frag, temp_pos, &temp_pos,
   23026:	9300      	str	r3, [sp, #0]
   23028:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2302c:	ab05      	add	r3, sp, #20
   2302e:	4629      	mov	r1, r5
   23030:	4620      	mov	r0, r4
   23032:	f7fe fccb 	bl	219cc <net_pkt_write>
	if (temp_pos > 0 && !temp_frag) {
   23036:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2303a:	b11b      	cbz	r3, 23044 <net_icmpv6_set_chksum+0x98>
   2303c:	2800      	cmp	r0, #0
   2303e:	d0cd      	beq.n	22fdc <net_icmpv6_set_chksum+0x30>
	return 0;
   23040:	2000      	movs	r0, #0
   23042:	e7cd      	b.n	22fe0 <net_icmpv6_set_chksum+0x34>
   23044:	4618      	mov	r0, r3
   23046:	e7cb      	b.n	22fe0 <net_icmpv6_set_chksum+0x34>

00023048 <net_icmpv6_get_hdr>:

int net_icmpv6_get_hdr(struct net_pkt *pkt, struct net_icmp_hdr *hdr)
{
   23048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct net_buf *frag;
	u16_t pos;

	frag = net_frag_read(pkt->frags,
   2304a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
			     net_pkt_ip_hdr_len(pkt) +
   2304e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
	frag = net_frag_read(pkt->frags,
   23052:	9100      	str	r1, [sp, #0]
   23054:	441c      	add	r4, r3
   23056:	f10d 020e 	add.w	r2, sp, #14
   2305a:	2304      	movs	r3, #4
   2305c:	b2a1      	uxth	r1, r4
   2305e:	6940      	ldr	r0, [r0, #20]
   23060:	f7fe fc3e 	bl	218e0 <net_frag_read>
			     net_pkt_ipv6_ext_len(pkt),
			     &pos, sizeof(*hdr), (u8_t *)hdr);
	if (pos > 0 && !frag) {
   23064:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23068:	b1c3      	cbz	r3, 2309c <net_icmpv6_get_hdr+0x54>
   2306a:	b9b8      	cbnz	r0, 2309c <net_icmpv6_get_hdr+0x54>
		NET_ERR("Cannot get the ICMPv6 header");;
   2306c:	4b0d      	ldr	r3, [pc, #52]	; (230a4 <net_icmpv6_get_hdr+0x5c>)
   2306e:	681b      	ldr	r3, [r3, #0]
   23070:	075b      	lsls	r3, r3, #29
   23072:	d010      	beq.n	23096 <net_icmpv6_get_hdr+0x4e>
   23074:	2301      	movs	r3, #1
   23076:	f04f 0200 	mov.w	r2, #0
   2307a:	f363 0202 	bfi	r2, r3, #0, #3
   2307e:	490a      	ldr	r1, [pc, #40]	; (230a8 <net_icmpv6_get_hdr+0x60>)
   23080:	4b0a      	ldr	r3, [pc, #40]	; (230ac <net_icmpv6_get_hdr+0x64>)
   23082:	1a5b      	subs	r3, r3, r1
   23084:	f360 02c5 	bfi	r2, r0, #3, #3
   23088:	08db      	lsrs	r3, r3, #3
   2308a:	f363 128f 	bfi	r2, r3, #6, #10
   2308e:	4908      	ldr	r1, [pc, #32]	; (230b0 <net_icmpv6_get_hdr+0x68>)
   23090:	4808      	ldr	r0, [pc, #32]	; (230b4 <net_icmpv6_get_hdr+0x6c>)
   23092:	f7de fe61 	bl	1d58 <log_1>
		return -EINVAL;
   23096:	f06f 0015 	mvn.w	r0, #21
   2309a:	e000      	b.n	2309e <net_icmpv6_get_hdr+0x56>
	}

	return 0;
   2309c:	2000      	movs	r0, #0
}
   2309e:	b004      	add	sp, #16
   230a0:	bd10      	pop	{r4, pc}
   230a2:	bf00      	nop
   230a4:	2000d790 	.word	0x2000d790
   230a8:	0002cff8 	.word	0x0002cff8
   230ac:	0002d0f8 	.word	0x0002d0f8
   230b0:	0003291b 	.word	0x0003291b
   230b4:	000329af 	.word	0x000329af

000230b8 <net_icmpv6_set_hdr>:

int net_icmpv6_set_hdr(struct net_pkt *pkt, struct net_icmp_hdr *hdr)
{
   230b8:	b510      	push	{r4, lr}
	struct net_buf *frag;
	u16_t pos;

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   230ba:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   230be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
   230c2:	b086      	sub	sp, #24
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   230c4:	441a      	add	r2, r3
   230c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   230ca:	e9cd 1301 	strd	r1, r3, [sp, #4]
   230ce:	2304      	movs	r3, #4
   230d0:	9300      	str	r3, [sp, #0]
   230d2:	b292      	uxth	r2, r2
   230d4:	f10d 0316 	add.w	r3, sp, #22
   230d8:	6941      	ldr	r1, [r0, #20]
   230da:	f7fe fc77 	bl	219cc <net_pkt_write>
			     net_pkt_ipv6_ext_len(pkt), &pos,
			     sizeof(*hdr), (u8_t *)hdr, PKT_WAIT_TIME);
	if (pos > 0 && !frag) {
   230de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   230e2:	b1c3      	cbz	r3, 23116 <net_icmpv6_set_hdr+0x5e>
   230e4:	b9b8      	cbnz	r0, 23116 <net_icmpv6_set_hdr+0x5e>
		NET_ERR("Cannot set the ICMPv6 header");
   230e6:	4b0d      	ldr	r3, [pc, #52]	; (2311c <net_icmpv6_set_hdr+0x64>)
   230e8:	681b      	ldr	r3, [r3, #0]
   230ea:	075b      	lsls	r3, r3, #29
   230ec:	d010      	beq.n	23110 <net_icmpv6_set_hdr+0x58>
   230ee:	2301      	movs	r3, #1
   230f0:	f04f 0200 	mov.w	r2, #0
   230f4:	f363 0202 	bfi	r2, r3, #0, #3
   230f8:	4909      	ldr	r1, [pc, #36]	; (23120 <net_icmpv6_set_hdr+0x68>)
   230fa:	4b0a      	ldr	r3, [pc, #40]	; (23124 <net_icmpv6_set_hdr+0x6c>)
   230fc:	1a5b      	subs	r3, r3, r1
   230fe:	f360 02c5 	bfi	r2, r0, #3, #3
   23102:	08db      	lsrs	r3, r3, #3
   23104:	f363 128f 	bfi	r2, r3, #6, #10
   23108:	4907      	ldr	r1, [pc, #28]	; (23128 <net_icmpv6_set_hdr+0x70>)
   2310a:	4808      	ldr	r0, [pc, #32]	; (2312c <net_icmpv6_set_hdr+0x74>)
   2310c:	f7de fe24 	bl	1d58 <log_1>
		return -EINVAL;
   23110:	f06f 0015 	mvn.w	r0, #21
   23114:	e000      	b.n	23118 <net_icmpv6_set_hdr+0x60>
	}

	return 0;
   23116:	2000      	movs	r0, #0
}
   23118:	b006      	add	sp, #24
   2311a:	bd10      	pop	{r4, pc}
   2311c:	2000d790 	.word	0x2000d790
   23120:	0002cff8 	.word	0x0002cff8
   23124:	0002d0f8 	.word	0x0002d0f8
   23128:	0003292e 	.word	0x0003292e
   2312c:	00032a3c 	.word	0x00032a3c

00023130 <handle_echo_request>:

	return 0;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   23130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(orig)->src)),
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(orig)->dst)));

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   23134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	iface = net_pkt_iface(orig);
   23138:	6a07      	ldr	r7, [r0, #32]
{
   2313a:	b096      	sub	sp, #88	; 0x58
   2313c:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   2313e:	2000      	movs	r0, #0
   23140:	f7fe f994 	bl	2146c <net_pkt_get_reserve_tx>
	if (!pkt) {
   23144:	4604      	mov	r4, r0
   23146:	2800      	cmp	r0, #0
   23148:	f000 80ee 	beq.w	23328 <handle_echo_request+0x1f8>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   2314c:	696e      	ldr	r6, [r5, #20]
	size_t bytes = 0;
   2314e:	2100      	movs	r1, #0
	while (buf) {
   23150:	2e00      	cmp	r6, #0
   23152:	f040 809e 	bne.w	23292 <handle_echo_request+0x162>
   23156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2315a:	4632      	mov	r2, r6
   2315c:	4628      	mov	r0, r5
   2315e:	f7fe faa9 	bl	216b4 <net_pkt_copy>
	}

	payload_len = ntohs(NET_IPV6_HDR(orig)->len) - sizeof(NET_ICMPH_LEN) -
							NET_ICMPV6_UNUSED_LEN;
	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   23162:	4680      	mov	r8, r0
   23164:	2800      	cmp	r0, #0
   23166:	f000 80dc 	beq.w	23322 <handle_echo_request+0x1f2>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   2316a:	4601      	mov	r1, r0
   2316c:	4620      	mov	r0, r4
   2316e:	f7fe fa7d 	bl	2166c <net_pkt_frag_add>
	pkt->family = family;
   23172:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	pkt->iface = iface;
   23176:	6227      	str	r7, [r4, #32]
	pkt->family = family;
   23178:	220a      	movs	r2, #10
   2317a:	f362 03c6 	bfi	r3, r2, #3, #4
   2317e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   23182:	683b      	ldr	r3, [r7, #0]
   23184:	7d5b      	ldrb	r3, [r3, #21]
   23186:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   2318a:	683b      	ldr	r3, [r7, #0]
   2318c:	7d5b      	ldrb	r3, [r3, #21]
   2318e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   23192:	f108 0008 	add.w	r0, r8, #8
   23196:	f7fb fa21 	bl	1e5dc <net_buf_simple_headroom>
	pkt->ip_hdr_len = len;
   2319a:	2328      	movs	r3, #40	; 0x28
   2319c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   231a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   231a4:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   231a8:	2b00      	cmp	r3, #0
   231aa:	d076      	beq.n	2329a <handle_echo_request+0x16a>
	pkt->ipv6_ext_len = len;
   231ac:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	return pkt->frags->data;
   231b0:	6963      	ldr	r3, [r4, #20]
   231b2:	689a      	ldr	r2, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   231b4:	2360      	movs	r3, #96	; 0x60
   231b6:	7013      	strb	r3, [r2, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   231b8:	2300      	movs	r3, #0
   231ba:	7053      	strb	r3, [r2, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   231bc:	7093      	strb	r3, [r2, #2]
   231be:	70d3      	strb	r3, [r2, #3]
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   231c0:	687b      	ldr	r3, [r7, #4]
	if (!iface->config.ip.ipv6) {
   231c2:	b10b      	cbz	r3, 231c8 <handle_echo_request+0x98>
	return iface->config.ip.ipv6->hop_limit;
   231c4:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
   231c8:	71d3      	strb	r3, [r2, #7]
   231ca:	696b      	ldr	r3, [r5, #20]
   231cc:	689e      	ldr	r6, [r3, #8]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   231ce:	7e13      	ldrb	r3, [r2, #24]
   231d0:	2bff      	cmp	r3, #255	; 0xff
   231d2:	f106 0308 	add.w	r3, r6, #8
   231d6:	f106 0618 	add.w	r6, r6, #24
   231da:	d161      	bne.n	232a0 <handle_echo_request+0x170>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   231dc:	f10d 0e08 	add.w	lr, sp, #8
   231e0:	46f4      	mov	ip, lr
   231e2:	6818      	ldr	r0, [r3, #0]
   231e4:	6859      	ldr	r1, [r3, #4]
   231e6:	46f0      	mov	r8, lr
   231e8:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   231ec:	3308      	adds	r3, #8
   231ee:	42b3      	cmp	r3, r6
   231f0:	46c6      	mov	lr, r8
   231f2:	d1f6      	bne.n	231e2 <handle_echo_request+0xb2>
   231f4:	3218      	adds	r2, #24
   231f6:	ae06      	add	r6, sp, #24
   231f8:	4663      	mov	r3, ip
   231fa:	cb03      	ldmia	r3!, {r0, r1}
   231fc:	42b3      	cmp	r3, r6
   231fe:	6010      	str	r0, [r2, #0]
   23200:	6051      	str	r1, [r2, #4]
   23202:	469c      	mov	ip, r3
   23204:	f102 0208 	add.w	r2, r2, #8
   23208:	d1f6      	bne.n	231f8 <handle_echo_request+0xc8>
   2320a:	6963      	ldr	r3, [r4, #20]
   2320c:	f8d3 8008 	ldr.w	r8, [r3, #8]
   23210:	696b      	ldr	r3, [r5, #20]
				&NET_IPV6_HDR(orig)->src);

		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   23212:	6899      	ldr	r1, [r3, #8]
   23214:	4638      	mov	r0, r7
   23216:	3118      	adds	r1, #24
   23218:	f7fd fd20 	bl	20c5c <net_if_ipv6_select_src_addr>
   2321c:	4637      	mov	r7, r6
   2321e:	4603      	mov	r3, r0
   23220:	f100 0c10 	add.w	ip, r0, #16
   23224:	6818      	ldr	r0, [r3, #0]
   23226:	6859      	ldr	r1, [r3, #4]
   23228:	463a      	mov	r2, r7
   2322a:	c203      	stmia	r2!, {r0, r1}
   2322c:	3308      	adds	r3, #8
   2322e:	4563      	cmp	r3, ip
   23230:	4617      	mov	r7, r2
   23232:	d1f7      	bne.n	23224 <handle_echo_request+0xf4>
   23234:	f108 0308 	add.w	r3, r8, #8
   23238:	af0a      	add	r7, sp, #40	; 0x28
   2323a:	4632      	mov	r2, r6
   2323c:	ca03      	ldmia	r2!, {r0, r1}
   2323e:	42ba      	cmp	r2, r7
   23240:	6018      	str	r0, [r3, #0]
   23242:	6059      	str	r1, [r3, #4]
   23244:	4616      	mov	r6, r2
   23246:	f103 0308 	add.w	r3, r3, #8
   2324a:	d1f6      	bne.n	2323a <handle_echo_request+0x10a>
			goto drop;
		}
#endif
	}

	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   2324c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2324e:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   23250:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   23254:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_lladdr_dst(pkt)->addr = NULL;
   23258:	2600      	movs	r6, #0
   2325a:	6366      	str	r6, [r4, #52]	; 0x34

	/* ICMPv6 fields */
	ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   2325c:	a901      	add	r1, sp, #4
   2325e:	4620      	mov	r0, r4
   23260:	f7ff fef2 	bl	23048 <net_icmpv6_get_hdr>
	if (ret < 0) {
   23264:	42b0      	cmp	r0, r6
   23266:	db5c      	blt.n	23322 <handle_echo_request+0x1f2>
		goto drop;
	}

	icmp_hdr.type = NET_ICMPV6_ECHO_REPLY;
   23268:	2381      	movs	r3, #129	; 0x81
	icmp_hdr.code = 0;
	icmp_hdr.chksum = 0;
	net_icmpv6_set_hdr(pkt, &icmp_hdr);
   2326a:	a901      	add	r1, sp, #4
   2326c:	4620      	mov	r0, r4
	icmp_hdr.type = NET_ICMPV6_ECHO_REPLY;
   2326e:	9301      	str	r3, [sp, #4]
	net_icmpv6_set_hdr(pkt, &icmp_hdr);
   23270:	f7ff ff22 	bl	230b8 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt);
   23274:	4620      	mov	r0, r4
   23276:	f7ff fe99 	bl	22fac <net_icmpv6_set_chksum>

	NET_DBG("Sending Echo Reply from %s to %s",
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src)),
		log_strdup(net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->dst)));

	if (net_send_data(pkt) < 0) {
   2327a:	4620      	mov	r0, r4
   2327c:	f7fc fad6 	bl	1f82c <net_send_data>
   23280:	42b0      	cmp	r0, r6
   23282:	db4e      	blt.n	23322 <handle_echo_request+0x1f2>
		goto drop;
	}

	net_pkt_unref(orig);
   23284:	4628      	mov	r0, r5
   23286:	f7fe f9ca 	bl	2161e <net_pkt_unref>
	net_stats_update_icmp_sent(iface);

	return NET_OK;
   2328a:	4630      	mov	r0, r6

drop_no_pkt:
	net_stats_update_icmp_drop(iface);

	return NET_DROP;
}
   2328c:	b016      	add	sp, #88	; 0x58
   2328e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes += buf->len;
   23292:	89b3      	ldrh	r3, [r6, #12]
		buf = buf->frags;
   23294:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   23296:	4419      	add	r1, r3
   23298:	e75a      	b.n	23150 <handle_echo_request+0x20>
	pkt->ipv6_ext_len = len;
   2329a:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
   2329e:	e787      	b.n	231b0 <handle_echo_request+0x80>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   232a0:	af0a      	add	r7, sp, #40	; 0x28
   232a2:	463a      	mov	r2, r7
   232a4:	6818      	ldr	r0, [r3, #0]
   232a6:	6859      	ldr	r1, [r3, #4]
   232a8:	46bc      	mov	ip, r7
   232aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   232ae:	3308      	adds	r3, #8
   232b0:	42b3      	cmp	r3, r6
   232b2:	4667      	mov	r7, ip
   232b4:	d1f6      	bne.n	232a4 <handle_echo_request+0x174>
   232b6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   232b8:	af06      	add	r7, sp, #24
   232ba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	return pkt->frags->data;
   232be:	696a      	ldr	r2, [r5, #20]
   232c0:	6963      	ldr	r3, [r4, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   232c2:	6896      	ldr	r6, [r2, #8]
   232c4:	689b      	ldr	r3, [r3, #8]
   232c6:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   232ca:	f106 0218 	add.w	r2, r6, #24
   232ce:	46f4      	mov	ip, lr
   232d0:	3628      	adds	r6, #40	; 0x28
   232d2:	6810      	ldr	r0, [r2, #0]
   232d4:	6851      	ldr	r1, [r2, #4]
   232d6:	46f0      	mov	r8, lr
   232d8:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   232dc:	3208      	adds	r2, #8
   232de:	42b2      	cmp	r2, r6
   232e0:	46c6      	mov	lr, r8
   232e2:	d1f6      	bne.n	232d2 <handle_echo_request+0x1a2>
   232e4:	3308      	adds	r3, #8
   232e6:	ae12      	add	r6, sp, #72	; 0x48
   232e8:	4662      	mov	r2, ip
   232ea:	ca03      	ldmia	r2!, {r0, r1}
   232ec:	42b2      	cmp	r2, r6
   232ee:	6018      	str	r0, [r3, #0]
   232f0:	6059      	str	r1, [r3, #4]
   232f2:	4694      	mov	ip, r2
   232f4:	f103 0308 	add.w	r3, r3, #8
   232f8:	d1f6      	bne.n	232e8 <handle_echo_request+0x1b8>
   232fa:	6963      	ldr	r3, [r4, #20]
   232fc:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   23300:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   23304:	af16      	add	r7, sp, #88	; 0x58
   23306:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   2330a:	f10c 0318 	add.w	r3, ip, #24
   2330e:	4632      	mov	r2, r6
   23310:	ca03      	ldmia	r2!, {r0, r1}
   23312:	42ba      	cmp	r2, r7
   23314:	6018      	str	r0, [r3, #0]
   23316:	6059      	str	r1, [r3, #4]
   23318:	4616      	mov	r6, r2
   2331a:	f103 0308 	add.w	r3, r3, #8
   2331e:	d1f6      	bne.n	2330e <handle_echo_request+0x1de>
   23320:	e794      	b.n	2324c <handle_echo_request+0x11c>
	net_pkt_unref(pkt);
   23322:	4620      	mov	r0, r4
   23324:	f7fe f97b 	bl	2161e <net_pkt_unref>
	return NET_DROP;
   23328:	2002      	movs	r0, #2
   2332a:	e7af      	b.n	2328c <handle_echo_request+0x15c>

0002332c <net_icmpv6_get_ns_hdr>:
{
   2332c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags,
   2332e:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
   23332:	1d23      	adds	r3, r4, #4
			     net_pkt_ip_hdr_len(pkt) +
   23334:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
	frag = net_frag_read(pkt->frags,
   23338:	9100      	str	r1, [sp, #0]
   2333a:	441c      	add	r4, r3
   2333c:	f10d 020e 	add.w	r2, sp, #14
   23340:	2314      	movs	r3, #20
   23342:	b2a1      	uxth	r1, r4
   23344:	6940      	ldr	r0, [r0, #20]
   23346:	f7fe facb 	bl	218e0 <net_frag_read>
	if (pos > 0 && !frag) {
   2334a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2334e:	b1c3      	cbz	r3, 23382 <net_icmpv6_get_ns_hdr+0x56>
   23350:	b9b8      	cbnz	r0, 23382 <net_icmpv6_get_ns_hdr+0x56>
		NET_ERR("Cannot get the ICMPv6 NS header");;
   23352:	4b0d      	ldr	r3, [pc, #52]	; (23388 <net_icmpv6_get_ns_hdr+0x5c>)
   23354:	681b      	ldr	r3, [r3, #0]
   23356:	075b      	lsls	r3, r3, #29
   23358:	d010      	beq.n	2337c <net_icmpv6_get_ns_hdr+0x50>
   2335a:	2301      	movs	r3, #1
   2335c:	f04f 0200 	mov.w	r2, #0
   23360:	f363 0202 	bfi	r2, r3, #0, #3
   23364:	4909      	ldr	r1, [pc, #36]	; (2338c <net_icmpv6_get_ns_hdr+0x60>)
   23366:	4b0a      	ldr	r3, [pc, #40]	; (23390 <net_icmpv6_get_ns_hdr+0x64>)
   23368:	1a5b      	subs	r3, r3, r1
   2336a:	f360 02c5 	bfi	r2, r0, #3, #3
   2336e:	08db      	lsrs	r3, r3, #3
   23370:	f363 128f 	bfi	r2, r3, #6, #10
   23374:	4907      	ldr	r1, [pc, #28]	; (23394 <net_icmpv6_get_ns_hdr+0x68>)
   23376:	4808      	ldr	r0, [pc, #32]	; (23398 <net_icmpv6_get_ns_hdr+0x6c>)
   23378:	f7de fcee 	bl	1d58 <log_1>
		return -EINVAL;
   2337c:	f06f 0015 	mvn.w	r0, #21
   23380:	e000      	b.n	23384 <net_icmpv6_get_ns_hdr+0x58>
	return 0;
   23382:	2000      	movs	r0, #0
}
   23384:	b004      	add	sp, #16
   23386:	bd10      	pop	{r4, pc}
   23388:	2000d790 	.word	0x2000d790
   2338c:	0002cff8 	.word	0x0002cff8
   23390:	0002d0f8 	.word	0x0002d0f8
   23394:	00032941 	.word	0x00032941
   23398:	000329f4 	.word	0x000329f4

0002339c <net_icmpv6_set_ns_hdr>:
{
   2339c:	b530      	push	{r4, r5, lr}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2339e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
	hdr->reserved = 0;
   233a2:	2400      	movs	r4, #0
   233a4:	700c      	strb	r4, [r1, #0]
   233a6:	704c      	strb	r4, [r1, #1]
   233a8:	708c      	strb	r4, [r1, #2]
   233aa:	70cc      	strb	r4, [r1, #3]
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   233ac:	1d13      	adds	r3, r2, #4
   233ae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
   233b2:	b087      	sub	sp, #28
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   233b4:	441a      	add	r2, r3
   233b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   233ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
   233be:	2314      	movs	r3, #20
   233c0:	9300      	str	r3, [sp, #0]
   233c2:	b292      	uxth	r2, r2
   233c4:	f10d 0316 	add.w	r3, sp, #22
   233c8:	6941      	ldr	r1, [r0, #20]
   233ca:	f7fe faff 	bl	219cc <net_pkt_write>
	if (pos > 0 && !frag) {
   233ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   233d2:	b1c3      	cbz	r3, 23406 <net_icmpv6_set_ns_hdr+0x6a>
   233d4:	b9d0      	cbnz	r0, 2340c <net_icmpv6_set_ns_hdr+0x70>
		NET_ERR("Cannot set the ICMPv6 NS header");
   233d6:	4b0e      	ldr	r3, [pc, #56]	; (23410 <net_icmpv6_set_ns_hdr+0x74>)
   233d8:	681b      	ldr	r3, [r3, #0]
   233da:	075b      	lsls	r3, r3, #29
   233dc:	d010      	beq.n	23400 <net_icmpv6_set_ns_hdr+0x64>
   233de:	2301      	movs	r3, #1
   233e0:	f04f 0200 	mov.w	r2, #0
   233e4:	f363 0202 	bfi	r2, r3, #0, #3
   233e8:	490a      	ldr	r1, [pc, #40]	; (23414 <net_icmpv6_set_ns_hdr+0x78>)
   233ea:	4b0b      	ldr	r3, [pc, #44]	; (23418 <net_icmpv6_set_ns_hdr+0x7c>)
   233ec:	1a5b      	subs	r3, r3, r1
   233ee:	f360 02c5 	bfi	r2, r0, #3, #3
   233f2:	08db      	lsrs	r3, r3, #3
   233f4:	f363 128f 	bfi	r2, r3, #6, #10
   233f8:	4908      	ldr	r1, [pc, #32]	; (2341c <net_icmpv6_set_ns_hdr+0x80>)
   233fa:	4809      	ldr	r0, [pc, #36]	; (23420 <net_icmpv6_set_ns_hdr+0x84>)
   233fc:	f7de fcac 	bl	1d58 <log_1>
		return -EINVAL;
   23400:	f06f 0015 	mvn.w	r0, #21
   23404:	e000      	b.n	23408 <net_icmpv6_set_ns_hdr+0x6c>
	return 0;
   23406:	4618      	mov	r0, r3
}
   23408:	b007      	add	sp, #28
   2340a:	bd30      	pop	{r4, r5, pc}
	return 0;
   2340c:	4620      	mov	r0, r4
   2340e:	e7fb      	b.n	23408 <net_icmpv6_set_ns_hdr+0x6c>
   23410:	2000d790 	.word	0x2000d790
   23414:	0002cff8 	.word	0x0002cff8
   23418:	0002d0f8 	.word	0x0002d0f8
   2341c:	00032957 	.word	0x00032957
   23420:	00032a81 	.word	0x00032a81

00023424 <net_icmpv6_get_nd_opt_hdr>:
{
   23424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags,
   23426:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
			     net_pkt_ip_hdr_len(pkt) +
   2342a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
	frag = net_frag_read(pkt->frags,
   2342e:	3304      	adds	r3, #4
   23430:	4423      	add	r3, r4
			     net_pkt_ipv6_ext_opt_len(pkt),
   23432:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
	frag = net_frag_read(pkt->frags,
   23436:	9100      	str	r1, [sp, #0]
   23438:	441c      	add	r4, r3
   2343a:	f10d 020e 	add.w	r2, sp, #14
   2343e:	2302      	movs	r3, #2
   23440:	b2a1      	uxth	r1, r4
   23442:	6940      	ldr	r0, [r0, #20]
   23444:	f7fe fa4c 	bl	218e0 <net_frag_read>
	if (pos > 0 && !frag) {
   23448:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2344c:	b133      	cbz	r3, 2345c <net_icmpv6_get_nd_opt_hdr+0x38>
   2344e:	2800      	cmp	r0, #0
		return -EINVAL;
   23450:	bf14      	ite	ne
   23452:	2000      	movne	r0, #0
   23454:	f06f 0015 	mvneq.w	r0, #21
}
   23458:	b004      	add	sp, #16
   2345a:	bd10      	pop	{r4, pc}
	return 0;
   2345c:	4618      	mov	r0, r3
   2345e:	e7fb      	b.n	23458 <net_icmpv6_get_nd_opt_hdr+0x34>

00023460 <net_icmpv6_get_na_hdr>:
{
   23460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23462:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
   23466:	1d23      	adds	r3, r4, #4
   23468:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
   2346c:	9100      	str	r1, [sp, #0]
   2346e:	441c      	add	r4, r3
   23470:	f10d 020e 	add.w	r2, sp, #14
   23474:	2314      	movs	r3, #20
   23476:	b2a1      	uxth	r1, r4
   23478:	6940      	ldr	r0, [r0, #20]
   2347a:	f7fe fa31 	bl	218e0 <net_frag_read>
	if (pos > 0 && !frag) {
   2347e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23482:	b1c3      	cbz	r3, 234b6 <net_icmpv6_get_na_hdr+0x56>
   23484:	b9b8      	cbnz	r0, 234b6 <net_icmpv6_get_na_hdr+0x56>
		NET_ERR("Cannot get the ICMPv6 NA header");
   23486:	4b0d      	ldr	r3, [pc, #52]	; (234bc <net_icmpv6_get_na_hdr+0x5c>)
   23488:	681b      	ldr	r3, [r3, #0]
   2348a:	075b      	lsls	r3, r3, #29
   2348c:	d010      	beq.n	234b0 <net_icmpv6_get_na_hdr+0x50>
   2348e:	2301      	movs	r3, #1
   23490:	f04f 0200 	mov.w	r2, #0
   23494:	f363 0202 	bfi	r2, r3, #0, #3
   23498:	4909      	ldr	r1, [pc, #36]	; (234c0 <net_icmpv6_get_na_hdr+0x60>)
   2349a:	4b0a      	ldr	r3, [pc, #40]	; (234c4 <net_icmpv6_get_na_hdr+0x64>)
   2349c:	1a5b      	subs	r3, r3, r1
   2349e:	f360 02c5 	bfi	r2, r0, #3, #3
   234a2:	08db      	lsrs	r3, r3, #3
   234a4:	f363 128f 	bfi	r2, r3, #6, #10
   234a8:	4907      	ldr	r1, [pc, #28]	; (234c8 <net_icmpv6_get_na_hdr+0x68>)
   234aa:	4808      	ldr	r0, [pc, #32]	; (234cc <net_icmpv6_get_na_hdr+0x6c>)
   234ac:	f7de fc54 	bl	1d58 <log_1>
		return -EINVAL;
   234b0:	f06f 0015 	mvn.w	r0, #21
   234b4:	e000      	b.n	234b8 <net_icmpv6_get_na_hdr+0x58>
	return 0;
   234b6:	2000      	movs	r0, #0
}
   234b8:	b004      	add	sp, #16
   234ba:	bd10      	pop	{r4, pc}
   234bc:	2000d790 	.word	0x2000d790
   234c0:	0002cff8 	.word	0x0002cff8
   234c4:	0002d0f8 	.word	0x0002d0f8
   234c8:	0003296d 	.word	0x0003296d
   234cc:	000329d0 	.word	0x000329d0

000234d0 <net_icmpv6_set_na_hdr>:
{
   234d0:	b530      	push	{r4, r5, lr}
   234d2:	4604      	mov	r4, r0
   234d4:	460d      	mov	r5, r1
   234d6:	b087      	sub	sp, #28
	(void)memset(hdr->reserved, 0, sizeof(hdr->reserved));
   234d8:	2203      	movs	r2, #3
   234da:	2100      	movs	r1, #0
   234dc:	1c68      	adds	r0, r5, #1
   234de:	f7e2 fd00 	bl	5ee2 <memset>
	frag = net_pkt_write(pkt, pkt->frags,
   234e2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   234e6:	6961      	ldr	r1, [r4, #20]
   234e8:	1d13      	adds	r3, r2, #4
			     net_pkt_ip_hdr_len(pkt) +
   234ea:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
	frag = net_pkt_write(pkt, pkt->frags,
   234ee:	441a      	add	r2, r3
   234f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   234f4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   234f8:	2314      	movs	r3, #20
   234fa:	9300      	str	r3, [sp, #0]
   234fc:	b292      	uxth	r2, r2
   234fe:	f10d 0316 	add.w	r3, sp, #22
   23502:	4620      	mov	r0, r4
   23504:	f7fe fa62 	bl	219cc <net_pkt_write>
	if (!frag) {
   23508:	b9b8      	cbnz	r0, 2353a <net_icmpv6_set_na_hdr+0x6a>
		NET_ERR("Cannot set the ICMPv6 NA header");
   2350a:	4b0d      	ldr	r3, [pc, #52]	; (23540 <net_icmpv6_set_na_hdr+0x70>)
   2350c:	681b      	ldr	r3, [r3, #0]
   2350e:	075b      	lsls	r3, r3, #29
   23510:	d010      	beq.n	23534 <net_icmpv6_set_na_hdr+0x64>
   23512:	2301      	movs	r3, #1
   23514:	f04f 0200 	mov.w	r2, #0
   23518:	f363 0202 	bfi	r2, r3, #0, #3
   2351c:	4909      	ldr	r1, [pc, #36]	; (23544 <net_icmpv6_set_na_hdr+0x74>)
   2351e:	4b0a      	ldr	r3, [pc, #40]	; (23548 <net_icmpv6_set_na_hdr+0x78>)
   23520:	1a5b      	subs	r3, r3, r1
   23522:	f360 02c5 	bfi	r2, r0, #3, #3
   23526:	08db      	lsrs	r3, r3, #3
   23528:	f363 128f 	bfi	r2, r3, #6, #10
   2352c:	4907      	ldr	r1, [pc, #28]	; (2354c <net_icmpv6_set_na_hdr+0x7c>)
   2352e:	4808      	ldr	r0, [pc, #32]	; (23550 <net_icmpv6_set_na_hdr+0x80>)
   23530:	f7de fc12 	bl	1d58 <log_1>
		return -EINVAL;
   23534:	f06f 0015 	mvn.w	r0, #21
   23538:	e000      	b.n	2353c <net_icmpv6_set_na_hdr+0x6c>
	return 0;
   2353a:	2000      	movs	r0, #0
}
   2353c:	b007      	add	sp, #28
   2353e:	bd30      	pop	{r4, r5, pc}
   23540:	2000d790 	.word	0x2000d790
   23544:	0002cff8 	.word	0x0002cff8
   23548:	0002d0f8 	.word	0x0002d0f8
   2354c:	00032983 	.word	0x00032983
   23550:	00032a5d 	.word	0x00032a5d

00023554 <net_icmpv6_get_ra_hdr>:
{
   23554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23556:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
   2355a:	1d23      	adds	r3, r4, #4
   2355c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
   23560:	9100      	str	r1, [sp, #0]
   23562:	441c      	add	r4, r3
   23564:	f10d 020e 	add.w	r2, sp, #14
   23568:	230c      	movs	r3, #12
   2356a:	b2a1      	uxth	r1, r4
   2356c:	6940      	ldr	r0, [r0, #20]
   2356e:	f7fe f9b7 	bl	218e0 <net_frag_read>
	if (pos > 0 && !frag) {
   23572:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23576:	b1c3      	cbz	r3, 235aa <net_icmpv6_get_ra_hdr+0x56>
   23578:	b9b8      	cbnz	r0, 235aa <net_icmpv6_get_ra_hdr+0x56>
		NET_ERR("Cannot get the ICMPv6 RA header");
   2357a:	4b0d      	ldr	r3, [pc, #52]	; (235b0 <net_icmpv6_get_ra_hdr+0x5c>)
   2357c:	681b      	ldr	r3, [r3, #0]
   2357e:	075b      	lsls	r3, r3, #29
   23580:	d010      	beq.n	235a4 <net_icmpv6_get_ra_hdr+0x50>
   23582:	2301      	movs	r3, #1
   23584:	f04f 0200 	mov.w	r2, #0
   23588:	f363 0202 	bfi	r2, r3, #0, #3
   2358c:	4909      	ldr	r1, [pc, #36]	; (235b4 <net_icmpv6_get_ra_hdr+0x60>)
   2358e:	4b0a      	ldr	r3, [pc, #40]	; (235b8 <net_icmpv6_get_ra_hdr+0x64>)
   23590:	1a5b      	subs	r3, r3, r1
   23592:	f360 02c5 	bfi	r2, r0, #3, #3
   23596:	08db      	lsrs	r3, r3, #3
   23598:	f363 128f 	bfi	r2, r3, #6, #10
   2359c:	4907      	ldr	r1, [pc, #28]	; (235bc <net_icmpv6_get_ra_hdr+0x68>)
   2359e:	4808      	ldr	r0, [pc, #32]	; (235c0 <net_icmpv6_get_ra_hdr+0x6c>)
   235a0:	f7de fbda 	bl	1d58 <log_1>
		return -EINVAL;
   235a4:	f06f 0015 	mvn.w	r0, #21
   235a8:	e000      	b.n	235ac <net_icmpv6_get_ra_hdr+0x58>
	return 0;
   235aa:	2000      	movs	r0, #0
}
   235ac:	b004      	add	sp, #16
   235ae:	bd10      	pop	{r4, pc}
   235b0:	2000d790 	.word	0x2000d790
   235b4:	0002cff8 	.word	0x0002cff8
   235b8:	0002d0f8 	.word	0x0002d0f8
   235bc:	00032999 	.word	0x00032999
   235c0:	00032a18 	.word	0x00032a18

000235c4 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   235c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235c8:	4698      	mov	r8, r3
   235ca:	6943      	ldr	r3, [r0, #20]
	struct net_pkt *pkt;
	struct net_buf *frag;
	struct net_if *iface = net_pkt_iface(orig);
   235cc:	6a07      	ldr	r7, [r0, #32]
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   235ce:	689b      	ldr	r3, [r3, #8]
   235d0:	799b      	ldrb	r3, [r3, #6]
   235d2:	2b3a      	cmp	r3, #58	; 0x3a
{
   235d4:	b09b      	sub	sp, #108	; 0x6c
   235d6:	4606      	mov	r6, r0
   235d8:	4689      	mov	r9, r1
   235da:	4692      	mov	sl, r2
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   235dc:	d10d      	bne.n	235fa <net_icmpv6_send_error+0x36>
		struct net_icmp_hdr icmp_hdr[1];

		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   235de:	a916      	add	r1, sp, #88	; 0x58
   235e0:	f7ff fd32 	bl	23048 <net_icmpv6_get_hdr>
   235e4:	b118      	cbz	r0, 235ee <net_icmpv6_send_error+0x2a>
   235e6:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
   235ea:	2b00      	cmp	r3, #0
   235ec:	db05      	blt.n	235fa <net_icmpv6_send_error+0x36>
		    icmp_hdr->code < 128) {
			/* We must not send ICMP errors back */
			err = -EINVAL;
   235ee:	f06f 0515 	mvn.w	r5, #21

drop_no_pkt:
	net_stats_update_icmp_drop(iface);

	return err;
}
   235f2:	4628      	mov	r0, r5
   235f4:	b01b      	add	sp, #108	; 0x6c
   235f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   235fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   235fe:	2000      	movs	r0, #0
   23600:	f7fd ff34 	bl	2146c <net_pkt_get_reserve_tx>
	if (!pkt) {
   23604:	4604      	mov	r4, r0
   23606:	2800      	cmp	r0, #0
   23608:	f000 8144 	beq.w	23894 <net_icmpv6_send_error+0x2d0>
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   2360c:	6973      	ldr	r3, [r6, #20]
   2360e:	6899      	ldr	r1, [r3, #8]
   23610:	798a      	ldrb	r2, [r1, #6]
   23612:	2a11      	cmp	r2, #17
   23614:	f000 80f2 	beq.w	237fc <net_icmpv6_send_error+0x238>
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   23618:	2a06      	cmp	r2, #6
   2361a:	f000 80f1 	beq.w	23800 <net_icmpv6_send_error+0x23c>
	} else if (NET_IPV6_HDR(orig)->nexthdr == NET_IPV6_NEXTHDR_FRAG) {
   2361e:	2a2c      	cmp	r2, #44	; 0x2c
   23620:	f040 80df 	bne.w	237e2 <net_icmpv6_send_error+0x21e>
	size_t bytes = 0;
   23624:	2500      	movs	r5, #0
		bytes += buf->len;
   23626:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   23628:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2362a:	4415      	add	r5, r2
	while (buf) {
   2362c:	2b00      	cmp	r3, #0
   2362e:	d1fa      	bne.n	23626 <net_icmpv6_send_error+0x62>
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   23630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23634:	2230      	movs	r2, #48	; 0x30
   23636:	4629      	mov	r1, r5
   23638:	4630      	mov	r0, r6
   2363a:	f7fe f83b 	bl	216b4 <net_pkt_copy>
	if (!frag) {
   2363e:	4683      	mov	fp, r0
   23640:	2800      	cmp	r0, #0
   23642:	f000 8124 	beq.w	2388e <net_icmpv6_send_error+0x2ca>
	net_pkt_frag_add(pkt, frag);
   23646:	4601      	mov	r1, r0
   23648:	4620      	mov	r0, r4
   2364a:	f7fe f80f 	bl	2166c <net_pkt_frag_add>
	pkt->family = family;
   2364e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	pkt->iface = iface;
   23652:	6227      	str	r7, [r4, #32]
	pkt->family = family;
   23654:	220a      	movs	r2, #10
   23656:	f362 03c6 	bfi	r3, r2, #3, #4
   2365a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2365e:	683b      	ldr	r3, [r7, #0]
   23660:	7d5b      	ldrb	r3, [r3, #21]
   23662:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   23666:	683b      	ldr	r3, [r7, #0]
   23668:	7d5b      	ldrb	r3, [r3, #21]
   2366a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   2366e:	f10b 0008 	add.w	r0, fp, #8
   23672:	f7fa ffb3 	bl	1e5dc <net_buf_simple_headroom>
   23676:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   2367a:	6878      	ldr	r0, [r7, #4]
	pkt->ipv6_ext_len = len;
   2367c:	2300      	movs	r3, #0
   2367e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	if (!iface->config.ip.ipv6) {
   23682:	b108      	cbz	r0, 23688 <net_icmpv6_send_error+0xc4>
	return iface->config.ip.ipv6->hop_limit;
   23684:	f890 01cc 	ldrb.w	r0, [r0, #460]	; 0x1cc
	struct net_buf *frag = pkt->frags;
   23688:	6961      	ldr	r1, [r4, #20]
   2368a:	f88d a017 	strb.w	sl, [sp, #23]
	return pkt->frags->data;
   2368e:	688b      	ldr	r3, [r1, #8]
   23690:	f88d 9016 	strb.w	r9, [sp, #22]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   23694:	b2ad      	uxth	r5, r5
	const u32_t unused = 0;
   23696:	2200      	movs	r2, #0
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   23698:	3508      	adds	r5, #8
	const u32_t unused = 0;
   2369a:	9216      	str	r2, [sp, #88]	; 0x58
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   2369c:	f04f 0c60 	mov.w	ip, #96	; 0x60
	NET_IPV6_HDR(pkt)->tcflow = 0;
   236a0:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   236a2:	709a      	strb	r2, [r3, #2]
   236a4:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   236a6:	ba6d      	rev16	r5, r5
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   236a8:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   236aa:	f883 c000 	strb.w	ip, [r3]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + extra_len +
   236ae:	809d      	strh	r5, [r3, #4]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   236b0:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   236b2:	71d8      	strb	r0, [r3, #7]
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   236b4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	pkt->ip_hdr_len = len;
   236b8:	2228      	movs	r2, #40	; 0x28
   236ba:	f10d 0316 	add.w	r3, sp, #22
   236be:	f04f 0a01 	mov.w	sl, #1
   236c2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
   236c6:	4620      	mov	r0, r4
   236c8:	9502      	str	r5, [sp, #8]
   236ca:	9301      	str	r3, [sp, #4]
   236cc:	f8cd a000 	str.w	sl, [sp]
   236d0:	ab12      	add	r3, sp, #72	; 0x48
   236d2:	f7fe f97b 	bl	219cc <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   236d6:	f10d 0317 	add.w	r3, sp, #23
   236da:	4601      	mov	r1, r0
   236dc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   236e0:	9502      	str	r5, [sp, #8]
   236e2:	e9cd a300 	strd	sl, r3, [sp]
   236e6:	4620      	mov	r0, r4
   236e8:	ab12      	add	r3, sp, #72	; 0x48
   236ea:	f7fe f96f 	bl	219cc <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   236ee:	9502      	str	r5, [sp, #8]
   236f0:	2304      	movs	r3, #4
   236f2:	ad16      	add	r5, sp, #88	; 0x58
   236f4:	9300      	str	r3, [sp, #0]
   236f6:	4601      	mov	r1, r0
   236f8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   236fc:	9501      	str	r5, [sp, #4]
   236fe:	ab12      	add	r3, sp, #72	; 0x48
   23700:	4620      	mov	r0, r4
   23702:	f7fe f963 	bl	219cc <net_pkt_write>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   23706:	f1b9 0f04 	cmp.w	r9, #4
   2370a:	d10c      	bne.n	23726 <net_icmpv6_send_error+0x162>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   2370c:	4620      	mov	r0, r4
   2370e:	f7fe fa2e 	bl	21b6e <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   23712:	ea4f 4318 	mov.w	r3, r8, lsr #16
	dst[0] = val >> 8;
   23716:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   23718:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   2371a:	f3c8 2307 	ubfx	r3, r8, #8, #8
   2371e:	7102      	strb	r2, [r0, #4]
   23720:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   23722:	f880 8007 	strb.w	r8, [r0, #7]
	return pkt->frags->data;
   23726:	6973      	ldr	r3, [r6, #20]
   23728:	689a      	ldr	r2, [r3, #8]
	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   2372a:	7e13      	ldrb	r3, [r2, #24]
   2372c:	2bff      	cmp	r3, #255	; 0xff
   2372e:	f102 0308 	add.w	r3, r2, #8
   23732:	f102 0218 	add.w	r2, r2, #24
   23736:	d167      	bne.n	23808 <net_icmpv6_send_error+0x244>
   23738:	6961      	ldr	r1, [r4, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   2373a:	f10d 0e18 	add.w	lr, sp, #24
   2373e:	688d      	ldr	r5, [r1, #8]
   23740:	46f4      	mov	ip, lr
   23742:	6818      	ldr	r0, [r3, #0]
   23744:	6859      	ldr	r1, [r3, #4]
   23746:	46f0      	mov	r8, lr
   23748:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   2374c:	3308      	adds	r3, #8
   2374e:	4293      	cmp	r3, r2
   23750:	46c6      	mov	lr, r8
   23752:	d1f6      	bne.n	23742 <net_icmpv6_send_error+0x17e>
   23754:	f105 0318 	add.w	r3, r5, #24
   23758:	ad0a      	add	r5, sp, #40	; 0x28
   2375a:	4662      	mov	r2, ip
   2375c:	ca03      	ldmia	r2!, {r0, r1}
   2375e:	42aa      	cmp	r2, r5
   23760:	6018      	str	r0, [r3, #0]
   23762:	6059      	str	r1, [r3, #4]
   23764:	4694      	mov	ip, r2
   23766:	f103 0308 	add.w	r3, r3, #8
   2376a:	d1f6      	bne.n	2375a <net_icmpv6_send_error+0x196>
   2376c:	6963      	ldr	r3, [r4, #20]
   2376e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   23772:	6973      	ldr	r3, [r6, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   23774:	6899      	ldr	r1, [r3, #8]
   23776:	4638      	mov	r0, r7
   23778:	3118      	adds	r1, #24
   2377a:	f7fd fa6f 	bl	20c5c <net_if_ipv6_select_src_addr>
   2377e:	462f      	mov	r7, r5
   23780:	4603      	mov	r3, r0
   23782:	f100 0c10 	add.w	ip, r0, #16
   23786:	6818      	ldr	r0, [r3, #0]
   23788:	6859      	ldr	r1, [r3, #4]
   2378a:	463a      	mov	r2, r7
   2378c:	c203      	stmia	r2!, {r0, r1}
   2378e:	3308      	adds	r3, #8
   23790:	4563      	cmp	r3, ip
   23792:	4617      	mov	r7, r2
   23794:	d1f7      	bne.n	23786 <net_icmpv6_send_error+0x1c2>
   23796:	f108 0308 	add.w	r3, r8, #8
   2379a:	af0e      	add	r7, sp, #56	; 0x38
   2379c:	462a      	mov	r2, r5
   2379e:	ca03      	ldmia	r2!, {r0, r1}
   237a0:	42ba      	cmp	r2, r7
   237a2:	6018      	str	r0, [r3, #0]
   237a4:	6059      	str	r1, [r3, #4]
   237a6:	4615      	mov	r5, r2
   237a8:	f103 0308 	add.w	r3, r3, #8
   237ac:	d1f6      	bne.n	2379c <net_icmpv6_send_error+0x1d8>
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   237ae:	6b73      	ldr	r3, [r6, #52]	; 0x34
   237b0:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   237b2:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   237b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   237ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   237bc:	6363      	str	r3, [r4, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   237be:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   237c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	err = net_icmpv6_set_chksum(pkt);
   237c6:	4620      	mov	r0, r4
   237c8:	f7ff fbf0 	bl	22fac <net_icmpv6_set_chksum>
	if (err < 0) {
   237cc:	1e05      	subs	r5, r0, #0
   237ce:	db04      	blt.n	237da <net_icmpv6_send_error+0x216>
	if (net_send_data(pkt) >= 0) {
   237d0:	4620      	mov	r0, r4
   237d2:	f7fc f82b 	bl	1f82c <net_send_data>
   237d6:	2800      	cmp	r0, #0
   237d8:	da5f      	bge.n	2389a <net_icmpv6_send_error+0x2d6>
	net_pkt_unref(pkt);
   237da:	4620      	mov	r0, r4
   237dc:	f7fd ff1f 	bl	2161e <net_pkt_unref>
   237e0:	e707      	b.n	235f2 <net_icmpv6_send_error+0x2e>
	return iface->if_dev->l2;
   237e2:	683b      	ldr	r3, [r7, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   237e4:	685b      	ldr	r3, [r3, #4]
   237e6:	3118      	adds	r1, #24
   237e8:	689b      	ldr	r3, [r3, #8]
   237ea:	4638      	mov	r0, r7
   237ec:	4798      	blx	r3
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   237ee:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
		if (reserve > space) {
   237f2:	282f      	cmp	r0, #47	; 0x2f
   237f4:	d906      	bls.n	23804 <net_icmpv6_send_error+0x240>
			extra_len = space - reserve;
   237f6:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
   237fa:	e719      	b.n	23630 <net_icmpv6_send_error+0x6c>
		extra_len = sizeof(struct net_ipv6_hdr) +
   237fc:	2530      	movs	r5, #48	; 0x30
   237fe:	e717      	b.n	23630 <net_icmpv6_send_error+0x6c>
		extra_len = sizeof(struct net_ipv6_hdr) +
   23800:	253c      	movs	r5, #60	; 0x3c
   23802:	e715      	b.n	23630 <net_icmpv6_send_error+0x6c>
			extra_len = 0;
   23804:	2500      	movs	r5, #0
   23806:	e713      	b.n	23630 <net_icmpv6_send_error+0x6c>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   23808:	af0e      	add	r7, sp, #56	; 0x38
   2380a:	46bc      	mov	ip, r7
   2380c:	6818      	ldr	r0, [r3, #0]
   2380e:	6859      	ldr	r1, [r3, #4]
   23810:	46be      	mov	lr, r7
   23812:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   23816:	3308      	adds	r3, #8
   23818:	4293      	cmp	r3, r2
   2381a:	4677      	mov	r7, lr
   2381c:	d1f6      	bne.n	2380c <net_icmpv6_send_error+0x248>
   2381e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   23822:	af0a      	add	r7, sp, #40	; 0x28
   23824:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   23828:	6963      	ldr	r3, [r4, #20]
   2382a:	689a      	ldr	r2, [r3, #8]
   2382c:	6973      	ldr	r3, [r6, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   2382e:	6899      	ldr	r1, [r3, #8]
   23830:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   23834:	f101 0318 	add.w	r3, r1, #24
   23838:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   2383c:	6818      	ldr	r0, [r3, #0]
   2383e:	6859      	ldr	r1, [r3, #4]
   23840:	46c6      	mov	lr, r8
   23842:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   23846:	3308      	adds	r3, #8
   23848:	4563      	cmp	r3, ip
   2384a:	46f0      	mov	r8, lr
   2384c:	d1f6      	bne.n	2383c <net_icmpv6_send_error+0x278>
   2384e:	ab12      	add	r3, sp, #72	; 0x48
   23850:	3208      	adds	r2, #8
   23852:	469c      	mov	ip, r3
   23854:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
   23858:	45ac      	cmp	ip, r5
   2385a:	6010      	str	r0, [r2, #0]
   2385c:	6051      	str	r1, [r2, #4]
   2385e:	4663      	mov	r3, ip
   23860:	f102 0208 	add.w	r2, r2, #8
   23864:	d1f5      	bne.n	23852 <net_icmpv6_send_error+0x28e>
   23866:	6963      	ldr	r3, [r4, #20]
   23868:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   2386c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   23870:	af1a      	add	r7, sp, #104	; 0x68
   23872:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   23876:	f10c 0318 	add.w	r3, ip, #24
   2387a:	462a      	mov	r2, r5
   2387c:	ca03      	ldmia	r2!, {r0, r1}
   2387e:	42ba      	cmp	r2, r7
   23880:	6018      	str	r0, [r3, #0]
   23882:	6059      	str	r1, [r3, #4]
   23884:	4615      	mov	r5, r2
   23886:	f103 0308 	add.w	r3, r3, #8
   2388a:	d1f6      	bne.n	2387a <net_icmpv6_send_error+0x2b6>
   2388c:	e78f      	b.n	237ae <net_icmpv6_send_error+0x1ea>
		err = -ENOMEM;
   2388e:	f06f 050b 	mvn.w	r5, #11
   23892:	e7a2      	b.n	237da <net_icmpv6_send_error+0x216>
		err = -ENOMEM;
   23894:	f06f 050b 	mvn.w	r5, #11
   23898:	e6ab      	b.n	235f2 <net_icmpv6_send_error+0x2e>
		return 0;
   2389a:	2500      	movs	r5, #0
   2389c:	e6a9      	b.n	235f2 <net_icmpv6_send_error+0x2e>

0002389e <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   2389e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238a2:	4607      	mov	r7, r0
   238a4:	b08d      	sub	sp, #52	; 0x34
   238a6:	4691      	mov	r9, r2
   238a8:	460d      	mov	r5, r1
   238aa:	4698      	mov	r8, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;
	int ret;

	src = net_if_ipv6_select_src_addr(iface, dst);
   238ac:	f7fd f9d6 	bl	20c5c <net_if_ipv6_select_src_addr>
	return iface->if_dev->l2;
   238b0:	683b      	ldr	r3, [r7, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   238b2:	685b      	ldr	r3, [r3, #4]
   238b4:	4629      	mov	r1, r5
   238b6:	689b      	ldr	r3, [r3, #8]
   238b8:	4606      	mov	r6, r0
   238ba:	4638      	mov	r0, r7
   238bc:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   238be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   238c2:	f7fd fdd3 	bl	2146c <net_pkt_get_reserve_tx>
				     PKT_WAIT_TIME);
	if (!pkt) {
   238c6:	4604      	mov	r4, r0
   238c8:	2800      	cmp	r0, #0
   238ca:	f000 808e 	beq.w	239ea <net_icmpv6_send_echo_request+0x14c>
		return -ENOMEM;
	}

	if (!net_ipv6_create(pkt, src, dst, iface, IPPROTO_ICMPV6)) {
   238ce:	233a      	movs	r3, #58	; 0x3a
   238d0:	9300      	str	r3, [sp, #0]
   238d2:	462a      	mov	r2, r5
   238d4:	463b      	mov	r3, r7
   238d6:	4631      	mov	r1, r6
   238d8:	f000 fa7a 	bl	23dd0 <net_ipv6_create>
   238dc:	b940      	cbnz	r0, 238f0 <net_icmpv6_send_echo_request+0x52>
		ret = -ENOMEM;
   238de:	f06f 050b 	mvn.w	r5, #11
	}

	ret = -EIO;

drop:
	net_pkt_unref(pkt);
   238e2:	4620      	mov	r0, r4
   238e4:	f7fd fe9b 	bl	2161e <net_pkt_unref>
	net_stats_update_icmp_drop(iface);

	return ret;
}
   238e8:	4628      	mov	r0, r5
   238ea:	b00d      	add	sp, #52	; 0x34
   238ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	pkt->family = family;
   238f0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	pkt->iface = iface;
   238f4:	6227      	str	r7, [r4, #32]
	pkt->family = family;
   238f6:	220a      	movs	r2, #10
   238f8:	f362 03c6 	bfi	r3, r2, #3, #4
   238fc:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   23900:	683b      	ldr	r3, [r7, #0]
   23902:	7d5b      	ldrb	r3, [r3, #21]
   23904:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   23908:	683b      	ldr	r3, [r7, #0]
   2390a:	aa0c      	add	r2, sp, #48	; 0x30
   2390c:	7d5b      	ldrb	r3, [r3, #21]
   2390e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   23912:	2380      	movs	r3, #128	; 0x80
   23914:	f802 3d22 	strb.w	r3, [r2, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   23918:	2101      	movs	r1, #1
   2391a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2391e:	4620      	mov	r0, r4
   23920:	f7fd ff9a 	bl	21858 <net_pkt_append>
	append(pkt, u8, NET_ICMPV6_ECHO_REQUEST);
   23924:	2801      	cmp	r0, #1
   23926:	4601      	mov	r1, r0
   23928:	d1d9      	bne.n	238de <net_icmpv6_send_echo_request+0x40>
   2392a:	aa0c      	add	r2, sp, #48	; 0x30
   2392c:	2700      	movs	r7, #0
   2392e:	f802 7d21 	strb.w	r7, [r2, #-33]!
   23932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23936:	4620      	mov	r0, r4
   23938:	f7fd ff8e 	bl	21858 <net_pkt_append>
	append(pkt, u8, 0);     /* code */
   2393c:	2801      	cmp	r0, #1
   2393e:	d1ce      	bne.n	238de <net_icmpv6_send_echo_request+0x40>
	append(pkt, be16, 0);   /* checksum */
   23940:	4639      	mov	r1, r7
   23942:	4620      	mov	r0, r4
   23944:	f7ff fafc 	bl	22f40 <net_pkt_append_be16_timeout.constprop.20>
   23948:	2800      	cmp	r0, #0
   2394a:	d0c8      	beq.n	238de <net_icmpv6_send_echo_request+0x40>
	append(pkt, be16, identifier);
   2394c:	4649      	mov	r1, r9
   2394e:	4620      	mov	r0, r4
   23950:	f7ff faf6 	bl	22f40 <net_pkt_append_be16_timeout.constprop.20>
   23954:	2800      	cmp	r0, #0
   23956:	d0c2      	beq.n	238de <net_icmpv6_send_echo_request+0x40>
	append(pkt, be16, sequence);
   23958:	4641      	mov	r1, r8
   2395a:	4620      	mov	r0, r4
   2395c:	f7ff faf0 	bl	22f40 <net_pkt_append_be16_timeout.constprop.20>
   23960:	2800      	cmp	r0, #0
   23962:	d0bc      	beq.n	238de <net_icmpv6_send_echo_request+0x40>
	return pkt->frags->data;
   23964:	6963      	ldr	r3, [r4, #20]
   23966:	689a      	ldr	r2, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   23968:	4633      	mov	r3, r6
   2396a:	ae04      	add	r6, sp, #16
   2396c:	f103 0e10 	add.w	lr, r3, #16
   23970:	4637      	mov	r7, r6
   23972:	6818      	ldr	r0, [r3, #0]
   23974:	6859      	ldr	r1, [r3, #4]
   23976:	46b4      	mov	ip, r6
   23978:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2397c:	3308      	adds	r3, #8
   2397e:	4573      	cmp	r3, lr
   23980:	4666      	mov	r6, ip
   23982:	d1f6      	bne.n	23972 <net_icmpv6_send_echo_request+0xd4>
   23984:	3208      	adds	r2, #8
   23986:	ab08      	add	r3, sp, #32
   23988:	463e      	mov	r6, r7
   2398a:	ce03      	ldmia	r6!, {r0, r1}
   2398c:	429e      	cmp	r6, r3
   2398e:	6010      	str	r0, [r2, #0]
   23990:	6051      	str	r1, [r2, #4]
   23992:	4637      	mov	r7, r6
   23994:	f102 0208 	add.w	r2, r2, #8
   23998:	d1f6      	bne.n	23988 <net_icmpv6_send_echo_request+0xea>
   2399a:	6962      	ldr	r2, [r4, #20]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   2399c:	461f      	mov	r7, r3
   2399e:	6896      	ldr	r6, [r2, #8]
   239a0:	f105 0c10 	add.w	ip, r5, #16
   239a4:	462a      	mov	r2, r5
   239a6:	6810      	ldr	r0, [r2, #0]
   239a8:	6851      	ldr	r1, [r2, #4]
   239aa:	463d      	mov	r5, r7
   239ac:	c503      	stmia	r5!, {r0, r1}
   239ae:	3208      	adds	r2, #8
   239b0:	4562      	cmp	r2, ip
   239b2:	462f      	mov	r7, r5
   239b4:	d1f7      	bne.n	239a6 <net_icmpv6_send_echo_request+0x108>
   239b6:	f106 0218 	add.w	r2, r6, #24
   239ba:	ae0c      	add	r6, sp, #48	; 0x30
   239bc:	461d      	mov	r5, r3
   239be:	cd03      	ldmia	r5!, {r0, r1}
   239c0:	42b5      	cmp	r5, r6
   239c2:	6010      	str	r0, [r2, #0]
   239c4:	6051      	str	r1, [r2, #4]
   239c6:	462b      	mov	r3, r5
   239c8:	f102 0208 	add.w	r2, r2, #8
   239cc:	d1f6      	bne.n	239bc <net_icmpv6_send_echo_request+0x11e>
	if (net_ipv6_finalize(pkt, IPPROTO_ICMPV6) < 0) {
   239ce:	213a      	movs	r1, #58	; 0x3a
   239d0:	4620      	mov	r0, r4
   239d2:	f000 fa71 	bl	23eb8 <net_ipv6_finalize>
   239d6:	2800      	cmp	r0, #0
   239d8:	db81      	blt.n	238de <net_icmpv6_send_echo_request+0x40>
	if (net_send_data(pkt) >= 0) {
   239da:	4620      	mov	r0, r4
   239dc:	f7fb ff26 	bl	1f82c <net_send_data>
   239e0:	2800      	cmp	r0, #0
   239e2:	da05      	bge.n	239f0 <net_icmpv6_send_echo_request+0x152>
	ret = -EIO;
   239e4:	f06f 0504 	mvn.w	r5, #4
   239e8:	e77b      	b.n	238e2 <net_icmpv6_send_echo_request+0x44>
		return -ENOMEM;
   239ea:	f06f 050b 	mvn.w	r5, #11
   239ee:	e77b      	b.n	238e8 <net_icmpv6_send_echo_request+0x4a>
		return 0;
   239f0:	2500      	movs	r5, #0
   239f2:	e779      	b.n	238e8 <net_icmpv6_send_echo_request+0x4a>

000239f4 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   239f4:	b410      	push	{r4}
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv(net_pkt_iface(pkt));

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   239f6:	4b08      	ldr	r3, [pc, #32]	; (23a18 <net_icmpv6_input+0x24>)
   239f8:	681b      	ldr	r3, [r3, #0]
   239fa:	b153      	cbz	r3, 23a12 <net_icmpv6_input+0x1e>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   239fc:	7a1c      	ldrb	r4, [r3, #8]
   239fe:	428c      	cmp	r4, r1
   23a00:	d1fa      	bne.n	239f8 <net_icmpv6_input+0x4>
   23a02:	7a5c      	ldrb	r4, [r3, #9]
   23a04:	4294      	cmp	r4, r2
   23a06:	d001      	beq.n	23a0c <net_icmpv6_input+0x18>
   23a08:	2c00      	cmp	r4, #0
   23a0a:	d1f5      	bne.n	239f8 <net_icmpv6_input+0x4>
			return cb->handler(pkt);
   23a0c:	685b      	ldr	r3, [r3, #4]
	}

	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   23a0e:	bc10      	pop	{r4}
			return cb->handler(pkt);
   23a10:	4718      	bx	r3
}
   23a12:	2002      	movs	r0, #2
   23a14:	bc10      	pop	{r4}
   23a16:	4770      	bx	lr
   23a18:	20002654 	.word	0x20002654

00023a1c <net_icmpv6_init>:
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   23a1c:	4801      	ldr	r0, [pc, #4]	; (23a24 <net_icmpv6_init+0x8>)
   23a1e:	f7ff ba9f 	b.w	22f60 <net_icmpv6_register_handler>
   23a22:	bf00      	nop
   23a24:	2000d1fc 	.word	0x2000d1fc

00023a28 <get_nbr>:
	return nbr;
}

static inline struct net_nbr *get_nbr(struct net_nbr *start, int idx)
{
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
   23a28:	2905      	cmp	r1, #5
{
   23a2a:	b538      	push	{r3, r4, r5, lr}
   23a2c:	4604      	mov	r4, r0
   23a2e:	460d      	mov	r5, r1
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
   23a30:	dd14      	ble.n	23a5c <get_nbr+0x34>
   23a32:	4b0e      	ldr	r3, [pc, #56]	; (23a6c <get_nbr+0x44>)
   23a34:	681b      	ldr	r3, [r3, #0]
   23a36:	075b      	lsls	r3, r3, #29
   23a38:	d010      	beq.n	23a5c <get_nbr+0x34>
   23a3a:	2301      	movs	r3, #1
   23a3c:	f04f 0200 	mov.w	r2, #0
   23a40:	f363 0202 	bfi	r2, r3, #0, #3
   23a44:	490a      	ldr	r1, [pc, #40]	; (23a70 <get_nbr+0x48>)
   23a46:	4b0b      	ldr	r3, [pc, #44]	; (23a74 <get_nbr+0x4c>)
   23a48:	480b      	ldr	r0, [pc, #44]	; (23a78 <get_nbr+0x50>)
   23a4a:	1a5b      	subs	r3, r3, r1
   23a4c:	f36f 02c5 	bfc	r2, #3, #3
   23a50:	08db      	lsrs	r3, r3, #3
   23a52:	f363 128f 	bfi	r2, r3, #6, #10
   23a56:	4909      	ldr	r1, [pc, #36]	; (23a7c <get_nbr+0x54>)
   23a58:	f7de f97e 	bl	1d58 <log_1>

	return (struct net_nbr *)((u8_t *)start +
			((sizeof(struct net_nbr) +
			  start->size + start->extra_data_size) * idx));
   23a5c:	8860      	ldrh	r0, [r4, #2]
   23a5e:	88a3      	ldrh	r3, [r4, #4]
   23a60:	4418      	add	r0, r3
   23a62:	3014      	adds	r0, #20
}
   23a64:	fb05 4000 	mla	r0, r5, r0, r4
   23a68:	bd38      	pop	{r3, r4, r5, pc}
   23a6a:	bf00      	nop
   23a6c:	2000d7ac 	.word	0x2000d7ac
   23a70:	0002cff8 	.word	0x0002cff8
   23a74:	0002d130 	.word	0x0002d130
   23a78:	00032ada 	.word	0x00032ada
   23a7c:	00032ab0 	.word	0x00032ab0

00023a80 <net_nbr_unref>:
	if (--nbr->ref) {
   23a80:	7803      	ldrb	r3, [r0, #0]
   23a82:	3b01      	subs	r3, #1
   23a84:	b2db      	uxtb	r3, r3
   23a86:	7003      	strb	r3, [r0, #0]
   23a88:	b913      	cbnz	r3, 23a90 <net_nbr_unref+0x10>
	if (nbr->remove) {
   23a8a:	6903      	ldr	r3, [r0, #16]
   23a8c:	b103      	cbz	r3, 23a90 <net_nbr_unref+0x10>
		nbr->remove(nbr);
   23a8e:	4718      	bx	r3
}
   23a90:	4770      	bx	lr

00023a92 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
   23a92:	b538      	push	{r3, r4, r5, lr}
   23a94:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   23a96:	2400      	movs	r4, #0
   23a98:	892b      	ldrh	r3, [r5, #8]
   23a9a:	42a3      	cmp	r3, r4
   23a9c:	dc01      	bgt.n	23aa2 <net_nbr_get+0x10>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   23a9e:	2000      	movs	r0, #0
   23aa0:	e00a      	b.n	23ab8 <net_nbr_get+0x26>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   23aa2:	4621      	mov	r1, r4
   23aa4:	6828      	ldr	r0, [r5, #0]
   23aa6:	f7ff ffbf 	bl	23a28 <get_nbr>
		if (!nbr->ref) {
   23aaa:	7803      	ldrb	r3, [r0, #0]
   23aac:	b92b      	cbnz	r3, 23aba <net_nbr_get+0x28>
			nbr->data = nbr->__nbr;
   23aae:	f100 0314 	add.w	r3, r0, #20
   23ab2:	60c3      	str	r3, [r0, #12]
	nbr->ref++;
   23ab4:	2301      	movs	r3, #1
   23ab6:	7003      	strb	r3, [r0, #0]
}
   23ab8:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   23aba:	3401      	adds	r4, #1
   23abc:	e7ec      	b.n	23a98 <net_nbr_get+0x6>
	...

00023ac0 <net_nbr_link>:

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
   23ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   23ac4:	7843      	ldrb	r3, [r0, #1]
   23ac6:	2bff      	cmp	r3, #255	; 0xff
{
   23ac8:	4681      	mov	r9, r0
   23aca:	4688      	mov	r8, r1
   23acc:	4692      	mov	sl, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   23ace:	d14c      	bne.n	23b6a <net_nbr_link+0xaa>
   23ad0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 23b78 <net_nbr_link+0xb8>
	int i, avail = -1;
   23ad4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   23ad8:	2400      	movs	r4, #0
   23ada:	465f      	mov	r7, fp
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
   23adc:	f10b 0302 	add.w	r3, fp, #2
   23ae0:	00e6      	lsls	r6, r4, #3
   23ae2:	1931      	adds	r1, r6, r4
   23ae4:	eb0b 0201 	add.w	r2, fp, r1
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   23ae8:	1c68      	adds	r0, r5, #1
   23aea:	7a12      	ldrb	r2, [r2, #8]
   23aec:	d117      	bne.n	23b1e <net_nbr_link+0x5e>
   23aee:	2a00      	cmp	r2, #0
   23af0:	d039      	beq.n	23b66 <net_nbr_link+0xa6>
		    !memcmp(lladdr->addr,
   23af2:	4419      	add	r1, r3
   23af4:	f89a 2004 	ldrb.w	r2, [sl, #4]
   23af8:	f8da 0000 	ldr.w	r0, [sl]
   23afc:	9301      	str	r3, [sp, #4]
   23afe:	f7e2 f99c 	bl	5e3a <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   23b02:	9b01      	ldr	r3, [sp, #4]
   23b04:	b968      	cbnz	r0, 23b22 <net_nbr_link+0x62>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   23b06:	4426      	add	r6, r4
   23b08:	443e      	add	r6, r7
   23b0a:	7a33      	ldrb	r3, [r6, #8]
   23b0c:	3301      	adds	r3, #1
   23b0e:	7233      	strb	r3, [r6, #8]

			nbr->idx = i;
   23b10:	f889 4001 	strb.w	r4, [r9, #1]
			nbr->iface = iface;
   23b14:	f8c9 8008 	str.w	r8, [r9, #8]
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;

	nbr->iface = iface;

	return 0;
}
   23b18:	b003      	add	sp, #12
   23b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_neighbor_lladdr[i].ref &&
   23b1e:	2a00      	cmp	r2, #0
   23b20:	d1e7      	bne.n	23af2 <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   23b22:	3401      	adds	r4, #1
   23b24:	2c06      	cmp	r4, #6
   23b26:	d1db      	bne.n	23ae0 <net_nbr_link+0x20>
	if (avail < 0) {
   23b28:	1c6b      	adds	r3, r5, #1
   23b2a:	d021      	beq.n	23b70 <net_nbr_link+0xb0>
	net_neighbor_lladdr[avail].ref++;
   23b2c:	00ee      	lsls	r6, r5, #3
   23b2e:	1970      	adds	r0, r6, r5
   23b30:	183b      	adds	r3, r7, r0
   23b32:	7a1a      	ldrb	r2, [r3, #8]
   23b34:	3201      	adds	r2, #1
   23b36:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   23b38:	f889 5001 	strb.w	r5, [r9, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   23b3c:	f8da 1000 	ldr.w	r1, [sl]
   23b40:	f89a 2004 	ldrb.w	r2, [sl, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   23b44:	b131      	cbz	r1, 23b54 <net_nbr_link+0x94>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   23b46:	2a06      	cmp	r2, #6
   23b48:	d804      	bhi.n	23b54 <net_nbr_link+0x94>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   23b4a:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   23b4c:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   23b4e:	4438      	add	r0, r7
   23b50:	f7e2 f99a 	bl	5e88 <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   23b54:	442e      	add	r6, r5
   23b56:	443e      	add	r6, r7
   23b58:	f89a 3004 	ldrb.w	r3, [sl, #4]
   23b5c:	7073      	strb	r3, [r6, #1]
	return 0;
   23b5e:	2000      	movs	r0, #0
	nbr->iface = iface;
   23b60:	f8c9 8008 	str.w	r8, [r9, #8]
	return 0;
   23b64:	e7d8      	b.n	23b18 <net_nbr_link+0x58>
   23b66:	4625      	mov	r5, r4
   23b68:	e7db      	b.n	23b22 <net_nbr_link+0x62>
		return -EALREADY;
   23b6a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   23b6e:	e7d3      	b.n	23b18 <net_nbr_link+0x58>
		return -ENOENT;
   23b70:	f06f 0001 	mvn.w	r0, #1
   23b74:	e7d0      	b.n	23b18 <net_nbr_link+0x58>
   23b76:	bf00      	nop
   23b78:	2000265c 	.word	0x2000265c

00023b7c <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   23b7c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   23b7e:	7843      	ldrb	r3, [r0, #1]
   23b80:	2bff      	cmp	r3, #255	; 0xff
{
   23b82:	4604      	mov	r4, r0
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   23b84:	d047      	beq.n	23c16 <net_nbr_unlink+0x9a>
		return -EALREADY;
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
   23b86:	2b05      	cmp	r3, #5
   23b88:	d914      	bls.n	23bb4 <net_nbr_unlink+0x38>
   23b8a:	4b24      	ldr	r3, [pc, #144]	; (23c1c <net_nbr_unlink+0xa0>)
   23b8c:	681b      	ldr	r3, [r3, #0]
   23b8e:	0759      	lsls	r1, r3, #29
   23b90:	d010      	beq.n	23bb4 <net_nbr_unlink+0x38>
   23b92:	2301      	movs	r3, #1
   23b94:	f04f 0200 	mov.w	r2, #0
   23b98:	f363 0202 	bfi	r2, r3, #0, #3
   23b9c:	4920      	ldr	r1, [pc, #128]	; (23c20 <net_nbr_unlink+0xa4>)
   23b9e:	4b21      	ldr	r3, [pc, #132]	; (23c24 <net_nbr_unlink+0xa8>)
   23ba0:	4821      	ldr	r0, [pc, #132]	; (23c28 <net_nbr_unlink+0xac>)
   23ba2:	1a5b      	subs	r3, r3, r1
   23ba4:	f36f 02c5 	bfc	r2, #3, #3
   23ba8:	08db      	lsrs	r3, r3, #3
   23baa:	f363 128f 	bfi	r2, r3, #6, #10
   23bae:	491f      	ldr	r1, [pc, #124]	; (23c2c <net_nbr_unlink+0xb0>)
   23bb0:	f7de f8d2 	bl	1d58 <log_1>
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);
   23bb4:	7863      	ldrb	r3, [r4, #1]
   23bb6:	4d1e      	ldr	r5, [pc, #120]	; (23c30 <net_nbr_unlink+0xb4>)
   23bb8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   23bbc:	442b      	add	r3, r5
   23bbe:	7a1b      	ldrb	r3, [r3, #8]
   23bc0:	b9a3      	cbnz	r3, 23bec <net_nbr_unlink+0x70>
   23bc2:	4a16      	ldr	r2, [pc, #88]	; (23c1c <net_nbr_unlink+0xa0>)
   23bc4:	6812      	ldr	r2, [r2, #0]
   23bc6:	0752      	lsls	r2, r2, #29
   23bc8:	d010      	beq.n	23bec <net_nbr_unlink+0x70>
   23bca:	2101      	movs	r1, #1
   23bcc:	f04f 0200 	mov.w	r2, #0
   23bd0:	f361 0202 	bfi	r2, r1, #0, #3
   23bd4:	f363 02c5 	bfi	r2, r3, #3, #3
   23bd8:	4911      	ldr	r1, [pc, #68]	; (23c20 <net_nbr_unlink+0xa4>)
   23bda:	4b12      	ldr	r3, [pc, #72]	; (23c24 <net_nbr_unlink+0xa8>)
   23bdc:	4815      	ldr	r0, [pc, #84]	; (23c34 <net_nbr_unlink+0xb8>)
   23bde:	1a5b      	subs	r3, r3, r1
   23be0:	08db      	lsrs	r3, r3, #3
   23be2:	f363 128f 	bfi	r2, r3, #6, #10
   23be6:	4911      	ldr	r1, [pc, #68]	; (23c2c <net_nbr_unlink+0xb0>)
   23be8:	f7de f8b6 	bl	1d58 <log_1>

	net_neighbor_lladdr[nbr->idx].ref--;
   23bec:	7860      	ldrb	r0, [r4, #1]
   23bee:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   23bf2:	442b      	add	r3, r5
   23bf4:	7a19      	ldrb	r1, [r3, #8]
   23bf6:	3901      	subs	r1, #1
   23bf8:	b2c9      	uxtb	r1, r1
   23bfa:	7219      	strb	r1, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   23bfc:	b931      	cbnz	r1, 23c0c <net_nbr_unlink+0x90>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   23bfe:	2309      	movs	r3, #9
   23c00:	fb03 5000 	mla	r0, r3, r0, r5
   23c04:	2206      	movs	r2, #6
   23c06:	3002      	adds	r0, #2
   23c08:	f7e2 f96b 	bl	5ee2 <memset>
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   23c0c:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
   23c0e:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   23c10:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
   23c12:	60a0      	str	r0, [r4, #8]

	return 0;
}
   23c14:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   23c16:	f06f 0044 	mvn.w	r0, #68	; 0x44
   23c1a:	e7fb      	b.n	23c14 <net_nbr_unlink+0x98>
   23c1c:	2000d7ac 	.word	0x2000d7ac
   23c20:	0002cff8 	.word	0x0002cff8
   23c24:	0002d130 	.word	0x0002d130
   23c28:	00032b61 	.word	0x00032b61
   23c2c:	00032ab8 	.word	0x00032ab8
   23c30:	2000265c 	.word	0x2000265c
   23c34:	00032ba1 	.word	0x00032ba1

00023c38 <net_nbr_get_lladdr>:
	return NULL;
}

struct net_linkaddr_storage *net_nbr_get_lladdr(u8_t idx)
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
   23c38:	2805      	cmp	r0, #5
{
   23c3a:	b513      	push	{r0, r1, r4, lr}
   23c3c:	4604      	mov	r4, r0
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
   23c3e:	d918      	bls.n	23c72 <net_nbr_get_lladdr+0x3a>
   23c40:	4b0f      	ldr	r3, [pc, #60]	; (23c80 <net_nbr_get_lladdr+0x48>)
   23c42:	681b      	ldr	r3, [r3, #0]
   23c44:	075b      	lsls	r3, r3, #29
   23c46:	d014      	beq.n	23c72 <net_nbr_get_lladdr+0x3a>
   23c48:	2301      	movs	r3, #1
   23c4a:	f04f 0200 	mov.w	r2, #0
   23c4e:	f363 0202 	bfi	r2, r3, #0, #3
   23c52:	490c      	ldr	r1, [pc, #48]	; (23c84 <net_nbr_get_lladdr+0x4c>)
   23c54:	4b0c      	ldr	r3, [pc, #48]	; (23c88 <net_nbr_get_lladdr+0x50>)
   23c56:	1a5b      	subs	r3, r3, r1
   23c58:	08db      	lsrs	r3, r3, #3
   23c5a:	f36f 02c5 	bfc	r2, #3, #3
   23c5e:	f363 128f 	bfi	r2, r3, #6, #10
   23c62:	f8ad 2000 	strh.w	r2, [sp]
   23c66:	2306      	movs	r3, #6
   23c68:	4602      	mov	r2, r0
   23c6a:	4908      	ldr	r1, [pc, #32]	; (23c8c <net_nbr_get_lladdr+0x54>)
   23c6c:	4808      	ldr	r0, [pc, #32]	; (23c90 <net_nbr_get_lladdr+0x58>)
   23c6e:	f7de f89f 	bl	1db0 <log_3>
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   23c72:	4808      	ldr	r0, [pc, #32]	; (23c94 <net_nbr_get_lladdr+0x5c>)
	return &net_neighbor_lladdr[idx].lladdr;
   23c74:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
}
   23c78:	4420      	add	r0, r4
   23c7a:	b002      	add	sp, #8
   23c7c:	bd10      	pop	{r4, pc}
   23c7e:	bf00      	nop
   23c80:	2000d7ac 	.word	0x2000d7ac
   23c84:	0002cff8 	.word	0x0002cff8
   23c88:	0002d130 	.word	0x0002d130
   23c8c:	00032ac7 	.word	0x00032ac7
   23c90:	00032b15 	.word	0x00032b15
   23c94:	2000265c 	.word	0x2000265c

00023c98 <handle_ext_hdr_options>:
						     int total_len,
						     u16_t len,
						     u16_t offset,
						     u16_t *pos,
						     enum net_verdict *verdict)
{
   23c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	u16_t length = 0, loc;
#if defined(CONFIG_NET_RPL)
	bool result;
#endif

	if (len > total_len) {
   23c9c:	4293      	cmp	r3, r2
{
   23c9e:	4680      	mov	r8, r0
   23ca0:	461d      	mov	r5, r3
   23ca2:	4608      	mov	r0, r1
   23ca4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (len > total_len) {
   23ca6:	dd03      	ble.n	23cb0 <handle_ext_hdr_options+0x18>

	*verdict = NET_CONTINUE;
	return frag;

drop:
	*verdict = NET_DROP;
   23ca8:	2302      	movs	r3, #2
   23caa:	703b      	strb	r3, [r7, #0]
	return NULL;
   23cac:	2000      	movs	r0, #0
   23cae:	e04c      	b.n	23d4a <handle_ext_hdr_options+0xb2>
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   23cb0:	ae03      	add	r6, sp, #12
   23cb2:	9600      	str	r6, [sp, #0]
   23cb4:	2301      	movs	r3, #1
   23cb6:	f10d 020e 	add.w	r2, sp, #14
   23cba:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   23cbe:	f7fd fe0f 	bl	218e0 <net_frag_read>
	if (!frag && loc == 0xffff) {
   23cc2:	b928      	cbnz	r0, 23cd0 <handle_ext_hdr_options+0x38>
   23cc4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23ccc:	429a      	cmp	r2, r3
   23cce:	d0eb      	beq.n	23ca8 <handle_ext_hdr_options+0x10>
	if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
   23cd0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23cd4:	b153      	cbz	r3, 23cec <handle_ext_hdr_options+0x54>
   23cd6:	f10d 030d 	add.w	r3, sp, #13
   23cda:	9300      	str	r3, [sp, #0]
   23cdc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23ce0:	2301      	movs	r3, #1
   23ce2:	f10d 020e 	add.w	r2, sp, #14
   23ce6:	f7fd fdfb 	bl	218e0 <net_frag_read>
		if (!frag && loc == 0xffff) {
   23cea:	b1f8      	cbz	r0, 23d2c <handle_ext_hdr_options+0x94>
{
   23cec:	2402      	movs	r4, #2
		if (!frag && loc == 0xffff) {
   23cee:	f64f 79ff 	movw	r9, #65535	; 0xffff
   23cf2:	f10d 0a0d 	add.w	sl, sp, #13
	while (frag && (length < len)) {
   23cf6:	b300      	cbz	r0, 23d3a <handle_ext_hdr_options+0xa2>
   23cf8:	42a5      	cmp	r5, r4
   23cfa:	d91e      	bls.n	23d3a <handle_ext_hdr_options+0xa2>
		switch (opt_type) {
   23cfc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23d00:	b333      	cbz	r3, 23d50 <handle_ext_hdr_options+0xb8>
   23d02:	2b01      	cmp	r3, #1
   23d04:	d045      	beq.n	23d92 <handle_ext_hdr_options+0xfa>
	switch (opt_type & 0xc0) {
   23d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23d0a:	2b80      	cmp	r3, #128	; 0x80
   23d0c:	d054      	beq.n	23db8 <handle_ext_hdr_options+0x120>
   23d0e:	2bc0      	cmp	r3, #192	; 0xc0
   23d10:	d04b      	beq.n	23daa <handle_ext_hdr_options+0x112>
   23d12:	2b40      	cmp	r3, #64	; 0x40
   23d14:	d0c8      	beq.n	23ca8 <handle_ext_hdr_options+0x10>
			if (!check_unknown_option(pkt, opt_type, length)) {
   23d16:	f1b8 0f00 	cmp.w	r8, #0
   23d1a:	d0c5      	beq.n	23ca8 <handle_ext_hdr_options+0x10>
			length += opt_len + 2;
   23d1c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   23d20:	1c9a      	adds	r2, r3, #2
   23d22:	4414      	add	r4, r2
   23d24:	b2a4      	uxth	r4, r4
			loc += opt_len;
   23d26:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23d2a:	e03a      	b.n	23da2 <handle_ext_hdr_options+0x10a>
		if (!frag && loc == 0xffff) {
   23d2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23d34:	429a      	cmp	r2, r3
   23d36:	d0b7      	beq.n	23ca8 <handle_ext_hdr_options+0x10>
   23d38:	2402      	movs	r4, #2
	if (length != len) {
   23d3a:	42a5      	cmp	r5, r4
   23d3c:	d1b4      	bne.n	23ca8 <handle_ext_hdr_options+0x10>
	*pos = loc;
   23d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23d40:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23d44:	801a      	strh	r2, [r3, #0]
	*verdict = NET_CONTINUE;
   23d46:	2301      	movs	r3, #1
   23d48:	703b      	strb	r3, [r7, #0]
}
   23d4a:	b004      	add	sp, #16
   23d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			length++;
   23d50:	3401      	adds	r4, #1
   23d52:	b2a4      	uxth	r4, r4
		if (length >= len) {
   23d54:	42a5      	cmp	r5, r4
   23d56:	d9f0      	bls.n	23d3a <handle_ext_hdr_options+0xa2>
   23d58:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d5c:	9600      	str	r6, [sp, #0]
   23d5e:	2301      	movs	r3, #1
   23d60:	f10d 020e 	add.w	r2, sp, #14
   23d64:	f7fd fdbc 	bl	218e0 <net_frag_read>
		if (!frag && loc == 0xffff) {
   23d68:	b918      	cbnz	r0, 23d72 <handle_ext_hdr_options+0xda>
   23d6a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23d6e:	454b      	cmp	r3, r9
   23d70:	d09a      	beq.n	23ca8 <handle_ext_hdr_options+0x10>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
   23d72:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23d76:	2b00      	cmp	r3, #0
   23d78:	d0bd      	beq.n	23cf6 <handle_ext_hdr_options+0x5e>
   23d7a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d7e:	f8cd a000 	str.w	sl, [sp]
   23d82:	2301      	movs	r3, #1
   23d84:	f10d 020e 	add.w	r2, sp, #14
   23d88:	f7fd fdaa 	bl	218e0 <net_frag_read>
			if (!frag && loc == 0xffff) {
   23d8c:	2800      	cmp	r0, #0
   23d8e:	d1b2      	bne.n	23cf6 <handle_ext_hdr_options+0x5e>
   23d90:	e78a      	b.n	23ca8 <handle_ext_hdr_options+0x10>
			length += opt_len + 2;
   23d92:	f89d 300d 	ldrb.w	r3, [sp, #13]
   23d96:	1c9a      	adds	r2, r3, #2
   23d98:	4414      	add	r4, r2
			loc += opt_len + 2;
   23d9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
			length += opt_len + 2;
   23d9e:	b2a4      	uxth	r4, r4
			loc += opt_len + 2;
   23da0:	3202      	adds	r2, #2
			loc += opt_len;
   23da2:	4413      	add	r3, r2
   23da4:	f8ad 300e 	strh.w	r3, [sp, #14]
			break;
   23da8:	e7d4      	b.n	23d54 <handle_ext_hdr_options+0xbc>
	return pkt->frags->data;
   23daa:	f8d8 3014 	ldr.w	r3, [r8, #20]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   23dae:	689b      	ldr	r3, [r3, #8]
   23db0:	7e1b      	ldrb	r3, [r3, #24]
   23db2:	2bff      	cmp	r3, #255	; 0xff
   23db4:	f43f af78 	beq.w	23ca8 <handle_ext_hdr_options+0x10>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   23db8:	4623      	mov	r3, r4
   23dba:	2202      	movs	r2, #2
   23dbc:	2104      	movs	r1, #4
   23dbe:	4640      	mov	r0, r8
   23dc0:	f7ff fc00 	bl	235c4 <net_icmpv6_send_error>
   23dc4:	e770      	b.n	23ca8 <handle_ext_hdr_options+0x10>
	...

00023dc8 <net_ipv6_unspecified_address>:
}
   23dc8:	4800      	ldr	r0, [pc, #0]	; (23dcc <net_ipv6_unspecified_address+0x4>)
   23dca:	4770      	bx	lr
   23dcc:	00032bfc 	.word	0x00032bfc

00023dd0 <net_ipv6_create>:
{
   23dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dd4:	460d      	mov	r5, r1
   23dd6:	b088      	sub	sp, #32
	header = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
   23dd8:	2132      	movs	r1, #50	; 0x32
{
   23dda:	4604      	mov	r4, r0
   23ddc:	4616      	mov	r6, r2
   23dde:	4698      	mov	r8, r3
	header = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
   23de0:	f7fd fb5c 	bl	2149c <net_pkt_get_frag>
	if (!header) {
   23de4:	4607      	mov	r7, r0
   23de6:	2800      	cmp	r0, #0
   23de8:	d064      	beq.n	23eb4 <net_ipv6_create+0xe4>
	net_pkt_frag_insert(pkt, header);
   23dea:	4601      	mov	r1, r0
   23dec:	4620      	mov	r0, r4
   23dee:	f7fd fc57 	bl	216a0 <net_pkt_frag_insert>
   23df2:	6963      	ldr	r3, [r4, #20]
   23df4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   23df6:	2260      	movs	r2, #96	; 0x60
   23df8:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   23dfa:	2200      	movs	r2, #0
   23dfc:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   23dfe:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->flow = 0;
   23e00:	709a      	strb	r2, [r3, #2]
   23e02:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   23e04:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   23e08:	71da      	strb	r2, [r3, #7]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   23e0a:	b92a      	cbnz	r2, 23e18 <net_ipv6_create+0x48>
					net_if_ipv6_get_hop_limit(iface);
   23e0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
	if (!iface->config.ip.ipv6) {
   23e10:	b109      	cbz	r1, 23e16 <net_ipv6_create+0x46>
	return iface->config.ip.ipv6->hop_limit;
   23e12:	f891 21cc 	ldrb.w	r2, [r1, #460]	; 0x1cc
		NET_IPV6_HDR(pkt)->hop_limit =
   23e16:	71da      	strb	r2, [r3, #7]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   23e18:	4632      	mov	r2, r6
   23e1a:	466e      	mov	r6, sp
   23e1c:	f102 0810 	add.w	r8, r2, #16
   23e20:	46b4      	mov	ip, r6
   23e22:	6810      	ldr	r0, [r2, #0]
   23e24:	6851      	ldr	r1, [r2, #4]
   23e26:	46b6      	mov	lr, r6
   23e28:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   23e2c:	3208      	adds	r2, #8
   23e2e:	4542      	cmp	r2, r8
   23e30:	4676      	mov	r6, lr
   23e32:	d1f6      	bne.n	23e22 <net_ipv6_create+0x52>
   23e34:	3318      	adds	r3, #24
   23e36:	aa04      	add	r2, sp, #16
   23e38:	4666      	mov	r6, ip
   23e3a:	ce03      	ldmia	r6!, {r0, r1}
   23e3c:	4296      	cmp	r6, r2
   23e3e:	6018      	str	r0, [r3, #0]
   23e40:	6059      	str	r1, [r3, #4]
   23e42:	46b4      	mov	ip, r6
   23e44:	f103 0308 	add.w	r3, r3, #8
   23e48:	d1f6      	bne.n	23e38 <net_ipv6_create+0x68>
   23e4a:	6963      	ldr	r3, [r4, #20]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   23e4c:	4694      	mov	ip, r2
   23e4e:	689e      	ldr	r6, [r3, #8]
   23e50:	f105 0e10 	add.w	lr, r5, #16
   23e54:	462b      	mov	r3, r5
   23e56:	6818      	ldr	r0, [r3, #0]
   23e58:	6859      	ldr	r1, [r3, #4]
   23e5a:	4665      	mov	r5, ip
   23e5c:	c503      	stmia	r5!, {r0, r1}
   23e5e:	3308      	adds	r3, #8
   23e60:	4573      	cmp	r3, lr
   23e62:	46ac      	mov	ip, r5
   23e64:	d1f7      	bne.n	23e56 <net_ipv6_create+0x86>
   23e66:	4613      	mov	r3, r2
   23e68:	f106 0208 	add.w	r2, r6, #8
   23e6c:	ae08      	add	r6, sp, #32
   23e6e:	461d      	mov	r5, r3
   23e70:	cd03      	ldmia	r5!, {r0, r1}
   23e72:	42b5      	cmp	r5, r6
   23e74:	6010      	str	r0, [r2, #0]
   23e76:	6051      	str	r1, [r2, #4]
   23e78:	462b      	mov	r3, r5
   23e7a:	f102 0208 	add.w	r2, r2, #8
   23e7e:	d1f6      	bne.n	23e6e <net_ipv6_create+0x9e>
	pkt->ipv6_ext_len = len;
   23e80:	2300      	movs	r3, #0
   23e82:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	return pkt->frags->data;
   23e86:	6963      	ldr	r3, [r4, #20]
	NET_IPV6_HDR(pkt)->nexthdr = next_header_proto;
   23e88:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   23e8c:	689b      	ldr	r3, [r3, #8]
   23e8e:	719a      	strb	r2, [r3, #6]
	pkt->family = family;
   23e90:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   23e94:	220a      	movs	r2, #10
	pkt->ip_hdr_len = len;
   23e96:	2128      	movs	r1, #40	; 0x28
	pkt->family = family;
   23e98:	f362 03c6 	bfi	r3, r2, #3, #4
	pkt->ip_hdr_len = len;
   23e9c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
	pkt->family = family;
   23ea0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   23ea4:	f107 0008 	add.w	r0, r7, #8
   23ea8:	f7fa fb30 	bl	1e50c <net_buf_simple_add>
}
   23eac:	4620      	mov	r0, r4
   23eae:	b008      	add	sp, #32
   23eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   23eb4:	4604      	mov	r4, r0
   23eb6:	e7f9      	b.n	23eac <net_ipv6_create+0xdc>

00023eb8 <net_ipv6_finalize>:
{
   23eb8:	b570      	push	{r4, r5, r6, lr}
   23eba:	4605      	mov	r5, r0
   23ebc:	460e      	mov	r6, r1
	net_pkt_compact(pkt);
   23ebe:	f7fd fc87 	bl	217d0 <net_pkt_compact>
	total_len = net_pkt_get_len(pkt) - sizeof(struct net_ipv6_hdr);
   23ec2:	696a      	ldr	r2, [r5, #20]
	size_t bytes = 0;
   23ec4:	2300      	movs	r3, #0
   23ec6:	4614      	mov	r4, r2
	while (buf) {
   23ec8:	b95c      	cbnz	r4, 23ee2 <net_ipv6_finalize+0x2a>
	NET_IPV6_HDR(pkt)->len = htons(total_len);
   23eca:	6892      	ldr	r2, [r2, #8]
	total_len = net_pkt_get_len(pkt) - sizeof(struct net_ipv6_hdr);
   23ecc:	3b28      	subs	r3, #40	; 0x28
	NET_IPV6_HDR(pkt)->len = htons(total_len);
   23ece:	ba5b      	rev16	r3, r3
	if (next_header_proto == IPPROTO_UDP &&
   23ed0:	2e11      	cmp	r6, #17
	NET_IPV6_HDR(pkt)->len = htons(total_len);
   23ed2:	8093      	strh	r3, [r2, #4]
	if (next_header_proto == IPPROTO_UDP &&
   23ed4:	d10e      	bne.n	23ef4 <net_ipv6_finalize+0x3c>
	    net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   23ed6:	6a28      	ldr	r0, [r5, #32]
   23ed8:	f7fc ffd5 	bl	20e86 <net_if_need_calc_tx_checksum>
	if (next_header_proto == IPPROTO_UDP &&
   23edc:	b928      	cbnz	r0, 23eea <net_ipv6_finalize+0x32>
	return 0;
   23ede:	2000      	movs	r0, #0
}
   23ee0:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   23ee2:	89a1      	ldrh	r1, [r4, #12]
		buf = buf->frags;
   23ee4:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   23ee6:	440b      	add	r3, r1
   23ee8:	e7ee      	b.n	23ec8 <net_ipv6_finalize+0x10>
		net_udp_set_chksum(pkt, pkt->frags);
   23eea:	6969      	ldr	r1, [r5, #20]
   23eec:	4628      	mov	r0, r5
   23eee:	f006 f95f 	bl	2a1b0 <net_udp_set_chksum>
   23ef2:	e7f4      	b.n	23ede <net_ipv6_finalize+0x26>
	if (next_header_proto == IPPROTO_TCP &&
   23ef4:	2e06      	cmp	r6, #6
   23ef6:	d109      	bne.n	23f0c <net_ipv6_finalize+0x54>
	    net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   23ef8:	6a28      	ldr	r0, [r5, #32]
   23efa:	f7fc ffc4 	bl	20e86 <net_if_need_calc_tx_checksum>
	if (next_header_proto == IPPROTO_TCP &&
   23efe:	2800      	cmp	r0, #0
   23f00:	d0ed      	beq.n	23ede <net_ipv6_finalize+0x26>
		net_tcp_set_chksum(pkt, pkt->frags);
   23f02:	6969      	ldr	r1, [r5, #20]
   23f04:	4628      	mov	r0, r5
   23f06:	f005 fc33 	bl	29770 <net_tcp_set_chksum>
   23f0a:	e7e8      	b.n	23ede <net_ipv6_finalize+0x26>
	if (next_header_proto == IPPROTO_ICMPV6) {
   23f0c:	2e3a      	cmp	r6, #58	; 0x3a
   23f0e:	d1e6      	bne.n	23ede <net_ipv6_finalize+0x26>
		ret = net_icmpv6_set_chksum(pkt);
   23f10:	4628      	mov	r0, r5
   23f12:	f7ff f84b 	bl	22fac <net_icmpv6_set_chksum>
   23f16:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   23f1a:	e7e1      	b.n	23ee0 <net_ipv6_finalize+0x28>

00023f1c <net_ipv6_process_pkt>:
	return NET_DROP;
}
#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   23f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
   23f20:	6942      	ldr	r2, [r0, #20]
	return pkt->frags->data;
   23f22:	6897      	ldr	r7, [r2, #8]
{
   23f24:	b089      	sub	sp, #36	; 0x24
   23f26:	4604      	mov	r4, r0
   23f28:	4615      	mov	r5, r2
	size_t bytes = 0;
   23f2a:	f04f 0900 	mov.w	r9, #0
		bytes += buf->len;
   23f2e:	89ab      	ldrh	r3, [r5, #12]
		buf = buf->frags;
   23f30:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
   23f32:	4499      	add	r9, r3
	while (buf) {
   23f34:	2d00      	cmp	r5, #0
   23f36:	d1fa      	bne.n	23f2e <net_ipv6_process_pkt+0x12>
	int real_len = net_pkt_get_len(pkt);
	int pkt_len = ntohs(hdr->len) + sizeof(*hdr);
   23f38:	88b9      	ldrh	r1, [r7, #4]
   23f3a:	020b      	lsls	r3, r1, #8
   23f3c:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   23f40:	b29b      	uxth	r3, r3
   23f42:	3328      	adds	r3, #40	; 0x28
	u16_t offset;
	u16_t length;
	u16_t total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   23f44:	4599      	cmp	r9, r3
   23f46:	d12d      	bne.n	23fa4 <net_ipv6_process_pkt+0x88>

	NET_DBG("IPv6 packet len %d received from %s to %s", real_len,
		log_strdup(net_sprint_ipv6_addr(&hdr->src)),
		log_strdup(net_sprint_ipv6_addr(&hdr->dst)));

	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   23f48:	7a3b      	ldrb	r3, [r7, #8]
   23f4a:	2bff      	cmp	r3, #255	; 0xff
   23f4c:	d02a      	beq.n	23fa4 <net_ipv6_process_pkt+0x88>
		net_stats_update_ipv6_drop(net_pkt_iface(pkt));
		goto drop;
	}

	/* Check extension headers */
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   23f4e:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   23f50:	62a3      	str	r3, [r4, #40]	; 0x28
	pkt->ip_hdr_len = len;
   23f52:	2328      	movs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   23f54:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	pkt->ip_hdr_len = len;
   23f58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_set_ipv6_ext_len(pkt, 0);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
   23f5c:	6893      	ldr	r3, [r2, #8]

	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   23f5e:	f107 0618 	add.w	r6, r7, #24
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
   23f62:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
   23f64:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   23f68:	4629      	mov	r1, r5
   23f6a:	4630      	mov	r0, r6
   23f6c:	f7fb ff2a 	bl	1fdc4 <net_if_ipv6_addr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   23f70:	bb80      	cbnz	r0, 23fd4 <net_ipv6_process_pkt+0xb8>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   23f72:	4629      	mov	r1, r5
   23f74:	4630      	mov	r0, r6
   23f76:	f7fc fb8f 	bl	20698 <net_if_ipv6_maddr_lookup>
   23f7a:	bb58      	cbnz	r0, 23fd4 <net_ipv6_process_pkt+0xb8>
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   23f7c:	7e3b      	ldrb	r3, [r7, #24]
   23f7e:	2bff      	cmp	r3, #255	; 0xff
   23f80:	d028      	beq.n	23fd4 <net_ipv6_process_pkt+0xb8>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   23f82:	69bb      	ldr	r3, [r7, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23f84:	b93b      	cbnz	r3, 23f96 <net_ipv6_process_pkt+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   23f86:	69fb      	ldr	r3, [r7, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   23f88:	b92b      	cbnz	r3, 23f96 <net_ipv6_process_pkt+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23f8a:	6a3b      	ldr	r3, [r7, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   23f8c:	b91b      	cbnz	r3, 23f96 <net_ipv6_process_pkt+0x7a>
   23f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   23f94:	d01e      	beq.n	23fd4 <net_ipv6_process_pkt+0xb8>
		found = net_route_get_info(net_pkt_iface(pkt),
   23f96:	ab07      	add	r3, sp, #28
   23f98:	aa06      	add	r2, sp, #24
   23f9a:	4631      	mov	r1, r6
   23f9c:	6a20      	ldr	r0, [r4, #32]
   23f9e:	f002 fce3 	bl	26968 <net_route_get_info>
	if (found) {
   23fa2:	b908      	cbnz	r0, 23fa8 <net_ipv6_process_pkt+0x8c>
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   23fa4:	2002      	movs	r0, #2
   23fa6:	e012      	b.n	23fce <net_ipv6_process_pkt+0xb2>
		if (route) {
   23fa8:	9b06      	ldr	r3, [sp, #24]
   23faa:	b14b      	cbz	r3, 23fc0 <net_ipv6_process_pkt+0xa4>
			net_pkt_set_iface(pkt, route->iface);
   23fac:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   23fae:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   23fb0:	681a      	ldr	r2, [r3, #0]
   23fb2:	7d52      	ldrb	r2, [r2, #21]
   23fb4:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   23fb8:	681b      	ldr	r3, [r3, #0]
   23fba:	7d5b      	ldrb	r3, [r3, #21]
   23fbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		ret = net_route_packet(pkt, nexthop);
   23fc0:	9907      	ldr	r1, [sp, #28]
   23fc2:	4620      	mov	r0, r4
   23fc4:	f002 fcf2 	bl	269ac <net_route_packet>
		if (ret < 0) {
   23fc8:	2800      	cmp	r0, #0
   23fca:	dbeb      	blt.n	23fa4 <net_ipv6_process_pkt+0x88>
			return NET_OK;
   23fcc:	2000      	movs	r0, #0

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr(net_pkt_iface(pkt));

	return NET_DROP;
}
   23fce:	b009      	add	sp, #36	; 0x24
   23fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	next = *(net_pkt_next_hdr(pkt));
   23fd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23fd6:	781d      	ldrb	r5, [r3, #0]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   23fd8:	2d3a      	cmp	r5, #58	; 0x3a
   23fda:	f000 80a3 	beq.w	24124 <net_ipv6_process_pkt+0x208>
   23fde:	2d11      	cmp	r5, #17
   23fe0:	f000 80a0 	beq.w	24124 <net_ipv6_process_pkt+0x208>
	if (is_upper_layer_protocol_header(next)) {
   23fe4:	2d06      	cmp	r5, #6
   23fe6:	f04f 0600 	mov.w	r6, #0
   23fea:	d00e      	beq.n	2400a <net_ipv6_process_pkt+0xee>
	offset = sizeof(struct net_ipv6_hdr);
   23fec:	f10d 0820 	add.w	r8, sp, #32
	next = hdr->nexthdr;
   23ff0:	f897 a006 	ldrb.w	sl, [r7, #6]
	frag = pkt->frags;
   23ff4:	6960      	ldr	r0, [r4, #20]
	length = 0;
   23ff6:	f8ad 6018 	strh.w	r6, [sp, #24]
	offset = sizeof(struct net_ipv6_hdr);
   23ffa:	2328      	movs	r3, #40	; 0x28
   23ffc:	f828 3d0a 	strh.w	r3, [r8, #-10]!
	next = hdr->nexthdr;
   24000:	4655      	mov	r5, sl
	ext_bitmap = 0;
   24002:	4637      	mov	r7, r6
	return net_frag_read(frag, offset, pos, 1, value);
   24004:	f10d 0b15 	add.w	fp, sp, #21
	while (frag) {
   24008:	b978      	cbnz	r0, 2402a <net_ipv6_process_pkt+0x10e>
	switch (next) {
   2400a:	2d11      	cmp	r5, #17
	pkt->ipv6_ext_len = len;
   2400c:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
	pkt->transport_proto = proto;
   24010:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   24014:	d004      	beq.n	24020 <net_ipv6_process_pkt+0x104>
   24016:	2d3a      	cmp	r5, #58	; 0x3a
   24018:	f000 8086 	beq.w	24128 <net_ipv6_process_pkt+0x20c>
   2401c:	2d06      	cmp	r5, #6
   2401e:	d1c1      	bne.n	23fa4 <net_ipv6_process_pkt+0x88>
		return net_conn_input(IPPROTO_TCP, pkt);
   24020:	4621      	mov	r1, r4
   24022:	4628      	mov	r0, r5
   24024:	f004 fafe 	bl	28624 <net_conn_input>
   24028:	e7d1      	b.n	23fce <net_ipv6_process_pkt+0xb2>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   2402a:	2d3a      	cmp	r5, #58	; 0x3a
   2402c:	d0ed      	beq.n	2400a <net_ipv6_process_pkt+0xee>
   2402e:	2d11      	cmp	r5, #17
   24030:	d0eb      	beq.n	2400a <net_ipv6_process_pkt+0xee>
		if (is_upper_layer_protocol_header(next)) {
   24032:	2d06      	cmp	r5, #6
   24034:	d0e9      	beq.n	2400a <net_ipv6_process_pkt+0xee>
	return net_frag_read(frag, offset, pos, 1, value);
   24036:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   2403a:	f8cd b000 	str.w	fp, [sp]
   2403e:	2301      	movs	r3, #1
   24040:	4642      	mov	r2, r8
   24042:	f7fd fc4d 	bl	218e0 <net_frag_read>
		if (!frag) {
   24046:	2800      	cmp	r0, #0
   24048:	d0ac      	beq.n	23fa4 <net_ipv6_process_pkt+0x88>
		verdict = NET_OK;
   2404a:	2300      	movs	r3, #0
		switch (next) {
   2404c:	2d3b      	cmp	r5, #59	; 0x3b
		verdict = NET_OK;
   2404e:	f88d 301c 	strb.w	r3, [sp, #28]
		switch (next) {
   24052:	d0a7      	beq.n	23fa4 <net_ipv6_process_pkt+0x88>
   24054:	2d3c      	cmp	r5, #60	; 0x3c
   24056:	d019      	beq.n	2408c <net_ipv6_process_pkt+0x170>
   24058:	2d00      	cmp	r5, #0
   2405a:	d15a      	bne.n	24112 <net_ipv6_process_pkt+0x1f6>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   2405c:	07fa      	lsls	r2, r7, #31
   2405e:	d53d      	bpl.n	240dc <net_ipv6_process_pkt+0x1c0>
				NET_ERR("Dropping packet with multiple HBHO");
   24060:	4b39      	ldr	r3, [pc, #228]	; (24148 <net_ipv6_process_pkt+0x22c>)
   24062:	681b      	ldr	r3, [r3, #0]
   24064:	075b      	lsls	r3, r3, #29
   24066:	d09d      	beq.n	23fa4 <net_ipv6_process_pkt+0x88>
   24068:	2301      	movs	r3, #1
   2406a:	f04f 0200 	mov.w	r2, #0
   2406e:	f363 0202 	bfi	r2, r3, #0, #3
   24072:	4936      	ldr	r1, [pc, #216]	; (2414c <net_ipv6_process_pkt+0x230>)
   24074:	4b36      	ldr	r3, [pc, #216]	; (24150 <net_ipv6_process_pkt+0x234>)
   24076:	4837      	ldr	r0, [pc, #220]	; (24154 <net_ipv6_process_pkt+0x238>)
   24078:	1a5b      	subs	r3, r3, r1
   2407a:	08db      	lsrs	r3, r3, #3
   2407c:	f36f 02c5 	bfc	r2, #3, #3
   24080:	f363 128f 	bfi	r2, r3, #6, #10
   24084:	4934      	ldr	r1, [pc, #208]	; (24158 <net_ipv6_process_pkt+0x23c>)
   24086:	f7dd fe67 	bl	1d58 <log_1>
   2408a:	e78b      	b.n	23fa4 <net_ipv6_process_pkt+0x88>
   2408c:	ab06      	add	r3, sp, #24
   2408e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   24092:	9300      	str	r3, [sp, #0]
   24094:	4642      	mov	r2, r8
   24096:	2301      	movs	r3, #1
   24098:	f7fd fc22 	bl	218e0 <net_frag_read>
			if (!frag) {
   2409c:	4601      	mov	r1, r0
   2409e:	2800      	cmp	r0, #0
   240a0:	d080      	beq.n	23fa4 <net_ipv6_process_pkt+0x88>
			length = length * 8 + 8;
   240a2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   240a6:	3301      	adds	r3, #1
   240a8:	00db      	lsls	r3, r3, #3
   240aa:	b29b      	uxth	r3, r3
			total_len += length;
   240ac:	441e      	add	r6, r3
			length = length * 8 + 8;
   240ae:	f8ad 3018 	strh.w	r3, [sp, #24]
			total_len += length;
   240b2:	b2b6      	uxth	r6, r6
			ext_bitmap |= NET_IPV6_NEXTHDR_DESTO;
   240b4:	f047 073c 	orr.w	r7, r7, #60	; 0x3c
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   240b8:	aa07      	add	r2, sp, #28
   240ba:	e9cd 8201 	strd	r8, r2, [sp, #4]
   240be:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   240c2:	9200      	str	r2, [sp, #0]
   240c4:	4620      	mov	r0, r4
   240c6:	464a      	mov	r2, r9
   240c8:	f7ff fde6 	bl	23c98 <handle_ext_hdr_options>
		if (verdict == NET_DROP) {
   240cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   240d0:	2b02      	cmp	r3, #2
   240d2:	f43f af67 	beq.w	23fa4 <net_ipv6_process_pkt+0x88>
		next = next_hdr;
   240d6:	f89d 5015 	ldrb.w	r5, [sp, #21]
   240da:	e795      	b.n	24008 <net_ipv6_process_pkt+0xec>
   240dc:	ab06      	add	r3, sp, #24
   240de:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   240e2:	9300      	str	r3, [sp, #0]
   240e4:	4642      	mov	r2, r8
   240e6:	2301      	movs	r3, #1
   240e8:	f7fd fbfa 	bl	218e0 <net_frag_read>
			if (!frag) {
   240ec:	4601      	mov	r1, r0
   240ee:	2800      	cmp	r0, #0
   240f0:	f43f af58 	beq.w	23fa4 <net_ipv6_process_pkt+0x88>
			length = length * 8 + 8;
   240f4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   240f8:	3301      	adds	r3, #1
   240fa:	00db      	lsls	r3, r3, #3
   240fc:	b29b      	uxth	r3, r3
			total_len += length;
   240fe:	441e      	add	r6, r3
			length = length * 8 + 8;
   24100:	f8ad 3018 	strh.w	r3, [sp, #24]
			total_len += length;
   24104:	b2b6      	uxth	r6, r6
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   24106:	f1ba 0f00 	cmp.w	sl, #0
   2410a:	d102      	bne.n	24112 <net_ipv6_process_pkt+0x1f6>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   2410c:	f047 0701 	orr.w	r7, r7, #1
   24110:	e7d2      	b.n	240b8 <net_ipv6_process_pkt+0x19c>
			      offset - 1);
   24112:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   24116:	2201      	movs	r2, #1
   24118:	3b01      	subs	r3, #1
   2411a:	2104      	movs	r1, #4
   2411c:	4620      	mov	r0, r4
   2411e:	f7ff fa51 	bl	235c4 <net_icmpv6_send_error>
   24122:	e73f      	b.n	23fa4 <net_ipv6_process_pkt+0x88>
	u16_t total_len = 0;
   24124:	2600      	movs	r6, #0
   24126:	e770      	b.n	2400a <net_ipv6_process_pkt+0xee>
	ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   24128:	a907      	add	r1, sp, #28
   2412a:	4620      	mov	r0, r4
   2412c:	f7fe ff8c 	bl	23048 <net_icmpv6_get_hdr>
	if (ret < 0) {
   24130:	2800      	cmp	r0, #0
   24132:	f6ff af37 	blt.w	23fa4 <net_ipv6_process_pkt+0x88>
	return net_icmpv6_input(pkt, icmp_hdr.type, icmp_hdr.code);
   24136:	f89d 201d 	ldrb.w	r2, [sp, #29]
   2413a:	f89d 101c 	ldrb.w	r1, [sp, #28]
   2413e:	4620      	mov	r0, r4
   24140:	f7ff fc58 	bl	239f4 <net_icmpv6_input>
   24144:	e743      	b.n	23fce <net_ipv6_process_pkt+0xb2>
   24146:	bf00      	nop
   24148:	2000d798 	.word	0x2000d798
   2414c:	0002cff8 	.word	0x0002cff8
   24150:	0002d108 	.word	0x0002d108
   24154:	00032c0c 	.word	0x00032c0c
   24158:	00032be6 	.word	0x00032be6

0002415c <net_ipv6_init>:

void net_ipv6_init(void)
{
   2415c:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
   2415e:	f001 feb3 	bl	25ec8 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
   24162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
   24166:	f002 b93b 	b.w	263e0 <net_ipv6_mld_init>

0002416a <net_buf_frags_len>:
{
   2416a:	4603      	mov	r3, r0
	size_t bytes = 0;
   2416c:	2000      	movs	r0, #0
	while (buf) {
   2416e:	b903      	cbnz	r3, 24172 <net_buf_frags_len+0x8>
}
   24170:	4770      	bx	lr
		bytes += buf->len;
   24172:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24174:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24176:	4410      	add	r0, r2
   24178:	e7f9      	b.n	2416e <net_buf_frags_len+0x4>

0002417a <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2417a:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2417c:	b942      	cbnz	r2, 24190 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2417e:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24180:	b933      	cbnz	r3, 24190 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24182:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24184:	b922      	cbnz	r2, 24190 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   24186:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24188:	fab0 f080 	clz	r0, r0
   2418c:	0940      	lsrs	r0, r0, #5
   2418e:	4770      	bx	lr
   24190:	2000      	movs	r0, #0
   24192:	4770      	bx	lr

00024194 <net_if_get_ll_reserve>:
	return iface->if_dev->l2;
   24194:	6803      	ldr	r3, [r0, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   24196:	685b      	ldr	r3, [r3, #4]
   24198:	689b      	ldr	r3, [r3, #8]
   2419a:	4718      	bx	r3

0002419c <ipv6_nbr_set_state>:
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   2419c:	68c3      	ldr	r3, [r0, #12]
   2419e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   241a2:	428a      	cmp	r2, r1
   241a4:	d003      	beq.n	241ae <ipv6_nbr_set_state+0x12>
   241a6:	2a05      	cmp	r2, #5

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   241a8:	bf18      	it	ne
   241aa:	f883 1030 	strbne.w	r1, [r3, #48]	; 0x30
}
   241ae:	4770      	bx	lr

000241b0 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   241b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   241b2:	4e09      	ldr	r6, [pc, #36]	; (241d8 <iface_cb+0x28>)
{
   241b4:	4607      	mov	r7, r0
   241b6:	460d      	mov	r5, r1
   241b8:	2400      	movs	r4, #0
		if (!nbr->ref || nbr->iface != iface) {
   241ba:	5da3      	ldrb	r3, [r4, r6]
   241bc:	b133      	cbz	r3, 241cc <iface_cb+0x1c>
   241be:	1930      	adds	r0, r6, r4
   241c0:	6883      	ldr	r3, [r0, #8]
   241c2:	42bb      	cmp	r3, r7
   241c4:	d102      	bne.n	241cc <iface_cb+0x1c>
			continue;
		}

		data->cb(nbr, data->user_data);
   241c6:	e9d5 3100 	ldrd	r3, r1, [r5]
   241ca:	4798      	blx	r3
   241cc:	344c      	adds	r4, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   241ce:	f5b4 7fe4 	cmp.w	r4, #456	; 0x1c8
   241d2:	d1f2      	bne.n	241ba <iface_cb+0xa>
	}
}
   241d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   241d6:	bf00      	nop
   241d8:	2000d220 	.word	0x2000d220

000241dc <net_neighbor_data_remove>:
void net_neighbor_data_remove(struct net_nbr *nbr)
{
	NET_DBG("Neighbor %p removed", nbr);

	return;
}
   241dc:	4770      	bx	lr

000241de <nbr_clear_ns_pending>:
	data->send_ns = 0;
   241de:	2200      	movs	r2, #0
   241e0:	2300      	movs	r3, #0
{
   241e2:	b510      	push	{r4, lr}
   241e4:	4604      	mov	r4, r0
	data->send_ns = 0;
   241e6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
   241ea:	6800      	ldr	r0, [r0, #0]
   241ec:	b118      	cbz	r0, 241f6 <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
   241ee:	f7fd fa16 	bl	2161e <net_pkt_unref>
		data->pending = NULL;
   241f2:	2300      	movs	r3, #0
   241f4:	6023      	str	r3, [r4, #0]
}
   241f6:	bd10      	pop	{r4, pc}

000241f8 <nbr_free>:
{
   241f8:	b538      	push	{r3, r4, r5, lr}
   241fa:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   241fc:	68c0      	ldr	r0, [r0, #12]
   241fe:	f7ff ffee 	bl	241de <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable = 0;
   24202:	68e3      	ldr	r3, [r4, #12]
   24204:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   24206:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
   24208:	2000      	movs	r0, #0
   2420a:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   2420e:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
   24210:	4620      	mov	r0, r4
   24212:	f7ff fc35 	bl	23a80 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   24216:	4629      	mov	r1, r5
   24218:	4620      	mov	r0, r4
}
   2421a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
   2421e:	f7ff bcad 	b.w	23b7c <net_nbr_unlink>

00024222 <net_linkaddr_set>:
{
   24222:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   24224:	b140      	cbz	r0, 24238 <net_linkaddr_set+0x16>
   24226:	b139      	cbz	r1, 24238 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   24228:	2a06      	cmp	r2, #6
   2422a:	d808      	bhi.n	2423e <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   2422c:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   2422e:	3002      	adds	r0, #2
   24230:	f7e1 fe2a 	bl	5e88 <memcpy>

	return 0;
   24234:	2000      	movs	r0, #0
}
   24236:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24238:	f06f 0015 	mvn.w	r0, #21
   2423c:	e7fb      	b.n	24236 <net_linkaddr_set+0x14>
		return -EMSGSIZE;
   2423e:	f06f 0023 	mvn.w	r0, #35	; 0x23
   24242:	e7f8      	b.n	24236 <net_linkaddr_set+0x14>

00024244 <k_delayed_work_remaining_get>:
{
   24244:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   24246:	300c      	adds	r0, #12
   24248:	f008 fb2a 	bl	2c8a0 <z_timeout_remaining>
   2424c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   24250:	2264      	movs	r2, #100	; 0x64
   24252:	2300      	movs	r3, #0
   24254:	fb80 0101 	smull	r0, r1, r0, r1
   24258:	f7dc f82c 	bl	2b4 <__aeabi_uldivmod>
}
   2425c:	bd08      	pop	{r3, pc}
	...

00024260 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   24260:	460a      	mov	r2, r1
   24262:	4601      	mov	r1, r0
   24264:	4801      	ldr	r0, [pc, #4]	; (2426c <k_delayed_work_submit+0xc>)
   24266:	f008 baab 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
   2426a:	bf00      	nop
   2426c:	200031d8 	.word	0x200031d8

00024270 <ipv6_ns_reply_timeout>:
{
   24270:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   24274:	f008 fc1a 	bl	2caac <_impl_k_uptime_get>
   24278:	e9cd 0100 	strd	r0, r1, [sp]
		if (!nbr || !nbr->ref) {
   2427c:	4f22      	ldr	r7, [pc, #136]	; (24308 <ipv6_ns_reply_timeout+0x98>)
			if (!k_delayed_work_remaining_get(
   2427e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 2430c <ipv6_ns_reply_timeout+0x9c>
   24282:	2600      	movs	r6, #0
		if (!nbr || !nbr->ref) {
   24284:	5df3      	ldrb	r3, [r6, r7]
   24286:	b313      	cbz	r3, 242ce <ipv6_ns_reply_timeout+0x5e>
   24288:	eb07 0a06 	add.w	sl, r7, r6
		data = net_ipv6_nbr_data(nbr);
   2428c:	f8da 800c 	ldr.w	r8, [sl, #12]
		if (!data) {
   24290:	f1b8 0f00 	cmp.w	r8, #0
   24294:	d01b      	beq.n	242ce <ipv6_ns_reply_timeout+0x5e>
		if (!data->send_ns) {
   24296:	e9d8 120a 	ldrd	r1, r2, [r8, #40]	; 0x28
   2429a:	ea51 0302 	orrs.w	r3, r1, r2
   2429e:	d016      	beq.n	242ce <ipv6_ns_reply_timeout+0x5e>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   242a0:	f511 747a 	adds.w	r4, r1, #1000	; 0x3e8
   242a4:	f142 0500 	adc.w	r5, r2, #0
   242a8:	e9dd 2300 	ldrd	r2, r3, [sp]
   242ac:	1aa2      	subs	r2, r4, r2
   242ae:	eb65 0303 	sbc.w	r3, r5, r3
   242b2:	461d      	mov	r5, r3
		if (remaining > 0) {
   242b4:	2a01      	cmp	r2, #1
   242b6:	f175 0300 	sbcs.w	r3, r5, #0
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   242ba:	4614      	mov	r4, r2
		if (remaining > 0) {
   242bc:	db0e      	blt.n	242dc <ipv6_ns_reply_timeout+0x6c>
			if (!k_delayed_work_remaining_get(
   242be:	4658      	mov	r0, fp
   242c0:	f7ff ffc0 	bl	24244 <k_delayed_work_remaining_get>
   242c4:	b918      	cbnz	r0, 242ce <ipv6_ns_reply_timeout+0x5e>
				k_delayed_work_submit(&ipv6_ns_reply_timer,
   242c6:	4621      	mov	r1, r4
   242c8:	4658      	mov	r0, fp
   242ca:	f7ff ffc9 	bl	24260 <k_delayed_work_submit>
   242ce:	364c      	adds	r6, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   242d0:	f5b6 7fe4 	cmp.w	r6, #456	; 0x1c8
   242d4:	d1d6      	bne.n	24284 <ipv6_ns_reply_timeout+0x14>
}
   242d6:	b002      	add	sp, #8
   242d8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
		if (!data->pending) {
   242dc:	f8d8 0000 	ldr.w	r0, [r8]
		data->send_ns = 0;
   242e0:	2300      	movs	r3, #0
   242e2:	2400      	movs	r4, #0
   242e4:	e9c8 340a 	strd	r3, r4, [r8, #40]	; 0x28
		if (!data->pending) {
   242e8:	2800      	cmp	r0, #0
   242ea:	d0f0      	beq.n	242ce <ipv6_ns_reply_timeout+0x5e>
		net_pkt_unref(data->pending);
   242ec:	f7fd f997 	bl	2161e <net_pkt_unref>
		net_pkt_unref(data->pending);
   242f0:	f8d8 0000 	ldr.w	r0, [r8]
   242f4:	f7fd f993 	bl	2161e <net_pkt_unref>
		data->pending = NULL;
   242f8:	2000      	movs	r0, #0
   242fa:	f8c8 0000 	str.w	r0, [r8]
		net_nbr_unref(nbr);
   242fe:	4650      	mov	r0, sl
   24300:	f7ff fbbe 	bl	23a80 <net_nbr_unref>
   24304:	e7e3      	b.n	242ce <ipv6_ns_reply_timeout+0x5e>
   24306:	bf00      	nop
   24308:	2000d220 	.word	0x2000d220
   2430c:	200026cc 	.word	0x200026cc

00024310 <setup_headers>:
		     llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   24310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24312:	4605      	mov	r5, r0
	net_buf_add(pkt->frags,
   24314:	6940      	ldr	r0, [r0, #20]
{
   24316:	460e      	mov	r6, r1
	net_buf_add(pkt->frags,
   24318:	3008      	adds	r0, #8
   2431a:	212c      	movs	r1, #44	; 0x2c
{
   2431c:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   2431e:	f7fa f8f5 	bl	1e50c <net_buf_simple_add>
	return pkt->frags->data;
   24322:	696b      	ldr	r3, [r5, #20]
   24324:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   24326:	2260      	movs	r2, #96	; 0x60
	NET_IPV6_HDR(pkt)->tcflow = 0;
	NET_IPV6_HDR(pkt)->flow = 0;
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   24328:	1d31      	adds	r1, r6, #4
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   2432a:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   2432c:	0208      	lsls	r0, r1, #8

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   2432e:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->tcflow = 0;
   24330:	2400      	movs	r4, #0
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   24332:	ea40 2111 	orr.w	r1, r0, r1, lsr #8
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   24336:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   24338:	22ff      	movs	r2, #255	; 0xff
	NET_IPV6_HDR(pkt)->tcflow = 0;
   2433a:	705c      	strb	r4, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   2433c:	709c      	strb	r4, [r3, #2]
   2433e:	70dc      	strb	r4, [r3, #3]
	NET_IPV6_HDR(pkt)->len = htons(NET_ICMPH_LEN + nd6_len);
   24340:	8099      	strh	r1, [r3, #4]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   24342:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   24344:	4628      	mov	r0, r5
   24346:	f7fd fc12 	bl	21b6e <net_pkt_icmp_data>
   2434a:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   2434c:	4628      	mov	r0, r5
   2434e:	f7fd fc0e 	bl	21b6e <net_pkt_icmp_data>
   24352:	7044      	strb	r4, [r0, #1]
}
   24354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024356 <net_pkt_ll_clear>:
{
   24356:	b510      	push	{r4, lr}
	return pkt->frags->data;
   24358:	6943      	ldr	r3, [r0, #20]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   2435a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
{
   2435e:	4604      	mov	r4, r0
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   24360:	6898      	ldr	r0, [r3, #8]
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   24362:	2100      	movs	r1, #0
   24364:	1a80      	subs	r0, r0, r2
   24366:	f7e1 fdbc 	bl	5ee2 <memset>
	net_pkt_lladdr_src(pkt)->addr = NULL;
   2436a:	2300      	movs	r3, #0
   2436c:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = 0;
   2436e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   24372:	bd10      	pop	{r4, pc}

00024374 <set_llao>:
{
   24374:	b570      	push	{r4, r5, r6, lr}
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   24376:	700b      	strb	r3, [r1, #0]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   24378:	08d3      	lsrs	r3, r2, #3
{
   2437a:	460c      	mov	r4, r1
   2437c:	4606      	mov	r6, r0
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   2437e:	704b      	strb	r3, [r1, #1]
{
   24380:	4615      	mov	r5, r2
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   24382:	6801      	ldr	r1, [r0, #0]
   24384:	7902      	ldrb	r2, [r0, #4]
   24386:	1ca0      	adds	r0, r4, #2
   24388:	f7e1 fd7e 	bl	5e88 <memcpy>
	(void)memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2438c:	7930      	ldrb	r0, [r6, #4]
		     llao_len - lladdr->len - 2);
   2438e:	1a2a      	subs	r2, r5, r0
	(void)memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   24390:	3002      	adds	r0, #2
   24392:	4420      	add	r0, r4
   24394:	3a02      	subs	r2, #2
   24396:	2100      	movs	r1, #0
}
   24398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2439c:	f7e1 bda1 	b.w	5ee2 <memset>

000243a0 <get_llao_len>:
{
   243a0:	b508      	push	{r3, lr}
	if (net_if_get_link_addr(iface)->len == 6) {
   243a2:	6803      	ldr	r3, [r0, #0]
   243a4:	7d1a      	ldrb	r2, [r3, #20]
   243a6:	2a06      	cmp	r2, #6
   243a8:	d019      	beq.n	243de <get_llao_len+0x3e>
	} else if (net_if_get_link_addr(iface)->len == 8) {
   243aa:	2a08      	cmp	r2, #8
   243ac:	d019      	beq.n	243e2 <get_llao_len+0x42>
	NET_ASSERT_INFO(0, "Invalid link address length %d",
   243ae:	4b0e      	ldr	r3, [pc, #56]	; (243e8 <get_llao_len+0x48>)
   243b0:	6818      	ldr	r0, [r3, #0]
   243b2:	f010 0007 	ands.w	r0, r0, #7
   243b6:	d011      	beq.n	243dc <get_llao_len+0x3c>
   243b8:	2101      	movs	r1, #1
   243ba:	f04f 0300 	mov.w	r3, #0
   243be:	f361 0302 	bfi	r3, r1, #0, #3
   243c2:	480a      	ldr	r0, [pc, #40]	; (243ec <get_llao_len+0x4c>)
   243c4:	490a      	ldr	r1, [pc, #40]	; (243f0 <get_llao_len+0x50>)
   243c6:	1a09      	subs	r1, r1, r0
   243c8:	08c9      	lsrs	r1, r1, #3
   243ca:	f36f 03c5 	bfc	r3, #3, #3
   243ce:	f361 138f 	bfi	r3, r1, #6, #10
   243d2:	4808      	ldr	r0, [pc, #32]	; (243f4 <get_llao_len+0x54>)
   243d4:	4908      	ldr	r1, [pc, #32]	; (243f8 <get_llao_len+0x58>)
   243d6:	f7dd fcd3 	bl	1d80 <log_2>
	return 0;
   243da:	2000      	movs	r0, #0
}
   243dc:	bd08      	pop	{r3, pc}
		return 8;
   243de:	2008      	movs	r0, #8
   243e0:	e7fc      	b.n	243dc <get_llao_len+0x3c>
		return 16;
   243e2:	2010      	movs	r0, #16
   243e4:	e7fa      	b.n	243dc <get_llao_len+0x3c>
   243e6:	bf00      	nop
   243e8:	2000d7a0 	.word	0x2000d7a0
   243ec:	0002cff8 	.word	0x0002cff8
   243f0:	0002d118 	.word	0x0002d118
   243f4:	00032d6a 	.word	0x00032d6a
   243f8:	00032cb9 	.word	0x00032cb9

000243fc <nbr_lookup.isra.21>:
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   243fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if (!nbr->ref) {
   24400:	4e0f      	ldr	r6, [pc, #60]	; (24440 <nbr_lookup.isra.21+0x44>)
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   24402:	4607      	mov	r7, r0
   24404:	4688      	mov	r8, r1
   24406:	2400      	movs	r4, #0
   24408:	46b1      	mov	r9, r6
		if (!nbr->ref) {
   2440a:	5da3      	ldrb	r3, [r4, r6]
   2440c:	b93b      	cbnz	r3, 2441e <nbr_lookup.isra.21+0x22>
   2440e:	344c      	adds	r4, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   24410:	f5b4 7fe4 	cmp.w	r4, #456	; 0x1c8
   24414:	d1f9      	bne.n	2440a <nbr_lookup.isra.21+0xe>
	return NULL;
   24416:	2500      	movs	r5, #0
}
   24418:	4628      	mov	r0, r5
   2441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (iface && nbr->iface != iface) {
   2441e:	b11f      	cbz	r7, 24428 <nbr_lookup.isra.21+0x2c>
   24420:	1933      	adds	r3, r6, r4
   24422:	689b      	ldr	r3, [r3, #8]
   24424:	429f      	cmp	r7, r3
   24426:	d1f2      	bne.n	2440e <nbr_lookup.isra.21+0x12>
   24428:	eb09 0504 	add.w	r5, r9, r4
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2442c:	2210      	movs	r2, #16
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   2442e:	68e8      	ldr	r0, [r5, #12]
   24430:	4641      	mov	r1, r8
   24432:	3004      	adds	r0, #4
   24434:	f7e1 fd01 	bl	5e3a <memcmp>
   24438:	2800      	cmp	r0, #0
   2443a:	d1e8      	bne.n	2440e <nbr_lookup.isra.21+0x12>
   2443c:	e7ec      	b.n	24418 <nbr_lookup.isra.21+0x1c>
   2443e:	bf00      	nop
   24440:	2000d220 	.word	0x2000d220

00024444 <update_ll_reserve.part.25>:
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
   24444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24448:	4606      	mov	r6, r0
	reserve = net_if_get_ll_reserve(net_pkt_iface(pkt), addr);
   2444a:	6a00      	ldr	r0, [r0, #32]
   2444c:	f7ff fea2 	bl	24194 <net_if_get_ll_reserve>
	if (reserve == net_pkt_ll_reserve(pkt)) {
   24450:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   24454:	4283      	cmp	r3, r0
   24456:	d018      	beq.n	2448a <update_ll_reserve.part.25+0x46>
	orig_frag = pkt->frags;
   24458:	f8d6 8014 	ldr.w	r8, [r6, #20]
	net_pkt_set_ll_reserve(pkt, reserve);
   2445c:	f886 0040 	strb.w	r0, [r6, #64]	; 0x40
	pkt->frags = NULL;
   24460:	2500      	movs	r5, #0
	copy_len = orig_frag->len;
   24462:	f8b8 700c 	ldrh.w	r7, [r8, #12]
	pkt->frags = NULL;
   24466:	6175      	str	r5, [r6, #20]
	pos = 0;
   24468:	46a9      	mov	r9, r5
	room_len = 0;
   2446a:	462c      	mov	r4, r5
			room_len = 0;
   2446c:	46ab      	mov	fp, r5
		if (!room_len) {
   2446e:	b9c4      	cbnz	r4, 244a2 <update_ll_reserve.part.25+0x5e>
			frag = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
   24470:	2132      	movs	r1, #50	; 0x32
   24472:	4630      	mov	r0, r6
   24474:	f7fd f812 	bl	2149c <net_pkt_get_frag>
			if (!frag) {
   24478:	4605      	mov	r5, r0
   2447a:	b948      	cbnz	r0, 24490 <update_ll_reserve.part.25+0x4c>
				net_pkt_unref(pkt);
   2447c:	4630      	mov	r0, r6
   2447e:	f7fd f8ce 	bl	2161e <net_pkt_unref>
				net_pkt_frag_unref(orig_frag);
   24482:	4640      	mov	r0, r8
   24484:	f7fd f8c7 	bl	21616 <net_pkt_frag_unref>
				return NULL;
   24488:	462e      	mov	r6, r5
}
   2448a:	4630      	mov	r0, r6
   2448c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			net_pkt_frag_add(pkt, frag);
   24490:	4601      	mov	r1, r0
   24492:	4630      	mov	r0, r6
   24494:	f7fd f8ea 	bl	2166c <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   24498:	f105 0008 	add.w	r0, r5, #8
   2449c:	f7fa f8a2 	bl	1e5e4 <net_buf_simple_tailroom>
   244a0:	b284      	uxth	r4, r0
		if (room_len >= copy_len) {
   244a2:	42bc      	cmp	r4, r7
   244a4:	f105 0008 	add.w	r0, r5, #8
   244a8:	d319      	bcc.n	244de <update_ll_reserve.part.25+0x9a>
			memcpy(net_buf_add(frag, copy_len),
   244aa:	4639      	mov	r1, r7
   244ac:	f7fa f82e 	bl	1e50c <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   244b0:	f8d8 1008 	ldr.w	r1, [r8, #8]
			memcpy(net_buf_add(frag, copy_len),
   244b4:	463a      	mov	r2, r7
   244b6:	4449      	add	r1, r9
   244b8:	f7e1 fce6 	bl	5e88 <memcpy>
			orig_frag = orig_frag->frags;
   244bc:	f8d8 a000 	ldr.w	sl, [r8]
			tmp->frags = NULL;
   244c0:	f8c8 b000 	str.w	fp, [r8]
			net_pkt_frag_unref(tmp);
   244c4:	4640      	mov	r0, r8
   244c6:	f7fd f8a6 	bl	21616 <net_pkt_frag_unref>
			if (!orig_frag) {
   244ca:	f1ba 0f00 	cmp.w	sl, #0
   244ce:	d0dc      	beq.n	2448a <update_ll_reserve.part.25+0x46>
			room_len -= copy_len;
   244d0:	1be4      	subs	r4, r4, r7
   244d2:	b2a4      	uxth	r4, r4
			copy_len = orig_frag->len;
   244d4:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			pos = 0;
   244d8:	f04f 0900 	mov.w	r9, #0
   244dc:	e00f      	b.n	244fe <update_ll_reserve.part.25+0xba>
			memcpy(net_buf_add(frag, room_len),
   244de:	4621      	mov	r1, r4
   244e0:	f7fa f814 	bl	1e50c <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   244e4:	f8d8 1008 	ldr.w	r1, [r8, #8]
			memcpy(net_buf_add(frag, room_len),
   244e8:	4622      	mov	r2, r4
   244ea:	4449      	add	r1, r9
   244ec:	f7e1 fccc 	bl	5e88 <memcpy>
			copy_len -= room_len;
   244f0:	1b3f      	subs	r7, r7, r4
			pos += room_len;
   244f2:	44a1      	add	r9, r4
			copy_len -= room_len;
   244f4:	b2bf      	uxth	r7, r7
			pos += room_len;
   244f6:	fa1f f989 	uxth.w	r9, r9
   244fa:	46c2      	mov	sl, r8
			room_len = 0;
   244fc:	2400      	movs	r4, #0
   244fe:	46d0      	mov	r8, sl
   24500:	e7b5      	b.n	2446e <update_ll_reserve.part.25+0x2a>
	...

00024504 <net_is_solicited>:
{
   24504:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   24506:	a901      	add	r1, sp, #4
   24508:	f7fe ffaa 	bl	23460 <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   2450c:	2800      	cmp	r0, #0
   2450e:	da19      	bge.n	24544 <net_is_solicited+0x40>
		NET_ERR("could not get na_hdr");
   24510:	4b0f      	ldr	r3, [pc, #60]	; (24550 <net_is_solicited+0x4c>)
   24512:	6818      	ldr	r0, [r3, #0]
   24514:	f010 0007 	ands.w	r0, r0, #7
   24518:	d011      	beq.n	2453e <net_is_solicited+0x3a>
   2451a:	2301      	movs	r3, #1
   2451c:	f04f 0200 	mov.w	r2, #0
   24520:	f363 0202 	bfi	r2, r3, #0, #3
   24524:	490b      	ldr	r1, [pc, #44]	; (24554 <net_is_solicited+0x50>)
   24526:	4b0c      	ldr	r3, [pc, #48]	; (24558 <net_is_solicited+0x54>)
   24528:	480c      	ldr	r0, [pc, #48]	; (2455c <net_is_solicited+0x58>)
   2452a:	1a5b      	subs	r3, r3, r1
   2452c:	08db      	lsrs	r3, r3, #3
   2452e:	f36f 02c5 	bfc	r2, #3, #3
   24532:	f363 128f 	bfi	r2, r3, #6, #10
   24536:	490a      	ldr	r1, [pc, #40]	; (24560 <net_is_solicited+0x5c>)
   24538:	f7dd fc0e 	bl	1d58 <log_1>
   2453c:	2000      	movs	r0, #0
}
   2453e:	b007      	add	sp, #28
   24540:	f85d fb04 	ldr.w	pc, [sp], #4
	return na_hdr.flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   24544:	f89d 0004 	ldrb.w	r0, [sp, #4]
   24548:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2454c:	e7f7      	b.n	2453e <net_is_solicited+0x3a>
   2454e:	bf00      	nop
   24550:	2000d7a0 	.word	0x2000d7a0
   24554:	0002cff8 	.word	0x0002cff8
   24558:	0002d118 	.word	0x0002d118
   2455c:	00032f66 	.word	0x00032f66
   24560:	00032c54 	.word	0x00032c54

00024564 <net_is_override>:
{
   24564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   24566:	a901      	add	r1, sp, #4
   24568:	f7fe ff7a 	bl	23460 <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   2456c:	2800      	cmp	r0, #0
   2456e:	da19      	bge.n	245a4 <net_is_override+0x40>
		NET_ERR("could not get na_hdr");
   24570:	4b0f      	ldr	r3, [pc, #60]	; (245b0 <net_is_override+0x4c>)
   24572:	6818      	ldr	r0, [r3, #0]
   24574:	f010 0007 	ands.w	r0, r0, #7
   24578:	d011      	beq.n	2459e <net_is_override+0x3a>
   2457a:	2301      	movs	r3, #1
   2457c:	f04f 0200 	mov.w	r2, #0
   24580:	f363 0202 	bfi	r2, r3, #0, #3
   24584:	490b      	ldr	r1, [pc, #44]	; (245b4 <net_is_override+0x50>)
   24586:	4b0c      	ldr	r3, [pc, #48]	; (245b8 <net_is_override+0x54>)
   24588:	480c      	ldr	r0, [pc, #48]	; (245bc <net_is_override+0x58>)
   2458a:	1a5b      	subs	r3, r3, r1
   2458c:	08db      	lsrs	r3, r3, #3
   2458e:	f36f 02c5 	bfc	r2, #3, #3
   24592:	f363 128f 	bfi	r2, r3, #6, #10
   24596:	490a      	ldr	r1, [pc, #40]	; (245c0 <net_is_override+0x5c>)
   24598:	f7dd fbde 	bl	1d58 <log_1>
   2459c:	2000      	movs	r0, #0
}
   2459e:	b007      	add	sp, #28
   245a0:	f85d fb04 	ldr.w	pc, [sp], #4
	return na_hdr.flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   245a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   245a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   245ac:	e7f7      	b.n	2459e <net_is_override+0x3a>
   245ae:	bf00      	nop
   245b0:	2000d7a0 	.word	0x2000d7a0
   245b4:	0002cff8 	.word	0x0002cff8
   245b8:	0002d118 	.word	0x0002d118
   245bc:	00032f66 	.word	0x00032f66
   245c0:	00032c73 	.word	0x00032c73

000245c4 <net_is_router>:
{
   245c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   245c6:	a901      	add	r1, sp, #4
   245c8:	f7fe ff4a 	bl	23460 <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   245cc:	2800      	cmp	r0, #0
   245ce:	da19      	bge.n	24604 <net_is_router+0x40>
		NET_ERR("could not get na_hdr");
   245d0:	4b0e      	ldr	r3, [pc, #56]	; (2460c <net_is_router+0x48>)
   245d2:	6818      	ldr	r0, [r3, #0]
   245d4:	f010 0007 	ands.w	r0, r0, #7
   245d8:	d011      	beq.n	245fe <net_is_router+0x3a>
   245da:	2301      	movs	r3, #1
   245dc:	f04f 0200 	mov.w	r2, #0
   245e0:	f363 0202 	bfi	r2, r3, #0, #3
   245e4:	490a      	ldr	r1, [pc, #40]	; (24610 <net_is_router+0x4c>)
   245e6:	4b0b      	ldr	r3, [pc, #44]	; (24614 <net_is_router+0x50>)
   245e8:	480b      	ldr	r0, [pc, #44]	; (24618 <net_is_router+0x54>)
   245ea:	1a5b      	subs	r3, r3, r1
   245ec:	08db      	lsrs	r3, r3, #3
   245ee:	f36f 02c5 	bfc	r2, #3, #3
   245f2:	f363 128f 	bfi	r2, r3, #6, #10
   245f6:	4909      	ldr	r1, [pc, #36]	; (2461c <net_is_router+0x58>)
   245f8:	f7dd fbae 	bl	1d58 <log_1>
   245fc:	2000      	movs	r0, #0
}
   245fe:	b007      	add	sp, #28
   24600:	f85d fb04 	ldr.w	pc, [sp], #4
	return na_hdr.flags & NET_ICMPV6_NA_FLAG_ROUTER;
   24604:	f89d 0004 	ldrb.w	r0, [sp, #4]
   24608:	09c0      	lsrs	r0, r0, #7
   2460a:	e7f8      	b.n	245fe <net_is_router+0x3a>
   2460c:	2000d7a0 	.word	0x2000d7a0
   24610:	0002cff8 	.word	0x0002cff8
   24614:	0002d118 	.word	0x0002d118
   24618:	00032f66 	.word	0x00032f66
   2461c:	00032c65 	.word	0x00032c65

00024620 <dad_failed>:
	if (net_is_ipv6_ll_addr(addr)) {
   24620:	880a      	ldrh	r2, [r1, #0]
{
   24622:	b508      	push	{r3, lr}
	if (net_is_ipv6_ll_addr(addr)) {
   24624:	f248 03fe 	movw	r3, #33022	; 0x80fe
   24628:	429a      	cmp	r2, r3
   2462a:	d117      	bne.n	2465c <dad_failed+0x3c>
		NET_ERR("DAD failed, no ll IPv6 address!");
   2462c:	4b0d      	ldr	r3, [pc, #52]	; (24664 <dad_failed+0x44>)
   2462e:	6818      	ldr	r0, [r3, #0]
   24630:	f010 0007 	ands.w	r0, r0, #7
   24634:	d011      	beq.n	2465a <dad_failed+0x3a>
   24636:	2301      	movs	r3, #1
   24638:	f04f 0200 	mov.w	r2, #0
   2463c:	f363 0202 	bfi	r2, r3, #0, #3
   24640:	4909      	ldr	r1, [pc, #36]	; (24668 <dad_failed+0x48>)
   24642:	4b0a      	ldr	r3, [pc, #40]	; (2466c <dad_failed+0x4c>)
   24644:	480a      	ldr	r0, [pc, #40]	; (24670 <dad_failed+0x50>)
   24646:	1a5b      	subs	r3, r3, r1
   24648:	08db      	lsrs	r3, r3, #3
   2464a:	f36f 02c5 	bfc	r2, #3, #3
   2464e:	f363 128f 	bfi	r2, r3, #6, #10
   24652:	4908      	ldr	r1, [pc, #32]	; (24674 <dad_failed+0x54>)
   24654:	f7dd fb80 	bl	1d58 <log_1>
   24658:	2000      	movs	r0, #0
}
   2465a:	bd08      	pop	{r3, pc}
	net_if_ipv6_dad_failed(iface, addr);
   2465c:	f7fb ff3c 	bl	204d8 <net_if_ipv6_dad_failed>
	return true;
   24660:	2001      	movs	r0, #1
   24662:	e7fa      	b.n	2465a <dad_failed+0x3a>
   24664:	2000d7a0 	.word	0x2000d7a0
   24668:	0002cff8 	.word	0x0002cff8
   2466c:	0002d118 	.word	0x0002d118
   24670:	00032d46 	.word	0x00032d46
   24674:	00032c94 	.word	0x00032c94

00024678 <nbr_new.isra.22>:
static struct net_nbr *nbr_new(struct net_if *iface,
   24678:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2467c:	4606      	mov	r6, r0
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   2467e:	481c      	ldr	r0, [pc, #112]	; (246f0 <nbr_new.isra.22+0x78>)
static struct net_nbr *nbr_new(struct net_if *iface,
   24680:	460c      	mov	r4, r1
   24682:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   24684:	f7ff fa05 	bl	23a92 <net_nbr_get>
	if (!nbr) {
   24688:	4605      	mov	r5, r0
   2468a:	b360      	cbz	r0, 246e6 <nbr_new.isra.22+0x6e>
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   2468c:	23ff      	movs	r3, #255	; 0xff
   2468e:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   24690:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   24692:	4623      	mov	r3, r4
   24694:	68c6      	ldr	r6, [r0, #12]
   24696:	466c      	mov	r4, sp
   24698:	f103 0c10 	add.w	ip, r3, #16
   2469c:	4627      	mov	r7, r4
   2469e:	6818      	ldr	r0, [r3, #0]
   246a0:	6859      	ldr	r1, [r3, #4]
   246a2:	4622      	mov	r2, r4
   246a4:	c203      	stmia	r2!, {r0, r1}
   246a6:	3308      	adds	r3, #8
   246a8:	4563      	cmp	r3, ip
   246aa:	4614      	mov	r4, r2
   246ac:	d1f7      	bne.n	2469e <nbr_new.isra.22+0x26>
   246ae:	1d33      	adds	r3, r6, #4
   246b0:	aa04      	add	r2, sp, #16
   246b2:	463c      	mov	r4, r7
   246b4:	cc03      	ldmia	r4!, {r0, r1}
   246b6:	4294      	cmp	r4, r2
   246b8:	6018      	str	r0, [r3, #0]
   246ba:	6059      	str	r1, [r3, #4]
   246bc:	4627      	mov	r7, r4
   246be:	f103 0308 	add.w	r3, r3, #8
   246c2:	d1f6      	bne.n	246b2 <nbr_new.isra.22+0x3a>
	ipv6_nbr_set_state(nbr, state);
   246c4:	4641      	mov	r1, r8
   246c6:	4628      	mov	r0, r5
   246c8:	f7ff fd68 	bl	2419c <ipv6_nbr_set_state>
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   246cc:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   246ce:	2000      	movs	r0, #0
   246d0:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   246d2:	2201      	movs	r2, #1
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   246d4:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	net_ipv6_nbr_data(nbr)->reachable = 0;
   246d8:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   246dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
   246e0:	2200      	movs	r2, #0
   246e2:	601a      	str	r2, [r3, #0]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   246e4:	621a      	str	r2, [r3, #32]
}
   246e6:	4628      	mov	r0, r5
   246e8:	b004      	add	sp, #16
   246ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   246ee:	bf00      	nop
   246f0:	2000d214 	.word	0x2000d214

000246f4 <net_neighbor_table_clear>:
   246f4:	4770      	bx	lr
	...

000246f8 <dbg_update_neighbor_lladdr.isra.23>:
static void dbg_update_neighbor_lladdr(struct net_linkaddr *new_lladdr,
   246f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   246fa:	2318      	movs	r3, #24
   246fc:	7841      	ldrb	r1, [r0, #1]
   246fe:	4a06      	ldr	r2, [pc, #24]	; (24718 <dbg_update_neighbor_lladdr.isra.23+0x20>)
   24700:	3002      	adds	r0, #2
   24702:	f7fd fbf6 	bl	21ef2 <net_sprint_ll_addr_buf>
	snprintk(out, sizeof(out), "%s",
   24706:	4a05      	ldr	r2, [pc, #20]	; (2471c <dbg_update_neighbor_lladdr.isra.23+0x24>)
   24708:	4603      	mov	r3, r0
   2470a:	2118      	movs	r1, #24
   2470c:	4668      	mov	r0, sp
   2470e:	f7dc fcfd 	bl	110c <snprintk>
}
   24712:	b007      	add	sp, #28
   24714:	f85d fb04 	ldr.w	pc, [sp], #4
   24718:	20002692 	.word	0x20002692
   2471c:	0002db78 	.word	0x0002db78

00024720 <net_ipv6_nbr_state2str>:
{
   24720:	2805      	cmp	r0, #5
   24722:	bf9a      	itte	ls
   24724:	4b02      	ldrls	r3, [pc, #8]	; (24730 <net_ipv6_nbr_state2str+0x10>)
   24726:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2472a:	4802      	ldrhi	r0, [pc, #8]	; (24734 <net_ipv6_nbr_state2str+0x14>)
}
   2472c:	4770      	bx	lr
   2472e:	bf00      	nop
   24730:	00032c3c 	.word	0x00032c3c
   24734:	00032f56 	.word	0x00032f56

00024738 <net_ipv6_nbr_foreach>:
{
   24738:	b507      	push	{r0, r1, r2, lr}
	struct iface_cb_data cb_data = {
   2473a:	e9cd 0100 	strd	r0, r1, [sp]
	net_if_foreach(iface_cb, &cb_data);
   2473e:	4669      	mov	r1, sp
   24740:	4802      	ldr	r0, [pc, #8]	; (2474c <net_ipv6_nbr_foreach+0x14>)
   24742:	f7fc fbe1 	bl	20f08 <net_if_foreach>
}
   24746:	b003      	add	sp, #12
   24748:	f85d fb04 	ldr.w	pc, [sp], #4
   2474c:	000241b1 	.word	0x000241b1

00024750 <net_ipv6_nbr_rm>:
{
   24750:	b570      	push	{r4, r5, r6, lr}
   24752:	4605      	mov	r5, r0
   24754:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   24756:	f7ff fe51 	bl	243fc <nbr_lookup.isra.21>
	if (!nbr) {
   2475a:	4604      	mov	r4, r0
   2475c:	b168      	cbz	r0, 2477a <net_ipv6_nbr_rm+0x2a>
	net_route_del_by_nexthop(iface, addr);
   2475e:	4631      	mov	r1, r6
   24760:	4628      	mov	r0, r5
   24762:	f002 f835 	bl	267d0 <net_route_del_by_nexthop>
	nbr_free(nbr);
   24766:	4620      	mov	r0, r4
   24768:	f7ff fd46 	bl	241f8 <nbr_free>
   2476c:	2300      	movs	r3, #0
   2476e:	4803      	ldr	r0, [pc, #12]	; (2477c <net_ipv6_nbr_rm+0x2c>)
   24770:	461a      	mov	r2, r3
   24772:	4629      	mov	r1, r5
   24774:	f001 fec8 	bl	26508 <net_mgmt_event_notify_with_info>
	return true;
   24778:	2001      	movs	r0, #1
}
   2477a:	bd70      	pop	{r4, r5, r6, pc}
   2477c:	f0600010 	.word	0xf0600010

00024780 <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   24780:	f7ff be3c 	b.w	243fc <nbr_lookup.isra.21>

00024784 <net_ipv6_send_na>:
}

int net_ipv6_send_na(struct net_if *iface, const struct in6_addr *src,
		     const struct in6_addr *dst, const struct in6_addr *tgt,
		     u8_t flags)
{
   24784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24788:	460f      	mov	r7, r1
   2478a:	b092      	sub	sp, #72	; 0x48
	struct net_pkt *pkt;
	struct net_buf *frag;
	u8_t llao_len;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   2478c:	4611      	mov	r1, r2
{
   2478e:	4615      	mov	r5, r2
   24790:	461e      	mov	r6, r3
   24792:	4680      	mov	r8, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   24794:	f7ff fcfe 	bl	24194 <net_if_get_ll_reserve>
   24798:	2164      	movs	r1, #100	; 0x64
   2479a:	f7fc fe67 	bl	2146c <net_pkt_get_reserve_tx>
				     ND_NET_BUF_TIMEOUT);
	if (!pkt) {
   2479e:	4604      	mov	r4, r0
   247a0:	b138      	cbz	r0, 247b2 <net_ipv6_send_na+0x2e>
		return -ENOMEM;
	}

	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   247a2:	2164      	movs	r1, #100	; 0x64
   247a4:	f7fc fe7a 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   247a8:	4681      	mov	r9, r0
   247aa:	b928      	cbnz	r0, 247b8 <net_ipv6_send_na+0x34>
		net_pkt_unref(pkt);
   247ac:	4620      	mov	r0, r4
   247ae:	f7fc ff36 	bl	2161e <net_pkt_unref>
		return -ENOMEM;
   247b2:	f06f 050b 	mvn.w	r5, #11
   247b6:	e08f      	b.n	248d8 <net_ipv6_send_na+0x154>
		return -ENOMEM;
	}

	net_pkt_frag_add(pkt, frag);
   247b8:	4601      	mov	r1, r0
   247ba:	4620      	mov	r0, r4
   247bc:	f7fc ff56 	bl	2166c <net_pkt_frag_add>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   247c0:	f8d8 3000 	ldr.w	r3, [r8]
	pkt->iface = iface;
   247c4:	f8c4 8020 	str.w	r8, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   247c8:	7d5b      	ldrb	r3, [r3, #21]
   247ca:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   247ce:	f8d8 3000 	ldr.w	r3, [r8]
   247d2:	7d5b      	ldrb	r3, [r3, #21]
   247d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
   247d8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   247dc:	220a      	movs	r2, #10
   247de:	f362 03c6 	bfi	r3, r2, #3, #4
   247e2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->ip_hdr_len = len;
   247e6:	2328      	movs	r3, #40	; 0x28
   247e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

	net_pkt_set_iface(pkt, iface);
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	net_pkt_ll_clear(pkt);
   247ec:	4620      	mov	r0, r4
   247ee:	f7ff fdb2 	bl	24356 <net_pkt_ll_clear>

	llao_len = get_llao_len(iface);
   247f2:	4640      	mov	r0, r8
   247f4:	f7ff fdd4 	bl	243a0 <get_llao_len>
	pkt->ipv6_ext_len = len;
   247f8:	2300      	movs	r3, #0

	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   247fa:	f100 0a14 	add.w	sl, r0, #20
   247fe:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
   24802:	2288      	movs	r2, #136	; 0x88
   24804:	fa5f f18a 	uxtb.w	r1, sl
	llao_len = get_llao_len(iface);
   24808:	4680      	mov	r8, r0
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   2480a:	4620      	mov	r0, r4
   2480c:	f7ff fd80 	bl	24310 <setup_headers>
		      NET_ICMPV6_NA);

	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   24810:	f109 0008 	add.w	r0, r9, #8
   24814:	4651      	mov	r1, sl
   24816:	f7f9 fe79 	bl	1e50c <net_buf_simple_add>
	return pkt->frags->data;
   2481a:	6963      	ldr	r3, [r4, #20]
   2481c:	689a      	ldr	r2, [r3, #8]

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   2481e:	463b      	mov	r3, r7
   24820:	af01      	add	r7, sp, #4
   24822:	f103 0910 	add.w	r9, r3, #16
   24826:	46bc      	mov	ip, r7
   24828:	6818      	ldr	r0, [r3, #0]
   2482a:	6859      	ldr	r1, [r3, #4]
   2482c:	46be      	mov	lr, r7
   2482e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   24832:	3308      	adds	r3, #8
   24834:	454b      	cmp	r3, r9
   24836:	4677      	mov	r7, lr
   24838:	d1f6      	bne.n	24828 <net_ipv6_send_na+0xa4>
   2483a:	3208      	adds	r2, #8
   2483c:	ab05      	add	r3, sp, #20
   2483e:	4667      	mov	r7, ip
   24840:	cf03      	ldmia	r7!, {r0, r1}
   24842:	429f      	cmp	r7, r3
   24844:	6010      	str	r0, [r2, #0]
   24846:	6051      	str	r1, [r2, #4]
   24848:	46bc      	mov	ip, r7
   2484a:	f102 0208 	add.w	r2, r2, #8
   2484e:	d1f6      	bne.n	2483e <net_ipv6_send_na+0xba>
   24850:	6962      	ldr	r2, [r4, #20]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   24852:	469c      	mov	ip, r3
   24854:	6897      	ldr	r7, [r2, #8]
   24856:	f105 0e10 	add.w	lr, r5, #16
   2485a:	462a      	mov	r2, r5
   2485c:	6810      	ldr	r0, [r2, #0]
   2485e:	6851      	ldr	r1, [r2, #4]
   24860:	4665      	mov	r5, ip
   24862:	c503      	stmia	r5!, {r0, r1}
   24864:	3208      	adds	r2, #8
   24866:	4572      	cmp	r2, lr
   24868:	46ac      	mov	ip, r5
   2486a:	d1f7      	bne.n	2485c <net_ipv6_send_na+0xd8>
   2486c:	f107 0518 	add.w	r5, r7, #24
   24870:	aa09      	add	r2, sp, #36	; 0x24
   24872:	461f      	mov	r7, r3
   24874:	cf03      	ldmia	r7!, {r0, r1}
   24876:	4297      	cmp	r7, r2
   24878:	6028      	str	r0, [r5, #0]
   2487a:	6069      	str	r1, [r5, #4]
   2487c:	463b      	mov	r3, r7
   2487e:	f105 0508 	add.w	r5, r5, #8
   24882:	d1f6      	bne.n	24872 <net_ipv6_send_na+0xee>
	net_ipaddr_copy(&na_hdr.tgt, tgt);
   24884:	4633      	mov	r3, r6
   24886:	f103 0710 	add.w	r7, r3, #16
   2488a:	4616      	mov	r6, r2
   2488c:	6818      	ldr	r0, [r3, #0]
   2488e:	6859      	ldr	r1, [r3, #4]
   24890:	4635      	mov	r5, r6
   24892:	c503      	stmia	r5!, {r0, r1}
   24894:	3308      	adds	r3, #8
   24896:	42bb      	cmp	r3, r7
   24898:	462e      	mov	r6, r5
   2489a:	d1f7      	bne.n	2488c <net_ipv6_send_na+0x108>
   2489c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   2489e:	ad12      	add	r5, sp, #72	; 0x48
   248a0:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}

	set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   248a4:	6a23      	ldr	r3, [r4, #32]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   248a6:	4620      	mov	r0, r4
	return &iface->if_dev->link_addr;
   248a8:	681d      	ldr	r5, [r3, #0]
   248aa:	f7fd f960 	bl	21b6e <net_pkt_icmp_data>
   248ae:	3510      	adds	r5, #16
	set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   248b0:	f100 0118 	add.w	r1, r0, #24
   248b4:	2302      	movs	r3, #2
   248b6:	4628      	mov	r0, r5
   248b8:	4642      	mov	r2, r8
   248ba:	f7ff fd5b 	bl	24374 <set_llao>
					      sizeof(struct net_icmpv6_na_hdr),
		 llao_len, NET_ICMPV6_ND_OPT_TLLAO);

	na_hdr.flags = flags;
   248be:	a912      	add	r1, sp, #72	; 0x48
   248c0:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   248c4:	f801 3d14 	strb.w	r3, [r1, #-20]!
	ret = net_icmpv6_set_na_hdr(pkt, &na_hdr);
   248c8:	4620      	mov	r0, r4
   248ca:	f7fe fe01 	bl	234d0 <net_icmpv6_set_na_hdr>
	if (ret < 0) {
   248ce:	1e05      	subs	r5, r0, #0
   248d0:	da06      	bge.n	248e0 <net_ipv6_send_na+0x15c>
		net_pkt_unref(pkt);
   248d2:	4620      	mov	r0, r4
	pkt->frags->len = NET_IPV6ICMPH_LEN +
		sizeof(struct net_icmpv6_na_hdr) + llao_len;

	ret = net_icmpv6_set_chksum(pkt);
	if (ret < 0) {
		net_pkt_unref(pkt);
   248d4:	f7fc fea3 	bl	2161e <net_pkt_unref>
drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));
	net_pkt_unref(pkt);

	return -EINVAL;
}
   248d8:	4628      	mov	r0, r5
   248da:	b012      	add	sp, #72	; 0x48
   248dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   248e0:	6963      	ldr	r3, [r4, #20]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   248e2:	f108 0840 	add.w	r8, r8, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   248e6:	f8a3 800c 	strh.w	r8, [r3, #12]
	ret = net_icmpv6_set_chksum(pkt);
   248ea:	4620      	mov	r0, r4
   248ec:	f7fe fb5e 	bl	22fac <net_icmpv6_set_chksum>
	if (ret < 0) {
   248f0:	1e05      	subs	r5, r0, #0
		net_pkt_unref(pkt);
   248f2:	4620      	mov	r0, r4
	if (ret < 0) {
   248f4:	dbee      	blt.n	248d4 <net_ipv6_send_na+0x150>
	if (net_send_data(pkt) < 0) {
   248f6:	f7fa ff99 	bl	1f82c <net_send_data>
   248fa:	2800      	cmp	r0, #0
   248fc:	da05      	bge.n	2490a <net_ipv6_send_na+0x186>
	net_pkt_unref(pkt);
   248fe:	4620      	mov	r0, r4
   24900:	f7fc fe8d 	bl	2161e <net_pkt_unref>
	return -EINVAL;
   24904:	f06f 0515 	mvn.w	r5, #21
   24908:	e7e6      	b.n	248d8 <net_ipv6_send_na+0x154>
	return 0;
   2490a:	2500      	movs	r5, #0
   2490c:	e7e4      	b.n	248d8 <net_ipv6_send_na+0x154>
	...

00024910 <net_ipv6_nbr_set_reachable_timer>:
void net_ipv6_nbr_set_reachable_timer(struct net_if *iface,
				      struct net_nbr *nbr)
{
	u32_t time;

	time = net_if_ipv6_get_reachable_time(iface);
   24910:	6843      	ldr	r3, [r0, #4]
{
   24912:	b570      	push	{r4, r5, r6, lr}
   24914:	460d      	mov	r5, r1
	if (!iface->config.ip.ipv6) {
   24916:	b113      	cbz	r3, 2491e <net_ipv6_nbr_set_reachable_timer+0xe>
	return iface->config.ip.ipv6->reachable_time;
   24918:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4

	NET_ASSERT_INFO(time, "Zero reachable timeout!");
   2491c:	b9b4      	cbnz	r4, 2494c <net_ipv6_nbr_set_reachable_timer+0x3c>
   2491e:	4b14      	ldr	r3, [pc, #80]	; (24970 <net_ipv6_nbr_set_reachable_timer+0x60>)
   24920:	681c      	ldr	r4, [r3, #0]
   24922:	f014 0407 	ands.w	r4, r4, #7
   24926:	d011      	beq.n	2494c <net_ipv6_nbr_set_reachable_timer+0x3c>
   24928:	2301      	movs	r3, #1
   2492a:	f04f 0200 	mov.w	r2, #0
   2492e:	f363 0202 	bfi	r2, r3, #0, #3
   24932:	4910      	ldr	r1, [pc, #64]	; (24974 <net_ipv6_nbr_set_reachable_timer+0x64>)
   24934:	4b10      	ldr	r3, [pc, #64]	; (24978 <net_ipv6_nbr_set_reachable_timer+0x68>)
   24936:	4811      	ldr	r0, [pc, #68]	; (2497c <net_ipv6_nbr_set_reachable_timer+0x6c>)
   24938:	1a5b      	subs	r3, r3, r1
   2493a:	08db      	lsrs	r3, r3, #3
   2493c:	f36f 02c5 	bfc	r2, #3, #3
   24940:	f363 128f 	bfi	r2, r3, #6, #10
   24944:	490e      	ldr	r1, [pc, #56]	; (24980 <net_ipv6_nbr_set_reachable_timer+0x70>)
   24946:	f7dd fa07 	bl	1d58 <log_1>
   2494a:	2400      	movs	r4, #0

	NET_DBG("Starting reachable timer nbr %p data %p time %d ms",
		nbr, net_ipv6_nbr_data(nbr), time);

	net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   2494c:	68ee      	ldr	r6, [r5, #12]
   2494e:	f008 f8ad 	bl	2caac <_impl_k_uptime_get>
	net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   24952:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   24954:	e9c6 0106 	strd	r0, r1, [r6, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   24958:	621c      	str	r4, [r3, #32]

	if (!k_delayed_work_remaining_get(&ipv6_nd_reachable_timer)) {
   2495a:	480a      	ldr	r0, [pc, #40]	; (24984 <net_ipv6_nbr_set_reachable_timer+0x74>)
   2495c:	f7ff fc72 	bl	24244 <k_delayed_work_remaining_get>
   24960:	b928      	cbnz	r0, 2496e <net_ipv6_nbr_set_reachable_timer+0x5e>
		k_delayed_work_submit(&ipv6_nd_reachable_timer, time);
   24962:	4621      	mov	r1, r4
   24964:	4807      	ldr	r0, [pc, #28]	; (24984 <net_ipv6_nbr_set_reachable_timer+0x74>)
	}
}
   24966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit(&ipv6_nd_reachable_timer, time);
   2496a:	f7ff bc79 	b.w	24260 <k_delayed_work_submit>
}
   2496e:	bd70      	pop	{r4, r5, r6, pc}
   24970:	2000d7a0 	.word	0x2000d7a0
   24974:	0002cff8 	.word	0x0002cff8
   24978:	0002d118 	.word	0x0002d118
   2497c:	00032f22 	.word	0x00032f22
   24980:	00032cf0 	.word	0x00032cf0
   24984:	200026ac 	.word	0x200026ac

00024988 <handle_na_input>:

	return true;
}

static enum net_verdict handle_na_input(struct net_pkt *pkt)
{
   24988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2498c:	4604      	mov	r4, r0
   2498e:	b08c      	sub	sp, #48	; 0x30
	return net_buf_frags_len(pkt->frags);
   24990:	6940      	ldr	r0, [r0, #20]
   24992:	f7ff fbea 	bl	2416a <net_buf_frags_len>
	struct net_icmpv6_na_hdr na_hdr;
	struct net_if_addr *ifaddr;
	size_t left_len;
	int ret;

	ret = net_icmpv6_get_na_hdr(pkt, &na_hdr);
   24996:	a907      	add	r1, sp, #28
   24998:	4605      	mov	r5, r0
   2499a:	4620      	mov	r0, r4
   2499c:	f7fe fd60 	bl	23460 <net_icmpv6_get_na_hdr>
	if (ret < 0) {
   249a0:	2800      	cmp	r0, #0
   249a2:	da19      	bge.n	249d8 <handle_na_input+0x50>
		NET_ERR("NULL NA header - dropping");
   249a4:	4bb6      	ldr	r3, [pc, #728]	; (24c80 <handle_na_input+0x2f8>)
   249a6:	681b      	ldr	r3, [r3, #0]
   249a8:	075a      	lsls	r2, r3, #29
   249aa:	d103      	bne.n	249b4 <handle_na_input+0x2c>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
   249ac:	2002      	movs	r0, #2
}
   249ae:	b00c      	add	sp, #48	; 0x30
   249b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NET_ERR("NULL NA header - dropping");
   249b4:	2301      	movs	r3, #1
   249b6:	f04f 0200 	mov.w	r2, #0
   249ba:	f363 0202 	bfi	r2, r3, #0, #3
   249be:	49b1      	ldr	r1, [pc, #708]	; (24c84 <handle_na_input+0x2fc>)
   249c0:	4bb1      	ldr	r3, [pc, #708]	; (24c88 <handle_na_input+0x300>)
   249c2:	48b2      	ldr	r0, [pc, #712]	; (24c8c <handle_na_input+0x304>)
   249c4:	1a5b      	subs	r3, r3, r1
   249c6:	f36f 02c5 	bfc	r2, #3, #3
   249ca:	08db      	lsrs	r3, r3, #3
   249cc:	49b0      	ldr	r1, [pc, #704]	; (24c90 <handle_na_input+0x308>)
   249ce:	f363 128f 	bfi	r2, r3, #6, #10
			NET_ERR("Corrupted NA message");
   249d2:	f7dd f9c1 	bl	1d58 <log_1>
   249d6:	e7e9      	b.n	249ac <handle_na_input+0x24>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   249d8:	b2ad      	uxth	r5, r5
   249da:	2d41      	cmp	r5, #65	; 0x41
   249dc:	d809      	bhi.n	249f2 <handle_na_input+0x6a>
		ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   249de:	a905      	add	r1, sp, #20
   249e0:	4620      	mov	r0, r4
   249e2:	f7fe fb31 	bl	23048 <net_icmpv6_get_hdr>
		if (ret < 0 || icmp_hdr.code != 0) {
   249e6:	2800      	cmp	r0, #0
   249e8:	dbe0      	blt.n	249ac <handle_na_input+0x24>
   249ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   249ee:	b193      	cbz	r3, 24a16 <handle_na_input+0x8e>
   249f0:	e7dc      	b.n	249ac <handle_na_input+0x24>
	return pkt->frags->data;
   249f2:	6963      	ldr	r3, [r4, #20]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   249f4:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   249f6:	79db      	ldrb	r3, [r3, #7]
   249f8:	2bff      	cmp	r3, #255	; 0xff
   249fa:	d1f0      	bne.n	249de <handle_na_input+0x56>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   249fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   24a00:	2bff      	cmp	r3, #255	; 0xff
   24a02:	d0ec      	beq.n	249de <handle_na_input+0x56>
	    (net_is_solicited(pkt) &&
   24a04:	4620      	mov	r0, r4
   24a06:	f7ff fd7d 	bl	24504 <net_is_solicited>
	    net_is_ipv6_addr_mcast(&na_hdr.tgt) ||
   24a0a:	b120      	cbz	r0, 24a16 <handle_na_input+0x8e>
   24a0c:	6963      	ldr	r3, [r4, #20]
	     net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst))) {
   24a0e:	689b      	ldr	r3, [r3, #8]
	    (net_is_solicited(pkt) &&
   24a10:	7e1b      	ldrb	r3, [r3, #24]
   24a12:	2bff      	cmp	r3, #255	; 0xff
   24a14:	d0e3      	beq.n	249de <handle_na_input+0x56>
	pkt->ipv6_ext_opt_len = len;
   24a16:	2314      	movs	r3, #20
   24a18:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	return net_buf_frags_len(pkt->frags);
   24a1c:	6960      	ldr	r0, [r4, #20]
   24a1e:	f7ff fba4 	bl	2416a <net_buf_frags_len>
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   24a22:	a902      	add	r1, sp, #8
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   24a24:	f1a0 052c 	sub.w	r5, r0, #44	; 0x2c
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   24a28:	4620      	mov	r0, r4
   24a2a:	f7fe fcfb 	bl	23424 <net_icmpv6_get_nd_opt_hdr>
	u16_t tllao_offset = 0;
   24a2e:	2600      	movs	r6, #0
	while (!ret && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   24a30:	b918      	cbnz	r0, 24a3a <handle_na_input+0xb2>
   24a32:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   24a36:	4295      	cmp	r5, r2
   24a38:	d80e      	bhi.n	24a58 <handle_na_input+0xd0>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   24a3a:	a908      	add	r1, sp, #32
   24a3c:	6a20      	ldr	r0, [r4, #32]
   24a3e:	f7fb fa15 	bl	1fe6c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   24a42:	2800      	cmp	r0, #0
   24a44:	d038      	beq.n	24ab8 <handle_na_input+0x130>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   24a46:	f990 3045 	ldrsb.w	r3, [r0, #69]	; 0x45
   24a4a:	2b00      	cmp	r3, #0
   24a4c:	d1ae      	bne.n	249ac <handle_na_input+0x24>
			dad_failed(net_pkt_iface(pkt), &na_hdr.tgt);
   24a4e:	a908      	add	r1, sp, #32
   24a50:	6a20      	ldr	r0, [r4, #32]
   24a52:	f7ff fde5 	bl	24620 <dad_failed>
   24a56:	e7a9      	b.n	249ac <handle_na_input+0x24>
		if (!nd_opt_hdr.len) {
   24a58:	f89d 3009 	ldrb.w	r3, [sp, #9]
   24a5c:	2b00      	cmp	r3, #0
   24a5e:	d0ec      	beq.n	24a3a <handle_na_input+0xb2>
		switch (nd_opt_hdr.type) {
   24a60:	f89d 1008 	ldrb.w	r1, [sp, #8]
   24a64:	2902      	cmp	r1, #2
   24a66:	d107      	bne.n	24a78 <handle_na_input+0xf0>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   24a68:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
   24a6c:	1db1      	adds	r1, r6, #6
   24a6e:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
   24a72:	440e      	add	r6, r1
   24a74:	4416      	add	r6, r2
   24a76:	b2b6      	uxth	r6, r6
		net_pkt_set_ipv6_ext_opt_len(pkt,
   24a78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   24a7c:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   24a7e:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   24a80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   24a84:	d813      	bhi.n	24aae <handle_na_input+0x126>
			NET_ERR("Corrupted NA message");
   24a86:	4b7e      	ldr	r3, [pc, #504]	; (24c80 <handle_na_input+0x2f8>)
   24a88:	681b      	ldr	r3, [r3, #0]
   24a8a:	075b      	lsls	r3, r3, #29
   24a8c:	d08e      	beq.n	249ac <handle_na_input+0x24>
   24a8e:	2301      	movs	r3, #1
   24a90:	f04f 0200 	mov.w	r2, #0
   24a94:	f363 0202 	bfi	r2, r3, #0, #3
   24a98:	497a      	ldr	r1, [pc, #488]	; (24c84 <handle_na_input+0x2fc>)
   24a9a:	4b7b      	ldr	r3, [pc, #492]	; (24c88 <handle_na_input+0x300>)
   24a9c:	487d      	ldr	r0, [pc, #500]	; (24c94 <handle_na_input+0x30c>)
   24a9e:	1a5b      	subs	r3, r3, r1
   24aa0:	f36f 02c5 	bfc	r2, #3, #3
   24aa4:	08db      	lsrs	r3, r3, #3
   24aa6:	f363 128f 	bfi	r2, r3, #6, #10
   24aaa:	4979      	ldr	r1, [pc, #484]	; (24c90 <handle_na_input+0x308>)
   24aac:	e791      	b.n	249d2 <handle_na_input+0x4a>
		ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   24aae:	a902      	add	r1, sp, #8
   24ab0:	4620      	mov	r0, r4
   24ab2:	f7fe fcb7 	bl	23424 <net_icmpv6_get_nd_opt_hdr>
   24ab6:	e7bb      	b.n	24a30 <handle_na_input+0xa8>
	struct net_linkaddr_storage lladdr = { 0 };
   24ab8:	e9cd 0003 	strd	r0, r0, [sp, #12]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   24abc:	a908      	add	r1, sp, #32
   24abe:	6a20      	ldr	r0, [r4, #32]
   24ac0:	f7ff fc9c 	bl	243fc <nbr_lookup.isra.21>
	if (!nbr) {
   24ac4:	4605      	mov	r5, r0
   24ac6:	2800      	cmp	r0, #0
   24ac8:	f43f af70 	beq.w	249ac <handle_na_input+0x24>
	if (tllao_offset) {
   24acc:	2e00      	cmp	r6, #0
   24ace:	d15a      	bne.n	24b86 <handle_na_input+0x1fe>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   24ad0:	786b      	ldrb	r3, [r5, #1]
   24ad2:	2bff      	cmp	r3, #255	; 0xff
   24ad4:	d06e      	beq.n	24bb4 <handle_na_input+0x22c>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   24ad6:	7868      	ldrb	r0, [r5, #1]
   24ad8:	f7ff f8ae 	bl	23c38 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   24adc:	4607      	mov	r7, r0
   24ade:	2800      	cmp	r0, #0
   24ae0:	f43f af64 	beq.w	249ac <handle_na_input+0x24>
	if (tllao_offset) {
   24ae4:	2e00      	cmp	r6, #0
   24ae6:	d07c      	beq.n	24be2 <handle_na_input+0x25a>
		lladdr_changed = memcmp(lladdr.addr,
   24ae8:	7842      	ldrb	r2, [r0, #1]
   24aea:	1c81      	adds	r1, r0, #2
   24aec:	f10d 000e 	add.w	r0, sp, #14
   24af0:	f7e1 f9a3 	bl	5e3a <memcmp>
   24af4:	f110 0800 	adds.w	r8, r0, #0
   24af8:	bf18      	it	ne
   24afa:	f04f 0801 	movne.w	r8, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   24afe:	68eb      	ldr	r3, [r5, #12]
   24b00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   24b04:	2b00      	cmp	r3, #0
   24b06:	d173      	bne.n	24bf0 <handle_na_input+0x268>
		if (!tllao_offset) {
   24b08:	2e00      	cmp	r6, #0
   24b0a:	f43f af4f 	beq.w	249ac <handle_na_input+0x24>
		if (lladdr_changed) {
   24b0e:	f1b8 0f00 	cmp.w	r8, #0
   24b12:	d008      	beq.n	24b26 <handle_na_input+0x19e>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   24b14:	4638      	mov	r0, r7
   24b16:	f7ff fdef 	bl	246f8 <dbg_update_neighbor_lladdr.isra.23>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   24b1a:	787a      	ldrb	r2, [r7, #1]
   24b1c:	f10d 010e 	add.w	r1, sp, #14
   24b20:	4638      	mov	r0, r7
   24b22:	f7ff fb7e 	bl	24222 <net_linkaddr_set>
		if (net_is_solicited(pkt)) {
   24b26:	4620      	mov	r0, r4
   24b28:	f7ff fcec 	bl	24504 <net_is_solicited>
   24b2c:	2800      	cmp	r0, #0
   24b2e:	d05a      	beq.n	24be6 <handle_na_input+0x25e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   24b30:	2101      	movs	r1, #1
   24b32:	4628      	mov	r0, r5
   24b34:	f7ff fb32 	bl	2419c <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   24b38:	68eb      	ldr	r3, [r5, #12]
   24b3a:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
   24b3c:	2000      	movs	r0, #0
   24b3e:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   24b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			net_ipv6_nbr_data(nbr)->reachable = 0;
   24b44:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   24b48:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   24b4a:	4629      	mov	r1, r5
   24b4c:	6a20      	ldr	r0, [r4, #32]
   24b4e:	f7ff fedf 	bl	24910 <net_ipv6_nbr_set_reachable_timer>
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   24b52:	4620      	mov	r0, r4
   24b54:	68ee      	ldr	r6, [r5, #12]
   24b56:	f7ff fd35 	bl	245c4 <net_is_router>
	pending = net_ipv6_nbr_data(nbr)->pending;
   24b5a:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   24b5c:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
   24b60:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   24b62:	b15e      	cbz	r6, 24b7c <handle_na_input+0x1f4>
		if (net_send_data(pending) < 0) {
   24b64:	4630      	mov	r0, r6
   24b66:	f7fa fe61 	bl	1f82c <net_send_data>
   24b6a:	2800      	cmp	r0, #0
   24b6c:	f280 809c 	bge.w	24ca8 <handle_na_input+0x320>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   24b70:	68e8      	ldr	r0, [r5, #12]
   24b72:	f7ff fb34 	bl	241de <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   24b76:	4630      	mov	r0, r6
   24b78:	f7fc fd51 	bl	2161e <net_pkt_unref>
	net_pkt_unref(pkt);
   24b7c:	4620      	mov	r0, r4
   24b7e:	f7fc fd4e 	bl	2161e <net_pkt_unref>
	return NET_OK;
   24b82:	2000      	movs	r0, #0
   24b84:	e713      	b.n	249ae <handle_na_input+0x26>
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   24b86:	6a23      	ldr	r3, [r4, #32]
		frag = net_frag_read(pkt->frags, tllao_offset,
   24b88:	6960      	ldr	r0, [r4, #20]
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   24b8a:	681b      	ldr	r3, [r3, #0]
		frag = net_frag_read(pkt->frags, tllao_offset,
   24b8c:	f10d 020e 	add.w	r2, sp, #14
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   24b90:	7d1b      	ldrb	r3, [r3, #20]
		frag = net_frag_read(pkt->frags, tllao_offset,
   24b92:	9200      	str	r2, [sp, #0]
   24b94:	4631      	mov	r1, r6
   24b96:	f10d 020a 	add.w	r2, sp, #10
		lladdr.len = net_if_get_link_addr(net_pkt_iface(pkt))->len;
   24b9a:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   24b9e:	f7fc fe9f 	bl	218e0 <net_frag_read>
		if (!frag && pos == 0xffff) {
   24ba2:	2800      	cmp	r0, #0
   24ba4:	d194      	bne.n	24ad0 <handle_na_input+0x148>
   24ba6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   24baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24bae:	429a      	cmp	r2, r3
   24bb0:	d18e      	bne.n	24ad0 <handle_na_input+0x148>
   24bb2:	e6fb      	b.n	249ac <handle_na_input+0x24>
		if (!tllao_offset) {
   24bb4:	2e00      	cmp	r6, #0
   24bb6:	f43f aef9 	beq.w	249ac <handle_na_input+0x24>
		nbr_lladdr.len = lladdr.len;
   24bba:	f89d 300d 	ldrb.w	r3, [sp, #13]
   24bbe:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   24bc2:	aa0c      	add	r2, sp, #48	; 0x30
   24bc4:	f10d 030e 	add.w	r3, sp, #14
   24bc8:	f842 3d1c 	str.w	r3, [r2, #-28]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   24bcc:	6a21      	ldr	r1, [r4, #32]
   24bce:	4628      	mov	r0, r5
   24bd0:	f7fe ff76 	bl	23ac0 <net_nbr_link>
   24bd4:	2800      	cmp	r0, #0
   24bd6:	f43f af7e 	beq.w	24ad6 <handle_na_input+0x14e>
			nbr_free(nbr);
   24bda:	4628      	mov	r0, r5
   24bdc:	f7ff fb0c 	bl	241f8 <nbr_free>
   24be0:	e6e4      	b.n	249ac <handle_na_input+0x24>
	bool lladdr_changed = false;
   24be2:	46b0      	mov	r8, r6
   24be4:	e78b      	b.n	24afe <handle_na_input+0x176>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   24be6:	2102      	movs	r1, #2
   24be8:	4628      	mov	r0, r5
   24bea:	f7ff fad7 	bl	2419c <ipv6_nbr_set_state>
   24bee:	e7b0      	b.n	24b52 <handle_na_input+0x1ca>
	if (!net_is_override(pkt) && lladdr_changed) {
   24bf0:	4620      	mov	r0, r4
   24bf2:	f7ff fcb7 	bl	24564 <net_is_override>
   24bf6:	b968      	cbnz	r0, 24c14 <handle_na_input+0x28c>
   24bf8:	f1b8 0f00 	cmp.w	r8, #0
   24bfc:	d00a      	beq.n	24c14 <handle_na_input+0x28c>
		if (net_ipv6_nbr_data(nbr)->state ==
   24bfe:	68eb      	ldr	r3, [r5, #12]
   24c00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   24c04:	2b01      	cmp	r3, #1
   24c06:	f47f aed1 	bne.w	249ac <handle_na_input+0x24>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   24c0a:	2102      	movs	r1, #2
   24c0c:	4628      	mov	r0, r5
   24c0e:	f7ff fac5 	bl	2419c <ipv6_nbr_set_state>
   24c12:	e6cb      	b.n	249ac <handle_na_input+0x24>
	if (net_is_override(pkt) ||
   24c14:	4620      	mov	r0, r4
   24c16:	f7ff fca5 	bl	24564 <net_is_override>
   24c1a:	bb20      	cbnz	r0, 24c66 <handle_na_input+0x2de>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   24c1c:	4620      	mov	r0, r4
   24c1e:	f7ff fca1 	bl	24564 <net_is_override>
	if (net_is_override(pkt) ||
   24c22:	b9b0      	cbnz	r0, 24c52 <handle_na_input+0x2ca>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   24c24:	b1ae      	cbz	r6, 24c52 <handle_na_input+0x2ca>
   24c26:	f1b8 0f00 	cmp.w	r8, #0
   24c2a:	d112      	bne.n	24c52 <handle_na_input+0x2ca>
		if (net_is_solicited(pkt)) {
   24c2c:	4620      	mov	r0, r4
   24c2e:	f7ff fc69 	bl	24504 <net_is_solicited>
   24c32:	b388      	cbz	r0, 24c98 <handle_na_input+0x310>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   24c34:	2101      	movs	r1, #1
   24c36:	4628      	mov	r0, r5
   24c38:	f7ff fab0 	bl	2419c <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   24c3c:	68eb      	ldr	r3, [r5, #12]
   24c3e:	2000      	movs	r0, #0
   24c40:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   24c42:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
   24c44:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   24c48:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   24c4a:	4629      	mov	r1, r5
   24c4c:	6a20      	ldr	r0, [r4, #32]
   24c4e:	f7ff fe5f 	bl	24910 <net_ipv6_nbr_set_reachable_timer>
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   24c52:	68eb      	ldr	r3, [r5, #12]
   24c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
   24c58:	2b00      	cmp	r3, #0
   24c5a:	f43f af7a 	beq.w	24b52 <handle_na_input+0x1ca>
   24c5e:	4620      	mov	r0, r4
   24c60:	f7ff fcb0 	bl	245c4 <net_is_router>
   24c64:	e775      	b.n	24b52 <handle_na_input+0x1ca>
		if (lladdr_changed) {
   24c66:	f1b8 0f00 	cmp.w	r8, #0
   24c6a:	d0df      	beq.n	24c2c <handle_na_input+0x2a4>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   24c6c:	4638      	mov	r0, r7
   24c6e:	f7ff fd43 	bl	246f8 <dbg_update_neighbor_lladdr.isra.23>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   24c72:	787a      	ldrb	r2, [r7, #1]
   24c74:	f10d 010e 	add.w	r1, sp, #14
   24c78:	4638      	mov	r0, r7
   24c7a:	f7ff fad2 	bl	24222 <net_linkaddr_set>
   24c7e:	e7d5      	b.n	24c2c <handle_na_input+0x2a4>
   24c80:	2000d7a0 	.word	0x2000d7a0
   24c84:	0002cff8 	.word	0x0002cff8
   24c88:	0002d118 	.word	0x0002d118
   24c8c:	00032da2 	.word	0x00032da2
   24c90:	00032d11 	.word	0x00032d11
   24c94:	00032dc0 	.word	0x00032dc0
			if (lladdr_changed) {
   24c98:	f1b8 0f00 	cmp.w	r8, #0
   24c9c:	d0d9      	beq.n	24c52 <handle_na_input+0x2ca>
				ipv6_nbr_set_state(nbr,
   24c9e:	2102      	movs	r1, #2
   24ca0:	4628      	mov	r0, r5
   24ca2:	f7ff fa7b 	bl	2419c <ipv6_nbr_set_state>
   24ca6:	e7d4      	b.n	24c52 <handle_na_input+0x2ca>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   24ca8:	68eb      	ldr	r3, [r5, #12]
   24caa:	2200      	movs	r2, #0
   24cac:	601a      	str	r2, [r3, #0]
   24cae:	e762      	b.n	24b76 <handle_na_input+0x1ee>

00024cb0 <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     struct in6_addr *src,
		     struct in6_addr *dst,
		     struct in6_addr *tgt,
		     bool is_my_address)
{
   24cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cb4:	b09d      	sub	sp, #116	; 0x74
   24cb6:	461e      	mov	r6, r3
   24cb8:	4688      	mov	r8, r1
   24cba:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
   24cbe:	9301      	str	r3, [sp, #4]
	struct net_buf *frag;
	struct net_nbr *nbr;
	u8_t llao_len;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   24cc0:	4631      	mov	r1, r6
{
   24cc2:	4615      	mov	r5, r2
   24cc4:	4681      	mov	r9, r0
   24cc6:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   24cca:	f7ff fa63 	bl	24194 <net_if_get_ll_reserve>
   24cce:	2164      	movs	r1, #100	; 0x64
   24cd0:	f7fc fbcc 	bl	2146c <net_pkt_get_reserve_tx>
				     ND_NET_BUF_TIMEOUT);
	if (!pkt) {
   24cd4:	4604      	mov	r4, r0
   24cd6:	b138      	cbz	r0, 24ce8 <net_ipv6_send_ns+0x38>
		return -ENOMEM;
	}

	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   24cd8:	2164      	movs	r1, #100	; 0x64
   24cda:	f7fc fbdf 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   24cde:	4607      	mov	r7, r0
   24ce0:	b928      	cbnz	r0, 24cee <net_ipv6_send_ns+0x3e>
		net_pkt_unref(pkt);
   24ce2:	4620      	mov	r0, r4
   24ce4:	f7fc fc9b 	bl	2161e <net_pkt_unref>
		return -ENOMEM;
   24ce8:	f06f 0b0b 	mvn.w	fp, #11
   24cec:	e06a      	b.n	24dc4 <net_ipv6_send_ns+0x114>
		return -ENOMEM;
	}

	net_pkt_frag_add(pkt, frag);
   24cee:	4601      	mov	r1, r0
   24cf0:	4620      	mov	r0, r4
   24cf2:	f7fc fcbb 	bl	2166c <net_pkt_frag_add>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   24cf6:	f8d9 3000 	ldr.w	r3, [r9]
	pkt->iface = iface;
   24cfa:	f8c4 9020 	str.w	r9, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   24cfe:	7d5b      	ldrb	r3, [r3, #21]
   24d00:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   24d04:	f8d9 3000 	ldr.w	r3, [r9]
   24d08:	7d5b      	ldrb	r3, [r3, #21]
   24d0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
   24d0e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   24d12:	220a      	movs	r2, #10
   24d14:	f362 03c6 	bfi	r3, r2, #3, #4
   24d18:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->ip_hdr_len = len;
   24d1c:	2328      	movs	r3, #40	; 0x28
   24d1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	pkt->ipv6_ext_len = len;
   24d22:	2300      	movs	r3, #0
   24d24:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_ext_len(pkt, 0);

	net_pkt_ll_clear(pkt);
   24d28:	4620      	mov	r0, r4
   24d2a:	f7ff fb14 	bl	24356 <net_pkt_ll_clear>

	llao_len = get_llao_len(net_pkt_iface(pkt));
   24d2e:	6a20      	ldr	r0, [r4, #32]
   24d30:	f7ff fb36 	bl	243a0 <get_llao_len>

	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   24d34:	f100 0114 	add.w	r1, r0, #20
   24d38:	2287      	movs	r2, #135	; 0x87
   24d3a:	b2c9      	uxtb	r1, r1
	llao_len = get_llao_len(net_pkt_iface(pkt));
   24d3c:	4681      	mov	r9, r0
		      NET_ICMPV6_NS);

	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   24d3e:	3708      	adds	r7, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   24d40:	4620      	mov	r0, r4
   24d42:	f7ff fae5 	bl	24310 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   24d46:	2114      	movs	r1, #20
   24d48:	4638      	mov	r0, r7
   24d4a:	f7f9 fbdf 	bl	1e50c <net_buf_simple_add>
   24d4e:	6963      	ldr	r3, [r4, #20]
	return pkt->frags->data;
   24d50:	689b      	ldr	r3, [r3, #8]

	if (!dst) {
   24d52:	2e00      	cmp	r6, #0
   24d54:	d13a      	bne.n	24dcc <net_ipv6_send_ns+0x11c>
	dst->s6_addr[0]   = 0xFF;
   24d56:	f240 22ff 	movw	r2, #767	; 0x2ff
   24d5a:	619a      	str	r2, [r3, #24]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   24d5c:	771e      	strb	r6, [r3, #28]
   24d5e:	775e      	strb	r6, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   24d60:	779e      	strb	r6, [r3, #30]
   24d62:	77de      	strb	r6, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   24d64:	f883 6020 	strb.w	r6, [r3, #32]
   24d68:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   24d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
   24d70:	845a      	strh	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   24d72:	22ff      	movs	r2, #255	; 0xff
   24d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   24d78:	f89a 200d 	ldrb.w	r2, [sl, #13]
   24d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   24d80:	f8ba 200e 	ldrh.w	r2, [sl, #14]
   24d84:	84da      	strh	r2, [r3, #38]	; 0x26
						    &NET_IPV6_HDR(pkt)->dst);
	} else {
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
	}

	net_ipaddr_copy(&ns_hdr.tgt, tgt);
   24d86:	aa07      	add	r2, sp, #28
   24d88:	f10a 0c10 	add.w	ip, sl, #16
   24d8c:	4613      	mov	r3, r2
   24d8e:	f8da 0000 	ldr.w	r0, [sl]
   24d92:	f8da 1004 	ldr.w	r1, [sl, #4]
   24d96:	4616      	mov	r6, r2
   24d98:	c603      	stmia	r6!, {r0, r1}
   24d9a:	f10a 0a08 	add.w	sl, sl, #8
   24d9e:	45e2      	cmp	sl, ip
   24da0:	4632      	mov	r2, r6
   24da2:	d1f4      	bne.n	24d8e <net_ipv6_send_ns+0xde>
   24da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   24da6:	ae18      	add	r6, sp, #96	; 0x60
   24da8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	ret = net_icmpv6_set_ns_hdr(pkt, &ns_hdr);
   24dac:	f10d 0a5c 	add.w	sl, sp, #92	; 0x5c
   24db0:	4651      	mov	r1, sl
   24db2:	4620      	mov	r0, r4
   24db4:	f7fe faf2 	bl	2339c <net_icmpv6_set_ns_hdr>
	if (ret < 0) {
   24db8:	f1b0 0b00 	subs.w	fp, r0, #0
   24dbc:	da20      	bge.n	24e00 <net_ipv6_send_ns+0x150>
			 llao_len, NET_ICMPV6_ND_OPT_SLLAO);
	}

	ret = net_icmpv6_set_chksum(pkt);
	if (ret < 0) {
		net_pkt_unref(pkt);
   24dbe:	4620      	mov	r0, r4
   24dc0:	f7fc fc2d 	bl	2161e <net_pkt_unref>
drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));
	net_pkt_unref(pkt);

	return -EINVAL;
}
   24dc4:	4658      	mov	r0, fp
   24dc6:	b01d      	add	sp, #116	; 0x74
   24dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   24dcc:	f10d 0c0c 	add.w	ip, sp, #12
   24dd0:	f106 0e10 	add.w	lr, r6, #16
   24dd4:	6830      	ldr	r0, [r6, #0]
   24dd6:	6871      	ldr	r1, [r6, #4]
   24dd8:	4662      	mov	r2, ip
   24dda:	c203      	stmia	r2!, {r0, r1}
   24ddc:	3608      	adds	r6, #8
   24dde:	4576      	cmp	r6, lr
   24de0:	4694      	mov	ip, r2
   24de2:	d1f7      	bne.n	24dd4 <net_ipv6_send_ns+0x124>
   24de4:	ae03      	add	r6, sp, #12
   24de6:	3318      	adds	r3, #24
   24de8:	f10d 0c1c 	add.w	ip, sp, #28
   24dec:	4632      	mov	r2, r6
   24dee:	ca03      	ldmia	r2!, {r0, r1}
   24df0:	4562      	cmp	r2, ip
   24df2:	6018      	str	r0, [r3, #0]
   24df4:	6059      	str	r1, [r3, #4]
   24df6:	4616      	mov	r6, r2
   24df8:	f103 0308 	add.w	r3, r3, #8
   24dfc:	d1f6      	bne.n	24dec <net_ipv6_send_ns+0x13c>
   24dfe:	e7c2      	b.n	24d86 <net_ipv6_send_ns+0xd6>
   24e00:	6963      	ldr	r3, [r4, #20]
   24e02:	f8d3 b008 	ldr.w	fp, [r3, #8]
	if (is_my_address) {
   24e06:	9b01      	ldr	r3, [sp, #4]
   24e08:	2b00      	cmp	r3, #0
   24e0a:	d064      	beq.n	24ed6 <net_ipv6_send_ns+0x226>
		u16_t len = ntohs(NET_IPV6_HDR(pkt)->len);
   24e0c:	f8bb 7004 	ldrh.w	r7, [fp, #4]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   24e10:	f7fe ffda 	bl	23dc8 <net_ipv6_unspecified_address>
   24e14:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
   24e18:	4602      	mov	r2, r0
   24e1a:	f100 0a10 	add.w	sl, r0, #16
   24e1e:	4665      	mov	r5, ip
   24e20:	6810      	ldr	r0, [r2, #0]
   24e22:	6851      	ldr	r1, [r2, #4]
   24e24:	46e6      	mov	lr, ip
   24e26:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   24e2a:	3208      	adds	r2, #8
   24e2c:	4552      	cmp	r2, sl
   24e2e:	46f4      	mov	ip, lr
   24e30:	d1f6      	bne.n	24e20 <net_ipv6_send_ns+0x170>
   24e32:	f10b 0308 	add.w	r3, fp, #8
   24e36:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
   24e3a:	462a      	mov	r2, r5
   24e3c:	ca03      	ldmia	r2!, {r0, r1}
   24e3e:	4562      	cmp	r2, ip
   24e40:	6018      	str	r0, [r3, #0]
   24e42:	6059      	str	r1, [r3, #4]
   24e44:	4615      	mov	r5, r2
   24e46:	f103 0308 	add.w	r3, r3, #8
   24e4a:	d1f6      	bne.n	24e3a <net_ipv6_send_ns+0x18a>
   24e4c:	6963      	ldr	r3, [r4, #20]
		NET_IPV6_HDR(pkt)->len = htons(len - llao_len);
   24e4e:	689a      	ldr	r2, [r3, #8]
		u16_t len = ntohs(NET_IPV6_HDR(pkt)->len);
   24e50:	023b      	lsls	r3, r7, #8
   24e52:	ea43 2317 	orr.w	r3, r3, r7, lsr #8
		NET_IPV6_HDR(pkt)->len = htons(len - llao_len);
   24e56:	b29b      	uxth	r3, r3
   24e58:	eba3 0909 	sub.w	r9, r3, r9
   24e5c:	fa99 f999 	rev16.w	r9, r9
   24e60:	f8a2 9004 	strh.w	r9, [r2, #4]
	ret = net_icmpv6_set_chksum(pkt);
   24e64:	4620      	mov	r0, r4
   24e66:	f7fe f8a1 	bl	22fac <net_icmpv6_set_chksum>
	if (ret < 0) {
   24e6a:	f1b0 0b00 	subs.w	fp, r0, #0
   24e6e:	dba6      	blt.n	24dbe <net_ipv6_send_ns+0x10e>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr.tgt);
   24e70:	4631      	mov	r1, r6
   24e72:	6a20      	ldr	r0, [r4, #32]
   24e74:	f7ff fac2 	bl	243fc <nbr_lookup.isra.21>
	if (!nbr) {
   24e78:	4605      	mov	r5, r0
   24e7a:	b938      	cbnz	r0, 24e8c <net_ipv6_send_ns+0x1dc>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr.tgt, false,
   24e7c:	4602      	mov	r2, r0
   24e7e:	4631      	mov	r1, r6
   24e80:	6a20      	ldr	r0, [r4, #32]
   24e82:	f7ff fbf9 	bl	24678 <nbr_new.isra.22>
		if (!nbr) {
   24e86:	4605      	mov	r5, r0
   24e88:	2800      	cmp	r0, #0
   24e8a:	d047      	beq.n	24f1c <net_ipv6_send_ns+0x26c>
	if (pending) {
   24e8c:	f1b8 0f00 	cmp.w	r8, #0
   24e90:	d015      	beq.n	24ebe <net_ipv6_send_ns+0x20e>
		if (!net_ipv6_nbr_data(nbr)->pending) {
   24e92:	68ee      	ldr	r6, [r5, #12]
   24e94:	6833      	ldr	r3, [r6, #0]
   24e96:	2b00      	cmp	r3, #0
   24e98:	d143      	bne.n	24f22 <net_ipv6_send_ns+0x272>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   24e9a:	4640      	mov	r0, r8
   24e9c:	f7fc fbb4 	bl	21608 <net_pkt_ref>
   24ea0:	6030      	str	r0, [r6, #0]
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
   24ea2:	68ee      	ldr	r6, [r5, #12]
   24ea4:	f007 fe02 	bl	2caac <_impl_k_uptime_get>
   24ea8:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
		if (!k_delayed_work_remaining_get(&ipv6_ns_reply_timer)) {
   24eac:	483c      	ldr	r0, [pc, #240]	; (24fa0 <net_ipv6_send_ns+0x2f0>)
   24eae:	f7ff f9c9 	bl	24244 <k_delayed_work_remaining_get>
   24eb2:	b920      	cbnz	r0, 24ebe <net_ipv6_send_ns+0x20e>
			k_delayed_work_submit(&ipv6_ns_reply_timer,
   24eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   24eb8:	4839      	ldr	r0, [pc, #228]	; (24fa0 <net_ipv6_send_ns+0x2f0>)
   24eba:	f7ff f9d1 	bl	24260 <k_delayed_work_submit>
	if (net_send_data(pkt) < 0) {
   24ebe:	4620      	mov	r0, r4
   24ec0:	f7fa fcb4 	bl	1f82c <net_send_data>
   24ec4:	2800      	cmp	r0, #0
   24ec6:	da67      	bge.n	24f98 <net_ipv6_send_ns+0x2e8>
		if (pending) {
   24ec8:	f1b8 0f00 	cmp.w	r8, #0
   24ecc:	d02c      	beq.n	24f28 <net_ipv6_send_ns+0x278>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   24ece:	68e8      	ldr	r0, [r5, #12]
   24ed0:	f7ff f985 	bl	241de <nbr_clear_ns_pending>
   24ed4:	e028      	b.n	24f28 <net_ipv6_send_ns+0x278>
		if (src) {
   24ed6:	b36d      	cbz	r5, 24f34 <net_ipv6_send_ns+0x284>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   24ed8:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
   24edc:	f105 0a10 	add.w	sl, r5, #16
   24ee0:	4662      	mov	r2, ip
   24ee2:	6828      	ldr	r0, [r5, #0]
   24ee4:	6869      	ldr	r1, [r5, #4]
   24ee6:	46e6      	mov	lr, ip
   24ee8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   24eec:	3508      	adds	r5, #8
   24eee:	4555      	cmp	r5, sl
   24ef0:	46f4      	mov	ip, lr
   24ef2:	d1f6      	bne.n	24ee2 <net_ipv6_send_ns+0x232>
   24ef4:	4615      	mov	r5, r2
   24ef6:	f10b 0308 	add.w	r3, fp, #8
   24efa:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   24efe:	462a      	mov	r2, r5
   24f00:	ca03      	ldmia	r2!, {r0, r1}
   24f02:	4562      	cmp	r2, ip
   24f04:	6018      	str	r0, [r3, #0]
   24f06:	6059      	str	r1, [r3, #4]
   24f08:	4615      	mov	r5, r2
   24f0a:	f103 0308 	add.w	r3, r3, #8
   24f0e:	d1f6      	bne.n	24efe <net_ipv6_send_ns+0x24e>
   24f10:	6963      	ldr	r3, [r4, #20]
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   24f12:	6898      	ldr	r0, [r3, #8]
   24f14:	3008      	adds	r0, #8
   24f16:	f7ff f930 	bl	2417a <net_is_ipv6_addr_unspecified>
   24f1a:	b358      	cbz	r0, 24f74 <net_ipv6_send_ns+0x2c4>
			if (pending) {
   24f1c:	f1b8 0f00 	cmp.w	r8, #0
   24f20:	d002      	beq.n	24f28 <net_ipv6_send_ns+0x278>
				net_pkt_unref(pending);
   24f22:	4640      	mov	r0, r8
   24f24:	f7fc fb7b 	bl	2161e <net_pkt_unref>
	net_pkt_unref(pkt);
   24f28:	4620      	mov	r0, r4
   24f2a:	f7fc fb78 	bl	2161e <net_pkt_unref>
	return -EINVAL;
   24f2e:	f06f 0b15 	mvn.w	fp, #21
   24f32:	e747      	b.n	24dc4 <net_ipv6_send_ns+0x114>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   24f34:	f10b 0118 	add.w	r1, fp, #24
   24f38:	6a20      	ldr	r0, [r4, #32]
   24f3a:	f7fb fe8f 	bl	20c5c <net_if_ipv6_select_src_addr>
   24f3e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   24f42:	4602      	mov	r2, r0
   24f44:	f100 0310 	add.w	r3, r0, #16
   24f48:	4665      	mov	r5, ip
   24f4a:	6810      	ldr	r0, [r2, #0]
   24f4c:	6851      	ldr	r1, [r2, #4]
   24f4e:	46e6      	mov	lr, ip
   24f50:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   24f54:	3208      	adds	r2, #8
   24f56:	429a      	cmp	r2, r3
   24f58:	46f4      	mov	ip, lr
   24f5a:	d1f6      	bne.n	24f4a <net_ipv6_send_ns+0x29a>
   24f5c:	f10b 0308 	add.w	r3, fp, #8
   24f60:	462a      	mov	r2, r5
   24f62:	ca03      	ldmia	r2!, {r0, r1}
   24f64:	4552      	cmp	r2, sl
   24f66:	6018      	str	r0, [r3, #0]
   24f68:	6059      	str	r1, [r3, #4]
   24f6a:	4615      	mov	r5, r2
   24f6c:	f103 0308 	add.w	r3, r3, #8
   24f70:	d1f6      	bne.n	24f60 <net_ipv6_send_ns+0x2b0>
   24f72:	e7cd      	b.n	24f10 <net_ipv6_send_ns+0x260>
		net_buf_add(frag, llao_len);
   24f74:	4649      	mov	r1, r9
   24f76:	4638      	mov	r0, r7
   24f78:	f7f9 fac8 	bl	1e50c <net_buf_simple_add>
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   24f7c:	6a23      	ldr	r3, [r4, #32]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   24f7e:	4620      	mov	r0, r4
	return &iface->if_dev->link_addr;
   24f80:	681d      	ldr	r5, [r3, #0]
   24f82:	f7fc fdf4 	bl	21b6e <net_pkt_icmp_data>
   24f86:	3510      	adds	r5, #16
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   24f88:	f100 0118 	add.w	r1, r0, #24
   24f8c:	2301      	movs	r3, #1
   24f8e:	464a      	mov	r2, r9
   24f90:	4628      	mov	r0, r5
   24f92:	f7ff f9ef 	bl	24374 <set_llao>
   24f96:	e765      	b.n	24e64 <net_ipv6_send_ns+0x1b4>
	return 0;
   24f98:	f04f 0b00 	mov.w	fp, #0
   24f9c:	e712      	b.n	24dc4 <net_ipv6_send_ns+0x114>
   24f9e:	bf00      	nop
   24fa0:	200026cc 	.word	0x200026cc

00024fa4 <net_ipv6_nbr_add>:
{
   24fa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24fa8:	4606      	mov	r6, r0
   24faa:	460f      	mov	r7, r1
   24fac:	4615      	mov	r5, r2
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   24fae:	f7ff fa25 	bl	243fc <nbr_lookup.isra.21>
	if (!nbr) {
   24fb2:	4604      	mov	r4, r0
   24fb4:	bb98      	cbnz	r0, 2501e <net_ipv6_nbr_add+0x7a>
		nbr = nbr_new(iface, addr, is_router, state);
   24fb6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   24fba:	4639      	mov	r1, r7
   24fbc:	4630      	mov	r0, r6
   24fbe:	f7ff fb5b 	bl	24678 <nbr_new.isra.22>
		if (!nbr) {
   24fc2:	4604      	mov	r4, r0
   24fc4:	bb58      	cbnz	r0, 2501e <net_ipv6_nbr_add+0x7a>
			NET_ERR("Could not add router neighbor %s [%s]",
   24fc6:	4b33      	ldr	r3, [pc, #204]	; (25094 <net_ipv6_nbr_add+0xf0>)
   24fc8:	681b      	ldr	r3, [r3, #0]
   24fca:	075b      	lsls	r3, r3, #29
   24fcc:	d023      	beq.n	25016 <net_ipv6_nbr_add+0x72>
   24fce:	2301      	movs	r3, #1
   24fd0:	f04f 0600 	mov.w	r6, #0
   24fd4:	4a30      	ldr	r2, [pc, #192]	; (25098 <net_ipv6_nbr_add+0xf4>)
   24fd6:	f363 0602 	bfi	r6, r3, #0, #3
   24fda:	4b30      	ldr	r3, [pc, #192]	; (2509c <net_ipv6_nbr_add+0xf8>)
   24fdc:	1a9b      	subs	r3, r3, r2
   24fde:	08db      	lsrs	r3, r3, #3
   24fe0:	4639      	mov	r1, r7
   24fe2:	f360 06c5 	bfi	r6, r0, #3, #3
   24fe6:	200a      	movs	r0, #10
   24fe8:	f363 168f 	bfi	r6, r3, #6, #10
   24fec:	f7fd f884 	bl	220f8 <net_sprint_addr>
   24ff0:	f7dd f844 	bl	207c <log_strdup>
   24ff4:	2318      	movs	r3, #24
   24ff6:	4a2a      	ldr	r2, [pc, #168]	; (250a0 <net_ipv6_nbr_add+0xfc>)
   24ff8:	7929      	ldrb	r1, [r5, #4]
   24ffa:	4607      	mov	r7, r0
   24ffc:	6828      	ldr	r0, [r5, #0]
   24ffe:	f7fc ff78 	bl	21ef2 <net_sprint_ll_addr_buf>
   25002:	f7dd f83b 	bl	207c <log_strdup>
   25006:	f8ad 6000 	strh.w	r6, [sp]
   2500a:	4603      	mov	r3, r0
   2500c:	463a      	mov	r2, r7
   2500e:	4925      	ldr	r1, [pc, #148]	; (250a4 <net_ipv6_nbr_add+0x100>)
   25010:	4825      	ldr	r0, [pc, #148]	; (250a8 <net_ipv6_nbr_add+0x104>)
   25012:	f7dc fecd 	bl	1db0 <log_3>
}
   25016:	4620      	mov	r0, r4
   25018:	b002      	add	sp, #8
   2501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   2501e:	462a      	mov	r2, r5
   25020:	4631      	mov	r1, r6
   25022:	4620      	mov	r0, r4
   25024:	f7fe fd4c 	bl	23ac0 <net_nbr_link>
   25028:	3045      	adds	r0, #69	; 0x45
   2502a:	d11a      	bne.n	25062 <net_ipv6_nbr_add+0xbe>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   2502c:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   2502e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25032:	2b05      	cmp	r3, #5
   25034:	d026      	beq.n	25084 <net_ipv6_nbr_add+0xe0>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   25036:	7860      	ldrb	r0, [r4, #1]
   25038:	f7fe fdfe 	bl	23c38 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   2503c:	792a      	ldrb	r2, [r5, #4]
   2503e:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   25040:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   25042:	3002      	adds	r0, #2
   25044:	f7e0 fef9 	bl	5e3a <memcmp>
   25048:	b1b8      	cbz	r0, 2507a <net_ipv6_nbr_add+0xd6>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
   2504a:	4640      	mov	r0, r8
   2504c:	f7ff fb54 	bl	246f8 <dbg_update_neighbor_lladdr.isra.23>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   25050:	792a      	ldrb	r2, [r5, #4]
   25052:	6829      	ldr	r1, [r5, #0]
   25054:	4640      	mov	r0, r8
   25056:	f7ff f8e4 	bl	24222 <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   2505a:	2102      	movs	r1, #2
   2505c:	4620      	mov	r0, r4
   2505e:	f7ff f89d 	bl	2419c <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   25062:	68e3      	ldr	r3, [r4, #12]
   25064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25068:	b963      	cbnz	r3, 25084 <net_ipv6_nbr_add+0xe0>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   2506a:	e9cd 7300 	strd	r7, r3, [sp]
   2506e:	461a      	mov	r2, r3
   25070:	4619      	mov	r1, r3
   25072:	4630      	mov	r0, r6
   25074:	f7ff fe1c 	bl	24cb0 <net_ipv6_send_ns>
   25078:	e004      	b.n	25084 <net_ipv6_nbr_add+0xe0>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   2507a:	68e3      	ldr	r3, [r4, #12]
   2507c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25080:	2b00      	cmp	r3, #0
   25082:	d0ea      	beq.n	2505a <net_ipv6_nbr_add+0xb6>
   25084:	2300      	movs	r3, #0
   25086:	461a      	mov	r2, r3
   25088:	4631      	mov	r1, r6
   2508a:	4808      	ldr	r0, [pc, #32]	; (250ac <net_ipv6_nbr_add+0x108>)
   2508c:	f001 fa3c 	bl	26508 <net_mgmt_event_notify_with_info>
   25090:	e7c1      	b.n	25016 <net_ipv6_nbr_add+0x72>
   25092:	bf00      	nop
   25094:	2000d7a0 	.word	0x2000d7a0
   25098:	0002cff8 	.word	0x0002cff8
   2509c:	0002d118 	.word	0x0002d118
   250a0:	20002692 	.word	0x20002692
   250a4:	00032c83 	.word	0x00032c83
   250a8:	00032ef8 	.word	0x00032ef8
   250ac:	f060000f 	.word	0xf060000f

000250b0 <handle_ra_input>:
	return frag;
}
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt)
{
   250b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16_t total_len = net_pkt_get_len(pkt);
   250b4:	6941      	ldr	r1, [r0, #20]
{
   250b6:	b09b      	sub	sp, #108	; 0x6c
   250b8:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   250ba:	4608      	mov	r0, r1
   250bc:	f7ff f855 	bl	2416a <net_buf_frags_len>
		      &NET_IPV6_HDR(pkt)->src,
		      &NET_IPV6_HDR(pkt)->dst);

	net_stats_update_ipv6_nd_recv(net_pkt_iface(pkt));

	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   250c0:	b280      	uxth	r0, r0
   250c2:	2839      	cmp	r0, #57	; 0x39
   250c4:	d908      	bls.n	250d8 <handle_ra_input+0x28>
	return pkt->frags->data;
   250c6:	688b      	ldr	r3, [r1, #8]
			  sizeof(struct net_icmp_hdr) +
			  sizeof(struct net_icmpv6_ra_hdr) +
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   250c8:	79da      	ldrb	r2, [r3, #7]
   250ca:	2aff      	cmp	r2, #255	; 0xff
   250cc:	d104      	bne.n	250d8 <handle_ra_input+0x28>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   250ce:	891a      	ldrh	r2, [r3, #8]
   250d0:	f248 03fe 	movw	r3, #33022	; 0x80fe
   250d4:	429a      	cmp	r2, r3
   250d6:	d00c      	beq.n	250f2 <handle_ra_input+0x42>
	    !net_is_ipv6_ll_addr(&NET_IPV6_HDR(pkt)->src)) {
		struct net_icmp_hdr icmp_hdr;

		ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   250d8:	a912      	add	r1, sp, #72	; 0x48
   250da:	4620      	mov	r0, r4
   250dc:	f7fd ffb4 	bl	23048 <net_icmpv6_get_hdr>
		if (ret < 0 || icmp_hdr.code != 0) {
   250e0:	2800      	cmp	r0, #0
   250e2:	db02      	blt.n	250ea <handle_ra_input+0x3a>
   250e4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   250e8:	b11b      	cbz	r3, 250f2 <handle_ra_input+0x42>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
   250ea:	2002      	movs	r0, #2
}
   250ec:	b01b      	add	sp, #108	; 0x6c
   250ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   250f2:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   250f6:	ad1a      	add	r5, sp, #104	; 0x68
   250f8:	312c      	adds	r1, #44	; 0x2c
   250fa:	b289      	uxth	r1, r1
   250fc:	f825 1d4a 	strh.w	r1, [r5, #-74]!
	return net_frag_read(frag, offset, pos, 1, value);
   25100:	f10d 0319 	add.w	r3, sp, #25
   25104:	9300      	str	r3, [sp, #0]
   25106:	462a      	mov	r2, r5
   25108:	2301      	movs	r3, #1
   2510a:	6960      	ldr	r0, [r4, #20]
   2510c:	f7fc fbe8 	bl	218e0 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   25110:	2300      	movs	r3, #0
   25112:	9300      	str	r3, [sp, #0]
   25114:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   25118:	2301      	movs	r3, #1
   2511a:	462a      	mov	r2, r5
   2511c:	f7fc fbe0 	bl	218e0 <net_frag_read>
	if (!frag) {
   25120:	2800      	cmp	r0, #0
   25122:	d0e2      	beq.n	250ea <handle_ra_input+0x3a>
	if (hop_limit) {
   25124:	f89d 2019 	ldrb.w	r2, [sp, #25]
   25128:	b122      	cbz	r2, 25134 <handle_ra_input+0x84>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt), hop_limit);
   2512a:	6a23      	ldr	r3, [r4, #32]
   2512c:	685b      	ldr	r3, [r3, #4]
	if (!iface->config.ip.ipv6) {
   2512e:	b10b      	cbz	r3, 25134 <handle_ra_input+0x84>
	iface->config.ip.ipv6->hop_limit = hop_limit;
   25130:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   25134:	ab07      	add	r3, sp, #28
   25136:	462a      	mov	r2, r5
   25138:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   2513c:	f7fc fc2a 	bl	21994 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   25140:	ab08      	add	r3, sp, #32
   25142:	462a      	mov	r2, r5
   25144:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   25148:	f7fc fc34 	bl	219b4 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   2514c:	ab09      	add	r3, sp, #36	; 0x24
   2514e:	462a      	mov	r2, r5
   25150:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   25154:	f7fc fc2e 	bl	219b4 <net_frag_read_be32>
	if (!frag) {
   25158:	4606      	mov	r6, r0
   2515a:	2800      	cmp	r0, #0
   2515c:	d0c5      	beq.n	250ea <handle_ra_input+0x3a>
	ret = net_icmpv6_get_ra_hdr(pkt, &ra_hdr);
   2515e:	a90b      	add	r1, sp, #44	; 0x2c
   25160:	4620      	mov	r0, r4
   25162:	f7fe f9f7 	bl	23554 <net_icmpv6_get_ra_hdr>
	if (ret < 0) {
   25166:	2800      	cmp	r0, #0
   25168:	da15      	bge.n	25196 <handle_ra_input+0xe6>
		NET_ERR("could not get ra_hdr");
   2516a:	4b87      	ldr	r3, [pc, #540]	; (25388 <handle_ra_input+0x2d8>)
   2516c:	681b      	ldr	r3, [r3, #0]
   2516e:	075d      	lsls	r5, r3, #29
   25170:	d0bb      	beq.n	250ea <handle_ra_input+0x3a>
   25172:	2301      	movs	r3, #1
   25174:	f04f 0200 	mov.w	r2, #0
   25178:	f363 0202 	bfi	r2, r3, #0, #3
   2517c:	4983      	ldr	r1, [pc, #524]	; (2538c <handle_ra_input+0x2dc>)
   2517e:	4b84      	ldr	r3, [pc, #528]	; (25390 <handle_ra_input+0x2e0>)
   25180:	4884      	ldr	r0, [pc, #528]	; (25394 <handle_ra_input+0x2e4>)
   25182:	1a5b      	subs	r3, r3, r1
   25184:	08db      	lsrs	r3, r3, #3
   25186:	f36f 02c5 	bfc	r2, #3, #3
   2518a:	f363 128f 	bfi	r2, r3, #6, #10
   2518e:	4982      	ldr	r1, [pc, #520]	; (25398 <handle_ra_input+0x2e8>)
   25190:	f7dc fde2 	bl	1d58 <log_1>
   25194:	e7a9      	b.n	250ea <handle_ra_input+0x3a>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   25196:	9b08      	ldr	r3, [sp, #32]
   25198:	4a80      	ldr	r2, [pc, #512]	; (2539c <handle_ra_input+0x2ec>)
   2519a:	1e59      	subs	r1, r3, #1
   2519c:	4291      	cmp	r1, r2
   2519e:	d810      	bhi.n	251c2 <handle_ra_input+0x112>
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
   251a0:	6a22      	ldr	r2, [r4, #32]
   251a2:	6857      	ldr	r7, [r2, #4]
	if (!iface->config.ip.ipv6) {
   251a4:	2f00      	cmp	r7, #0
   251a6:	d07f      	beq.n	252a8 <handle_ra_input+0x1f8>
	return iface->config.ip.ipv6->reachable_time;
   251a8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   251ac:	990c      	ldr	r1, [sp, #48]	; 0x30
   251ae:	4291      	cmp	r1, r2
   251b0:	d007      	beq.n	251c2 <handle_ra_input+0x112>
	if (!iface->config.ip.ipv6) {
   251b2:	b10f      	cbz	r7, 251b8 <handle_ra_input+0x108>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
   251b4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   251b8:	4638      	mov	r0, r7
   251ba:	f7fb fdaf 	bl	20d1c <net_if_ipv6_calc_reachable_time>
   251be:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
	if (retrans_timer) {
   251c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   251c4:	b122      	cbz	r2, 251d0 <handle_ra_input+0x120>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
   251c6:	6a23      	ldr	r3, [r4, #32]
   251c8:	685b      	ldr	r3, [r3, #4]
	if (!iface->config.ip.ipv6) {
   251ca:	b10b      	cbz	r3, 251d0 <handle_ra_input+0x120>
	iface->config.ip.ipv6->retrans_timer = retrans_timer;
   251cc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   251d0:	4b6f      	ldr	r3, [pc, #444]	; (25390 <handle_ra_input+0x2e0>)
			NET_ERR("Prefix %s/%d could not be added to iface %p",
   251d2:	4a6e      	ldr	r2, [pc, #440]	; (2538c <handle_ra_input+0x2dc>)
   251d4:	1a9b      	subs	r3, r3, r2
   251d6:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
   251da:	f04f 0800 	mov.w	r8, #0
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   251de:	f10d 031b 	add.w	r3, sp, #27
   251e2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   251e6:	9300      	str	r3, [sp, #0]
   251e8:	462a      	mov	r2, r5
   251ea:	2301      	movs	r3, #1
   251ec:	4630      	mov	r0, r6
   251ee:	f7fc fb77 	bl	218e0 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   251f2:	f10d 031a 	add.w	r3, sp, #26
   251f6:	9300      	str	r3, [sp, #0]
   251f8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   251fc:	2301      	movs	r3, #1
   251fe:	462a      	mov	r2, r5
   25200:	f7fc fb6e 	bl	218e0 <net_frag_read>
		if (!frag) {
   25204:	2800      	cmp	r0, #0
   25206:	f43f af70 	beq.w	250ea <handle_ra_input+0x3a>
		switch (type) {
   2520a:	f89d 201b 	ldrb.w	r2, [sp, #27]
   2520e:	f8bd b01e 	ldrh.w	fp, [sp, #30]
   25212:	2a03      	cmp	r2, #3
   25214:	f000 80c6 	beq.w	253a4 <handle_ra_input+0x2f4>
   25218:	2a05      	cmp	r2, #5
   2521a:	d047      	beq.n	252ac <handle_ra_input+0x1fc>
   2521c:	2a01      	cmp	r2, #1
   2521e:	f89d 701a 	ldrb.w	r7, [sp, #26]
   25222:	f040 820d 	bne.w	25640 <handle_ra_input+0x590>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   25226:	2306      	movs	r3, #6
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   25228:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   2522c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	if (net_pkt_lladdr_src(pkt)->len < lladdr.len) {
   25230:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   25234:	2b05      	cmp	r3, #5
	lladdr.addr = llstorage.addr;
   25236:	f10d 024a 	add.w	r2, sp, #74	; 0x4a
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   2523a:	bf98      	it	ls
   2523c:	f88d 303c 	strbls.w	r3, [sp, #60]	; 0x3c
	lladdr.addr = llstorage.addr;
   25240:	920e      	str	r2, [sp, #56]	; 0x38
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   25242:	9200      	str	r2, [sp, #0]
   25244:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   25248:	462a      	mov	r2, r5
   2524a:	4659      	mov	r1, fp
   2524c:	f7fc fb48 	bl	218e0 <net_frag_read>
	if (!frag && offset) {
   25250:	4606      	mov	r6, r0
   25252:	b910      	cbnz	r0, 2525a <handle_ra_input+0x1aa>
   25254:	f1bb 0f00 	cmp.w	fp, #0
   25258:	d121      	bne.n	2529e <handle_ra_input+0x1ee>
	padding = len * 8 - 2 - lladdr.len;
   2525a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   2525e:	ebc3 03c7 	rsb	r3, r3, r7, lsl #3
   25262:	3b02      	subs	r3, #2
	if (padding) {
   25264:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   25268:	d00c      	beq.n	25284 <handle_ra_input+0x1d4>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   2526a:	2200      	movs	r2, #0
   2526c:	9200      	str	r2, [sp, #0]
   2526e:	4630      	mov	r0, r6
   25270:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   25274:	462a      	mov	r2, r5
   25276:	f7fc fb33 	bl	218e0 <net_frag_read>
		if (!frag && *pos) {
   2527a:	4606      	mov	r6, r0
   2527c:	b910      	cbnz	r0, 25284 <handle_ra_input+0x1d4>
   2527e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   25282:	b963      	cbnz	r3, 2529e <handle_ra_input+0x1ee>
	return pkt->frags->data;
   25284:	6963      	ldr	r3, [r4, #20]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   25286:	6899      	ldr	r1, [r3, #8]
   25288:	2302      	movs	r3, #2
   2528a:	9300      	str	r3, [sp, #0]
   2528c:	aa0e      	add	r2, sp, #56	; 0x38
   2528e:	2301      	movs	r3, #1
   25290:	3108      	adds	r1, #8
   25292:	6a20      	ldr	r0, [r4, #32]
   25294:	f7ff fe86 	bl	24fa4 <net_ipv6_nbr_add>
   25298:	4680      	mov	r8, r0
			if (!frag && offset) {
   2529a:	2e00      	cmp	r6, #0
   2529c:	d19f      	bne.n	251de <handle_ra_input+0x12e>
   2529e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   252a2:	2b00      	cmp	r3, #0
   252a4:	d03f      	beq.n	25326 <handle_ra_input+0x276>
drop:
   252a6:	e720      	b.n	250ea <handle_ra_input+0x3a>
		return 0;
   252a8:	463a      	mov	r2, r7
   252aa:	e77f      	b.n	251ac <handle_ra_input+0xfc>
	return net_frag_read(frag, offset, pos, len, NULL);
   252ac:	2300      	movs	r3, #0
   252ae:	9300      	str	r3, [sp, #0]
   252b0:	462a      	mov	r2, r5
   252b2:	2302      	movs	r3, #2
   252b4:	4659      	mov	r1, fp
   252b6:	f7fc fb13 	bl	218e0 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   252ba:	ab0a      	add	r3, sp, #40	; 0x28
   252bc:	462a      	mov	r2, r5
   252be:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   252c2:	f7fc fb77 	bl	219b4 <net_frag_read_be32>
			if (!frag && offset) {
   252c6:	4606      	mov	r6, r0
   252c8:	b920      	cbnz	r0, 252d4 <handle_ra_input+0x224>
   252ca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   252ce:	2b00      	cmp	r3, #0
   252d0:	f47f af0b 	bne.w	250ea <handle_ra_input+0x3a>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   252d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   252d6:	f5a2 63a0 	sub.w	r3, r2, #1280	; 0x500
   252da:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
   252de:	d31c      	bcc.n	2531a <handle_ra_input+0x26a>
				NET_ERR("Unsupported MTU %u, min is %u, "
   252e0:	4b29      	ldr	r3, [pc, #164]	; (25388 <handle_ra_input+0x2d8>)
   252e2:	681b      	ldr	r3, [r3, #0]
   252e4:	075c      	lsls	r4, r3, #29
   252e6:	f43f af00 	beq.w	250ea <handle_ra_input+0x3a>
   252ea:	2101      	movs	r1, #1
   252ec:	f04f 0300 	mov.w	r3, #0
   252f0:	f361 0302 	bfi	r3, r1, #0, #3
   252f4:	4928      	ldr	r1, [pc, #160]	; (25398 <handle_ra_input+0x2e8>)
   252f6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   252fa:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   252fe:	f36f 03c5 	bfc	r3, #3, #3
   25302:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25306:	e9cd 0214 	strd	r0, r2, [sp, #80]	; 0x50
   2530a:	f36a 138f 	bfi	r3, sl, #6, #10
   2530e:	2204      	movs	r2, #4
   25310:	a912      	add	r1, sp, #72	; 0x48
   25312:	4823      	ldr	r0, [pc, #140]	; (253a0 <handle_ra_input+0x2f0>)
   25314:	f7dc fd67 	bl	1de6 <log_n>
   25318:	e6e7      	b.n	250ea <handle_ra_input+0x3a>
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   2531a:	6a23      	ldr	r3, [r4, #32]
	iface->if_dev->mtu = mtu;
   2531c:	681b      	ldr	r3, [r3, #0]
   2531e:	831a      	strh	r2, [r3, #24]
	while (frag) {
   25320:	2e00      	cmp	r6, #0
   25322:	f47f af5c 	bne.w	251de <handle_ra_input+0x12e>
	return pkt->frags->data;
   25326:	6963      	ldr	r3, [r4, #20]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   25328:	6a20      	ldr	r0, [r4, #32]
   2532a:	6899      	ldr	r1, [r3, #8]
   2532c:	3108      	adds	r1, #8
   2532e:	f7fb fbc1 	bl	20ab4 <net_if_ipv6_router_lookup>
   25332:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	if (router) {
   25336:	4603      	mov	r3, r0
   25338:	2800      	cmp	r0, #0
   2533a:	f000 8199 	beq.w	25670 <handle_ra_input+0x5c0>
		if (!router_lifetime) {
   2533e:	2a00      	cmp	r2, #0
   25340:	f040 8189 	bne.w	25656 <handle_ra_input+0x5a6>
			net_if_ipv6_router_rm(router);
   25344:	f7fb fc48 	bl	20bd8 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   25348:	f1b8 0f00 	cmp.w	r8, #0
   2534c:	d010      	beq.n	25370 <handle_ra_input+0x2c0>
   2534e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   25352:	6818      	ldr	r0, [r3, #0]
   25354:	b160      	cbz	r0, 25370 <handle_ra_input+0x2c0>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   25356:	f7fa fa69 	bl	1f82c <net_send_data>
   2535a:	2800      	cmp	r0, #0
   2535c:	da04      	bge.n	25368 <handle_ra_input+0x2b8>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   2535e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   25362:	6818      	ldr	r0, [r3, #0]
   25364:	f7fc f95b 	bl	2161e <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   25368:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2536c:	f7fe ff37 	bl	241de <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_pkt_iface(pkt)->config.ip.ipv6->rs_timer);
   25370:	6a23      	ldr	r3, [r4, #32]
   25372:	6858      	ldr	r0, [r3, #4]
   25374:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   25378:	f007 f9d3 	bl	2c722 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   2537c:	4620      	mov	r0, r4
   2537e:	f7fc f94e 	bl	2161e <net_pkt_unref>
	return NET_OK;
   25382:	2000      	movs	r0, #0
   25384:	e6b2      	b.n	250ec <handle_ra_input+0x3c>
   25386:	bf00      	nop
   25388:	2000d7a0 	.word	0x2000d7a0
   2538c:	0002cff8 	.word	0x0002cff8
   25390:	0002d118 	.word	0x0002d118
   25394:	00032e44 	.word	0x00032e44
   25398:	00032d36 	.word	0x00032d36
   2539c:	0036ee7f 	.word	0x0036ee7f
   253a0:	00032e5d 	.word	0x00032e5d
			frag = handle_ra_prefix(pkt, frag, length, offset,
   253a4:	f89d 301a 	ldrb.w	r3, [sp, #26]
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   253a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	prefix_info.len = len * 8 - 2;
   253ac:	00db      	lsls	r3, r3, #3
   253ae:	3b02      	subs	r3, #2
   253b0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   253b4:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
   253b8:	9300      	str	r3, [sp, #0]
   253ba:	462a      	mov	r2, r5
   253bc:	2301      	movs	r3, #1
   253be:	4659      	mov	r1, fp
   253c0:	f7fc fa8e 	bl	218e0 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   253c4:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
   253c8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   253cc:	9300      	str	r3, [sp, #0]
   253ce:	462a      	mov	r2, r5
   253d0:	2301      	movs	r3, #1
   253d2:	f7fc fa85 	bl	218e0 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   253d6:	ab13      	add	r3, sp, #76	; 0x4c
   253d8:	462a      	mov	r2, r5
   253da:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   253de:	f7fc fae9 	bl	219b4 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   253e2:	ab14      	add	r3, sp, #80	; 0x50
   253e4:	462a      	mov	r2, r5
   253e6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   253ea:	f7fc fae3 	bl	219b4 <net_frag_read_be32>
	return net_frag_read(frag, offset, pos, len, NULL);
   253ee:	2300      	movs	r3, #0
   253f0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   253f4:	9300      	str	r3, [sp, #0]
   253f6:	462a      	mov	r2, r5
   253f8:	2304      	movs	r3, #4
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   253fa:	af16      	add	r7, sp, #88	; 0x58
   253fc:	f7fc fa70 	bl	218e0 <net_frag_read>
   25400:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   25404:	9700      	str	r7, [sp, #0]
   25406:	2310      	movs	r3, #16
   25408:	462a      	mov	r2, r5
   2540a:	f7fc fa69 	bl	218e0 <net_frag_read>
	if (!frag && *pos) {
   2540e:	4606      	mov	r6, r0
   25410:	b920      	cbnz	r0, 2541c <handle_ra_input+0x36c>
   25412:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   25416:	2b00      	cmp	r3, #0
   25418:	f47f af41 	bne.w	2529e <handle_ra_input+0x1ee>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   2541c:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	; 0x4c
   25420:	429a      	cmp	r2, r3
   25422:	f4ff af3a 	bcc.w	2529a <handle_ra_input+0x1ea>
   25426:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   2542a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2542e:	429a      	cmp	r2, r3
   25430:	f43f af33 	beq.w	2529a <handle_ra_input+0x1ea>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   25434:	f99d 304b 	ldrsb.w	r3, [sp, #75]	; 0x4b
   25438:	2b00      	cmp	r3, #0
   2543a:	da30      	bge.n	2549e <handle_ra_input+0x3ee>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   2543c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   25440:	6a20      	ldr	r0, [r4, #32]
   25442:	4639      	mov	r1, r7
   25444:	f7fb fa3a 	bl	208bc <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   25448:	2800      	cmp	r0, #0
   2544a:	d17e      	bne.n	2554a <handle_ra_input+0x49a>
		if (!prefix_info->valid_lifetime) {
   2544c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2544e:	b333      	cbz	r3, 2549e <handle_ra_input+0x3ee>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   25450:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   25454:	6a20      	ldr	r0, [r4, #32]
   25456:	4639      	mov	r1, r7
   25458:	f7fb f972 	bl	20740 <net_if_ipv6_prefix_add>
		if (prefix) {
   2545c:	2800      	cmp	r0, #0
   2545e:	d174      	bne.n	2554a <handle_ra_input+0x49a>
			NET_ERR("Prefix %s/%d could not be added to iface %p",
   25460:	4b87      	ldr	r3, [pc, #540]	; (25680 <handle_ra_input+0x5d0>)
   25462:	681b      	ldr	r3, [r3, #0]
   25464:	0759      	lsls	r1, r3, #29
   25466:	d01a      	beq.n	2549e <handle_ra_input+0x3ee>
   25468:	2301      	movs	r3, #1
   2546a:	f363 0902 	bfi	r9, r3, #0, #3
   2546e:	4639      	mov	r1, r7
   25470:	4b84      	ldr	r3, [pc, #528]	; (25684 <handle_ra_input+0x5d4>)
   25472:	930e      	str	r3, [sp, #56]	; 0x38
   25474:	f360 09c5 	bfi	r9, r0, #3, #3
   25478:	200a      	movs	r0, #10
   2547a:	f7fc fe3d 	bl	220f8 <net_sprint_addr>
   2547e:	f7dc fdfd 	bl	207c <log_strdup>
   25482:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   25486:	9310      	str	r3, [sp, #64]	; 0x40
   25488:	f36a 198f 	bfi	r9, sl, #6, #10
   2548c:	6a23      	ldr	r3, [r4, #32]
   2548e:	900f      	str	r0, [sp, #60]	; 0x3c
   25490:	9311      	str	r3, [sp, #68]	; 0x44
   25492:	2204      	movs	r2, #4
   25494:	464b      	mov	r3, r9
   25496:	a90e      	add	r1, sp, #56	; 0x38
   25498:	487b      	ldr	r0, [pc, #492]	; (25688 <handle_ra_input+0x5d8>)
   2549a:	f7dc fca4 	bl	1de6 <log_n>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   2549e:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
   254a2:	065b      	lsls	r3, r3, #25
   254a4:	f57f aef9 	bpl.w	2529a <handle_ra_input+0x1ea>
   254a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   254aa:	2b00      	cmp	r3, #0
   254ac:	f43f aef5 	beq.w	2529a <handle_ra_input+0x1ea>
		    prefix_info.valid_lifetime &&
   254b0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   254b4:	2b40      	cmp	r3, #64	; 0x40
   254b6:	f47f aef0 	bne.w	2529a <handle_ra_input+0x1ea>
	struct in6_addr addr = { };
   254ba:	220e      	movs	r2, #14
   254bc:	2100      	movs	r1, #0
   254be:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
   254c2:	f7e0 fd0e 	bl	5ee2 <memset>
	net_ipv6_addr_create_iid(&addr,
   254c6:	6a23      	ldr	r3, [r4, #32]
   254c8:	f8d3 b000 	ldr.w	fp, [r3]
	addr->s6_addr[0] = 0xfe;
   254cc:	f248 03fe 	movw	r3, #33022	; 0x80fe
   254d0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   254d4:	2300      	movs	r3, #0
   254d6:	930f      	str	r3, [sp, #60]	; 0x3c
	switch (lladdr->len) {
   254d8:	f89b 2014 	ldrb.w	r2, [fp, #20]
   254dc:	2a06      	cmp	r2, #6
   254de:	d04e      	beq.n	2557e <handle_ra_input+0x4ce>
   254e0:	2a08      	cmp	r2, #8
   254e2:	d06c      	beq.n	255be <handle_ra_input+0x50e>
   254e4:	2a02      	cmp	r2, #2
   254e6:	d114      	bne.n	25512 <handle_ra_input+0x462>
		if (lladdr->type == NET_LINK_IEEE802154) {
   254e8:	f89b 2015 	ldrb.w	r2, [fp, #21]
   254ec:	2a01      	cmp	r2, #1
   254ee:	d110      	bne.n	25512 <handle_ra_input+0x462>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   254f0:	9310      	str	r3, [sp, #64]	; 0x40
			addr->s6_addr[11] = 0xff;
   254f2:	22ff      	movs	r2, #255	; 0xff
   254f4:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
			addr->s6_addr[13] = 0;
   254f8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
			addr->s6_addr[12] = 0xfe;
   254fc:	22fe      	movs	r2, #254	; 0xfe
			addr->s6_addr[14] = lladdr->addr[0];
   254fe:	f8db 3010 	ldr.w	r3, [fp, #16]
			addr->s6_addr[12] = 0xfe;
   25502:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			addr->s6_addr[14] = lladdr->addr[0];
   25506:	781a      	ldrb	r2, [r3, #0]
   25508:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
			addr->s6_addr[15] = lladdr->addr[1];
   2550c:	785b      	ldrb	r3, [r3, #1]
   2550e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   25512:	4639      	mov	r1, r7
   25514:	2208      	movs	r2, #8
   25516:	a80e      	add	r0, sp, #56	; 0x38
   25518:	f7e0 fcb6 	bl	5e88 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   2551c:	2100      	movs	r1, #0
   2551e:	a80e      	add	r0, sp, #56	; 0x38
   25520:	f7fa fc50 	bl	1fdc4 <net_if_ipv6_addr_lookup>
   25524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25526:	9303      	str	r3, [sp, #12]
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   25528:	4607      	mov	r7, r0
   2552a:	2800      	cmp	r0, #0
   2552c:	d07d      	beq.n	2562a <handle_ra_input+0x57a>
   2552e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   25532:	2b01      	cmp	r3, #1
   25534:	d179      	bne.n	2562a <handle_ra_input+0x57a>
		if (prefix_info->valid_lifetime ==
   25536:	9b03      	ldr	r3, [sp, #12]
   25538:	3301      	adds	r3, #1
   2553a:	d146      	bne.n	255ca <handle_ra_input+0x51a>
	ifaddr->is_infinite = is_infinite;
   2553c:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
   25540:	f043 0301 	orr.w	r3, r3, #1
   25544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   25548:	e6a7      	b.n	2529a <handle_ra_input+0x1ea>
	switch (prefix_info->valid_lifetime) {
   2554a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2554c:	b151      	cbz	r1, 25564 <handle_ra_input+0x4b4>
   2554e:	1c4a      	adds	r2, r1, #1
   25550:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   25554:	d00e      	beq.n	25574 <handle_ra_input+0x4c4>
	prefix->is_infinite = is_infinite;
   25556:	f36f 0300 	bfc	r3, #0, #1
   2555a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
   2555e:	f7fb fa0b 	bl	20978 <net_if_ipv6_prefix_set_timer>
   25562:	e79c      	b.n	2549e <handle_ra_input+0x3ee>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   25564:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   25568:	f100 0110 	add.w	r1, r0, #16
   2556c:	6a20      	ldr	r0, [r4, #32]
   2556e:	f7fb fa5b 	bl	20a28 <net_if_ipv6_prefix_rm>
   25572:	e794      	b.n	2549e <handle_ra_input+0x3ee>
   25574:	f043 0301 	orr.w	r3, r3, #1
   25578:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
   2557c:	e78f      	b.n	2549e <handle_ra_input+0x3ee>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   2557e:	2203      	movs	r2, #3
   25580:	f8db 1010 	ldr.w	r1, [fp, #16]
   25584:	a810      	add	r0, sp, #64	; 0x40
   25586:	f7e0 fc7f 	bl	5e88 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2558a:	f8db 1010 	ldr.w	r1, [fp, #16]
		addr->s6_addr[11] = 0xff;
   2558e:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   25590:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   25592:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   25596:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   25598:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2559a:	f10d 0045 	add.w	r0, sp, #69	; 0x45
		addr->s6_addr[12] = 0xfe;
   2559e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   255a2:	f7e0 fc71 	bl	5e88 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   255a6:	f89b 3015 	ldrb.w	r3, [fp, #21]
   255aa:	3b02      	subs	r3, #2
   255ac:	2b01      	cmp	r3, #1
   255ae:	d8b0      	bhi.n	25512 <handle_ra_input+0x462>
		addr->s6_addr[8] ^= 0x02;
   255b0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   255b4:	f083 0302 	eor.w	r3, r3, #2
   255b8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   255bc:	e7a9      	b.n	25512 <handle_ra_input+0x462>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   255be:	f8db 1010 	ldr.w	r1, [fp, #16]
   255c2:	a810      	add	r0, sp, #64	; 0x40
   255c4:	f7e0 fc60 	bl	5e88 <memcpy>
   255c8:	e7f2      	b.n	255b0 <handle_ra_input+0x500>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   255ca:	9b03      	ldr	r3, [sp, #12]
   255cc:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
   255d0:	d908      	bls.n	255e4 <handle_ra_input+0x534>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   255d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   255d4:	4638      	mov	r0, r7
   255d6:	f7fa fc6b 	bl	1feb0 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   255da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   255de:	f36f 0300 	bfc	r3, #0, #1
   255e2:	e7af      	b.n	25544 <handle_ra_input+0x494>
	if (ifaddr->lifetime.timer_timeout == 0) {
   255e4:	69c0      	ldr	r0, [r0, #28]
   255e6:	b1d0      	cbz	r0, 2561e <handle_ra_input+0x56e>
	remaining = (u64_t)ifaddr->lifetime.timer_timeout +
   255e8:	6a3b      	ldr	r3, [r7, #32]
   255ea:	4a28      	ldr	r2, [pc, #160]	; (2568c <handle_ra_input+0x5dc>)
   255ec:	17c1      	asrs	r1, r0, #31
   255ee:	fbc2 0103 	smlal	r0, r1, r2, r3
   255f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   255f6:	f007 fa43 	bl	2ca80 <_impl_k_uptime_get_32>
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   255fa:	69bb      	ldr	r3, [r7, #24]
	return (u32_t)(remaining / K_MSEC(1000));
   255fc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   25600:	1ac0      	subs	r0, r0, r3
   25602:	2800      	cmp	r0, #0
   25604:	bfb8      	it	lt
   25606:	4240      	neglt	r0, r0
	return (u32_t)(remaining / K_MSEC(1000));
   25608:	ebbb 0b00 	subs.w	fp, fp, r0
   2560c:	f16c 0c00 	sbc.w	ip, ip, #0
   25610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25614:	2300      	movs	r3, #0
   25616:	4658      	mov	r0, fp
   25618:	4661      	mov	r1, ip
   2561a:	f7da fe4b 	bl	2b4 <__aeabi_uldivmod>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   2561e:	9b03      	ldr	r3, [sp, #12]
   25620:	4298      	cmp	r0, r3
   25622:	d3d6      	bcc.n	255d2 <handle_ra_input+0x522>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   25624:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   25628:	e7d4      	b.n	255d4 <handle_ra_input+0x524>
		if (prefix_info->valid_lifetime ==
   2562a:	9b03      	ldr	r3, [sp, #12]
   2562c:	6a20      	ldr	r0, [r4, #32]
   2562e:	3301      	adds	r3, #1
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   25630:	bf0c      	ite	eq
   25632:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   25634:	9b03      	ldrne	r3, [sp, #12]
   25636:	2201      	movs	r2, #1
   25638:	a90e      	add	r1, sp, #56	; 0x38
   2563a:	f7fa fc87 	bl	1ff4c <net_if_ipv6_addr_add>
   2563e:	e62c      	b.n	2529a <handle_ra_input+0x1ea>
			frag = net_frag_skip(frag, offset, &offset,
   25640:	00fb      	lsls	r3, r7, #3
   25642:	2200      	movs	r2, #0
   25644:	3b02      	subs	r3, #2
   25646:	9200      	str	r2, [sp, #0]
   25648:	b29b      	uxth	r3, r3
   2564a:	462a      	mov	r2, r5
   2564c:	4659      	mov	r1, fp
   2564e:	f7fc f947 	bl	218e0 <net_frag_read>
			if (!frag && offset) {
   25652:	4606      	mov	r6, r0
   25654:	e621      	b.n	2529a <handle_ra_input+0x1ea>
			if (nbr) {
   25656:	f1b8 0f00 	cmp.w	r8, #0
   2565a:	d004      	beq.n	25666 <handle_ra_input+0x5b6>
				net_ipv6_nbr_data(nbr)->is_router = true;
   2565c:	f8d8 100c 	ldr.w	r1, [r8, #12]
   25660:	2001      	movs	r0, #1
   25662:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(router,
   25666:	4611      	mov	r1, r2
   25668:	4618      	mov	r0, r3
   2566a:	f7fb fa5f 	bl	20b2c <net_if_ipv6_router_update_lifetime>
   2566e:	e66b      	b.n	25348 <handle_ra_input+0x298>
	return pkt->frags->data;
   25670:	6963      	ldr	r3, [r4, #20]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   25672:	6a20      	ldr	r0, [r4, #32]
   25674:	6899      	ldr	r1, [r3, #8]
   25676:	3108      	adds	r1, #8
   25678:	f7fb fa5e 	bl	20b38 <net_if_ipv6_router_add>
   2567c:	e664      	b.n	25348 <handle_ra_input+0x298>
   2567e:	bf00      	nop
   25680:	2000d7a0 	.word	0x2000d7a0
   25684:	00032d21 	.word	0x00032d21
   25688:	00032e8a 	.word	0x00032e8a
   2568c:	7fffff9b 	.word	0x7fffff9b

00025690 <handle_ns_input>:
{
   25690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25694:	4604      	mov	r4, r0
   25696:	b09d      	sub	sp, #116	; 0x74
	return net_buf_frags_len(pkt->frags);
   25698:	6940      	ldr	r0, [r0, #20]
   2569a:	f7fe fd66 	bl	2416a <net_buf_frags_len>
	ret = net_icmpv6_get_ns_hdr(pkt, &ns_hdr);
   2569e:	f10d 095c 	add.w	r9, sp, #92	; 0x5c
   256a2:	4605      	mov	r5, r0
   256a4:	4649      	mov	r1, r9
   256a6:	4620      	mov	r0, r4
   256a8:	f7fd fe40 	bl	2332c <net_icmpv6_get_ns_hdr>
	if (ret < 0) {
   256ac:	2800      	cmp	r0, #0
   256ae:	da19      	bge.n	256e4 <handle_ns_input+0x54>
		NET_ERR("NULL NS header - dropping");
   256b0:	4ba0      	ldr	r3, [pc, #640]	; (25934 <handle_ns_input+0x2a4>)
   256b2:	681b      	ldr	r3, [r3, #0]
   256b4:	0759      	lsls	r1, r3, #29
   256b6:	d103      	bne.n	256c0 <handle_ns_input+0x30>
	return NET_DROP;
   256b8:	2002      	movs	r0, #2
}
   256ba:	b01d      	add	sp, #116	; 0x74
   256bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_ERR("NULL NS header - dropping");
   256c0:	2301      	movs	r3, #1
   256c2:	f04f 0200 	mov.w	r2, #0
   256c6:	f363 0202 	bfi	r2, r3, #0, #3
   256ca:	499b      	ldr	r1, [pc, #620]	; (25938 <handle_ns_input+0x2a8>)
   256cc:	4b9b      	ldr	r3, [pc, #620]	; (2593c <handle_ns_input+0x2ac>)
   256ce:	489c      	ldr	r0, [pc, #624]	; (25940 <handle_ns_input+0x2b0>)
   256d0:	1a5b      	subs	r3, r3, r1
   256d2:	f36f 02c5 	bfc	r2, #3, #3
   256d6:	08db      	lsrs	r3, r3, #3
   256d8:	499a      	ldr	r1, [pc, #616]	; (25944 <handle_ns_input+0x2b4>)
   256da:	f363 128f 	bfi	r2, r3, #6, #10
			NET_ERR("Corrupted NS message");
   256de:	f7dc fb3b 	bl	1d58 <log_1>
   256e2:	e7e9      	b.n	256b8 <handle_ns_input+0x28>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   256e4:	b2ad      	uxth	r5, r5
   256e6:	2d3f      	cmp	r5, #63	; 0x3f
   256e8:	d904      	bls.n	256f4 <handle_ns_input+0x64>
	return pkt->frags->data;
   256ea:	6963      	ldr	r3, [r4, #20]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   256ec:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   256ee:	79db      	ldrb	r3, [r3, #7]
   256f0:	2bff      	cmp	r3, #255	; 0xff
   256f2:	d00d      	beq.n	25710 <handle_ns_input+0x80>
		if (net_is_ipv6_addr_mcast(&ns_hdr.tgt)) {
   256f4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   256f8:	2bff      	cmp	r3, #255	; 0xff
   256fa:	d109      	bne.n	25710 <handle_ns_input+0x80>
			ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   256fc:	a913      	add	r1, sp, #76	; 0x4c
   256fe:	4620      	mov	r0, r4
   25700:	f7fd fca2 	bl	23048 <net_icmpv6_get_hdr>
			if (ret < 0 || icmp_hdr.code != 0) {
   25704:	2800      	cmp	r0, #0
   25706:	dbd7      	blt.n	256b8 <handle_ns_input+0x28>
   25708:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
   2570c:	2b00      	cmp	r3, #0
   2570e:	d1d3      	bne.n	256b8 <handle_ns_input+0x28>
	pkt->ipv6_ext_opt_len = len;
   25710:	2314      	movs	r3, #20
   25712:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	return net_buf_frags_len(pkt->frags);
   25716:	6960      	ldr	r0, [r4, #20]
   25718:	f7fe fd27 	bl	2416a <net_buf_frags_len>
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   2571c:	a902      	add	r1, sp, #8
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   2571e:	f1a0 082c 	sub.w	r8, r0, #44	; 0x2c
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   25722:	4620      	mov	r0, r4
   25724:	f7fd fe7e 	bl	23424 <net_icmpv6_get_nd_opt_hdr>
	frag = net_frag_read(pkt->frags, sllao_offset,
   25728:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
	ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   2572c:	4601      	mov	r1, r0
	while (!ret && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2572e:	b919      	cbnz	r1, 25738 <handle_ns_input+0xa8>
   25730:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
   25734:	45c2      	cmp	sl, r8
   25736:	d32f      	bcc.n	25798 <handle_ns_input+0x108>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   25738:	ae18      	add	r6, sp, #96	; 0x60
   2573a:	4631      	mov	r1, r6
   2573c:	6a20      	ldr	r0, [r4, #32]
   2573e:	f7fa fb95 	bl	1fe6c <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   25742:	4682      	mov	sl, r0
   25744:	2800      	cmp	r0, #0
   25746:	d0b7      	beq.n	256b8 <handle_ns_input+0x28>
	return pkt->frags->data;
   25748:	6963      	ldr	r3, [r4, #20]
   2574a:	689d      	ldr	r5, [r3, #8]
		src = &NET_IPV6_HDR(pkt)->src;
   2574c:	f105 0708 	add.w	r7, r5, #8
		tgt = &ifaddr->address.in6_addr;
   25750:	f100 0804 	add.w	r8, r0, #4
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   25754:	4638      	mov	r0, r7
   25756:	f7fe fd10 	bl	2417a <net_is_ipv6_addr_unspecified>
   2575a:	4601      	mov	r1, r0
   2575c:	2800      	cmp	r0, #0
   2575e:	f000 80f7 	beq.w	25950 <handle_ns_input+0x2c0>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   25762:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25764:	f240 23ff 	movw	r3, #767	; 0x2ff
   25768:	429a      	cmp	r2, r3
   2576a:	d1a5      	bne.n	256b8 <handle_ns_input+0x28>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2576c:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2576e:	2b00      	cmp	r3, #0
   25770:	d1a2      	bne.n	256b8 <handle_ns_input+0x28>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25772:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   25774:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   25778:	d19e      	bne.n	256b8 <handle_ns_input+0x28>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2577a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2577c:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2577e:	2aff      	cmp	r2, #255	; 0xff
   25780:	d19a      	bne.n	256b8 <handle_ns_input+0x28>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   25782:	f99a 2045 	ldrsb.w	r2, [sl, #69]	; 0x45
   25786:	2602      	movs	r6, #2
   25788:	2a00      	cmp	r2, #0
   2578a:	f040 8083 	bne.w	25894 <handle_ns_input+0x204>
			dad_failed(net_pkt_iface(pkt),
   2578e:	4641      	mov	r1, r8
   25790:	6a20      	ldr	r0, [r4, #32]
   25792:	f7fe ff45 	bl	24620 <dad_failed>
   25796:	e78f      	b.n	256b8 <handle_ns_input+0x28>
		if (!nd_opt_hdr.len) {
   25798:	f89d 5009 	ldrb.w	r5, [sp, #9]
   2579c:	2d00      	cmp	r5, #0
   2579e:	d0cb      	beq.n	25738 <handle_ns_input+0xa8>
		switch (nd_opt_hdr.type) {
   257a0:	f89d b008 	ldrb.w	fp, [sp, #8]
   257a4:	f1bb 0f01 	cmp.w	fp, #1
   257a8:	d14e      	bne.n	25848 <handle_ns_input+0x1b8>
				    &NET_IPV6_HDR(pkt)->src)) {
   257aa:	6967      	ldr	r7, [r4, #20]
   257ac:	68b8      	ldr	r0, [r7, #8]
			if (net_is_ipv6_addr_unspecified(
   257ae:	3008      	adds	r0, #8
   257b0:	f7fe fce3 	bl	2417a <net_is_ipv6_addr_unspecified>
   257b4:	2800      	cmp	r0, #0
   257b6:	f47f af7f 	bne.w	256b8 <handle_ns_input+0x28>
			if (nd_opt_hdr.len > 2) {
   257ba:	2d02      	cmp	r5, #2
   257bc:	d913      	bls.n	257e6 <handle_ns_input+0x156>
				NET_ERR("Too long source link-layer address "
   257be:	4b5d      	ldr	r3, [pc, #372]	; (25934 <handle_ns_input+0x2a4>)
   257c0:	681b      	ldr	r3, [r3, #0]
   257c2:	075a      	lsls	r2, r3, #29
   257c4:	f43f af78 	beq.w	256b8 <handle_ns_input+0x28>
   257c8:	f04f 0200 	mov.w	r2, #0
   257cc:	f36b 0202 	bfi	r2, fp, #0, #3
   257d0:	f361 02c5 	bfi	r2, r1, #3, #3
   257d4:	4b59      	ldr	r3, [pc, #356]	; (2593c <handle_ns_input+0x2ac>)
   257d6:	4958      	ldr	r1, [pc, #352]	; (25938 <handle_ns_input+0x2a8>)
   257d8:	485b      	ldr	r0, [pc, #364]	; (25948 <handle_ns_input+0x2b8>)
   257da:	1a5b      	subs	r3, r3, r1
   257dc:	08db      	lsrs	r3, r3, #3
   257de:	f363 128f 	bfi	r2, r3, #6, #10
   257e2:	4958      	ldr	r1, [pc, #352]	; (25944 <handle_ns_input+0x2b4>)
   257e4:	e77b      	b.n	256de <handle_ns_input+0x4e>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   257e6:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
	frag = net_frag_read(pkt->frags, sllao_offset,
   257ea:	9600      	str	r6, [sp, #0]
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   257ec:	1d8b      	adds	r3, r1, #6
						net_pkt_ip_hdr_len(pkt) +
   257ee:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   257f2:	4419      	add	r1, r3
	lladdr.len = 8 * ll_len - 2;
   257f4:	00eb      	lsls	r3, r5, #3
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   257f6:	4451      	add	r1, sl
	lladdr.len = 8 * ll_len - 2;
   257f8:	3b02      	subs	r3, #2
   257fa:	b2db      	uxtb	r3, r3
	frag = net_frag_read(pkt->frags, sllao_offset,
   257fc:	aa0b      	add	r2, sp, #44	; 0x2c
   257fe:	b289      	uxth	r1, r1
   25800:	4638      	mov	r0, r7
	lladdr.len = 8 * ll_len - 2;
   25802:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	frag = net_frag_read(pkt->frags, sllao_offset,
   25806:	f7fc f86b 	bl	218e0 <net_frag_read>
	if (!frag && pos == 0xffff) {
   2580a:	b930      	cbnz	r0, 2581a <handle_ns_input+0x18a>
   2580c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   25810:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25814:	429a      	cmp	r2, r3
   25816:	f43f af4f 	beq.w	256b8 <handle_ns_input+0x28>
	nbr_lladdr.len = lladdr.len;
   2581a:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
	if (net_pkt_lladdr_src(pkt)->len < nbr_lladdr.len) {
   2581e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	nbr_lladdr.len = lladdr.len;
   25822:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
	if (net_pkt_lladdr_src(pkt)->len < nbr_lladdr.len) {
   25826:	429a      	cmp	r2, r3
		nbr_lladdr.len = net_pkt_lladdr_src(pkt)->len;
   25828:	bf88      	it	hi
   2582a:	f88d 3050 	strbhi.w	r3, [sp, #80]	; 0x50
   2582e:	6963      	ldr	r3, [r4, #20]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   25830:	6a20      	ldr	r0, [r4, #32]
   25832:	6899      	ldr	r1, [r3, #8]
	nbr_lladdr.addr = lladdr.addr;
   25834:	9613      	str	r6, [sp, #76]	; 0x4c
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   25836:	2300      	movs	r3, #0
   25838:	9300      	str	r3, [sp, #0]
   2583a:	aa13      	add	r2, sp, #76	; 0x4c
   2583c:	3108      	adds	r1, #8
   2583e:	f7ff fbb1 	bl	24fa4 <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr.len,
   25842:	2800      	cmp	r0, #0
   25844:	f43f af38 	beq.w	256b8 <handle_ns_input+0x28>
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
   25848:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
					     (nd_opt_hdr.len << 3));
   2584c:	f89d 3009 	ldrb.w	r3, [sp, #9]
		net_pkt_set_ipv6_ext_opt_len(pkt,
   25850:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   25854:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   25856:	429a      	cmp	r2, r3
	pkt->ipv6_ext_opt_len = len;
   25858:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   2585c:	d314      	bcc.n	25888 <handle_ns_input+0x1f8>
			NET_ERR("Corrupted NS message");
   2585e:	4b35      	ldr	r3, [pc, #212]	; (25934 <handle_ns_input+0x2a4>)
   25860:	681b      	ldr	r3, [r3, #0]
   25862:	075b      	lsls	r3, r3, #29
   25864:	f43f af28 	beq.w	256b8 <handle_ns_input+0x28>
   25868:	2301      	movs	r3, #1
   2586a:	f04f 0200 	mov.w	r2, #0
   2586e:	f363 0202 	bfi	r2, r3, #0, #3
   25872:	4931      	ldr	r1, [pc, #196]	; (25938 <handle_ns_input+0x2a8>)
   25874:	4b31      	ldr	r3, [pc, #196]	; (2593c <handle_ns_input+0x2ac>)
   25876:	4835      	ldr	r0, [pc, #212]	; (2594c <handle_ns_input+0x2bc>)
   25878:	1a5b      	subs	r3, r3, r1
   2587a:	f36f 02c5 	bfc	r2, #3, #3
   2587e:	08db      	lsrs	r3, r3, #3
   25880:	f363 128f 	bfi	r2, r3, #6, #10
   25884:	492f      	ldr	r1, [pc, #188]	; (25944 <handle_ns_input+0x2b4>)
   25886:	e72a      	b.n	256de <handle_ns_input+0x4e>
		ret = net_icmpv6_get_nd_opt_hdr(pkt, &nd_opt_hdr);
   25888:	a902      	add	r1, sp, #8
   2588a:	4620      	mov	r0, r4
   2588c:	f7fd fdca 	bl	23424 <net_icmpv6_get_nd_opt_hdr>
   25890:	4601      	mov	r1, r0
   25892:	e74c      	b.n	2572e <handle_ns_input+0x9e>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   25894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25898:	762a      	strb	r2, [r5, #24]
   2589a:	766e      	strb	r6, [r5, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2589c:	76ab      	strb	r3, [r5, #26]
   2589e:	76eb      	strb	r3, [r5, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   258a0:	772b      	strb	r3, [r5, #28]
   258a2:	776b      	strb	r3, [r5, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   258a4:	77ab      	strb	r3, [r5, #30]
   258a6:	77eb      	strb	r3, [r5, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   258a8:	f885 3020 	strb.w	r3, [r5, #32]
   258ac:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   258b0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   258b4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   258b8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   258bc:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   258c0:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   258c4:	2301      	movs	r3, #1
   258c6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	return pkt->frags->data;
   258ca:	6963      	ldr	r3, [r4, #20]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   258cc:	6a20      	ldr	r0, [r4, #32]
   258ce:	689d      	ldr	r5, [r3, #8]
   258d0:	f105 0118 	add.w	r1, r5, #24
   258d4:	f7fb f9c2 	bl	20c5c <net_if_ipv6_select_src_addr>
   258d8:	aa03      	add	r2, sp, #12
   258da:	4603      	mov	r3, r0
   258dc:	f100 0e10 	add.w	lr, r0, #16
   258e0:	4616      	mov	r6, r2
   258e2:	6818      	ldr	r0, [r3, #0]
   258e4:	6859      	ldr	r1, [r3, #4]
   258e6:	4694      	mov	ip, r2
   258e8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   258ec:	3308      	adds	r3, #8
   258ee:	4573      	cmp	r3, lr
   258f0:	4662      	mov	r2, ip
   258f2:	d1f6      	bne.n	258e2 <handle_ns_input+0x252>
   258f4:	f105 0308 	add.w	r3, r5, #8
   258f8:	ad07      	add	r5, sp, #28
   258fa:	4632      	mov	r2, r6
   258fc:	ca03      	ldmia	r2!, {r0, r1}
   258fe:	42aa      	cmp	r2, r5
   25900:	6018      	str	r0, [r3, #0]
   25902:	6059      	str	r1, [r3, #4]
   25904:	4616      	mov	r6, r2
   25906:	f103 0308 	add.w	r3, r3, #8
   2590a:	d1f6      	bne.n	258fa <handle_ns_input+0x26a>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   2590c:	2320      	movs	r3, #32
   2590e:	6962      	ldr	r2, [r4, #20]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   25910:	6a20      	ldr	r0, [r4, #32]
			       &NET_IPV6_HDR(pkt)->dst,
   25912:	6892      	ldr	r2, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   25914:	9300      	str	r3, [sp, #0]
   25916:	3218      	adds	r2, #24
   25918:	4643      	mov	r3, r8
   2591a:	4639      	mov	r1, r7
   2591c:	f7fe ff32 	bl	24784 <net_ipv6_send_na>
	if (!ret) {
   25920:	4605      	mov	r5, r0
   25922:	2800      	cmp	r0, #0
   25924:	f47f aec8 	bne.w	256b8 <handle_ns_input+0x28>
		net_pkt_unref(pkt);
   25928:	4620      	mov	r0, r4
   2592a:	f7fb fe78 	bl	2161e <net_pkt_unref>
		return NET_OK;
   2592e:	4628      	mov	r0, r5
   25930:	e6c3      	b.n	256ba <handle_ns_input+0x2a>
   25932:	bf00      	nop
   25934:	2000d7a0 	.word	0x2000d7a0
   25938:	0002cff8 	.word	0x0002cff8
   2593c:	0002d118 	.word	0x0002d118
   25940:	00032dd9 	.word	0x00032dd9
   25944:	00032cc6 	.word	0x00032cc6
   25948:	00032df7 	.word	0x00032df7
   2594c:	00032e2b 	.word	0x00032e2b
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   25950:	4638      	mov	r0, r7
   25952:	f7fa fa37 	bl	1fdc4 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   25956:	2800      	cmp	r0, #0
   25958:	f47f aeae 	bne.w	256b8 <handle_ns_input+0x28>
   2595c:	6963      	ldr	r3, [r4, #20]
   2595e:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   25960:	6999      	ldr	r1, [r3, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25962:	f240 22ff 	movw	r2, #767	; 0x2ff
   25966:	4291      	cmp	r1, r2
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   25968:	f103 0e18 	add.w	lr, r3, #24
   2596c:	d109      	bne.n	25982 <handle_ns_input+0x2f2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2596e:	69da      	ldr	r2, [r3, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   25970:	b93a      	cbnz	r2, 25982 <handle_ns_input+0x2f2>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25972:	6a1a      	ldr	r2, [r3, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   25974:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   25978:	d103      	bne.n	25982 <handle_ns_input+0x2f2>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2597a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2597c:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2597e:	2aff      	cmp	r2, #255	; 0xff
   25980:	d038      	beq.n	259f4 <handle_ns_input+0x364>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   25982:	4671      	mov	r1, lr
   25984:	6a20      	ldr	r0, [r4, #32]
   25986:	f7fa fa71 	bl	1fe6c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   2598a:	4680      	mov	r8, r0
   2598c:	2800      	cmp	r0, #0
   2598e:	f43f ae93 	beq.w	256b8 <handle_ns_input+0x28>
   25992:	6963      	ldr	r3, [r4, #20]
   25994:	689a      	ldr	r2, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   25996:	ad0f      	add	r5, sp, #60	; 0x3c
   25998:	f102 0308 	add.w	r3, r2, #8
   2599c:	462f      	mov	r7, r5
   2599e:	3218      	adds	r2, #24
   259a0:	6818      	ldr	r0, [r3, #0]
   259a2:	6859      	ldr	r1, [r3, #4]
   259a4:	46ac      	mov	ip, r5
   259a6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   259aa:	3308      	adds	r3, #8
   259ac:	4293      	cmp	r3, r2
   259ae:	4665      	mov	r5, ip
   259b0:	d1f6      	bne.n	259a0 <handle_ns_input+0x310>
   259b2:	ad13      	add	r5, sp, #76	; 0x4c
   259b4:	463a      	mov	r2, r7
   259b6:	ca03      	ldmia	r2!, {r0, r1}
   259b8:	42aa      	cmp	r2, r5
   259ba:	6018      	str	r0, [r3, #0]
   259bc:	6059      	str	r1, [r3, #4]
   259be:	4617      	mov	r7, r2
   259c0:	f103 0308 	add.w	r3, r3, #8
   259c4:	d1f6      	bne.n	259b4 <handle_ns_input+0x324>
   259c6:	6963      	ldr	r3, [r4, #20]
   259c8:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr.tgt);
   259ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   259ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   259d2:	f107 0308 	add.w	r3, r7, #8
   259d6:	462a      	mov	r2, r5
   259d8:	ca03      	ldmia	r2!, {r0, r1}
   259da:	454a      	cmp	r2, r9
   259dc:	6018      	str	r0, [r3, #0]
   259de:	6059      	str	r1, [r3, #4]
   259e0:	4615      	mov	r5, r2
   259e2:	f103 0308 	add.w	r3, r3, #8
   259e6:	d1f6      	bne.n	259d6 <handle_ns_input+0x346>
   259e8:	6963      	ldr	r3, [r4, #20]
		src = &NET_IPV6_HDR(pkt)->src;
   259ea:	689f      	ldr	r7, [r3, #8]
		tgt = &ifaddr->address.in6_addr;
   259ec:	f108 0804 	add.w	r8, r8, #4
		src = &NET_IPV6_HDR(pkt)->src;
   259f0:	3708      	adds	r7, #8
   259f2:	e027      	b.n	25a44 <handle_ns_input+0x3b4>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   259f4:	aa07      	add	r2, sp, #28
   259f6:	3308      	adds	r3, #8
   259f8:	4694      	mov	ip, r2
   259fa:	6818      	ldr	r0, [r3, #0]
   259fc:	6859      	ldr	r1, [r3, #4]
   259fe:	4615      	mov	r5, r2
   25a00:	c503      	stmia	r5!, {r0, r1}
   25a02:	3308      	adds	r3, #8
   25a04:	4573      	cmp	r3, lr
   25a06:	462a      	mov	r2, r5
   25a08:	d1f7      	bne.n	259fa <handle_ns_input+0x36a>
   25a0a:	ad0b      	add	r5, sp, #44	; 0x2c
   25a0c:	4662      	mov	r2, ip
   25a0e:	ca03      	ldmia	r2!, {r0, r1}
   25a10:	42aa      	cmp	r2, r5
   25a12:	6018      	str	r0, [r3, #0]
   25a14:	6059      	str	r1, [r3, #4]
   25a16:	4694      	mov	ip, r2
   25a18:	f103 0308 	add.w	r3, r3, #8
   25a1c:	d1f6      	bne.n	25a0c <handle_ns_input+0x37c>
   25a1e:	6963      	ldr	r3, [r4, #20]
   25a20:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr.tgt);
   25a24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   25a28:	ae0f      	add	r6, sp, #60	; 0x3c
   25a2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   25a2e:	f10c 0308 	add.w	r3, ip, #8
   25a32:	462a      	mov	r2, r5
   25a34:	ca03      	ldmia	r2!, {r0, r1}
   25a36:	42b2      	cmp	r2, r6
   25a38:	6018      	str	r0, [r3, #0]
   25a3a:	6059      	str	r1, [r3, #4]
   25a3c:	4615      	mov	r5, r2
   25a3e:	f103 0308 	add.w	r3, r3, #8
   25a42:	d1f6      	bne.n	25a32 <handle_ns_input+0x3a2>
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   25a44:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   25a46:	e762      	b.n	2590e <handle_ns_input+0x27e>

00025a48 <net_ipv6_start_dad>:
{
   25a48:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   25a4a:	2301      	movs	r3, #1
   25a4c:	9301      	str	r3, [sp, #4]
   25a4e:	3104      	adds	r1, #4
   25a50:	2300      	movs	r3, #0
   25a52:	9100      	str	r1, [sp, #0]
   25a54:	461a      	mov	r2, r3
   25a56:	4619      	mov	r1, r3
   25a58:	f7ff f92a 	bl	24cb0 <net_ipv6_send_ns>
}
   25a5c:	b003      	add	sp, #12
   25a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00025a64 <net_ipv6_prepare_for_send>:
{
   25a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   25a66:	b085      	sub	sp, #20
	struct net_if *iface = NULL;
   25a68:	2300      	movs	r3, #0
   25a6a:	9303      	str	r3, [sp, #12]
	NET_ASSERT(pkt && pkt->frags);
   25a6c:	4604      	mov	r4, r0
   25a6e:	b108      	cbz	r0, 25a74 <net_ipv6_prepare_for_send+0x10>
   25a70:	6943      	ldr	r3, [r0, #20]
   25a72:	b9a3      	cbnz	r3, 25a9e <net_ipv6_prepare_for_send+0x3a>
   25a74:	4b58      	ldr	r3, [pc, #352]	; (25bd8 <net_ipv6_prepare_for_send+0x174>)
   25a76:	681b      	ldr	r3, [r3, #0]
   25a78:	0758      	lsls	r0, r3, #29
   25a7a:	d010      	beq.n	25a9e <net_ipv6_prepare_for_send+0x3a>
   25a7c:	2301      	movs	r3, #1
   25a7e:	f04f 0200 	mov.w	r2, #0
   25a82:	f363 0202 	bfi	r2, r3, #0, #3
   25a86:	4955      	ldr	r1, [pc, #340]	; (25bdc <net_ipv6_prepare_for_send+0x178>)
   25a88:	4b55      	ldr	r3, [pc, #340]	; (25be0 <net_ipv6_prepare_for_send+0x17c>)
   25a8a:	4856      	ldr	r0, [pc, #344]	; (25be4 <net_ipv6_prepare_for_send+0x180>)
   25a8c:	1a5b      	subs	r3, r3, r1
   25a8e:	f36f 02c5 	bfc	r2, #3, #3
   25a92:	08db      	lsrs	r3, r3, #3
   25a94:	f363 128f 	bfi	r2, r3, #6, #10
   25a98:	4953      	ldr	r1, [pc, #332]	; (25be8 <net_ipv6_prepare_for_send+0x184>)
   25a9a:	f7dc f95d 	bl	1d58 <log_1>
	if (atomic_test_bit(net_pkt_iface(pkt)->if_dev->flags,
   25a9e:	6a23      	ldr	r3, [r4, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25aa0:	681b      	ldr	r3, [r3, #0]
   25aa2:	f3bf 8f5b 	dmb	ish
   25aa6:	68db      	ldr	r3, [r3, #12]
   25aa8:	f3bf 8f5b 	dmb	ish
   25aac:	0799      	lsls	r1, r3, #30
   25aae:	d477      	bmi.n	25ba0 <net_ipv6_prepare_for_send+0x13c>
   25ab0:	6963      	ldr	r3, [r4, #20]
	if ((net_pkt_lladdr_dst(pkt)->addr &&
   25ab2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   25ab4:	689b      	ldr	r3, [r3, #8]
   25ab6:	f103 0118 	add.w	r1, r3, #24
   25aba:	b912      	cbnz	r2, 25ac2 <net_ipv6_prepare_for_send+0x5e>
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   25abc:	7e1b      	ldrb	r3, [r3, #24]
   25abe:	2bff      	cmp	r3, #255	; 0xff
   25ac0:	d108      	bne.n	25ad4 <net_ipv6_prepare_for_send+0x70>
	return pkt->forwarding;
   25ac2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_forwarding(pkt) &&
   25ac6:	075a      	lsls	r2, r3, #29
   25ac8:	d46a      	bmi.n	25ba0 <net_ipv6_prepare_for_send+0x13c>
   25aca:	4620      	mov	r0, r4
   25acc:	f7fe fcba 	bl	24444 <update_ll_reserve.part.25>
   25ad0:	4604      	mov	r4, r0
   25ad2:	e065      	b.n	25ba0 <net_ipv6_prepare_for_send+0x13c>
	if (net_if_ipv6_addr_onlink(&iface,
   25ad4:	a803      	add	r0, sp, #12
   25ad6:	f7fa ff17 	bl	20908 <net_if_ipv6_addr_onlink>
   25ada:	6963      	ldr	r3, [r4, #20]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   25adc:	689d      	ldr	r5, [r3, #8]
   25ade:	3518      	adds	r5, #24
	if (net_if_ipv6_addr_onlink(&iface,
   25ae0:	2800      	cmp	r0, #0
   25ae2:	d04c      	beq.n	25b7e <net_ipv6_prepare_for_send+0x11a>
		net_pkt_set_iface(pkt, iface);
   25ae4:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   25ae6:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25ae8:	681a      	ldr	r2, [r3, #0]
   25aea:	7d52      	ldrb	r2, [r2, #21]
   25aec:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25af0:	681b      	ldr	r3, [r3, #0]
   25af2:	7d5b      	ldrb	r3, [r3, #21]
   25af4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (!iface) {
   25af8:	9b03      	ldr	r3, [sp, #12]
   25afa:	b97b      	cbnz	r3, 25b1c <net_ipv6_prepare_for_send+0xb8>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   25afc:	4629      	mov	r1, r5
   25afe:	a803      	add	r0, sp, #12
   25b00:	f7fa ff02 	bl	20908 <net_if_ipv6_addr_onlink>
   25b04:	2800      	cmp	r0, #0
   25b06:	d055      	beq.n	25bb4 <net_ipv6_prepare_for_send+0x150>
			net_pkt_set_iface(pkt, iface);
   25b08:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   25b0a:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25b0c:	681a      	ldr	r2, [r3, #0]
   25b0e:	7d52      	ldrb	r2, [r2, #21]
   25b10:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25b14:	681b      	ldr	r3, [r3, #0]
   25b16:	7d5b      	ldrb	r3, [r3, #21]
   25b18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   25b1c:	4629      	mov	r1, r5
   25b1e:	9803      	ldr	r0, [sp, #12]
   25b20:	f7fe fc6c 	bl	243fc <nbr_lookup.isra.21>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   25b24:	4606      	mov	r6, r0
   25b26:	2800      	cmp	r0, #0
   25b28:	d047      	beq.n	25bba <net_ipv6_prepare_for_send+0x156>
   25b2a:	7840      	ldrb	r0, [r0, #1]
   25b2c:	28ff      	cmp	r0, #255	; 0xff
   25b2e:	d044      	beq.n	25bba <net_ipv6_prepare_for_send+0x156>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   25b30:	f7fe f882 	bl	23c38 <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   25b34:	1c83      	adds	r3, r0, #2
   25b36:	6363      	str	r3, [r4, #52]	; 0x34
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   25b38:	7843      	ldrb	r3, [r0, #1]
   25b3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   25b3e:	68f3      	ldr	r3, [r6, #12]
   25b40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25b44:	2b02      	cmp	r3, #2
   25b46:	d114      	bne.n	25b72 <net_ipv6_prepare_for_send+0x10e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   25b48:	4630      	mov	r0, r6
   25b4a:	2103      	movs	r1, #3
   25b4c:	f7fe fb26 	bl	2419c <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   25b50:	68f7      	ldr	r7, [r6, #12]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   25b52:	f006 ffab 	bl	2caac <_impl_k_uptime_get>
			net_ipv6_nbr_data(nbr)->reachable_timeout =
   25b56:	68f3      	ldr	r3, [r6, #12]
   25b58:	f241 3688 	movw	r6, #5000	; 0x1388
			net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   25b5c:	e9c7 0106 	strd	r0, r1, [r7, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout =
   25b60:	621e      	str	r6, [r3, #32]
			if (!k_delayed_work_remaining_get(
   25b62:	4822      	ldr	r0, [pc, #136]	; (25bec <net_ipv6_prepare_for_send+0x188>)
   25b64:	f7fe fb6e 	bl	24244 <k_delayed_work_remaining_get>
   25b68:	b918      	cbnz	r0, 25b72 <net_ipv6_prepare_for_send+0x10e>
				k_delayed_work_submit(
   25b6a:	4631      	mov	r1, r6
   25b6c:	481f      	ldr	r0, [pc, #124]	; (25bec <net_ipv6_prepare_for_send+0x188>)
   25b6e:	f7fe fb77 	bl	24260 <k_delayed_work_submit>
	return pkt->forwarding;
   25b72:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_forwarding(pkt) &&
   25b76:	075b      	lsls	r3, r3, #29
   25b78:	d412      	bmi.n	25ba0 <net_ipv6_prepare_for_send+0x13c>
   25b7a:	4629      	mov	r1, r5
   25b7c:	e7a5      	b.n	25aca <net_ipv6_prepare_for_send+0x66>
	route = net_route_lookup(iface, dst);
   25b7e:	4629      	mov	r1, r5
   25b80:	f000 fda6 	bl	266d0 <net_route_lookup>
	if (route) {
   25b84:	4606      	mov	r6, r0
   25b86:	b170      	cbz	r0, 25ba6 <net_ipv6_prepare_for_send+0x142>
		nexthop = net_route_get_nexthop(route);
   25b88:	f000 fe86 	bl	26898 <net_route_get_nexthop>
		if (!nexthop) {
   25b8c:	4605      	mov	r5, r0
   25b8e:	2800      	cmp	r0, #0
   25b90:	d1b2      	bne.n	25af8 <net_ipv6_prepare_for_send+0x94>
			net_route_del(route);
   25b92:	4630      	mov	r0, r6
   25b94:	f000 fdf6 	bl	26784 <net_route_del>
			net_pkt_unref(pkt);
   25b98:	4620      	mov	r0, r4
   25b9a:	f7fb fd40 	bl	2161e <net_pkt_unref>
			return NULL;
   25b9e:	2400      	movs	r4, #0
}
   25ba0:	4620      	mov	r0, r4
   25ba2:	b005      	add	sp, #20
   25ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   25ba6:	4629      	mov	r1, r5
   25ba8:	f7fa ffa6 	bl	20af8 <net_if_ipv6_router_find_default>
		if (!router) {
   25bac:	b188      	cbz	r0, 25bd2 <net_ipv6_prepare_for_send+0x16e>
		nexthop = &router->address.in6_addr;
   25bae:	f100 0524 	add.w	r5, r0, #36	; 0x24
   25bb2:	e7a1      	b.n	25af8 <net_ipv6_prepare_for_send+0x94>
			iface = net_pkt_iface(pkt);
   25bb4:	6a23      	ldr	r3, [r4, #32]
   25bb6:	9303      	str	r3, [sp, #12]
   25bb8:	e7b0      	b.n	25b1c <net_ipv6_prepare_for_send+0xb8>
	return pkt->frags->data;
   25bba:	6963      	ldr	r3, [r4, #20]
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   25bbc:	2600      	movs	r6, #0
   25bbe:	689a      	ldr	r2, [r3, #8]
   25bc0:	e9cd 5600 	strd	r5, r6, [sp]
   25bc4:	4633      	mov	r3, r6
   25bc6:	3208      	adds	r2, #8
   25bc8:	4621      	mov	r1, r4
   25bca:	6a20      	ldr	r0, [r4, #32]
   25bcc:	f7ff f870 	bl	24cb0 <net_ipv6_send_ns>
   25bd0:	e7e5      	b.n	25b9e <net_ipv6_prepare_for_send+0x13a>
		if (!nexthop) {
   25bd2:	2d00      	cmp	r5, #0
   25bd4:	d1a2      	bne.n	25b1c <net_ipv6_prepare_for_send+0xb8>
   25bd6:	e7df      	b.n	25b98 <net_ipv6_prepare_for_send+0x134>
   25bd8:	2000d7a0 	.word	0x2000d7a0
   25bdc:	0002cff8 	.word	0x0002cff8
   25be0:	0002d118 	.word	0x0002d118
   25be4:	000328ac 	.word	0x000328ac
   25be8:	00032c9f 	.word	0x00032c9f
   25bec:	200026ac 	.word	0x200026ac

00025bf0 <ipv6_nd_reachable_timeout>:
{
   25bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bf4:	b085      	sub	sp, #20
   25bf6:	f006 ff59 	bl	2caac <_impl_k_uptime_get>
   25bfa:	4e52      	ldr	r6, [pc, #328]	; (25d44 <ipv6_nd_reachable_timeout+0x154>)
			NET_ASSERT_INFO(false, "Static entry shall never timeout");
   25bfc:	4b52      	ldr	r3, [pc, #328]	; (25d48 <ipv6_nd_reachable_timeout+0x158>)
		if (!nbr || !nbr->ref) {
   25bfe:	f8df b15c 	ldr.w	fp, [pc, #348]	; 25d5c <ipv6_nd_reachable_timeout+0x16c>
				if (!k_delayed_work_remaining_get(
   25c02:	4f52      	ldr	r7, [pc, #328]	; (25d4c <ipv6_nd_reachable_timeout+0x15c>)
			NET_ASSERT_INFO(false, "Static entry shall never timeout");
   25c04:	1af6      	subs	r6, r6, r3
   25c06:	4680      	mov	r8, r0
   25c08:	4689      	mov	r9, r1
   25c0a:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   25c0e:	2500      	movs	r5, #0
		if (!nbr || !nbr->ref) {
   25c10:	f815 300b 	ldrb.w	r3, [r5, fp]
   25c14:	2b00      	cmp	r3, #0
   25c16:	d040      	beq.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
   25c18:	eb0b 0405 	add.w	r4, fp, r5
		data = net_ipv6_nbr_data(nbr);
   25c1c:	68e1      	ldr	r1, [r4, #12]
		if (!data) {
   25c1e:	2900      	cmp	r1, #0
   25c20:	d03b      	beq.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
		if (!data->reachable) {
   25c22:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   25c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
   25c2a:	4313      	orrs	r3, r2
   25c2c:	d035      	beq.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
		remaining = data->reachable + data->reachable_timeout - current;
   25c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25c32:	6a08      	ldr	r0, [r1, #32]
   25c34:	1812      	adds	r2, r2, r0
   25c36:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   25c3a:	ebb2 0208 	subs.w	r2, r2, r8
   25c3e:	eb63 0309 	sbc.w	r3, r3, r9
		if (remaining > 0) {
   25c42:	2a01      	cmp	r2, #1
		remaining = data->reachable + data->reachable_timeout - current;
   25c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
		if (remaining > 0) {
   25c48:	f173 0300 	sbcs.w	r3, r3, #0
   25c4c:	db08      	blt.n	25c60 <ipv6_nd_reachable_timeout+0x70>
			if (!k_delayed_work_remaining_get(
   25c4e:	4638      	mov	r0, r7
   25c50:	f7fe faf8 	bl	24244 <k_delayed_work_remaining_get>
   25c54:	bb08      	cbnz	r0, 25c9a <ipv6_nd_reachable_timeout+0xaa>
				k_delayed_work_submit(&ipv6_nd_reachable_timer,
   25c56:	9902      	ldr	r1, [sp, #8]
					k_delayed_work_submit(
   25c58:	4638      	mov	r0, r7
   25c5a:	f7fe fb01 	bl	24260 <k_delayed_work_submit>
   25c5e:	e01c      	b.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
		data->reachable = 0;
   25c60:	2300      	movs	r3, #0
   25c62:	2200      	movs	r2, #0
   25c64:	e9c1 2306 	strd	r2, r3, [r1, #24]
		switch (data->state) {
   25c68:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
   25c6c:	2b05      	cmp	r3, #5
   25c6e:	d814      	bhi.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
   25c70:	e8df f003 	tbb	[pc, r3]
   25c74:	331e2f1a 	.word	0x331e2f1a
   25c78:	0339      	.short	0x0339
			NET_ASSERT_INFO(false, "Static entry shall never timeout");
   25c7a:	4b35      	ldr	r3, [pc, #212]	; (25d50 <ipv6_nd_reachable_timeout+0x160>)
   25c7c:	681b      	ldr	r3, [r3, #0]
   25c7e:	075a      	lsls	r2, r3, #29
   25c80:	d00b      	beq.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
   25c82:	2301      	movs	r3, #1
   25c84:	f363 0a02 	bfi	sl, r3, #0, #3
   25c88:	f36f 0ac5 	bfc	sl, #3, #3
   25c8c:	f366 1a8f 	bfi	sl, r6, #6, #10
   25c90:	4652      	mov	r2, sl
   25c92:	4930      	ldr	r1, [pc, #192]	; (25d54 <ipv6_nd_reachable_timeout+0x164>)
   25c94:	4830      	ldr	r0, [pc, #192]	; (25d58 <ipv6_nd_reachable_timeout+0x168>)
   25c96:	f7dc f85f 	bl	1d58 <log_1>
   25c9a:	354c      	adds	r5, #76	; 0x4c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   25c9c:	f5b5 7fe4 	cmp.w	r5, #456	; 0x1c8
   25ca0:	d1b6      	bne.n	25c10 <ipv6_nd_reachable_timeout+0x20>
}
   25ca2:	b005      	add	sp, #20
   25ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   25ca8:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
   25cac:	2b02      	cmp	r3, #2
   25cae:	d903      	bls.n	25cb8 <ipv6_nd_reachable_timeout+0xc8>
					nbr_free(nbr);
   25cb0:	4620      	mov	r0, r4
   25cb2:	f7fe faa1 	bl	241f8 <nbr_free>
   25cb6:	e7f0      	b.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
				data->ns_count++;
   25cb8:	3301      	adds	r3, #1
   25cba:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   25cbe:	2300      	movs	r3, #0
   25cc0:	3104      	adds	r1, #4
   25cc2:	9100      	str	r1, [sp, #0]
   25cc4:	9301      	str	r3, [sp, #4]
   25cc6:	461a      	mov	r2, r3
   25cc8:	4619      	mov	r1, r3
   25cca:	68a0      	ldr	r0, [r4, #8]
   25ccc:	f7fe fff0 	bl	24cb0 <net_ipv6_send_ns>
   25cd0:	e7e3      	b.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
			data->state = NET_IPV6_NBR_STATE_STALE;
   25cd2:	2302      	movs	r3, #2
   25cd4:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
   25cd8:	e7df      	b.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
			data->state = NET_IPV6_NBR_STATE_PROBE;
   25cda:	2304      	movs	r3, #4
   25cdc:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
			data->ns_count = 0;
   25ce0:	2300      	movs	r3, #0
   25ce2:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   25ce6:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
   25cea:	68a0      	ldr	r0, [r4, #8]
   25cec:	2b02      	cmp	r3, #2
   25cee:	f101 0204 	add.w	r2, r1, #4
   25cf2:	d90b      	bls.n	25d0c <ipv6_nd_reachable_timeout+0x11c>
				router = net_if_ipv6_router_lookup(nbr->iface,
   25cf4:	4611      	mov	r1, r2
   25cf6:	f7fa fedd 	bl	20ab4 <net_if_ipv6_router_lookup>
				if (router && !router->is_infinite) {
   25cfa:	2800      	cmp	r0, #0
   25cfc:	d0cd      	beq.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
   25cfe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   25d02:	075b      	lsls	r3, r3, #29
   25d04:	d4c9      	bmi.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
					net_if_ipv6_router_rm(router);
   25d06:	f7fa ff67 	bl	20bd8 <net_if_ipv6_router_rm>
   25d0a:	e7d1      	b.n	25cb0 <ipv6_nd_reachable_timeout+0xc0>
				data->ns_count++;
   25d0c:	3301      	adds	r3, #1
   25d0e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   25d12:	2300      	movs	r3, #0
   25d14:	e9cd 2300 	strd	r2, r3, [sp]
   25d18:	4619      	mov	r1, r3
   25d1a:	461a      	mov	r2, r3
   25d1c:	f7fe ffc8 	bl	24cb0 <net_ipv6_send_ns>
				net_ipv6_nbr_data(nbr)->reachable =
   25d20:	68e3      	ldr	r3, [r4, #12]
   25d22:	9302      	str	r3, [sp, #8]
   25d24:	f006 fec2 	bl	2caac <_impl_k_uptime_get>
   25d28:	9b02      	ldr	r3, [sp, #8]
   25d2a:	e9c3 0106 	strd	r0, r1, [r3, #24]
				net_ipv6_nbr_data(nbr)->reachable_timeout =
   25d2e:	68e3      	ldr	r3, [r4, #12]
   25d30:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   25d34:	621c      	str	r4, [r3, #32]
				if (!k_delayed_work_remaining_get(
   25d36:	4638      	mov	r0, r7
   25d38:	f7fe fa84 	bl	24244 <k_delayed_work_remaining_get>
   25d3c:	2800      	cmp	r0, #0
   25d3e:	d1ac      	bne.n	25c9a <ipv6_nd_reachable_timeout+0xaa>
					k_delayed_work_submit(
   25d40:	4621      	mov	r1, r4
   25d42:	e789      	b.n	25c58 <ipv6_nd_reachable_timeout+0x68>
   25d44:	0002d118 	.word	0x0002d118
   25d48:	0002cff8 	.word	0x0002cff8
   25d4c:	200026ac 	.word	0x200026ac
   25d50:	2000d7a0 	.word	0x2000d7a0
   25d54:	00032cd6 	.word	0x00032cd6
   25d58:	00032eba 	.word	0x00032eba
   25d5c:	2000d220 	.word	0x2000d220

00025d60 <net_ipv6_send_rs>:
{
   25d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   25d62:	2100      	movs	r1, #0
{
   25d64:	b085      	sub	sp, #20
   25d66:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   25d68:	f7fe fa14 	bl	24194 <net_if_get_ll_reserve>
   25d6c:	2164      	movs	r1, #100	; 0x64
   25d6e:	f7fb fb7d 	bl	2146c <net_pkt_get_reserve_tx>
	if (!pkt) {
   25d72:	4604      	mov	r4, r0
   25d74:	b138      	cbz	r0, 25d86 <net_ipv6_send_rs+0x26>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   25d76:	2164      	movs	r1, #100	; 0x64
   25d78:	f7fb fb90 	bl	2149c <net_pkt_get_frag>
	if (!frag) {
   25d7c:	4606      	mov	r6, r0
   25d7e:	b928      	cbnz	r0, 25d8c <net_ipv6_send_rs+0x2c>
		net_pkt_unref(pkt);
   25d80:	4620      	mov	r0, r4
   25d82:	f7fb fc4c 	bl	2161e <net_pkt_unref>
		return -ENOMEM;
   25d86:	f06f 050b 	mvn.w	r5, #11
   25d8a:	e089      	b.n	25ea0 <net_ipv6_send_rs+0x140>
	net_pkt_frag_add(pkt, frag);
   25d8c:	4601      	mov	r1, r0
   25d8e:	4620      	mov	r0, r4
   25d90:	f7fb fc6c 	bl	2166c <net_pkt_frag_add>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25d94:	683b      	ldr	r3, [r7, #0]
	pkt->iface = iface;
   25d96:	6227      	str	r7, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25d98:	7d5b      	ldrb	r3, [r3, #21]
   25d9a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25d9e:	683b      	ldr	r3, [r7, #0]
   25da0:	7d5b      	ldrb	r3, [r3, #21]
   25da2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
   25da6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   25daa:	220a      	movs	r2, #10
   25dac:	f362 03c6 	bfi	r3, r2, #3, #4
   25db0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->ip_hdr_len = len;
   25db4:	2328      	movs	r3, #40	; 0x28
   25db6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_ll_clear(pkt);
   25dba:	4620      	mov	r0, r4
   25dbc:	f7fe facb 	bl	24356 <net_pkt_ll_clear>
	return pkt->frags->data;
   25dc0:	6963      	ldr	r3, [r4, #20]
   25dc2:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   25dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25dc8:	2102      	movs	r1, #2
   25dca:	761a      	strb	r2, [r3, #24]
   25dcc:	7659      	strb	r1, [r3, #25]
   25dce:	2200      	movs	r2, #0
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   25dd0:	769a      	strb	r2, [r3, #26]
   25dd2:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   25dd4:	771a      	strb	r2, [r3, #28]
   25dd6:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   25dd8:	779a      	strb	r2, [r3, #30]
   25dda:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   25ddc:	f883 2020 	strb.w	r2, [r3, #32]
   25de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   25de4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   25de8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   25dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   25df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   25df4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   25df8:	2201      	movs	r2, #1
   25dfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   25dfe:	6963      	ldr	r3, [r4, #20]
   25e00:	689d      	ldr	r5, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   25e02:	4638      	mov	r0, r7
   25e04:	f105 0118 	add.w	r1, r5, #24
   25e08:	f7fa ff28 	bl	20c5c <net_if_ipv6_select_src_addr>
   25e0c:	466a      	mov	r2, sp
   25e0e:	4603      	mov	r3, r0
   25e10:	f100 0e10 	add.w	lr, r0, #16
   25e14:	4617      	mov	r7, r2
   25e16:	6818      	ldr	r0, [r3, #0]
   25e18:	6859      	ldr	r1, [r3, #4]
   25e1a:	4694      	mov	ip, r2
   25e1c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   25e20:	3308      	adds	r3, #8
   25e22:	4573      	cmp	r3, lr
   25e24:	4662      	mov	r2, ip
   25e26:	d1f6      	bne.n	25e16 <net_ipv6_send_rs+0xb6>
   25e28:	f105 0308 	add.w	r3, r5, #8
   25e2c:	ad04      	add	r5, sp, #16
   25e2e:	463a      	mov	r2, r7
   25e30:	ca03      	ldmia	r2!, {r0, r1}
   25e32:	42aa      	cmp	r2, r5
   25e34:	6018      	str	r0, [r3, #0]
   25e36:	6059      	str	r1, [r3, #4]
   25e38:	4617      	mov	r7, r2
   25e3a:	f103 0308 	add.w	r3, r3, #8
   25e3e:	d1f6      	bne.n	25e2e <net_ipv6_send_rs+0xce>
   25e40:	6963      	ldr	r3, [r4, #20]
	unspec_src = net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src);
   25e42:	6898      	ldr	r0, [r3, #8]
   25e44:	3008      	adds	r0, #8
   25e46:	f7fe f998 	bl	2417a <net_is_ipv6_addr_unspecified>
	if (!unspec_src) {
   25e4a:	4607      	mov	r7, r0
   25e4c:	bb58      	cbnz	r0, 25ea6 <net_ipv6_send_rs+0x146>
		llao_len = get_llao_len(net_pkt_iface(pkt));
   25e4e:	6a20      	ldr	r0, [r4, #32]
   25e50:	f7fe faa6 	bl	243a0 <get_llao_len>
   25e54:	4605      	mov	r5, r0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   25e56:	1d29      	adds	r1, r5, #4
   25e58:	b2c9      	uxtb	r1, r1
   25e5a:	4620      	mov	r0, r4
   25e5c:	2285      	movs	r2, #133	; 0x85
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   25e5e:	3608      	adds	r6, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   25e60:	f7fe fa56 	bl	24310 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   25e64:	2104      	movs	r1, #4
   25e66:	4630      	mov	r0, r6
   25e68:	f7f8 fb50 	bl	1e50c <net_buf_simple_add>
	if (!unspec_src) {
   25e6c:	b987      	cbnz	r7, 25e90 <net_ipv6_send_rs+0x130>
		net_buf_add(frag, llao_len);
   25e6e:	4629      	mov	r1, r5
   25e70:	4630      	mov	r0, r6
   25e72:	f7f8 fb4b 	bl	1e50c <net_buf_simple_add>
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   25e76:	6a23      	ldr	r3, [r4, #32]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   25e78:	4620      	mov	r0, r4
	return &iface->if_dev->link_addr;
   25e7a:	681e      	ldr	r6, [r3, #0]
   25e7c:	f7fb fe77 	bl	21b6e <net_pkt_icmp_data>
   25e80:	3610      	adds	r6, #16
		set_llao(net_if_get_link_addr(net_pkt_iface(pkt)),
   25e82:	f100 0108 	add.w	r1, r0, #8
   25e86:	2301      	movs	r3, #1
   25e88:	462a      	mov	r2, r5
   25e8a:	4630      	mov	r0, r6
   25e8c:	f7fe fa72 	bl	24374 <set_llao>
	ret = net_icmpv6_set_chksum(pkt);
   25e90:	4620      	mov	r0, r4
   25e92:	f7fd f88b 	bl	22fac <net_icmpv6_set_chksum>
	if (ret < 0) {
   25e96:	1e05      	subs	r5, r0, #0
		net_pkt_unref(pkt);
   25e98:	4620      	mov	r0, r4
	if (ret < 0) {
   25e9a:	da06      	bge.n	25eaa <net_ipv6_send_rs+0x14a>
		net_pkt_unref(pkt);
   25e9c:	f7fb fbbf 	bl	2161e <net_pkt_unref>
}
   25ea0:	4628      	mov	r0, r5
   25ea2:	b005      	add	sp, #20
   25ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8_t llao_len = 0;
   25ea6:	2500      	movs	r5, #0
   25ea8:	e7d5      	b.n	25e56 <net_ipv6_send_rs+0xf6>
	if (net_send_data(pkt) < 0) {
   25eaa:	f7f9 fcbf 	bl	1f82c <net_send_data>
   25eae:	2800      	cmp	r0, #0
   25eb0:	da05      	bge.n	25ebe <net_ipv6_send_rs+0x15e>
	net_pkt_unref(pkt);
   25eb2:	4620      	mov	r0, r4
   25eb4:	f7fb fbb3 	bl	2161e <net_pkt_unref>
	return -EINVAL;
   25eb8:	f06f 0515 	mvn.w	r5, #21
   25ebc:	e7f0      	b.n	25ea0 <net_ipv6_send_rs+0x140>
	return 0;
   25ebe:	2500      	movs	r5, #0
   25ec0:	e7ee      	b.n	25ea0 <net_ipv6_send_rs+0x140>

00025ec2 <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   25ec2:	f7ff bf4d 	b.w	25d60 <net_ipv6_send_rs>
	...

00025ec8 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
   25ec8:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   25eca:	4809      	ldr	r0, [pc, #36]	; (25ef0 <net_ipv6_nbr_init+0x28>)
   25ecc:	f7fd f848 	bl	22f60 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   25ed0:	4808      	ldr	r0, [pc, #32]	; (25ef4 <net_ipv6_nbr_init+0x2c>)
   25ed2:	f7fd f845 	bl	22f60 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
   25ed6:	4908      	ldr	r1, [pc, #32]	; (25ef8 <net_ipv6_nbr_init+0x30>)
   25ed8:	4808      	ldr	r0, [pc, #32]	; (25efc <net_ipv6_nbr_init+0x34>)
   25eda:	f006 fc19 	bl	2c710 <k_delayed_work_init>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   25ede:	4808      	ldr	r0, [pc, #32]	; (25f00 <net_ipv6_nbr_init+0x38>)
   25ee0:	f7fd f83e 	bl	22f60 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_nd_reachable_timer,
   25ee4:	4907      	ldr	r1, [pc, #28]	; (25f04 <net_ipv6_nbr_init+0x3c>)
   25ee6:	4808      	ldr	r0, [pc, #32]	; (25f08 <net_ipv6_nbr_init+0x40>)
			    ipv6_nd_reachable_timeout);
#endif
}
   25ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&ipv6_nd_reachable_timer,
   25eec:	f006 bc10 	b.w	2c710 <k_delayed_work_init>
   25ef0:	2000d3e8 	.word	0x2000d3e8
   25ef4:	2000d208 	.word	0x2000d208
   25ef8:	00024271 	.word	0x00024271
   25efc:	200026cc 	.word	0x200026cc
   25f00:	2000d3f4 	.word	0x2000d3f4
   25f04:	00025bf1 	.word	0x00025bf1
   25f08:	200026ac 	.word	0x200026ac

00025f0c <net_if_get_ll_reserve>:
	return iface->if_dev->l2;
   25f0c:	6803      	ldr	r3, [r0, #0]
	return net_if_l2(iface)->reserve(iface, (void *)dst_ip6);
   25f0e:	685b      	ldr	r3, [r3, #4]
   25f10:	689b      	ldr	r3, [r3, #8]
   25f12:	4718      	bx	r3

00025f14 <net_pkt_append_u8_timeout.constprop.14>:
static inline bool net_pkt_append_u8_timeout(struct net_pkt *pkt, u8_t data,
   25f14:	b507      	push	{r0, r1, r2, lr}
   25f16:	aa02      	add	r2, sp, #8
	return net_pkt_append(pkt, len, data, timeout) == len;
   25f18:	2332      	movs	r3, #50	; 0x32
static inline bool net_pkt_append_u8_timeout(struct net_pkt *pkt, u8_t data,
   25f1a:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   25f1e:	2101      	movs	r1, #1
   25f20:	f7fb fc9a 	bl	21858 <net_pkt_append>
}
   25f24:	1e43      	subs	r3, r0, #1
   25f26:	4258      	negs	r0, r3
   25f28:	4158      	adcs	r0, r3
   25f2a:	b003      	add	sp, #12
   25f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00025f30 <net_pkt_append_be16_timeout.constprop.13>:
static inline bool net_pkt_append_be16_timeout(struct net_pkt *pkt,
   25f30:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   25f32:	aa02      	add	r2, sp, #8
   25f34:	ba49      	rev16	r1, r1
   25f36:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   25f3a:	2332      	movs	r3, #50	; 0x32
   25f3c:	2102      	movs	r1, #2
   25f3e:	f7fb fc8b 	bl	21858 <net_pkt_append>
}
   25f42:	1e83      	subs	r3, r0, #2
   25f44:	4258      	negs	r0, r3
   25f46:	4158      	adcs	r0, r3
   25f48:	b003      	add	sp, #12
   25f4a:	f85d fb04 	ldr.w	pc, [sp], #4

00025f4e <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   25f4e:	b570      	push	{r4, r5, r6, lr}
   25f50:	460d      	mov	r5, r1
	int ret;

	append(pkt, u8, record_type);
   25f52:	b2d1      	uxtb	r1, r2
{
   25f54:	4604      	mov	r4, r0
   25f56:	461e      	mov	r6, r3
	append(pkt, u8, record_type);
   25f58:	f7ff ffdc 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   25f5c:	b910      	cbnz	r0, 25f64 <create_mldv2+0x16>
	}

	return pkt;

drop:
	return NULL;
   25f5e:	2400      	movs	r4, #0
}
   25f60:	4620      	mov	r0, r4
   25f62:	bd70      	pop	{r4, r5, r6, pc}
	append(pkt, u8, 0);             /* aux data len */
   25f64:	2100      	movs	r1, #0
   25f66:	4620      	mov	r0, r4
   25f68:	f7ff ffd4 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   25f6c:	2800      	cmp	r0, #0
   25f6e:	d0f6      	beq.n	25f5e <create_mldv2+0x10>
	append(pkt, be16, num_sources); /* number of addresses */
   25f70:	4631      	mov	r1, r6
   25f72:	4620      	mov	r0, r4
   25f74:	f7ff ffdc 	bl	25f30 <net_pkt_append_be16_timeout.constprop.13>
   25f78:	2800      	cmp	r0, #0
   25f7a:	d0f0      	beq.n	25f5e <create_mldv2+0x10>
	return net_pkt_append(pkt, len, data, timeout) == len;
   25f7c:	462a      	mov	r2, r5
   25f7e:	2332      	movs	r3, #50	; 0x32
   25f80:	2110      	movs	r1, #16
   25f82:	4620      	mov	r0, r4
   25f84:	f7fb fc68 	bl	21858 <net_pkt_append>
	append_all(pkt, sizeof(struct in6_addr), addr->s6_addr);
   25f88:	2810      	cmp	r0, #16
   25f8a:	4605      	mov	r5, r0
   25f8c:	d1e7      	bne.n	25f5e <create_mldv2+0x10>
	if (num_sources > 0) {
   25f8e:	2e00      	cmp	r6, #0
   25f90:	d0e6      	beq.n	25f60 <create_mldv2+0x12>
		append_all(pkt, sizeof(struct in6_addr),
   25f92:	f7fd ff19 	bl	23dc8 <net_ipv6_unspecified_address>
   25f96:	2332      	movs	r3, #50	; 0x32
   25f98:	4602      	mov	r2, r0
   25f9a:	4629      	mov	r1, r5
   25f9c:	4620      	mov	r0, r4
   25f9e:	f7fb fc5b 	bl	21858 <net_pkt_append>
   25fa2:	2810      	cmp	r0, #16
   25fa4:	d0dc      	beq.n	25f60 <create_mldv2+0x12>
   25fa6:	e7da      	b.n	25f5e <create_mldv2+0x10>

00025fa8 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   25fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   25faa:	b08b      	sub	sp, #44	; 0x2c
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   25fac:	f240 23ff 	movw	r3, #767	; 0x2ff
   25fb0:	4606      	mov	r6, r0
   25fb2:	460f      	mov	r7, r1
   25fb4:	f8ad 3018 	strh.w	r3, [sp, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   25fb8:	2500      	movs	r5, #0
   25fba:	f8ad 501a 	strh.w	r5, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   25fbe:	f8ad 501c 	strh.w	r5, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   25fc2:	f8ad 501e 	strh.w	r5, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   25fc6:	f8ad 5020 	strh.w	r5, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   25fca:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   25fce:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   25fd2:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   25fd6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   25fda:	a906      	add	r1, sp, #24
   25fdc:	f7ff ff96 	bl	25f0c <net_if_get_ll_reserve>
   25fe0:	2132      	movs	r1, #50	; 0x32
   25fe2:	f7fb fa43 	bl	2146c <net_pkt_get_reserve_tx>
				     NET_BUF_TIMEOUT);
	if (!pkt) {
   25fe6:	4604      	mov	r4, r0
   25fe8:	2800      	cmp	r0, #0
   25fea:	f000 809b 	beq.w	26124 <send_mldv2_raw+0x17c>
		return -ENOMEM;
	}

	if (!net_ipv6_create(pkt,
   25fee:	a906      	add	r1, sp, #24
   25ff0:	4630      	mov	r0, r6
   25ff2:	f7fa fe33 	bl	20c5c <net_if_ipv6_select_src_addr>
   25ff6:	9500      	str	r5, [sp, #0]
   25ff8:	4601      	mov	r1, r0
   25ffa:	4633      	mov	r3, r6
   25ffc:	aa06      	add	r2, sp, #24
   25ffe:	4620      	mov	r0, r4
   26000:	f7fd fee6 	bl	23dd0 <net_ipv6_create>
   26004:	b938      	cbnz	r0, 26016 <send_mldv2_raw+0x6e>
			     net_if_ipv6_select_src_addr(iface, &dst),
			     &dst,
			     iface,
			     NET_IPV6_NEXTHDR_HBHO)) {
		ret = -ENOMEM;
   26006:	f06f 050b 	mvn.w	r5, #11

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));
	net_stats_update_ipv6_mld_drop(net_pkt_iface(pkt));

	net_pkt_unref(pkt);
   2600a:	4620      	mov	r0, r4
   2600c:	f7fb fb07 	bl	2161e <net_pkt_unref>

	return ret;
}
   26010:	4628      	mov	r0, r5
   26012:	b00b      	add	sp, #44	; 0x2c
   26014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   26016:	6963      	ldr	r3, [r4, #20]
   26018:	689a      	ldr	r2, [r3, #8]
   2601a:	2101      	movs	r1, #1
   2601c:	71d1      	strb	r1, [r2, #7]
	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   2601e:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   26020:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	append(pkt, u8, IPPROTO_ICMPV6);
   26024:	213a      	movs	r1, #58	; 0x3a
   26026:	4620      	mov	r0, r4
   26028:	f7ff ff74 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   2602c:	2800      	cmp	r0, #0
   2602e:	d0ea      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);        /* length (0 means 8 bytes) */
   26030:	4629      	mov	r1, r5
   26032:	4620      	mov	r0, r4
   26034:	f7ff ff6e 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   26038:	2800      	cmp	r0, #0
   2603a:	d0e4      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, be16, 0x0502); /* RFC 2711 ch 2.1 */
   2603c:	f240 5102 	movw	r1, #1282	; 0x502
   26040:	4620      	mov	r0, r4
   26042:	f7ff ff75 	bl	25f30 <net_pkt_append_be16_timeout.constprop.13>
   26046:	2800      	cmp	r0, #0
   26048:	d0dd      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, be16, 0);      /* pkt contains MLD msg */
   2604a:	4629      	mov	r1, r5
   2604c:	4620      	mov	r0, r4
   2604e:	f7ff ff6f 	bl	25f30 <net_pkt_append_be16_timeout.constprop.13>
   26052:	2800      	cmp	r0, #0
   26054:	d0d7      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);        /* padding */
   26056:	4629      	mov	r1, r5
   26058:	4620      	mov	r0, r4
   2605a:	f7ff ff5b 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   2605e:	2800      	cmp	r0, #0
   26060:	d0d1      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);        /* padding */
   26062:	4629      	mov	r1, r5
   26064:	4620      	mov	r0, r4
   26066:	f7ff ff55 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   2606a:	2800      	cmp	r0, #0
   2606c:	d0cb      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, u8, NET_ICMPV6_MLDv2); /* type */
   2606e:	218f      	movs	r1, #143	; 0x8f
   26070:	4620      	mov	r0, r4
   26072:	f7ff ff4f 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   26076:	2800      	cmp	r0, #0
   26078:	d0c5      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, u8, 0);                /* code */
   2607a:	4629      	mov	r1, r5
   2607c:	4620      	mov	r0, r4
   2607e:	f7ff ff49 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   26082:	2800      	cmp	r0, #0
   26084:	d0bf      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, be16, 0);              /* chksum */
   26086:	2100      	movs	r1, #0
   26088:	4620      	mov	r0, r4
   2608a:	f7ff ff51 	bl	25f30 <net_pkt_append_be16_timeout.constprop.13>
   2608e:	2800      	cmp	r0, #0
   26090:	d0b9      	beq.n	26006 <send_mldv2_raw+0x5e>
	append(pkt, be16, 0);              /* reserved field */
   26092:	2100      	movs	r1, #0
   26094:	4620      	mov	r0, r4
   26096:	f7ff ff4b 	bl	25f30 <net_pkt_append_be16_timeout.constprop.13>
   2609a:	2800      	cmp	r0, #0
   2609c:	d0b3      	beq.n	26006 <send_mldv2_raw+0x5e>
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2609e:	6833      	ldr	r3, [r6, #0]
	pkt->iface = iface;
   260a0:	6226      	str	r6, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   260a2:	7d5b      	ldrb	r3, [r3, #21]
   260a4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   260a8:	6833      	ldr	r3, [r6, #0]
   260aa:	7d5b      	ldrb	r3, [r3, #21]
   260ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_frag_add(pkt, frags);
   260b0:	4639      	mov	r1, r7
   260b2:	4620      	mov	r0, r4
   260b4:	f7fb fada 	bl	2166c <net_pkt_frag_add>
	ret = net_ipv6_finalize(pkt, NET_IPV6_NEXTHDR_HBHO);
   260b8:	2100      	movs	r1, #0
   260ba:	4620      	mov	r0, r4
   260bc:	f7fd fefc 	bl	23eb8 <net_ipv6_finalize>
	if (ret < 0) {
   260c0:	1e05      	subs	r5, r0, #0
   260c2:	dba2      	blt.n	2600a <send_mldv2_raw+0x62>
	pkt->ipv6_ext_len = len;
   260c4:	2308      	movs	r3, #8
   260c6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   260ca:	213a      	movs	r1, #58	; 0x3a
   260cc:	4620      	mov	r0, r4
	if (!net_pkt_write_be16_timeout(pkt, pkt->frags,
   260ce:	6966      	ldr	r6, [r4, #20]
   260d0:	f7fc f8ee 	bl	222b0 <net_calc_chksum>
   260d4:	213a      	movs	r1, #58	; 0x3a
   260d6:	4605      	mov	r5, r0
   260d8:	4620      	mov	r0, r4
   260da:	f7fc f8e9 	bl	222b0 <net_calc_chksum>
					ntohs(~net_calc_chksum_icmpv6(pkt)),
   260de:	ea6f 2525 	mvn.w	r5, r5, asr #8
   260e2:	b2ed      	uxtb	r5, r5
   260e4:	43c0      	mvns	r0, r0
   260e6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	if (!net_pkt_write_be16_timeout(pkt, pkt->frags,
   260ea:	b280      	uxth	r0, r0
							 u16_t offset,
							 u16_t *pos,
							 u16_t data,
							 s32_t timeout)
{
	u16_t value = htons(data);
   260ec:	0203      	lsls	r3, r0, #8
   260ee:	ea43 2010 	orr.w	r0, r3, r0, lsr #8

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   260f2:	f10d 0316 	add.w	r3, sp, #22
   260f6:	2232      	movs	r2, #50	; 0x32
   260f8:	9301      	str	r3, [sp, #4]
   260fa:	2302      	movs	r3, #2
	u16_t value = htons(data);
   260fc:	f8ad 0016 	strh.w	r0, [sp, #22]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   26100:	9300      	str	r3, [sp, #0]
   26102:	9202      	str	r2, [sp, #8]
   26104:	ab05      	add	r3, sp, #20
   26106:	4631      	mov	r1, r6
   26108:	4620      	mov	r0, r4
   2610a:	f7fb fc5f 	bl	219cc <net_pkt_write>
   2610e:	2800      	cmp	r0, #0
   26110:	f43f af79 	beq.w	26006 <send_mldv2_raw+0x5e>
	ret = net_send_data(pkt);
   26114:	4620      	mov	r0, r4
   26116:	f7f9 fb89 	bl	1f82c <net_send_data>
	if (ret < 0) {
   2611a:	1e05      	subs	r5, r0, #0
   2611c:	f6ff af75 	blt.w	2600a <send_mldv2_raw+0x62>
	return 0;
   26120:	2500      	movs	r5, #0
   26122:	e775      	b.n	26010 <send_mldv2_raw+0x68>
		return -ENOMEM;
   26124:	f06f 050b 	mvn.w	r5, #11
   26128:	e772      	b.n	26010 <send_mldv2_raw+0x68>

0002612a <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   2612a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2612c:	460e      	mov	r6, r1
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2612e:	2100      	movs	r1, #0
{
   26130:	4617      	mov	r7, r2
   26132:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   26134:	f7ff feea 	bl	25f0c <net_if_get_ll_reserve>
   26138:	2132      	movs	r1, #50	; 0x32
   2613a:	f7fb f997 	bl	2146c <net_pkt_get_reserve_tx>
				     NET_BUF_TIMEOUT);
	if (!pkt) {
   2613e:	4604      	mov	r4, r0
   26140:	b1d0      	cbz	r0, 26178 <send_mldv2+0x4e>
		return -ENOMEM;
	}

	append(pkt, be16, 1); /* number of records */
   26142:	2101      	movs	r1, #1
   26144:	f7ff fef4 	bl	25f30 <net_pkt_append_be16_timeout.constprop.13>
   26148:	b930      	cbnz	r0, 26158 <send_mldv2+0x2e>
   2614a:	f06f 050b 	mvn.w	r5, #11
	ret = send_mldv2_raw(iface, pkt->frags);

	pkt->frags = NULL;

drop:
	net_pkt_unref(pkt);
   2614e:	4620      	mov	r0, r4
   26150:	f7fb fa65 	bl	2161e <net_pkt_unref>

	return ret;
}
   26154:	4628      	mov	r0, r5
   26156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!create_mldv2(pkt, addr, mode, 1)) {
   26158:	2301      	movs	r3, #1
   2615a:	463a      	mov	r2, r7
   2615c:	4631      	mov	r1, r6
   2615e:	4620      	mov	r0, r4
   26160:	f7ff fef5 	bl	25f4e <create_mldv2>
   26164:	2800      	cmp	r0, #0
   26166:	d0f0      	beq.n	2614a <send_mldv2+0x20>
	ret = send_mldv2_raw(iface, pkt->frags);
   26168:	4628      	mov	r0, r5
   2616a:	6961      	ldr	r1, [r4, #20]
   2616c:	f7ff ff1c 	bl	25fa8 <send_mldv2_raw>
	pkt->frags = NULL;
   26170:	2300      	movs	r3, #0
	ret = send_mldv2_raw(iface, pkt->frags);
   26172:	4605      	mov	r5, r0
	pkt->frags = NULL;
   26174:	6163      	str	r3, [r4, #20]
   26176:	e7ea      	b.n	2614e <send_mldv2+0x24>
		return -ENOMEM;
   26178:	f06f 050b 	mvn.w	r5, #11
   2617c:	e7ea      	b.n	26154 <send_mldv2+0x2a>
	...

00026180 <handle_mld_query>:

#define dbg_addr_recv(pkt_str, src, dst)	\
	dbg_addr("Received", pkt_str, src, dst)

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   26180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u16_t total_len = net_pkt_get_len(pkt);
   26184:	6947      	ldr	r7, [r0, #20]
{
   26186:	b08c      	sub	sp, #48	; 0x30
   26188:	4604      	mov	r4, r0
	size_t bytes = 0;
   2618a:	2500      	movs	r5, #0
	while (buf) {
   2618c:	2f00      	cmp	r7, #0
   2618e:	f040 80c3 	bne.w	26318 <handle_mld_query+0x198>
		      &NET_IPV6_HDR(pkt)->dst);

	net_stats_update_ipv6_mld_recv(net_pkt_iface(pkt));

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
   26192:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   26196:	1d0b      	adds	r3, r1, #4
				net_pkt_ip_hdr_len(pkt) +
   26198:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
	frag = net_frag_get_pos(pkt,
   2619c:	4419      	add	r1, r3
   2619e:	aa06      	add	r2, sp, #24
   261a0:	b289      	uxth	r1, r1
   261a2:	4620      	mov	r0, r4
   261a4:	f7fb fcda 	bl	21b5c <net_frag_get_pos>
				net_pkt_ipv6_ext_len(pkt) +
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   261a8:	ab05      	add	r3, sp, #20
   261aa:	f10d 021a 	add.w	r2, sp, #26
   261ae:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   261b2:	f7fb fbef 	bl	21994 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   261b6:	ae08      	add	r6, sp, #32
	return net_frag_read(frag, offset, pos, len, NULL);
   261b8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   261bc:	9700      	str	r7, [sp, #0]
   261be:	2302      	movs	r3, #2
   261c0:	f10d 021a 	add.w	r2, sp, #26
   261c4:	f7fb fb8c 	bl	218e0 <net_frag_read>
   261c8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   261cc:	9600      	str	r6, [sp, #0]
   261ce:	2310      	movs	r3, #16
   261d0:	f10d 021a 	add.w	r2, sp, #26
   261d4:	f7fb fb84 	bl	218e0 <net_frag_read>
   261d8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   261dc:	9700      	str	r7, [sp, #0]
   261de:	2302      	movs	r3, #2
   261e0:	f10d 021a 	add.w	r2, sp, #26
   261e4:	f7fb fb7c 	bl	218e0 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   261e8:	f10d 0316 	add.w	r3, sp, #22
   261ec:	f10d 021a 	add.w	r2, sp, #26
   261f0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   261f4:	6960      	ldr	r0, [r4, #20]
	u16_t total_len = net_pkt_get_len(pkt);
   261f6:	b2ad      	uxth	r5, r5
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   261f8:	f7fb fbcc 	bl	21994 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   261fc:	b930      	cbnz	r0, 2620c <handle_mld_query+0x8c>
   261fe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   26202:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26206:	429a      	cmp	r2, r3
   26208:	f000 8082 	beq.w	26310 <handle_mld_query+0x190>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   2620c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   26210:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
		sizeof(struct in6_addr) * num_src;
   26214:	011b      	lsls	r3, r3, #4
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   26216:	3344      	adds	r3, #68	; 0x44
   26218:	4413      	add	r3, r2
   2621a:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   2621c:	42ab      	cmp	r3, r5
   2621e:	d807      	bhi.n	26230 <handle_mld_query+0xb0>
   26220:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   26224:	d804      	bhi.n	26230 <handle_mld_query+0xb0>
	return pkt->frags->data;
   26226:	6963      	ldr	r3, [r4, #20]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   26228:	689b      	ldr	r3, [r3, #8]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   2622a:	79db      	ldrb	r3, [r3, #7]
   2622c:	2b01      	cmp	r3, #1
   2622e:	d009      	beq.n	26244 <handle_mld_query+0xc4>
		struct net_icmp_hdr icmp_hdr;

		ret = net_icmpv6_get_hdr(pkt, &icmp_hdr);
   26230:	a907      	add	r1, sp, #28
   26232:	4620      	mov	r0, r4
   26234:	f7fc ff08 	bl	23048 <net_icmpv6_get_hdr>
		if (ret < 0 || icmp_hdr.code != 0) {
   26238:	2800      	cmp	r0, #0
   2623a:	db69      	blt.n	26310 <handle_mld_query+0x190>
   2623c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   26240:	2b00      	cmp	r3, #0
   26242:	d165      	bne.n	26310 <handle_mld_query+0x190>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   26244:	f7fd fdc0 	bl	23dc8 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   26248:	2210      	movs	r2, #16
   2624a:	4601      	mov	r1, r0
   2624c:	4630      	mov	r0, r6
   2624e:	f7df fdf4 	bl	5e3a <memcmp>
   26252:	4605      	mov	r5, r0
   26254:	2800      	cmp	r0, #0
   26256:	d15b      	bne.n	26310 <handle_mld_query+0x190>
		NET_DBG("Only supporting unspecified address query (%s)",
			log_strdup(net_sprint_ipv6_addr(&mcast)));
		goto drop;
	}

	send_mld_report(net_pkt_iface(pkt));
   26258:	f8d4 8020 	ldr.w	r8, [r4, #32]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   2625c:	f8d8 7004 	ldr.w	r7, [r8, #4]
	NET_ASSERT(ipv6);
   26260:	b9a7      	cbnz	r7, 2628c <handle_mld_query+0x10c>
   26262:	4b2f      	ldr	r3, [pc, #188]	; (26320 <handle_mld_query+0x1a0>)
   26264:	681b      	ldr	r3, [r3, #0]
   26266:	0759      	lsls	r1, r3, #29
   26268:	d010      	beq.n	2628c <handle_mld_query+0x10c>
   2626a:	2301      	movs	r3, #1
   2626c:	f04f 0200 	mov.w	r2, #0
   26270:	f363 0202 	bfi	r2, r3, #0, #3
   26274:	492b      	ldr	r1, [pc, #172]	; (26324 <handle_mld_query+0x1a4>)
   26276:	4b2c      	ldr	r3, [pc, #176]	; (26328 <handle_mld_query+0x1a8>)
   26278:	482c      	ldr	r0, [pc, #176]	; (2632c <handle_mld_query+0x1ac>)
   2627a:	1a5b      	subs	r3, r3, r1
   2627c:	f367 02c5 	bfi	r2, r7, #3, #3
   26280:	08db      	lsrs	r3, r3, #3
   26282:	f363 128f 	bfi	r2, r3, #6, #10
   26286:	492a      	ldr	r1, [pc, #168]	; (26330 <handle_mld_query+0x1b0>)
   26288:	f7db fd66 	bl	1d58 <log_1>
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2628c:	2100      	movs	r1, #0
   2628e:	4640      	mov	r0, r8
   26290:	f7ff fe3c 	bl	25f0c <net_if_get_ll_reserve>
   26294:	2132      	movs	r1, #50	; 0x32
   26296:	f7fb f8e9 	bl	2146c <net_pkt_get_reserve_tx>
	if (!pkt) {
   2629a:	4604      	mov	r4, r0
   2629c:	2800      	cmp	r0, #0
   2629e:	d037      	beq.n	26310 <handle_mld_query+0x190>
	append(pkt, u8, 0); /* This will be the record count */
   262a0:	2100      	movs	r1, #0
   262a2:	f7ff fe37 	bl	25f14 <net_pkt_append_u8_timeout.constprop.14>
   262a6:	b380      	cbz	r0, 2630a <handle_mld_query+0x18a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   262a8:	2600      	movs	r6, #0
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   262aa:	f04f 0918 	mov.w	r9, #24
		if (!create_mldv2(pkt, &ipv6->mcast[i].address.in6_addr,
   262ae:	f107 0adc 	add.w	sl, r7, #220	; 0xdc
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   262b2:	fb09 f106 	mul.w	r1, r9, r6
   262b6:	187b      	adds	r3, r7, r1
   262b8:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   262bc:	07da      	lsls	r2, r3, #31
   262be:	d509      	bpl.n	262d4 <handle_mld_query+0x154>
   262c0:	079b      	lsls	r3, r3, #30
   262c2:	d507      	bpl.n	262d4 <handle_mld_query+0x154>
		if (!create_mldv2(pkt, &ipv6->mcast[i].address.in6_addr,
   262c4:	2300      	movs	r3, #0
   262c6:	2202      	movs	r2, #2
   262c8:	4451      	add	r1, sl
   262ca:	4620      	mov	r0, r4
   262cc:	f7ff fe3f 	bl	25f4e <create_mldv2>
   262d0:	b1d8      	cbz	r0, 2630a <handle_mld_query+0x18a>
		count++;
   262d2:	3501      	adds	r5, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   262d4:	3601      	adds	r6, #1
   262d6:	2e05      	cmp	r6, #5
   262d8:	d1eb      	bne.n	262b2 <handle_mld_query+0x132>
	if (count > 0) {
   262da:	2d00      	cmp	r5, #0
   262dc:	dd15      	ble.n	2630a <handle_mld_query+0x18a>
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   262de:	2332      	movs	r3, #50	; 0x32
		if (!net_pkt_write_u8_timeout(pkt, pkt->frags, 0, &pos,
   262e0:	6961      	ldr	r1, [r4, #20]
   262e2:	9302      	str	r3, [sp, #8]
   262e4:	f10d 0313 	add.w	r3, sp, #19
   262e8:	9301      	str	r3, [sp, #4]
   262ea:	2301      	movs	r3, #1
   262ec:	9300      	str	r3, [sp, #0]
   262ee:	2200      	movs	r2, #0
   262f0:	ab07      	add	r3, sp, #28
   262f2:	4620      	mov	r0, r4
   262f4:	f88d 5013 	strb.w	r5, [sp, #19]
   262f8:	f7fb fb68 	bl	219cc <net_pkt_write>
   262fc:	b128      	cbz	r0, 2630a <handle_mld_query+0x18a>
		send_mldv2_raw(iface, pkt->frags);
   262fe:	6961      	ldr	r1, [r4, #20]
   26300:	4640      	mov	r0, r8
   26302:	f7ff fe51 	bl	25fa8 <send_mldv2_raw>
		pkt->frags = NULL;
   26306:	2300      	movs	r3, #0
   26308:	6163      	str	r3, [r4, #20]
	net_pkt_unref(pkt);
   2630a:	4620      	mov	r0, r4
   2630c:	f7fb f987 	bl	2161e <net_pkt_unref>

drop:
	net_stats_update_ipv6_mld_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   26310:	2002      	movs	r0, #2
   26312:	b00c      	add	sp, #48	; 0x30
   26314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   26318:	89bb      	ldrh	r3, [r7, #12]
		buf = buf->frags;
   2631a:	683f      	ldr	r7, [r7, #0]
		bytes += buf->len;
   2631c:	441d      	add	r5, r3
   2631e:	e735      	b.n	2618c <handle_mld_query+0xc>
   26320:	2000d79c 	.word	0x2000d79c
   26324:	0002cff8 	.word	0x0002cff8
   26328:	0002d110 	.word	0x0002d110
   2632c:	00032fca 	.word	0x00032fca
   26330:	00032fba 	.word	0x00032fba

00026334 <net_ipv6_mld_join>:
{
   26334:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26336:	ab02      	add	r3, sp, #8
   26338:	460d      	mov	r5, r1
   2633a:	f843 0d04 	str.w	r0, [r3, #-4]!
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   2633e:	4628      	mov	r0, r5
   26340:	4619      	mov	r1, r3
   26342:	f7fa f9a9 	bl	20698 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   26346:	4604      	mov	r4, r0
   26348:	b1f0      	cbz	r0, 26388 <net_ipv6_mld_join+0x54>
	return addr->is_joined;
   2634a:	7d03      	ldrb	r3, [r0, #20]
   2634c:	079b      	lsls	r3, r3, #30
   2634e:	d418      	bmi.n	26382 <net_ipv6_mld_join+0x4e>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   26350:	2202      	movs	r2, #2
   26352:	4629      	mov	r1, r5
   26354:	9801      	ldr	r0, [sp, #4]
   26356:	f7ff fee8 	bl	2612a <send_mldv2>
	if (ret < 0) {
   2635a:	1e06      	subs	r6, r0, #0
   2635c:	db0e      	blt.n	2637c <net_ipv6_mld_join+0x48>
	addr->is_joined = true;
   2635e:	7d23      	ldrb	r3, [r4, #20]
	net_if_mcast_monitor(iface, addr, true);
   26360:	9801      	ldr	r0, [sp, #4]
   26362:	f043 0302 	orr.w	r3, r3, #2
   26366:	7523      	strb	r3, [r4, #20]
   26368:	2201      	movs	r2, #1
   2636a:	4629      	mov	r1, r5
   2636c:	f7fa f9d0 	bl	20710 <net_if_mcast_monitor>
   26370:	2300      	movs	r3, #0
   26372:	461a      	mov	r2, r3
   26374:	9901      	ldr	r1, [sp, #4]
   26376:	4809      	ldr	r0, [pc, #36]	; (2639c <net_ipv6_mld_join+0x68>)
   26378:	f000 f8c6 	bl	26508 <net_mgmt_event_notify_with_info>
}
   2637c:	4630      	mov	r0, r6
   2637e:	b002      	add	sp, #8
   26380:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
   26382:	f06f 0644 	mvn.w	r6, #68	; 0x44
   26386:	e7f9      	b.n	2637c <net_ipv6_mld_join+0x48>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   26388:	4629      	mov	r1, r5
   2638a:	9801      	ldr	r0, [sp, #4]
   2638c:	f7f9 ffb6 	bl	202fc <net_if_ipv6_maddr_add>
		if (!maddr) {
   26390:	4604      	mov	r4, r0
   26392:	2800      	cmp	r0, #0
   26394:	d1dc      	bne.n	26350 <net_ipv6_mld_join+0x1c>
			return -ENOMEM;
   26396:	f06f 060b 	mvn.w	r6, #11
   2639a:	e7ef      	b.n	2637c <net_ipv6_mld_join+0x48>
   2639c:	f0600007 	.word	0xf0600007

000263a0 <net_ipv6_mld_leave>:
{
   263a0:	b570      	push	{r4, r5, r6, lr}
   263a2:	4604      	mov	r4, r0
   263a4:	460e      	mov	r6, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   263a6:	f7f9 ffe1 	bl	2036c <net_if_ipv6_maddr_rm>
   263aa:	b198      	cbz	r0, 263d4 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   263ac:	2201      	movs	r2, #1
   263ae:	4631      	mov	r1, r6
   263b0:	4620      	mov	r0, r4
   263b2:	f7ff feba 	bl	2612a <send_mldv2>
	if (ret < 0) {
   263b6:	1e05      	subs	r5, r0, #0
   263b8:	db0a      	blt.n	263d0 <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   263ba:	2200      	movs	r2, #0
   263bc:	4631      	mov	r1, r6
   263be:	4620      	mov	r0, r4
   263c0:	f7fa f9a6 	bl	20710 <net_if_mcast_monitor>
   263c4:	2300      	movs	r3, #0
   263c6:	461a      	mov	r2, r3
   263c8:	4621      	mov	r1, r4
   263ca:	4804      	ldr	r0, [pc, #16]	; (263dc <net_ipv6_mld_leave+0x3c>)
   263cc:	f000 f89c 	bl	26508 <net_mgmt_event_notify_with_info>
}
   263d0:	4628      	mov	r0, r5
   263d2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   263d4:	f06f 0515 	mvn.w	r5, #21
   263d8:	e7fa      	b.n	263d0 <net_ipv6_mld_leave+0x30>
   263da:	bf00      	nop
   263dc:	f0600008 	.word	0xf0600008

000263e0 <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
   263e0:	4801      	ldr	r0, [pc, #4]	; (263e8 <net_ipv6_mld_init+0x8>)
   263e2:	f7fc bdbd 	b.w	22f60 <net_icmpv6_register_handler>
   263e6:	bf00      	nop
   263e8:	2000d400 	.word	0x2000d400

000263ec <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   263ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (out_event < 0 || !events[out_event].event) {
   263f0:	4f3f      	ldr	r7, [pc, #252]	; (264f0 <mgmt_thread+0x104>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   263f2:	4840      	ldr	r0, [pc, #256]	; (264f4 <mgmt_thread+0x108>)
   263f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   263f8:	f005 ffe8 	bl	2c3cc <_impl_k_sem_take>
   263fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26400:	483d      	ldr	r0, [pc, #244]	; (264f8 <mgmt_thread+0x10c>)
   26402:	f005 ffe3 	bl	2c3cc <_impl_k_sem_take>
   26406:	4b3d      	ldr	r3, [pc, #244]	; (264fc <mgmt_thread+0x110>)
   26408:	f9b3 5000 	ldrsh.w	r5, [r3]
   2640c:	2d00      	cmp	r5, #0
   2640e:	db21      	blt.n	26454 <mgmt_thread+0x68>
   26410:	f857 2035 	ldr.w	r2, [r7, r5, lsl #3]
   26414:	b1f2      	cbz	r2, 26454 <mgmt_thread+0x68>
	if (o_idx == in_event) {
   26416:	493a      	ldr	r1, [pc, #232]	; (26500 <mgmt_thread+0x114>)
   26418:	f9b1 0000 	ldrsh.w	r0, [r1]
	out_event++;
   2641c:	1c6a      	adds	r2, r5, #1
   2641e:	b212      	sxth	r2, r2
	if (o_idx == in_event) {
   26420:	42a8      	cmp	r0, r5
	out_event++;
   26422:	801a      	strh	r2, [r3, #0]
	if (o_idx == in_event) {
   26424:	d112      	bne.n	2644c <mgmt_thread+0x60>
		in_event = -1;
   26426:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2642a:	800a      	strh	r2, [r1, #0]
		out_event = 0;
   2642c:	801a      	strh	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2642e:	4e35      	ldr	r6, [pc, #212]	; (26504 <mgmt_thread+0x118>)
   26430:	6834      	ldr	r4, [r6, #0]
   26432:	b9cc      	cbnz	r4, 26468 <mgmt_thread+0x7c>
	mgmt_event->event = 0;
   26434:	2300      	movs	r3, #0
   26436:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
	mgmt_event->iface = NULL;
   2643a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2643e:	482e      	ldr	r0, [pc, #184]	; (264f8 <mgmt_thread+0x10c>)
   26440:	606b      	str	r3, [r5, #4]
   26442:	f005 ff9c 	bl	2c37e <_impl_k_sem_give>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   26446:	f005 fefb 	bl	2c240 <_impl_k_yield>
   2644a:	e7d2      	b.n	263f2 <mgmt_thread+0x6>
	} else if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2644c:	2a02      	cmp	r2, #2
   2644e:	d1ee      	bne.n	2642e <mgmt_thread+0x42>
		out_event = 0;
   26450:	2200      	movs	r2, #0
   26452:	e7eb      	b.n	2642c <mgmt_thread+0x40>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   26454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26458:	2100      	movs	r1, #0
   2645a:	4826      	ldr	r0, [pc, #152]	; (264f4 <mgmt_thread+0x108>)
   2645c:	f005 ff86 	bl	2c36c <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   26460:	4825      	ldr	r0, [pc, #148]	; (264f8 <mgmt_thread+0x10c>)
   26462:	f005 ff8c 	bl	2c37e <_impl_k_sem_give>
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);
			k_sem_give(&net_mgmt_lock);

			continue;
   26466:	e7c4      	b.n	263f2 <mgmt_thread+0x6>
	return node->next;
   26468:	f04f 0800 	mov.w	r8, #0
   2646c:	f8d4 9000 	ldr.w	r9, [r4]
   26470:	eb07 0ac5 	add.w	sl, r7, r5, lsl #3
	parent->next = child;
   26474:	46c3      	mov	fp, r8
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   26476:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   2647a:	68a0      	ldr	r0, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   2647c:	ea81 0300 	eor.w	r3, r1, r0
   26480:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
   26484:	d121      	bne.n	264ca <mgmt_thread+0xde>
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   26486:	f3c3 430a 	ubfx	r3, r3, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   2648a:	b9f3      	cbnz	r3, 264ca <mgmt_thread+0xde>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2648c:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   2648e:	b11b      	cbz	r3, 26498 <mgmt_thread+0xac>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   26490:	b282      	uxth	r2, r0
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   26492:	b10a      	cbz	r2, 26498 <mgmt_thread+0xac>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   26494:	4218      	tst	r0, r3
   26496:	d018      	beq.n	264ca <mgmt_thread+0xde>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   26498:	0100      	lsls	r0, r0, #4
   2649a:	6863      	ldr	r3, [r4, #4]
   2649c:	f8da 2004 	ldr.w	r2, [sl, #4]
   264a0:	d522      	bpl.n	264e8 <mgmt_thread+0xfc>
			if (sync_data->iface &&
   264a2:	6998      	ldr	r0, [r3, #24]
   264a4:	b108      	cbz	r0, 264aa <mgmt_thread+0xbe>
   264a6:	4282      	cmp	r2, r0
   264a8:	d10f      	bne.n	264ca <mgmt_thread+0xde>
			cb->raised_event = mgmt_event->event;
   264aa:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
   264ac:	619a      	str	r2, [r3, #24]
   264ae:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   264b0:	f1b8 0f00 	cmp.w	r8, #0
   264b4:	d110      	bne.n	264d8 <mgmt_thread+0xec>
   264b6:	6871      	ldr	r1, [r6, #4]
	list->head = node;
   264b8:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   264ba:	428c      	cmp	r4, r1
   264bc:	d100      	bne.n	264c0 <mgmt_thread+0xd4>
	list->tail = node;
   264be:	6072      	str	r2, [r6, #4]
	parent->next = child;
   264c0:	f8c4 b000 	str.w	fp, [r4]
   264c4:	4618      	mov	r0, r3
   264c6:	f005 ff5a 	bl	2c37e <_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   264ca:	f1b9 0f00 	cmp.w	r9, #0
   264ce:	d0b1      	beq.n	26434 <mgmt_thread+0x48>
	return node->next;
   264d0:	464c      	mov	r4, r9
   264d2:	f8d9 9000 	ldr.w	r9, [r9]
   264d6:	e7ce      	b.n	26476 <mgmt_thread+0x8a>
	parent->next = child;
   264d8:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   264dc:	6872      	ldr	r2, [r6, #4]
   264de:	4294      	cmp	r4, r2
	list->tail = node;
   264e0:	bf08      	it	eq
   264e2:	f8c6 8004 	streq.w	r8, [r6, #4]
   264e6:	e7eb      	b.n	264c0 <mgmt_thread+0xd4>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   264e8:	4620      	mov	r0, r4
   264ea:	4798      	blx	r3
			prev = &cb->node;
   264ec:	46a0      	mov	r8, r4
   264ee:	e7ec      	b.n	264ca <mgmt_thread+0xde>
   264f0:	200026f4 	.word	0x200026f4
   264f4:	2000d874 	.word	0x2000d874
   264f8:	2000d85c 	.word	0x2000d85c
   264fc:	20002778 	.word	0x20002778
   26500:	20002708 	.word	0x20002708
   26504:	200026ec 	.word	0x200026ec

00026508 <net_mgmt_event_notify_with_info>:
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
   26508:	4b22      	ldr	r3, [pc, #136]	; (26594 <net_mgmt_event_notify_with_info+0x8c>)
   2650a:	681b      	ldr	r3, [r3, #0]
   2650c:	ea6f 7213 	mvn.w	r2, r3, lsr #28
   26510:	f002 0203 	and.w	r2, r2, #3
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   26514:	ea12 7210 	ands.w	r2, r2, r0, lsr #28
	k_sem_give(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
   26518:	b570      	push	{r4, r5, r6, lr}
   2651a:	4604      	mov	r4, r0
   2651c:	460d      	mov	r5, r1
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   2651e:	d137      	bne.n	26590 <net_mgmt_event_notify_with_info+0x88>
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
   26520:	ea6f 4213 	mvn.w	r2, r3, lsr #16
   26524:	f3c2 020a 	ubfx	r2, r2, #0, #11
		 NET_MGMT_GET_LAYER(mgmt_event)) &&
   26528:	ea12 4210 	ands.w	r2, r2, r0, lsr #16
   2652c:	d130      	bne.n	26590 <net_mgmt_event_notify_with_info+0x88>
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
   2652e:	43db      	mvns	r3, r3
   26530:	b29b      	uxth	r3, r3
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
   26532:	4203      	tst	r3, r0
   26534:	d12c      	bne.n	26590 <net_mgmt_event_notify_with_info+0x88>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   26536:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2653a:	4817      	ldr	r0, [pc, #92]	; (26598 <net_mgmt_event_notify_with_info+0x90>)
	events[i_idx].event = mgmt_event;
   2653c:	4e17      	ldr	r6, [pc, #92]	; (2659c <net_mgmt_event_notify_with_info+0x94>)
   2653e:	f005 ff45 	bl	2c3cc <_impl_k_sem_take>
	i_idx = in_event + 1;
   26542:	4917      	ldr	r1, [pc, #92]	; (265a0 <net_mgmt_event_notify_with_info+0x98>)
	if (i_idx == out_event) {
   26544:	4817      	ldr	r0, [pc, #92]	; (265a4 <net_mgmt_event_notify_with_info+0x9c>)
	i_idx = in_event + 1;
   26546:	880b      	ldrh	r3, [r1, #0]
   26548:	3301      	adds	r3, #1
   2654a:	b21b      	sxth	r3, r3
		i_idx = 0;
   2654c:	2b02      	cmp	r3, #2
   2654e:	bf08      	it	eq
   26550:	2300      	moveq	r3, #0
	events[i_idx].iface = iface;
   26552:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
	events[i_idx].event = mgmt_event;
   26556:	f846 4033 	str.w	r4, [r6, r3, lsl #3]
	events[i_idx].iface = iface;
   2655a:	6055      	str	r5, [r2, #4]
	if (i_idx == out_event) {
   2655c:	f9b0 2000 	ldrsh.w	r2, [r0]
   26560:	4293      	cmp	r3, r2
   26562:	d111      	bne.n	26588 <net_mgmt_event_notify_with_info+0x80>
		u16_t o_idx = out_event + 1;
   26564:	1c5a      	adds	r2, r3, #1
   26566:	b292      	uxth	r2, r2
			o_idx = 0;
   26568:	2a02      	cmp	r2, #2
   2656a:	bf08      	it	eq
   2656c:	2200      	moveq	r2, #0
		if (events[o_idx].event) {
   2656e:	f856 4032 	ldr.w	r4, [r6, r2, lsl #3]
   26572:	b104      	cbz	r4, 26576 <net_mgmt_event_notify_with_info+0x6e>
			out_event = o_idx;
   26574:	8002      	strh	r2, [r0, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   26576:	4808      	ldr	r0, [pc, #32]	; (26598 <net_mgmt_event_notify_with_info+0x90>)
	in_event = i_idx;
   26578:	800b      	strh	r3, [r1, #0]
   2657a:	f005 ff00 	bl	2c37e <_impl_k_sem_give>
   2657e:	480a      	ldr	r0, [pc, #40]	; (265a8 <net_mgmt_event_notify_with_info+0xa0>)
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
   26580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26584:	f005 befb 	b.w	2c37e <_impl_k_sem_give>
	} else if (out_event < 0) {
   26588:	2a00      	cmp	r2, #0
		out_event = i_idx;
   2658a:	bfb8      	it	lt
   2658c:	8003      	strhlt	r3, [r0, #0]
   2658e:	e7f2      	b.n	26576 <net_mgmt_event_notify_with_info+0x6e>
}
   26590:	bd70      	pop	{r4, r5, r6, pc}
   26592:	bf00      	nop
   26594:	20002704 	.word	0x20002704
   26598:	2000d85c 	.word	0x2000d85c
   2659c:	200026f4 	.word	0x200026f4
   265a0:	20002708 	.word	0x20002708
   265a4:	20002778 	.word	0x20002778
   265a8:	2000d874 	.word	0x2000d874

000265ac <net_mgmt_event_init>:
	list->head = NULL;
   265ac:	4b14      	ldr	r3, [pc, #80]	; (26600 <net_mgmt_event_init+0x54>)
void net_mgmt_event_init(void)
{
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;

	in_event = -1;
   265ae:	4a15      	ldr	r2, [pc, #84]	; (26604 <net_mgmt_event_init+0x58>)
	out_event = -1;

	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
   265b0:	4815      	ldr	r0, [pc, #84]	; (26608 <net_mgmt_event_init+0x5c>)
{
   265b2:	b530      	push	{r4, r5, lr}
   265b4:	2400      	movs	r4, #0
	list->tail = NULL;
   265b6:	e9c3 4400 	strd	r4, r4, [r3]
	global_event_mask = 0;
   265ba:	4b14      	ldr	r3, [pc, #80]	; (2660c <net_mgmt_event_init+0x60>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   265bc:	4d14      	ldr	r5, [pc, #80]	; (26610 <net_mgmt_event_init+0x64>)
   265be:	601c      	str	r4, [r3, #0]
	in_event = -1;
   265c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   265c4:	8013      	strh	r3, [r2, #0]
	out_event = -1;
   265c6:	4a13      	ldr	r2, [pc, #76]	; (26614 <net_mgmt_event_init+0x68>)
{
   265c8:	b087      	sub	sp, #28
	out_event = -1;
   265ca:	8013      	strh	r3, [r2, #0]
	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
   265cc:	4621      	mov	r1, r4
   265ce:	2210      	movs	r2, #16
   265d0:	f7df fc87 	bl	5ee2 <memset>
   265d4:	f06f 0308 	mvn.w	r3, #8
   265d8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   265dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
   265e0:	e9cd 4400 	strd	r4, r4, [sp]
   265e4:	4b0c      	ldr	r3, [pc, #48]	; (26618 <net_mgmt_event_init+0x6c>)
   265e6:	490d      	ldr	r1, [pc, #52]	; (2661c <net_mgmt_event_init+0x70>)
   265e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   265ec:	4628      	mov	r0, r5
   265ee:	f005 ff97 	bl	2c520 <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   265f2:	490b      	ldr	r1, [pc, #44]	; (26620 <net_mgmt_event_init+0x74>)
   265f4:	4628      	mov	r0, r5
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   265f6:	b007      	add	sp, #28
   265f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   265fc:	f005 bf5e 	b.w	2c4bc <_impl_k_thread_name_set>
   26600:	200026ec 	.word	0x200026ec
   26604:	20002708 	.word	0x20002708
   26608:	200026f4 	.word	0x200026f4
   2660c:	20002704 	.word	0x20002704
   26610:	2000270c 	.word	0x2000270c
   26614:	20002778 	.word	0x20002778
   26618:	000263ed 	.word	0x000263ed
   2661c:	2000b440 	.word	0x2000b440
   26620:	00032ff3 	.word	0x00032ff3

00026624 <sys_slist_find_and_remove.constprop.10>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26624:	b510      	push	{r4, lr}
   26626:	4a0e      	ldr	r2, [pc, #56]	; (26660 <sys_slist_find_and_remove.constprop.10+0x3c>)
   26628:	6813      	ldr	r3, [r2, #0]
   2662a:	2100      	movs	r1, #0
   2662c:	b90b      	cbnz	r3, 26632 <sys_slist_find_and_remove.constprop.10+0xe>
   2662e:	4618      	mov	r0, r3
   26630:	e00b      	b.n	2664a <sys_slist_find_and_remove.constprop.10+0x26>
   26632:	4283      	cmp	r3, r0
   26634:	681c      	ldr	r4, [r3, #0]
   26636:	d10f      	bne.n	26658 <sys_slist_find_and_remove.constprop.10+0x34>
Z_GENLIST_REMOVE(slist, snode)
   26638:	b941      	cbnz	r1, 2664c <sys_slist_find_and_remove.constprop.10+0x28>
   2663a:	6851      	ldr	r1, [r2, #4]
	list->head = node;
   2663c:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2663e:	428b      	cmp	r3, r1
   26640:	d100      	bne.n	26644 <sys_slist_find_and_remove.constprop.10+0x20>
	list->tail = node;
   26642:	6054      	str	r4, [r2, #4]
	parent->next = child;
   26644:	2200      	movs	r2, #0
   26646:	601a      	str	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26648:	2001      	movs	r0, #1
   2664a:	bd10      	pop	{r4, pc}
	parent->next = child;
   2664c:	600c      	str	r4, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2664e:	6850      	ldr	r0, [r2, #4]
   26650:	4283      	cmp	r3, r0
	list->tail = node;
   26652:	bf08      	it	eq
   26654:	6051      	streq	r1, [r2, #4]
   26656:	e7f5      	b.n	26644 <sys_slist_find_and_remove.constprop.10+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26658:	4619      	mov	r1, r3
   2665a:	4623      	mov	r3, r4
   2665c:	e7e6      	b.n	2662c <sys_slist_find_and_remove.constprop.10+0x8>
   2665e:	bf00      	nop
   26660:	2000277c 	.word	0x2000277c

00026664 <net_route_entry_remove>:
   26664:	4770      	bx	lr
	...

00026668 <net_route_get_nbr>:
{
	return (struct net_route_entry *)nbr->data;
}

struct net_nbr *net_route_get_nbr(struct net_route_entry *route)
{
   26668:	b538      	push	{r3, r4, r5, lr}
	int i;

	NET_ASSERT(route);
   2666a:	4604      	mov	r4, r0
   2666c:	b9a0      	cbnz	r0, 26698 <net_route_get_nbr+0x30>
   2666e:	4b12      	ldr	r3, [pc, #72]	; (266b8 <net_route_get_nbr+0x50>)
   26670:	681b      	ldr	r3, [r3, #0]
   26672:	075b      	lsls	r3, r3, #29
   26674:	d010      	beq.n	26698 <net_route_get_nbr+0x30>
   26676:	2301      	movs	r3, #1
   26678:	f04f 0200 	mov.w	r2, #0
   2667c:	f363 0202 	bfi	r2, r3, #0, #3
   26680:	490e      	ldr	r1, [pc, #56]	; (266bc <net_route_get_nbr+0x54>)
   26682:	4b0f      	ldr	r3, [pc, #60]	; (266c0 <net_route_get_nbr+0x58>)
   26684:	1a5b      	subs	r3, r3, r1
   26686:	f360 02c5 	bfi	r2, r0, #3, #3
   2668a:	08db      	lsrs	r3, r3, #3
   2668c:	f363 128f 	bfi	r2, r3, #6, #10
   26690:	490c      	ldr	r1, [pc, #48]	; (266c4 <net_route_get_nbr+0x5c>)
   26692:	480d      	ldr	r0, [pc, #52]	; (266c8 <net_route_get_nbr+0x60>)
   26694:	f7db fb60 	bl	1d58 <log_1>

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   26698:	4a0c      	ldr	r2, [pc, #48]	; (266cc <net_route_get_nbr+0x64>)
{
   2669a:	2300      	movs	r3, #0
   2669c:	2138      	movs	r1, #56	; 0x38
   2669e:	fb01 f003 	mul.w	r0, r1, r3
		if (!nbr->ref) {
   266a2:	5c85      	ldrb	r5, [r0, r2]
   266a4:	b11d      	cbz	r5, 266ae <net_route_get_nbr+0x46>
   266a6:	4410      	add	r0, r2
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   266a8:	68c5      	ldr	r5, [r0, #12]
   266aa:	42a5      	cmp	r5, r4
   266ac:	d003      	beq.n	266b6 <net_route_get_nbr+0x4e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   266ae:	3301      	adds	r3, #1
   266b0:	2b06      	cmp	r3, #6
   266b2:	d1f4      	bne.n	2669e <net_route_get_nbr+0x36>

			return nbr;
		}
	}

	return NULL;
   266b4:	2000      	movs	r0, #0
}
   266b6:	bd38      	pop	{r3, r4, r5, pc}
   266b8:	2000d7b4 	.word	0x2000d7b4
   266bc:	0002cff8 	.word	0x0002cff8
   266c0:	0002d140 	.word	0x0002d140
   266c4:	00033033 	.word	0x00033033
   266c8:	0003307d 	.word	0x0003307d
   266cc:	2000d40c 	.word	0x2000d40c

000266d0 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   266d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   266d4:	2600      	movs	r6, #0
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   266d6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 26780 <net_route_lookup+0xb0>
{
   266da:	9000      	str	r0, [sp, #0]
   266dc:	460b      	mov	r3, r1
	u8_t longest_match = 0;
   266de:	46b0      	mov	r8, r6
	struct net_route_entry *route, *found = NULL;
   266e0:	4635      	mov	r5, r6
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   266e2:	f018 0f80 	tst.w	r8, #128	; 0x80
   266e6:	d13a      	bne.n	2675e <net_route_lookup+0x8e>
   266e8:	2238      	movs	r2, #56	; 0x38
   266ea:	4372      	muls	r2, r6
		if (!nbr->ref) {
   266ec:	f812 1009 	ldrb.w	r1, [r2, r9]
   266f0:	b391      	cbz	r1, 26758 <net_route_lookup+0x88>
			continue;
		}

		if (iface && nbr->iface != iface) {
   266f2:	9900      	ldr	r1, [sp, #0]
   266f4:	b129      	cbz	r1, 26702 <net_route_lookup+0x32>
   266f6:	eb09 0102 	add.w	r1, r9, r2
   266fa:	9800      	ldr	r0, [sp, #0]
   266fc:	6889      	ldr	r1, [r1, #8]
   266fe:	4281      	cmp	r1, r0
   26700:	d12a      	bne.n	26758 <net_route_lookup+0x88>
			continue;
		}

		route = net_route_data(nbr);
   26702:	444a      	add	r2, r9
   26704:	68d7      	ldr	r7, [r2, #12]

		if (route->prefix_len >= longest_match &&
   26706:	f897 4020 	ldrb.w	r4, [r7, #32]
   2670a:	4544      	cmp	r4, r8
   2670c:	d324      	bcc.n	26758 <net_route_lookup+0x88>
	if (length > 128) {
   2670e:	2c80      	cmp	r4, #128	; 0x80
   26710:	d822      	bhi.n	26758 <net_route_lookup+0x88>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   26712:	f107 0b10 	add.w	fp, r7, #16
	if (memcmp(addr1, addr2, bytes)) {
   26716:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
   2671a:	4618      	mov	r0, r3
   2671c:	4652      	mov	r2, sl
   2671e:	4659      	mov	r1, fp
   26720:	9301      	str	r3, [sp, #4]
   26722:	f7df fb8a 	bl	5e3a <memcmp>
   26726:	9b01      	ldr	r3, [sp, #4]
   26728:	b9b0      	cbnz	r0, 26758 <net_route_lookup+0x88>
	u8_t bits = 128 - length;
   2672a:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   2672e:	f014 0407 	ands.w	r4, r4, #7
   26732:	d00e      	beq.n	26752 <net_route_lookup+0x82>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   26734:	f81b 200a 	ldrb.w	r2, [fp, sl]
   26738:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   2673c:	f1c4 0008 	rsb	r0, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   26740:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   26742:	22ff      	movs	r2, #255	; 0xff
   26744:	4082      	lsls	r2, r0
   26746:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
   2674a:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   2674e:	4221      	tst	r1, r4
   26750:	d102      	bne.n	26758 <net_route_lookup+0x88>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   26752:	f897 8020 	ldrb.w	r8, [r7, #32]
   26756:	463d      	mov	r5, r7
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   26758:	3601      	adds	r6, #1
   2675a:	2e06      	cmp	r6, #6
   2675c:	d1c1      	bne.n	266e2 <net_route_lookup+0x12>
		}
	}

	if (found) {
   2675e:	b14d      	cbz	r5, 26774 <net_route_lookup+0xa4>
	sys_slist_find_and_remove(&routes, &route->node);
   26760:	4628      	mov	r0, r5
   26762:	f7ff ff5f 	bl	26624 <sys_slist_find_and_remove.constprop.10>
Z_GENLIST_PREPEND(slist, snode)
   26766:	4b05      	ldr	r3, [pc, #20]	; (2677c <net_route_lookup+0xac>)
   26768:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   2676a:	602a      	str	r2, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2676c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2676e:	601d      	str	r5, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   26770:	b902      	cbnz	r2, 26774 <net_route_lookup+0xa4>
	list->tail = node;
   26772:	605d      	str	r5, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   26774:	4628      	mov	r0, r5
   26776:	b003      	add	sp, #12
   26778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2677c:	2000277c 	.word	0x2000277c
   26780:	2000d40c 	.word	0x2000d40c

00026784 <net_route_del>:

	return route;
}

int net_route_del(struct net_route_entry *route)
{
   26784:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
   26786:	4604      	mov	r4, r0
   26788:	b1d0      	cbz	r0, 267c0 <net_route_del+0x3c>
   2678a:	2300      	movs	r3, #0
   2678c:	68c1      	ldr	r1, [r0, #12]
   2678e:	480f      	ldr	r0, [pc, #60]	; (267cc <net_route_del+0x48>)
   26790:	461a      	mov	r2, r3
   26792:	f7ff feb9 	bl	26508 <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	sys_slist_find_and_remove(&routes, &route->node);
   26796:	4620      	mov	r0, r4
   26798:	f7ff ff44 	bl	26624 <sys_slist_find_and_remove.constprop.10>

	nbr = net_route_get_nbr(route);
   2679c:	4620      	mov	r0, r4
   2679e:	f7ff ff63 	bl	26668 <net_route_get_nbr>
	if (!nbr) {
   267a2:	4605      	mov	r5, r0
   267a4:	b178      	cbz	r0, 267c6 <net_route_del+0x42>
		return -ENOENT;
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   267a6:	6864      	ldr	r4, [r4, #4]
   267a8:	b12c      	cbz	r4, 267b6 <net_route_del+0x32>
		if (!nexthop_route->nbr) {
   267aa:	6860      	ldr	r0, [r4, #4]
   267ac:	b108      	cbz	r0, 267b2 <net_route_del+0x2e>
	net_nbr_unref(nbr);
   267ae:	f7fd f967 	bl	23a80 <net_nbr_unref>
	return node->next;
   267b2:	6824      	ldr	r4, [r4, #0]
   267b4:	e7f8      	b.n	267a8 <net_route_del+0x24>
	net_nbr_unref(nbr);
   267b6:	4628      	mov	r0, r5
   267b8:	f7fd f962 	bl	23a80 <net_nbr_unref>
		nbr_nexthop_put(nexthop_route->nbr);
	}

	nbr_free(nbr);

	return 0;
   267bc:	2000      	movs	r0, #0
}
   267be:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   267c0:	f06f 0015 	mvn.w	r0, #21
   267c4:	e7fb      	b.n	267be <net_route_del+0x3a>
		return -ENOENT;
   267c6:	f06f 0001 	mvn.w	r0, #1
   267ca:	e7f8      	b.n	267be <net_route_del+0x3a>
   267cc:	f060000c 	.word	0xf060000c

000267d0 <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   267d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   267d4:	460d      	mov	r5, r1
	int count = 0, status = 0;
	struct net_nbr *nbr_nexthop;
	struct net_route_nexthop *nexthop_route;
	int i, ret;

	NET_ASSERT(iface);
   267d6:	4604      	mov	r4, r0
   267d8:	b9a0      	cbnz	r0, 26804 <net_route_del_by_nexthop+0x34>
   267da:	4b28      	ldr	r3, [pc, #160]	; (2687c <net_route_del_by_nexthop+0xac>)
   267dc:	681b      	ldr	r3, [r3, #0]
   267de:	075a      	lsls	r2, r3, #29
   267e0:	d026      	beq.n	26830 <net_route_del_by_nexthop+0x60>
   267e2:	2301      	movs	r3, #1
   267e4:	f04f 0200 	mov.w	r2, #0
   267e8:	f363 0202 	bfi	r2, r3, #0, #3
   267ec:	4924      	ldr	r1, [pc, #144]	; (26880 <net_route_del_by_nexthop+0xb0>)
   267ee:	4b25      	ldr	r3, [pc, #148]	; (26884 <net_route_del_by_nexthop+0xb4>)
   267f0:	1a5b      	subs	r3, r3, r1
   267f2:	f360 02c5 	bfi	r2, r0, #3, #3
   267f6:	08db      	lsrs	r3, r3, #3
   267f8:	f363 128f 	bfi	r2, r3, #6, #10
   267fc:	4922      	ldr	r1, [pc, #136]	; (26888 <net_route_del_by_nexthop+0xb8>)
   267fe:	4823      	ldr	r0, [pc, #140]	; (2688c <net_route_del_by_nexthop+0xbc>)
   26800:	f7db faaa 	bl	1d58 <log_1>
	NET_ASSERT(nexthop);
   26804:	b9a5      	cbnz	r5, 26830 <net_route_del_by_nexthop+0x60>
   26806:	4b1d      	ldr	r3, [pc, #116]	; (2687c <net_route_del_by_nexthop+0xac>)
   26808:	681b      	ldr	r3, [r3, #0]
   2680a:	075b      	lsls	r3, r3, #29
   2680c:	d010      	beq.n	26830 <net_route_del_by_nexthop+0x60>
   2680e:	2301      	movs	r3, #1
   26810:	f04f 0200 	mov.w	r2, #0
   26814:	f363 0202 	bfi	r2, r3, #0, #3
   26818:	4919      	ldr	r1, [pc, #100]	; (26880 <net_route_del_by_nexthop+0xb0>)
   2681a:	4b1a      	ldr	r3, [pc, #104]	; (26884 <net_route_del_by_nexthop+0xb4>)
   2681c:	481c      	ldr	r0, [pc, #112]	; (26890 <net_route_del_by_nexthop+0xc0>)
   2681e:	1a5b      	subs	r3, r3, r1
   26820:	f365 02c5 	bfi	r2, r5, #3, #3
   26824:	08db      	lsrs	r3, r3, #3
   26826:	f363 128f 	bfi	r2, r3, #6, #10
   2682a:	4917      	ldr	r1, [pc, #92]	; (26888 <net_route_del_by_nexthop+0xb8>)
   2682c:	f7db fa94 	bl	1d58 <log_1>

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   26830:	4629      	mov	r1, r5
   26832:	4620      	mov	r0, r4
   26834:	f7fd ffa4 	bl	24780 <net_ipv6_nbr_lookup>
   26838:	2400      	movs	r4, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);
   2683a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 26894 <net_route_del_by_nexthop+0xc4>
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   2683e:	4607      	mov	r7, r0
	int count = 0, status = 0;
   26840:	4626      	mov	r6, r4
   26842:	4625      	mov	r5, r4
		struct net_route_entry *route = net_route_data(nbr);
   26844:	eb08 0304 	add.w	r3, r8, r4
   26848:	68d8      	ldr	r0, [r3, #12]

		if (!route) {
   2684a:	b140      	cbz	r0, 2685e <net_route_del_by_nexthop+0x8e>
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   2684c:	6843      	ldr	r3, [r0, #4]
   2684e:	b133      	cbz	r3, 2685e <net_route_del_by_nexthop+0x8e>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   26850:	685a      	ldr	r2, [r3, #4]
   26852:	42ba      	cmp	r2, r7
   26854:	d10d      	bne.n	26872 <net_route_del_by_nexthop+0xa2>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   26856:	f7ff ff95 	bl	26784 <net_route_del>
				if (!ret) {
   2685a:	b960      	cbnz	r0, 26876 <net_route_del_by_nexthop+0xa6>
					count++;
   2685c:	3501      	adds	r5, #1
   2685e:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   26860:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
   26864:	d1ee      	bne.n	26844 <net_route_del_by_nexthop+0x74>
				break;
			}
		}
	}

	if (count) {
   26866:	b90d      	cbnz	r5, 2686c <net_route_del_by_nexthop+0x9c>
   26868:	ea06 75e6 	and.w	r5, r6, r6, asr #31
	} else if (status < 0) {
		return status;
	}

	return 0;
}
   2686c:	4628      	mov	r0, r5
   2686e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26872:	681b      	ldr	r3, [r3, #0]
   26874:	e7eb      	b.n	2684e <net_route_del_by_nexthop+0x7e>
   26876:	4606      	mov	r6, r0
   26878:	e7f1      	b.n	2685e <net_route_del_by_nexthop+0x8e>
   2687a:	bf00      	nop
   2687c:	2000d7b4 	.word	0x2000d7b4
   26880:	0002cff8 	.word	0x0002cff8
   26884:	0002d140 	.word	0x0002d140
   26888:	00033045 	.word	0x00033045
   2688c:	0003231f 	.word	0x0003231f
   26890:	0003305e 	.word	0x0003305e
   26894:	2000d40c 	.word	0x2000d40c

00026898 <net_route_get_nexthop>:

	return status;
}

struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
   26898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   2689c:	2800      	cmp	r0, #0
   2689e:	d03d      	beq.n	2691c <net_route_get_nexthop+0x84>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   268a0:	6844      	ldr	r4, [r0, #4]
   268a2:	2c00      	cmp	r4, #0
   268a4:	d03a      	beq.n	2691c <net_route_get_nexthop+0x84>
   268a6:	4d1e      	ldr	r5, [pc, #120]	; (26920 <net_route_get_nexthop+0x88>)
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);
   268a8:	4b1e      	ldr	r3, [pc, #120]	; (26924 <net_route_get_nexthop+0x8c>)
   268aa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2692c <net_route_get_nexthop+0x94>
   268ae:	f8df 9080 	ldr.w	r9, [pc, #128]	; 26930 <net_route_get_nexthop+0x98>
   268b2:	f8df a080 	ldr.w	sl, [pc, #128]	; 26934 <net_route_get_nexthop+0x9c>
   268b6:	1aed      	subs	r5, r5, r3
   268b8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   268bc:	6863      	ldr	r3, [r4, #4]
   268be:	785b      	ldrb	r3, [r3, #1]
   268c0:	2bff      	cmp	r3, #255	; 0xff
   268c2:	d10f      	bne.n	268e4 <net_route_get_nexthop+0x4c>
   268c4:	f8d8 3000 	ldr.w	r3, [r8]
   268c8:	075a      	lsls	r2, r3, #29
   268ca:	d00b      	beq.n	268e4 <net_route_get_nexthop+0x4c>
   268cc:	2301      	movs	r3, #1
   268ce:	f363 0602 	bfi	r6, r3, #0, #3
   268d2:	f36f 06c5 	bfc	r6, #3, #3
   268d6:	f365 168f 	bfi	r6, r5, #6, #10
   268da:	4632      	mov	r2, r6
   268dc:	4649      	mov	r1, r9
   268de:	4650      	mov	r0, sl
   268e0:	f7db fa3a 	bl	1d58 <log_1>

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   268e4:	6863      	ldr	r3, [r4, #4]
   268e6:	785a      	ldrb	r2, [r3, #1]
   268e8:	2aff      	cmp	r2, #255	; 0xff
   268ea:	d014      	beq.n	26916 <net_route_get_nexthop+0x7e>
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
   268ec:	68d8      	ldr	r0, [r3, #12]
		if (ipv6_nbr_data) {
   268ee:	b110      	cbz	r0, 268f6 <net_route_get_nexthop+0x5e>
			addr = &ipv6_nbr_data->addr;
   268f0:	3004      	adds	r0, #4
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   268f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			NET_ERR("could not get neighbor data from next hop");
   268f6:	f8d8 3000 	ldr.w	r3, [r8]
   268fa:	075b      	lsls	r3, r3, #29
   268fc:	d00b      	beq.n	26916 <net_route_get_nexthop+0x7e>
   268fe:	2301      	movs	r3, #1
   26900:	f363 0702 	bfi	r7, r3, #0, #3
   26904:	f360 07c5 	bfi	r7, r0, #3, #3
   26908:	f365 178f 	bfi	r7, r5, #6, #10
   2690c:	463a      	mov	r2, r7
   2690e:	4649      	mov	r1, r9
   26910:	4805      	ldr	r0, [pc, #20]	; (26928 <net_route_get_nexthop+0x90>)
   26912:	f7db fa21 	bl	1d58 <log_1>
   26916:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   26918:	2c00      	cmp	r4, #0
   2691a:	d1cf      	bne.n	268bc <net_route_get_nexthop+0x24>
		return NULL;
   2691c:	2000      	movs	r0, #0
   2691e:	e7e8      	b.n	268f2 <net_route_get_nexthop+0x5a>
   26920:	0002d140 	.word	0x0002d140
   26924:	0002cff8 	.word	0x0002cff8
   26928:	000330e3 	.word	0x000330e3
   2692c:	2000d7b4 	.word	0x2000d7b4
   26930:	0003300c 	.word	0x0003300c
   26934:	0003309a 	.word	0x0003309a

00026938 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   26938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2693c:	2400      	movs	r4, #0
		nbr = get_nbr(i);
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
   2693e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 26964 <net_route_foreach+0x2c>
{
   26942:	4606      	mov	r6, r0
   26944:	460f      	mov	r7, r1
	int i, ret = 0;
   26946:	4625      	mov	r5, r4
		route = net_route_data(nbr);
   26948:	eb08 0304 	add.w	r3, r8, r4
   2694c:	68d8      	ldr	r0, [r3, #12]
		if (!route) {
   2694e:	b110      	cbz	r0, 26956 <net_route_foreach+0x1e>
			continue;
		}

		cb(route, user_data);
   26950:	4639      	mov	r1, r7
   26952:	47b0      	blx	r6

		ret++;
   26954:	3501      	adds	r5, #1
   26956:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   26958:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
   2695c:	d1f4      	bne.n	26948 <net_route_foreach+0x10>
	}

	return ret;
}
   2695e:	4628      	mov	r0, r5
   26960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26964:	2000d40c 	.word	0x2000d40c

00026968 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   26968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2696a:	4607      	mov	r7, r0
   2696c:	460d      	mov	r5, r1
   2696e:	4616      	mov	r6, r2
   26970:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   26972:	f7fd ff05 	bl	24780 <net_ipv6_nbr_lookup>
   26976:	b120      	cbz	r0, 26982 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   26978:	2300      	movs	r3, #0
   2697a:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   2697c:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   2697e:	2001      	movs	r0, #1
   26980:	e00b      	b.n	2699a <net_route_get_info+0x32>
	*route = net_route_lookup(iface, dst);
   26982:	4629      	mov	r1, r5
   26984:	4638      	mov	r0, r7
   26986:	f7ff fea3 	bl	266d0 <net_route_lookup>
   2698a:	6030      	str	r0, [r6, #0]
	if (*route) {
   2698c:	b130      	cbz	r0, 2699c <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   2698e:	f7ff ff83 	bl	26898 <net_route_get_nexthop>
   26992:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   26994:	3000      	adds	r0, #0
   26996:	bf18      	it	ne
   26998:	2001      	movne	r0, #1
	}

	return false;
}
   2699a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   2699c:	4629      	mov	r1, r5
   2699e:	f7fa f8ab 	bl	20af8 <net_if_ipv6_router_find_default>
		if (!router) {
   269a2:	2800      	cmp	r0, #0
   269a4:	d0f9      	beq.n	2699a <net_route_get_info+0x32>
		*nexthop = &router->address.in6_addr;
   269a6:	3024      	adds	r0, #36	; 0x24
   269a8:	6020      	str	r0, [r4, #0]
   269aa:	e7e8      	b.n	2697e <net_route_get_info+0x16>

000269ac <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   269ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269ae:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   269b0:	2000      	movs	r0, #0
   269b2:	f7fd fee5 	bl	24780 <net_ipv6_nbr_lookup>
	if (!nbr) {
   269b6:	4606      	mov	r6, r0
   269b8:	2800      	cmp	r0, #0
   269ba:	d04c      	beq.n	26a56 <net_route_packet+0xaa>
		NET_DBG("Cannot find %s neighbor",
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   269bc:	7840      	ldrb	r0, [r0, #1]
   269be:	f7fd f93b 	bl	23c38 <net_nbr_get_lladdr>
	if (!lladdr) {
   269c2:	4605      	mov	r5, r0
   269c4:	2800      	cmp	r0, #0
   269c6:	d049      	beq.n	26a5c <net_route_packet+0xb0>
	 * link layer. This is done at runtime because we can have multiple
	 * network technologies enabled.
	 */
	if (net_if_l2(net_pkt_iface(pkt)) != &NET_L2_GET_NAME(DUMMY)) {
#endif
		if (!net_pkt_lladdr_src(pkt)->addr) {
   269c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   269ca:	b910      	cbnz	r0, 269d2 <net_route_packet+0x26>
		 * same, then something went wrong in route lookup.
		 */
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
			    lladdr->len)) {
			NET_ERR("Src ll and Dst ll are same");
			return -EINVAL;
   269cc:	f06f 0015 	mvn.w	r0, #21
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;

	net_pkt_set_iface(pkt, nbr->iface);

	return net_send_data(pkt);
}
   269d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
   269d2:	1caf      	adds	r7, r5, #2
   269d4:	786a      	ldrb	r2, [r5, #1]
   269d6:	4639      	mov	r1, r7
   269d8:	f7df fa2f 	bl	5e3a <memcmp>
   269dc:	b9a8      	cbnz	r0, 26a0a <net_route_packet+0x5e>
			NET_ERR("Src ll and Dst ll are same");
   269de:	4b21      	ldr	r3, [pc, #132]	; (26a64 <net_route_packet+0xb8>)
   269e0:	681b      	ldr	r3, [r3, #0]
   269e2:	075b      	lsls	r3, r3, #29
   269e4:	d0f2      	beq.n	269cc <net_route_packet+0x20>
   269e6:	2301      	movs	r3, #1
   269e8:	f04f 0200 	mov.w	r2, #0
   269ec:	f363 0202 	bfi	r2, r3, #0, #3
   269f0:	491d      	ldr	r1, [pc, #116]	; (26a68 <net_route_packet+0xbc>)
   269f2:	4b1e      	ldr	r3, [pc, #120]	; (26a6c <net_route_packet+0xc0>)
   269f4:	1a5b      	subs	r3, r3, r1
   269f6:	f360 02c5 	bfi	r2, r0, #3, #3
   269fa:	08db      	lsrs	r3, r3, #3
   269fc:	f363 128f 	bfi	r2, r3, #6, #10
   26a00:	491b      	ldr	r1, [pc, #108]	; (26a70 <net_route_packet+0xc4>)
   26a02:	481c      	ldr	r0, [pc, #112]	; (26a74 <net_route_packet+0xc8>)
   26a04:	f7db f9a8 	bl	1d58 <log_1>
   26a08:	e7e0      	b.n	269cc <net_route_packet+0x20>
	pkt->forwarding = forward;
   26a0a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   26a0e:	f043 0304 	orr.w	r3, r3, #4
   26a12:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	return net_if_get_link_addr(pkt->iface);
   26a16:	6a23      	ldr	r3, [r4, #32]
   26a18:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   26a1a:	691a      	ldr	r2, [r3, #16]
   26a1c:	62e2      	str	r2, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   26a1e:	7d5a      	ldrb	r2, [r3, #21]
   26a20:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   26a24:	7d1b      	ldrb	r3, [r3, #20]
   26a26:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   26a2a:	6367      	str	r7, [r4, #52]	; 0x34
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
   26a2c:	782b      	ldrb	r3, [r5, #0]
   26a2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   26a32:	786b      	ldrb	r3, [r5, #1]
   26a34:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_pkt_set_iface(pkt, nbr->iface);
   26a38:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   26a3a:	6223      	str	r3, [r4, #32]
	pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   26a3c:	681a      	ldr	r2, [r3, #0]
   26a3e:	7d52      	ldrb	r2, [r2, #21]
   26a40:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   26a44:	681b      	ldr	r3, [r3, #0]
   26a46:	7d5b      	ldrb	r3, [r3, #21]
   26a48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return net_send_data(pkt);
   26a4c:	4620      	mov	r0, r4
}
   26a4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   26a52:	f7f8 beeb 	b.w	1f82c <net_send_data>
		return -ENOENT;
   26a56:	f06f 0001 	mvn.w	r0, #1
   26a5a:	e7b9      	b.n	269d0 <net_route_packet+0x24>
		return -ESRCH;
   26a5c:	f06f 0002 	mvn.w	r0, #2
   26a60:	e7b6      	b.n	269d0 <net_route_packet+0x24>
   26a62:	bf00      	nop
   26a64:	2000d7b4 	.word	0x2000d7b4
   26a68:	0002cff8 	.word	0x0002cff8
   26a6c:	0002d140 	.word	0x0002d140
   26a70:	00033022 	.word	0x00033022
   26a74:	00033111 	.word	0x00033111

00026a78 <net_route_init>:
	NET_DBG("Allocated %d routing entries (%zu bytes)",
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));
}
   26a78:	4770      	bx	lr

00026a7a <net_analyze_stack_get_values>:

static inline void net_analyze_stack_get_values(const char *stack,
						size_t size,
						unsigned *pcnt,
						unsigned *unused)
{
   26a7a:	b530      	push	{r4, r5, lr}
	size_t unused = 0;
   26a7c:	2400      	movs	r4, #0
	for (i = 0; i < size; i++) {
   26a7e:	42a1      	cmp	r1, r4
   26a80:	d002      	beq.n	26a88 <net_analyze_stack_get_values+0xe>
		if (checked_stack[i] == 0xaaU) {
   26a82:	5d05      	ldrb	r5, [r0, r4]
   26a84:	2daa      	cmp	r5, #170	; 0xaa
   26a86:	d007      	beq.n	26a98 <net_analyze_stack_get_values+0x1e>
	*unused = stack_unused_space_get(stack, size);
   26a88:	601c      	str	r4, [r3, #0]

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   26a8a:	1b0c      	subs	r4, r1, r4
   26a8c:	2364      	movs	r3, #100	; 0x64
   26a8e:	435c      	muls	r4, r3
   26a90:	fbb4 f4f1 	udiv	r4, r4, r1
   26a94:	6014      	str	r4, [r2, #0]
}
   26a96:	bd30      	pop	{r4, r5, pc}
			unused++;
   26a98:	3401      	adds	r4, #1
   26a9a:	e7f0      	b.n	26a7e <net_analyze_stack_get_values+0x4>

00026a9c <tcp_sent_cb>:
static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
	PR_SHELL(tcp_shell, "Message sent\n");
   26a9c:	4b02      	ldr	r3, [pc, #8]	; (26aa8 <tcp_sent_cb+0xc>)
   26a9e:	4a03      	ldr	r2, [pc, #12]	; (26aac <tcp_sent_cb+0x10>)
   26aa0:	6818      	ldr	r0, [r3, #0]
   26aa2:	2100      	movs	r1, #0
   26aa4:	f7dc bc92 	b.w	33cc <shell_fprintf>
   26aa8:	200028b4 	.word	0x200028b4
   26aac:	00034aef 	.word	0x00034aef

00026ab0 <net_context_is_used>:
{
   26ab0:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   26ab2:	4604      	mov	r4, r0
   26ab4:	b9a0      	cbnz	r0, 26ae0 <net_context_is_used+0x30>
   26ab6:	4b0d      	ldr	r3, [pc, #52]	; (26aec <net_context_is_used+0x3c>)
   26ab8:	681b      	ldr	r3, [r3, #0]
   26aba:	075b      	lsls	r3, r3, #29
   26abc:	d010      	beq.n	26ae0 <net_context_is_used+0x30>
   26abe:	2301      	movs	r3, #1
   26ac0:	f04f 0200 	mov.w	r2, #0
   26ac4:	f363 0202 	bfi	r2, r3, #0, #3
   26ac8:	4909      	ldr	r1, [pc, #36]	; (26af0 <net_context_is_used+0x40>)
   26aca:	4b0a      	ldr	r3, [pc, #40]	; (26af4 <net_context_is_used+0x44>)
   26acc:	1a5b      	subs	r3, r3, r1
   26ace:	f360 02c5 	bfi	r2, r0, #3, #3
   26ad2:	08db      	lsrs	r3, r3, #3
   26ad4:	f363 128f 	bfi	r2, r3, #6, #10
   26ad8:	4907      	ldr	r1, [pc, #28]	; (26af8 <net_context_is_used+0x48>)
   26ada:	4808      	ldr	r0, [pc, #32]	; (26afc <net_context_is_used+0x4c>)
   26adc:	f7db f93c 	bl	1d58 <log_1>
	return context->flags & NET_CONTEXT_IN_USE;
   26ae0:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   26ae4:	f000 0001 	and.w	r0, r0, #1
   26ae8:	bd10      	pop	{r4, pc}
   26aea:	bf00      	nop
   26aec:	2000d7b8 	.word	0x2000d7b8
   26af0:	0002cff8 	.word	0x0002cff8
   26af4:	0002d148 	.word	0x0002d148
   26af8:	0003316d 	.word	0x0003316d
   26afc:	000322d6 	.word	0x000322d6

00026b00 <cmd_net_ipv6>:
{
   26b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (shell_help_requested(shell)) {
   26b02:	6883      	ldr	r3, [r0, #8]
   26b04:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   26b08:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   26b0c:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   26b0e:	b13c      	cbz	r4, 26b20 <cmd_net_ipv6+0x20>
		shell_help_print(shell, NULL, 0);
   26b10:	2200      	movs	r2, #0
   26b12:	4611      	mov	r1, r2
   26b14:	f7dc fd5e 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   26b18:	f06f 0007 	mvn.w	r0, #7
}
   26b1c:	b003      	add	sp, #12
   26b1e:	bd30      	pop	{r4, r5, pc}
	PR("IPv6 support                              : %s\n",
   26b20:	4b27      	ldr	r3, [pc, #156]	; (26bc0 <cmd_net_ipv6+0xc0>)
   26b22:	4a28      	ldr	r2, [pc, #160]	; (26bc4 <cmd_net_ipv6+0xc4>)
   26b24:	4621      	mov	r1, r4
   26b26:	f7dc fc51 	bl	33cc <shell_fprintf>
	PR("IPv6 fragmentation support                : %s\n",
   26b2a:	4b27      	ldr	r3, [pc, #156]	; (26bc8 <cmd_net_ipv6+0xc8>)
   26b2c:	4a27      	ldr	r2, [pc, #156]	; (26bcc <cmd_net_ipv6+0xcc>)
   26b2e:	4621      	mov	r1, r4
   26b30:	4628      	mov	r0, r5
   26b32:	f7dc fc4b 	bl	33cc <shell_fprintf>
	PR("Multicast Listener Discovery support      : %s\n",
   26b36:	4b22      	ldr	r3, [pc, #136]	; (26bc0 <cmd_net_ipv6+0xc0>)
   26b38:	4a25      	ldr	r2, [pc, #148]	; (26bd0 <cmd_net_ipv6+0xd0>)
   26b3a:	4621      	mov	r1, r4
   26b3c:	4628      	mov	r0, r5
   26b3e:	f7dc fc45 	bl	33cc <shell_fprintf>
	PR("Neighbor cache support                    : %s\n",
   26b42:	4b1f      	ldr	r3, [pc, #124]	; (26bc0 <cmd_net_ipv6+0xc0>)
   26b44:	4a23      	ldr	r2, [pc, #140]	; (26bd4 <cmd_net_ipv6+0xd4>)
   26b46:	4621      	mov	r1, r4
   26b48:	4628      	mov	r0, r5
   26b4a:	f7dc fc3f 	bl	33cc <shell_fprintf>
	PR("Neighbor discovery support                : %s\n",
   26b4e:	4b1c      	ldr	r3, [pc, #112]	; (26bc0 <cmd_net_ipv6+0xc0>)
   26b50:	4a21      	ldr	r2, [pc, #132]	; (26bd8 <cmd_net_ipv6+0xd8>)
   26b52:	4621      	mov	r1, r4
   26b54:	4628      	mov	r0, r5
   26b56:	f7dc fc39 	bl	33cc <shell_fprintf>
	PR("Duplicate address detection (DAD) support : %s\n",
   26b5a:	4b19      	ldr	r3, [pc, #100]	; (26bc0 <cmd_net_ipv6+0xc0>)
   26b5c:	4a1f      	ldr	r2, [pc, #124]	; (26bdc <cmd_net_ipv6+0xdc>)
   26b5e:	4621      	mov	r1, r4
   26b60:	4628      	mov	r0, r5
   26b62:	f7dc fc33 	bl	33cc <shell_fprintf>
	PR("Router advertisement RDNSS option support : %s\n",
   26b66:	4b16      	ldr	r3, [pc, #88]	; (26bc0 <cmd_net_ipv6+0xc0>)
   26b68:	4a1d      	ldr	r2, [pc, #116]	; (26be0 <cmd_net_ipv6+0xe0>)
   26b6a:	4621      	mov	r1, r4
   26b6c:	4628      	mov	r0, r5
   26b6e:	f7dc fc2d 	bl	33cc <shell_fprintf>
	PR("6lo header compression support            : %s\n",
   26b72:	4b13      	ldr	r3, [pc, #76]	; (26bc0 <cmd_net_ipv6+0xc0>)
   26b74:	4a1b      	ldr	r2, [pc, #108]	; (26be4 <cmd_net_ipv6+0xe4>)
   26b76:	4621      	mov	r1, r4
   26b78:	4628      	mov	r0, r5
   26b7a:	f7dc fc27 	bl	33cc <shell_fprintf>
	PR("Max number of IPv6 network interfaces "
   26b7e:	2301      	movs	r3, #1
   26b80:	4a19      	ldr	r2, [pc, #100]	; (26be8 <cmd_net_ipv6+0xe8>)
   26b82:	4621      	mov	r1, r4
   26b84:	4628      	mov	r0, r5
   26b86:	f7dc fc21 	bl	33cc <shell_fprintf>
	PR("Max number of unicast IPv6 addresses "
   26b8a:	2303      	movs	r3, #3
   26b8c:	4a17      	ldr	r2, [pc, #92]	; (26bec <cmd_net_ipv6+0xec>)
   26b8e:	4621      	mov	r1, r4
   26b90:	4628      	mov	r0, r5
   26b92:	f7dc fc1b 	bl	33cc <shell_fprintf>
	PR("Max number of multicast IPv6 addresses "
   26b96:	2305      	movs	r3, #5
   26b98:	4a15      	ldr	r2, [pc, #84]	; (26bf0 <cmd_net_ipv6+0xf0>)
   26b9a:	4621      	mov	r1, r4
   26b9c:	4628      	mov	r0, r5
   26b9e:	f7dc fc15 	bl	33cc <shell_fprintf>
	PR("Max number of IPv6 prefixes per network "
   26ba2:	2302      	movs	r3, #2
   26ba4:	4a13      	ldr	r2, [pc, #76]	; (26bf4 <cmd_net_ipv6+0xf4>)
   26ba6:	4621      	mov	r1, r4
   26ba8:	4628      	mov	r0, r5
   26baa:	f7dc fc0f 	bl	33cc <shell_fprintf>
	net_if_foreach(address_lifetime_cb, &user_data);
   26bae:	4812      	ldr	r0, [pc, #72]	; (26bf8 <cmd_net_ipv6+0xf8>)
   26bb0:	4669      	mov	r1, sp
	user_data.user_data = NULL;
   26bb2:	e9cd 5400 	strd	r5, r4, [sp]
	net_if_foreach(address_lifetime_cb, &user_data);
   26bb6:	f7fa f9a7 	bl	20f08 <net_if_foreach>
	return 0;
   26bba:	4620      	mov	r0, r4
   26bbc:	e7ae      	b.n	26b1c <cmd_net_ipv6+0x1c>
   26bbe:	bf00      	nop
   26bc0:	0002d630 	.word	0x0002d630
   26bc4:	000335f4 	.word	0x000335f4
   26bc8:	000320de 	.word	0x000320de
   26bcc:	00033624 	.word	0x00033624
   26bd0:	00033654 	.word	0x00033654
   26bd4:	00033684 	.word	0x00033684
   26bd8:	000336b4 	.word	0x000336b4
   26bdc:	000336e4 	.word	0x000336e4
   26be0:	00033714 	.word	0x00033714
   26be4:	00033744 	.word	0x00033744
   26be8:	00033774 	.word	0x00033774
   26bec:	000337b7 	.word	0x000337b7
   26bf0:	000337fa 	.word	0x000337fa
   26bf4:	0003383d 	.word	0x0003383d
   26bf8:	00028099 	.word	0x00028099

00026bfc <cmd_net_nbr_rm>:
{
   26bfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   26bfe:	6883      	ldr	r3, [r0, #8]
   26c00:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   26c04:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   26c08:	4605      	mov	r5, r0
   26c0a:	4616      	mov	r6, r2
	if (shell_help_requested(shell)) {
   26c0c:	b13c      	cbz	r4, 26c1e <cmd_net_nbr_rm+0x22>
		shell_help_print(shell, NULL, 0);
   26c0e:	2200      	movs	r2, #0
   26c10:	4611      	mov	r1, r2
   26c12:	f7dc fcdf 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   26c16:	f06f 0007 	mvn.w	r0, #7
}
   26c1a:	b004      	add	sp, #16
   26c1c:	bd70      	pop	{r4, r5, r6, pc}
	if (!argv[1]) {
   26c1e:	6851      	ldr	r1, [r2, #4]
   26c20:	b921      	cbnz	r1, 26c2c <cmd_net_nbr_rm+0x30>
		PR_WARNING("Neighbor IPv6 address missing.\n");
   26c22:	4a14      	ldr	r2, [pc, #80]	; (26c74 <cmd_net_nbr_rm+0x78>)
   26c24:	2104      	movs	r1, #4
   26c26:	f7dc fbd1 	bl	33cc <shell_fprintf>
   26c2a:	e7f4      	b.n	26c16 <cmd_net_nbr_rm+0x1a>
	ret = net_addr_pton(AF_INET6, argv[1], &addr);
   26c2c:	466a      	mov	r2, sp
   26c2e:	200a      	movs	r0, #10
   26c30:	f7fb fa78 	bl	22124 <net_addr_pton>
	if (ret < 0) {
   26c34:	2800      	cmp	r0, #0
   26c36:	da06      	bge.n	26c46 <cmd_net_nbr_rm+0x4a>
		PR_WARNING("Cannot parse '%s'\n", argv[1]);
   26c38:	6873      	ldr	r3, [r6, #4]
   26c3a:	4a0f      	ldr	r2, [pc, #60]	; (26c78 <cmd_net_nbr_rm+0x7c>)
		PR_WARNING("Cannot remove neighbor %s\n",
   26c3c:	2104      	movs	r1, #4
   26c3e:	4628      	mov	r0, r5
   26c40:	f7dc fbc4 	bl	33cc <shell_fprintf>
   26c44:	e7e7      	b.n	26c16 <cmd_net_nbr_rm+0x1a>
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
   26c46:	4669      	mov	r1, sp
   26c48:	4620      	mov	r0, r4
   26c4a:	f7fd fd81 	bl	24750 <net_ipv6_nbr_rm>
		PR_WARNING("Cannot remove neighbor %s\n",
   26c4e:	4669      	mov	r1, sp
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
   26c50:	b928      	cbnz	r0, 26c5e <cmd_net_nbr_rm+0x62>
		PR_WARNING("Cannot remove neighbor %s\n",
   26c52:	200a      	movs	r0, #10
   26c54:	f7fb fa50 	bl	220f8 <net_sprint_addr>
   26c58:	4a08      	ldr	r2, [pc, #32]	; (26c7c <cmd_net_nbr_rm+0x80>)
   26c5a:	4603      	mov	r3, r0
   26c5c:	e7ee      	b.n	26c3c <cmd_net_nbr_rm+0x40>
		PR("Neighbor %s removed.\n", net_sprint_ipv6_addr(&addr));
   26c5e:	200a      	movs	r0, #10
   26c60:	f7fb fa4a 	bl	220f8 <net_sprint_addr>
   26c64:	4a06      	ldr	r2, [pc, #24]	; (26c80 <cmd_net_nbr_rm+0x84>)
   26c66:	4603      	mov	r3, r0
   26c68:	4621      	mov	r1, r4
   26c6a:	4628      	mov	r0, r5
   26c6c:	f7dc fbae 	bl	33cc <shell_fprintf>
	return 0;
   26c70:	4620      	mov	r0, r4
   26c72:	e7d2      	b.n	26c1a <cmd_net_nbr_rm+0x1e>
   26c74:	00033954 	.word	0x00033954
   26c78:	00033974 	.word	0x00033974
   26c7c:	00033987 	.word	0x00033987
   26c80:	000339a2 	.word	0x000339a2

00026c84 <nbr_address_get>:

#define NBR_ADDRESS_CMD &nbr_address

static void nbr_address_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   26c84:	2300      	movs	r3, #0
{
   26c86:	b537      	push	{r0, r1, r2, r4, r5, lr}
	entry->handler = NULL;
   26c88:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   26c8a:	604b      	str	r3, [r1, #4]
	entry->subcmd = &nbr_address;
   26c8c:	4b0e      	ldr	r3, [pc, #56]	; (26cc8 <nbr_address_get+0x44>)
   26c8e:	608b      	str	r3, [r1, #8]
{
   26c90:	460d      	mov	r5, r1
	if (idx == 0) {
   26c92:	4604      	mov	r4, r0
   26c94:	b988      	cbnz	r0, 26cba <nbr_address_get+0x36>
		memset(nbr_address_buffer, 0, sizeof(nbr_address_buffer));
   26c96:	4601      	mov	r1, r0
   26c98:	22f0      	movs	r2, #240	; 0xf0
   26c9a:	480c      	ldr	r0, [pc, #48]	; (26ccc <nbr_address_get+0x48>)
   26c9c:	f7df f921 	bl	5ee2 <memset>
	int count = 0;
   26ca0:	a902      	add	r1, sp, #8
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
   26ca2:	480b      	ldr	r0, [pc, #44]	; (26cd0 <nbr_address_get+0x4c>)
	int count = 0;
   26ca4:	f841 4d04 	str.w	r4, [r1, #-4]!
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
   26ca8:	f7fd fd46 	bl	24738 <net_ipv6_nbr_foreach>
	if (!nbr_address_buffer[idx][0]) {
   26cac:	2328      	movs	r3, #40	; 0x28
   26cae:	4a07      	ldr	r2, [pc, #28]	; (26ccc <nbr_address_get+0x48>)
   26cb0:	435c      	muls	r4, r3
   26cb2:	1913      	adds	r3, r2, r4
   26cb4:	5d12      	ldrb	r2, [r2, r4]
   26cb6:	b91a      	cbnz	r2, 26cc0 <nbr_address_get+0x3c>
   26cb8:	e001      	b.n	26cbe <nbr_address_get+0x3a>
	if (idx >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
   26cba:	2805      	cmp	r0, #5
   26cbc:	d9f6      	bls.n	26cac <nbr_address_get+0x28>
		return NULL;
   26cbe:	2300      	movs	r3, #0
	entry->syntax = set_nbr_address(idx);
   26cc0:	602b      	str	r3, [r5, #0]
}
   26cc2:	b003      	add	sp, #12
   26cc4:	bd30      	pop	{r4, r5, pc}
   26cc6:	bf00      	nop
   26cc8:	00033fb8 	.word	0x00033fb8
   26ccc:	200027bc 	.word	0x200027bc
   26cd0:	00026cd5 	.word	0x00026cd5

00026cd4 <nbr_address_cb>:
{
   26cd4:	b538      	push	{r3, r4, r5, lr}
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
   26cd6:	680d      	ldr	r5, [r1, #0]
   26cd8:	2d05      	cmp	r5, #5
{
   26cda:	460c      	mov	r4, r1
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
   26cdc:	dc0f      	bgt.n	26cfe <nbr_address_cb+0x2a>
		 "%s", net_sprint_ipv6_addr(&net_ipv6_nbr_data(nbr)->addr));
   26cde:	68c1      	ldr	r1, [r0, #12]
	snprintk(nbr_address_buffer[*count], NET_IPV6_ADDR_LEN,
   26ce0:	200a      	movs	r0, #10
   26ce2:	3104      	adds	r1, #4
   26ce4:	f7fb fa08 	bl	220f8 <net_sprint_addr>
   26ce8:	4603      	mov	r3, r0
   26cea:	4805      	ldr	r0, [pc, #20]	; (26d00 <nbr_address_cb+0x2c>)
   26cec:	4a05      	ldr	r2, [pc, #20]	; (26d04 <nbr_address_cb+0x30>)
   26cee:	2128      	movs	r1, #40	; 0x28
   26cf0:	fb01 0005 	mla	r0, r1, r5, r0
   26cf4:	f7da fa0a 	bl	110c <snprintk>
	(*count)++;
   26cf8:	6823      	ldr	r3, [r4, #0]
   26cfa:	3301      	adds	r3, #1
   26cfc:	6023      	str	r3, [r4, #0]
}
   26cfe:	bd38      	pop	{r3, r4, r5, pc}
   26d00:	200027bc 	.word	0x200027bc
   26d04:	0002db78 	.word	0x0002db78

00026d08 <cmd_net_mem>:
{
   26d08:	b570      	push	{r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   26d0a:	6883      	ldr	r3, [r0, #8]
   26d0c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   26d10:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   26d14:	b094      	sub	sp, #80	; 0x50
   26d16:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   26d18:	b13c      	cbz	r4, 26d2a <cmd_net_mem+0x22>
		shell_help_print(shell, NULL, 0);
   26d1a:	2200      	movs	r2, #0
   26d1c:	4611      	mov	r1, r2
   26d1e:	f7dc fc59 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   26d22:	f06f 0007 	mvn.w	r0, #7
}
   26d26:	b014      	add	sp, #80	; 0x50
   26d28:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   26d2a:	ab05      	add	r3, sp, #20
   26d2c:	aa04      	add	r2, sp, #16
   26d2e:	a903      	add	r1, sp, #12
   26d30:	a802      	add	r0, sp, #8
   26d32:	f7fa fef3 	bl	21b1c <net_pkt_get_info>
	PR("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   26d36:	f44f 7380 	mov.w	r3, #256	; 0x100
   26d3a:	4a24      	ldr	r2, [pc, #144]	; (26dcc <cmd_net_mem+0xc4>)
   26d3c:	4621      	mov	r1, r4
   26d3e:	4628      	mov	r0, r5
   26d40:	f7dc fb44 	bl	33cc <shell_fprintf>
	PR("Network buffer pools:\n");
   26d44:	4a22      	ldr	r2, [pc, #136]	; (26dd0 <cmd_net_mem+0xc8>)
   26d46:	4621      	mov	r1, r4
   26d48:	4628      	mov	r0, r5
   26d4a:	f7dc fb3f 	bl	33cc <shell_fprintf>
	PR("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   26d4e:	4a21      	ldr	r2, [pc, #132]	; (26dd4 <cmd_net_mem+0xcc>)
   26d50:	4621      	mov	r1, r4
   26d52:	4628      	mov	r0, r5
   26d54:	f7dc fb3a 	bl	33cc <shell_fprintf>
	PR("Address\t\tTotal\tName\n");
   26d58:	4a1f      	ldr	r2, [pc, #124]	; (26dd8 <cmd_net_mem+0xd0>)
   26d5a:	4621      	mov	r1, r4
   26d5c:	4628      	mov	r0, r5
   26d5e:	f7dc fb35 	bl	33cc <shell_fprintf>
	PR("%p\t%d\tRX\n", rx, rx->num_blocks);
   26d62:	9b02      	ldr	r3, [sp, #8]
   26d64:	689a      	ldr	r2, [r3, #8]
   26d66:	9200      	str	r2, [sp, #0]
   26d68:	4621      	mov	r1, r4
   26d6a:	4a1c      	ldr	r2, [pc, #112]	; (26ddc <cmd_net_mem+0xd4>)
   26d6c:	4628      	mov	r0, r5
   26d6e:	f7dc fb2d 	bl	33cc <shell_fprintf>
	PR("%p\t%d\tTX\n", tx, tx->num_blocks);
   26d72:	9b03      	ldr	r3, [sp, #12]
   26d74:	689a      	ldr	r2, [r3, #8]
   26d76:	9200      	str	r2, [sp, #0]
   26d78:	4621      	mov	r1, r4
   26d7a:	4a19      	ldr	r2, [pc, #100]	; (26de0 <cmd_net_mem+0xd8>)
   26d7c:	4628      	mov	r0, r5
   26d7e:	f7dc fb25 	bl	33cc <shell_fprintf>
	PR("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   26d82:	9b04      	ldr	r3, [sp, #16]
   26d84:	8a1a      	ldrh	r2, [r3, #16]
   26d86:	9200      	str	r2, [sp, #0]
   26d88:	4621      	mov	r1, r4
   26d8a:	4a16      	ldr	r2, [pc, #88]	; (26de4 <cmd_net_mem+0xdc>)
   26d8c:	4628      	mov	r0, r5
   26d8e:	f7dc fb1d 	bl	33cc <shell_fprintf>
	PR("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   26d92:	9b05      	ldr	r3, [sp, #20]
   26d94:	8a1a      	ldrh	r2, [r3, #16]
   26d96:	9200      	str	r2, [sp, #0]
   26d98:	4621      	mov	r1, r4
   26d9a:	4a13      	ldr	r2, [pc, #76]	; (26de8 <cmd_net_mem+0xe0>)
   26d9c:	4628      	mov	r0, r5
		(void)memset(&info, 0, sizeof(info));
   26d9e:	ae08      	add	r6, sp, #32
	PR("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   26da0:	f7dc fb14 	bl	33cc <shell_fprintf>
		(void)memset(&info, 0, sizeof(info));
   26da4:	2230      	movs	r2, #48	; 0x30
   26da6:	4621      	mov	r1, r4
   26da8:	4630      	mov	r0, r6
   26daa:	f7df f89a 	bl	5ee2 <memset>
		net_context_foreach(context_info, &user_data);
   26dae:	a906      	add	r1, sp, #24
   26db0:	480e      	ldr	r0, [pc, #56]	; (26dec <cmd_net_mem+0xe4>)
		user_data.user_data = &info;
   26db2:	e9cd 5606 	strd	r5, r6, [sp, #24]
		net_context_foreach(context_info, &user_data);
   26db6:	f7f8 fcb7 	bl	1f728 <net_context_foreach>
		if (!info.are_external_pools) {
   26dba:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   26dbe:	b919      	cbnz	r1, 26dc8 <cmd_net_mem+0xc0>
			PR("No external memory pools found.\n");
   26dc0:	4a0b      	ldr	r2, [pc, #44]	; (26df0 <cmd_net_mem+0xe8>)
   26dc2:	4628      	mov	r0, r5
   26dc4:	f7dc fb02 	bl	33cc <shell_fprintf>
	return 0;
   26dc8:	2000      	movs	r0, #0
   26dca:	e7ac      	b.n	26d26 <cmd_net_mem+0x1e>
   26dcc:	00033880 	.word	0x00033880
   26dd0:	0003389a 	.word	0x0003389a
   26dd4:	000338b1 	.word	0x000338b1
   26dd8:	000338dd 	.word	0x000338dd
   26ddc:	000338f2 	.word	0x000338f2
   26de0:	000338fc 	.word	0x000338fc
   26de4:	00033906 	.word	0x00033906
   26de8:	00033915 	.word	0x00033915
   26dec:	00028225 	.word	0x00028225
   26df0:	00033924 	.word	0x00033924

00026df4 <iface_index_get>:
{
   26df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	entry->handler = NULL;
   26df6:	2300      	movs	r3, #0
	struct net_if *iface = net_if_get_by_index(idx);
   26df8:	b2c7      	uxtb	r7, r0
{
   26dfa:	4606      	mov	r6, r0
	entry->handler = NULL;
   26dfc:	60cb      	str	r3, [r1, #12]
	struct net_if *iface = net_if_get_by_index(idx);
   26dfe:	4638      	mov	r0, r7
{
   26e00:	460d      	mov	r5, r1
	struct net_if *iface = net_if_get_by_index(idx);
   26e02:	f7fa f845 	bl	20e90 <net_if_get_by_index>
	if (!iface) {
   26e06:	b328      	cbz	r0, 26e54 <iface_index_get+0x60>
	return iface->if_dev->l2;
   26e08:	6803      	ldr	r3, [r0, #0]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
   26e0a:	4c14      	ldr	r4, [pc, #80]	; (26e5c <iface_index_get+0x68>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   26e0c:	f8d3 c004 	ldr.w	ip, [r3, #4]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
   26e10:	4a13      	ldr	r2, [pc, #76]	; (26e60 <iface_index_get+0x6c>)
   26e12:	9000      	str	r0, [sp, #0]
   26e14:	211c      	movs	r1, #28
   26e16:	4813      	ldr	r0, [pc, #76]	; (26e64 <iface_index_get+0x70>)
   26e18:	4b13      	ldr	r3, [pc, #76]	; (26e68 <iface_index_get+0x74>)
   26e1a:	fb01 4406 	mla	r4, r1, r6, r4
   26e1e:	459c      	cmp	ip, r3
   26e20:	bf0c      	ite	eq
   26e22:	4603      	moveq	r3, r0
   26e24:	4613      	movne	r3, r2
   26e26:	4a11      	ldr	r2, [pc, #68]	; (26e6c <iface_index_get+0x78>)
   26e28:	4620      	mov	r0, r4
   26e2a:	f7da f96f 	bl	110c <snprintk>
	entry->subcmd = &iface_index;
   26e2e:	4b10      	ldr	r3, [pc, #64]	; (26e70 <iface_index_get+0x7c>)
	entry->help  = set_iface_index_help(idx);
   26e30:	606c      	str	r4, [r5, #4]
	entry->subcmd = &iface_index;
   26e32:	60ab      	str	r3, [r5, #8]
	struct net_if *iface = net_if_get_by_index(idx);
   26e34:	4638      	mov	r0, r7
   26e36:	f7fa f82b 	bl	20e90 <net_if_get_by_index>
	if (!iface) {
   26e3a:	b168      	cbz	r0, 26e58 <iface_index_get+0x64>
	snprintk(iface_index_buffer[idx], MAX_IFACE_STR_LEN, "%zu", idx);
   26e3c:	4c0d      	ldr	r4, [pc, #52]	; (26e74 <iface_index_get+0x80>)
   26e3e:	4a0e      	ldr	r2, [pc, #56]	; (26e78 <iface_index_get+0x84>)
   26e40:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   26e44:	4633      	mov	r3, r6
   26e46:	2104      	movs	r1, #4
   26e48:	4620      	mov	r0, r4
   26e4a:	f7da f95f 	bl	110c <snprintk>
	entry->syntax = set_iface_index_buffer(idx);
   26e4e:	602c      	str	r4, [r5, #0]
}
   26e50:	b003      	add	sp, #12
   26e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   26e54:	4604      	mov	r4, r0
   26e56:	e7ea      	b.n	26e2e <iface_index_get+0x3a>
		return NULL;
   26e58:	4604      	mov	r4, r0
   26e5a:	e7f8      	b.n	26e4e <iface_index_get+0x5a>
   26e5c:	2000279c 	.word	0x2000279c
   26e60:	00033f7a 	.word	0x00033f7a
   26e64:	00033f70 	.word	0x00033f70
   26e68:	0002cfe4 	.word	0x0002cfe4
   26e6c:	00033f89 	.word	0x00033f89
   26e70:	00033f68 	.word	0x00033f68
   26e74:	200027b8 	.word	0x200027b8
   26e78:	0002fbf0 	.word	0x0002fbf0

00026e7c <cmd_net_conn>:
{
   26e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int count = 0;
   26e7e:	2200      	movs	r2, #0
	if (shell_help_requested(shell)) {
   26e80:	6883      	ldr	r3, [r0, #8]
	int count = 0;
   26e82:	9201      	str	r2, [sp, #4]
   26e84:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
   26e88:	f3c1 0140 	ubfx	r1, r1, #1, #1
{
   26e8c:	4604      	mov	r4, r0
	if (shell_help_requested(shell)) {
   26e8e:	b131      	cbz	r1, 26e9e <cmd_net_conn+0x22>
		shell_help_print(shell, NULL, 0);
   26e90:	4611      	mov	r1, r2
   26e92:	f7dc fb9f 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   26e96:	f06f 0007 	mvn.w	r0, #7
}
   26e9a:	b004      	add	sp, #16
   26e9c:	bd10      	pop	{r4, pc}
	PR("     Context   \tIface         Flags Local           \tRemote\n");
   26e9e:	4a14      	ldr	r2, [pc, #80]	; (26ef0 <cmd_net_conn+0x74>)
   26ea0:	f7dc fa94 	bl	33cc <shell_fprintf>
	user_data.user_data = &count;
   26ea4:	ab01      	add	r3, sp, #4
	net_context_foreach(context_cb, &user_data);
   26ea6:	a902      	add	r1, sp, #8
   26ea8:	4812      	ldr	r0, [pc, #72]	; (26ef4 <cmd_net_conn+0x78>)
	user_data.shell = shell;
   26eaa:	9402      	str	r4, [sp, #8]
	user_data.user_data = &count;
   26eac:	9303      	str	r3, [sp, #12]
	net_context_foreach(context_cb, &user_data);
   26eae:	f7f8 fc3b 	bl	1f728 <net_context_foreach>
	if (count == 0) {
   26eb2:	9901      	ldr	r1, [sp, #4]
   26eb4:	b919      	cbnz	r1, 26ebe <cmd_net_conn+0x42>
		PR("No connections\n");
   26eb6:	4a10      	ldr	r2, [pc, #64]	; (26ef8 <cmd_net_conn+0x7c>)
   26eb8:	4620      	mov	r0, r4
   26eba:	f7dc fa87 	bl	33cc <shell_fprintf>
	PR("\nTCP        Context   Src port Dst port   "
   26ebe:	4a0f      	ldr	r2, [pc, #60]	; (26efc <cmd_net_conn+0x80>)
   26ec0:	2100      	movs	r1, #0
   26ec2:	4620      	mov	r0, r4
   26ec4:	f7dc fa82 	bl	33cc <shell_fprintf>
	count = 0;
   26ec8:	2300      	movs	r3, #0
	net_tcp_foreach(tcp_cb, &user_data);
   26eca:	a902      	add	r1, sp, #8
   26ecc:	480c      	ldr	r0, [pc, #48]	; (26f00 <cmd_net_conn+0x84>)
	count = 0;
   26ece:	9301      	str	r3, [sp, #4]
	net_tcp_foreach(tcp_cb, &user_data);
   26ed0:	f002 f9b2 	bl	29238 <net_tcp_foreach>
	if (count == 0) {
   26ed4:	9901      	ldr	r1, [sp, #4]
   26ed6:	b919      	cbnz	r1, 26ee0 <cmd_net_conn+0x64>
		PR("No TCP connections\n");
   26ed8:	4a0a      	ldr	r2, [pc, #40]	; (26f04 <cmd_net_conn+0x88>)
   26eda:	4620      	mov	r0, r4
   26edc:	f7dc fa76 	bl	33cc <shell_fprintf>
	PR_INFO("\nEnable CONFIG_NET_TCP_LOG_LEVEL_DBG=y for additional info\n");
   26ee0:	4620      	mov	r0, r4
   26ee2:	4a09      	ldr	r2, [pc, #36]	; (26f08 <cmd_net_conn+0x8c>)
   26ee4:	2103      	movs	r1, #3
   26ee6:	f7dc fa71 	bl	33cc <shell_fprintf>
	return 0;
   26eea:	2000      	movs	r0, #0
   26eec:	e7d5      	b.n	26e9a <cmd_net_conn+0x1e>
   26eee:	bf00      	nop
   26ef0:	00033380 	.word	0x00033380
   26ef4:	00027765 	.word	0x00027765
   26ef8:	000333bd 	.word	0x000333bd
   26efc:	000333cd 	.word	0x000333cd
   26f00:	00026f0d 	.word	0x00026f0d
   26f04:	0003341a 	.word	0x0003341a
   26f08:	0003342e 	.word	0x0003342e

00026f0c <tcp_cb>:
{
   26f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f10:	b08b      	sub	sp, #44	; 0x2c
   26f12:	4604      	mov	r4, r0
	int *count = data->user_data;
   26f14:	e9d1 6500 	ldrd	r6, r5, [r1]
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   26f18:	f001 fecc 	bl	28cb4 <net_tcp_get_recv_mss>
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
   26f1c:	6827      	ldr	r7, [r4, #0]
   26f1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   26f22:	f8b7 800a 	ldrh.w	r8, [r7, #10]
   26f26:	f8b7 9016 	ldrh.w	r9, [r7, #22]
   26f2a:	9309      	str	r3, [sp, #36]	; 0x24
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   26f2c:	4682      	mov	sl, r0
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   26f2e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
   26f32:	f8d4 b094 	ldr.w	fp, [r4, #148]	; 0x94
   26f36:	f3c0 3043 	ubfx	r0, r0, #13, #4
   26f3a:	f001 ff5b 	bl	28df4 <net_tcp_state_str>
   26f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26f40:	9303      	str	r3, [sp, #12]
   26f42:	ea4f 2209 	mov.w	r2, r9, lsl #8
   26f46:	ea4f 2308 	mov.w	r3, r8, lsl #8
   26f4a:	ea42 2219 	orr.w	r2, r2, r9, lsr #8
   26f4e:	ea43 2318 	orr.w	r3, r3, r8, lsr #8
   26f52:	b292      	uxth	r2, r2
   26f54:	b29b      	uxth	r3, r3
   26f56:	e9cd a005 	strd	sl, r0, [sp, #20]
   26f5a:	9202      	str	r2, [sp, #8]
   26f5c:	e9cd 7300 	strd	r7, r3, [sp]
   26f60:	f8cd b010 	str.w	fp, [sp, #16]
   26f64:	4623      	mov	r3, r4
   26f66:	4a05      	ldr	r2, [pc, #20]	; (26f7c <tcp_cb+0x70>)
   26f68:	2100      	movs	r1, #0
   26f6a:	4630      	mov	r0, r6
   26f6c:	f7dc fa2e 	bl	33cc <shell_fprintf>
	(*count)++;
   26f70:	682b      	ldr	r3, [r5, #0]
   26f72:	3301      	adds	r3, #1
   26f74:	602b      	str	r3, [r5, #0]
}
   26f76:	b00b      	add	sp, #44	; 0x2c
   26f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f7c:	00034a9d 	.word	0x00034a9d

00026f80 <cmd_net_allocs.part.26>:
static int cmd_net_tcp(const struct shell *shell, size_t argc, char *argv[])
   26f80:	b508      	push	{r3, lr}
		shell_help_print(shell, NULL, 0);
   26f82:	2200      	movs	r2, #0
   26f84:	4611      	mov	r1, r2
   26f86:	f7dc fb25 	bl	35d4 <shell_help_print>
}
   26f8a:	f06f 0007 	mvn.w	r0, #7
   26f8e:	bd08      	pop	{r3, pc}

00026f90 <cmd_net_tcp>:
	if (shell_help_requested(shell)) {
   26f90:	6883      	ldr	r3, [r0, #8]
   26f92:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   26f96:	f3c3 0340 	ubfx	r3, r3, #1, #1
   26f9a:	b10b      	cbz	r3, 26fa0 <cmd_net_tcp+0x10>
   26f9c:	f7ff bff0 	b.w	26f80 <cmd_net_allocs.part.26>
}
   26fa0:	4618      	mov	r0, r3
   26fa2:	4770      	bx	lr

00026fa4 <cmd_net_vlan>:
{
   26fa4:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   26fa6:	6883      	ldr	r3, [r0, #8]
   26fa8:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   26fac:	f3c4 0440 	ubfx	r4, r4, #1, #1
   26fb0:	b11c      	cbz	r4, 26fba <cmd_net_vlan+0x16>
}
   26fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26fb6:	f7ff bfe3 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Set CONFIG_NET_VLAN to enable virtual LAN support.\n");
   26fba:	4a03      	ldr	r2, [pc, #12]	; (26fc8 <cmd_net_vlan+0x24>)
   26fbc:	2103      	movs	r1, #3
   26fbe:	f7dc fa05 	bl	33cc <shell_fprintf>
}
   26fc2:	4620      	mov	r0, r4
   26fc4:	bd10      	pop	{r4, pc}
   26fc6:	bf00      	nop
   26fc8:	00033d05 	.word	0x00033d05

00026fcc <cmd_net_vlan_del>:
{
   26fcc:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   26fce:	6883      	ldr	r3, [r0, #8]
   26fd0:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   26fd4:	f3c4 0440 	ubfx	r4, r4, #1, #1
   26fd8:	b11c      	cbz	r4, 26fe2 <cmd_net_vlan_del+0x16>
}
   26fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26fde:	f7ff bfcf 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Set CONFIG_NET_VLAN to enable virtual LAN support.\n");
   26fe2:	4a03      	ldr	r2, [pc, #12]	; (26ff0 <cmd_net_vlan_del+0x24>)
   26fe4:	2103      	movs	r1, #3
   26fe6:	f7dc f9f1 	bl	33cc <shell_fprintf>
}
   26fea:	4620      	mov	r0, r4
   26fec:	bd10      	pop	{r4, pc}
   26fee:	bf00      	nop
   26ff0:	00033d05 	.word	0x00033d05

00026ff4 <cmd_net_vlan_add>:
{
   26ff4:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   26ff6:	6883      	ldr	r3, [r0, #8]
   26ff8:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   26ffc:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27000:	b11c      	cbz	r4, 2700a <cmd_net_vlan_add+0x16>
}
   27002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27006:	f7ff bfbb 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Set CONFIG_NET_VLAN to enable virtual LAN support.\n");
   2700a:	4a03      	ldr	r2, [pc, #12]	; (27018 <cmd_net_vlan_add+0x24>)
   2700c:	2103      	movs	r1, #3
   2700e:	f7dc f9dd 	bl	33cc <shell_fprintf>
}
   27012:	4620      	mov	r0, r4
   27014:	bd10      	pop	{r4, pc}
   27016:	bf00      	nop
   27018:	00033d05 	.word	0x00033d05

0002701c <cmd_net_stats>:
{
   2701c:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2701e:	6883      	ldr	r3, [r0, #8]
   27020:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27024:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27028:	b11c      	cbz	r4, 27032 <cmd_net_stats+0x16>
}
   2702a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2702e:	f7ff bfa7 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Network statistics not enabled. Set CONFIG_NET_STATISTICS "
   27032:	4a03      	ldr	r2, [pc, #12]	; (27040 <cmd_net_stats+0x24>)
   27034:	2103      	movs	r1, #3
   27036:	f7dc f9c9 	bl	33cc <shell_fprintf>
}
   2703a:	4620      	mov	r0, r4
   2703c:	bd10      	pop	{r4, pc}
   2703e:	bf00      	nop
   27040:	00033b4d 	.word	0x00033b4d

00027044 <cmd_net_stats_iface>:
{
   27044:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   27046:	6883      	ldr	r3, [r0, #8]
   27048:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   2704c:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27050:	b11c      	cbz	r4, 2705a <cmd_net_stats_iface+0x16>
}
   27052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27056:	f7ff bf93 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Network statistics not enabled. Set CONFIG_NET_STATISTICS "
   2705a:	4a03      	ldr	r2, [pc, #12]	; (27068 <cmd_net_stats_iface+0x24>)
   2705c:	2103      	movs	r1, #3
   2705e:	f7dc f9b5 	bl	33cc <shell_fprintf>
}
   27062:	4620      	mov	r0, r4
   27064:	bd10      	pop	{r4, pc}
   27066:	bf00      	nop
   27068:	00033b4d 	.word	0x00033b4d

0002706c <cmd_net_stats_all>:
{
   2706c:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2706e:	6883      	ldr	r3, [r0, #8]
   27070:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27074:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27078:	b11c      	cbz	r4, 27082 <cmd_net_stats_all+0x16>
}
   2707a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2707e:	f7ff bf7f 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Network statistics not enabled. Set CONFIG_NET_STATISTICS "
   27082:	4a03      	ldr	r2, [pc, #12]	; (27090 <cmd_net_stats_all+0x24>)
   27084:	2103      	movs	r1, #3
   27086:	f7dc f9a1 	bl	33cc <shell_fprintf>
}
   2708a:	4620      	mov	r0, r4
   2708c:	bd10      	pop	{r4, pc}
   2708e:	bf00      	nop
   27090:	00033b4d 	.word	0x00033b4d

00027094 <cmd_net_stacks>:
{
   27094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (shell_help_requested(shell)) {
   27098:	6883      	ldr	r3, [r0, #8]
   2709a:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   2709e:	079b      	lsls	r3, r3, #30
{
   270a0:	b08c      	sub	sp, #48	; 0x30
   270a2:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   270a4:	f140 8089 	bpl.w	271ba <cmd_net_stacks+0x126>
		shell_help_print(shell, NULL, 0);
   270a8:	2200      	movs	r2, #0
   270aa:	4611      	mov	r1, r2
   270ac:	f7dc fa92 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   270b0:	f06f 0007 	mvn.w	r0, #7
}
   270b4:	b00c      	add	sp, #48	; 0x30
   270b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   270ba:	6921      	ldr	r1, [r4, #16]
   270bc:	6820      	ldr	r0, [r4, #0]
   270be:	f7ff fcdc 	bl	26a7a <net_analyze_stack_get_values>
		if (info->idx >= 0) {
   270c2:	f8d4 e018 	ldr.w	lr, [r4, #24]
   270c6:	6923      	ldr	r3, [r4, #16]
   270c8:	f1be 0f00 	cmp.w	lr, #0
   270cc:	e9dd c20a 	ldrd	ip, r2, [sp, #40]	; 0x28
   270d0:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   270d4:	db61      	blt.n	2719a <cmd_net_stacks+0x106>
			PR("%s-%d [%s-%d] stack size %zu/%zu bytes "
   270d6:	e9cd 3c07 	strd	r3, ip, [sp, #28]
   270da:	eba3 0c02 	sub.w	ip, r3, r2
   270de:	e9cd 2c05 	strd	r2, ip, [sp, #20]
   270e2:	e9cd 0303 	strd	r0, r3, [sp, #12]
   270e6:	e9cd 1e01 	strd	r1, lr, [sp, #4]
   270ea:	6963      	ldr	r3, [r4, #20]
   270ec:	9300      	str	r3, [sp, #0]
   270ee:	6863      	ldr	r3, [r4, #4]
   270f0:	4642      	mov	r2, r8
   270f2:	2100      	movs	r1, #0
   270f4:	4628      	mov	r0, r5
   270f6:	f7dc f969 	bl	33cc <shell_fprintf>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   270fa:	3420      	adds	r4, #32
   270fc:	42b4      	cmp	r4, r6
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   270fe:	ab0b      	add	r3, sp, #44	; 0x2c
   27100:	aa0a      	add	r2, sp, #40	; 0x28
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   27102:	d1da      	bne.n	270ba <cmd_net_stacks+0x26>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
   27104:	f44f 6100 	mov.w	r1, #2048	; 0x800
   27108:	482f      	ldr	r0, [pc, #188]	; (271c8 <cmd_net_stacks+0x134>)
   2710a:	f7ff fcb6 	bl	26a7a <net_analyze_stack_get_values>
	PR("%s [%s] stack size %d/%d bytes unused %u usage %d/%d (%u %%)\n",
   2710e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   27112:	f44f 6400 	mov.w	r4, #2048	; 0x800
   27116:	9206      	str	r2, [sp, #24]
   27118:	1ae2      	subs	r2, r4, r3
   2711a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   2711e:	4b2b      	ldr	r3, [pc, #172]	; (271cc <cmd_net_stacks+0x138>)
   27120:	9300      	str	r3, [sp, #0]
   27122:	4a2b      	ldr	r2, [pc, #172]	; (271d0 <cmd_net_stacks+0x13c>)
   27124:	4b2b      	ldr	r3, [pc, #172]	; (271d4 <cmd_net_stacks+0x140>)
   27126:	9405      	str	r4, [sp, #20]
   27128:	2100      	movs	r1, #0
   2712a:	4628      	mov	r0, r5
   2712c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   27130:	f7dc f94c 	bl	33cc <shell_fprintf>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
   27134:	ab0b      	add	r3, sp, #44	; 0x2c
   27136:	aa0a      	add	r2, sp, #40	; 0x28
   27138:	4621      	mov	r1, r4
   2713a:	4827      	ldr	r0, [pc, #156]	; (271d8 <cmd_net_stacks+0x144>)
   2713c:	f7ff fc9d 	bl	26a7a <net_analyze_stack_get_values>
	PR("%s [%s] stack size %d/%d bytes unused %u usage %d/%d (%u %%)\n",
   27140:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   27144:	e9cd 4205 	strd	r4, r2, [sp, #20]
   27148:	1ae2      	subs	r2, r4, r3
   2714a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   2714e:	4b23      	ldr	r3, [pc, #140]	; (271dc <cmd_net_stacks+0x148>)
   27150:	9300      	str	r3, [sp, #0]
   27152:	4a1f      	ldr	r2, [pc, #124]	; (271d0 <cmd_net_stacks+0x13c>)
   27154:	4b22      	ldr	r3, [pc, #136]	; (271e0 <cmd_net_stacks+0x14c>)
   27156:	2100      	movs	r1, #0
   27158:	4628      	mov	r0, r5
   2715a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2715e:	f7dc f935 	bl	33cc <shell_fprintf>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
   27162:	ab0b      	add	r3, sp, #44	; 0x2c
   27164:	aa0a      	add	r2, sp, #40	; 0x28
   27166:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2716a:	481e      	ldr	r0, [pc, #120]	; (271e4 <cmd_net_stacks+0x150>)
   2716c:	f7ff fc85 	bl	26a7a <net_analyze_stack_get_values>
	PR("%s [%s] stack size %d/%d bytes unused %u usage %d/%d (%u %%)\n",
   27170:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   27174:	9306      	str	r3, [sp, #24]
   27176:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2717a:	1a99      	subs	r1, r3, r2
   2717c:	9305      	str	r3, [sp, #20]
   2717e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   27182:	4b19      	ldr	r3, [pc, #100]	; (271e8 <cmd_net_stacks+0x154>)
   27184:	9300      	str	r3, [sp, #0]
   27186:	e9cd 2103 	strd	r2, r1, [sp, #12]
   2718a:	4628      	mov	r0, r5
   2718c:	4b17      	ldr	r3, [pc, #92]	; (271ec <cmd_net_stacks+0x158>)
   2718e:	4a10      	ldr	r2, [pc, #64]	; (271d0 <cmd_net_stacks+0x13c>)
   27190:	2100      	movs	r1, #0
   27192:	f7dc f91b 	bl	33cc <shell_fprintf>
   27196:	2000      	movs	r0, #0
   27198:	e78c      	b.n	270b4 <cmd_net_stacks+0x20>
			PR("%s [%s] stack size %zu/%zu bytes unused %u "
   2719a:	e9cd 3c05 	strd	r3, ip, [sp, #20]
   2719e:	eba3 0c02 	sub.w	ip, r3, r2
   271a2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
   271a6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   271aa:	9100      	str	r1, [sp, #0]
   271ac:	6863      	ldr	r3, [r4, #4]
   271ae:	463a      	mov	r2, r7
   271b0:	2100      	movs	r1, #0
   271b2:	4628      	mov	r0, r5
   271b4:	f7dc f90a 	bl	33cc <shell_fprintf>
   271b8:	e79f      	b.n	270fa <cmd_net_stacks+0x66>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   271ba:	4c0d      	ldr	r4, [pc, #52]	; (271f0 <cmd_net_stacks+0x15c>)
   271bc:	4e0d      	ldr	r6, [pc, #52]	; (271f4 <cmd_net_stacks+0x160>)
			PR("%s [%s] stack size %zu/%zu bytes unused %u "
   271be:	4f0e      	ldr	r7, [pc, #56]	; (271f8 <cmd_net_stacks+0x164>)
			PR("%s-%d [%s-%d] stack size %zu/%zu bytes "
   271c0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 271fc <cmd_net_stacks+0x168>
   271c4:	e79a      	b.n	270fc <cmd_net_stacks+0x68>
   271c6:	bf00      	nop
   271c8:	2000b6d8 	.word	0x2000b6d8
   271cc:	00033b19 	.word	0x00033b19
   271d0:	00033adb 	.word	0x00033adb
   271d4:	00033ad6 	.word	0x00033ad6
   271d8:	2000c018 	.word	0x2000c018
   271dc:	00033b25 	.word	0x00033b25
   271e0:	0002e782 	.word	0x0002e782
   271e4:	2000c818 	.word	0x2000c818
   271e8:	00033b3c 	.word	0x00033b3c
   271ec:	00033b36 	.word	0x00033b36
   271f0:	2000da40 	.word	0x2000da40
   271f4:	2000daa0 	.word	0x2000daa0
   271f8:	00033a94 	.word	0x00033a94
   271fc:	00033a4c 	.word	0x00033a4c

00027200 <cmd_net_rpl>:
{
   27200:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   27202:	6883      	ldr	r3, [r0, #8]
   27204:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27208:	f3c4 0440 	ubfx	r4, r4, #1, #1
   2720c:	b11c      	cbz	r4, 27216 <cmd_net_rpl+0x16>
}
   2720e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27212:	f7ff beb5 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   27216:	4a03      	ldr	r2, [pc, #12]	; (27224 <cmd_net_rpl+0x24>)
   27218:	2103      	movs	r1, #3
   2721a:	f7dc f8d7 	bl	33cc <shell_fprintf>
}
   2721e:	4620      	mov	r0, r4
   27220:	bd10      	pop	{r4, pc}
   27222:	bf00      	nop
   27224:	00033a19 	.word	0x00033a19

00027228 <cmd_net_http>:
{
   27228:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2722a:	6883      	ldr	r3, [r0, #8]
   2722c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27230:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27234:	b11c      	cbz	r4, 2723e <cmd_net_http+0x16>
}
   27236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2723a:	f7ff bea1 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   2723e:	4a03      	ldr	r2, [pc, #12]	; (2724c <cmd_net_http+0x24>)
   27240:	2103      	movs	r1, #3
   27242:	f7dc f8c3 	bl	33cc <shell_fprintf>
}
   27246:	4620      	mov	r0, r4
   27248:	bd10      	pop	{r4, pc}
   2724a:	bf00      	nop
   2724c:	000334e4 	.word	0x000334e4

00027250 <cmd_net_http_monitor>:
{
   27250:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   27252:	6883      	ldr	r3, [r0, #8]
   27254:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27258:	f3c4 0440 	ubfx	r4, r4, #1, #1
   2725c:	b11c      	cbz	r4, 27266 <cmd_net_http_monitor+0x16>
}
   2725e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27262:	f7ff be8d 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   27266:	4a03      	ldr	r2, [pc, #12]	; (27274 <cmd_net_http_monitor+0x24>)
   27268:	2103      	movs	r1, #3
   2726a:	f7dc f8af 	bl	33cc <shell_fprintf>
}
   2726e:	4620      	mov	r0, r4
   27270:	bd10      	pop	{r4, pc}
   27272:	bf00      	nop
   27274:	000334e4 	.word	0x000334e4

00027278 <cmd_net_gptp>:
{
   27278:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2727a:	6883      	ldr	r3, [r0, #8]
   2727c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27280:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27284:	b11c      	cbz	r4, 2728e <cmd_net_gptp+0x16>
}
   27286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2728a:	f7ff be79 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("gPTP not supported, set CONFIG_NET_GPTP to enable it.\n");
   2728e:	4a03      	ldr	r2, [pc, #12]	; (2729c <cmd_net_gptp+0x24>)
   27290:	2103      	movs	r1, #3
   27292:	f7dc f89b 	bl	33cc <shell_fprintf>
}
   27296:	4620      	mov	r0, r4
   27298:	bd10      	pop	{r4, pc}
   2729a:	bf00      	nop
   2729c:	000334ad 	.word	0x000334ad

000272a0 <cmd_net_gptp_port>:
{
   272a0:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   272a2:	6883      	ldr	r3, [r0, #8]
   272a4:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   272a8:	f3c4 0440 	ubfx	r4, r4, #1, #1
   272ac:	b11c      	cbz	r4, 272b6 <cmd_net_gptp_port+0x16>
}
   272ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   272b2:	f7ff be65 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("gPTP not supported, set CONFIG_NET_GPTP to enable it.\n");
   272b6:	4a03      	ldr	r2, [pc, #12]	; (272c4 <cmd_net_gptp_port+0x24>)
   272b8:	2103      	movs	r1, #3
   272ba:	f7dc f887 	bl	33cc <shell_fprintf>
}
   272be:	4620      	mov	r0, r4
   272c0:	bd10      	pop	{r4, pc}
   272c2:	bf00      	nop
   272c4:	000334ad 	.word	0x000334ad

000272c8 <cmd_net_dns>:
{
   272c8:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   272ca:	6883      	ldr	r3, [r0, #8]
   272cc:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   272d0:	f3c4 0440 	ubfx	r4, r4, #1, #1
   272d4:	b11c      	cbz	r4, 272de <cmd_net_dns+0x16>
}
   272d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   272da:	f7ff be51 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
   272de:	4a03      	ldr	r2, [pc, #12]	; (272ec <cmd_net_dns+0x24>)
   272e0:	2103      	movs	r1, #3
   272e2:	f7dc f873 	bl	33cc <shell_fprintf>
}
   272e6:	4620      	mov	r0, r4
   272e8:	bd10      	pop	{r4, pc}
   272ea:	bf00      	nop
   272ec:	0003346a 	.word	0x0003346a

000272f0 <cmd_net_dns_query>:
{
   272f0:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   272f2:	6883      	ldr	r3, [r0, #8]
   272f4:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   272f8:	f3c4 0440 	ubfx	r4, r4, #1, #1
   272fc:	b11c      	cbz	r4, 27306 <cmd_net_dns_query+0x16>
}
   272fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27302:	f7ff be3d 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
   27306:	4a03      	ldr	r2, [pc, #12]	; (27314 <cmd_net_dns_query+0x24>)
   27308:	2103      	movs	r1, #3
   2730a:	f7dc f85f 	bl	33cc <shell_fprintf>
}
   2730e:	4620      	mov	r0, r4
   27310:	bd10      	pop	{r4, pc}
   27312:	bf00      	nop
   27314:	0003346a 	.word	0x0003346a

00027318 <cmd_net_dns_cancel>:
{
   27318:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2731a:	6883      	ldr	r3, [r0, #8]
   2731c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27320:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27324:	b11c      	cbz	r4, 2732e <cmd_net_dns_cancel+0x16>
}
   27326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2732a:	f7ff be29 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
   2732e:	4a03      	ldr	r2, [pc, #12]	; (2733c <cmd_net_dns_cancel+0x24>)
   27330:	2103      	movs	r1, #3
   27332:	f7dc f84b 	bl	33cc <shell_fprintf>
}
   27336:	4620      	mov	r0, r4
   27338:	bd10      	pop	{r4, pc}
   2733a:	bf00      	nop
   2733c:	0003346a 	.word	0x0003346a

00027340 <cmd_net_arp_flush>:
{
   27340:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   27342:	6883      	ldr	r3, [r0, #8]
   27344:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27348:	f3c4 0440 	ubfx	r4, r4, #1, #1
   2734c:	b11c      	cbz	r4, 27356 <cmd_net_arp_flush+0x16>
}
   2734e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27352:	f7ff be15 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   27356:	4a03      	ldr	r2, [pc, #12]	; (27364 <cmd_net_arp_flush+0x24>)
   27358:	2103      	movs	r1, #3
   2735a:	f7dc f837 	bl	33cc <shell_fprintf>
}
   2735e:	4620      	mov	r0, r4
   27360:	bd10      	pop	{r4, pc}
   27362:	bf00      	nop
   27364:	00033325 	.word	0x00033325

00027368 <cmd_net_app>:
{
   27368:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   2736a:	6883      	ldr	r3, [r0, #8]
   2736c:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27370:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27374:	b11c      	cbz	r4, 2737e <cmd_net_app+0x16>
}
   27376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2737a:	f7ff be01 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_APP_LOG_LEVEL_DBG and either "
   2737e:	4a03      	ldr	r2, [pc, #12]	; (2738c <cmd_net_app+0x24>)
   27380:	2103      	movs	r1, #3
   27382:	f7dc f823 	bl	33cc <shell_fprintf>
}
   27386:	4620      	mov	r0, r4
   27388:	bd10      	pop	{r4, pc}
   2738a:	bf00      	nop
   2738c:	0003329b 	.word	0x0003329b

00027390 <cmd_net_allocs>:
{
   27390:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   27392:	6883      	ldr	r3, [r0, #8]
   27394:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27398:	f3c4 0440 	ubfx	r4, r4, #1, #1
   2739c:	b11c      	cbz	r4, 273a6 <cmd_net_allocs+0x16>
}
   2739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   273a2:	f7ff bded 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   273a6:	4a03      	ldr	r2, [pc, #12]	; (273b4 <cmd_net_allocs+0x24>)
   273a8:	2103      	movs	r1, #3
   273aa:	f7dc f80f 	bl	33cc <shell_fprintf>
}
   273ae:	4620      	mov	r0, r4
   273b0:	bd10      	pop	{r4, pc}
   273b2:	bf00      	nop
   273b4:	00033266 	.word	0x00033266

000273b8 <tcp_connected>:
{
   273b8:	4b0b      	ldr	r3, [pc, #44]	; (273e8 <tcp_connected+0x30>)
   273ba:	b510      	push	{r4, lr}
   273bc:	4604      	mov	r4, r0
   273be:	6818      	ldr	r0, [r3, #0]
	if (status < 0) {
   273c0:	1e0b      	subs	r3, r1, #0
   273c2:	da0a      	bge.n	273da <tcp_connected+0x22>
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
   273c4:	4a09      	ldr	r2, [pc, #36]	; (273ec <tcp_connected+0x34>)
   273c6:	2100      	movs	r1, #0
   273c8:	f7dc f800 	bl	33cc <shell_fprintf>
		net_context_put(context);
   273cc:	4620      	mov	r0, r4
   273ce:	f7f7 fe55 	bl	1f07c <net_context_put>
		tcp_ctx = NULL;
   273d2:	4b07      	ldr	r3, [pc, #28]	; (273f0 <tcp_connected+0x38>)
   273d4:	2200      	movs	r2, #0
   273d6:	601a      	str	r2, [r3, #0]
}
   273d8:	bd10      	pop	{r4, pc}
		PR_SHELL(tcp_shell, "TCP connected\n");
   273da:	4a06      	ldr	r2, [pc, #24]	; (273f4 <tcp_connected+0x3c>)
   273dc:	2100      	movs	r1, #0
}
   273de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PR_SHELL(tcp_shell, "TCP connected\n");
   273e2:	f7db bff3 	b.w	33cc <shell_fprintf>
   273e6:	bf00      	nop
   273e8:	200028b4 	.word	0x200028b4
   273ec:	00034ac4 	.word	0x00034ac4
   273f0:	200028b0 	.word	0x200028b0
   273f4:	00034ae0 	.word	0x00034ae0

000273f8 <cmd_net_tcp_close>:
{
   273f8:	b570      	push	{r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   273fa:	6883      	ldr	r3, [r0, #8]
   273fc:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27400:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   27404:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   27406:	b11c      	cbz	r4, 27410 <cmd_net_tcp_close+0x18>
}
   27408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2740c:	f7ff bdb8 	b.w	26f80 <cmd_net_allocs.part.26>
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   27410:	4e10      	ldr	r6, [pc, #64]	; (27454 <cmd_net_tcp_close+0x5c>)
   27412:	6830      	ldr	r0, [r6, #0]
   27414:	b938      	cbnz	r0, 27426 <cmd_net_tcp_close+0x2e>
		PR_WARNING("Not connected\n");
   27416:	4a10      	ldr	r2, [pc, #64]	; (27458 <cmd_net_tcp_close+0x60>)
   27418:	2104      	movs	r1, #4
   2741a:	4628      	mov	r0, r5
   2741c:	f7db ffd6 	bl	33cc <shell_fprintf>
		return -ENOEXEC;
   27420:	f06f 0007 	mvn.w	r0, #7
}
   27424:	bd70      	pop	{r4, r5, r6, pc}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   27426:	f7ff fb43 	bl	26ab0 <net_context_is_used>
   2742a:	2800      	cmp	r0, #0
   2742c:	d0f3      	beq.n	27416 <cmd_net_tcp_close+0x1e>
	ret = net_context_put(tcp_ctx);
   2742e:	6830      	ldr	r0, [r6, #0]
   27430:	f7f7 fe24 	bl	1f07c <net_context_put>
	if (ret < 0) {
   27434:	1e03      	subs	r3, r0, #0
   27436:	da05      	bge.n	27444 <cmd_net_tcp_close+0x4c>
		PR_WARNING("Cannot close the connection (%d)\n", ret);
   27438:	4a08      	ldr	r2, [pc, #32]	; (2745c <cmd_net_tcp_close+0x64>)
   2743a:	2104      	movs	r1, #4
   2743c:	4628      	mov	r0, r5
   2743e:	f7db ffc5 	bl	33cc <shell_fprintf>
   27442:	e7ed      	b.n	27420 <cmd_net_tcp_close+0x28>
	PR("Connection closed.\n");
   27444:	4628      	mov	r0, r5
   27446:	4a06      	ldr	r2, [pc, #24]	; (27460 <cmd_net_tcp_close+0x68>)
   27448:	4621      	mov	r1, r4
   2744a:	f7db ffbf 	bl	33cc <shell_fprintf>
	tcp_ctx = NULL;
   2744e:	6034      	str	r4, [r6, #0]
	return 0;
   27450:	4620      	mov	r0, r4
   27452:	e7e7      	b.n	27424 <cmd_net_tcp_close+0x2c>
   27454:	200028b0 	.word	0x200028b0
   27458:	00033b96 	.word	0x00033b96
   2745c:	00033ba5 	.word	0x00033ba5
   27460:	00033bc7 	.word	0x00033bc7

00027464 <get_iface_idx>:
{
   27464:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27466:	4605      	mov	r5, r0
	if (!index_str) {
   27468:	460c      	mov	r4, r1
   2746a:	b939      	cbnz	r1, 2747c <get_iface_idx+0x18>
		PR_WARNING("Interface index is missing.\n");
   2746c:	4a11      	ldr	r2, [pc, #68]	; (274b4 <get_iface_idx+0x50>)
   2746e:	2104      	movs	r1, #4
   27470:	f7db ffac 	bl	33cc <shell_fprintf>
   27474:	f06f 0015 	mvn.w	r0, #21
}
   27478:	b003      	add	sp, #12
   2747a:	bd30      	pop	{r4, r5, pc}
	idx = strtol(index_str, &endptr, 10);
   2747c:	220a      	movs	r2, #10
   2747e:	a901      	add	r1, sp, #4
   27480:	4620      	mov	r0, r4
   27482:	f7de fbfd 	bl	5c80 <strtol>
	if (*endptr != '\0') {
   27486:	9b01      	ldr	r3, [sp, #4]
   27488:	781b      	ldrb	r3, [r3, #0]
   2748a:	b143      	cbz	r3, 2749e <get_iface_idx+0x3a>
		PR_WARNING("Invalid index %s\n", index_str);
   2748c:	4628      	mov	r0, r5
   2748e:	4623      	mov	r3, r4
   27490:	4a09      	ldr	r2, [pc, #36]	; (274b8 <get_iface_idx+0x54>)
   27492:	2104      	movs	r1, #4
   27494:	f7db ff9a 	bl	33cc <shell_fprintf>
		return -ENOENT;
   27498:	f06f 0001 	mvn.w	r0, #1
   2749c:	e7ec      	b.n	27478 <get_iface_idx+0x14>
	if (idx < 0 || idx > 255) {
   2749e:	28ff      	cmp	r0, #255	; 0xff
   274a0:	d9ea      	bls.n	27478 <get_iface_idx+0x14>
		PR_WARNING("Invalid index %d\n", idx);
   274a2:	4603      	mov	r3, r0
   274a4:	4a05      	ldr	r2, [pc, #20]	; (274bc <get_iface_idx+0x58>)
   274a6:	4628      	mov	r0, r5
   274a8:	2104      	movs	r1, #4
   274aa:	f7db ff8f 	bl	33cc <shell_fprintf>
		return -ERANGE;
   274ae:	f06f 0025 	mvn.w	r0, #37	; 0x25
   274b2:	e7e1      	b.n	27478 <get_iface_idx+0x14>
   274b4:	00033d91 	.word	0x00033d91
   274b8:	00033dae 	.word	0x00033dae
   274bc:	00033dc0 	.word	0x00033dc0

000274c0 <cmd_net_iface_down>:
{
   274c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   274c2:	6883      	ldr	r3, [r0, #8]
   274c4:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   274c8:	079b      	lsls	r3, r3, #30
{
   274ca:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   274cc:	d506      	bpl.n	274dc <cmd_net_iface_down+0x1c>
		shell_help_print(shell, NULL, 0);
   274ce:	2200      	movs	r2, #0
   274d0:	4611      	mov	r1, r2
   274d2:	f7dc f87f 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   274d6:	f06f 0407 	mvn.w	r4, #7
   274da:	e021      	b.n	27520 <cmd_net_iface_down+0x60>
	idx = get_iface_idx(shell, argv[1]);
   274dc:	6851      	ldr	r1, [r2, #4]
   274de:	f7ff ffc1 	bl	27464 <get_iface_idx>
	if (idx < 0) {
   274e2:	1e06      	subs	r6, r0, #0
   274e4:	dbf7      	blt.n	274d6 <cmd_net_iface_down+0x16>
	iface = net_if_get_by_index(idx);
   274e6:	b2f0      	uxtb	r0, r6
   274e8:	f7f9 fcd2 	bl	20e90 <net_if_get_by_index>
	if (!iface) {
   274ec:	b930      	cbnz	r0, 274fc <cmd_net_iface_down+0x3c>
		PR_WARNING("No such interface in index %d\n", idx);
   274ee:	4633      	mov	r3, r6
   274f0:	4a0d      	ldr	r2, [pc, #52]	; (27528 <cmd_net_iface_down+0x68>)
   274f2:	2104      	movs	r1, #4
   274f4:	4628      	mov	r0, r5
   274f6:	f7db ff69 	bl	33cc <shell_fprintf>
   274fa:	e7ec      	b.n	274d6 <cmd_net_iface_down+0x16>
	ret = net_if_down(iface);
   274fc:	f7f9 fd5e 	bl	20fbc <net_if_down>
	if (ret) {
   27500:	4604      	mov	r4, r0
   27502:	b138      	cbz	r0, 27514 <cmd_net_iface_down+0x54>
		PR_WARNING("Cannot take interface %d down (%d)\n", idx, ret);
   27504:	9000      	str	r0, [sp, #0]
   27506:	4633      	mov	r3, r6
   27508:	4a08      	ldr	r2, [pc, #32]	; (2752c <cmd_net_iface_down+0x6c>)
   2750a:	2104      	movs	r1, #4
   2750c:	4628      	mov	r0, r5
   2750e:	f7db ff5d 	bl	33cc <shell_fprintf>
   27512:	e7e0      	b.n	274d6 <cmd_net_iface_down+0x16>
		PR("Interface %d is down\n", idx);
   27514:	4601      	mov	r1, r0
   27516:	4633      	mov	r3, r6
   27518:	4a05      	ldr	r2, [pc, #20]	; (27530 <cmd_net_iface_down+0x70>)
   2751a:	4628      	mov	r0, r5
   2751c:	f7db ff56 	bl	33cc <shell_fprintf>
}
   27520:	4620      	mov	r0, r4
   27522:	b002      	add	sp, #8
   27524:	bd70      	pop	{r4, r5, r6, pc}
   27526:	bf00      	nop
   27528:	00033548 	.word	0x00033548
   2752c:	00033567 	.word	0x00033567
   27530:	0003358b 	.word	0x0003358b

00027534 <cmd_net_iface>:
{
   27534:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (shell_help_requested(shell)) {
   27536:	6883      	ldr	r3, [r0, #8]
   27538:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   2753c:	079b      	lsls	r3, r3, #30
{
   2753e:	4604      	mov	r4, r0
	if (shell_help_requested(shell)) {
   27540:	d506      	bpl.n	27550 <cmd_net_iface+0x1c>
		shell_help_print(shell, NULL, 0);
   27542:	2200      	movs	r2, #0
   27544:	4611      	mov	r1, r2
   27546:	f7dc f845 	bl	35d4 <shell_help_print>
			return -ENOEXEC;
   2754a:	f06f 0007 	mvn.w	r0, #7
   2754e:	e018      	b.n	27582 <cmd_net_iface+0x4e>
	if (argv[1]) {
   27550:	6851      	ldr	r1, [r2, #4]
   27552:	b171      	cbz	r1, 27572 <cmd_net_iface+0x3e>
		idx = get_iface_idx(shell, argv[1]);
   27554:	f7ff ff86 	bl	27464 <get_iface_idx>
		if (idx < 0) {
   27558:	1e05      	subs	r5, r0, #0
   2755a:	dbf6      	blt.n	2754a <cmd_net_iface+0x16>
		iface = net_if_get_by_index(idx);
   2755c:	b2e8      	uxtb	r0, r5
   2755e:	f7f9 fc97 	bl	20e90 <net_if_get_by_index>
		if (!iface) {
   27562:	b938      	cbnz	r0, 27574 <cmd_net_iface+0x40>
			PR_WARNING("No such interface in index %d\n", idx);
   27564:	462b      	mov	r3, r5
   27566:	4a08      	ldr	r2, [pc, #32]	; (27588 <cmd_net_iface+0x54>)
   27568:	2104      	movs	r1, #4
   2756a:	4620      	mov	r0, r4
   2756c:	f7db ff2e 	bl	33cc <shell_fprintf>
   27570:	e7eb      	b.n	2754a <cmd_net_iface+0x16>
	struct net_if *iface = NULL;
   27572:	4608      	mov	r0, r1
	user_data.user_data = iface;
   27574:	e9cd 4000 	strd	r4, r0, [sp]
	net_if_foreach(iface_cb, &user_data);
   27578:	4669      	mov	r1, sp
   2757a:	4804      	ldr	r0, [pc, #16]	; (2758c <cmd_net_iface+0x58>)
   2757c:	f7f9 fcc4 	bl	20f08 <net_if_foreach>
	return 0;
   27580:	2000      	movs	r0, #0
}
   27582:	b003      	add	sp, #12
   27584:	bd30      	pop	{r4, r5, pc}
   27586:	bf00      	nop
   27588:	00033548 	.word	0x00033548
   2758c:	00027975 	.word	0x00027975

00027590 <cmd_net_nbr>:
{
   27590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int count = 0;
   27592:	2200      	movs	r2, #0
	if (shell_help_requested(shell)) {
   27594:	6883      	ldr	r3, [r0, #8]
	int count = 0;
   27596:	9201      	str	r2, [sp, #4]
   27598:	f8d3 524c 	ldr.w	r5, [r3, #588]	; 0x24c
   2759c:	f3c5 0540 	ubfx	r5, r5, #1, #1
{
   275a0:	4606      	mov	r6, r0
	if (shell_help_requested(shell)) {
   275a2:	b13d      	cbz	r5, 275b4 <cmd_net_nbr+0x24>
		shell_help_print(shell, NULL, 0);
   275a4:	4611      	mov	r1, r2
   275a6:	f7dc f815 	bl	35d4 <shell_help_print>
   275aa:	f06f 0407 	mvn.w	r4, #7
}
   275ae:	4620      	mov	r0, r4
   275b0:	b004      	add	sp, #16
   275b2:	bd70      	pop	{r4, r5, r6, pc}
	user_data.shell = shell;
   275b4:	9002      	str	r0, [sp, #8]
	user_data.user_data = &count;
   275b6:	ab01      	add	r3, sp, #4
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
   275b8:	a902      	add	r1, sp, #8
   275ba:	4807      	ldr	r0, [pc, #28]	; (275d8 <cmd_net_nbr+0x48>)
	user_data.user_data = &count;
   275bc:	9303      	str	r3, [sp, #12]
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
   275be:	f7fd f8bb 	bl	24738 <net_ipv6_nbr_foreach>
	if (count == 0) {
   275c2:	9c01      	ldr	r4, [sp, #4]
   275c4:	b92c      	cbnz	r4, 275d2 <cmd_net_nbr+0x42>
		PR("No neighbors.\n");
   275c6:	4a05      	ldr	r2, [pc, #20]	; (275dc <cmd_net_nbr+0x4c>)
   275c8:	4621      	mov	r1, r4
   275ca:	4630      	mov	r0, r6
   275cc:	f7db fefe 	bl	33cc <shell_fprintf>
   275d0:	e7ed      	b.n	275ae <cmd_net_nbr+0x1e>
	return 0;
   275d2:	462c      	mov	r4, r5
   275d4:	e7eb      	b.n	275ae <cmd_net_nbr+0x1e>
   275d6:	bf00      	nop
   275d8:	00027f95 	.word	0x00027f95
   275dc:	00033945 	.word	0x00033945

000275e0 <cmd_net_tcp_connect>:
{
   275e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (shell_help_requested(shell)) {
   275e4:	6883      	ldr	r3, [r0, #8]
   275e6:	f8d3 624c 	ldr.w	r6, [r3, #588]	; 0x24c
   275ea:	f3c6 0640 	ubfx	r6, r6, #1, #1
{
   275ee:	b091      	sub	sp, #68	; 0x44
   275f0:	4604      	mov	r4, r0
   275f2:	4617      	mov	r7, r2
	if (shell_help_requested(shell)) {
   275f4:	b146      	cbz	r6, 27608 <cmd_net_tcp_connect+0x28>
		shell_help_print(shell, NULL, 0);
   275f6:	2200      	movs	r2, #0
   275f8:	4611      	mov	r1, r2
   275fa:	f7db ffeb 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   275fe:	f06f 0007 	mvn.w	r0, #7
}
   27602:	b011      	add	sp, #68	; 0x44
   27604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   27608:	4d4a      	ldr	r5, [pc, #296]	; (27734 <cmd_net_tcp_connect+0x154>)
   2760a:	6828      	ldr	r0, [r5, #0]
   2760c:	b140      	cbz	r0, 27620 <cmd_net_tcp_connect+0x40>
   2760e:	f7ff fa4f 	bl	26ab0 <net_context_is_used>
   27612:	b128      	cbz	r0, 27620 <cmd_net_tcp_connect+0x40>
		PR("Already connected\n");
   27614:	4a48      	ldr	r2, [pc, #288]	; (27738 <cmd_net_tcp_connect+0x158>)
   27616:	4631      	mov	r1, r6
		PR_WARNING("Peer port missing.\n");
   27618:	4620      	mov	r0, r4
   2761a:	f7db fed7 	bl	33cc <shell_fprintf>
   2761e:	e7ee      	b.n	275fe <cmd_net_tcp_connect+0x1e>
	if (!argv[++arg]) {
   27620:	f8d7 9004 	ldr.w	r9, [r7, #4]
   27624:	f1b9 0f00 	cmp.w	r9, #0
   27628:	d102      	bne.n	27630 <cmd_net_tcp_connect+0x50>
		PR_WARNING("Peer IP address missing.\n");
   2762a:	4a44      	ldr	r2, [pc, #272]	; (2773c <cmd_net_tcp_connect+0x15c>)
		PR_WARNING("Peer port missing.\n");
   2762c:	2104      	movs	r1, #4
   2762e:	e7f3      	b.n	27618 <cmd_net_tcp_connect+0x38>
	if (!argv[++arg]) {
   27630:	68b8      	ldr	r0, [r7, #8]
   27632:	b908      	cbnz	r0, 27638 <cmd_net_tcp_connect+0x58>
		PR_WARNING("Peer port missing.\n");
   27634:	4a42      	ldr	r2, [pc, #264]	; (27740 <cmd_net_tcp_connect+0x160>)
   27636:	e7f9      	b.n	2762c <cmd_net_tcp_connect+0x4c>
	port = strtol(argv[arg], &endptr, 10);
   27638:	220a      	movs	r2, #10
   2763a:	a903      	add	r1, sp, #12
   2763c:	f7de fb20 	bl	5c80 <strtol>
	if (*endptr != '\0') {
   27640:	9b03      	ldr	r3, [sp, #12]
   27642:	f893 8000 	ldrb.w	r8, [r3]
	port = strtol(argv[arg], &endptr, 10);
   27646:	4606      	mov	r6, r0
	if (*endptr != '\0') {
   27648:	f1b8 0f00 	cmp.w	r8, #0
   2764c:	d006      	beq.n	2765c <cmd_net_tcp_connect+0x7c>
		PR_WARNING("Invalid port %s\n", argv[arg]);
   2764e:	68bb      	ldr	r3, [r7, #8]
   27650:	4a3c      	ldr	r2, [pc, #240]	; (27744 <cmd_net_tcp_connect+0x164>)
   27652:	2104      	movs	r1, #4
   27654:	4620      	mov	r0, r4
   27656:	f7db feb9 	bl	33cc <shell_fprintf>
   2765a:	e7d0      	b.n	275fe <cmd_net_tcp_connect+0x1e>
	struct net_if *iface = net_if_get_default();
   2765c:	f7f8 fb62 	bl	1fd24 <net_if_get_default>
		ret = net_addr_pton(AF_INET6, host,
   27660:	aa0b      	add	r2, sp, #44	; 0x2c
	struct net_if *iface = net_if_get_default();
   27662:	4607      	mov	r7, r0
		ret = net_addr_pton(AF_INET6, host,
   27664:	4649      	mov	r1, r9
   27666:	200a      	movs	r0, #10
   27668:	f7fa fd5c 	bl	22124 <net_addr_pton>
		if (ret < 0) {
   2766c:	2800      	cmp	r0, #0
   2766e:	da06      	bge.n	2767e <cmd_net_tcp_connect+0x9e>
			PR_WARNING("Invalid IPv6 address\n");
   27670:	4a35      	ldr	r2, [pc, #212]	; (27748 <cmd_net_tcp_connect+0x168>)
   27672:	2104      	movs	r1, #4
   27674:	4620      	mov	r0, r4
   27676:	f7db fea9 	bl	33cc <shell_fprintf>
	return 0;
   2767a:	2000      	movs	r0, #0
   2767c:	e7c1      	b.n	27602 <cmd_net_tcp_connect+0x22>
		net_sin6(&addr)->sin6_port = htons(port);
   2767e:	ba76      	rev16	r6, r6
		nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   27680:	a90b      	add	r1, sp, #44	; 0x2c
   27682:	4640      	mov	r0, r8
		net_sin6(&addr)->sin6_port = htons(port);
   27684:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
		nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   27688:	f7fd f87a 	bl	24780 <net_ipv6_nbr_lookup>
		if (nbr) {
   2768c:	b100      	cbz	r0, 27690 <cmd_net_tcp_connect+0xb0>
			iface = nbr->iface;
   2768e:	6887      	ldr	r7, [r0, #8]
	my6addr = net_if_ipv6_select_src_addr(iface,
   27690:	a905      	add	r1, sp, #20
   27692:	4638      	mov	r0, r7
   27694:	f7f9 fae2 	bl	20c5c <net_if_ipv6_select_src_addr>
		family = addr.sa_family = myaddr.sa_family = AF_INET6;
   27698:	260a      	movs	r6, #10
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   2769a:	2210      	movs	r2, #16
   2769c:	4601      	mov	r1, r0
   2769e:	a805      	add	r0, sp, #20
   276a0:	f7de fbf2 	bl	5e88 <memcpy>
			PR("Connecting from [%s]:%u ",
   276a4:	a905      	add	r1, sp, #20
   276a6:	4630      	mov	r0, r6
		family = addr.sa_family = myaddr.sa_family = AF_INET6;
   276a8:	9604      	str	r6, [sp, #16]
   276aa:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
			PR("Connecting from [%s]:%u ",
   276ae:	f7fa fd23 	bl	220f8 <net_sprint_addr>
   276b2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   276b6:	0213      	lsls	r3, r2, #8
   276b8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   276bc:	b29b      	uxth	r3, r3
   276be:	4a23      	ldr	r2, [pc, #140]	; (2774c <cmd_net_tcp_connect+0x16c>)
   276c0:	9300      	str	r3, [sp, #0]
   276c2:	2100      	movs	r1, #0
   276c4:	4603      	mov	r3, r0
   276c6:	4620      	mov	r0, r4
   276c8:	f7db fe80 	bl	33cc <shell_fprintf>
			PR("to [%s]:%u\n",
   276cc:	a90b      	add	r1, sp, #44	; 0x2c
   276ce:	4630      	mov	r0, r6
   276d0:	f7fa fd12 	bl	220f8 <net_sprint_addr>
   276d4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   276d8:	0213      	lsls	r3, r2, #8
   276da:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   276de:	b29b      	uxth	r3, r3
   276e0:	9300      	str	r3, [sp, #0]
   276e2:	4a1b      	ldr	r2, [pc, #108]	; (27750 <cmd_net_tcp_connect+0x170>)
   276e4:	4603      	mov	r3, r0
   276e6:	2100      	movs	r1, #0
   276e8:	4620      	mov	r0, r4
   276ea:	f7db fe6f 	bl	33cc <shell_fprintf>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   276ee:	4b11      	ldr	r3, [pc, #68]	; (27734 <cmd_net_tcp_connect+0x154>)
   276f0:	2206      	movs	r2, #6
   276f2:	2101      	movs	r1, #1
   276f4:	4630      	mov	r0, r6
   276f6:	f7f7 fb31 	bl	1ed5c <net_context_get>
	if (ret < 0) {
   276fa:	1e03      	subs	r3, r0, #0
   276fc:	da05      	bge.n	2770a <cmd_net_tcp_connect+0x12a>
		PR_WARNING("Cannot get TCP context (%d)\n", ret);
   276fe:	4a15      	ldr	r2, [pc, #84]	; (27754 <cmd_net_tcp_connect+0x174>)
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
   27700:	2104      	movs	r1, #4
   27702:	4620      	mov	r0, r4
   27704:	f7db fe62 	bl	33cc <shell_fprintf>
   27708:	e7b7      	b.n	2767a <cmd_net_tcp_connect+0x9a>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   2770a:	2218      	movs	r2, #24
   2770c:	a904      	add	r1, sp, #16
   2770e:	6828      	ldr	r0, [r5, #0]
   27710:	f7f7 fcf0 	bl	1f0f4 <net_context_bind>
	if (ret < 0) {
   27714:	1e03      	subs	r3, r0, #0
   27716:	da01      	bge.n	2771c <cmd_net_tcp_connect+0x13c>
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
   27718:	4a0f      	ldr	r2, [pc, #60]	; (27758 <cmd_net_tcp_connect+0x178>)
   2771a:	e7f1      	b.n	27700 <cmd_net_tcp_connect+0x120>
	tcp_shell = shell;
   2771c:	4b0f      	ldr	r3, [pc, #60]	; (2775c <cmd_net_tcp_connect+0x17c>)
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   2771e:	6828      	ldr	r0, [r5, #0]
	tcp_shell = shell;
   27720:	601c      	str	r4, [r3, #0]
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   27722:	2400      	movs	r4, #0
   27724:	e9cd 4400 	strd	r4, r4, [sp]
   27728:	4b0d      	ldr	r3, [pc, #52]	; (27760 <cmd_net_tcp_connect+0x180>)
   2772a:	2218      	movs	r2, #24
   2772c:	a90a      	add	r1, sp, #40	; 0x28
   2772e:	f7f7 fea5 	bl	1f47c <net_context_connect>
   27732:	e7a2      	b.n	2767a <cmd_net_tcp_connect+0x9a>
   27734:	200028b0 	.word	0x200028b0
   27738:	00033bdb 	.word	0x00033bdb
   2773c:	00033bee 	.word	0x00033bee
   27740:	00033c08 	.word	0x00033c08
   27744:	00033c1c 	.word	0x00033c1c
   27748:	00033c2d 	.word	0x00033c2d
   2774c:	00033c43 	.word	0x00033c43
   27750:	00033c5c 	.word	0x00033c5c
   27754:	00033c68 	.word	0x00033c68
   27758:	00033c85 	.word	0x00033c85
   2775c:	200028b4 	.word	0x200028b4
   27760:	000273b9 	.word	0x000273b9

00027764 <context_cb>:
{
   27764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27768:	4604      	mov	r4, r0
   2776a:	b0a1      	sub	sp, #132	; 0x84
	int *count = data->user_data;
   2776c:	e9d1 9700 	ldrd	r9, r7, [r1]
	char addr_remote[ADDR_LEN + 7] = "";
   27770:	222b      	movs	r2, #43	; 0x2b
   27772:	2100      	movs	r1, #0
   27774:	a815      	add	r0, sp, #84	; 0x54
   27776:	9114      	str	r1, [sp, #80]	; 0x50
   27778:	f7de fbb3 	bl	5ee2 <memset>
	if (context->local.family == AF_INET6) {
   2777c:	8925      	ldrh	r5, [r4, #8]
   2777e:	2d0a      	cmp	r5, #10
   27780:	ae08      	add	r6, sp, #32
   27782:	f10d 0850 	add.w	r8, sp, #80	; 0x50
   27786:	d14a      	bne.n	2781e <context_cb+0xba>
		snprintk(addr_local, local_len, "[%s]:%u",
   27788:	68e1      	ldr	r1, [r4, #12]
   2778a:	4628      	mov	r0, r5
   2778c:	f7fa fcb4 	bl	220f8 <net_sprint_addr>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   27790:	8962      	ldrh	r2, [r4, #10]
   27792:	0213      	lsls	r3, r2, #8
   27794:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		snprintk(addr_local, local_len, "[%s]:%u",
   27798:	b29b      	uxth	r3, r3
   2779a:	4a28      	ldr	r2, [pc, #160]	; (2783c <context_cb+0xd8>)
   2779c:	9300      	str	r3, [sp, #0]
   2779e:	212f      	movs	r1, #47	; 0x2f
   277a0:	4603      	mov	r3, r0
   277a2:	4630      	mov	r0, r6
   277a4:	f7d9 fcb2 	bl	110c <snprintk>
		snprintk(addr_remote, remote_len, "[%s]:%u",
   277a8:	f104 0118 	add.w	r1, r4, #24
   277ac:	4628      	mov	r0, r5
   277ae:	f7fa fca3 	bl	220f8 <net_sprint_addr>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   277b2:	8ae2      	ldrh	r2, [r4, #22]
   277b4:	0213      	lsls	r3, r2, #8
   277b6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		snprintk(addr_remote, remote_len, "[%s]:%u",
   277ba:	b29b      	uxth	r3, r3
   277bc:	9300      	str	r3, [sp, #0]
   277be:	4a1f      	ldr	r2, [pc, #124]	; (2783c <context_cb+0xd8>)
   277c0:	4603      	mov	r3, r0
   277c2:	212f      	movs	r1, #47	; 0x2f
   277c4:	4640      	mov	r0, r8
   277c6:	f7d9 fca1 	bl	110c <snprintk>
	PR("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   277ca:	683b      	ldr	r3, [r7, #0]
	return net_if_get_by_index(context->iface);
   277cc:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
   277d0:	1c5d      	adds	r5, r3, #1
   277d2:	f7f9 fb5d 	bl	20e90 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   277d6:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   277da:	9400      	str	r4, [sp, #0]
   277dc:	f013 0f10 	tst.w	r3, #16
   277e0:	bf14      	ite	ne
   277e2:	2236      	movne	r2, #54	; 0x36
   277e4:	2234      	moveq	r2, #52	; 0x34
   277e6:	f013 0f20 	tst.w	r3, #32
   277ea:	bf14      	ite	ne
   277ec:	2153      	movne	r1, #83	; 0x53
   277ee:	2144      	moveq	r1, #68	; 0x44
   277f0:	f013 0f40 	tst.w	r3, #64	; 0x40
   277f4:	bf14      	ite	ne
   277f6:	2354      	movne	r3, #84	; 0x54
   277f8:	2355      	moveq	r3, #85	; 0x55
   277fa:	e9cd 1303 	strd	r1, r3, [sp, #12]
   277fe:	e9cd 0201 	strd	r0, r2, [sp, #4]
   27802:	462b      	mov	r3, r5
   27804:	e9cd 6805 	strd	r6, r8, [sp, #20]
   27808:	4a0d      	ldr	r2, [pc, #52]	; (27840 <context_cb+0xdc>)
   2780a:	2100      	movs	r1, #0
   2780c:	4648      	mov	r0, r9
   2780e:	f7db fddd 	bl	33cc <shell_fprintf>
	(*count)++;
   27812:	683b      	ldr	r3, [r7, #0]
   27814:	3301      	adds	r3, #1
   27816:	603b      	str	r3, [r7, #0]
}
   27818:	b021      	add	sp, #132	; 0x84
   2781a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (context->local.family == AF_UNSPEC) {
   2781e:	b92d      	cbnz	r5, 2782c <context_cb+0xc8>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   27820:	4a08      	ldr	r2, [pc, #32]	; (27844 <context_cb+0xe0>)
   27822:	212f      	movs	r1, #47	; 0x2f
   27824:	4630      	mov	r0, r6
   27826:	f7d9 fc71 	bl	110c <snprintk>
   2782a:	e7ce      	b.n	277ca <context_cb+0x66>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   2782c:	462b      	mov	r3, r5
   2782e:	4a06      	ldr	r2, [pc, #24]	; (27848 <context_cb+0xe4>)
   27830:	212f      	movs	r1, #47	; 0x2f
   27832:	4630      	mov	r0, r6
   27834:	f7d9 fc6a 	bl	110c <snprintk>
   27838:	e7c7      	b.n	277ca <context_cb+0x66>
   2783a:	bf00      	nop
   2783c:	00033d39 	.word	0x00033d39
   27840:	00033d56 	.word	0x00033d56
   27844:	00033d41 	.word	0x00033d41
   27848:	00033d4b 	.word	0x00033d4b

0002784c <cmd_net_tcp_send>:
{
   2784c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (shell_help_requested(shell)) {
   27850:	6883      	ldr	r3, [r0, #8]
   27852:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27856:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   2785a:	4605      	mov	r5, r0
   2785c:	4617      	mov	r7, r2
	if (shell_help_requested(shell)) {
   2785e:	b144      	cbz	r4, 27872 <cmd_net_tcp_send+0x26>
		shell_help_print(shell, NULL, 0);
   27860:	2200      	movs	r2, #0
   27862:	4611      	mov	r1, r2
   27864:	f7db feb6 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   27868:	f06f 0007 	mvn.w	r0, #7
}
   2786c:	b004      	add	sp, #16
   2786e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   27872:	4e23      	ldr	r6, [pc, #140]	; (27900 <cmd_net_tcp_send+0xb4>)
   27874:	6830      	ldr	r0, [r6, #0]
   27876:	b928      	cbnz	r0, 27884 <cmd_net_tcp_send+0x38>
		PR_WARNING("Not connected\n");
   27878:	4a22      	ldr	r2, [pc, #136]	; (27904 <cmd_net_tcp_send+0xb8>)
		PR_WARNING("Out of pkts, msg cannot be sent.\n");
   2787a:	2104      	movs	r1, #4
   2787c:	4628      	mov	r0, r5
   2787e:	f7db fda5 	bl	33cc <shell_fprintf>
   27882:	e7f1      	b.n	27868 <cmd_net_tcp_send+0x1c>
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   27884:	f7ff f914 	bl	26ab0 <net_context_is_used>
   27888:	2800      	cmp	r0, #0
   2788a:	d0f5      	beq.n	27878 <cmd_net_tcp_send+0x2c>
	if (!argv[++arg]) {
   2788c:	687b      	ldr	r3, [r7, #4]
   2788e:	b90b      	cbnz	r3, 27894 <cmd_net_tcp_send+0x48>
		PR_WARNING("No data to send.\n");
   27890:	4a1d      	ldr	r2, [pc, #116]	; (27908 <cmd_net_tcp_send+0xbc>)
   27892:	e7f2      	b.n	2787a <cmd_net_tcp_send+0x2e>
	pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   27894:	6830      	ldr	r0, [r6, #0]
   27896:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   2789a:	f7f9 fe25 	bl	214e8 <net_pkt_get_tx>
	if (!pkt) {
   2789e:	4606      	mov	r6, r0
   278a0:	b908      	cbnz	r0, 278a6 <cmd_net_tcp_send+0x5a>
		PR_WARNING("Out of pkts, msg cannot be sent.\n");
   278a2:	4a1a      	ldr	r2, [pc, #104]	; (2790c <cmd_net_tcp_send+0xc0>)
   278a4:	e7e9      	b.n	2787a <cmd_net_tcp_send+0x2e>
	ret = net_pkt_append_all(pkt, strlen(argv[arg]), (u8_t *)argv[arg],
   278a6:	6878      	ldr	r0, [r7, #4]
   278a8:	f7de fa98 	bl	5ddc <strlen>
   278ac:	fa1f f880 	uxth.w	r8, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   278b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   278b4:	687a      	ldr	r2, [r7, #4]
   278b6:	4641      	mov	r1, r8
   278b8:	4630      	mov	r0, r6
   278ba:	f7f9 ffcd 	bl	21858 <net_pkt_append>
	if (!ret) {
   278be:	4580      	cmp	r8, r0
   278c0:	d008      	beq.n	278d4 <cmd_net_tcp_send+0x88>
		PR_WARNING("Cannot build msg (out of pkts)\n");
   278c2:	4a13      	ldr	r2, [pc, #76]	; (27910 <cmd_net_tcp_send+0xc4>)
   278c4:	2104      	movs	r1, #4
   278c6:	4628      	mov	r0, r5
   278c8:	f7db fd80 	bl	33cc <shell_fprintf>
		net_pkt_unref(pkt);
   278cc:	4630      	mov	r0, r6
   278ce:	f7f9 fea6 	bl	2161e <net_pkt_unref>
   278d2:	e7c9      	b.n	27868 <cmd_net_tcp_send+0x1c>
	user_data.shell = shell;
   278d4:	ab04      	add	r3, sp, #16
	ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT, NULL,
   278d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	user_data.shell = shell;
   278da:	f843 5d08 	str.w	r5, [r3, #-8]!
	ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT, NULL,
   278de:	490d      	ldr	r1, [pc, #52]	; (27914 <cmd_net_tcp_send+0xc8>)
   278e0:	9300      	str	r3, [sp, #0]
   278e2:	4630      	mov	r0, r6
   278e4:	4623      	mov	r3, r4
   278e6:	f7f7 fed3 	bl	1f690 <net_context_send>
	if (ret < 0) {
   278ea:	1e03      	subs	r3, r0, #0
   278ec:	da05      	bge.n	278fa <cmd_net_tcp_send+0xae>
		PR_WARNING("Cannot send msg (%d)\n", ret);
   278ee:	4a0a      	ldr	r2, [pc, #40]	; (27918 <cmd_net_tcp_send+0xcc>)
   278f0:	2104      	movs	r1, #4
   278f2:	4628      	mov	r0, r5
   278f4:	f7db fd6a 	bl	33cc <shell_fprintf>
   278f8:	e7e8      	b.n	278cc <cmd_net_tcp_send+0x80>
	return 0;
   278fa:	4620      	mov	r0, r4
   278fc:	e7b6      	b.n	2786c <cmd_net_tcp_send+0x20>
   278fe:	bf00      	nop
   27900:	200028b0 	.word	0x200028b0
   27904:	00033b96 	.word	0x00033b96
   27908:	00033c9b 	.word	0x00033c9b
   2790c:	00033cad 	.word	0x00033cad
   27910:	00033ccf 	.word	0x00033ccf
   27914:	00026a9d 	.word	0x00026a9d
   27918:	00033cef 	.word	0x00033cef

0002791c <net_if_is_up>:
{
   2791c:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   2791e:	4604      	mov	r4, r0
   27920:	b9a0      	cbnz	r0, 2794c <net_if_is_up+0x30>
   27922:	4b0f      	ldr	r3, [pc, #60]	; (27960 <net_if_is_up+0x44>)
   27924:	681b      	ldr	r3, [r3, #0]
   27926:	075b      	lsls	r3, r3, #29
   27928:	d010      	beq.n	2794c <net_if_is_up+0x30>
   2792a:	2301      	movs	r3, #1
   2792c:	f04f 0200 	mov.w	r2, #0
   27930:	f363 0202 	bfi	r2, r3, #0, #3
   27934:	490b      	ldr	r1, [pc, #44]	; (27964 <net_if_is_up+0x48>)
   27936:	4b0c      	ldr	r3, [pc, #48]	; (27968 <net_if_is_up+0x4c>)
   27938:	1a5b      	subs	r3, r3, r1
   2793a:	f360 02c5 	bfi	r2, r0, #3, #3
   2793e:	08db      	lsrs	r3, r3, #3
   27940:	f363 128f 	bfi	r2, r3, #6, #10
   27944:	4909      	ldr	r1, [pc, #36]	; (2796c <net_if_is_up+0x50>)
   27946:	480a      	ldr	r0, [pc, #40]	; (27970 <net_if_is_up+0x54>)
   27948:	f7da fa06 	bl	1d58 <log_1>
   2794c:	6823      	ldr	r3, [r4, #0]
   2794e:	f3bf 8f5b 	dmb	ish
   27952:	68d8      	ldr	r0, [r3, #12]
   27954:	f3bf 8f5b 	dmb	ish
}
   27958:	f000 0001 	and.w	r0, r0, #1
   2795c:	bd10      	pop	{r4, pc}
   2795e:	bf00      	nop
   27960:	2000d7b8 	.word	0x2000d7b8
   27964:	0002cff8 	.word	0x0002cff8
   27968:	0002d148 	.word	0x0002d148
   2796c:	00033160 	.word	0x00033160
   27970:	0003231f 	.word	0x0003231f

00027974 <iface_cb>:
{
   27974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->user_data && data->user_data != iface) {
   27978:	684b      	ldr	r3, [r1, #4]
{
   2797a:	b085      	sub	sp, #20
   2797c:	4606      	mov	r6, r0
	if (data->user_data && data->user_data != iface) {
   2797e:	b113      	cbz	r3, 27986 <iface_cb+0x12>
   27980:	4283      	cmp	r3, r0
   27982:	f040 813f 	bne.w	27c04 <iface_cb+0x290>
	return iface->if_dev->l2;
   27986:	6833      	ldr	r3, [r6, #0]
		*extra = "==============";
   27988:	4da0      	ldr	r5, [pc, #640]	; (27c0c <iface_cb+0x298>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   2798a:	685a      	ldr	r2, [r3, #4]
		*extra = "==============";
   2798c:	4ba0      	ldr	r3, [pc, #640]	; (27c10 <iface_cb+0x29c>)
	const struct shell *shell = data->shell;
   2798e:	680c      	ldr	r4, [r1, #0]
		*extra = "==============";
   27990:	4fa0      	ldr	r7, [pc, #640]	; (27c14 <iface_cb+0x2a0>)
   27992:	429a      	cmp	r2, r3
   27994:	4ba0      	ldr	r3, [pc, #640]	; (27c18 <iface_cb+0x2a4>)
   27996:	bf18      	it	ne
   27998:	461d      	movne	r5, r3
   2799a:	4ba0      	ldr	r3, [pc, #640]	; (27c1c <iface_cb+0x2a8>)
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
   2799c:	4630      	mov	r0, r6
		*extra = "==============";
   2799e:	bf18      	it	ne
   279a0:	461f      	movne	r7, r3
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
   279a2:	f7f9 fa81 	bl	20ea8 <net_if_get_by_iface>
   279a6:	4633      	mov	r3, r6
   279a8:	e9cd 7000 	strd	r7, r0, [sp]
   279ac:	4a9c      	ldr	r2, [pc, #624]	; (27c20 <iface_cb+0x2ac>)
   279ae:	2100      	movs	r1, #0
   279b0:	4620      	mov	r0, r4
   279b2:	f7db fd0b 	bl	33cc <shell_fprintf>
	PR("===========================%s\n", extra);
   279b6:	4620      	mov	r0, r4
   279b8:	462b      	mov	r3, r5
   279ba:	4a9a      	ldr	r2, [pc, #616]	; (27c24 <iface_cb+0x2b0>)
   279bc:	2100      	movs	r1, #0
   279be:	f7db fd05 	bl	33cc <shell_fprintf>
	if (!net_if_is_up(iface)) {
   279c2:	4630      	mov	r0, r6
   279c4:	f7ff ffaa 	bl	2791c <net_if_is_up>
   279c8:	b938      	cbnz	r0, 279da <iface_cb+0x66>
		PR_INFO("Interface is down.\n");
   279ca:	4a97      	ldr	r2, [pc, #604]	; (27c28 <iface_cb+0x2b4>)
   279cc:	2103      	movs	r1, #3
   279ce:	4620      	mov	r0, r4
}
   279d0:	b005      	add	sp, #20
   279d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		PR_INFO("Interface is down.\n");
   279d6:	f7db bcf9 	b.w	33cc <shell_fprintf>
	if (net_if_get_link_addr(iface) &&
   279da:	6831      	ldr	r1, [r6, #0]
   279dc:	f111 0f10 	cmn.w	r1, #16
   279e0:	d00c      	beq.n	279fc <iface_cb+0x88>
	    net_if_get_link_addr(iface)->addr) {
   279e2:	6908      	ldr	r0, [r1, #16]
	if (net_if_get_link_addr(iface) &&
   279e4:	b150      	cbz	r0, 279fc <iface_cb+0x88>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   279e6:	2318      	movs	r3, #24
   279e8:	4a90      	ldr	r2, [pc, #576]	; (27c2c <iface_cb+0x2b8>)
   279ea:	7d09      	ldrb	r1, [r1, #20]
   279ec:	f7fa fa81 	bl	21ef2 <net_sprint_ll_addr_buf>
		PR("Link addr : %s\n",
   279f0:	4a8f      	ldr	r2, [pc, #572]	; (27c30 <iface_cb+0x2bc>)
   279f2:	4603      	mov	r3, r0
   279f4:	2100      	movs	r1, #0
   279f6:	4620      	mov	r0, r4
   279f8:	f7db fce8 	bl	33cc <shell_fprintf>
	return iface->if_dev->mtu;
   279fc:	6833      	ldr	r3, [r6, #0]
	PR("MTU       : %d\n", net_if_get_mtu(iface));
   279fe:	4a8d      	ldr	r2, [pc, #564]	; (27c34 <iface_cb+0x2c0>)
   27a00:	8b1b      	ldrh	r3, [r3, #24]
		PR("\t%s %s %s%s\n",
   27a02:	f8df a248 	ldr.w	sl, [pc, #584]	; 27c4c <iface_cb+0x2d8>
   27a06:	f8df b270 	ldr.w	fp, [pc, #624]	; 27c78 <iface_cb+0x304>
	PR("MTU       : %d\n", net_if_get_mtu(iface));
   27a0a:	2100      	movs	r1, #0
   27a0c:	4620      	mov	r0, r4
   27a0e:	f7db fcdd 	bl	33cc <shell_fprintf>
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   27a12:	2303      	movs	r3, #3
   27a14:	4a88      	ldr	r2, [pc, #544]	; (27c38 <iface_cb+0x2c4>)
	ipv6 = iface->config.ip.ipv6;
   27a16:	6875      	ldr	r5, [r6, #4]
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   27a18:	2100      	movs	r1, #0
   27a1a:	4620      	mov	r0, r4
   27a1c:	f7db fcd6 	bl	33cc <shell_fprintf>
	count = 0;
   27a20:	2700      	movs	r7, #0
   27a22:	f105 0904 	add.w	r9, r5, #4
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
   27a26:	46b8      	mov	r8, r7
   27a28:	2d00      	cmp	r5, #0
   27a2a:	d170      	bne.n	27b0e <iface_cb+0x19a>
	if (count == 0) {
   27a2c:	b927      	cbnz	r7, 27a38 <iface_cb+0xc4>
		PR("\t<none>\n");
   27a2e:	4a83      	ldr	r2, [pc, #524]	; (27c3c <iface_cb+0x2c8>)
   27a30:	4639      	mov	r1, r7
   27a32:	4620      	mov	r0, r4
   27a34:	f7db fcca 	bl	33cc <shell_fprintf>
	PR("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   27a38:	2305      	movs	r3, #5
   27a3a:	4a81      	ldr	r2, [pc, #516]	; (27c40 <iface_cb+0x2cc>)
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
   27a3c:	f8df b23c 	ldr.w	fp, [pc, #572]	; 27c7c <iface_cb+0x308>
	PR("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   27a40:	2100      	movs	r1, #0
   27a42:	4620      	mov	r0, r4
   27a44:	f7db fcc2 	bl	33cc <shell_fprintf>
	count = 0;
   27a48:	2700      	movs	r7, #0
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   27a4a:	46b8      	mov	r8, r7
		if (!mcast->is_used) {
   27a4c:	f04f 0918 	mov.w	r9, #24
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
   27a50:	f105 0adc 	add.w	sl, r5, #220	; 0xdc
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   27a54:	2d00      	cmp	r5, #0
   27a56:	f040 8093 	bne.w	27b80 <iface_cb+0x20c>
	if (count == 0) {
   27a5a:	b927      	cbnz	r7, 27a66 <iface_cb+0xf2>
		PR("\t<none>\n");
   27a5c:	4a77      	ldr	r2, [pc, #476]	; (27c3c <iface_cb+0x2c8>)
   27a5e:	4639      	mov	r1, r7
   27a60:	4620      	mov	r0, r4
   27a62:	f7db fcb3 	bl	33cc <shell_fprintf>
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   27a66:	2302      	movs	r3, #2
   27a68:	4a76      	ldr	r2, [pc, #472]	; (27c44 <iface_cb+0x2d0>)
		PR("\t%s/%d%s\n",
   27a6a:	f8df b214 	ldr.w	fp, [pc, #532]	; 27c80 <iface_cb+0x30c>
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   27a6e:	2100      	movs	r1, #0
   27a70:	4620      	mov	r0, r4
   27a72:	f7db fcab 	bl	33cc <shell_fprintf>
	count = 0;
   27a76:	2700      	movs	r7, #0
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
   27a78:	46b8      	mov	r8, r7
   27a7a:	2d00      	cmp	r5, #0
   27a7c:	f040 8099 	bne.w	27bb2 <iface_cb+0x23e>
	if (count == 0) {
   27a80:	b927      	cbnz	r7, 27a8c <iface_cb+0x118>
		PR("\t<none>\n");
   27a82:	4a6e      	ldr	r2, [pc, #440]	; (27c3c <iface_cb+0x2c8>)
   27a84:	4639      	mov	r1, r7
   27a86:	4620      	mov	r0, r4
   27a88:	f7db fca0 	bl	33cc <shell_fprintf>
	router = net_if_ipv6_router_find_default(iface, NULL);
   27a8c:	4630      	mov	r0, r6
   27a8e:	2100      	movs	r1, #0
   27a90:	f7f9 f832 	bl	20af8 <net_if_ipv6_router_find_default>
	if (router) {
   27a94:	4606      	mov	r6, r0
   27a96:	b1c0      	cbz	r0, 27aca <iface_cb+0x156>
		PR("IPv6 default router :\n");
   27a98:	4a6b      	ldr	r2, [pc, #428]	; (27c48 <iface_cb+0x2d4>)
   27a9a:	2100      	movs	r1, #0
   27a9c:	4620      	mov	r0, r4
   27a9e:	f7db fc95 	bl	33cc <shell_fprintf>
		PR("\t%s%s\n",
   27aa2:	f106 0124 	add.w	r1, r6, #36	; 0x24
   27aa6:	200a      	movs	r0, #10
   27aa8:	f7fa fb26 	bl	220f8 <net_sprint_addr>
   27aac:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   27ab0:	4a66      	ldr	r2, [pc, #408]	; (27c4c <iface_cb+0x2d8>)
   27ab2:	f013 0f04 	tst.w	r3, #4
   27ab6:	4b66      	ldr	r3, [pc, #408]	; (27c50 <iface_cb+0x2dc>)
   27ab8:	bf08      	it	eq
   27aba:	4613      	moveq	r3, r2
   27abc:	9300      	str	r3, [sp, #0]
   27abe:	4a65      	ldr	r2, [pc, #404]	; (27c54 <iface_cb+0x2e0>)
   27ac0:	4603      	mov	r3, r0
   27ac2:	2100      	movs	r1, #0
   27ac4:	4620      	mov	r0, r4
   27ac6:	f7db fc81 	bl	33cc <shell_fprintf>
	if (ipv6) {
   27aca:	2d00      	cmp	r5, #0
   27acc:	f000 809a 	beq.w	27c04 <iface_cb+0x290>
		PR("IPv6 hop limit           : %d\n",
   27ad0:	f895 31cc 	ldrb.w	r3, [r5, #460]	; 0x1cc
   27ad4:	4a60      	ldr	r2, [pc, #384]	; (27c58 <iface_cb+0x2e4>)
   27ad6:	4620      	mov	r0, r4
   27ad8:	2100      	movs	r1, #0
   27ada:	f7db fc77 	bl	33cc <shell_fprintf>
		PR("IPv6 base reachable time : %d\n",
   27ade:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   27ae2:	4a5e      	ldr	r2, [pc, #376]	; (27c5c <iface_cb+0x2e8>)
   27ae4:	4620      	mov	r0, r4
   27ae6:	2100      	movs	r1, #0
   27ae8:	f7db fc70 	bl	33cc <shell_fprintf>
		PR("IPv6 reachable time      : %d\n",
   27aec:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   27af0:	4a5b      	ldr	r2, [pc, #364]	; (27c60 <iface_cb+0x2ec>)
   27af2:	4620      	mov	r0, r4
   27af4:	2100      	movs	r1, #0
   27af6:	f7db fc69 	bl	33cc <shell_fprintf>
		PR("IPv6 retransmit timer    : %d\n",
   27afa:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   27afe:	4a59      	ldr	r2, [pc, #356]	; (27c64 <iface_cb+0x2f0>)
   27b00:	2100      	movs	r1, #0
   27b02:	4620      	mov	r0, r4
}
   27b04:	b005      	add	sp, #20
   27b06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		PR("IPv6 retransmit timer    : %d\n",
   27b0a:	f7db bc5f 	b.w	33cc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
   27b0e:	f1b8 0f03 	cmp.w	r8, #3
   27b12:	d08b      	beq.n	27a2c <iface_cb+0xb8>
		if (!unicast->is_used) {
   27b14:	2348      	movs	r3, #72	; 0x48
   27b16:	fb03 5308 	mla	r3, r3, r8, r5
   27b1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   27b1e:	0799      	lsls	r1, r3, #30
   27b20:	d529      	bpl.n	27b76 <iface_cb+0x202>
		PR("\t%s %s %s%s\n",
   27b22:	4649      	mov	r1, r9
   27b24:	200a      	movs	r0, #10
   27b26:	f7fa fae7 	bl	220f8 <net_sprint_addr>
   27b2a:	f899 2040 	ldrb.w	r2, [r9, #64]	; 0x40
   27b2e:	2a04      	cmp	r2, #4
   27b30:	bf96      	itet	ls
   27b32:	494d      	ldrls	r1, [pc, #308]	; (27c68 <iface_cb+0x2f4>)
   27b34:	494d      	ldrhi	r1, [pc, #308]	; (27c6c <iface_cb+0x2f8>)
   27b36:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
   27b3a:	f899 2041 	ldrb.w	r2, [r9, #65]	; 0x41
   27b3e:	3201      	adds	r2, #1
   27b40:	b2d2      	uxtb	r2, r2
   27b42:	2a03      	cmp	r2, #3
   27b44:	4603      	mov	r3, r0
   27b46:	bf96      	itet	ls
   27b48:	4849      	ldrls	r0, [pc, #292]	; (27c70 <iface_cb+0x2fc>)
	switch (addr_state) {
   27b4a:	484a      	ldrhi	r0, [pc, #296]	; (27c74 <iface_cb+0x300>)
   27b4c:	f850 0022 	ldrls.w	r0, [r0, r2, lsl #2]
		PR("\t%s %s %s%s\n",
   27b50:	2248      	movs	r2, #72	; 0x48
   27b52:	fb02 5208 	mla	r2, r2, r8, r5
		count++;
   27b56:	3701      	adds	r7, #1
		PR("\t%s %s %s%s\n",
   27b58:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   27b5c:	9100      	str	r1, [sp, #0]
   27b5e:	f012 0f01 	tst.w	r2, #1
   27b62:	4a3b      	ldr	r2, [pc, #236]	; (27c50 <iface_cb+0x2dc>)
   27b64:	bf08      	it	eq
   27b66:	4652      	moveq	r2, sl
   27b68:	e9cd 0201 	strd	r0, r2, [sp, #4]
   27b6c:	2100      	movs	r1, #0
   27b6e:	465a      	mov	r2, fp
   27b70:	4620      	mov	r0, r4
   27b72:	f7db fc2b 	bl	33cc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
   27b76:	f108 0801 	add.w	r8, r8, #1
   27b7a:	f109 0948 	add.w	r9, r9, #72	; 0x48
   27b7e:	e753      	b.n	27a28 <iface_cb+0xb4>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   27b80:	f1b8 0f05 	cmp.w	r8, #5
   27b84:	f43f af69 	beq.w	27a5a <iface_cb+0xe6>
		if (!mcast->is_used) {
   27b88:	fb09 f108 	mul.w	r1, r9, r8
   27b8c:	186b      	adds	r3, r5, r1
   27b8e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   27b92:	07da      	lsls	r2, r3, #31
   27b94:	d50a      	bpl.n	27bac <iface_cb+0x238>
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
   27b96:	4451      	add	r1, sl
   27b98:	200a      	movs	r0, #10
   27b9a:	f7fa faad 	bl	220f8 <net_sprint_addr>
   27b9e:	465a      	mov	r2, fp
   27ba0:	4603      	mov	r3, r0
   27ba2:	2100      	movs	r1, #0
   27ba4:	4620      	mov	r0, r4
   27ba6:	f7db fc11 	bl	33cc <shell_fprintf>
		count++;
   27baa:	3701      	adds	r7, #1
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
   27bac:	f108 0801 	add.w	r8, r8, #1
   27bb0:	e750      	b.n	27a54 <iface_cb+0xe0>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
   27bb2:	f1b8 0f02 	cmp.w	r8, #2
   27bb6:	f43f af63 	beq.w	27a80 <iface_cb+0x10c>
		if (!prefix->is_used) {
   27bba:	2128      	movs	r1, #40	; 0x28
   27bbc:	fb01 f108 	mul.w	r1, r1, r8
   27bc0:	eb05 0a01 	add.w	sl, r5, r1
   27bc4:	f89a 0175 	ldrb.w	r0, [sl, #373]	; 0x175
   27bc8:	0783      	lsls	r3, r0, #30
   27bca:	d518      	bpl.n	27bfe <iface_cb+0x28a>
		PR("\t%s/%d%s\n",
   27bcc:	f505 70b0 	add.w	r0, r5, #352	; 0x160
   27bd0:	4401      	add	r1, r0
   27bd2:	200a      	movs	r0, #10
   27bd4:	f7fa fa90 	bl	220f8 <net_sprint_addr>
   27bd8:	f89a 3175 	ldrb.w	r3, [sl, #373]	; 0x175
   27bdc:	491b      	ldr	r1, [pc, #108]	; (27c4c <iface_cb+0x2d8>)
   27bde:	f89a 2174 	ldrb.w	r2, [sl, #372]	; 0x174
   27be2:	f013 0f01 	tst.w	r3, #1
   27be6:	4b1a      	ldr	r3, [pc, #104]	; (27c50 <iface_cb+0x2dc>)
   27be8:	bf08      	it	eq
   27bea:	460b      	moveq	r3, r1
   27bec:	e9cd 2300 	strd	r2, r3, [sp]
   27bf0:	2100      	movs	r1, #0
   27bf2:	4603      	mov	r3, r0
   27bf4:	465a      	mov	r2, fp
   27bf6:	4620      	mov	r0, r4
   27bf8:	f7db fbe8 	bl	33cc <shell_fprintf>
		count++;
   27bfc:	3701      	adds	r7, #1
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
   27bfe:	f108 0801 	add.w	r8, r8, #1
   27c02:	e73a      	b.n	27a7a <iface_cb+0x106>
}
   27c04:	b005      	add	sp, #20
   27c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c0a:	bf00      	nop
   27c0c:	00033dd7 	.word	0x00033dd7
   27c10:	0002cfe4 	.word	0x0002cfe4
   27c14:	00033f70 	.word	0x00033f70
   27c18:	00033dd2 	.word	0x00033dd2
   27c1c:	00033f7a 	.word	0x00033f7a
   27c20:	00033dfa 	.word	0x00033dfa
   27c24:	000331da 	.word	0x000331da
   27c28:	00033e13 	.word	0x00033e13
   27c2c:	20002784 	.word	0x20002784
   27c30:	00033e27 	.word	0x00033e27
   27c34:	00033e37 	.word	0x00033e37
   27c38:	00033e47 	.word	0x00033e47
   27c3c:	00033e76 	.word	0x00033e76
   27c40:	00033e7f 	.word	0x00033e7f
   27c44:	00033ea8 	.word	0x00033ea8
   27c48:	00033ecb 	.word	0x00033ecb
   27c4c:	000340c0 	.word	0x000340c0
   27c50:	00033df0 	.word	0x00033df0
   27c54:	00033ee2 	.word	0x00033ee2
   27c58:	00033ee9 	.word	0x00033ee9
   27c5c:	00033f08 	.word	0x00033f08
   27c60:	00033f27 	.word	0x00033f27
   27c64:	00033f46 	.word	0x00033f46
   27c68:	0003313c 	.word	0x0003313c
   27c6c:	00033de1 	.word	0x00033de1
   27c70:	00033150 	.word	0x00033150
   27c74:	00032f56 	.word	0x00032f56
   27c78:	00033e69 	.word	0x00033e69
   27c7c:	00033ea3 	.word	0x00033ea3
   27c80:	00033ec1 	.word	0x00033ec1

00027c84 <cmd_net_iface_up>:
{
   27c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (shell_help_requested(shell)) {
   27c86:	6883      	ldr	r3, [r0, #8]
   27c88:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
   27c8c:	079b      	lsls	r3, r3, #30
{
   27c8e:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   27c90:	d506      	bpl.n	27ca0 <cmd_net_iface_up+0x1c>
		shell_help_print(shell, NULL, 0);
   27c92:	2200      	movs	r2, #0
   27c94:	4611      	mov	r1, r2
   27c96:	f7db fc9d 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   27c9a:	f06f 0407 	mvn.w	r4, #7
   27c9e:	e029      	b.n	27cf4 <cmd_net_iface_up+0x70>
	idx = get_iface_idx(shell, argv[1]);
   27ca0:	6851      	ldr	r1, [r2, #4]
   27ca2:	f7ff fbdf 	bl	27464 <get_iface_idx>
	if (idx < 0) {
   27ca6:	1e06      	subs	r6, r0, #0
   27ca8:	dbf7      	blt.n	27c9a <cmd_net_iface_up+0x16>
	iface = net_if_get_by_index(idx);
   27caa:	b2f0      	uxtb	r0, r6
   27cac:	f7f9 f8f0 	bl	20e90 <net_if_get_by_index>
	if (!iface) {
   27cb0:	4604      	mov	r4, r0
   27cb2:	b930      	cbnz	r0, 27cc2 <cmd_net_iface_up+0x3e>
		PR_WARNING("No such interface in index %d\n", idx);
   27cb4:	4a11      	ldr	r2, [pc, #68]	; (27cfc <cmd_net_iface_up+0x78>)
   27cb6:	4633      	mov	r3, r6
		PR_WARNING("Interface %d is already up.\n", idx);
   27cb8:	2104      	movs	r1, #4
   27cba:	4628      	mov	r0, r5
   27cbc:	f7db fb86 	bl	33cc <shell_fprintf>
   27cc0:	e7eb      	b.n	27c9a <cmd_net_iface_up+0x16>
	if (net_if_is_up(iface)) {
   27cc2:	f7ff fe2b 	bl	2791c <net_if_is_up>
   27cc6:	b110      	cbz	r0, 27cce <cmd_net_iface_up+0x4a>
		PR_WARNING("Interface %d is already up.\n", idx);
   27cc8:	4633      	mov	r3, r6
   27cca:	4a0d      	ldr	r2, [pc, #52]	; (27d00 <cmd_net_iface_up+0x7c>)
   27ccc:	e7f4      	b.n	27cb8 <cmd_net_iface_up+0x34>
	ret = net_if_up(iface);
   27cce:	4620      	mov	r0, r4
   27cd0:	f7f9 f932 	bl	20f38 <net_if_up>
	if (ret) {
   27cd4:	4604      	mov	r4, r0
   27cd6:	b138      	cbz	r0, 27ce8 <cmd_net_iface_up+0x64>
		PR_WARNING("Cannot take interface %d up (%d)\n", idx, ret);
   27cd8:	9000      	str	r0, [sp, #0]
   27cda:	4633      	mov	r3, r6
   27cdc:	4a09      	ldr	r2, [pc, #36]	; (27d04 <cmd_net_iface_up+0x80>)
   27cde:	2104      	movs	r1, #4
   27ce0:	4628      	mov	r0, r5
   27ce2:	f7db fb73 	bl	33cc <shell_fprintf>
   27ce6:	e7d8      	b.n	27c9a <cmd_net_iface_up+0x16>
		PR("Interface %d is up\n", idx);
   27ce8:	4601      	mov	r1, r0
   27cea:	4633      	mov	r3, r6
   27cec:	4a06      	ldr	r2, [pc, #24]	; (27d08 <cmd_net_iface_up+0x84>)
   27cee:	4628      	mov	r0, r5
   27cf0:	f7db fb6c 	bl	33cc <shell_fprintf>
}
   27cf4:	4620      	mov	r0, r4
   27cf6:	b002      	add	sp, #8
   27cf8:	bd70      	pop	{r4, r5, r6, pc}
   27cfa:	bf00      	nop
   27cfc:	00033548 	.word	0x00033548
   27d00:	000335a1 	.word	0x000335a1
   27d04:	000335be 	.word	0x000335be
   27d08:	000335e0 	.word	0x000335e0

00027d0c <_handle_ipv6_echo_reply>:
	PR_SHELL(shell_for_ping, "Received echo reply from %s to %s\n",
   27d0c:	4b11      	ldr	r3, [pc, #68]	; (27d54 <_handle_ipv6_echo_reply+0x48>)
{
   27d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	PR_SHELL(shell_for_ping, "Received echo reply from %s to %s\n",
   27d10:	681d      	ldr	r5, [r3, #0]
	return pkt->frags->data;
   27d12:	6943      	ldr	r3, [r0, #20]
   27d14:	6899      	ldr	r1, [r3, #8]
{
   27d16:	4604      	mov	r4, r0
	PR_SHELL(shell_for_ping, "Received echo reply from %s to %s\n",
   27d18:	3108      	adds	r1, #8
   27d1a:	200a      	movs	r0, #10
   27d1c:	f7fa f9ec 	bl	220f8 <net_sprint_addr>
   27d20:	6963      	ldr	r3, [r4, #20]
   27d22:	6899      	ldr	r1, [r3, #8]
   27d24:	4606      	mov	r6, r0
   27d26:	3118      	adds	r1, #24
   27d28:	200a      	movs	r0, #10
   27d2a:	f7fa f9e5 	bl	220f8 <net_sprint_addr>
   27d2e:	4633      	mov	r3, r6
   27d30:	4a09      	ldr	r2, [pc, #36]	; (27d58 <_handle_ipv6_echo_reply+0x4c>)
   27d32:	9000      	str	r0, [sp, #0]
   27d34:	2100      	movs	r1, #0
   27d36:	4628      	mov	r0, r5
   27d38:	f7db fb48 	bl	33cc <shell_fprintf>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   27d3c:	4807      	ldr	r0, [pc, #28]	; (27d5c <_handle_ipv6_echo_reply+0x50>)
   27d3e:	f004 fb1e 	bl	2c37e <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   27d42:	4807      	ldr	r0, [pc, #28]	; (27d60 <_handle_ipv6_echo_reply+0x54>)
   27d44:	f7fb f916 	bl	22f74 <net_icmpv6_unregister_handler>
	net_pkt_unref(pkt);
   27d48:	4620      	mov	r0, r4
   27d4a:	f7f9 fc68 	bl	2161e <net_pkt_unref>
}
   27d4e:	2000      	movs	r0, #0
   27d50:	b002      	add	sp, #8
   27d52:	bd70      	pop	{r4, r5, r6, pc}
   27d54:	200028ac 	.word	0x200028ac
   27d58:	00033181 	.word	0x00033181
   27d5c:	2000d88c 	.word	0x2000d88c
   27d60:	2000d55c 	.word	0x2000d55c

00027d64 <cmd_net_ping>:
{
   27d64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (shell_help_requested(shell)) {
   27d66:	6883      	ldr	r3, [r0, #8]
   27d68:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27d6c:	f3c4 0440 	ubfx	r4, r4, #1, #1
{
   27d70:	b085      	sub	sp, #20
   27d72:	4605      	mov	r5, r0
	if (shell_help_requested(shell)) {
   27d74:	b144      	cbz	r4, 27d88 <cmd_net_ping+0x24>
		shell_help_print(shell, NULL, 0);
   27d76:	2200      	movs	r2, #0
   27d78:	4611      	mov	r1, r2
   27d7a:	f7db fc2b 	bl	35d4 <shell_help_print>
		return -ENOEXEC;
   27d7e:	f06f 0407 	mvn.w	r4, #7
}
   27d82:	4620      	mov	r0, r4
   27d84:	b005      	add	sp, #20
   27d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	host = argv[1];
   27d88:	6856      	ldr	r6, [r2, #4]
	if (!host) {
   27d8a:	b926      	cbnz	r6, 27d96 <cmd_net_ping+0x32>
		PR_WARNING("Target host missing\n");
   27d8c:	4a27      	ldr	r2, [pc, #156]	; (27e2c <cmd_net_ping+0xc8>)
   27d8e:	2104      	movs	r1, #4
			PR_WARNING("Invalid IP address\n");
   27d90:	f7db fb1c 	bl	33cc <shell_fprintf>
   27d94:	e7f3      	b.n	27d7e <cmd_net_ping+0x1a>
	shell_for_ping = shell;
   27d96:	4b26      	ldr	r3, [pc, #152]	; (27e30 <cmd_net_ping+0xcc>)
   27d98:	6018      	str	r0, [r3, #0]
	struct net_if *iface = net_if_get_default();
   27d9a:	f7f7 ffc3 	bl	1fd24 <net_if_get_default>
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   27d9e:	466a      	mov	r2, sp
	struct net_if *iface = net_if_get_default();
   27da0:	4607      	mov	r7, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   27da2:	4631      	mov	r1, r6
   27da4:	200a      	movs	r0, #10
   27da6:	f7fa f9bd 	bl	22124 <net_addr_pton>
   27daa:	2800      	cmp	r0, #0
   27dac:	db3c      	blt.n	27e28 <cmd_net_ping+0xc4>
	net_icmpv6_register_handler(&ping6_handler);
   27dae:	4821      	ldr	r0, [pc, #132]	; (27e34 <cmd_net_ping+0xd0>)
   27db0:	f7fb f8d6 	bl	22f60 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   27db4:	4669      	mov	r1, sp
   27db6:	4620      	mov	r0, r4
   27db8:	f7fc fce2 	bl	24780 <net_ipv6_nbr_lookup>
	if (nbr) {
   27dbc:	b100      	cbz	r0, 27dc0 <cmd_net_ping+0x5c>
		iface = nbr->iface;
   27dbe:	6887      	ldr	r7, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   27dc0:	4669      	mov	r1, sp
   27dc2:	2000      	movs	r0, #0
   27dc4:	f7fe fc84 	bl	266d0 <net_route_lookup>
	if (route) {
   27dc8:	b100      	cbz	r0, 27dcc <cmd_net_ping+0x68>
		iface = route->iface;
   27dca:	68c7      	ldr	r7, [r0, #12]
					   sys_rand32_get(),
   27dcc:	f7dd f978 	bl	50c0 <sys_rand32_get>
   27dd0:	4604      	mov	r4, r0
					   sys_rand32_get());
   27dd2:	f7dd f975 	bl	50c0 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   27dd6:	b2a2      	uxth	r2, r4
   27dd8:	b283      	uxth	r3, r0
   27dda:	4669      	mov	r1, sp
   27ddc:	4638      	mov	r0, r7
   27dde:	f7fb fd5e 	bl	2389e <net_icmpv6_send_echo_request>
	if (ret) {
   27de2:	4604      	mov	r4, r0
   27de4:	b140      	cbz	r0, 27df8 <cmd_net_ping+0x94>
	net_icmpv6_unregister_handler(&ping6_handler);
   27de6:	4813      	ldr	r0, [pc, #76]	; (27e34 <cmd_net_ping+0xd0>)
   27de8:	f7fb f8c4 	bl	22f74 <net_icmpv6_unregister_handler>
	} else if (ret == -EIO) {
   27dec:	3405      	adds	r4, #5
   27dee:	d11b      	bne.n	27e28 <cmd_net_ping+0xc4>
		PR_WARNING("Cannot send IPv6 ping\n");
   27df0:	4a11      	ldr	r2, [pc, #68]	; (27e38 <cmd_net_ping+0xd4>)
			PR_WARNING("Invalid IP address\n");
   27df2:	2104      	movs	r1, #4
   27df4:	4628      	mov	r0, r5
   27df6:	e7cb      	b.n	27d90 <cmd_net_ping+0x2c>
		PR("Sent a ping to %s\n", host);
   27df8:	4601      	mov	r1, r0
   27dfa:	4633      	mov	r3, r6
   27dfc:	4a0f      	ldr	r2, [pc, #60]	; (27e3c <cmd_net_ping+0xd8>)
   27dfe:	4628      	mov	r0, r5
   27e00:	f7db fae4 	bl	33cc <shell_fprintf>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   27e04:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   27e08:	480d      	ldr	r0, [pc, #52]	; (27e40 <cmd_net_ping+0xdc>)
   27e0a:	f004 fadf 	bl	2c3cc <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   27e0e:	300b      	adds	r0, #11
   27e10:	d1b7      	bne.n	27d82 <cmd_net_ping+0x1e>
		PR_INFO("Ping timeout\n");
   27e12:	4a0c      	ldr	r2, [pc, #48]	; (27e44 <cmd_net_ping+0xe0>)
   27e14:	2103      	movs	r1, #3
   27e16:	4628      	mov	r0, r5
   27e18:	f7db fad8 	bl	33cc <shell_fprintf>
	net_icmpv6_unregister_handler(&ping6_handler);
   27e1c:	4805      	ldr	r0, [pc, #20]	; (27e34 <cmd_net_ping+0xd0>)
   27e1e:	f7fb f8a9 	bl	22f74 <net_icmpv6_unregister_handler>
		return -ETIMEDOUT;
   27e22:	f06f 043b 	mvn.w	r4, #59	; 0x3b
   27e26:	e7ac      	b.n	27d82 <cmd_net_ping+0x1e>
			PR_WARNING("Invalid IP address\n");
   27e28:	4a07      	ldr	r2, [pc, #28]	; (27e48 <cmd_net_ping+0xe4>)
   27e2a:	e7e2      	b.n	27df2 <cmd_net_ping+0x8e>
   27e2c:	000339b8 	.word	0x000339b8
   27e30:	200028ac 	.word	0x200028ac
   27e34:	2000d55c 	.word	0x2000d55c
   27e38:	000339e0 	.word	0x000339e0
   27e3c:	000339cd 	.word	0x000339cd
   27e40:	2000d88c 	.word	0x2000d88c
   27e44:	00033a0b 	.word	0x00033a0b
   27e48:	000339f7 	.word	0x000339f7

00027e4c <iface_per_route_cb>:
	return iface->if_dev->l2;
   27e4c:	6803      	ldr	r3, [r0, #0]
{
   27e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   27e50:	685a      	ldr	r2, [r3, #4]
   27e52:	4b11      	ldr	r3, [pc, #68]	; (27e98 <iface_per_route_cb+0x4c>)
	const struct shell *shell = data->shell;
   27e54:	680f      	ldr	r7, [r1, #0]
		*extra = "==============";
   27e56:	4e11      	ldr	r6, [pc, #68]	; (27e9c <iface_per_route_cb+0x50>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   27e58:	429a      	cmp	r2, r3
		*extra = "==============";
   27e5a:	4b11      	ldr	r3, [pc, #68]	; (27ea0 <iface_per_route_cb+0x54>)
   27e5c:	4a11      	ldr	r2, [pc, #68]	; (27ea4 <iface_per_route_cb+0x58>)
   27e5e:	bf18      	it	ne
   27e60:	461e      	movne	r6, r3
   27e62:	4b11      	ldr	r3, [pc, #68]	; (27ea8 <iface_per_route_cb+0x5c>)
   27e64:	bf18      	it	ne
   27e66:	4613      	movne	r3, r2
{
   27e68:	460c      	mov	r4, r1
   27e6a:	4605      	mov	r5, r0
	PR("\nIPv6 routes for interface %p (%s)\n", iface,
   27e6c:	9300      	str	r3, [sp, #0]
   27e6e:	4a0f      	ldr	r2, [pc, #60]	; (27eac <iface_per_route_cb+0x60>)
   27e70:	4603      	mov	r3, r0
   27e72:	2100      	movs	r1, #0
   27e74:	4638      	mov	r0, r7
   27e76:	f7db faa9 	bl	33cc <shell_fprintf>
	PR("=======================================%s\n", extra);
   27e7a:	4638      	mov	r0, r7
   27e7c:	4633      	mov	r3, r6
   27e7e:	4a0c      	ldr	r2, [pc, #48]	; (27eb0 <iface_per_route_cb+0x64>)
   27e80:	2100      	movs	r1, #0
   27e82:	f7db faa3 	bl	33cc <shell_fprintf>
	net_route_foreach(route_cb, data);
   27e86:	480b      	ldr	r0, [pc, #44]	; (27eb4 <iface_per_route_cb+0x68>)
	data->user_data = iface;
   27e88:	6065      	str	r5, [r4, #4]
	net_route_foreach(route_cb, data);
   27e8a:	4621      	mov	r1, r4
}
   27e8c:	b003      	add	sp, #12
   27e8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	net_route_foreach(route_cb, data);
   27e92:	f7fe bd51 	b.w	26938 <net_route_foreach>
   27e96:	bf00      	nop
   27e98:	0002cfe4 	.word	0x0002cfe4
   27e9c:	00033dd7 	.word	0x00033dd7
   27ea0:	00033dd2 	.word	0x00033dd2
   27ea4:	00033f7a 	.word	0x00033f7a
   27ea8:	00033f70 	.word	0x00033f70
   27eac:	00033f91 	.word	0x00033f91
   27eb0:	000331ce 	.word	0x000331ce
   27eb4:	00027eb9 	.word	0x00027eb9

00027eb8 <route_cb>:
{
   27eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (entry->iface != iface) {
   27ebc:	684b      	ldr	r3, [r1, #4]
   27ebe:	68c2      	ldr	r2, [r0, #12]
   27ec0:	429a      	cmp	r2, r3
{
   27ec2:	4604      	mov	r4, r0
	if (entry->iface != iface) {
   27ec4:	d142      	bne.n	27f4c <route_cb+0x94>
	const struct shell *shell = data->shell;
   27ec6:	680d      	ldr	r5, [r1, #0]
	PR("IPv6 prefix : %s/%d\n", net_sprint_ipv6_addr(&entry->addr),
   27ec8:	f100 0110 	add.w	r1, r0, #16
   27ecc:	200a      	movs	r0, #10
   27ece:	f7fa f913 	bl	220f8 <net_sprint_addr>
   27ed2:	f894 3020 	ldrb.w	r3, [r4, #32]
   27ed6:	9300      	str	r3, [sp, #0]
   27ed8:	4a1e      	ldr	r2, [pc, #120]	; (27f54 <route_cb+0x9c>)
   27eda:	4603      	mov	r3, r0
   27edc:	2100      	movs	r1, #0
   27ede:	4628      	mov	r0, r5
   27ee0:	f7db fa74 	bl	33cc <shell_fprintf>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   27ee4:	6864      	ldr	r4, [r4, #4]
   27ee6:	2600      	movs	r6, #0
   27ee8:	b1cc      	cbz	r4, 27f1e <route_cb+0x66>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
   27eea:	4f1b      	ldr	r7, [pc, #108]	; (27f58 <route_cb+0xa0>)
   27eec:	f8df 8074 	ldr.w	r8, [pc, #116]	; 27f64 <route_cb+0xac>
			PR("addr : %s\n", net_sprint_ll_addr(lladdr->addr,
   27ef0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 27f68 <route_cb+0xb0>
		if (!nexthop_route->nbr) {
   27ef4:	6863      	ldr	r3, [r4, #4]
   27ef6:	b173      	cbz	r3, 27f16 <route_cb+0x5e>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
   27ef8:	4628      	mov	r0, r5
   27efa:	463a      	mov	r2, r7
   27efc:	2100      	movs	r1, #0
   27efe:	f7db fa65 	bl	33cc <shell_fprintf>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   27f02:	6863      	ldr	r3, [r4, #4]
   27f04:	7858      	ldrb	r0, [r3, #1]
   27f06:	28ff      	cmp	r0, #255	; 0xff
   27f08:	d111      	bne.n	27f2e <route_cb+0x76>
			PR("addr : <unknown>\n");
   27f0a:	4a14      	ldr	r2, [pc, #80]	; (27f5c <route_cb+0xa4>)
   27f0c:	2100      	movs	r1, #0
   27f0e:	4628      	mov	r0, r5
   27f10:	f7db fa5c 	bl	33cc <shell_fprintf>
		count++;
   27f14:	3601      	adds	r6, #1
   27f16:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   27f18:	2c00      	cmp	r4, #0
   27f1a:	d1eb      	bne.n	27ef4 <route_cb+0x3c>
	if (count == 0) {
   27f1c:	b9b6      	cbnz	r6, 27f4c <route_cb+0x94>
		PR("\t<none>\n");
   27f1e:	4a10      	ldr	r2, [pc, #64]	; (27f60 <route_cb+0xa8>)
   27f20:	2100      	movs	r1, #0
   27f22:	4628      	mov	r0, r5
}
   27f24:	b003      	add	sp, #12
   27f26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		PR("\t<none>\n");
   27f2a:	f7db ba4f 	b.w	33cc <shell_fprintf>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   27f2e:	f7fb fe83 	bl	23c38 <net_nbr_get_lladdr>
   27f32:	4642      	mov	r2, r8
   27f34:	7841      	ldrb	r1, [r0, #1]
   27f36:	2318      	movs	r3, #24
   27f38:	3002      	adds	r0, #2
   27f3a:	f7f9 ffda 	bl	21ef2 <net_sprint_ll_addr_buf>
			PR("addr : %s\n", net_sprint_ll_addr(lladdr->addr,
   27f3e:	464a      	mov	r2, r9
   27f40:	4603      	mov	r3, r0
   27f42:	2100      	movs	r1, #0
   27f44:	4628      	mov	r0, r5
   27f46:	f7db fa41 	bl	33cc <shell_fprintf>
   27f4a:	e7e3      	b.n	27f14 <route_cb+0x5c>
}
   27f4c:	b003      	add	sp, #12
   27f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27f52:	bf00      	nop
   27f54:	0003409c 	.word	0x0003409c
   27f58:	000340b1 	.word	0x000340b1
   27f5c:	000340c1 	.word	0x000340c1
   27f60:	00033e76 	.word	0x00033e76
   27f64:	20002784 	.word	0x20002784
   27f68:	00033e2c 	.word	0x00033e2c

00027f6c <cmd_net_arp>:
{
   27f6c:	b510      	push	{r4, lr}
	if (shell_help_requested(shell)) {
   27f6e:	6883      	ldr	r3, [r0, #8]
   27f70:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   27f74:	f3c4 0440 	ubfx	r4, r4, #1, #1
   27f78:	b11c      	cbz	r4, 27f82 <cmd_net_arp+0x16>
}
   27f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27f7e:	f7fe bfff 	b.w	26f80 <cmd_net_allocs.part.26>
	PR_INFO("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   27f82:	4a03      	ldr	r2, [pc, #12]	; (27f90 <cmd_net_arp+0x24>)
   27f84:	2103      	movs	r1, #3
   27f86:	f7db fa21 	bl	33cc <shell_fprintf>
}
   27f8a:	4620      	mov	r0, r4
   27f8c:	bd10      	pop	{r4, pc}
   27f8e:	bf00      	nop
   27f90:	00033325 	.word	0x00033325

00027f94 <nbr_cb>:
{
   27f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int *count = data->user_data;
   27f98:	e9d1 8900 	ldrd	r8, r9, [r1]
	if (*count == 0) {
   27f9c:	f8d9 1000 	ldr.w	r1, [r9]
{
   27fa0:	b091      	sub	sp, #68	; 0x44
   27fa2:	4604      	mov	r4, r0
	if (*count == 0) {
   27fa4:	b921      	cbnz	r1, 27fb0 <nbr_cb+0x1c>
		PR("     Neighbor   Interface        Flags State     "
   27fa6:	4b36      	ldr	r3, [pc, #216]	; (28080 <nbr_cb+0xec>)
   27fa8:	4a36      	ldr	r2, [pc, #216]	; (28084 <nbr_cb+0xf0>)
   27faa:	4640      	mov	r0, r8
   27fac:	f7db fa0e 	bl	33cc <shell_fprintf>
	(*count)++;
   27fb0:	f8d9 3000 	ldr.w	r3, [r9]
		state_pad = "    ";
   27fb4:	4d32      	ldr	r5, [pc, #200]	; (28080 <nbr_cb+0xec>)
	(*count)++;
   27fb6:	3301      	adds	r3, #1
   27fb8:	f8c9 3000 	str.w	r3, [r9]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   27fbc:	68e3      	ldr	r3, [r4, #12]
   27fbe:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   27fc2:	f7fc fbad 	bl	24720 <net_ipv6_nbr_state2str>
   27fc6:	4683      	mov	fp, r0
	if (strlen(state_str) == 5) {
   27fc8:	f7dd ff08 	bl	5ddc <strlen>
		state_pad = "    ";
   27fcc:	4b2e      	ldr	r3, [pc, #184]	; (28088 <nbr_cb+0xf4>)
   27fce:	2805      	cmp	r0, #5
   27fd0:	bf08      	it	eq
   27fd2:	461d      	moveq	r5, r3
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   27fd4:	68e3      	ldr	r3, [r4, #12]
   27fd6:	e9d3 6706 	ldrd	r6, r7, [r3, #24]
		    net_ipv6_nbr_data(nbr)->reachable_timeout -
   27fda:	6a1a      	ldr	r2, [r3, #32]
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   27fdc:	18b0      	adds	r0, r6, r2
   27fde:	eb47 71e2 	adc.w	r1, r7, r2, asr #31
   27fe2:	4606      	mov	r6, r0
   27fe4:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   27fe6:	f004 fd61 	bl	2caac <_impl_k_uptime_get>
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   27fea:	68a3      	ldr	r3, [r4, #8]
   27fec:	930c      	str	r3, [sp, #48]	; 0x30
   27fee:	68e3      	ldr	r3, [r4, #12]
   27ff0:	f8d9 9000 	ldr.w	r9, [r9]
   27ff4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   27ff6:	920d      	str	r2, [sp, #52]	; 0x34
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   27ff8:	1a36      	subs	r6, r6, r0
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   27ffa:	7822      	ldrb	r2, [r4, #0]
   27ffc:	7860      	ldrb	r0, [r4, #1]
   27ffe:	920e      	str	r2, [sp, #56]	; 0x38
	remaining = net_ipv6_nbr_data(nbr)->reachable +
   28000:	eb67 0701 	sbc.w	r7, r7, r1
   28004:	2e00      	cmp	r6, #0
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   28006:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   2800a:	f893 a035 	ldrb.w	sl, [r3, #53]	; 0x35
   2800e:	920f      	str	r2, [sp, #60]	; 0x3c
   28010:	f177 0300 	sbcs.w	r3, r7, #0
   28014:	bfb8      	it	lt
   28016:	2600      	movlt	r6, #0
   28018:	28ff      	cmp	r0, #255	; 0xff
   2801a:	d02e      	beq.n	2807a <nbr_cb+0xe6>
   2801c:	f7fb fe0c 	bl	23c38 <net_nbr_get_lladdr>
   28020:	4607      	mov	r7, r0
   28022:	7860      	ldrb	r0, [r4, #1]
   28024:	f7fb fe08 	bl	23c38 <net_nbr_get_lladdr>
   28028:	2318      	movs	r3, #24
   2802a:	7841      	ldrb	r1, [r0, #1]
   2802c:	4a17      	ldr	r2, [pc, #92]	; (2808c <nbr_cb+0xf8>)
   2802e:	1cb8      	adds	r0, r7, #2
   28030:	f7f9 ff5f 	bl	21ef2 <net_sprint_ll_addr_buf>
   28034:	4607      	mov	r7, r0
   28036:	7860      	ldrb	r0, [r4, #1]
   28038:	f7fb fdfe 	bl	23c38 <net_nbr_get_lladdr>
   2803c:	68e1      	ldr	r1, [r4, #12]
   2803e:	200a      	movs	r0, #10
   28040:	3104      	adds	r1, #4
   28042:	f7fa f859 	bl	220f8 <net_sprint_addr>
   28046:	4b0e      	ldr	r3, [pc, #56]	; (28080 <nbr_cb+0xec>)
   28048:	900b      	str	r0, [sp, #44]	; 0x2c
   2804a:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
   2804e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28050:	9304      	str	r3, [sp, #16]
   28052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28054:	9303      	str	r3, [sp, #12]
   28056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28058:	9302      	str	r3, [sp, #8]
   2805a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2805c:	4a0c      	ldr	r2, [pc, #48]	; (28090 <nbr_cb+0xfc>)
   2805e:	e9cd 4300 	strd	r4, r3, [sp]
   28062:	e9cd 5607 	strd	r5, r6, [sp, #28]
   28066:	e9cd ab05 	strd	sl, fp, [sp, #20]
   2806a:	464b      	mov	r3, r9
   2806c:	2100      	movs	r1, #0
   2806e:	4640      	mov	r0, r8
   28070:	f7db f9ac 	bl	33cc <shell_fprintf>
}
   28074:	b011      	add	sp, #68	; 0x44
   28076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   2807a:	4f06      	ldr	r7, [pc, #24]	; (28094 <nbr_cb+0x100>)
   2807c:	e7db      	b.n	28036 <nbr_cb+0xa2>
   2807e:	bf00      	nop
   28080:	000340c0 	.word	0x000340c0
   28084:	00033fc7 	.word	0x00033fc7
   28088:	00033fc0 	.word	0x00033fc0
   2808c:	20002784 	.word	0x20002784
   28090:	0003401d 	.word	0x0003401d
   28094:	00033fc5 	.word	0x00033fc5

00028098 <address_lifetime_cb>:
{
   28098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2809c:	e9d0 3700 	ldrd	r3, r7, [r0]
	if (net_if_l2(iface) == &NET_L2_GET_NAME(BLUETOOTH)) {
   280a0:	685a      	ldr	r2, [r3, #4]
		*extra = "==============";
   280a2:	4b4f      	ldr	r3, [pc, #316]	; (281e0 <address_lifetime_cb+0x148>)
	const struct shell *shell = data->shell;
   280a4:	680e      	ldr	r6, [r1, #0]
		*extra = "==============";
   280a6:	4c4f      	ldr	r4, [pc, #316]	; (281e4 <address_lifetime_cb+0x14c>)
   280a8:	429a      	cmp	r2, r3
   280aa:	4b4f      	ldr	r3, [pc, #316]	; (281e8 <address_lifetime_cb+0x150>)
   280ac:	4a4f      	ldr	r2, [pc, #316]	; (281ec <address_lifetime_cb+0x154>)
{
   280ae:	b08b      	sub	sp, #44	; 0x2c
		*extra = "==============";
   280b0:	bf18      	it	ne
   280b2:	461c      	movne	r4, r3
   280b4:	4b4e      	ldr	r3, [pc, #312]	; (281f0 <address_lifetime_cb+0x158>)
   280b6:	bf18      	it	ne
   280b8:	4613      	movne	r3, r2
	PR("\nIPv6 addresses for interface %p (%s)\n", iface,
   280ba:	9300      	str	r3, [sp, #0]
   280bc:	4a4d      	ldr	r2, [pc, #308]	; (281f4 <address_lifetime_cb+0x15c>)
   280be:	4603      	mov	r3, r0
   280c0:	2100      	movs	r1, #0
{
   280c2:	4682      	mov	sl, r0
	PR("\nIPv6 addresses for interface %p (%s)\n", iface,
   280c4:	4630      	mov	r0, r6
   280c6:	f7db f981 	bl	33cc <shell_fprintf>
	PR("==========================================%s\n", extra);
   280ca:	4623      	mov	r3, r4
   280cc:	4a4a      	ldr	r2, [pc, #296]	; (281f8 <address_lifetime_cb+0x160>)
   280ce:	2100      	movs	r1, #0
   280d0:	4630      	mov	r0, r6
   280d2:	f7db f97b 	bl	33cc <shell_fprintf>
	if (!ipv6) {
   280d6:	b93f      	cbnz	r7, 280e8 <address_lifetime_cb+0x50>
		PR("No IPv6 config found for this interface.\n");
   280d8:	4a48      	ldr	r2, [pc, #288]	; (281fc <address_lifetime_cb+0x164>)
   280da:	4639      	mov	r1, r7
   280dc:	4630      	mov	r0, r6
   280de:	f7db f975 	bl	33cc <shell_fprintf>
}
   280e2:	b00b      	add	sp, #44	; 0x2c
   280e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("Type      \tState    \tLifetime (sec)\tAddress\n");
   280e8:	4a45      	ldr	r2, [pc, #276]	; (28200 <address_lifetime_cb+0x168>)
   280ea:	2100      	movs	r1, #0
   280ec:	4630      	mov	r0, r6
   280ee:	f7db f96d 	bl	33cc <shell_fprintf>
   280f2:	1d3c      	adds	r4, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   280f4:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used ||
   280f6:	2348      	movs	r3, #72	; 0x48
   280f8:	fb03 7305 	mla	r3, r3, r5, r7
   280fc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   28100:	079b      	lsls	r3, r3, #30
   28102:	d547      	bpl.n	28194 <address_lifetime_cb+0xfc>
   28104:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   28108:	2b0a      	cmp	r3, #10
   2810a:	d143      	bne.n	28194 <address_lifetime_cb+0xfc>
			(u64_t)ipv6->unicast[i].lifetime.wrap_counter *
   2810c:	e9d4 9206 	ldrd	r9, r2, [r4, #24]
   28110:	9204      	str	r2, [sp, #16]
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   28112:	f004 fcb5 	bl	2ca80 <_impl_k_uptime_get_32>
			(u64_t)time_diff(k_uptime_get_32(),
   28116:	6963      	ldr	r3, [r4, #20]
   28118:	9305      	str	r3, [sp, #20]
   2811a:	4680      	mov	r8, r0
		prefix = net_if_ipv6_prefix_get(iface,
   2811c:	4621      	mov	r1, r4
   2811e:	4650      	mov	r0, sl
   28120:	f7f8 fb92 	bl	20848 <net_if_ipv6_prefix_get>
		if (prefix) {
   28124:	9a04      	ldr	r2, [sp, #16]
   28126:	2800      	cmp	r0, #0
   28128:	d03a      	beq.n	281a0 <address_lifetime_cb+0x108>
			prefix_len = prefix->len;
   2812a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
			prefix_len = 128;
   2812e:	9304      	str	r3, [sp, #16]
		if (ipv6->unicast[i].is_infinite) {
   28130:	2148      	movs	r1, #72	; 0x48
   28132:	fb01 7105 	mla	r1, r1, r5, r7
   28136:	f10d 0b1c 	add.w	fp, sp, #28
   2813a:	f891 1047 	ldrb.w	r1, [r1, #71]	; 0x47
   2813e:	f011 0f01 	tst.w	r1, #1
   28142:	d02f      	beq.n	281a4 <address_lifetime_cb+0x10c>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
   28144:	4a2f      	ldr	r2, [pc, #188]	; (28204 <address_lifetime_cb+0x16c>)
   28146:	210b      	movs	r1, #11
   28148:	4658      	mov	r0, fp
   2814a:	f7d8 ffdf 	bl	110c <snprintk>
		PR("%s  \t%s\t%s    \t%s/%d\n",
   2814e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   28152:	2b04      	cmp	r3, #4
   28154:	bf96      	itet	ls
   28156:	4a2c      	ldrls	r2, [pc, #176]	; (28208 <address_lifetime_cb+0x170>)
   28158:	f8df 80c0 	ldrhi.w	r8, [pc, #192]	; 2821c <address_lifetime_cb+0x184>
   2815c:	f852 8023 	ldrls.w	r8, [r2, r3, lsl #2]
   28160:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   28164:	3201      	adds	r2, #1
   28166:	b2d2      	uxtb	r2, r2
   28168:	2a03      	cmp	r2, #3
   2816a:	bf96      	itet	ls
   2816c:	4b27      	ldrls	r3, [pc, #156]	; (2820c <address_lifetime_cb+0x174>)
	switch (addr_state) {
   2816e:	f8df 90b0 	ldrhi.w	r9, [pc, #176]	; 28220 <address_lifetime_cb+0x188>
   28172:	f853 9022 	ldrls.w	r9, [r3, r2, lsl #2]
		PR("%s  \t%s\t%s    \t%s/%d\n",
   28176:	4621      	mov	r1, r4
   28178:	200a      	movs	r0, #10
   2817a:	f7f9 ffbd 	bl	220f8 <net_sprint_addr>
   2817e:	9b04      	ldr	r3, [sp, #16]
   28180:	4a23      	ldr	r2, [pc, #140]	; (28210 <address_lifetime_cb+0x178>)
   28182:	e9cd 0302 	strd	r0, r3, [sp, #8]
   28186:	e9cd 9b00 	strd	r9, fp, [sp]
   2818a:	4643      	mov	r3, r8
   2818c:	2100      	movs	r1, #0
   2818e:	4630      	mov	r0, r6
   28190:	f7db f91c 	bl	33cc <shell_fprintf>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   28194:	3501      	adds	r5, #1
   28196:	2d03      	cmp	r5, #3
   28198:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2819c:	d1ab      	bne.n	280f6 <address_lifetime_cb+0x5e>
   2819e:	e7a0      	b.n	280e2 <address_lifetime_cb+0x4a>
			prefix_len = 128;
   281a0:	2380      	movs	r3, #128	; 0x80
   281a2:	e7c4      	b.n	2812e <address_lifetime_cb+0x96>
		remaining = (u64_t)ipv6->unicast[i].lifetime.timer_timeout +
   281a4:	4648      	mov	r0, r9
   281a6:	4b1b      	ldr	r3, [pc, #108]	; (28214 <address_lifetime_cb+0x17c>)
   281a8:	17c1      	asrs	r1, r0, #31
   281aa:	fbc3 0102 	smlal	r0, r1, r3, r2
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   281ae:	9b05      	ldr	r3, [sp, #20]
   281b0:	eba8 0803 	sub.w	r8, r8, r3
   281b4:	f1b8 0f00 	cmp.w	r8, #0
   281b8:	bfb8      	it	lt
   281ba:	f1c8 0800 	rsblt	r8, r8, #0
				 "%u", (u32_t)(remaining / 1000));
   281be:	ebb0 0008 	subs.w	r0, r0, r8
   281c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   281c6:	f04f 0300 	mov.w	r3, #0
   281ca:	f161 0100 	sbc.w	r1, r1, #0
   281ce:	f7d8 f871 	bl	2b4 <__aeabi_uldivmod>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
   281d2:	4a11      	ldr	r2, [pc, #68]	; (28218 <address_lifetime_cb+0x180>)
   281d4:	4603      	mov	r3, r0
   281d6:	210b      	movs	r1, #11
   281d8:	4658      	mov	r0, fp
   281da:	f7d8 ff97 	bl	110c <snprintk>
   281de:	e7b6      	b.n	2814e <address_lifetime_cb+0xb6>
   281e0:	0002cfe4 	.word	0x0002cfe4
   281e4:	00033dd7 	.word	0x00033dd7
   281e8:	00033dd2 	.word	0x00033dd2
   281ec:	00033f7a 	.word	0x00033f7a
   281f0:	00033f70 	.word	0x00033f70
   281f4:	000331a4 	.word	0x000331a4
   281f8:	000331cb 	.word	0x000331cb
   281fc:	000331f9 	.word	0x000331f9
   28200:	00033223 	.word	0x00033223
   28204:	00033df1 	.word	0x00033df1
   28208:	0003313c 	.word	0x0003313c
   2820c:	00033150 	.word	0x00033150
   28210:	00033250 	.word	0x00033250
   28214:	7fffff9b 	.word	0x7fffff9b
   28218:	00031586 	.word	0x00031586
   2821c:	00033de1 	.word	0x00033de1
   28220:	00032f56 	.word	0x00032f56

00028224 <context_info>:
{
   28224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28226:	4607      	mov	r7, r0
	struct ctx_info *info = data->user_data;
   28228:	e9d1 6400 	ldrd	r6, r4, [r1]
	if (!net_context_is_used(context)) {
   2822c:	f7fe fc40 	bl	26ab0 <net_context_is_used>
   28230:	b158      	cbz	r0, 2824a <context_info+0x26>
	if (context->tx_slab) {
   28232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28234:	b1fb      	cbz	r3, 28276 <context_info+0x52>
		slab = context->tx_slab();
   28236:	4798      	blx	r3
   28238:	f104 0308 	add.w	r3, r4, #8
   2823c:	4605      	mov	r5, r0
   2823e:	f104 021c 	add.w	r2, r4, #28
		if (slab) {
   28242:	b125      	cbz	r5, 2824e <context_info+0x2a>
			if (info->tx_slabs[i] == slab) {
   28244:	6819      	ldr	r1, [r3, #0]
   28246:	428d      	cmp	r5, r1
   28248:	d104      	bne.n	28254 <context_info+0x30>
}
   2824a:	b003      	add	sp, #12
   2824c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (info->data_pools[i] == pool) {
   2824e:	6959      	ldr	r1, [r3, #20]
   28250:	2900      	cmp	r1, #0
   28252:	d0fa      	beq.n	2824a <context_info+0x26>
   28254:	3304      	adds	r3, #4
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   28256:	429a      	cmp	r2, r3
   28258:	d1f3      	bne.n	28242 <context_info+0x1e>
		PR("%p\t%d\tETX\n", slab, slab->num_blocks);
   2825a:	68ab      	ldr	r3, [r5, #8]
   2825c:	9300      	str	r3, [sp, #0]
   2825e:	4a16      	ldr	r2, [pc, #88]	; (282b8 <context_info+0x94>)
   28260:	462b      	mov	r3, r5
   28262:	2100      	movs	r1, #0
   28264:	4630      	mov	r0, r6
   28266:	f7db f8b1 	bl	33cc <shell_fprintf>
		info->are_external_pools = true;
   2826a:	2301      	movs	r3, #1
   2826c:	7123      	strb	r3, [r4, #4]
		info->tx_slabs[info->pos] = slab;
   2826e:	6823      	ldr	r3, [r4, #0]
   28270:	3302      	adds	r3, #2
   28272:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	if (context->data_pool) {
   28276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28278:	b1cb      	cbz	r3, 282ae <context_info+0x8a>
		pool = context->data_pool();
   2827a:	4798      	blx	r3
   2827c:	f104 031c 	add.w	r3, r4, #28
   28280:	4605      	mov	r5, r0
   28282:	f104 0230 	add.w	r2, r4, #48	; 0x30
			if (info->data_pools[i] == pool) {
   28286:	f853 1b04 	ldr.w	r1, [r3], #4
   2828a:	428d      	cmp	r5, r1
   2828c:	d0dd      	beq.n	2824a <context_info+0x26>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   2828e:	429a      	cmp	r2, r3
   28290:	d1f9      	bne.n	28286 <context_info+0x62>
		PR("%p\t%d\tEDATA\n", pool, pool->buf_count);
   28292:	8a2b      	ldrh	r3, [r5, #16]
   28294:	9300      	str	r3, [sp, #0]
   28296:	4a09      	ldr	r2, [pc, #36]	; (282bc <context_info+0x98>)
   28298:	462b      	mov	r3, r5
   2829a:	2100      	movs	r1, #0
   2829c:	4630      	mov	r0, r6
   2829e:	f7db f895 	bl	33cc <shell_fprintf>
		info->are_external_pools = true;
   282a2:	2301      	movs	r3, #1
   282a4:	7123      	strb	r3, [r4, #4]
		info->data_pools[info->pos] = pool;
   282a6:	6823      	ldr	r3, [r4, #0]
   282a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   282ac:	61dd      	str	r5, [r3, #28]
	info->pos++;
   282ae:	6823      	ldr	r3, [r4, #0]
   282b0:	3301      	adds	r3, #1
   282b2:	6023      	str	r3, [r4, #0]
   282b4:	e7c9      	b.n	2824a <context_info+0x26>
   282b6:	bf00      	nop
   282b8:	00033d79 	.word	0x00033d79
   282bc:	00033d84 	.word	0x00033d84

000282c0 <cmd_net_route>:
{
   282c0:	b513      	push	{r0, r1, r4, lr}
	if (shell_help_requested(shell)) {
   282c2:	6882      	ldr	r2, [r0, #8]
   282c4:	f8d2 424c 	ldr.w	r4, [r2, #588]	; 0x24c
   282c8:	f3c4 0440 	ubfx	r4, r4, #1, #1
   282cc:	b13c      	cbz	r4, 282de <cmd_net_route+0x1e>
		shell_help_print(shell, NULL, 0);
   282ce:	2200      	movs	r2, #0
   282d0:	4611      	mov	r1, r2
   282d2:	f7db f97f 	bl	35d4 <shell_help_print>
   282d6:	f06f 0007 	mvn.w	r0, #7
}
   282da:	b002      	add	sp, #8
   282dc:	bd10      	pop	{r4, pc}
	user_data.shell = shell;
   282de:	a902      	add	r1, sp, #8
   282e0:	f841 0d08 	str.w	r0, [r1, #-8]!
	net_if_foreach(iface_per_route_cb, &user_data);
   282e4:	4802      	ldr	r0, [pc, #8]	; (282f0 <cmd_net_route+0x30>)
   282e6:	f7f8 fe0f 	bl	20f08 <net_if_foreach>
	return 0;
   282ea:	4620      	mov	r0, r4
   282ec:	e7f5      	b.n	282da <cmd_net_route+0x1a>
   282ee:	bf00      	nop
   282f0:	00027e4d 	.word	0x00027e4d

000282f4 <net_shell_init>:
SHELL_CMD_REGISTER(net, &net_commands, "Networking commands", NULL);

int net_shell_init(void)
{
	return 0;
}
   282f4:	2000      	movs	r0, #0
   282f6:	4770      	bx	lr

000282f8 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   282f8:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   282fa:	b942      	cbnz	r2, 2830e <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   282fc:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   282fe:	b933      	cbnz	r3, 2830e <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   28300:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   28302:	b922      	cbnz	r2, 2830e <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   28304:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   28306:	fab0 f080 	clz	r0, r0
   2830a:	0940      	lsrs	r0, r0, #5
   2830c:	4770      	bx	lr
   2830e:	2000      	movs	r0, #0
   28310:	4770      	bx	lr

00028312 <check_addr>:
	return pkt->family;
   28312:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   28316:	b510      	push	{r4, lr}
   28318:	460c      	mov	r4, r1
	if (addr->sa_family != net_pkt_family(pkt)) {
   2831a:	8809      	ldrh	r1, [r1, #0]
   2831c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   28320:	4299      	cmp	r1, r3
   28322:	d116      	bne.n	28352 <check_addr+0x40>
		return false;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   28324:	2b0a      	cmp	r3, #10
   28326:	d116      	bne.n	28356 <check_addr+0x44>
   28328:	290a      	cmp	r1, #10
   2832a:	d114      	bne.n	28356 <check_addr+0x44>
   2832c:	6943      	ldr	r3, [r0, #20]
   2832e:	6899      	ldr	r1, [r3, #8]
		struct in6_addr *addr6;

		if (is_remote) {
   28330:	b16a      	cbz	r2, 2834e <check_addr+0x3c>
			addr6 = &NET_IPV6_HDR(pkt)->src;
   28332:	3108      	adds	r1, #8
		} else {
			addr6 = &NET_IPV6_HDR(pkt)->dst;
		}

		if (!net_is_ipv6_addr_unspecified(
			    &net_sin6(addr)->sin6_addr)) {
   28334:	3404      	adds	r4, #4
		if (!net_is_ipv6_addr_unspecified(
   28336:	4620      	mov	r0, r4
   28338:	f7ff ffde 	bl	282f8 <net_is_ipv6_addr_unspecified>
   2833c:	b930      	cbnz	r0, 2834c <check_addr+0x3a>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2833e:	2210      	movs	r2, #16
   28340:	4620      	mov	r0, r4
   28342:	f7dd fd7a 	bl	5e3a <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   28346:	fab0 f080 	clz	r0, r0
   2834a:	0940      	lsrs	r0, r0, #5
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   2834c:	bd10      	pop	{r4, pc}
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   2834e:	3118      	adds	r1, #24
   28350:	e7f0      	b.n	28334 <check_addr+0x22>
		return false;
   28352:	2000      	movs	r0, #0
   28354:	e7fa      	b.n	2834c <check_addr+0x3a>
	return true;
   28356:	2001      	movs	r0, #1
   28358:	e7f8      	b.n	2834c <check_addr+0x3a>
	...

0002835c <net_conn_unregister>:
{
   2835c:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   2835e:	4b0b      	ldr	r3, [pc, #44]	; (2838c <net_conn_unregister+0x30>)
   28360:	4298      	cmp	r0, r3
   28362:	d30c      	bcc.n	2837e <net_conn_unregister+0x22>
   28364:	33f0      	adds	r3, #240	; 0xf0
   28366:	4298      	cmp	r0, r3
   28368:	d809      	bhi.n	2837e <net_conn_unregister+0x22>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   2836a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2836e:	07db      	lsls	r3, r3, #31
   28370:	d508      	bpl.n	28384 <net_conn_unregister+0x28>
	(void)memset(conn, 0, sizeof(*conn));
   28372:	223c      	movs	r2, #60	; 0x3c
   28374:	2100      	movs	r1, #0
   28376:	f7dd fdb4 	bl	5ee2 <memset>
	return 0;
   2837a:	2000      	movs	r0, #0
}
   2837c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2837e:	f06f 0015 	mvn.w	r0, #21
   28382:	e7fb      	b.n	2837c <net_conn_unregister+0x20>
		return -ENOENT;
   28384:	f06f 0001 	mvn.w	r0, #1
   28388:	e7f8      	b.n	2837c <net_conn_unregister+0x20>
   2838a:	bf00      	nop
   2838c:	200028b8 	.word	0x200028b8

00028390 <net_conn_register>:
{
   28390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28394:	b087      	sub	sp, #28
   28396:	f8df 8264 	ldr.w	r8, [pc, #612]	; 285fc <net_conn_register+0x26c>
   2839a:	9301      	str	r3, [sp, #4]
   2839c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   283a0:	9302      	str	r3, [sp, #8]
   283a2:	9b01      	ldr	r3, [sp, #4]
   283a4:	ba5b      	rev16	r3, r3
   283a6:	f8ad 300e 	strh.w	r3, [sp, #14]
   283aa:	b29b      	uxth	r3, r3
   283ac:	9304      	str	r3, [sp, #16]
   283ae:	9b02      	ldr	r3, [sp, #8]
   283b0:	fa93 fb93 	rev16.w	fp, r3
   283b4:	fa1f f38b 	uxth.w	r3, fp
   283b8:	4682      	mov	sl, r0
   283ba:	460e      	mov	r6, r1
   283bc:	4617      	mov	r7, r2
   283be:	9305      	str	r3, [sp, #20]
   283c0:	2400      	movs	r4, #0
   283c2:	f108 0904 	add.w	r9, r8, #4
   283c6:	eb08 0504 	add.w	r5, r8, r4
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   283ca:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   283ce:	07da      	lsls	r2, r3, #31
   283d0:	d416      	bmi.n	28400 <net_conn_register+0x70>
   283d2:	343c      	adds	r4, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   283d4:	2cf0      	cmp	r4, #240	; 0xf0
   283d6:	d1f6      	bne.n	283c6 <net_conn_register+0x36>
   283d8:	4988      	ldr	r1, [pc, #544]	; (285fc <net_conn_register+0x26c>)
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   283da:	2400      	movs	r4, #0
   283dc:	223c      	movs	r2, #60	; 0x3c
   283de:	fb02 f904 	mul.w	r9, r2, r4
   283e2:	eb01 0809 	add.w	r8, r1, r9
		if (conns[i].flags & NET_CONN_IN_USE) {
   283e6:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
   283ea:	f013 0301 	ands.w	r3, r3, #1
   283ee:	d05b      	beq.n	284a8 <net_conn_register+0x118>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   283f0:	3401      	adds	r4, #1
   283f2:	2c04      	cmp	r4, #4
   283f4:	d1f3      	bne.n	283de <net_conn_register+0x4e>
	return -ENOENT;
   283f6:	f06f 0001 	mvn.w	r0, #1
}
   283fa:	b007      	add	sp, #28
   283fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conns[i].proto != proto) {
   28400:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   28404:	4552      	cmp	r2, sl
   28406:	d1e4      	bne.n	283d2 <net_conn_register+0x42>
   28408:	f003 0302 	and.w	r3, r3, #2
		if (remote_addr) {
   2840c:	b1be      	cbz	r6, 2843e <net_conn_register+0xae>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   2840e:	2b00      	cmp	r3, #0
   28410:	d0df      	beq.n	283d2 <net_conn_register+0x42>
			if (remote_addr->sa_family == AF_INET6 &&
   28412:	8833      	ldrh	r3, [r6, #0]
   28414:	2b0a      	cmp	r3, #10
   28416:	d1dc      	bne.n	283d2 <net_conn_register+0x42>
   28418:	f834 3008 	ldrh.w	r3, [r4, r8]
   2841c:	2b0a      	cmp	r3, #10
   2841e:	d1d8      	bne.n	283d2 <net_conn_register+0x42>
   28420:	2210      	movs	r2, #16
   28422:	eb09 0104 	add.w	r1, r9, r4
   28426:	1d30      	adds	r0, r6, #4
   28428:	f7dd fd07 	bl	5e3a <memcmp>
				if (!net_ipv6_addr_cmp(
   2842c:	2800      	cmp	r0, #0
   2842e:	d1d0      	bne.n	283d2 <net_conn_register+0x42>
   28430:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   28434:	f003 0304 	and.w	r3, r3, #4
		if (local_addr) {
   28438:	b927      	cbnz	r7, 28444 <net_conn_register+0xb4>
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2843a:	b19b      	cbz	r3, 28464 <net_conn_register+0xd4>
   2843c:	e7c9      	b.n	283d2 <net_conn_register+0x42>
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   2843e:	2b00      	cmp	r3, #0
   28440:	d0f6      	beq.n	28430 <net_conn_register+0xa0>
   28442:	e7c6      	b.n	283d2 <net_conn_register+0x42>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   28444:	2b00      	cmp	r3, #0
   28446:	d0c4      	beq.n	283d2 <net_conn_register+0x42>
			if (local_addr->sa_family == AF_INET6 &&
   28448:	883b      	ldrh	r3, [r7, #0]
   2844a:	2b0a      	cmp	r3, #10
   2844c:	d1c1      	bne.n	283d2 <net_conn_register+0x42>
   2844e:	8b2b      	ldrh	r3, [r5, #24]
   28450:	2b0a      	cmp	r3, #10
   28452:	d1be      	bne.n	283d2 <net_conn_register+0x42>
   28454:	4b6a      	ldr	r3, [pc, #424]	; (28600 <net_conn_register+0x270>)
   28456:	2210      	movs	r2, #16
   28458:	1919      	adds	r1, r3, r4
   2845a:	1d38      	adds	r0, r7, #4
   2845c:	f7dd fced 	bl	5e3a <memcmp>
				if (!net_ipv6_addr_cmp(
   28460:	2800      	cmp	r0, #0
   28462:	d1b6      	bne.n	283d2 <net_conn_register+0x42>
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   28464:	886b      	ldrh	r3, [r5, #2]
   28466:	9904      	ldr	r1, [sp, #16]
   28468:	428b      	cmp	r3, r1
   2846a:	eb08 0204 	add.w	r2, r8, r4
   2846e:	d1b0      	bne.n	283d2 <net_conn_register+0x42>
		if (net_sin(&conns[i].local_addr)->sin_port !=
   28470:	8b6b      	ldrh	r3, [r5, #26]
   28472:	9905      	ldr	r1, [sp, #20]
   28474:	428b      	cmp	r3, r1
   28476:	d1ac      	bne.n	283d2 <net_conn_register+0x42>
		NET_ERR("Identical connection handler %p already found.",
   28478:	4b62      	ldr	r3, [pc, #392]	; (28604 <net_conn_register+0x274>)
   2847a:	681b      	ldr	r3, [r3, #0]
   2847c:	075b      	lsls	r3, r3, #29
   2847e:	d010      	beq.n	284a2 <net_conn_register+0x112>
   28480:	2101      	movs	r1, #1
   28482:	f04f 0300 	mov.w	r3, #0
   28486:	f361 0302 	bfi	r3, r1, #0, #3
   2848a:	485f      	ldr	r0, [pc, #380]	; (28608 <net_conn_register+0x278>)
   2848c:	495f      	ldr	r1, [pc, #380]	; (2860c <net_conn_register+0x27c>)
   2848e:	1a09      	subs	r1, r1, r0
   28490:	08c9      	lsrs	r1, r1, #3
   28492:	f36f 03c5 	bfc	r3, #3, #3
   28496:	f361 138f 	bfi	r3, r1, #6, #10
   2849a:	485d      	ldr	r0, [pc, #372]	; (28610 <net_conn_register+0x280>)
   2849c:	495d      	ldr	r1, [pc, #372]	; (28614 <net_conn_register+0x284>)
   2849e:	f7d9 fc6f 	bl	1d80 <log_2>
		return -EALREADY;
   284a2:	f06f 0044 	mvn.w	r0, #68	; 0x44
   284a6:	e7a8      	b.n	283fa <net_conn_register+0x6a>
		if (remote_addr) {
   284a8:	2e00      	cmp	r6, #0
   284aa:	d066      	beq.n	2857a <net_conn_register+0x1ea>
			if (remote_addr->sa_family == AF_INET6) {
   284ac:	8832      	ldrh	r2, [r6, #0]
   284ae:	2a0a      	cmp	r2, #10
   284b0:	d14a      	bne.n	28548 <net_conn_register+0x1b8>
				memcpy(&conns[i].remote_addr, remote_addr,
   284b2:	2218      	movs	r2, #24
   284b4:	4631      	mov	r1, r6
   284b6:	4640      	mov	r0, r8
   284b8:	f7dd fce6 	bl	5e88 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   284bc:	1d30      	adds	r0, r6, #4
   284be:	f7ff ff1b 	bl	282f8 <net_is_ipv6_addr_unspecified>
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   284c2:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   284c6:	2800      	cmp	r0, #0
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   284c8:	f043 0302 	orr.w	r3, r3, #2
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   284cc:	bf14      	ite	ne
   284ce:	2508      	movne	r5, #8
   284d0:	2520      	moveq	r5, #32
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   284d2:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
		if (local_addr) {
   284d6:	2f00      	cmp	r7, #0
   284d8:	d068      	beq.n	285ac <net_conn_register+0x21c>
			if (local_addr->sa_family == AF_INET6) {
   284da:	883b      	ldrh	r3, [r7, #0]
   284dc:	2b0a      	cmp	r3, #10
   284de:	d151      	bne.n	28584 <net_conn_register+0x1f4>
				memcpy(&conns[i].local_addr, local_addr,
   284e0:	4b46      	ldr	r3, [pc, #280]	; (285fc <net_conn_register+0x26c>)
   284e2:	9304      	str	r3, [sp, #16]
   284e4:	f109 0018 	add.w	r0, r9, #24
   284e8:	4418      	add	r0, r3
   284ea:	2218      	movs	r2, #24
   284ec:	4639      	mov	r1, r7
   284ee:	f7dd fccb 	bl	5e88 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   284f2:	1d38      	adds	r0, r7, #4
   284f4:	f7ff ff00 	bl	282f8 <net_is_ipv6_addr_unspecified>
   284f8:	9b04      	ldr	r3, [sp, #16]
   284fa:	2800      	cmp	r0, #0
   284fc:	d03f      	beq.n	2857e <net_conn_register+0x1ee>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   284fe:	f045 0504 	orr.w	r5, r5, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   28502:	223c      	movs	r2, #60	; 0x3c
   28504:	fb02 3304 	mla	r3, r2, r4, r3
   28508:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2850c:	f042 0204 	orr.w	r2, r2, #4
   28510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   28514:	2e00      	cmp	r6, #0
   28516:	d049      	beq.n	285ac <net_conn_register+0x21c>
			if (remote_addr->sa_family != local_addr->sa_family) {
   28518:	8832      	ldrh	r2, [r6, #0]
   2851a:	883b      	ldrh	r3, [r7, #0]
   2851c:	429a      	cmp	r2, r3
   2851e:	d045      	beq.n	285ac <net_conn_register+0x21c>
				NET_ERR("Address families different");
   28520:	4b38      	ldr	r3, [pc, #224]	; (28604 <net_conn_register+0x274>)
   28522:	681b      	ldr	r3, [r3, #0]
   28524:	075a      	lsls	r2, r3, #29
   28526:	d013      	beq.n	28550 <net_conn_register+0x1c0>
   28528:	2301      	movs	r3, #1
   2852a:	f04f 0200 	mov.w	r2, #0
   2852e:	f363 0202 	bfi	r2, r3, #0, #3
   28532:	4935      	ldr	r1, [pc, #212]	; (28608 <net_conn_register+0x278>)
   28534:	4b35      	ldr	r3, [pc, #212]	; (2860c <net_conn_register+0x27c>)
   28536:	4838      	ldr	r0, [pc, #224]	; (28618 <net_conn_register+0x288>)
   28538:	1a5b      	subs	r3, r3, r1
   2853a:	f36f 02c5 	bfc	r2, #3, #3
   2853e:	08db      	lsrs	r3, r3, #3
   28540:	f363 128f 	bfi	r2, r3, #6, #10
   28544:	4933      	ldr	r1, [pc, #204]	; (28614 <net_conn_register+0x284>)
   28546:	e015      	b.n	28574 <net_conn_register+0x1e4>
				NET_ERR("Remote address family not set");
   28548:	4a2e      	ldr	r2, [pc, #184]	; (28604 <net_conn_register+0x274>)
   2854a:	6812      	ldr	r2, [r2, #0]
   2854c:	0750      	lsls	r0, r2, #29
   2854e:	d102      	bne.n	28556 <net_conn_register+0x1c6>
				return -EINVAL;
   28550:	f06f 0015 	mvn.w	r0, #21
   28554:	e751      	b.n	283fa <net_conn_register+0x6a>
				NET_ERR("Remote address family not set");
   28556:	2101      	movs	r1, #1
   28558:	f04f 0200 	mov.w	r2, #0
   2855c:	f361 0202 	bfi	r2, r1, #0, #3
   28560:	f363 02c5 	bfi	r2, r3, #3, #3
   28564:	4928      	ldr	r1, [pc, #160]	; (28608 <net_conn_register+0x278>)
   28566:	4b29      	ldr	r3, [pc, #164]	; (2860c <net_conn_register+0x27c>)
   28568:	482c      	ldr	r0, [pc, #176]	; (2861c <net_conn_register+0x28c>)
   2856a:	1a5b      	subs	r3, r3, r1
   2856c:	08db      	lsrs	r3, r3, #3
   2856e:	4929      	ldr	r1, [pc, #164]	; (28614 <net_conn_register+0x284>)
   28570:	f363 128f 	bfi	r2, r3, #6, #10
				NET_ERR("Address families different");
   28574:	f7d9 fbf0 	bl	1d58 <log_1>
   28578:	e7ea      	b.n	28550 <net_conn_register+0x1c0>
	u8_t rank = 0;
   2857a:	4635      	mov	r5, r6
   2857c:	e7ab      	b.n	284d6 <net_conn_register+0x146>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   2857e:	f045 0510 	orr.w	r5, r5, #16
   28582:	e7be      	b.n	28502 <net_conn_register+0x172>
				NET_ERR("Local address family not set");
   28584:	4b1f      	ldr	r3, [pc, #124]	; (28604 <net_conn_register+0x274>)
   28586:	681b      	ldr	r3, [r3, #0]
   28588:	0759      	lsls	r1, r3, #29
   2858a:	d0e1      	beq.n	28550 <net_conn_register+0x1c0>
   2858c:	2301      	movs	r3, #1
   2858e:	f04f 0200 	mov.w	r2, #0
   28592:	f363 0202 	bfi	r2, r3, #0, #3
   28596:	491c      	ldr	r1, [pc, #112]	; (28608 <net_conn_register+0x278>)
   28598:	4b1c      	ldr	r3, [pc, #112]	; (2860c <net_conn_register+0x27c>)
   2859a:	4821      	ldr	r0, [pc, #132]	; (28620 <net_conn_register+0x290>)
   2859c:	1a5b      	subs	r3, r3, r1
   2859e:	f36f 02c5 	bfc	r2, #3, #3
   285a2:	08db      	lsrs	r3, r3, #3
   285a4:	f363 128f 	bfi	r2, r3, #6, #10
   285a8:	491a      	ldr	r1, [pc, #104]	; (28614 <net_conn_register+0x284>)
   285aa:	e7e3      	b.n	28574 <net_conn_register+0x1e4>
		if (remote_port) {
   285ac:	9b01      	ldr	r3, [sp, #4]
   285ae:	b12b      	cbz	r3, 285bc <net_conn_register+0x22c>
			net_sin(&conns[i].remote_addr)->sin_port =
   285b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   285b4:	f8a8 3002 	strh.w	r3, [r8, #2]
			rank |= NET_RANK_REMOTE_PORT;
   285b8:	f045 0502 	orr.w	r5, r5, #2
		if (local_port) {
   285bc:	9a02      	ldr	r2, [sp, #8]
   285be:	4b0f      	ldr	r3, [pc, #60]	; (285fc <net_conn_register+0x26c>)
   285c0:	b122      	cbz	r2, 285cc <net_conn_register+0x23c>
			net_sin(&conns[i].local_addr)->sin_port =
   285c2:	4499      	add	r9, r3
			rank |= NET_RANK_LOCAL_PORT;
   285c4:	f045 0501 	orr.w	r5, r5, #1
			net_sin(&conns[i].local_addr)->sin_port =
   285c8:	f8a9 b01a 	strh.w	fp, [r9, #26]
		conns[i].flags |= NET_CONN_IN_USE;
   285cc:	223c      	movs	r2, #60	; 0x3c
   285ce:	fb02 3404 	mla	r4, r2, r4, r3
   285d2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conns[i].rank = rank;
   285d6:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
		conns[i].flags |= NET_CONN_IN_USE;
   285da:	f043 0301 	orr.w	r3, r3, #1
   285de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conns[i].cb = cb;
   285e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   285e4:	6323      	str	r3, [r4, #48]	; 0x30
		conns[i].user_data = user_data;
   285e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   285e8:	6363      	str	r3, [r4, #52]	; 0x34
		if (handle) {
   285ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		conns[i].proto = proto;
   285ec:	f884 a038 	strb.w	sl, [r4, #56]	; 0x38
		if (handle) {
   285f0:	b10b      	cbz	r3, 285f6 <net_conn_register+0x266>
			*handle = (struct net_conn_handle *)&conns[i];
   285f2:	f8c3 8000 	str.w	r8, [r3]
		return 0;
   285f6:	2000      	movs	r0, #0
   285f8:	e6ff      	b.n	283fa <net_conn_register+0x6a>
   285fa:	bf00      	nop
   285fc:	200028b8 	.word	0x200028b8
   28600:	200028d4 	.word	0x200028d4
   28604:	2000d784 	.word	0x2000d784
   28608:	0002cff8 	.word	0x0002cff8
   2860c:	0002d0e0 	.word	0x0002d0e0
   28610:	00034b0f 	.word	0x00034b0f
   28614:	00034afd 	.word	0x00034afd
   28618:	00034b85 	.word	0x00034b85
   2861c:	00034b42 	.word	0x00034b42
   28620:	00034b64 	.word	0x00034b64

00028624 <net_conn_input>:

	return my_src_addr && (src_port == dst_port);
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   28624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   28628:	2811      	cmp	r0, #17
{
   2862a:	b089      	sub	sp, #36	; 0x24
   2862c:	4680      	mov	r8, r0
   2862e:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   28630:	d149      	bne.n	286c6 <net_conn_input+0xa2>
		struct net_udp_hdr hdr, *udp_hdr;

		ARG_UNUSED(hdr);

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   28632:	a903      	add	r1, sp, #12
   28634:	4620      	mov	r0, r4
   28636:	f001 fe65 	bl	2a304 <net_udp_get_hdr>
		if (!udp_hdr) {
   2863a:	b908      	cbnz	r0, 28640 <net_conn_input+0x1c>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   2863c:	2002      	movs	r0, #2
   2863e:	e072      	b.n	28726 <net_conn_input+0x102>
		src_port = udp_hdr->src_port;
   28640:	f8b0 a000 	ldrh.w	sl, [r0]
		dst_port = udp_hdr->dst_port;
   28644:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   28648:	f8b0 9006 	ldrh.w	r9, [r0, #6]
	return pkt->frags->data;
   2864c:	6963      	ldr	r3, [r4, #20]
   2864e:	6898      	ldr	r0, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   28650:	7803      	ldrb	r3, [r0, #0]
   28652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28656:	2b60      	cmp	r3, #96	; 0x60
   28658:	d106      	bne.n	28668 <net_conn_input+0x44>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   2865a:	2100      	movs	r1, #0
   2865c:	3008      	adds	r0, #8
   2865e:	f7f7 fbb1 	bl	1fdc4 <net_if_ipv6_addr_lookup>
		if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   28662:	b108      	cbz	r0, 28668 <net_conn_input+0x44>
	if (is_invalid_packet(pkt, src_port, dst_port)) {
   28664:	45da      	cmp	sl, fp
   28666:	d0e9      	beq.n	2863c <net_conn_input+0x18>
{
   28668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2866c:	4d4b      	ldr	r5, [pc, #300]	; (2879c <net_conn_input+0x178>)
   2866e:	2600      	movs	r6, #0
   28670:	461f      	mov	r7, r3
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   28672:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   28676:	07d1      	lsls	r1, r2, #31
   28678:	d53c      	bpl.n	286f4 <net_conn_input+0xd0>
		if (conns[i].proto != proto) {
   2867a:	f895 1020 	ldrb.w	r1, [r5, #32]
   2867e:	4541      	cmp	r1, r8
   28680:	d138      	bne.n	286f4 <net_conn_input+0xd0>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   28682:	f835 0c16 	ldrh.w	r0, [r5, #-22]
   28686:	f1a5 0118 	sub.w	r1, r5, #24
   2868a:	b108      	cbz	r0, 28690 <net_conn_input+0x6c>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   2868c:	4550      	cmp	r0, sl
   2868e:	d131      	bne.n	286f4 <net_conn_input+0xd0>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   28690:	8868      	ldrh	r0, [r5, #2]
   28692:	b108      	cbz	r0, 28698 <net_conn_input+0x74>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   28694:	4558      	cmp	r0, fp
   28696:	d12d      	bne.n	286f4 <net_conn_input+0xd0>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   28698:	0790      	lsls	r0, r2, #30
   2869a:	d423      	bmi.n	286e4 <net_conn_input+0xc0>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2869c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   286a0:	0751      	lsls	r1, r2, #29
   286a2:	d507      	bpl.n	286b4 <net_conn_input+0x90>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   286a4:	2200      	movs	r2, #0
   286a6:	4629      	mov	r1, r5
   286a8:	4620      	mov	r0, r4
   286aa:	9301      	str	r3, [sp, #4]
   286ac:	f7ff fe31 	bl	28312 <check_addr>
   286b0:	9b01      	ldr	r3, [sp, #4]
   286b2:	b1f8      	cbz	r0, 286f4 <net_conn_input+0xd0>
		if (best_match >= 0 &&
   286b4:	1c7a      	adds	r2, r7, #1
   286b6:	d139      	bne.n	2872c <net_conn_input+0x108>
		if (best_rank < conns[i].rank) {
   286b8:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   286bc:	4293      	cmp	r3, r2
			best_rank = conns[i].rank;
   286be:	bfbc      	itt	lt
   286c0:	b213      	sxthlt	r3, r2
   286c2:	4637      	movlt	r7, r6
   286c4:	e016      	b.n	286f4 <net_conn_input+0xd0>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   286c6:	2806      	cmp	r0, #6
   286c8:	d1b8      	bne.n	2863c <net_conn_input+0x18>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   286ca:	a903      	add	r1, sp, #12
   286cc:	4620      	mov	r0, r4
   286ce:	f000 fddb 	bl	29288 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   286d2:	2800      	cmp	r0, #0
   286d4:	d0b2      	beq.n	2863c <net_conn_input+0x18>
		src_port = tcp_hdr->src_port;
   286d6:	f8b0 a000 	ldrh.w	sl, [r0]
		dst_port = tcp_hdr->dst_port;
   286da:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   286de:	f8b0 9010 	ldrh.w	r9, [r0, #16]
   286e2:	e7b3      	b.n	2864c <net_conn_input+0x28>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   286e4:	2201      	movs	r2, #1
   286e6:	4620      	mov	r0, r4
   286e8:	9301      	str	r3, [sp, #4]
   286ea:	f7ff fe12 	bl	28312 <check_addr>
   286ee:	9b01      	ldr	r3, [sp, #4]
   286f0:	2800      	cmp	r0, #0
   286f2:	d1d3      	bne.n	2869c <net_conn_input+0x78>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   286f4:	3601      	adds	r6, #1
   286f6:	2e04      	cmp	r6, #4
   286f8:	f105 053c 	add.w	r5, r5, #60	; 0x3c
   286fc:	d1b9      	bne.n	28672 <net_conn_input+0x4e>
	if (best_match >= 0) {
   286fe:	1c7b      	adds	r3, r7, #1
   28700:	d038      	beq.n	28774 <net_conn_input+0x150>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   28702:	f1b8 0f11 	cmp.w	r8, #17
   28706:	d124      	bne.n	28752 <net_conn_input+0x12e>
		    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   28708:	6a20      	ldr	r0, [r4, #32]
   2870a:	f7f8 fbbe 	bl	20e8a <net_if_need_calc_rx_checksum>
		    proto == IPPROTO_UDP &&
   2870e:	b9a8      	cbnz	r0, 2873c <net_conn_input+0x118>
		if (conns[best_match].cb(&conns[best_match], pkt,
   28710:	4b23      	ldr	r3, [pc, #140]	; (287a0 <net_conn_input+0x17c>)
   28712:	203c      	movs	r0, #60	; 0x3c
   28714:	fb00 3007 	mla	r0, r0, r7, r3
   28718:	e9d0 320c 	ldrd	r3, r2, [r0, #48]	; 0x30
   2871c:	4621      	mov	r1, r4
   2871e:	4798      	blx	r3
   28720:	2802      	cmp	r0, #2
   28722:	d08b      	beq.n	2863c <net_conn_input+0x18>
		return NET_OK;
   28724:	2000      	movs	r0, #0
}
   28726:	b009      	add	sp, #36	; 0x24
   28728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   2872c:	491c      	ldr	r1, [pc, #112]	; (287a0 <net_conn_input+0x17c>)
   2872e:	223c      	movs	r2, #60	; 0x3c
   28730:	fb02 1207 	mla	r2, r2, r7, r1
		if (best_match >= 0 &&
   28734:	8852      	ldrh	r2, [r2, #2]
   28736:	2a00      	cmp	r2, #0
   28738:	d0be      	beq.n	286b8 <net_conn_input+0x94>
   2873a:	e7db      	b.n	286f4 <net_conn_input+0xd0>
			net_udp_set_chksum(pkt, pkt->frags);
   2873c:	6961      	ldr	r1, [r4, #20]
   2873e:	4620      	mov	r0, r4
   28740:	f001 fd36 	bl	2a1b0 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   28744:	6961      	ldr	r1, [r4, #20]
   28746:	4620      	mov	r0, r4
   28748:	f001 fd9c 	bl	2a284 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   2874c:	4548      	cmp	r0, r9
   2874e:	d0df      	beq.n	28710 <net_conn_input+0xec>
   28750:	e774      	b.n	2863c <net_conn_input+0x18>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   28752:	f1b8 0f06 	cmp.w	r8, #6
   28756:	d1db      	bne.n	28710 <net_conn_input+0xec>
			   net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   28758:	6a20      	ldr	r0, [r4, #32]
   2875a:	f7f8 fb96 	bl	20e8a <net_if_need_calc_rx_checksum>
			   proto == IPPROTO_TCP &&
   2875e:	2800      	cmp	r0, #0
   28760:	d0d6      	beq.n	28710 <net_conn_input+0xec>
			net_tcp_set_chksum(pkt, pkt->frags);
   28762:	6961      	ldr	r1, [r4, #20]
   28764:	4620      	mov	r0, r4
   28766:	f001 f803 	bl	29770 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   2876a:	6961      	ldr	r1, [r4, #20]
   2876c:	4620      	mov	r0, r4
   2876e:	f000 ffbd 	bl	296ec <net_tcp_get_chksum>
   28772:	e7eb      	b.n	2874c <net_conn_input+0x128>
	return pkt->family;
   28774:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6 &&
   28778:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2877c:	2b0a      	cmp	r3, #10
   2877e:	f47f af5d 	bne.w	2863c <net_conn_input+0x18>
	return pkt->frags->data;
   28782:	6963      	ldr	r3, [r4, #20]
	    net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   28784:	689b      	ldr	r3, [r3, #8]
	if (net_pkt_family(pkt) == AF_INET6 &&
   28786:	7e1b      	ldrb	r3, [r3, #24]
   28788:	2bff      	cmp	r3, #255	; 0xff
   2878a:	f43f af57 	beq.w	2863c <net_conn_input+0x18>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   2878e:	2300      	movs	r3, #0
   28790:	4632      	mov	r2, r6
   28792:	2101      	movs	r1, #1
   28794:	4620      	mov	r0, r4
   28796:	f7fa ff15 	bl	235c4 <net_icmpv6_send_error>
   2879a:	e74f      	b.n	2863c <net_conn_input+0x18>
   2879c:	200028d0 	.word	0x200028d0
   287a0:	200028b8 	.word	0x200028b8

000287a4 <net_conn_init>:
		for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
			conn_cache[i].idx = -1;
		}
	} while (0);
#endif /* CONFIG_NET_CONN_CACHE */
}
   287a4:	4770      	bx	lr

000287a6 <sys_get_be32>:
	return ((u16_t)src[0] << 8) | src[1];
   287a6:	7803      	ldrb	r3, [r0, #0]
   287a8:	7842      	ldrb	r2, [r0, #1]
   287aa:	7881      	ldrb	r1, [r0, #2]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   287ac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   287b0:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   287b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   287b6:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   287ba:	4770      	bx	lr

000287bc <handle_fin_timeout>:
	struct net_tcp *tcp =
		CONTAINER_OF(work, struct net_tcp, fin_timer);

	NET_DBG("Did not receive FIN in %dms", FIN_TIMEOUT);

	net_context_unref(tcp->context);
   287bc:	f850 0c28 	ldr.w	r0, [r0, #-40]
   287c0:	f7f6 bc2e 	b.w	1f020 <net_context_unref>

000287c4 <k_delayed_work_submit>:
   287c4:	460a      	mov	r2, r1
   287c6:	4601      	mov	r1, r0
   287c8:	4801      	ldr	r0, [pc, #4]	; (287d0 <k_delayed_work_submit+0xc>)
   287ca:	f003 bff9 	b.w	2c7c0 <k_delayed_work_submit_to_queue>
   287ce:	bf00      	nop
   287d0:	200031d8 	.word	0x200031d8

000287d4 <net_tcp_is_used>:
	return tcp->flags & NET_TCP_IN_USE;
   287d4:	f8b0 00bc 	ldrh.w	r0, [r0, #188]	; 0xbc
}
   287d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   287dc:	4770      	bx	lr
	...

000287e0 <net_context_get_ip_proto>:
{
   287e0:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   287e2:	4604      	mov	r4, r0
   287e4:	b9a0      	cbnz	r0, 28810 <net_context_get_ip_proto+0x30>
   287e6:	4b0e      	ldr	r3, [pc, #56]	; (28820 <net_context_get_ip_proto+0x40>)
   287e8:	681b      	ldr	r3, [r3, #0]
   287ea:	075b      	lsls	r3, r3, #29
   287ec:	d010      	beq.n	28810 <net_context_get_ip_proto+0x30>
   287ee:	2301      	movs	r3, #1
   287f0:	f04f 0200 	mov.w	r2, #0
   287f4:	f363 0202 	bfi	r2, r3, #0, #3
   287f8:	490a      	ldr	r1, [pc, #40]	; (28824 <net_context_get_ip_proto+0x44>)
   287fa:	4b0b      	ldr	r3, [pc, #44]	; (28828 <net_context_get_ip_proto+0x48>)
   287fc:	1a5b      	subs	r3, r3, r1
   287fe:	f360 02c5 	bfi	r2, r0, #3, #3
   28802:	08db      	lsrs	r3, r3, #3
   28804:	f363 128f 	bfi	r2, r3, #6, #10
   28808:	4908      	ldr	r1, [pc, #32]	; (2882c <net_context_get_ip_proto+0x4c>)
   2880a:	4809      	ldr	r0, [pc, #36]	; (28830 <net_context_get_ip_proto+0x50>)
   2880c:	f7d9 faa4 	bl	1d58 <log_1>
	if (context->flags & NET_CONTEXT_PROTO) {
   28810:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return IPPROTO_UDP;
   28814:	f013 0f40 	tst.w	r3, #64	; 0x40
}
   28818:	bf14      	ite	ne
   2881a:	2006      	movne	r0, #6
   2881c:	2011      	moveq	r0, #17
   2881e:	bd10      	pop	{r4, pc}
   28820:	2000d7c0 	.word	0x2000d7c0
   28824:	0002cff8 	.word	0x0002cff8
   28828:	0002d158 	.word	0x0002d158
   2882c:	00034cf5 	.word	0x00034cf5
   28830:	000322d6 	.word	0x000322d6

00028834 <net_context_get_family>:
{
   28834:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   28836:	4604      	mov	r4, r0
   28838:	b9a0      	cbnz	r0, 28864 <net_context_get_family+0x30>
   2883a:	4b0e      	ldr	r3, [pc, #56]	; (28874 <net_context_get_family+0x40>)
   2883c:	681b      	ldr	r3, [r3, #0]
   2883e:	075b      	lsls	r3, r3, #29
   28840:	d010      	beq.n	28864 <net_context_get_family+0x30>
   28842:	2301      	movs	r3, #1
   28844:	f04f 0200 	mov.w	r2, #0
   28848:	f363 0202 	bfi	r2, r3, #0, #3
   2884c:	490a      	ldr	r1, [pc, #40]	; (28878 <net_context_get_family+0x44>)
   2884e:	4b0b      	ldr	r3, [pc, #44]	; (2887c <net_context_get_family+0x48>)
   28850:	1a5b      	subs	r3, r3, r1
   28852:	f360 02c5 	bfi	r2, r0, #3, #3
   28856:	08db      	lsrs	r3, r3, #3
   28858:	f363 128f 	bfi	r2, r3, #6, #10
   2885c:	4908      	ldr	r1, [pc, #32]	; (28880 <net_context_get_family+0x4c>)
   2885e:	4809      	ldr	r0, [pc, #36]	; (28884 <net_context_get_family+0x50>)
   28860:	f7d9 fa7a 	bl	1d58 <log_1>
	if (context->flags & NET_CONTEXT_FAMILY) {
   28864:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
	return AF_INET;
   28868:	f013 0f10 	tst.w	r3, #16
}
   2886c:	bf14      	ite	ne
   2886e:	200a      	movne	r0, #10
   28870:	2002      	moveq	r0, #2
   28872:	bd10      	pop	{r4, pc}
   28874:	2000d7c0 	.word	0x2000d7c0
   28878:	0002cff8 	.word	0x0002cff8
   2887c:	0002d158 	.word	0x0002d158
   28880:	00034cde 	.word	0x00034cde
   28884:	000322d6 	.word	0x000322d6

00028888 <net_context_get_state>:
{
   28888:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   2888a:	4604      	mov	r4, r0
   2888c:	b9a0      	cbnz	r0, 288b8 <net_context_get_state+0x30>
   2888e:	4b0d      	ldr	r3, [pc, #52]	; (288c4 <net_context_get_state+0x3c>)
   28890:	681b      	ldr	r3, [r3, #0]
   28892:	075b      	lsls	r3, r3, #29
   28894:	d010      	beq.n	288b8 <net_context_get_state+0x30>
   28896:	2301      	movs	r3, #1
   28898:	f04f 0200 	mov.w	r2, #0
   2889c:	f363 0202 	bfi	r2, r3, #0, #3
   288a0:	4909      	ldr	r1, [pc, #36]	; (288c8 <net_context_get_state+0x40>)
   288a2:	4b0a      	ldr	r3, [pc, #40]	; (288cc <net_context_get_state+0x44>)
   288a4:	1a5b      	subs	r3, r3, r1
   288a6:	f360 02c5 	bfi	r2, r0, #3, #3
   288aa:	08db      	lsrs	r3, r3, #3
   288ac:	f363 128f 	bfi	r2, r3, #6, #10
   288b0:	4907      	ldr	r1, [pc, #28]	; (288d0 <net_context_get_state+0x48>)
   288b2:	4808      	ldr	r0, [pc, #32]	; (288d4 <net_context_get_state+0x4c>)
   288b4:	f7d9 fa50 	bl	1d58 <log_1>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   288b8:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
}
   288bc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   288c0:	bd10      	pop	{r4, pc}
   288c2:	bf00      	nop
   288c4:	2000d7c0 	.word	0x2000d7c0
   288c8:	0002cff8 	.word	0x0002cff8
   288cc:	0002d158 	.word	0x0002d158
   288d0:	00034cb2 	.word	0x00034cb2
   288d4:	000322d6 	.word	0x000322d6

000288d8 <net_context_set_state>:
{
   288d8:	b538      	push	{r3, r4, r5, lr}
   288da:	460d      	mov	r5, r1
	NET_ASSERT(context);
   288dc:	4604      	mov	r4, r0
   288de:	b9a0      	cbnz	r0, 2890a <net_context_set_state+0x32>
   288e0:	4b0e      	ldr	r3, [pc, #56]	; (2891c <net_context_set_state+0x44>)
   288e2:	681b      	ldr	r3, [r3, #0]
   288e4:	075b      	lsls	r3, r3, #29
   288e6:	d010      	beq.n	2890a <net_context_set_state+0x32>
   288e8:	2301      	movs	r3, #1
   288ea:	f04f 0200 	mov.w	r2, #0
   288ee:	f363 0202 	bfi	r2, r3, #0, #3
   288f2:	490b      	ldr	r1, [pc, #44]	; (28920 <net_context_set_state+0x48>)
   288f4:	4b0b      	ldr	r3, [pc, #44]	; (28924 <net_context_set_state+0x4c>)
   288f6:	1a5b      	subs	r3, r3, r1
   288f8:	f360 02c5 	bfi	r2, r0, #3, #3
   288fc:	08db      	lsrs	r3, r3, #3
   288fe:	f363 128f 	bfi	r2, r3, #6, #10
   28902:	4909      	ldr	r1, [pc, #36]	; (28928 <net_context_set_state+0x50>)
   28904:	4809      	ldr	r0, [pc, #36]	; (2892c <net_context_set_state+0x54>)
   28906:	f7d9 fa27 	bl	1d58 <log_1>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   2890a:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
   2890e:	f021 0106 	bic.w	r1, r1, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   28912:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
   28916:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
}
   2891a:	bd38      	pop	{r3, r4, r5, pc}
   2891c:	2000d7c0 	.word	0x2000d7c0
   28920:	0002cff8 	.word	0x0002cff8
   28924:	0002d158 	.word	0x0002d158
   28928:	00034cc8 	.word	0x00034cc8
   2892c:	000322d6 	.word	0x000322d6

00028930 <net_context_get_iface>:
{
   28930:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   28932:	4604      	mov	r4, r0
   28934:	b9a0      	cbnz	r0, 28960 <net_context_get_iface+0x30>
   28936:	4b0d      	ldr	r3, [pc, #52]	; (2896c <net_context_get_iface+0x3c>)
   28938:	681b      	ldr	r3, [r3, #0]
   2893a:	075b      	lsls	r3, r3, #29
   2893c:	d010      	beq.n	28960 <net_context_get_iface+0x30>
   2893e:	2301      	movs	r3, #1
   28940:	f04f 0200 	mov.w	r2, #0
   28944:	f363 0202 	bfi	r2, r3, #0, #3
   28948:	4909      	ldr	r1, [pc, #36]	; (28970 <net_context_get_iface+0x40>)
   2894a:	4b0a      	ldr	r3, [pc, #40]	; (28974 <net_context_get_iface+0x44>)
   2894c:	1a5b      	subs	r3, r3, r1
   2894e:	f360 02c5 	bfi	r2, r0, #3, #3
   28952:	08db      	lsrs	r3, r3, #3
   28954:	f363 128f 	bfi	r2, r3, #6, #10
   28958:	4907      	ldr	r1, [pc, #28]	; (28978 <net_context_get_iface+0x48>)
   2895a:	4808      	ldr	r0, [pc, #32]	; (2897c <net_context_get_iface+0x4c>)
   2895c:	f7d9 f9fc 	bl	1d58 <log_1>
	return net_if_get_by_index(context->iface);
   28960:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
}
   28964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_get_by_index(context->iface);
   28968:	f7f8 ba92 	b.w	20e90 <net_if_get_by_index>
   2896c:	2000d7c0 	.word	0x2000d7c0
   28970:	0002cff8 	.word	0x0002cff8
   28974:	0002d158 	.word	0x0002d158
   28978:	00034d0e 	.word	0x00034d0e
   2897c:	000322d6 	.word	0x000322d6

00028980 <net_tcp_header_fits>:
{
   28980:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   28982:	2214      	movs	r2, #20
{
   28984:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   28986:	f7f9 fd0b 	bl	223a0 <net_header_fits>
   2898a:	2800      	cmp	r0, #0
}
   2898c:	bf14      	ite	ne
   2898e:	4620      	movne	r0, r4
   28990:	2000      	moveq	r0, #0
   28992:	bd10      	pop	{r4, pc}

00028994 <net_tcp_queue_pkt.isra.20>:
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   28994:	b538      	push	{r3, r4, r5, lr}
	parent->next = child;
   28996:	2200      	movs	r2, #0
   28998:	4605      	mov	r5, r0
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   2899a:	6800      	ldr	r0, [r0, #0]
   2899c:	644a      	str	r2, [r1, #68]	; 0x44
Z_GENLIST_APPEND(slist, snode)
   2899e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   289a2:	460c      	mov	r4, r1
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   289a4:	f101 0344 	add.w	r3, r1, #68	; 0x44
   289a8:	bb32      	cbnz	r2, 289f8 <net_tcp_queue_pkt.isra.20+0x64>
	list->head = node;
   289aa:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   289ae:	3054      	adds	r0, #84	; 0x54
   289b0:	f003 ff76 	bl	2c8a0 <z_timeout_remaining>
   289b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   289b8:	2264      	movs	r2, #100	; 0x64
   289ba:	2300      	movs	r3, #0
   289bc:	fb80 0101 	smull	r0, r1, r0, r1
   289c0:	f7d7 fc78 	bl	2b4 <__aeabi_uldivmod>
	if (k_delayed_work_remaining_get(&context->tcp->retry_timer) == 0) {
   289c4:	b948      	cbnz	r0, 289da <net_tcp_queue_pkt.isra.20+0x46>
		k_delayed_work_submit(&context->tcp->retry_timer,
   289c6:	6828      	ldr	r0, [r5, #0]
	return ((u32_t)1 << tcp->retry_timeout_shift) *
   289c8:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
		k_delayed_work_submit(&context->tcp->retry_timer,
   289cc:	21c8      	movs	r1, #200	; 0xc8
	return ((u32_t)1 << tcp->retry_timeout_shift) *
   289ce:	f003 031f 	and.w	r3, r3, #31
		k_delayed_work_submit(&context->tcp->retry_timer,
   289d2:	4099      	lsls	r1, r3
   289d4:	3048      	adds	r0, #72	; 0x48
   289d6:	f7ff fef5 	bl	287c4 <k_delayed_work_submit>
	return pkt->family;
   289da:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	do_ref_if_needed(context->tcp, pkt);
   289de:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   289e2:	2b0a      	cmp	r3, #10
   289e4:	d103      	bne.n	289ee <net_tcp_queue_pkt.isra.20+0x5a>
   289e6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   289ea:	2b02      	cmp	r3, #2
   289ec:	d002      	beq.n	289f4 <net_tcp_queue_pkt.isra.20+0x60>
   289ee:	4620      	mov	r0, r4
   289f0:	f7f8 fe0a 	bl	21608 <net_pkt_ref>
}
   289f4:	2000      	movs	r0, #0
   289f6:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   289f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   289fa:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
   289fe:	e7d6      	b.n	289ae <net_tcp_queue_pkt.isra.20+0x1a>

00028a00 <net_context_set_iface.isra.21>:
static inline void net_context_set_iface(struct net_context *context,
   28a00:	b538      	push	{r3, r4, r5, lr}
   28a02:	4605      	mov	r5, r0
	NET_ASSERT(iface);
   28a04:	460c      	mov	r4, r1
   28a06:	b9a1      	cbnz	r1, 28a32 <net_context_set_iface.isra.21+0x32>
   28a08:	4b0c      	ldr	r3, [pc, #48]	; (28a3c <net_context_set_iface.isra.21+0x3c>)
   28a0a:	681b      	ldr	r3, [r3, #0]
   28a0c:	075b      	lsls	r3, r3, #29
   28a0e:	d010      	beq.n	28a32 <net_context_set_iface.isra.21+0x32>
   28a10:	2301      	movs	r3, #1
   28a12:	f04f 0200 	mov.w	r2, #0
   28a16:	f363 0202 	bfi	r2, r3, #0, #3
   28a1a:	f361 02c5 	bfi	r2, r1, #3, #3
   28a1e:	4b08      	ldr	r3, [pc, #32]	; (28a40 <net_context_set_iface.isra.21+0x40>)
   28a20:	4908      	ldr	r1, [pc, #32]	; (28a44 <net_context_set_iface.isra.21+0x44>)
   28a22:	4809      	ldr	r0, [pc, #36]	; (28a48 <net_context_set_iface.isra.21+0x48>)
   28a24:	1a5b      	subs	r3, r3, r1
   28a26:	08db      	lsrs	r3, r3, #3
   28a28:	f363 128f 	bfi	r2, r3, #6, #10
   28a2c:	4907      	ldr	r1, [pc, #28]	; (28a4c <net_context_set_iface.isra.21+0x4c>)
   28a2e:	f7d9 f993 	bl	1d58 <log_1>
	context->iface = net_if_get_by_iface(iface);
   28a32:	4620      	mov	r0, r4
   28a34:	f7f8 fa38 	bl	20ea8 <net_if_get_by_iface>
   28a38:	7028      	strb	r0, [r5, #0]
}
   28a3a:	bd38      	pop	{r3, r4, r5, pc}
   28a3c:	2000d7c0 	.word	0x2000d7c0
   28a40:	0002d158 	.word	0x0002d158
   28a44:	0002cff8 	.word	0x0002cff8
   28a48:	0003231f 	.word	0x0003231f
   28a4c:	00034d24 	.word	0x00034d24

00028a50 <prepare_segment.isra.19>:
static int prepare_segment(struct net_tcp *tcp,
   28a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_context *context = tcp->context;
   28a54:	f8d0 9000 	ldr.w	r9, [r0]
static int prepare_segment(struct net_tcp *tcp,
   28a58:	b085      	sub	sp, #20
   28a5a:	4605      	mov	r5, r0
   28a5c:	460f      	mov	r7, r1
   28a5e:	4614      	mov	r4, r2
   28a60:	469b      	mov	fp, r3
	NET_ASSERT(context);
   28a62:	f1b9 0f00 	cmp.w	r9, #0
   28a66:	d114      	bne.n	28a92 <prepare_segment.isra.19+0x42>
   28a68:	4b61      	ldr	r3, [pc, #388]	; (28bf0 <prepare_segment.isra.19+0x1a0>)
   28a6a:	681b      	ldr	r3, [r3, #0]
   28a6c:	075a      	lsls	r2, r3, #29
   28a6e:	d010      	beq.n	28a92 <prepare_segment.isra.19+0x42>
   28a70:	2301      	movs	r3, #1
   28a72:	f04f 0200 	mov.w	r2, #0
   28a76:	f363 0202 	bfi	r2, r3, #0, #3
   28a7a:	495e      	ldr	r1, [pc, #376]	; (28bf4 <prepare_segment.isra.19+0x1a4>)
   28a7c:	4b5e      	ldr	r3, [pc, #376]	; (28bf8 <prepare_segment.isra.19+0x1a8>)
   28a7e:	485f      	ldr	r0, [pc, #380]	; (28bfc <prepare_segment.isra.19+0x1ac>)
   28a80:	1a5b      	subs	r3, r3, r1
   28a82:	f369 02c5 	bfi	r2, r9, #3, #3
   28a86:	08db      	lsrs	r3, r3, #3
   28a88:	f363 128f 	bfi	r2, r3, #6, #10
   28a8c:	495c      	ldr	r1, [pc, #368]	; (28c00 <prepare_segment.isra.19+0x1b0>)
   28a8e:	f7d9 f963 	bl	1d58 <log_1>
	if (pkt) {
   28a92:	b1e4      	cbz	r4, 28ace <prepare_segment.isra.19+0x7e>
		pkt->frags = NULL;
   28a94:	2300      	movs	r3, #0
		tail = pkt->frags;
   28a96:	f8d4 a014 	ldr.w	sl, [r4, #20]
		pkt->frags = NULL;
   28a9a:	6163      	str	r3, [r4, #20]
		pkt_allocated = false;
   28a9c:	4698      	mov	r8, r3
   28a9e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   28aa2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   28aa6:	2b0a      	cmp	r3, #10
   28aa8:	f040 809b 	bne.w	28be2 <prepare_segment.isra.19+0x192>
				    net_sin6_ptr(segment->src_addr)->sin6_addr,
   28aac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
		alloc_pkt = net_context_create_ipv6(tcp->context, pkt,
   28ab0:	4621      	mov	r1, r4
   28ab2:	3304      	adds	r3, #4
   28ab4:	6852      	ldr	r2, [r2, #4]
   28ab6:	6828      	ldr	r0, [r5, #0]
   28ab8:	f7f6 fc1a 	bl	1f2f0 <net_context_create_ipv6>
		if (!alloc_pkt) {
   28abc:	b9a8      	cbnz	r0, 28aea <prepare_segment.isra.19+0x9a>
			status = -ENOMEM;
   28abe:	f06f 050b 	mvn.w	r5, #11
	if (pkt_allocated) {
   28ac2:	f1b8 0f00 	cmp.w	r8, #0
   28ac6:	d17f      	bne.n	28bc8 <prepare_segment.isra.19+0x178>
		pkt->frags = tail;
   28ac8:	f8c4 a014 	str.w	sl, [r4, #20]
   28acc:	e085      	b.n	28bda <prepare_segment.isra.19+0x18a>
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   28ace:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   28ad2:	4648      	mov	r0, r9
   28ad4:	f7f8 fd08 	bl	214e8 <net_pkt_get_tx>
		if (!pkt) {
   28ad8:	4604      	mov	r4, r0
   28ada:	2800      	cmp	r0, #0
   28adc:	f000 8084 	beq.w	28be8 <prepare_segment.isra.19+0x198>
		pkt_allocated = true;
   28ae0:	f04f 0801 	mov.w	r8, #1
	struct net_buf *header, *tail = NULL;
   28ae4:	f04f 0a00 	mov.w	sl, #0
   28ae8:	e7d9      	b.n	28a9e <prepare_segment.isra.19+0x4e>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   28aea:	697b      	ldr	r3, [r7, #20]
   28aec:	885b      	ldrh	r3, [r3, #2]
   28aee:	9301      	str	r3, [sp, #4]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   28af0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   28af4:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   28af6:	6963      	ldr	r3, [r4, #20]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   28af8:	689b      	ldr	r3, [r3, #8]
   28afa:	2206      	movs	r2, #6
   28afc:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   28afe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   28b02:	4648      	mov	r0, r9
   28b04:	f7f8 fd20 	bl	21548 <net_pkt_get_data>
	if (!header) {
   28b08:	4605      	mov	r5, r0
   28b0a:	2800      	cmp	r0, #0
   28b0c:	d0d7      	beq.n	28abe <prepare_segment.isra.19+0x6e>
	net_pkt_frag_add(pkt, header);
   28b0e:	4601      	mov	r1, r0
   28b10:	4620      	mov	r0, r4
   28b12:	f7f8 fdab 	bl	2166c <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   28b16:	f105 0208 	add.w	r2, r5, #8
   28b1a:	2114      	movs	r1, #20
   28b1c:	4610      	mov	r0, r2
   28b1e:	9203      	str	r2, [sp, #12]
   28b20:	f7f5 fcf4 	bl	1e50c <net_buf_simple_add>
	if (segment->options && segment->optlen) {
   28b24:	68fb      	ldr	r3, [r7, #12]
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   28b26:	4605      	mov	r5, r0
	if (segment->options && segment->optlen) {
   28b28:	2b00      	cmp	r3, #0
   28b2a:	d051      	beq.n	28bd0 <prepare_segment.isra.19+0x180>
   28b2c:	7afe      	ldrb	r6, [r7, #11]
   28b2e:	9a03      	ldr	r2, [sp, #12]
   28b30:	b17e      	cbz	r6, 28b52 <prepare_segment.isra.19+0x102>
	memcpy(net_buf_add(header, len), data, len);
   28b32:	4631      	mov	r1, r6
   28b34:	4610      	mov	r0, r2
   28b36:	9303      	str	r3, [sp, #12]
   28b38:	f7f5 fce8 	bl	1e50c <net_buf_simple_add>
   28b3c:	9b03      	ldr	r3, [sp, #12]
   28b3e:	4632      	mov	r2, r6
   28b40:	4619      	mov	r1, r3
   28b42:	f7dd f9a1 	bl	5e88 <memcpy>
	if ((len & 0x3u) != 0u) {
   28b46:	07b3      	lsls	r3, r6, #30
   28b48:	d003      	beq.n	28b52 <prepare_segment.isra.19+0x102>
		optlen = (len & 0xfffCu) + 4u;
   28b4a:	f026 0603 	bic.w	r6, r6, #3
   28b4e:	3604      	adds	r6, #4
   28b50:	b2f6      	uxtb	r6, r6
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   28b52:	3614      	adds	r6, #20
	tcp_hdr->src_port = src_port;
   28b54:	9b02      	ldr	r3, [sp, #8]
   28b56:	802b      	strh	r3, [r5, #0]
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   28b58:	00b6      	lsls	r6, r6, #2
   28b5a:	732e      	strb	r6, [r5, #12]
	tcp_hdr->dst_port = dst_port;
   28b5c:	9b01      	ldr	r3, [sp, #4]
   28b5e:	806b      	strh	r3, [r5, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   28b60:	683b      	ldr	r3, [r7, #0]
	dst[1] = val;
   28b62:	71eb      	strb	r3, [r5, #7]
	sys_put_be16(val >> 16, dst);
   28b64:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   28b66:	716a      	strb	r2, [r5, #5]
	dst[0] = val >> 8;
   28b68:	0a11      	lsrs	r1, r2, #8
   28b6a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   28b6e:	7129      	strb	r1, [r5, #4]
   28b70:	71aa      	strb	r2, [r5, #6]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   28b72:	687b      	ldr	r3, [r7, #4]
	dst[1] = val;
   28b74:	72eb      	strb	r3, [r5, #11]
	sys_put_be16(val >> 16, dst);
   28b76:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   28b78:	726a      	strb	r2, [r5, #9]
	dst[0] = val >> 8;
   28b7a:	0a11      	lsrs	r1, r2, #8
   28b7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   28b80:	72aa      	strb	r2, [r5, #10]
   28b82:	7229      	strb	r1, [r5, #8]
	tcp_hdr->flags = segment->flags;
   28b84:	7abb      	ldrb	r3, [r7, #10]
   28b86:	736b      	strb	r3, [r5, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   28b88:	893b      	ldrh	r3, [r7, #8]
	dst[1] = val;
   28b8a:	73eb      	strb	r3, [r5, #15]
	dst[0] = val >> 8;
   28b8c:	0a1a      	lsrs	r2, r3, #8
	tcp_hdr->urg[0] = 0;
   28b8e:	2300      	movs	r3, #0
   28b90:	73aa      	strb	r2, [r5, #14]
   28b92:	74ab      	strb	r3, [r5, #18]
	tcp_hdr->urg[1] = 0;
   28b94:	74eb      	strb	r3, [r5, #19]
	if (tail) {
   28b96:	f1ba 0f00 	cmp.w	sl, #0
   28b9a:	d003      	beq.n	28ba4 <prepare_segment.isra.19+0x154>
		net_pkt_frag_add(pkt, tail);
   28b9c:	4651      	mov	r1, sl
   28b9e:	4620      	mov	r0, r4
   28ba0:	f7f8 fd64 	bl	2166c <net_pkt_frag_add>
	return pkt->family;
   28ba4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_family(pkt) == AF_INET6) {
   28ba8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   28bac:	2b0a      	cmp	r3, #10
   28bae:	d111      	bne.n	28bd4 <prepare_segment.isra.19+0x184>
					 net_context_get_ip_proto(context));
   28bb0:	4648      	mov	r0, r9
   28bb2:	f7ff fe15 	bl	287e0 <net_context_get_ip_proto>
		return net_ipv6_finalize(pkt,
   28bb6:	4601      	mov	r1, r0
   28bb8:	4620      	mov	r0, r4
   28bba:	f7fb f97d 	bl	23eb8 <net_ipv6_finalize>
	if (status < 0) {
   28bbe:	1e05      	subs	r5, r0, #0
   28bc0:	da08      	bge.n	28bd4 <prepare_segment.isra.19+0x184>
		if (pkt_allocated) {
   28bc2:	f1b8 0f00 	cmp.w	r8, #0
   28bc6:	d008      	beq.n	28bda <prepare_segment.isra.19+0x18a>
		net_pkt_unref(pkt);
   28bc8:	4620      	mov	r0, r4
   28bca:	f7f8 fd28 	bl	2161e <net_pkt_unref>
   28bce:	e004      	b.n	28bda <prepare_segment.isra.19+0x18a>
	u8_t optlen = 0;
   28bd0:	461e      	mov	r6, r3
   28bd2:	e7be      	b.n	28b52 <prepare_segment.isra.19+0x102>
	*out_pkt = pkt;
   28bd4:	f8cb 4000 	str.w	r4, [fp]
	return 0;
   28bd8:	2500      	movs	r5, #0
}
   28bda:	4628      	mov	r0, r5
   28bdc:	b005      	add	sp, #20
   28bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = -EINVAL;
   28be2:	f06f 0515 	mvn.w	r5, #21
   28be6:	e76c      	b.n	28ac2 <prepare_segment.isra.19+0x72>
			return -ENOMEM;
   28be8:	f06f 050b 	mvn.w	r5, #11
   28bec:	e7f5      	b.n	28bda <prepare_segment.isra.19+0x18a>
   28bee:	bf00      	nop
   28bf0:	2000d7c0 	.word	0x2000d7c0
   28bf4:	0002cff8 	.word	0x0002cff8
   28bf8:	0002d158 	.word	0x0002d158
   28bfc:	000322d6 	.word	0x000322d6
   28c00:	00034d3a 	.word	0x00034d3a

00028c04 <net_tcp_alloc>:
{
   28c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c06:	4607      	mov	r7, r0
	__asm__ volatile(
   28c08:	f04f 0320 	mov.w	r3, #32
   28c0c:	f3ef 8411 	mrs	r4, BASEPRI
   28c10:	f383 8811 	msr	BASEPRI, r3
		if (!net_tcp_is_used(&tcp_context[i])) {
   28c14:	4924      	ldr	r1, [pc, #144]	; (28ca8 <net_tcp_alloc+0xa4>)
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   28c16:	2300      	movs	r3, #0
		if (!net_tcp_is_used(&tcp_context[i])) {
   28c18:	25c0      	movs	r5, #192	; 0xc0
   28c1a:	460e      	mov	r6, r1
   28c1c:	fb05 1203 	mla	r2, r5, r3, r1
   28c20:	4610      	mov	r0, r2
   28c22:	f7ff fdd7 	bl	287d4 <net_tcp_is_used>
   28c26:	bbc8      	cbnz	r0, 28c9c <net_tcp_alloc+0x98>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   28c28:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	; 0xbc
   28c2c:	f041 0120 	orr.w	r1, r1, #32
   28c30:	f8a2 10bc 	strh.w	r1, [r2, #188]	; 0xbc
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28c34:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   28c38:	2b05      	cmp	r3, #5
   28c3a:	d033      	beq.n	28ca4 <net_tcp_alloc+0xa0>
   28c3c:	22c0      	movs	r2, #192	; 0xc0
   28c3e:	fb02 f503 	mul.w	r5, r2, r3
	(void)memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   28c42:	1974      	adds	r4, r6, r5
   28c44:	2100      	movs	r1, #0
   28c46:	4620      	mov	r0, r4
   28c48:	f7dd f94b 	bl	5ee2 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   28c4c:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
   28c50:	2101      	movs	r1, #1
   28c52:	f361 124c 	bfi	r2, r1, #5, #8
   28c56:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].state = NET_TCP_CLOSED;
   28c5a:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   28c5e:	f36f 3250 	bfc	r2, #13, #4
   28c62:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].context = context;
   28c66:	5177      	str	r7, [r6, r5]
	return sys_rand32_get();
   28c68:	f7dc fa2a 	bl	50c0 <sys_rand32_get>
	tcp_context[i].accept_cb = NULL;
   28c6c:	2700      	movs	r7, #0
	tcp_context[i].send_seq = tcp_init_isn();
   28c6e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   28c72:	4b0e      	ldr	r3, [pc, #56]	; (28cac <net_tcp_alloc+0xa8>)
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   28c74:	490e      	ldr	r1, [pc, #56]	; (28cb0 <net_tcp_alloc+0xac>)
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   28c76:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   28c7a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   28c7e:	4430      	add	r0, r6
	tcp_context[i].accept_cb = NULL;
   28c80:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   28c84:	f003 fd44 	bl	2c710 <k_delayed_work_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   28c88:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   28c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28c90:	4639      	mov	r1, r7
   28c92:	4430      	add	r0, r6
   28c94:	f003 fb6a 	bl	2c36c <_impl_k_sem_init>
}
   28c98:	4620      	mov	r0, r4
   28c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   28c9c:	3301      	adds	r3, #1
   28c9e:	2b05      	cmp	r3, #5
   28ca0:	d1bc      	bne.n	28c1c <net_tcp_alloc+0x18>
   28ca2:	e7c7      	b.n	28c34 <net_tcp_alloc+0x30>
		return NULL;
   28ca4:	2400      	movs	r4, #0
   28ca6:	e7f7      	b.n	28c98 <net_tcp_alloc+0x94>
   28ca8:	200029f0 	.word	0x200029f0
   28cac:	02180500 	.word	0x02180500
   28cb0:	0002996d 	.word	0x0002996d

00028cb4 <net_tcp_get_recv_mss>:
{
   28cb4:	b510      	push	{r4, lr}
   28cb6:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(tcp->context);
   28cb8:	6800      	ldr	r0, [r0, #0]
   28cba:	f7ff fdbb 	bl	28834 <net_context_get_family>
	else if (family == AF_INET6) {
   28cbe:	280a      	cmp	r0, #10
   28cc0:	d112      	bne.n	28ce8 <net_tcp_get_recv_mss+0x34>
		struct net_if *iface = net_context_get_iface(tcp->context);
   28cc2:	6820      	ldr	r0, [r4, #0]
   28cc4:	f7ff fe34 	bl	28930 <net_context_get_iface>
		if (iface && net_if_get_mtu(iface) >= NET_IPV6TCPH_LEN) {
   28cc8:	b158      	cbz	r0, 28ce2 <net_tcp_get_recv_mss+0x2e>
	return iface->if_dev->mtu;
   28cca:	6803      	ldr	r3, [r0, #0]
   28ccc:	8b18      	ldrh	r0, [r3, #24]
   28cce:	283b      	cmp	r0, #59	; 0x3b
   28cd0:	d907      	bls.n	28ce2 <net_tcp_get_recv_mss+0x2e>
			mss = net_if_get_mtu(iface) - NET_IPV6TCPH_LEN;
   28cd2:	383c      	subs	r0, #60	; 0x3c
   28cd4:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   28cd8:	bfb8      	it	lt
   28cda:	f44f 60a0 	movlt.w	r0, #1280	; 0x500
		return mss;
   28cde:	b280      	uxth	r0, r0
}
   28ce0:	bd10      	pop	{r4, pc}
			mss = NET_IPV6_MTU;
   28ce2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   28ce6:	e7fa      	b.n	28cde <net_tcp_get_recv_mss+0x2a>
	return 0;
   28ce8:	2000      	movs	r0, #0
   28cea:	e7f9      	b.n	28ce0 <net_tcp_get_recv_mss+0x2c>

00028cec <net_tcp_set_syn_opt>:
	*optionlen = 0;
   28cec:	2300      	movs	r3, #0
{
   28cee:	b570      	push	{r4, r5, r6, lr}
	*optionlen = 0;
   28cf0:	7013      	strb	r3, [r2, #0]
{
   28cf2:	4615      	mov	r5, r2
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   28cf4:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
   28cf8:	0552      	lsls	r2, r2, #21
{
   28cfa:	4604      	mov	r4, r0
   28cfc:	460e      	mov	r6, r1
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   28cfe:	d417      	bmi.n	28d30 <net_tcp_set_syn_opt+0x44>
		recv_mss = net_tcp_get_recv_mss(tcp);
   28d00:	f7ff ffd8 	bl	28cb4 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   28d04:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   28d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   28d0c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   28d10:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss),
   28d14:	0204      	lsls	r4, r0, #8
   28d16:	f240 4302 	movw	r3, #1026	; 0x402
   28d1a:	782a      	ldrb	r2, [r5, #0]
   28d1c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   28d20:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   28d24:	4320      	orrs	r0, r4
   28d26:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   28d28:	782b      	ldrb	r3, [r5, #0]
   28d2a:	3304      	adds	r3, #4
   28d2c:	702b      	strb	r3, [r5, #0]
}
   28d2e:	bd70      	pop	{r4, r5, r6, pc}
		recv_mss = 0;
   28d30:	4618      	mov	r0, r3
   28d32:	e7ed      	b.n	28d10 <net_tcp_set_syn_opt+0x24>

00028d34 <net_tcp_prepare_reset>:
{
   28d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d38:	4604      	mov	r4, r0
   28d3a:	b08a      	sub	sp, #40	; 0x28
   28d3c:	460d      	mov	r5, r1
   28d3e:	4617      	mov	r7, r2
	struct tcp_segment segment = { 0 };
   28d40:	2100      	movs	r1, #0
   28d42:	2218      	movs	r2, #24
   28d44:	a804      	add	r0, sp, #16
{
   28d46:	461e      	mov	r6, r3
	struct tcp_segment segment = { 0 };
   28d48:	f7dd f8cb 	bl	5ee2 <memset>
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   28d4c:	6820      	ldr	r0, [r4, #0]
   28d4e:	f7ff fd9b 	bl	28888 <net_context_get_state>
   28d52:	b300      	cbz	r0, 28d96 <net_tcp_prepare_reset+0x62>
	return (enum net_tcp_state)tcp->state;
   28d54:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   28d58:	f3c3 3343 	ubfx	r3, r3, #13, #4
   28d5c:	2b02      	cmp	r3, #2
   28d5e:	d032      	beq.n	28dc6 <net_tcp_prepare_reset+0x92>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   28d60:	2b09      	cmp	r3, #9
   28d62:	d030      	beq.n	28dc6 <net_tcp_prepare_reset+0x92>
		segment.ack = tcp->send_ack;
   28d64:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   28d68:	9305      	str	r3, [sp, #20]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   28d6a:	2314      	movs	r3, #20
   28d6c:	f88d 301a 	strb.w	r3, [sp, #26]
		segment.seq = tcp->send_seq;
   28d70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   28d74:	9304      	str	r3, [sp, #16]
		if (!local) {
   28d76:	b98d      	cbnz	r5, 28d9c <net_tcp_prepare_reset+0x68>
			segment.src_addr = &tcp->context->local;
   28d78:	6823      	ldr	r3, [r4, #0]
   28d7a:	3308      	adds	r3, #8
   28d7c:	9308      	str	r3, [sp, #32]
		segment.wnd = 0;
   28d7e:	2200      	movs	r2, #0
		status = prepare_segment(tcp, &segment, NULL, pkt);
   28d80:	4633      	mov	r3, r6
   28d82:	a904      	add	r1, sp, #16
   28d84:	4620      	mov	r0, r4
		segment.dst_addr = remote;
   28d86:	9709      	str	r7, [sp, #36]	; 0x24
		segment.wnd = 0;
   28d88:	f8ad 2018 	strh.w	r2, [sp, #24]
		segment.options = NULL;
   28d8c:	9207      	str	r2, [sp, #28]
		segment.optlen = 0;
   28d8e:	f88d 201b 	strb.w	r2, [sp, #27]
		status = prepare_segment(tcp, &segment, NULL, pkt);
   28d92:	f7ff fe5d 	bl	28a50 <prepare_segment.isra.19>
}
   28d96:	b00a      	add	sp, #40	; 0x28
   28d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(addr, 0, sizeof(struct sockaddr_ptr));
   28d9c:	f10d 0804 	add.w	r8, sp, #4
   28da0:	220c      	movs	r2, #12
   28da2:	2100      	movs	r1, #0
   28da4:	4640      	mov	r0, r8
   28da6:	f7dd f89c 	bl	5ee2 <memset>
	if (local->sa_family == AF_INET6) {
   28daa:	882b      	ldrh	r3, [r5, #0]
   28dac:	2b0a      	cmp	r3, #10
   28dae:	d107      	bne.n	28dc0 <net_tcp_prepare_reset+0x8c>
		net_sin6_ptr(addr)->sin6_family = AF_INET6;
   28db0:	f8ad 3004 	strh.w	r3, [sp, #4]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   28db4:	3504      	adds	r5, #4
		net_sin6_ptr(addr)->sin6_port = net_sin6(local)->sin6_port;
   28db6:	f835 3c02 	ldrh.w	r3, [r5, #-2]
   28dba:	f8ad 3006 	strh.w	r3, [sp, #6]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   28dbe:	9502      	str	r5, [sp, #8]
			segment.src_addr = &src_addr_ptr;
   28dc0:	f8cd 8020 	str.w	r8, [sp, #32]
   28dc4:	e7db      	b.n	28d7e <net_tcp_prepare_reset+0x4a>
	int status = 0;
   28dc6:	2000      	movs	r0, #0
	return status;
   28dc8:	e7e5      	b.n	28d96 <net_tcp_prepare_reset+0x62>

00028dca <send_reset.isra.23>:
	}

	return ret;
}

static int send_reset(struct net_context *context,
   28dca:	b513      	push	{r0, r1, r4, lr}
		      struct sockaddr *local,
		      struct sockaddr *remote)
{
	struct net_pkt *pkt = NULL;
   28dcc:	ab02      	add	r3, sp, #8
   28dce:	2400      	movs	r4, #0
   28dd0:	f843 4d04 	str.w	r4, [r3, #-4]!
	int ret;

	ret = net_tcp_prepare_reset(context->tcp, local, remote, &pkt);
   28dd4:	f7ff ffae 	bl	28d34 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   28dd8:	4604      	mov	r4, r0
   28dda:	b940      	cbnz	r0, 28dee <send_reset.isra.23+0x24>
   28ddc:	9801      	ldr	r0, [sp, #4]
   28dde:	b130      	cbz	r0, 28dee <send_reset.isra.23+0x24>
		return ret;
	}

	print_send_info(pkt, "RST");

	ret = net_send_data(pkt);
   28de0:	f7f6 fd24 	bl	1f82c <net_send_data>
	if (ret < 0) {
   28de4:	1e04      	subs	r4, r0, #0
   28de6:	da02      	bge.n	28dee <send_reset.isra.23+0x24>
		net_pkt_unref(pkt);
   28de8:	9801      	ldr	r0, [sp, #4]
   28dea:	f7f8 fc18 	bl	2161e <net_pkt_unref>
	}

	return ret;
}
   28dee:	4620      	mov	r0, r4
   28df0:	b002      	add	sp, #8
   28df2:	bd10      	pop	{r4, pc}

00028df4 <net_tcp_state_str>:
{
   28df4:	280a      	cmp	r0, #10
   28df6:	bf9a      	itte	ls
   28df8:	4b02      	ldrls	r3, [pc, #8]	; (28e04 <net_tcp_state_str+0x10>)
   28dfa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   28dfe:	4802      	ldrhi	r0, [pc, #8]	; (28e08 <net_tcp_state_str+0x14>)
}
   28e00:	4770      	bx	lr
   28e02:	bf00      	nop
   28e04:	00034bb0 	.word	0x00034bb0
   28e08:	000340c0 	.word	0x000340c0

00028e0c <net_tcp_init>:
}
   28e0c:	4770      	bx	lr
	...

00028e10 <net_tcp_change_state>:
{
   28e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28e12:	460d      	mov	r5, r1
	NET_ASSERT(tcp);
   28e14:	4604      	mov	r4, r0
   28e16:	b9a0      	cbnz	r0, 28e42 <net_tcp_change_state+0x32>
   28e18:	4b28      	ldr	r3, [pc, #160]	; (28ebc <net_tcp_change_state+0xac>)
   28e1a:	681b      	ldr	r3, [r3, #0]
   28e1c:	075a      	lsls	r2, r3, #29
   28e1e:	d010      	beq.n	28e42 <net_tcp_change_state+0x32>
   28e20:	2301      	movs	r3, #1
   28e22:	f04f 0200 	mov.w	r2, #0
   28e26:	f363 0202 	bfi	r2, r3, #0, #3
   28e2a:	4925      	ldr	r1, [pc, #148]	; (28ec0 <net_tcp_change_state+0xb0>)
   28e2c:	4b25      	ldr	r3, [pc, #148]	; (28ec4 <net_tcp_change_state+0xb4>)
   28e2e:	1a5b      	subs	r3, r3, r1
   28e30:	f360 02c5 	bfi	r2, r0, #3, #3
   28e34:	08db      	lsrs	r3, r3, #3
   28e36:	f363 128f 	bfi	r2, r3, #6, #10
   28e3a:	4923      	ldr	r1, [pc, #140]	; (28ec8 <net_tcp_change_state+0xb8>)
   28e3c:	4823      	ldr	r0, [pc, #140]	; (28ecc <net_tcp_change_state+0xbc>)
   28e3e:	f7d8 ff8b 	bl	1d58 <log_1>
   28e42:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) == new_state) {
   28e46:	f3c3 3343 	ubfx	r3, r3, #13, #4
   28e4a:	42ab      	cmp	r3, r5
   28e4c:	d033      	beq.n	28eb6 <net_tcp_change_state+0xa6>
	NET_ASSERT(new_state >= NET_TCP_CLOSED &&
   28e4e:	2d0a      	cmp	r5, #10
   28e50:	d914      	bls.n	28e7c <net_tcp_change_state+0x6c>
   28e52:	4b1a      	ldr	r3, [pc, #104]	; (28ebc <net_tcp_change_state+0xac>)
   28e54:	681b      	ldr	r3, [r3, #0]
   28e56:	075b      	lsls	r3, r3, #29
   28e58:	d010      	beq.n	28e7c <net_tcp_change_state+0x6c>
   28e5a:	2301      	movs	r3, #1
   28e5c:	f04f 0200 	mov.w	r2, #0
   28e60:	f363 0202 	bfi	r2, r3, #0, #3
   28e64:	4916      	ldr	r1, [pc, #88]	; (28ec0 <net_tcp_change_state+0xb0>)
   28e66:	4b17      	ldr	r3, [pc, #92]	; (28ec4 <net_tcp_change_state+0xb4>)
   28e68:	4819      	ldr	r0, [pc, #100]	; (28ed0 <net_tcp_change_state+0xc0>)
   28e6a:	1a5b      	subs	r3, r3, r1
   28e6c:	f36f 02c5 	bfc	r2, #3, #3
   28e70:	08db      	lsrs	r3, r3, #3
   28e72:	f363 128f 	bfi	r2, r3, #6, #10
   28e76:	4914      	ldr	r1, [pc, #80]	; (28ec8 <net_tcp_change_state+0xb8>)
   28e78:	f7d8 ff6e 	bl	1d58 <log_1>
	tcp->state = new_state;
   28e7c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   28e80:	f365 3350 	bfi	r3, r5, #13, #4
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   28e84:	f015 050f 	ands.w	r5, r5, #15
	tcp->state = new_state;
   28e88:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   28e8c:	d113      	bne.n	28eb6 <net_tcp_change_state+0xa6>
	if (!tcp->context) {
   28e8e:	6823      	ldr	r3, [r4, #0]
   28e90:	b18b      	cbz	r3, 28eb6 <net_tcp_change_state+0xa6>
	if (tcp->context->conn_handler) {
   28e92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   28e94:	b118      	cbz	r0, 28e9e <net_tcp_change_state+0x8e>
	return net_conn_unregister(handle);
   28e96:	f7ff fa61 	bl	2835c <net_conn_unregister>
		tcp->context->conn_handler = NULL;
   28e9a:	6823      	ldr	r3, [r4, #0]
   28e9c:	62dd      	str	r5, [r3, #44]	; 0x2c
	if (tcp->accept_cb) {
   28e9e:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   28ea2:	b145      	cbz	r5, 28eb6 <net_tcp_change_state+0xa6>
		tcp->accept_cb(tcp->context,
   28ea4:	6820      	ldr	r0, [r4, #0]
   28ea6:	6803      	ldr	r3, [r0, #0]
   28ea8:	9300      	str	r3, [sp, #0]
   28eaa:	2218      	movs	r2, #24
   28eac:	f06f 0333 	mvn.w	r3, #51	; 0x33
   28eb0:	f100 0114 	add.w	r1, r0, #20
   28eb4:	47a8      	blx	r5
}
   28eb6:	b003      	add	sp, #12
   28eb8:	bd30      	pop	{r4, r5, pc}
   28eba:	bf00      	nop
   28ebc:	2000d7c0 	.word	0x2000d7c0
   28ec0:	0002cff8 	.word	0x0002cff8
   28ec4:	0002d158 	.word	0x0002d158
   28ec8:	00034c15 	.word	0x00034c15
   28ecc:	00034d87 	.word	0x00034d87
   28ed0:	00034da2 	.word	0x00034da2

00028ed4 <net_tcp_release>:
{
   28ed4:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   28ed6:	4604      	mov	r4, r0
   28ed8:	2800      	cmp	r0, #0
   28eda:	d051      	beq.n	28f80 <net_tcp_release+0xac>
   28edc:	4b2a      	ldr	r3, [pc, #168]	; (28f88 <net_tcp_release+0xb4>)
   28ede:	4298      	cmp	r0, r3
   28ee0:	d34e      	bcc.n	28f80 <net_tcp_release+0xac>
   28ee2:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
   28ee6:	4298      	cmp	r0, r3
   28ee8:	d24a      	bcs.n	28f80 <net_tcp_release+0xac>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   28eea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   28eee:	b1db      	cbz	r3, 28f28 <net_tcp_release+0x54>
   28ef0:	f1b3 0044 	subs.w	r0, r3, #68	; 0x44
   28ef4:	d018      	beq.n	28f28 <net_tcp_release+0x54>
	return node->next;
   28ef6:	681d      	ldr	r5, [r3, #0]
   28ef8:	b105      	cbz	r5, 28efc <net_tcp_release+0x28>
   28efa:	3d44      	subs	r5, #68	; 0x44
	parent->next = child;
   28efc:	2600      	movs	r6, #0
	return node->next;
   28efe:	4603      	mov	r3, r0
Z_GENLIST_REMOVE(slist, snode)
   28f00:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
	return node->next;
   28f04:	f853 2f44 	ldr.w	r2, [r3, #68]!
	list->head = node;
   28f08:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   28f0c:	4299      	cmp	r1, r3
	list->tail = node;
   28f0e:	bf08      	it	eq
   28f10:	f8c4 208c 	streq.w	r2, [r4, #140]	; 0x8c
	parent->next = child;
   28f14:	6446      	str	r6, [r0, #68]	; 0x44
		net_pkt_unref(pkt);
   28f16:	f7f8 fb82 	bl	2161e <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   28f1a:	b12d      	cbz	r5, 28f28 <net_tcp_release+0x54>
	return node->next;
   28f1c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   28f1e:	b103      	cbz	r3, 28f22 <net_tcp_release+0x4e>
   28f20:	3b44      	subs	r3, #68	; 0x44
   28f22:	4628      	mov	r0, r5
   28f24:	461d      	mov	r5, r3
   28f26:	e7ea      	b.n	28efe <net_tcp_release+0x2a>
	sem->count = 0;
   28f28:	2500      	movs	r5, #0
	k_delayed_work_cancel(&tcp->retry_timer);
   28f2a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   28f2e:	f003 fbf8 	bl	2c722 <k_delayed_work_cancel>
   28f32:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
	k_delayed_work_cancel(&tcp->ack_timer);
   28f36:	f104 0008 	add.w	r0, r4, #8
   28f3a:	f003 fbf2 	bl	2c722 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->fin_timer);
   28f3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   28f42:	f003 fbee 	bl	2c722 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->timewait_timer);
   28f46:	f104 0068 	add.w	r0, r4, #104	; 0x68
   28f4a:	f003 fbea 	bl	2c722 <k_delayed_work_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   28f4e:	4629      	mov	r1, r5
   28f50:	4620      	mov	r0, r4
   28f52:	f7ff ff5d 	bl	28e10 <net_tcp_change_state>
	tcp->context = NULL;
   28f56:	6025      	str	r5, [r4, #0]
	__asm__ volatile(
   28f58:	f04f 0320 	mov.w	r3, #32
   28f5c:	f3ef 8111 	mrs	r1, BASEPRI
   28f60:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   28f64:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   28f68:	f3c3 1247 	ubfx	r2, r3, #5, #8
   28f6c:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   28f70:	f362 134c 	bfi	r3, r2, #5, #8
   28f74:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28f78:	f381 8811 	msr	BASEPRI, r1
	return 0;
   28f7c:	4628      	mov	r0, r5
}
   28f7e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28f80:	f06f 0015 	mvn.w	r0, #21
   28f84:	e7fb      	b.n	28f7e <net_tcp_release+0xaa>
   28f86:	bf00      	nop
   28f88:	200029f0 	.word	0x200029f0

00028f8c <net_tcp_prepare_segment>:
{
   28f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f90:	b087      	sub	sp, #28
   28f92:	4604      	mov	r4, r0
   28f94:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   28f96:	460d      	mov	r5, r1
   28f98:	4691      	mov	r9, r2
	struct tcp_segment segment = { 0 };
   28f9a:	2100      	movs	r1, #0
   28f9c:	2218      	movs	r2, #24
   28f9e:	4668      	mov	r0, sp
{
   28fa0:	4698      	mov	r8, r3
	struct tcp_segment segment = { 0 };
   28fa2:	f7dc ff9e 	bl	5ee2 <memset>
	if (!local) {
   28fa6:	b90e      	cbnz	r6, 28fac <net_tcp_prepare_segment+0x20>
		local = &tcp->context->local;
   28fa8:	6826      	ldr	r6, [r4, #0]
   28faa:	3608      	adds	r6, #8
	if (flags & NET_TCP_ACK) {
   28fac:	06e9      	lsls	r1, r5, #27
	seq = tcp->send_seq;
   28fae:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
	if (flags & NET_TCP_ACK) {
   28fb2:	d50f      	bpl.n	28fd4 <net_tcp_prepare_segment+0x48>
	return (enum net_tcp_state)tcp->state;
   28fb4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   28fb8:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   28fbc:	2b07      	cmp	r3, #7
   28fbe:	d13d      	bne.n	2903c <net_tcp_prepare_segment+0xb0>
			if (flags & NET_TCP_FIN) {
   28fc0:	07ea      	lsls	r2, r5, #31
   28fc2:	d503      	bpl.n	28fcc <net_tcp_prepare_segment+0x40>
				flags &= ~NET_TCP_FIN;
   28fc4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   28fc8:	2109      	movs	r1, #9
   28fca:	e000      	b.n	28fce <net_tcp_prepare_segment+0x42>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   28fcc:	210a      	movs	r1, #10
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   28fce:	4620      	mov	r0, r4
   28fd0:	f7ff ff1e 	bl	28e10 <net_tcp_change_state>
	if (flags & NET_TCP_FIN) {
   28fd4:	07eb      	lsls	r3, r5, #31
   28fd6:	d510      	bpl.n	28ffa <net_tcp_prepare_segment+0x6e>
   28fd8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   28fdc:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   28fe0:	330d      	adds	r3, #13
   28fe2:	f003 030f 	and.w	r3, r3, #15
   28fe6:	2b01      	cmp	r3, #1
		flags |= NET_TCP_ACK;
   28fe8:	f045 0510 	orr.w	r5, r5, #16
		seq++;
   28fec:	f107 0701 	add.w	r7, r7, #1
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   28ff0:	d803      	bhi.n	28ffa <net_tcp_prepare_segment+0x6e>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   28ff2:	2107      	movs	r1, #7
   28ff4:	4620      	mov	r0, r4
   28ff6:	f7ff ff0b 	bl	28e10 <net_tcp_change_state>
	return tcp->recv_wnd;
   28ffa:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
	segment.dst_addr = remote;
   28ffe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29000:	9205      	str	r2, [sp, #20]
	segment.wnd = wnd;
   29002:	f8ad 3008 	strh.w	r3, [sp, #8]
	segment.seq = tcp->send_seq;
   29006:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   2900a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	segment.seq = tcp->send_seq;
   2900c:	9200      	str	r2, [sp, #0]
	segment.ack = tcp->send_ack;
   2900e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   29012:	9201      	str	r2, [sp, #4]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   29014:	4669      	mov	r1, sp
   29016:	681a      	ldr	r2, [r3, #0]
	segment.src_addr = (struct sockaddr_ptr *)local;
   29018:	9604      	str	r6, [sp, #16]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   2901a:	4620      	mov	r0, r4
	segment.flags = flags;
   2901c:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.options = options;
   29020:	f8cd 900c 	str.w	r9, [sp, #12]
	segment.optlen = optlen;
   29024:	f88d 800b 	strb.w	r8, [sp, #11]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   29028:	f7ff fd12 	bl	28a50 <prepare_segment.isra.19>
	if (status < 0) {
   2902c:	2800      	cmp	r0, #0
	return 0;
   2902e:	bfa4      	itt	ge
   29030:	2000      	movge	r0, #0
	tcp->send_seq = seq;
   29032:	f8c4 7090 	strge.w	r7, [r4, #144]	; 0x90
}
   29036:	b007      	add	sp, #28
   29038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   2903c:	2b08      	cmp	r3, #8
   2903e:	d0c3      	beq.n	28fc8 <net_tcp_prepare_segment+0x3c>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   29040:	2b05      	cmp	r3, #5
   29042:	d1c7      	bne.n	28fd4 <net_tcp_prepare_segment+0x48>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   29044:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   29048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2904c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			flags |= NET_TCP_FIN;
   29050:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   29054:	2106      	movs	r1, #6
   29056:	e7ba      	b.n	28fce <net_tcp_prepare_segment+0x42>

00029058 <net_tcp_prepare_ack>:
{
   29058:	b570      	push	{r4, r5, r6, lr}
   2905a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	switch (net_tcp_get_state(tcp)) {
   2905e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29062:	2b03      	cmp	r3, #3
{
   29064:	b088      	sub	sp, #32
   29066:	4604      	mov	r4, r0
   29068:	460d      	mov	r5, r1
   2906a:	4616      	mov	r6, r2
	switch (net_tcp_get_state(tcp)) {
   2906c:	d00a      	beq.n	29084 <net_tcp_prepare_ack+0x2c>
   2906e:	d302      	bcc.n	29076 <net_tcp_prepare_ack+0x1e>
   29070:	3b06      	subs	r3, #6
   29072:	2b01      	cmp	r3, #1
   29074:	d915      	bls.n	290a2 <net_tcp_prepare_ack+0x4a>
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   29076:	2300      	movs	r3, #0
   29078:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2907c:	9300      	str	r3, [sp, #0]
   2907e:	461a      	mov	r2, r3
   29080:	2110      	movs	r1, #16
   29082:	e00c      	b.n	2909e <net_tcp_prepare_ack+0x46>
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   29084:	f10d 0217 	add.w	r2, sp, #23
   29088:	a906      	add	r1, sp, #24
   2908a:	f7ff fe2f 	bl	28cec <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   2908e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   29092:	2200      	movs	r2, #0
   29094:	f89d 3017 	ldrb.w	r3, [sp, #23]
   29098:	9200      	str	r2, [sp, #0]
   2909a:	2112      	movs	r1, #18
   2909c:	aa06      	add	r2, sp, #24
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   2909e:	4620      	mov	r0, r4
   290a0:	e005      	b.n	290ae <net_tcp_prepare_ack+0x56>
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   290a2:	2300      	movs	r3, #0
   290a4:	e9cd 1201 	strd	r1, r2, [sp, #4]
   290a8:	9300      	str	r3, [sp, #0]
   290aa:	461a      	mov	r2, r3
   290ac:	2111      	movs	r1, #17
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   290ae:	f7ff ff6d 	bl	28f8c <net_tcp_prepare_segment>
}
   290b2:	b008      	add	sp, #32
   290b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000290b8 <net_tcp_queue_data>:
{
   290b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   290ba:	b087      	sub	sp, #28
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   290bc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	size_t data_len = net_pkt_get_len(pkt);
   290be:	694f      	ldr	r7, [r1, #20]
{
   290c0:	9105      	str	r1, [sp, #20]
   290c2:	4604      	mov	r4, r0
	size_t bytes = 0;
   290c4:	2500      	movs	r5, #0
	while (buf) {
   290c6:	2f00      	cmp	r7, #0
   290c8:	d13d      	bne.n	29146 <net_tcp_queue_data+0x8e>
	if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   290ca:	4620      	mov	r0, r4
   290cc:	f7ff fbdc 	bl	28888 <net_context_get_state>
   290d0:	2802      	cmp	r0, #2
   290d2:	d140      	bne.n	29156 <net_tcp_queue_data+0x9e>
	NET_ASSERT(context->tcp);
   290d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   290d6:	b9a3      	cbnz	r3, 29102 <net_tcp_queue_data+0x4a>
   290d8:	4b22      	ldr	r3, [pc, #136]	; (29164 <net_tcp_queue_data+0xac>)
   290da:	681b      	ldr	r3, [r3, #0]
   290dc:	075b      	lsls	r3, r3, #29
   290de:	d010      	beq.n	29102 <net_tcp_queue_data+0x4a>
   290e0:	2301      	movs	r3, #1
   290e2:	f04f 0200 	mov.w	r2, #0
   290e6:	f363 0202 	bfi	r2, r3, #0, #3
   290ea:	491f      	ldr	r1, [pc, #124]	; (29168 <net_tcp_queue_data+0xb0>)
   290ec:	4b1f      	ldr	r3, [pc, #124]	; (2916c <net_tcp_queue_data+0xb4>)
   290ee:	4820      	ldr	r0, [pc, #128]	; (29170 <net_tcp_queue_data+0xb8>)
   290f0:	1a5b      	subs	r3, r3, r1
   290f2:	f367 02c5 	bfi	r2, r7, #3, #3
   290f6:	08db      	lsrs	r3, r3, #3
   290f8:	f363 128f 	bfi	r2, r3, #6, #10
   290fc:	491d      	ldr	r1, [pc, #116]	; (29174 <net_tcp_queue_data+0xbc>)
   290fe:	f7d8 fe2b 	bl	1d58 <log_1>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   29102:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29104:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
   29108:	f3c2 1247 	ubfx	r2, r2, #5, #8
   2910c:	f012 0208 	ands.w	r2, r2, #8
   29110:	d124      	bne.n	2915c <net_tcp_queue_data+0xa4>
	net_pkt_set_appdatalen(pkt, net_pkt_get_len(pkt));
   29112:	9905      	ldr	r1, [sp, #20]
   29114:	694b      	ldr	r3, [r1, #20]
   29116:	b9d3      	cbnz	r3, 2914e <net_tcp_queue_data+0x96>
   29118:	87ca      	strh	r2, [r1, #62]	; 0x3e
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   2911a:	aa05      	add	r2, sp, #20
   2911c:	e9cd 6201 	strd	r6, r2, [sp, #4]
   29120:	9300      	str	r3, [sp, #0]
   29122:	461a      	mov	r2, r3
   29124:	2118      	movs	r1, #24
   29126:	f7ff ff31 	bl	28f8c <net_tcp_prepare_segment>
	if (ret) {
   2912a:	b950      	cbnz	r0, 29142 <net_tcp_queue_data+0x8a>
	context->tcp->send_seq += data_len;
   2912c:	4620      	mov	r0, r4
	return net_tcp_queue_pkt(context, pkt);
   2912e:	9905      	ldr	r1, [sp, #20]
	context->tcp->send_seq += data_len;
   29130:	f850 2f44 	ldr.w	r2, [r0, #68]!
   29134:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   29138:	441d      	add	r5, r3
   2913a:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
	return net_tcp_queue_pkt(context, pkt);
   2913e:	f7ff fc29 	bl	28994 <net_tcp_queue_pkt.isra.20>
}
   29142:	b007      	add	sp, #28
   29144:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   29146:	89bb      	ldrh	r3, [r7, #12]
		buf = buf->frags;
   29148:	683f      	ldr	r7, [r7, #0]
		bytes += buf->len;
   2914a:	441d      	add	r5, r3
   2914c:	e7bb      	b.n	290c6 <net_tcp_queue_data+0xe>
   2914e:	899f      	ldrh	r7, [r3, #12]
		buf = buf->frags;
   29150:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   29152:	443a      	add	r2, r7
   29154:	e7df      	b.n	29116 <net_tcp_queue_data+0x5e>
		return -ENOTCONN;
   29156:	f06f 0038 	mvn.w	r0, #56	; 0x38
   2915a:	e7f2      	b.n	29142 <net_tcp_queue_data+0x8a>
		return -ESHUTDOWN;
   2915c:	f06f 0039 	mvn.w	r0, #57	; 0x39
   29160:	e7ef      	b.n	29142 <net_tcp_queue_data+0x8a>
   29162:	bf00      	nop
   29164:	2000d7c0 	.word	0x2000d7c0
   29168:	0002cff8 	.word	0x0002cff8
   2916c:	0002d158 	.word	0x0002d158
   29170:	00034e4a 	.word	0x00034e4a
   29174:	00034bdc 	.word	0x00034bdc

00029178 <send_syn_segment.isra.26>:
static inline int send_syn_segment(struct net_context *context,
   29178:	b5f0      	push	{r4, r5, r6, r7, lr}
   2917a:	461c      	mov	r4, r3
   2917c:	b089      	sub	sp, #36	; 0x24
	struct net_pkt *pkt = NULL;
   2917e:	2300      	movs	r3, #0
	if (flags == NET_TCP_SYN) {
   29180:	2c02      	cmp	r4, #2
static inline int send_syn_segment(struct net_context *context,
   29182:	4605      	mov	r5, r0
   29184:	460e      	mov	r6, r1
   29186:	4617      	mov	r7, r2
	struct net_pkt *pkt = NULL;
   29188:	9305      	str	r3, [sp, #20]
	u8_t optionlen = 0;
   2918a:	f88d 3013 	strb.w	r3, [sp, #19]
	if (flags == NET_TCP_SYN) {
   2918e:	d105      	bne.n	2919c <send_syn_segment.isra.26+0x24>
		net_tcp_set_syn_opt(context->tcp, options, &optionlen);
   29190:	f10d 0213 	add.w	r2, sp, #19
   29194:	a906      	add	r1, sp, #24
   29196:	6800      	ldr	r0, [r0, #0]
   29198:	f7ff fda8 	bl	28cec <net_tcp_set_syn_opt>
	ret = net_tcp_prepare_segment(context->tcp, flags, options, optionlen,
   2919c:	aa05      	add	r2, sp, #20
   2919e:	e9cd 7201 	strd	r7, r2, [sp, #4]
   291a2:	b2e1      	uxtb	r1, r4
   291a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   291a8:	9600      	str	r6, [sp, #0]
   291aa:	aa06      	add	r2, sp, #24
   291ac:	6828      	ldr	r0, [r5, #0]
   291ae:	f7ff feed 	bl	28f8c <net_tcp_prepare_segment>
	if (ret) {
   291b2:	4604      	mov	r4, r0
   291b4:	b938      	cbnz	r0, 291c6 <send_syn_segment.isra.26+0x4e>
	ret = net_send_data(pkt);
   291b6:	9805      	ldr	r0, [sp, #20]
   291b8:	f7f6 fb38 	bl	1f82c <net_send_data>
	if (ret < 0) {
   291bc:	1e04      	subs	r4, r0, #0
   291be:	da05      	bge.n	291cc <send_syn_segment.isra.26+0x54>
		net_pkt_unref(pkt);
   291c0:	9805      	ldr	r0, [sp, #20]
   291c2:	f7f8 fa2c 	bl	2161e <net_pkt_unref>
}
   291c6:	4620      	mov	r0, r4
   291c8:	b009      	add	sp, #36	; 0x24
   291ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	context->tcp->send_seq++;
   291cc:	682a      	ldr	r2, [r5, #0]
   291ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   291d2:	3301      	adds	r3, #1
   291d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   291d8:	e7f5      	b.n	291c6 <send_syn_segment.isra.26+0x4e>

000291da <handle_timewait_timeout>:
{
   291da:	b538      	push	{r3, r4, r5, lr}
   291dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   291de:	f3c3 3343 	ubfx	r3, r3, #13, #4
   291e2:	2b09      	cmp	r3, #9
{
   291e4:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   291e6:	d112      	bne.n	2920e <handle_timewait_timeout+0x34>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   291e8:	3868      	subs	r0, #104	; 0x68
   291ea:	2100      	movs	r1, #0
   291ec:	f7ff fe10 	bl	28e10 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   291f0:	f854 0c68 	ldr.w	r0, [r4, #-104]
   291f4:	6b05      	ldr	r5, [r0, #48]	; 0x30
   291f6:	b125      	cbz	r5, 29202 <handle_timewait_timeout+0x28>
			tcp->context->recv_cb(tcp->context, NULL, 0,
   291f8:	2200      	movs	r2, #0
   291fa:	f854 3c64 	ldr.w	r3, [r4, #-100]
   291fe:	4611      	mov	r1, r2
   29200:	47a8      	blx	r5
		net_context_unref(tcp->context);
   29202:	f854 0c68 	ldr.w	r0, [r4, #-104]
}
   29206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_context_unref(tcp->context);
   2920a:	f7f5 bf09 	b.w	1f020 <net_context_unref>
}
   2920e:	bd38      	pop	{r3, r4, r5, pc}

00029210 <handle_ack_timeout>:
   29210:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   29214:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29218:	2b06      	cmp	r3, #6
{
   2921a:	b510      	push	{r4, lr}
   2921c:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   2921e:	d109      	bne.n	29234 <handle_ack_timeout+0x24>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   29220:	3808      	subs	r0, #8
   29222:	2100      	movs	r1, #0
   29224:	f7ff fdf4 	bl	28e10 <net_tcp_change_state>
		net_context_unref(tcp->context);
   29228:	f854 0c08 	ldr.w	r0, [r4, #-8]
}
   2922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_context_unref(tcp->context);
   29230:	f7f5 bef6 	b.w	1f020 <net_context_unref>
}
   29234:	bd10      	pop	{r4, pc}
	...

00029238 <net_tcp_foreach>:
{
   29238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2923c:	4605      	mov	r5, r0
   2923e:	460e      	mov	r6, r1
	__asm__ volatile(
   29240:	f04f 0220 	mov.w	r2, #32
   29244:	f3ef 8311 	mrs	r3, BASEPRI
   29248:	f382 8811 	msr	BASEPRI, r2
   2924c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 29284 <net_tcp_foreach+0x4c>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   29250:	2400      	movs	r4, #0
   29252:	27c0      	movs	r7, #192	; 0xc0
   29254:	fb07 8204 	mla	r2, r7, r4, r8
		if (!net_tcp_is_used(&tcp_context[i])) {
   29258:	4610      	mov	r0, r2
   2925a:	f7ff fabb 	bl	287d4 <net_tcp_is_used>
   2925e:	b150      	cbz	r0, 29276 <net_tcp_foreach+0x3e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29260:	f383 8811 	msr	BASEPRI, r3
		cb(&tcp_context[i], user_data);
   29264:	4631      	mov	r1, r6
   29266:	4610      	mov	r0, r2
   29268:	47a8      	blx	r5
	__asm__ volatile(
   2926a:	f04f 0220 	mov.w	r2, #32
   2926e:	f3ef 8311 	mrs	r3, BASEPRI
   29272:	f382 8811 	msr	BASEPRI, r2
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   29276:	3401      	adds	r4, #1
   29278:	2c05      	cmp	r4, #5
   2927a:	d1eb      	bne.n	29254 <net_tcp_foreach+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2927c:	f383 8811 	msr	BASEPRI, r3
}
   29280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29284:	200029f0 	.word	0x200029f0

00029288 <net_tcp_get_hdr>:
{
   29288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2928a:	4606      	mov	r6, r0
   2928c:	460c      	mov	r4, r1
	tcp_hdr = net_pkt_tcp_data(pkt);
   2928e:	f7f8 fc95 	bl	21bbc <net_pkt_tcp_data>
	if (!tcp_hdr) {
   29292:	4605      	mov	r5, r0
   29294:	b9b8      	cbnz	r0, 292c6 <net_tcp_get_hdr+0x3e>
		NET_ERR("NULL TCP header!");
   29296:	4b41      	ldr	r3, [pc, #260]	; (2939c <net_tcp_get_hdr+0x114>)
   29298:	681b      	ldr	r3, [r3, #0]
   2929a:	075b      	lsls	r3, r3, #29
   2929c:	d010      	beq.n	292c0 <net_tcp_get_hdr+0x38>
   2929e:	2301      	movs	r3, #1
   292a0:	f04f 0200 	mov.w	r2, #0
   292a4:	f363 0202 	bfi	r2, r3, #0, #3
   292a8:	493d      	ldr	r1, [pc, #244]	; (293a0 <net_tcp_get_hdr+0x118>)
   292aa:	4b3e      	ldr	r3, [pc, #248]	; (293a4 <net_tcp_get_hdr+0x11c>)
   292ac:	1a5b      	subs	r3, r3, r1
   292ae:	f360 02c5 	bfi	r2, r0, #3, #3
   292b2:	08db      	lsrs	r3, r3, #3
   292b4:	f363 128f 	bfi	r2, r3, #6, #10
   292b8:	493b      	ldr	r1, [pc, #236]	; (293a8 <net_tcp_get_hdr+0x120>)
   292ba:	483c      	ldr	r0, [pc, #240]	; (293ac <net_tcp_get_hdr+0x124>)
   292bc:	f7d8 fd4c 	bl	1d58 <log_1>
}
   292c0:	4628      	mov	r0, r5
   292c2:	b004      	add	sp, #16
   292c4:	bd70      	pop	{r4, r5, r6, pc}
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   292c6:	4601      	mov	r1, r0
   292c8:	4630      	mov	r0, r6
   292ca:	f7ff fb59 	bl	28980 <net_tcp_header_fits>
   292ce:	2800      	cmp	r0, #0
   292d0:	d1f6      	bne.n	292c0 <net_tcp_get_hdr+0x38>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   292d2:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   292d6:	f896 1041 	ldrb.w	r1, [r6, #65]	; 0x41
   292da:	9400      	str	r4, [sp, #0]
   292dc:	4419      	add	r1, r3
   292de:	f10d 020e 	add.w	r2, sp, #14
   292e2:	2302      	movs	r3, #2
   292e4:	b289      	uxth	r1, r1
   292e6:	6970      	ldr	r0, [r6, #20]
   292e8:	f7f8 fafa 	bl	218e0 <net_frag_read>
			     (u8_t *)&hdr->dst_port);
   292ec:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   292ee:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   292f2:	9300      	str	r3, [sp, #0]
   292f4:	f10d 020e 	add.w	r2, sp, #14
   292f8:	2302      	movs	r3, #2
   292fa:	f7f8 faf1 	bl	218e0 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   292fe:	1d23      	adds	r3, r4, #4
   29300:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   29304:	9300      	str	r3, [sp, #0]
   29306:	f10d 020e 	add.w	r2, sp, #14
   2930a:	2304      	movs	r3, #4
   2930c:	f7f8 fae8 	bl	218e0 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   29310:	f104 0308 	add.w	r3, r4, #8
   29314:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   29318:	9300      	str	r3, [sp, #0]
   2931a:	f10d 020e 	add.w	r2, sp, #14
   2931e:	2304      	movs	r3, #4
   29320:	f7f8 fade 	bl	218e0 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   29324:	f104 030c 	add.w	r3, r4, #12
	return net_frag_read(frag, offset, pos, 1, value);
   29328:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2932c:	9300      	str	r3, [sp, #0]
   2932e:	f10d 020e 	add.w	r2, sp, #14
   29332:	2301      	movs	r3, #1
   29334:	f7f8 fad4 	bl	218e0 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   29338:	f104 030d 	add.w	r3, r4, #13
   2933c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   29340:	9300      	str	r3, [sp, #0]
   29342:	f10d 020e 	add.w	r2, sp, #14
   29346:	2301      	movs	r3, #1
   29348:	f7f8 faca 	bl	218e0 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   2934c:	f104 030e 	add.w	r3, r4, #14
   29350:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   29354:	9300      	str	r3, [sp, #0]
   29356:	f10d 020e 	add.w	r2, sp, #14
   2935a:	2302      	movs	r3, #2
   2935c:	f7f8 fac0 	bl	218e0 <net_frag_read>
			     (u8_t *)&hdr->chksum);
   29360:	f104 0310 	add.w	r3, r4, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   29364:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   29368:	9300      	str	r3, [sp, #0]
   2936a:	f10d 020e 	add.w	r2, sp, #14
   2936e:	2302      	movs	r3, #2
   29370:	f7f8 fab6 	bl	218e0 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   29374:	f104 0312 	add.w	r3, r4, #18
   29378:	9300      	str	r3, [sp, #0]
   2937a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2937e:	2302      	movs	r3, #2
   29380:	f10d 020e 	add.w	r2, sp, #14
   29384:	f7f8 faac 	bl	218e0 <net_frag_read>
	if (!frag && pos == 0xffff) {
   29388:	b930      	cbnz	r0, 29398 <net_tcp_get_hdr+0x110>
   2938a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		return NULL;
   2938e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29392:	429a      	cmp	r2, r3
   29394:	bf08      	it	eq
   29396:	2400      	moveq	r4, #0
   29398:	4625      	mov	r5, r4
   2939a:	e791      	b.n	292c0 <net_tcp_get_hdr+0x38>
   2939c:	2000d7c0 	.word	0x2000d7c0
   293a0:	0002cff8 	.word	0x0002cff8
   293a4:	0002d158 	.word	0x0002d158
   293a8:	00034c2a 	.word	0x00034c2a
   293ac:	00034e35 	.word	0x00034e35

000293b0 <net_tcp_ack_received>:
{
   293b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_tcp *tcp = ctx->tcp;
   293b4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   293b6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   293ba:	1acb      	subs	r3, r1, r3
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   293bc:	2b00      	cmp	r3, #0
{
   293be:	b08b      	sub	sp, #44	; 0x2c
   293c0:	4680      	mov	r8, r0
   293c2:	468a      	mov	sl, r1
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   293c4:	dc25      	bgt.n	29412 <net_tcp_ack_received+0x62>
   293c6:	4b5e      	ldr	r3, [pc, #376]	; (29540 <net_tcp_ack_received+0x190>)
			NET_ERR("pkt %p has no TCP header", pkt);
   293c8:	4a5e      	ldr	r2, [pc, #376]	; (29544 <net_tcp_ack_received+0x194>)
   293ca:	f8df b17c 	ldr.w	fp, [pc, #380]	; 29548 <net_tcp_ack_received+0x198>
   293ce:	1a9b      	subs	r3, r3, r2
   293d0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   293d4:	9301      	str	r3, [sp, #4]
	bool valid_ack = false;
   293d6:	2400      	movs	r4, #0
Z_GENLIST_IS_EMPTY(slist)
   293d8:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
	while (!sys_slist_is_empty(list)) {
   293dc:	bbae      	cbnz	r6, 2944a <net_tcp_ack_received+0x9a>
	if (valid_ack) {
   293de:	2c00      	cmp	r4, #0
   293e0:	f000 80ab 	beq.w	2953a <net_tcp_ack_received+0x18a>
		restart_timer(ctx->tcp);
   293e4:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   293e8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
   293ec:	f105 0048 	add.w	r0, r5, #72	; 0x48
   293f0:	2b00      	cmp	r3, #0
   293f2:	f000 8088 	beq.w	29506 <net_tcp_ack_received+0x156>
		tcp->flags |= NET_TCP_RETRYING;
   293f6:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   293fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   293fe:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
		tcp->retry_timeout_shift = 0;
   29402:	f36f 0304 	bfc	r3, #0, #5
   29406:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   2940a:	21c8      	movs	r1, #200	; 0xc8
   2940c:	f7ff f9da 	bl	287c4 <k_delayed_work_submit>
   29410:	e017      	b.n	29442 <net_tcp_ack_received+0x92>
		NET_ERR("ctx %p: ACK for unsent data", ctx);
   29412:	4b4d      	ldr	r3, [pc, #308]	; (29548 <net_tcp_ack_received+0x198>)
   29414:	681c      	ldr	r4, [r3, #0]
   29416:	f014 0407 	ands.w	r4, r4, #7
   2941a:	d012      	beq.n	29442 <net_tcp_ack_received+0x92>
   2941c:	2201      	movs	r2, #1
   2941e:	f04f 0300 	mov.w	r3, #0
   29422:	f362 0302 	bfi	r3, r2, #0, #3
   29426:	4947      	ldr	r1, [pc, #284]	; (29544 <net_tcp_ack_received+0x194>)
   29428:	4a45      	ldr	r2, [pc, #276]	; (29540 <net_tcp_ack_received+0x190>)
   2942a:	1a52      	subs	r2, r2, r1
   2942c:	08d2      	lsrs	r2, r2, #3
   2942e:	f36f 03c5 	bfc	r3, #3, #3
   29432:	f362 138f 	bfi	r3, r2, #6, #10
   29436:	4945      	ldr	r1, [pc, #276]	; (2954c <net_tcp_ack_received+0x19c>)
   29438:	4602      	mov	r2, r0
   2943a:	4845      	ldr	r0, [pc, #276]	; (29550 <net_tcp_ack_received+0x1a0>)
   2943c:	f7d8 fca0 	bl	1d80 <log_2>
		return false;
   29440:	2400      	movs	r4, #0
}
   29442:	4620      	mov	r0, r4
   29444:	b00b      	add	sp, #44	; 0x2c
   29446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   2944a:	f1a6 0744 	sub.w	r7, r6, #68	; 0x44
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2944e:	a905      	add	r1, sp, #20
   29450:	4638      	mov	r0, r7
   29452:	f7ff ff19 	bl	29288 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   29456:	bb00      	cbnz	r0, 2949a <net_tcp_ack_received+0xea>
			NET_ERR("pkt %p has no TCP header", pkt);
   29458:	f8db 3000 	ldr.w	r3, [fp]
   2945c:	0759      	lsls	r1, r3, #29
   2945e:	d00d      	beq.n	2947c <net_tcp_ack_received+0xcc>
   29460:	2301      	movs	r3, #1
   29462:	f363 0902 	bfi	r9, r3, #0, #3
   29466:	9b01      	ldr	r3, [sp, #4]
   29468:	4938      	ldr	r1, [pc, #224]	; (2954c <net_tcp_ack_received+0x19c>)
   2946a:	f360 09c5 	bfi	r9, r0, #3, #3
   2946e:	f363 198f 	bfi	r9, r3, #6, #10
   29472:	464b      	mov	r3, r9
   29474:	463a      	mov	r2, r7
   29476:	4837      	ldr	r0, [pc, #220]	; (29554 <net_tcp_ack_received+0x1a4>)
   29478:	f7d8 fc82 	bl	1d80 <log_2>
Z_GENLIST_REMOVE(slist, snode)
   2947c:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	return node->next;
   29480:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   29482:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   29486:	4296      	cmp	r6, r2
	list->tail = node;
   29488:	bf08      	it	eq
   2948a:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	parent->next = child;
   2948e:	2300      	movs	r3, #0
   29490:	6033      	str	r3, [r6, #0]
			net_pkt_unref(pkt);
   29492:	4638      	mov	r0, r7
   29494:	f7f8 f8c3 	bl	2161e <net_pkt_unref>
   29498:	e79e      	b.n	293d8 <net_tcp_ack_received+0x28>
		if (tcp_hdr->flags & NET_TCP_SYN) {
   2949a:	7b43      	ldrb	r3, [r0, #13]
		seq_len = net_pkt_appdatalen(pkt);
   2949c:	f836 1c06 	ldrh.w	r1, [r6, #-6]
		if (tcp_hdr->flags & NET_TCP_SYN) {
   294a0:	079a      	lsls	r2, r3, #30
			seq_len += 1;
   294a2:	bf48      	it	mi
   294a4:	3101      	addmi	r1, #1
		if (tcp_hdr->flags & NET_TCP_FIN) {
   294a6:	f013 0301 	ands.w	r3, r3, #1
			seq_len += 1;
   294aa:	bf18      	it	ne
   294ac:	3101      	addne	r1, #1
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   294ae:	3004      	adds	r0, #4
   294b0:	e9cd 1302 	strd	r1, r3, [sp, #8]
   294b4:	f7ff f977 	bl	287a6 <sys_get_be32>
   294b8:	f10a 0201 	add.w	r2, sl, #1
   294bc:	9902      	ldr	r1, [sp, #8]
   294be:	1a10      	subs	r0, r2, r0
   294c0:	1a40      	subs	r0, r0, r1
		if (!net_tcp_seq_greater(ack, last_seq)) {
   294c2:	2800      	cmp	r0, #0
   294c4:	dd8b      	ble.n	293de <net_tcp_ack_received+0x2e>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   294c6:	9b03      	ldr	r3, [sp, #12]
   294c8:	b14b      	cbz	r3, 294de <net_tcp_ack_received+0x12e>
   294ca:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   294ce:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   294d2:	2b07      	cmp	r3, #7
   294d4:	d113      	bne.n	294fe <net_tcp_ack_received+0x14e>
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   294d6:	2108      	movs	r1, #8
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   294d8:	4628      	mov	r0, r5
   294da:	f7ff fc99 	bl	28e10 <net_tcp_change_state>
Z_GENLIST_REMOVE(slist, snode)
   294de:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	return node->next;
   294e2:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   294e4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   294e8:	4296      	cmp	r6, r2
	list->tail = node;
   294ea:	bf08      	it	eq
   294ec:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	parent->next = child;
   294f0:	2300      	movs	r3, #0
   294f2:	6033      	str	r3, [r6, #0]
		net_pkt_unref(pkt);
   294f4:	4638      	mov	r0, r7
   294f6:	f7f8 f892 	bl	2161e <net_pkt_unref>
		valid_ack = true;
   294fa:	2401      	movs	r4, #1
   294fc:	e76c      	b.n	293d8 <net_tcp_ack_received+0x28>
			} else if (s == NET_TCP_CLOSING) {
   294fe:	2b0a      	cmp	r3, #10
   29500:	d1ed      	bne.n	294de <net_tcp_ack_received+0x12e>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   29502:	2109      	movs	r1, #9
   29504:	e7e8      	b.n	294d8 <net_tcp_ack_received+0x128>
			(tcp->fin_sent && tcp->fin_rcvd)) {
   29506:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
	} else if (CONFIG_NET_TCP_TIME_WAIT_DELAY != 0 &&
   2950a:	f003 0306 	and.w	r3, r3, #6
   2950e:	2b06      	cmp	r3, #6
   29510:	d106      	bne.n	29520 <net_tcp_ack_received+0x170>
		k_delayed_work_submit(&tcp->retry_timer,
   29512:	21fa      	movs	r1, #250	; 0xfa
   29514:	f7ff f956 	bl	287c4 <k_delayed_work_submit>
		net_context_ref(tcp->context);
   29518:	6828      	ldr	r0, [r5, #0]
   2951a:	f7f5 fd73 	bl	1f004 <net_context_ref>
   2951e:	e790      	b.n	29442 <net_tcp_ack_received+0x92>
		k_delayed_work_cancel(&tcp->retry_timer);
   29520:	f003 f8ff 	bl	2c722 <k_delayed_work_cancel>
		tcp->flags &= ~NET_TCP_RETRYING;
   29524:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   29528:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2952c:	f022 0210 	bic.w	r2, r2, #16
   29530:	f362 134c 	bfi	r3, r2, #5, #8
   29534:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
   29538:	e783      	b.n	29442 <net_tcp_ack_received+0x92>
	return true;
   2953a:	2401      	movs	r4, #1
   2953c:	e781      	b.n	29442 <net_tcp_ack_received+0x92>
   2953e:	bf00      	nop
   29540:	0002d158 	.word	0x0002d158
   29544:	0002cff8 	.word	0x0002cff8
   29548:	2000d7c0 	.word	0x2000d7c0
   2954c:	00034c00 	.word	0x00034c00
   29550:	00034d4a 	.word	0x00034d4a
   29554:	00034d6a 	.word	0x00034d6a

00029558 <net_tcp_validate_seq>:
{
   29558:	b510      	push	{r4, lr}
   2955a:	b086      	sub	sp, #24
   2955c:	4604      	mov	r4, r0
   2955e:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   29560:	a901      	add	r1, sp, #4
   29562:	f7ff fe91 	bl	29288 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   29566:	b170      	cbz	r0, 29586 <net_tcp_validate_seq+0x2e>
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   29568:	3004      	adds	r0, #4
   2956a:	f7ff f91c 	bl	287a6 <sys_get_be32>
   2956e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   29572:	1a83      	subs	r3, r0, r2
				tcp->send_ack) >= 0) &&
   29574:	2b00      	cmp	r3, #0
	return tcp->recv_wnd;
   29576:	bfa1      	itttt	ge
   29578:	f8b4 30b8 	ldrhge.w	r3, [r4, #184]	; 0xb8
   2957c:	189b      	addge	r3, r3, r2
   2957e:	1ac0      	subge	r0, r0, r3
				tcp->send_ack) >= 0) &&
   29580:	0fc0      	lsrge	r0, r0, #31
   29582:	bfb8      	it	lt
   29584:	2000      	movlt	r0, #0
}
   29586:	b006      	add	sp, #24
   29588:	bd10      	pop	{r4, pc}
	...

0002958c <net_tcp_set_hdr>:
{
   2958c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29590:	b087      	sub	sp, #28
   29592:	4605      	mov	r5, r0
   29594:	460c      	mov	r4, r1
	if (net_tcp_header_fits(pkt, hdr)) {
   29596:	f7ff f9f3 	bl	28980 <net_tcp_header_fits>
   2959a:	4680      	mov	r8, r0
   2959c:	2800      	cmp	r0, #0
   2959e:	f040 8094 	bne.w	296ca <net_tcp_set_hdr+0x13e>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   295a2:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   295a6:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
   295aa:	6969      	ldr	r1, [r5, #20]
   295ac:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   295b0:	2702      	movs	r7, #2
   295b2:	441a      	add	r2, r3
   295b4:	b292      	uxth	r2, r2
   295b6:	f10d 0316 	add.w	r3, sp, #22
   295ba:	e9cd 4601 	strd	r4, r6, [sp, #4]
   295be:	9700      	str	r7, [sp, #0]
   295c0:	4628      	mov	r0, r5
   295c2:	f7f8 fa03 	bl	219cc <net_pkt_write>
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   295c6:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   295c8:	4601      	mov	r1, r0
   295ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   295ce:	9602      	str	r6, [sp, #8]
   295d0:	e9cd 7300 	strd	r7, r3, [sp]
   295d4:	4628      	mov	r0, r5
   295d6:	f10d 0316 	add.w	r3, sp, #22
   295da:	f7f8 f9f7 	bl	219cc <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   295de:	f04f 0904 	mov.w	r9, #4
   295e2:	1d23      	adds	r3, r4, #4
   295e4:	4601      	mov	r1, r0
   295e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   295ea:	9301      	str	r3, [sp, #4]
   295ec:	f8cd 9000 	str.w	r9, [sp]
   295f0:	f10d 0316 	add.w	r3, sp, #22
   295f4:	9602      	str	r6, [sp, #8]
   295f6:	4628      	mov	r0, r5
   295f8:	f7f8 f9e8 	bl	219cc <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   295fc:	f104 0308 	add.w	r3, r4, #8
   29600:	e9cd 9300 	strd	r9, r3, [sp]
   29604:	4601      	mov	r1, r0
   29606:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2960a:	9602      	str	r6, [sp, #8]
   2960c:	f10d 0316 	add.w	r3, sp, #22
   29610:	4628      	mov	r0, r5
   29612:	f7f8 f9db 	bl	219cc <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   29616:	f04f 0901 	mov.w	r9, #1
   2961a:	f104 030c 	add.w	r3, r4, #12
   2961e:	4601      	mov	r1, r0
   29620:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29624:	9301      	str	r3, [sp, #4]
   29626:	9602      	str	r6, [sp, #8]
   29628:	f10d 0316 	add.w	r3, sp, #22
   2962c:	f8cd 9000 	str.w	r9, [sp]
   29630:	4628      	mov	r0, r5
   29632:	f7f8 f9cb 	bl	219cc <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   29636:	f104 030d 	add.w	r3, r4, #13
   2963a:	4601      	mov	r1, r0
   2963c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29640:	9602      	str	r6, [sp, #8]
   29642:	e9cd 9300 	strd	r9, r3, [sp]
   29646:	4628      	mov	r0, r5
   29648:	f10d 0316 	add.w	r3, sp, #22
   2964c:	f7f8 f9be 	bl	219cc <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   29650:	f104 030e 	add.w	r3, r4, #14
   29654:	4601      	mov	r1, r0
   29656:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2965a:	9602      	str	r6, [sp, #8]
   2965c:	e9cd 7300 	strd	r7, r3, [sp]
   29660:	4628      	mov	r0, r5
   29662:	f10d 0316 	add.w	r3, sp, #22
   29666:	f7f8 f9b1 	bl	219cc <net_pkt_write>
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   2966a:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2966e:	4601      	mov	r1, r0
   29670:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29674:	9602      	str	r6, [sp, #8]
   29676:	e9cd 7300 	strd	r7, r3, [sp]
   2967a:	4628      	mov	r0, r5
   2967c:	f10d 0316 	add.w	r3, sp, #22
   29680:	f7f8 f9a4 	bl	219cc <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   29684:	f104 0312 	add.w	r3, r4, #18
   29688:	e9cd 7300 	strd	r7, r3, [sp]
   2968c:	4601      	mov	r1, r0
   2968e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29692:	9602      	str	r6, [sp, #8]
   29694:	f10d 0316 	add.w	r3, sp, #22
   29698:	4628      	mov	r0, r5
   2969a:	f7f8 f997 	bl	219cc <net_pkt_write>
	if (!frag) {
   2969e:	b9c0      	cbnz	r0, 296d2 <net_tcp_set_hdr+0x146>
		NET_ASSERT(frag);
   296a0:	4b0d      	ldr	r3, [pc, #52]	; (296d8 <net_tcp_set_hdr+0x14c>)
   296a2:	681b      	ldr	r3, [r3, #0]
   296a4:	075b      	lsls	r3, r3, #29
   296a6:	d00f      	beq.n	296c8 <net_tcp_set_hdr+0x13c>
   296a8:	490c      	ldr	r1, [pc, #48]	; (296dc <net_tcp_set_hdr+0x150>)
   296aa:	4b0d      	ldr	r3, [pc, #52]	; (296e0 <net_tcp_set_hdr+0x154>)
   296ac:	480d      	ldr	r0, [pc, #52]	; (296e4 <net_tcp_set_hdr+0x158>)
   296ae:	f04f 0200 	mov.w	r2, #0
   296b2:	1a5b      	subs	r3, r3, r1
   296b4:	f369 0202 	bfi	r2, r9, #0, #3
   296b8:	f368 02c5 	bfi	r2, r8, #3, #3
   296bc:	08db      	lsrs	r3, r3, #3
   296be:	f363 128f 	bfi	r2, r3, #6, #10
   296c2:	4909      	ldr	r1, [pc, #36]	; (296e8 <net_tcp_set_hdr+0x15c>)
   296c4:	f7d8 fb48 	bl	1d58 <log_1>
   296c8:	4644      	mov	r4, r8
}
   296ca:	4620      	mov	r0, r4
   296cc:	b007      	add	sp, #28
   296ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return hdr;
   296d2:	46a0      	mov	r8, r4
   296d4:	e7f8      	b.n	296c8 <net_tcp_set_hdr+0x13c>
   296d6:	bf00      	nop
   296d8:	2000d7c0 	.word	0x2000d7c0
   296dc:	0002cff8 	.word	0x0002cff8
   296e0:	0002d158 	.word	0x0002d158
   296e4:	00034e98 	.word	0x00034e98
   296e8:	00034c3a 	.word	0x00034c3a

000296ec <net_tcp_get_chksum>:
{
   296ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   296ee:	4604      	mov	r4, r0
   296f0:	460e      	mov	r6, r1
	hdr = net_pkt_tcp_data(pkt);
   296f2:	f7f8 fa63 	bl	21bbc <net_pkt_tcp_data>
   296f6:	4605      	mov	r5, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   296f8:	4601      	mov	r1, r0
   296fa:	4620      	mov	r0, r4
   296fc:	f7ff f940 	bl	28980 <net_tcp_header_fits>
   29700:	b110      	cbz	r0, 29708 <net_tcp_get_chksum+0x1c>
		return hdr->chksum;
   29702:	8a28      	ldrh	r0, [r5, #16]
}
   29704:	b004      	add	sp, #16
   29706:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(frag,
   29708:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2970c:	f101 0310 	add.w	r3, r1, #16
			     net_pkt_ip_hdr_len(pkt) +
   29710:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
	frag = net_frag_read(frag,
   29714:	4419      	add	r1, r3
   29716:	ab03      	add	r3, sp, #12
   29718:	9300      	str	r3, [sp, #0]
   2971a:	f10d 020e 	add.w	r2, sp, #14
   2971e:	2302      	movs	r3, #2
   29720:	b289      	uxth	r1, r1
   29722:	4630      	mov	r0, r6
   29724:	f7f8 f8dc 	bl	218e0 <net_frag_read>
	NET_ASSERT(frag);
   29728:	b9a0      	cbnz	r0, 29754 <net_tcp_get_chksum+0x68>
   2972a:	4b0c      	ldr	r3, [pc, #48]	; (2975c <net_tcp_get_chksum+0x70>)
   2972c:	681b      	ldr	r3, [r3, #0]
   2972e:	075b      	lsls	r3, r3, #29
   29730:	d010      	beq.n	29754 <net_tcp_get_chksum+0x68>
   29732:	2301      	movs	r3, #1
   29734:	f04f 0200 	mov.w	r2, #0
   29738:	f363 0202 	bfi	r2, r3, #0, #3
   2973c:	4908      	ldr	r1, [pc, #32]	; (29760 <net_tcp_get_chksum+0x74>)
   2973e:	4b09      	ldr	r3, [pc, #36]	; (29764 <net_tcp_get_chksum+0x78>)
   29740:	1a5b      	subs	r3, r3, r1
   29742:	f360 02c5 	bfi	r2, r0, #3, #3
   29746:	08db      	lsrs	r3, r3, #3
   29748:	f363 128f 	bfi	r2, r3, #6, #10
   2974c:	4906      	ldr	r1, [pc, #24]	; (29768 <net_tcp_get_chksum+0x7c>)
   2974e:	4807      	ldr	r0, [pc, #28]	; (2976c <net_tcp_get_chksum+0x80>)
   29750:	f7d8 fb02 	bl	1d58 <log_1>
	return chksum;
   29754:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   29758:	e7d4      	b.n	29704 <net_tcp_get_chksum+0x18>
   2975a:	bf00      	nop
   2975c:	2000d7c0 	.word	0x2000d7c0
   29760:	0002cff8 	.word	0x0002cff8
   29764:	0002d158 	.word	0x0002d158
   29768:	00034c4a 	.word	0x00034c4a
   2976c:	00034e98 	.word	0x00034e98

00029770 <net_tcp_set_chksum>:
{
   29770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29774:	b086      	sub	sp, #24
	u16_t chksum = 0;
   29776:	2700      	movs	r7, #0
{
   29778:	4604      	mov	r4, r0
   2977a:	460d      	mov	r5, r1
	u16_t chksum = 0;
   2977c:	f8ad 7014 	strh.w	r7, [sp, #20]
	hdr = net_pkt_tcp_data(pkt);
   29780:	f7f8 fa1c 	bl	21bbc <net_pkt_tcp_data>
   29784:	4606      	mov	r6, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   29786:	4601      	mov	r1, r0
   29788:	4620      	mov	r0, r4
   2978a:	f7ff f8f9 	bl	28980 <net_tcp_header_fits>
   2978e:	b158      	cbz	r0, 297a8 <net_tcp_set_chksum+0x38>
		hdr->chksum = 0;
   29790:	7437      	strb	r7, [r6, #16]
   29792:	7477      	strb	r7, [r6, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   29794:	2106      	movs	r1, #6
   29796:	4620      	mov	r0, r4
   29798:	f7f8 fd8a 	bl	222b0 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   2979c:	43c0      	mvns	r0, r0
   2979e:	8230      	strh	r0, [r6, #16]
}
   297a0:	4628      	mov	r0, r5
   297a2:	b006      	add	sp, #24
   297a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	frag = net_pkt_write(pkt, frag,
   297a8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   297ac:	f102 0310 	add.w	r3, r2, #16
			     net_pkt_ip_hdr_len(pkt) +
   297b0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
	frag = net_pkt_write(pkt, frag,
   297b4:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   297b8:	441a      	add	r2, r3
   297ba:	ae05      	add	r6, sp, #20
   297bc:	2702      	movs	r7, #2
   297be:	f10d 0316 	add.w	r3, sp, #22
   297c2:	b292      	uxth	r2, r2
   297c4:	4629      	mov	r1, r5
   297c6:	f8cd 8008 	str.w	r8, [sp, #8]
   297ca:	9601      	str	r6, [sp, #4]
   297cc:	9700      	str	r7, [sp, #0]
   297ce:	4620      	mov	r0, r4
   297d0:	f7f8 f8fc 	bl	219cc <net_pkt_write>
   297d4:	2106      	movs	r1, #6
   297d6:	4605      	mov	r5, r0
   297d8:	4620      	mov	r0, r4
   297da:	f7f8 fd69 	bl	222b0 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   297de:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   297e2:	9700      	str	r7, [sp, #0]
	chksum = ~net_calc_chksum_tcp(pkt);
   297e4:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   297e6:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_tcp(pkt);
   297e8:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   297ec:	4629      	mov	r1, r5
   297ee:	e9cd 6801 	strd	r6, r8, [sp, #4]
   297f2:	f10d 0316 	add.w	r3, sp, #22
   297f6:	b292      	uxth	r2, r2
   297f8:	4620      	mov	r0, r4
   297fa:	f7f8 f8e7 	bl	219cc <net_pkt_write>
	NET_ASSERT(frag);
   297fe:	4605      	mov	r5, r0
   29800:	2800      	cmp	r0, #0
   29802:	d1cd      	bne.n	297a0 <net_tcp_set_chksum+0x30>
   29804:	4b0a      	ldr	r3, [pc, #40]	; (29830 <net_tcp_set_chksum+0xc0>)
   29806:	681b      	ldr	r3, [r3, #0]
   29808:	075b      	lsls	r3, r3, #29
   2980a:	d0c9      	beq.n	297a0 <net_tcp_set_chksum+0x30>
   2980c:	2301      	movs	r3, #1
   2980e:	f04f 0200 	mov.w	r2, #0
   29812:	f363 0202 	bfi	r2, r3, #0, #3
   29816:	4907      	ldr	r1, [pc, #28]	; (29834 <net_tcp_set_chksum+0xc4>)
   29818:	4b07      	ldr	r3, [pc, #28]	; (29838 <net_tcp_set_chksum+0xc8>)
   2981a:	1a5b      	subs	r3, r3, r1
   2981c:	f360 02c5 	bfi	r2, r0, #3, #3
   29820:	08db      	lsrs	r3, r3, #3
   29822:	f363 128f 	bfi	r2, r3, #6, #10
   29826:	4905      	ldr	r1, [pc, #20]	; (2983c <net_tcp_set_chksum+0xcc>)
   29828:	4805      	ldr	r0, [pc, #20]	; (29840 <net_tcp_set_chksum+0xd0>)
   2982a:	f7d8 fa95 	bl	1d58 <log_1>
   2982e:	e7b7      	b.n	297a0 <net_tcp_set_chksum+0x30>
   29830:	2000d7c0 	.word	0x2000d7c0
   29834:	0002cff8 	.word	0x0002cff8
   29838:	0002d158 	.word	0x0002d158
   2983c:	00034c5d 	.word	0x00034c5d
   29840:	00034e98 	.word	0x00034e98

00029844 <net_tcp_send_pkt>:
{
   29844:	b570      	push	{r4, r5, r6, lr}
   29846:	b086      	sub	sp, #24
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   29848:	a901      	add	r1, sp, #4
{
   2984a:	4605      	mov	r5, r0
	struct net_context *ctx = net_pkt_context(pkt);
   2984c:	6986      	ldr	r6, [r0, #24]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2984e:	f7ff fd1b 	bl	29288 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   29852:	4604      	mov	r4, r0
   29854:	b9c0      	cbnz	r0, 29888 <net_tcp_send_pkt+0x44>
		NET_ERR("Packet %p does not contain TCP header", pkt);
   29856:	4b40      	ldr	r3, [pc, #256]	; (29958 <net_tcp_send_pkt+0x114>)
   29858:	681b      	ldr	r3, [r3, #0]
   2985a:	0758      	lsls	r0, r3, #29
   2985c:	d011      	beq.n	29882 <net_tcp_send_pkt+0x3e>
   2985e:	2201      	movs	r2, #1
   29860:	f04f 0300 	mov.w	r3, #0
   29864:	f362 0302 	bfi	r3, r2, #0, #3
   29868:	493c      	ldr	r1, [pc, #240]	; (2995c <net_tcp_send_pkt+0x118>)
   2986a:	4a3d      	ldr	r2, [pc, #244]	; (29960 <net_tcp_send_pkt+0x11c>)
   2986c:	483d      	ldr	r0, [pc, #244]	; (29964 <net_tcp_send_pkt+0x120>)
   2986e:	1a52      	subs	r2, r2, r1
   29870:	08d2      	lsrs	r2, r2, #3
   29872:	f364 03c5 	bfi	r3, r4, #3, #3
   29876:	f362 138f 	bfi	r3, r2, #6, #10
   2987a:	493b      	ldr	r1, [pc, #236]	; (29968 <net_tcp_send_pkt+0x124>)
   2987c:	462a      	mov	r2, r5
   2987e:	f7d8 fa7f 	bl	1d80 <log_2>
		return -EMSGSIZE;
   29882:	f06f 0423 	mvn.w	r4, #35	; 0x23
   29886:	e059      	b.n	2993c <net_tcp_send_pkt+0xf8>
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   29888:	3008      	adds	r0, #8
   2988a:	f7fe ff8c 	bl	287a6 <sys_get_be32>
   2988e:	6c73      	ldr	r3, [r6, #68]	; 0x44
   29890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   29894:	4298      	cmp	r0, r3
   29896:	d018      	beq.n	298ca <net_tcp_send_pkt+0x86>
	sys_put_be16(val >> 16, dst);
   29898:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   2989a:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   2989c:	7262      	strb	r2, [r4, #9]
	dst[0] = val >> 8;
   2989e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   298a2:	72a2      	strb	r2, [r4, #10]
   298a4:	7221      	strb	r1, [r4, #8]
	dst[1] = val;
   298a6:	72e3      	strb	r3, [r4, #11]
		calc_chksum = true;
   298a8:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   298aa:	6c73      	ldr	r3, [r6, #68]	; 0x44
   298ac:	e9d3 3125 	ldrd	r3, r1, [r3, #148]	; 0x94
   298b0:	4299      	cmp	r1, r3
   298b2:	d00c      	beq.n	298ce <net_tcp_send_pkt+0x8a>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   298b4:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   298b6:	06d9      	lsls	r1, r3, #27
   298b8:	d409      	bmi.n	298ce <net_tcp_send_pkt+0x8a>
		tcp_hdr->flags |= NET_TCP_ACK;
   298ba:	f043 0310 	orr.w	r3, r3, #16
   298be:	7363      	strb	r3, [r4, #13]
		net_tcp_set_chksum(pkt, pkt->frags);
   298c0:	6969      	ldr	r1, [r5, #20]
   298c2:	4628      	mov	r0, r5
   298c4:	f7ff ff54 	bl	29770 <net_tcp_set_chksum>
   298c8:	e003      	b.n	298d2 <net_tcp_send_pkt+0x8e>
	bool calc_chksum = false;
   298ca:	2200      	movs	r2, #0
   298cc:	e7ed      	b.n	298aa <net_tcp_send_pkt+0x66>
	if (calc_chksum) {
   298ce:	2a00      	cmp	r2, #0
   298d0:	d1f6      	bne.n	298c0 <net_tcp_send_pkt+0x7c>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   298d2:	7b62      	ldrb	r2, [r4, #13]
   298d4:	6c73      	ldr	r3, [r6, #68]	; 0x44
   298d6:	07d2      	lsls	r2, r2, #31
		ctx->tcp->fin_sent = 1;
   298d8:	bf42      	ittt	mi
   298da:	f893 20be 	ldrbmi.w	r2, [r3, #190]	; 0xbe
   298de:	f042 0202 	orrmi.w	r2, r2, #2
   298e2:	f883 20be 	strbmi.w	r2, [r3, #190]	; 0xbe
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   298e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   298ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	net_tcp_set_hdr(pkt, tcp_hdr);
   298ee:	4621      	mov	r1, r4
   298f0:	4628      	mov	r0, r5
   298f2:	f7ff fe4b 	bl	2958c <net_tcp_set_hdr>
	return pkt->family;
   298f6:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
	if (is_6lo_technology(pkt)) {
   298fa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   298fe:	2b0a      	cmp	r3, #10
   29900:	d109      	bne.n	29916 <net_tcp_send_pkt+0xd2>
   29902:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   29906:	2b02      	cmp	r3, #2
   29908:	d105      	bne.n	29916 <net_tcp_send_pkt+0xd2>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2990a:	6c73      	ldr	r3, [r6, #68]	; 0x44
   2990c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   29910:	b108      	cbz	r0, 29916 <net_tcp_send_pkt+0xd2>
   29912:	3844      	subs	r0, #68	; 0x44
   29914:	b920      	cbnz	r0, 29920 <net_tcp_send_pkt+0xdc>
	return net_send_data(pkt);
   29916:	4628      	mov	r0, r5
   29918:	f7f5 ff88 	bl	1f82c <net_send_data>
   2991c:	4604      	mov	r4, r0
   2991e:	e00d      	b.n	2993c <net_tcp_send_pkt+0xf8>
			if (check_pkt == pkt) {
   29920:	42a8      	cmp	r0, r5
   29922:	d00e      	beq.n	29942 <net_tcp_send_pkt+0xfe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29924:	f110 0f44 	cmn.w	r0, #68	; 0x44
   29928:	d0f5      	beq.n	29916 <net_tcp_send_pkt+0xd2>
	return node->next;
   2992a:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2992c:	e7f0      	b.n	29910 <net_tcp_send_pkt+0xcc>
			ret = net_send_data(new_pkt);
   2992e:	f7f5 ff7d 	bl	1f82c <net_send_data>
			if (ret < 0) {
   29932:	1e04      	subs	r4, r0, #0
   29934:	da02      	bge.n	2993c <net_tcp_send_pkt+0xf8>
				net_pkt_unref(new_pkt);
   29936:	4628      	mov	r0, r5
   29938:	f7f7 fe71 	bl	2161e <net_pkt_unref>
}
   2993c:	4620      	mov	r0, r4
   2993e:	b006      	add	sp, #24
   29940:	bd70      	pop	{r4, r5, r6, pc}
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   29942:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   29946:	f7f8 f9c5 	bl	21cd4 <net_pkt_clone>
			if (!new_pkt) {
   2994a:	4605      	mov	r5, r0
   2994c:	2800      	cmp	r0, #0
   2994e:	d1ee      	bne.n	2992e <net_tcp_send_pkt+0xea>
				return -ENOMEM;
   29950:	f06f 040b 	mvn.w	r4, #11
   29954:	e7f2      	b.n	2993c <net_tcp_send_pkt+0xf8>
   29956:	bf00      	nop
   29958:	2000d7c0 	.word	0x2000d7c0
   2995c:	0002cff8 	.word	0x0002cff8
   29960:	0002d158 	.word	0x0002d158
   29964:	00034e6e 	.word	0x00034e6e
   29968:	00034bef 	.word	0x00034bef

0002996c <tcp_retry_expired>:
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2996c:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   2996e:	b570      	push	{r4, r5, r6, lr}
   29970:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   29972:	2b00      	cmp	r3, #0
   29974:	d050      	beq.n	29a18 <tcp_retry_expired+0xac>
		tcp->retry_timeout_shift++;
   29976:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   2997a:	1c53      	adds	r3, r2, #1
   2997c:	f003 031f 	and.w	r3, r3, #31
   29980:	f363 0204 	bfi	r2, r3, #0, #5
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   29984:	2b09      	cmp	r3, #9
		tcp->retry_timeout_shift++;
   29986:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2998a:	d90f      	bls.n	299ac <tcp_retry_expired+0x40>
	struct net_context *ctx = tcp->context;
   2998c:	f850 5c48 	ldr.w	r5, [r0, #-72]
	if (ctx->recv_cb) {
   29990:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   29992:	b136      	cbz	r6, 299a2 <tcp_retry_expired+0x36>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   29994:	f850 3c44 	ldr.w	r3, [r0, #-68]
   29998:	f06f 0235 	mvn.w	r2, #53	; 0x35
   2999c:	2100      	movs	r1, #0
   2999e:	4628      	mov	r0, r5
   299a0:	47b0      	blx	r6
	net_context_unref(ctx);
   299a2:	4628      	mov	r0, r5
}
   299a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_context_unref(tcp->context);
   299a8:	f7f5 bb3a 	b.w	1f020 <net_context_unref>
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   299ac:	21c8      	movs	r1, #200	; 0xc8
   299ae:	4099      	lsls	r1, r3
   299b0:	f7fe ff08 	bl	287c4 <k_delayed_work_submit>
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   299b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
	return pkt->sent_or_eof;
   299b6:	7953      	ldrb	r3, [r2, #5]
		if (net_pkt_sent(pkt)) {
   299b8:	07d9      	lsls	r1, r3, #31
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   299ba:	f1a2 0444 	sub.w	r4, r2, #68	; 0x44
		if (net_pkt_sent(pkt)) {
   299be:	d511      	bpl.n	299e4 <tcp_retry_expired+0x78>
			do_ref_if_needed(tcp, pkt);
   299c0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   299c4:	2b0a      	cmp	r3, #10
   299c6:	d103      	bne.n	299d0 <tcp_retry_expired+0x64>
   299c8:	f812 3c0b 	ldrb.w	r3, [r2, #-11]
   299cc:	2b02      	cmp	r3, #2
   299ce:	d003      	beq.n	299d8 <tcp_retry_expired+0x6c>
   299d0:	4620      	mov	r0, r4
   299d2:	f7f7 fe19 	bl	21608 <net_pkt_ref>
   299d6:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   299d8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   299dc:	f36f 0300 	bfc	r3, #0, #1
   299e0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	pkt->pkt_queued = send;
   299e4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   299e8:	f043 0302 	orr.w	r3, r3, #2
   299ec:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   299f0:	4620      	mov	r0, r4
   299f2:	f7ff ff27 	bl	29844 <net_tcp_send_pkt>
   299f6:	2800      	cmp	r0, #0
   299f8:	da17      	bge.n	29a2a <tcp_retry_expired+0xbe>
	return pkt->family;
   299fa:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   299fe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   29a02:	2b0a      	cmp	r3, #10
   29a04:	d103      	bne.n	29a0e <tcp_retry_expired+0xa2>
   29a06:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   29a0a:	2b02      	cmp	r3, #2
   29a0c:	d00d      	beq.n	29a2a <tcp_retry_expired+0xbe>
			net_pkt_unref(pkt);
   29a0e:	4620      	mov	r0, r4
}
   29a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_pkt_unref(pkt);
   29a14:	f7f7 be03 	b.w	2161e <net_pkt_unref>
		if (tcp->fin_sent && tcp->fin_rcvd) {
   29a18:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   29a1c:	f003 0306 	and.w	r3, r3, #6
   29a20:	2b06      	cmp	r3, #6
   29a22:	d102      	bne.n	29a2a <tcp_retry_expired+0xbe>
			net_context_unref(tcp->context);
   29a24:	f850 0c48 	ldr.w	r0, [r0, #-72]
   29a28:	e7bc      	b.n	299a4 <tcp_retry_expired+0x38>
}
   29a2a:	bd70      	pop	{r4, r5, r6, pc}

00029a2c <net_tcp_send_data>:
{
   29a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29a30:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   29a32:	6c43      	ldr	r3, [r0, #68]	; 0x44
   29a34:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
{
   29a38:	4606      	mov	r6, r0
   29a3a:	460d      	mov	r5, r1
   29a3c:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   29a3e:	b91c      	cbnz	r4, 29a48 <net_tcp_send_data+0x1c>
	if (cb) {
   29a40:	bb2d      	cbnz	r5, 29a8e <net_tcp_send_data+0x62>
}
   29a42:	2000      	movs	r0, #0
   29a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   29a48:	3c44      	subs	r4, #68	; 0x44
   29a4a:	2c00      	cmp	r4, #0
   29a4c:	d0f8      	beq.n	29a40 <net_tcp_send_data+0x14>
	return pkt->pkt_queued;
   29a4e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if (net_pkt_queued(pkt)) {
   29a52:	079a      	lsls	r2, r3, #30
   29a54:	d419      	bmi.n	29a8a <net_tcp_send_data+0x5e>
		if (!net_pkt_sent(pkt)) {
   29a56:	07db      	lsls	r3, r3, #31
   29a58:	d417      	bmi.n	29a8a <net_tcp_send_data+0x5e>
			ret = net_tcp_send_pkt(pkt);
   29a5a:	4620      	mov	r0, r4
   29a5c:	f7ff fef2 	bl	29844 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   29a60:	2800      	cmp	r0, #0
   29a62:	da0c      	bge.n	29a7e <net_tcp_send_data+0x52>
	return pkt->family;
   29a64:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   29a68:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   29a6c:	2b0a      	cmp	r3, #10
   29a6e:	d103      	bne.n	29a78 <net_tcp_send_data+0x4c>
   29a70:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   29a74:	2b02      	cmp	r3, #2
   29a76:	d002      	beq.n	29a7e <net_tcp_send_data+0x52>
				net_pkt_unref(pkt);
   29a78:	4620      	mov	r0, r4
   29a7a:	f7f7 fdd0 	bl	2161e <net_pkt_unref>
	pkt->pkt_queued = send;
   29a7e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   29a82:	f043 0302 	orr.w	r3, r3, #2
   29a86:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   29a8a:	6c64      	ldr	r4, [r4, #68]	; 0x44
   29a8c:	e7d7      	b.n	29a3e <net_tcp_send_data+0x12>
		cb(context, 0, token, user_data);
   29a8e:	4643      	mov	r3, r8
   29a90:	463a      	mov	r2, r7
   29a92:	2100      	movs	r1, #0
   29a94:	4630      	mov	r0, r6
   29a96:	47a8      	blx	r5
   29a98:	e7d3      	b.n	29a42 <net_tcp_send_data+0x16>

00029a9a <send_ack.isra.30>:
static int send_ack(struct net_context *context,
   29a9a:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   29a9c:	2300      	movs	r3, #0
   29a9e:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   29aa0:	b91a      	cbnz	r2, 29aaa <send_ack.isra.30+0x10>
   29aa2:	e9d0 4325 	ldrd	r4, r3, [r0, #148]	; 0x94
   29aa6:	429c      	cmp	r4, r3
   29aa8:	d00f      	beq.n	29aca <send_ack.isra.30+0x30>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   29aaa:	aa01      	add	r2, sp, #4
   29aac:	f7ff fad4 	bl	29058 <net_tcp_prepare_ack>
	if (ret) {
   29ab0:	4604      	mov	r4, r0
   29ab2:	b938      	cbnz	r0, 29ac4 <send_ack.isra.30+0x2a>
	ret = net_tcp_send_pkt(pkt);
   29ab4:	9801      	ldr	r0, [sp, #4]
   29ab6:	f7ff fec5 	bl	29844 <net_tcp_send_pkt>
	if (ret < 0) {
   29aba:	1e04      	subs	r4, r0, #0
   29abc:	da02      	bge.n	29ac4 <send_ack.isra.30+0x2a>
		net_pkt_unref(pkt);
   29abe:	9801      	ldr	r0, [sp, #4]
   29ac0:	f7f7 fdad 	bl	2161e <net_pkt_unref>
}
   29ac4:	4620      	mov	r0, r4
   29ac6:	b002      	add	sp, #8
   29ac8:	bd10      	pop	{r4, pc}
		return 0;
   29aca:	4614      	mov	r4, r2
   29acc:	e7fa      	b.n	29ac4 <send_ack.isra.30+0x2a>
	...

00029ad0 <tcp_established>:
 *
 * Prototype:
 * enum net_verdict tcp_established(struct net_conn *conn, struct net_pkt *pkt,
 *                                  void *user_data)
 */
NET_CONN_CB(tcp_established)
   29ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ad4:	4680      	mov	r8, r0
   29ad6:	b08d      	sub	sp, #52	; 0x34
   29ad8:	4614      	mov	r4, r2
   29ada:	4610      	mov	r0, r2
   29adc:	4689      	mov	r9, r1
   29ade:	f7f5 fa91 	bl	1f004 <net_context_ref>
	struct net_tcp_hdr hdr, *tcp_hdr;
	enum net_verdict ret = NET_OK;
	u8_t tcp_flags;
	u16_t data_len;

	NET_ASSERT(context && context->tcp);
   29ae2:	b10c      	cbz	r4, 29ae8 <tcp_established+0x18>
   29ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29ae6:	b9a3      	cbnz	r3, 29b12 <tcp_established+0x42>
   29ae8:	4b87      	ldr	r3, [pc, #540]	; (29d08 <tcp_established+0x238>)
   29aea:	681b      	ldr	r3, [r3, #0]
   29aec:	0758      	lsls	r0, r3, #29
   29aee:	d010      	beq.n	29b12 <tcp_established+0x42>
   29af0:	2301      	movs	r3, #1
   29af2:	f04f 0200 	mov.w	r2, #0
   29af6:	f363 0202 	bfi	r2, r3, #0, #3
   29afa:	4984      	ldr	r1, [pc, #528]	; (29d0c <tcp_established+0x23c>)
   29afc:	4b84      	ldr	r3, [pc, #528]	; (29d10 <tcp_established+0x240>)
   29afe:	4885      	ldr	r0, [pc, #532]	; (29d14 <tcp_established+0x244>)
   29b00:	1a5b      	subs	r3, r3, r1
   29b02:	f36f 02c5 	bfc	r2, #3, #3
   29b06:	08db      	lsrs	r3, r3, #3
   29b08:	f363 128f 	bfi	r2, r3, #6, #10
   29b0c:	4982      	ldr	r1, [pc, #520]	; (29d18 <tcp_established+0x248>)
   29b0e:	f7d8 f923 	bl	1d58 <log_1>

	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   29b12:	a907      	add	r1, sp, #28
   29b14:	4648      	mov	r0, r9
   29b16:	f7ff fbb7 	bl	29288 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   29b1a:	4607      	mov	r7, r0
   29b1c:	b938      	cbnz	r0, 29b2e <tcp_established+0x5e>
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);

		return NET_DROP;
   29b1e:	2502      	movs	r5, #2
NET_CONN_CB(tcp_established)
   29b20:	4620      	mov	r0, r4
   29b22:	f7f5 fa7d 	bl	1f020 <net_context_unref>
   29b26:	4628      	mov	r0, r5
   29b28:	b00d      	add	sp, #52	; 0x34
   29b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   29b2e:	f8d4 b044 	ldr.w	fp, [r4, #68]	; 0x44
   29b32:	f8db 30bc 	ldr.w	r3, [fp, #188]	; 0xbc
   29b36:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29b3a:	2b03      	cmp	r3, #3
   29b3c:	d818      	bhi.n	29b70 <tcp_established+0xa0>
		NET_ERR("Context %p in wrong state %d",
   29b3e:	4a72      	ldr	r2, [pc, #456]	; (29d08 <tcp_established+0x238>)
   29b40:	6812      	ldr	r2, [r2, #0]
   29b42:	0751      	lsls	r1, r2, #29
   29b44:	d0eb      	beq.n	29b1e <tcp_established+0x4e>
   29b46:	2201      	movs	r2, #1
   29b48:	f04f 0100 	mov.w	r1, #0
   29b4c:	f362 0102 	bfi	r1, r2, #0, #3
   29b50:	486e      	ldr	r0, [pc, #440]	; (29d0c <tcp_established+0x23c>)
   29b52:	4a6f      	ldr	r2, [pc, #444]	; (29d10 <tcp_established+0x240>)
   29b54:	1a12      	subs	r2, r2, r0
   29b56:	08d2      	lsrs	r2, r2, #3
   29b58:	f36f 01c5 	bfc	r1, #3, #3
   29b5c:	f362 118f 	bfi	r1, r2, #6, #10
   29b60:	f8ad 1000 	strh.w	r1, [sp]
   29b64:	4622      	mov	r2, r4
   29b66:	496c      	ldr	r1, [pc, #432]	; (29d18 <tcp_established+0x248>)
   29b68:	486c      	ldr	r0, [pc, #432]	; (29d1c <tcp_established+0x24c>)
   29b6a:	f7d8 f921 	bl	1db0 <log_3>
   29b6e:	e7d6      	b.n	29b1e <tcp_established+0x4e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   29b70:	3004      	adds	r0, #4
   29b72:	f7fe fe18 	bl	287a6 <sys_get_be32>
   29b76:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   29b7a:	eba0 0a03 	sub.w	sl, r0, r3
   29b7e:	f1ba 0f00 	cmp.w	sl, #0
   29b82:	da05      	bge.n	29b90 <tcp_established+0xc0>
		send_ack(context, &conn->remote_addr, true);
   29b84:	2201      	movs	r2, #1
   29b86:	4641      	mov	r1, r8
   29b88:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29b8a:	f7ff ff86 	bl	29a9a <send_ack.isra.30>
   29b8e:	e7c6      	b.n	29b1e <tcp_established+0x4e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   29b90:	d1c5      	bne.n	29b1e <tcp_established+0x4e>
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   29b92:	7b7e      	ldrb	r6, [r7, #13]
	if (tcp_flags & NET_TCP_RST) {
   29b94:	f016 0504 	ands.w	r5, r6, #4
   29b98:	d012      	beq.n	29bc0 <tcp_established+0xf0>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   29b9a:	4649      	mov	r1, r9
   29b9c:	4658      	mov	r0, fp
   29b9e:	f7ff fcdb 	bl	29558 <net_tcp_validate_seq>
   29ba2:	2800      	cmp	r0, #0
   29ba4:	d0bb      	beq.n	29b1e <tcp_established+0x4e>
		if (context->recv_cb) {
   29ba6:	6b25      	ldr	r5, [r4, #48]	; 0x30
   29ba8:	b135      	cbz	r5, 29bb8 <tcp_established+0xe8>
			context->recv_cb(context, NULL, -ECONNRESET,
   29baa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29bac:	f06f 0235 	mvn.w	r2, #53	; 0x35
   29bb0:	685b      	ldr	r3, [r3, #4]
   29bb2:	4651      	mov	r1, sl
   29bb4:	4620      	mov	r0, r4
   29bb6:	47a8      	blx	r5
		net_context_unref(context);
   29bb8:	4620      	mov	r0, r4
   29bba:	f7f5 fa31 	bl	1f020 <net_context_unref>
   29bbe:	e7ae      	b.n	29b1e <tcp_established+0x4e>
	}

	/* Handle TCP state transition */
	if (tcp_flags & NET_TCP_ACK) {
   29bc0:	06f2      	lsls	r2, r6, #27
   29bc2:	d513      	bpl.n	29bec <tcp_established+0x11c>
		if (!net_tcp_ack_received(context,
   29bc4:	f107 0008 	add.w	r0, r7, #8
   29bc8:	f7fe fded 	bl	287a6 <sys_get_be32>
   29bcc:	4601      	mov	r1, r0
   29bce:	4620      	mov	r0, r4
   29bd0:	f7ff fbee 	bl	293b0 <net_tcp_ack_received>
   29bd4:	2800      	cmp	r0, #0
   29bd6:	d0a2      	beq.n	29b1e <tcp_established+0x4e>

		/* TCP state might be changed after maintaining the sent pkt
		 * list, e.g., an ack of FIN is received.
		 */

		if (net_tcp_get_state(context->tcp)
   29bd8:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29bda:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   29bde:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29be2:	2b07      	cmp	r3, #7
   29be4:	d146      	bne.n	29c74 <tcp_established+0x1a4>
			   == NET_TCP_FIN_WAIT_1) {
			/* Active close: step to FIN_WAIT_2 */
			net_tcp_change_state(context->tcp, NET_TCP_FIN_WAIT_2);
   29be6:	2108      	movs	r1, #8
   29be8:	f7ff f912 	bl	28e10 <net_tcp_change_state>
			net_pkt_unref(pkt);
			goto clean_up;
		}
	}

	if (tcp_flags & NET_TCP_FIN) {
   29bec:	f016 0701 	ands.w	r7, r6, #1
   29bf0:	d016      	beq.n	29c20 <tcp_established+0x150>
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   29bf2:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29bf4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   29bf8:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29bfc:	2b04      	cmp	r3, #4
   29bfe:	d15e      	bne.n	29cbe <tcp_established+0x1ee>
			/* Passive close: step to CLOSE_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   29c00:	2105      	movs	r1, #5
   29c02:	f7ff f905 	bl	28e10 <net_tcp_change_state>
			/* We should receive ACK next in order to get rid of
			 * LAST_ACK state that we are entering in a short while.
			 * But we need to be prepared to NOT to receive it as
			 * otherwise the connection would be stuck forever.
			 */
			k_delayed_work_submit(&context->tcp->ack_timer,
   29c06:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   29c0c:	3008      	adds	r0, #8
   29c0e:	f7fe fdd9 	bl	287c4 <k_delayed_work_submit>
			k_delayed_work_cancel(&context->tcp->fin_timer);
			/* Active close: step to TIME_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
		}

		context->tcp->fin_rcvd = 1;
   29c12:	6c62      	ldr	r2, [r4, #68]	; 0x44
   29c14:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
   29c18:	f043 0304 	orr.w	r3, r3, #4
   29c1c:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	}

	net_pkt_set_appdata_values(pkt, IPPROTO_TCP);
   29c20:	2106      	movs	r1, #6
   29c22:	4648      	mov	r0, r9
   29c24:	f7f8 f800 	bl	21c28 <net_pkt_set_appdata_values>

	data_len = net_pkt_appdatalen(pkt);
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   29c28:	6c63      	ldr	r3, [r4, #68]	; 0x44
	data_len = net_pkt_appdatalen(pkt);
   29c2a:	f8b9 603e 	ldrh.w	r6, [r9, #62]	; 0x3e
	return tcp->recv_wnd;
   29c2e:	f8b3 10b8 	ldrh.w	r1, [r3, #184]	; 0xb8
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   29c32:	428e      	cmp	r6, r1
   29c34:	d94d      	bls.n	29cd2 <tcp_established+0x202>
		 * for net_tcp_get_recv_wnd(context->tcp) == 0, but
		 * given the if above, we know that if data_len == 1,
		 * then net_tcp_get_recv_wnd(context->tcp) can be only 0
		 * here.
		 */
		if (data_len == 1) {
   29c36:	2e01      	cmp	r6, #1
   29c38:	d0a4      	beq.n	29b84 <tcp_established+0xb4>
			goto resend_ack;
		}

		NET_ERR("Context %p: overflow of recv window (%d vs %d), "
   29c3a:	4b33      	ldr	r3, [pc, #204]	; (29d08 <tcp_established+0x238>)
   29c3c:	681b      	ldr	r3, [r3, #0]
   29c3e:	075b      	lsls	r3, r3, #29
   29c40:	f43f af6d 	beq.w	29b1e <tcp_established+0x4e>
   29c44:	2201      	movs	r2, #1
   29c46:	f04f 0300 	mov.w	r3, #0
   29c4a:	f362 0302 	bfi	r3, r2, #0, #3
   29c4e:	482f      	ldr	r0, [pc, #188]	; (29d0c <tcp_established+0x23c>)
   29c50:	4a2f      	ldr	r2, [pc, #188]	; (29d10 <tcp_established+0x240>)
   29c52:	1a12      	subs	r2, r2, r0
   29c54:	08d2      	lsrs	r2, r2, #3
   29c56:	f36f 03c5 	bfc	r3, #3, #3
   29c5a:	f362 138f 	bfi	r3, r2, #6, #10
   29c5e:	4a2e      	ldr	r2, [pc, #184]	; (29d18 <tcp_established+0x248>)
   29c60:	482f      	ldr	r0, [pc, #188]	; (29d20 <tcp_established+0x250>)
   29c62:	e9cd 2403 	strd	r2, r4, [sp, #12]
   29c66:	e9cd 1605 	strd	r1, r6, [sp, #20]
   29c6a:	2204      	movs	r2, #4
   29c6c:	a903      	add	r1, sp, #12
   29c6e:	f7d8 f8ba 	bl	1de6 <log_n>
   29c72:	e754      	b.n	29b1e <tcp_established+0x4e>
		} else if (net_tcp_get_state(context->tcp)
   29c74:	2b06      	cmp	r3, #6
   29c76:	d1b9      	bne.n	29bec <tcp_established+0x11c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSED);
   29c78:	4629      	mov	r1, r5
   29c7a:	f7ff f8c9 	bl	28e10 <net_tcp_change_state>
			net_pkt_unref(pkt);
   29c7e:	4648      	mov	r0, r9
   29c80:	f7f7 fccd 	bl	2161e <net_pkt_unref>
	}

	send_ack(context, &conn->remote_addr, false);

clean_up:
	if (net_tcp_get_state(context->tcp) == NET_TCP_TIME_WAIT) {
   29c84:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29c86:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   29c8a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29c8e:	2b09      	cmp	r3, #9
   29c90:	d103      	bne.n	29c9a <tcp_established+0x1ca>
		k_delayed_work_submit(&context->tcp->timewait_timer,
   29c92:	21fa      	movs	r1, #250	; 0xfa
   29c94:	3068      	adds	r0, #104	; 0x68
   29c96:	f7fe fd95 	bl	287c4 <k_delayed_work_submit>
				      CONFIG_NET_TCP_TIME_WAIT_DELAY);
	}

	if (net_tcp_get_state(context->tcp) == NET_TCP_CLOSED) {
   29c9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29c9c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   29ca0:	f3c2 3243 	ubfx	r2, r2, #13, #4
   29ca4:	2a00      	cmp	r2, #0
   29ca6:	f47f af3b 	bne.w	29b20 <tcp_established+0x50>
		if (context->recv_cb) {
   29caa:	6b26      	ldr	r6, [r4, #48]	; 0x30
   29cac:	b11e      	cbz	r6, 29cb6 <tcp_established+0x1e6>
			context->recv_cb(context, NULL, 0,
   29cae:	685b      	ldr	r3, [r3, #4]
   29cb0:	4611      	mov	r1, r2
   29cb2:	4620      	mov	r0, r4
   29cb4:	47b0      	blx	r6
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);
   29cb6:	4620      	mov	r0, r4
   29cb8:	f7f5 f9b2 	bl	1f020 <net_context_unref>
   29cbc:	e730      	b.n	29b20 <tcp_established+0x50>
		} else if (net_tcp_get_state(context->tcp)
   29cbe:	2b08      	cmp	r3, #8
   29cc0:	d1a7      	bne.n	29c12 <tcp_established+0x142>
			k_delayed_work_cancel(&context->tcp->fin_timer);
   29cc2:	3028      	adds	r0, #40	; 0x28
   29cc4:	f002 fd2d 	bl	2c722 <k_delayed_work_cancel>
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
   29cc8:	2109      	movs	r1, #9
   29cca:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29ccc:	f7ff f8a0 	bl	28e10 <net_tcp_change_state>
   29cd0:	e79f      	b.n	29c12 <tcp_established+0x142>
	if (data_len > 0) {
   29cd2:	b18e      	cbz	r6, 29cf8 <tcp_established+0x228>
		ret = net_context_packet_received(conn, pkt,
   29cd4:	685a      	ldr	r2, [r3, #4]
   29cd6:	4649      	mov	r1, r9
   29cd8:	4640      	mov	r0, r8
   29cda:	f7f4 ffcd 	bl	1ec78 <net_context_packet_received>
   29cde:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   29ce0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29ce2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   29ce6:	441e      	add	r6, r3
	if (tcp_flags & NET_TCP_FIN) {
   29ce8:	b95f      	cbnz	r7, 29d02 <tcp_established+0x232>
		context->tcp->send_ack += 1;
   29cea:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
	send_ack(context, &conn->remote_addr, false);
   29cee:	2200      	movs	r2, #0
   29cf0:	4641      	mov	r1, r8
   29cf2:	f7ff fed2 	bl	29a9a <send_ack.isra.30>
   29cf6:	e7c5      	b.n	29c84 <tcp_established+0x1b4>
		net_pkt_unref(pkt);
   29cf8:	4648      	mov	r0, r9
   29cfa:	f7f7 fc90 	bl	2161e <net_pkt_unref>
	enum net_verdict ret = NET_OK;
   29cfe:	4635      	mov	r5, r6
   29d00:	e7ee      	b.n	29ce0 <tcp_established+0x210>
		context->tcp->send_ack += 1;
   29d02:	3601      	adds	r6, #1
   29d04:	e7f1      	b.n	29cea <tcp_established+0x21a>
   29d06:	bf00      	nop
   29d08:	2000d7c0 	.word	0x2000d7c0
   29d0c:	0002cff8 	.word	0x0002cff8
   29d10:	0002d158 	.word	0x0002d158
   29d14:	00034f24 	.word	0x00034f24
   29d18:	00034c7c 	.word	0x00034c7c
   29d1c:	00034f53 	.word	0x00034f53
   29d20:	00034f74 	.word	0x00034f74

00029d24 <tcp_synack_received>:
 * Prototype:
 * enum net_verdict tcp_synack_received(struct net_conn *conn,
 *                                      struct net_pkt *pkt,
 *                                      void *user_data)
 */
NET_CONN_CB(tcp_synack_received)
   29d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d26:	4610      	mov	r0, r2
   29d28:	b097      	sub	sp, #92	; 0x5c
   29d2a:	4614      	mov	r4, r2
   29d2c:	460d      	mov	r5, r1
   29d2e:	f7f5 f969 	bl	1f004 <net_context_ref>
{
	struct net_context *context = (struct net_context *)user_data;
	struct net_tcp_hdr hdr, *tcp_hdr;
	int ret;

	NET_ASSERT(context && context->tcp);
   29d32:	b10c      	cbz	r4, 29d38 <tcp_synack_received+0x14>
   29d34:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29d36:	b9a3      	cbnz	r3, 29d62 <tcp_synack_received+0x3e>
   29d38:	4b54      	ldr	r3, [pc, #336]	; (29e8c <tcp_synack_received+0x168>)
   29d3a:	681b      	ldr	r3, [r3, #0]
   29d3c:	0758      	lsls	r0, r3, #29
   29d3e:	d010      	beq.n	29d62 <tcp_synack_received+0x3e>
   29d40:	2301      	movs	r3, #1
   29d42:	f04f 0200 	mov.w	r2, #0
   29d46:	f363 0202 	bfi	r2, r3, #0, #3
   29d4a:	4951      	ldr	r1, [pc, #324]	; (29e90 <tcp_synack_received+0x16c>)
   29d4c:	4b51      	ldr	r3, [pc, #324]	; (29e94 <tcp_synack_received+0x170>)
   29d4e:	4852      	ldr	r0, [pc, #328]	; (29e98 <tcp_synack_received+0x174>)
   29d50:	1a5b      	subs	r3, r3, r1
   29d52:	f36f 02c5 	bfc	r2, #3, #3
   29d56:	08db      	lsrs	r3, r3, #3
   29d58:	f363 128f 	bfi	r2, r3, #6, #10
   29d5c:	494f      	ldr	r1, [pc, #316]	; (29e9c <tcp_synack_received+0x178>)
   29d5e:	f7d7 fffb 	bl	1d58 <log_1>
   29d62:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29d64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc

	switch (net_tcp_get_state(context->tcp)) {
   29d68:	f3c3 3343 	ubfx	r3, r3, #13, #4
   29d6c:	2b02      	cmp	r3, #2
   29d6e:	d170      	bne.n	29e52 <tcp_synack_received+0x12e>
	case NET_TCP_SYN_SENT:
		net_context_set_iface(context, net_pkt_iface(pkt));
   29d70:	6a29      	ldr	r1, [r5, #32]
   29d72:	f104 0064 	add.w	r0, r4, #100	; 0x64
   29d76:	f7fe fe43 	bl	28a00 <net_context_set_iface.isra.21>
		return NET_DROP;
	}

	net_pkt_set_context(pkt, context);

	NET_ASSERT(net_pkt_iface(pkt));
   29d7a:	6a2b      	ldr	r3, [r5, #32]
	pkt->context = ctx;
   29d7c:	61ac      	str	r4, [r5, #24]
   29d7e:	b9a3      	cbnz	r3, 29daa <tcp_synack_received+0x86>
   29d80:	4a42      	ldr	r2, [pc, #264]	; (29e8c <tcp_synack_received+0x168>)
   29d82:	6812      	ldr	r2, [r2, #0]
   29d84:	0751      	lsls	r1, r2, #29
   29d86:	d010      	beq.n	29daa <tcp_synack_received+0x86>
   29d88:	2101      	movs	r1, #1
   29d8a:	f04f 0200 	mov.w	r2, #0
   29d8e:	f361 0202 	bfi	r2, r1, #0, #3
   29d92:	f363 02c5 	bfi	r2, r3, #3, #3
   29d96:	493e      	ldr	r1, [pc, #248]	; (29e90 <tcp_synack_received+0x16c>)
   29d98:	4b3e      	ldr	r3, [pc, #248]	; (29e94 <tcp_synack_received+0x170>)
   29d9a:	4841      	ldr	r0, [pc, #260]	; (29ea0 <tcp_synack_received+0x17c>)
   29d9c:	1a5b      	subs	r3, r3, r1
   29d9e:	08db      	lsrs	r3, r3, #3
   29da0:	f363 128f 	bfi	r2, r3, #6, #10
   29da4:	493d      	ldr	r1, [pc, #244]	; (29e9c <tcp_synack_received+0x178>)
   29da6:	f7d7 ffd7 	bl	1d58 <log_1>

	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   29daa:	a905      	add	r1, sp, #20
   29dac:	4628      	mov	r0, r5
   29dae:	f7ff fa6b 	bl	29288 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   29db2:	4606      	mov	r6, r0
   29db4:	2800      	cmp	r0, #0
   29db6:	d04c      	beq.n	29e52 <tcp_synack_received+0x12e>
		return NET_DROP;
	}

	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   29db8:	7b47      	ldrb	r7, [r0, #13]
   29dba:	077a      	lsls	r2, r7, #29
   29dbc:	d50e      	bpl.n	29ddc <tcp_synack_received+0xb8>
		/* We only accept RST packet that has valid seq field. */
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   29dbe:	4629      	mov	r1, r5
   29dc0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29dc2:	f7ff fbc9 	bl	29558 <net_tcp_validate_seq>
   29dc6:	2800      	cmp	r0, #0
   29dc8:	d043      	beq.n	29e52 <tcp_synack_received+0x12e>
			return NET_DROP;
		}

		net_stats_update_tcp_seg_rst(net_pkt_iface(pkt));

		if (context->connect_cb) {
   29dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29dcc:	2b00      	cmp	r3, #0
   29dce:	d040      	beq.n	29e52 <tcp_synack_received+0x12e>
			context->connect_cb(context, -ECONNREFUSED,
   29dd0:	6822      	ldr	r2, [r4, #0]
   29dd2:	f06f 013c 	mvn.w	r1, #60	; 0x3c
		send_ack(context, &remote_addr, false);

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
			context->connect_cb(context, 0, context->user_data);
   29dd6:	4620      	mov	r0, r4
   29dd8:	4798      	blx	r3
   29dda:	e03a      	b.n	29e52 <tcp_synack_received+0x12e>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   29ddc:	07bb      	lsls	r3, r7, #30
   29dde:	d506      	bpl.n	29dee <tcp_synack_received+0xca>
			sys_get_be32(tcp_hdr->seq) + 1;
   29de0:	3004      	adds	r0, #4
   29de2:	f7fe fce0 	bl	287a6 <sys_get_be32>
		context->tcp->send_ack =
   29de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
			sys_get_be32(tcp_hdr->seq) + 1;
   29de8:	3001      	adds	r0, #1
		context->tcp->send_ack =
   29dea:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   29dee:	f007 073f 	and.w	r7, r7, #63	; 0x3f
   29df2:	2f12      	cmp	r7, #18
   29df4:	d12d      	bne.n	29e52 <tcp_synack_received+0x12e>
		if (net_pkt_get_src_addr(
   29df6:	2218      	movs	r2, #24
   29df8:	a910      	add	r1, sp, #64	; 0x40
   29dfa:	4628      	mov	r0, r5
   29dfc:	f7f7 fea4 	bl	21b48 <net_pkt_get_src_addr>
   29e00:	2800      	cmp	r0, #0
   29e02:	db26      	blt.n	29e52 <tcp_synack_received+0x12e>
		if (net_pkt_get_dst_addr(
   29e04:	2218      	movs	r2, #24
   29e06:	a90a      	add	r1, sp, #40	; 0x28
   29e08:	4628      	mov	r0, r5
   29e0a:	f7f7 fea2 	bl	21b52 <net_pkt_get_dst_addr>
   29e0e:	2800      	cmp	r0, #0
   29e10:	db1f      	blt.n	29e52 <tcp_synack_received+0x12e>
	return net_conn_unregister(handle);
   29e12:	4625      	mov	r5, r4
   29e14:	f855 0f2c 	ldr.w	r0, [r5, #44]!
   29e18:	f7fe faa0 	bl	2835c <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   29e1c:	8832      	ldrh	r2, [r6, #0]
				       ntohs(tcp_hdr->dst_port),
   29e1e:	8871      	ldrh	r1, [r6, #2]
				       ntohs(tcp_hdr->src_port),
   29e20:	0213      	lsls	r3, r2, #8
   29e22:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   29e26:	4a1f      	ldr	r2, [pc, #124]	; (29ea4 <tcp_synack_received+0x180>)
   29e28:	9201      	str	r2, [sp, #4]
				       ntohs(tcp_hdr->dst_port),
   29e2a:	020a      	lsls	r2, r1, #8
   29e2c:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   29e30:	b292      	uxth	r2, r2
   29e32:	9200      	str	r2, [sp, #0]
   29e34:	e9cd 4502 	strd	r4, r5, [sp, #8]
   29e38:	b29b      	uxth	r3, r3
   29e3a:	aa0a      	add	r2, sp, #40	; 0x28
   29e3c:	a910      	add	r1, sp, #64	; 0x40
   29e3e:	2006      	movs	r0, #6
   29e40:	f7fe faa6 	bl	28390 <net_conn_register>
		if (ret < 0) {
   29e44:	2800      	cmp	r0, #0
   29e46:	da0a      	bge.n	29e5e <tcp_synack_received+0x13a>
			send_reset(context, &local_addr, &remote_addr);
   29e48:	aa10      	add	r2, sp, #64	; 0x40
   29e4a:	a90a      	add	r1, sp, #40	; 0x28
   29e4c:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29e4e:	f7fe ffbc 	bl	28dca <send_reset.isra.23>
NET_CONN_CB(tcp_synack_received)
   29e52:	4620      	mov	r0, r4
   29e54:	f7f5 f8e4 	bl	1f020 <net_context_unref>
   29e58:	2002      	movs	r0, #2
   29e5a:	b017      	add	sp, #92	; 0x5c
   29e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   29e5e:	2104      	movs	r1, #4
   29e60:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29e62:	f7fe ffd5 	bl	28e10 <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_CONNECTED);
   29e66:	2102      	movs	r1, #2
   29e68:	4620      	mov	r0, r4
   29e6a:	f7fe fd35 	bl	288d8 <net_context_set_state>
		send_ack(context, &remote_addr, false);
   29e6e:	2200      	movs	r2, #0
   29e70:	a910      	add	r1, sp, #64	; 0x40
   29e72:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29e74:	f7ff fe11 	bl	29a9a <send_ack.isra.30>
		k_sem_give(&context->tcp->connect_wait);
   29e78:	6c60      	ldr	r0, [r4, #68]	; 0x44
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   29e7a:	30a0      	adds	r0, #160	; 0xa0
   29e7c:	f002 fa7f 	bl	2c37e <_impl_k_sem_give>
		if (context->connect_cb) {
   29e80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29e82:	2b00      	cmp	r3, #0
   29e84:	d0e5      	beq.n	29e52 <tcp_synack_received+0x12e>
			context->connect_cb(context, 0, context->user_data);
   29e86:	6822      	ldr	r2, [r4, #0]
   29e88:	2100      	movs	r1, #0
   29e8a:	e7a4      	b.n	29dd6 <tcp_synack_received+0xb2>
   29e8c:	2000d7c0 	.word	0x2000d7c0
   29e90:	0002cff8 	.word	0x0002cff8
   29e94:	0002d158 	.word	0x0002d158
   29e98:	00034f24 	.word	0x00034f24
   29e9c:	00034c8d 	.word	0x00034c8d
   29ea0:	000322f5 	.word	0x000322f5
   29ea4:	00029ad1 	.word	0x00029ad1

00029ea8 <tcp_hdr_len>:
{
   29ea8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   29eaa:	a901      	add	r1, sp, #4
   29eac:	f7ff f9ec 	bl	29288 <net_tcp_get_hdr>
	if (tcp_hdr) {
   29eb0:	b110      	cbz	r0, 29eb8 <tcp_hdr_len+0x10>
		return NET_TCP_HDR_LEN(tcp_hdr);
   29eb2:	7b00      	ldrb	r0, [r0, #12]
   29eb4:	0900      	lsrs	r0, r0, #4
   29eb6:	0080      	lsls	r0, r0, #2
}
   29eb8:	b007      	add	sp, #28
   29eba:	f85d fb04 	ldr.w	pc, [sp], #4

00029ebe <net_tcp_put>:
{
   29ebe:	b530      	push	{r4, r5, lr}
   29ec0:	b087      	sub	sp, #28
   29ec2:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   29ec4:	f7fe fc8c 	bl	287e0 <net_context_get_ip_proto>
   29ec8:	2806      	cmp	r0, #6
   29eca:	d138      	bne.n	29f3e <net_tcp_put+0x80>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   29ecc:	4620      	mov	r0, r4
   29ece:	f7fe fcdb 	bl	28888 <net_context_get_state>
   29ed2:	2802      	cmp	r0, #2
   29ed4:	d109      	bne.n	29eea <net_tcp_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   29ed6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29ed8:	f890 50be 	ldrb.w	r5, [r0, #190]	; 0xbe
   29edc:	f015 0504 	ands.w	r5, r5, #4
   29ee0:	d009      	beq.n	29ef6 <net_tcp_put+0x38>
		return -ENOTCONN;
   29ee2:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   29ee6:	b007      	add	sp, #28
   29ee8:	bd30      	pop	{r4, r5, pc}
		     net_context_get_state(context) == NET_CONTEXT_LISTENING)
   29eea:	4620      	mov	r0, r4
   29eec:	f7fe fccc 	bl	28888 <net_context_get_state>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   29ef0:	2803      	cmp	r0, #3
   29ef2:	d0f0      	beq.n	29ed6 <net_tcp_put+0x18>
   29ef4:	e7f5      	b.n	29ee2 <net_tcp_put+0x24>
			k_delayed_work_submit(&context->tcp->fin_timer,
   29ef6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   29efa:	3028      	adds	r0, #40	; 0x28
   29efc:	f7fe fc62 	bl	287c4 <k_delayed_work_submit>
	struct net_pkt *pkt = NULL;
   29f00:	ab06      	add	r3, sp, #24
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   29f02:	462a      	mov	r2, r5
	struct net_pkt *pkt = NULL;
   29f04:	f843 5d04 	str.w	r5, [r3, #-4]!
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   29f08:	9302      	str	r3, [sp, #8]
				      NULL, &ctx->remote, &pkt);
   29f0a:	f104 0314 	add.w	r3, r4, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   29f0e:	e9cd 5300 	strd	r5, r3, [sp]
   29f12:	2101      	movs	r1, #1
   29f14:	462b      	mov	r3, r5
   29f16:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29f18:	f7ff f838 	bl	28f8c <net_tcp_prepare_segment>
	if (ret || !pkt) {
   29f1c:	b968      	cbnz	r0, 29f3a <net_tcp_put+0x7c>
   29f1e:	9905      	ldr	r1, [sp, #20]
   29f20:	b159      	cbz	r1, 29f3a <net_tcp_put+0x7c>
	net_tcp_queue_pkt(ctx, pkt);
   29f22:	f104 0044 	add.w	r0, r4, #68	; 0x44
   29f26:	f7fe fd35 	bl	28994 <net_tcp_queue_pkt.isra.20>
	ret = net_tcp_send_pkt(pkt);
   29f2a:	9805      	ldr	r0, [sp, #20]
   29f2c:	f7ff fc8a 	bl	29844 <net_tcp_send_pkt>
	if (ret < 0) {
   29f30:	2800      	cmp	r0, #0
   29f32:	da02      	bge.n	29f3a <net_tcp_put+0x7c>
		net_pkt_unref(pkt);
   29f34:	9805      	ldr	r0, [sp, #20]
   29f36:	f7f7 fb72 	bl	2161e <net_pkt_unref>
			return 0;
   29f3a:	2000      	movs	r0, #0
   29f3c:	e7d3      	b.n	29ee6 <net_tcp_put+0x28>
	return -EOPNOTSUPP;
   29f3e:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   29f42:	e7d0      	b.n	29ee6 <net_tcp_put+0x28>

00029f44 <net_tcp_get>:
{
   29f44:	b510      	push	{r4, lr}
   29f46:	4604      	mov	r4, r0
	context->tcp = net_tcp_alloc(context);
   29f48:	f7fe fe5c 	bl	28c04 <net_tcp_alloc>
   29f4c:	6460      	str	r0, [r4, #68]	; 0x44
	if (!context->tcp) {
   29f4e:	b9b8      	cbnz	r0, 29f80 <net_tcp_get+0x3c>
		NET_ASSERT_INFO(context->tcp, "Cannot allocate TCP context");
   29f50:	4b13      	ldr	r3, [pc, #76]	; (29fa0 <net_tcp_get+0x5c>)
   29f52:	681b      	ldr	r3, [r3, #0]
   29f54:	075b      	lsls	r3, r3, #29
   29f56:	d010      	beq.n	29f7a <net_tcp_get+0x36>
   29f58:	2301      	movs	r3, #1
   29f5a:	f04f 0200 	mov.w	r2, #0
   29f5e:	f363 0202 	bfi	r2, r3, #0, #3
   29f62:	4910      	ldr	r1, [pc, #64]	; (29fa4 <net_tcp_get+0x60>)
   29f64:	4b10      	ldr	r3, [pc, #64]	; (29fa8 <net_tcp_get+0x64>)
   29f66:	1a5b      	subs	r3, r3, r1
   29f68:	f360 02c5 	bfi	r2, r0, #3, #3
   29f6c:	08db      	lsrs	r3, r3, #3
   29f6e:	f363 128f 	bfi	r2, r3, #6, #10
   29f72:	490e      	ldr	r1, [pc, #56]	; (29fac <net_tcp_get+0x68>)
   29f74:	480e      	ldr	r0, [pc, #56]	; (29fb0 <net_tcp_get+0x6c>)
   29f76:	f7d7 feef 	bl	1d58 <log_1>
		return -ENOBUFS;
   29f7a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   29f7e:	e00e      	b.n	29f9e <net_tcp_get+0x5a>
	k_delayed_work_init(&context->tcp->ack_timer, handle_ack_timeout);
   29f80:	490c      	ldr	r1, [pc, #48]	; (29fb4 <net_tcp_get+0x70>)
   29f82:	3008      	adds	r0, #8
   29f84:	f002 fbc4 	bl	2c710 <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->fin_timer, handle_fin_timeout);
   29f88:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29f8a:	490b      	ldr	r1, [pc, #44]	; (29fb8 <net_tcp_get+0x74>)
   29f8c:	3028      	adds	r0, #40	; 0x28
   29f8e:	f002 fbbf 	bl	2c710 <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->timewait_timer,
   29f92:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29f94:	4909      	ldr	r1, [pc, #36]	; (29fbc <net_tcp_get+0x78>)
   29f96:	3068      	adds	r0, #104	; 0x68
   29f98:	f002 fbba 	bl	2c710 <k_delayed_work_init>
	return 0;
   29f9c:	2000      	movs	r0, #0
}
   29f9e:	bd10      	pop	{r4, pc}
   29fa0:	2000d7c0 	.word	0x2000d7c0
   29fa4:	0002cff8 	.word	0x0002cff8
   29fa8:	0002d158 	.word	0x0002d158
   29fac:	00034c70 	.word	0x00034c70
   29fb0:	00034df5 	.word	0x00034df5
   29fb4:	00029211 	.word	0x00029211
   29fb8:	000287bd 	.word	0x000287bd
   29fbc:	000291db 	.word	0x000291db

00029fc0 <net_tcp_unref>:
{
   29fc0:	b538      	push	{r3, r4, r5, lr}
	if (!context->tcp)
   29fc2:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   29fc4:	4604      	mov	r4, r0
	if (!context->tcp)
   29fc6:	b90b      	cbnz	r3, 29fcc <net_tcp_unref+0xc>
}
   29fc8:	2000      	movs	r0, #0
   29fca:	bd38      	pop	{r3, r4, r5, pc}
		if (tcp_backlog[i].tcp != context->tcp) {
   29fcc:	4d09      	ldr	r5, [pc, #36]	; (29ff4 <net_tcp_unref+0x34>)
   29fce:	682a      	ldr	r2, [r5, #0]
   29fd0:	4293      	cmp	r3, r2
   29fd2:	d108      	bne.n	29fe6 <net_tcp_unref+0x26>
		k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   29fd4:	f105 000c 	add.w	r0, r5, #12
   29fd8:	f002 fba3 	bl	2c722 <k_delayed_work_cancel>
		(void)memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   29fdc:	2248      	movs	r2, #72	; 0x48
   29fde:	2100      	movs	r1, #0
   29fe0:	4628      	mov	r0, r5
   29fe2:	f7db ff7e 	bl	5ee2 <memset>
	net_tcp_release(context->tcp);
   29fe6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   29fe8:	f7fe ff74 	bl	28ed4 <net_tcp_release>
	context->tcp = NULL;
   29fec:	2300      	movs	r3, #0
   29fee:	6463      	str	r3, [r4, #68]	; 0x44
	return 0;
   29ff0:	e7ea      	b.n	29fc8 <net_tcp_unref+0x8>
   29ff2:	bf00      	nop
   29ff4:	200029a8 	.word	0x200029a8

00029ff8 <net_tcp_connect>:
		    u16_t rport,
		    u16_t lport,
		    s32_t timeout,
		    net_context_connect_cb_t cb,
		    void *user_data)
{
   29ff8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   29ffc:	4698      	mov	r8, r3
	int ret;

	NET_ASSERT(context->tcp);
   29ffe:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   2a000:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2a002:	4604      	mov	r4, r0
   2a004:	460d      	mov	r5, r1
   2a006:	4617      	mov	r7, r2
	NET_ASSERT(context->tcp);
   2a008:	b9a3      	cbnz	r3, 2a034 <net_tcp_connect+0x3c>
   2a00a:	4a29      	ldr	r2, [pc, #164]	; (2a0b0 <net_tcp_connect+0xb8>)
   2a00c:	6812      	ldr	r2, [r2, #0]
   2a00e:	0752      	lsls	r2, r2, #29
   2a010:	d010      	beq.n	2a034 <net_tcp_connect+0x3c>
   2a012:	2101      	movs	r1, #1
   2a014:	f04f 0200 	mov.w	r2, #0
   2a018:	f361 0202 	bfi	r2, r1, #0, #3
   2a01c:	f363 02c5 	bfi	r2, r3, #3, #3
   2a020:	4924      	ldr	r1, [pc, #144]	; (2a0b4 <net_tcp_connect+0xbc>)
   2a022:	4b25      	ldr	r3, [pc, #148]	; (2a0b8 <net_tcp_connect+0xc0>)
   2a024:	4825      	ldr	r0, [pc, #148]	; (2a0bc <net_tcp_connect+0xc4>)
   2a026:	1ac9      	subs	r1, r1, r3
   2a028:	08c9      	lsrs	r1, r1, #3
   2a02a:	f361 128f 	bfi	r2, r1, #6, #10
   2a02e:	4924      	ldr	r1, [pc, #144]	; (2a0c0 <net_tcp_connect+0xc8>)
   2a030:	f7d7 fe92 	bl	1d58 <log_1>
	if (context->flags & NET_CONTEXT_TYPE) {
   2a034:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   2a038:	069b      	lsls	r3, r3, #26
   2a03a:	d402      	bmi.n	2a042 <net_tcp_connect+0x4a>

	if (net_context_get_type(context) != SOCK_STREAM) {
		return -ENOTSUP;
   2a03c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2a040:	e030      	b.n	2a0a4 <net_tcp_connect+0xac>
	}

	/* We need to register a handler, otherwise the SYN-ACK
	 * packet would not be received.
	 */
	ret = net_tcp_register(addr,
   2a042:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   2a046:	e9cd 4202 	strd	r4, r2, [sp, #8]
   2a04a:	4a1e      	ldr	r2, [pc, #120]	; (2a0c4 <net_tcp_connect+0xcc>)
   2a04c:	9201      	str	r2, [sp, #4]
   2a04e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2a052:	ba52      	rev16	r2, r2
   2a054:	b292      	uxth	r2, r2
   2a056:	fa98 f398 	rev16.w	r3, r8
   2a05a:	9200      	str	r2, [sp, #0]
   2a05c:	b29b      	uxth	r3, r3
   2a05e:	463a      	mov	r2, r7
   2a060:	4629      	mov	r1, r5
   2a062:	2006      	movs	r0, #6
   2a064:	f7fe f994 	bl	28390 <net_conn_register>
			       ntohs(rport),
			       ntohs(lport),
			       tcp_synack_received,
			       context,
			       &context->conn_handler);
	if (ret < 0) {
   2a068:	2800      	cmp	r0, #0
   2a06a:	db1b      	blt.n	2a0a4 <net_tcp_connect+0xac>
		return ret;
	}

	context->connect_cb = cb;
   2a06c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2a06e:	63a3      	str	r3, [r4, #56]	; 0x38
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   2a070:	4627      	mov	r7, r4
	context->user_data = user_data;
   2a072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2a074:	6023      	str	r3, [r4, #0]

	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   2a076:	2101      	movs	r1, #1
   2a078:	4620      	mov	r0, r4
   2a07a:	f7fe fc2d 	bl	288d8 <net_context_set_state>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   2a07e:	f857 0f44 	ldr.w	r0, [r7, #68]!
   2a082:	2102      	movs	r1, #2
   2a084:	f7fe fec4 	bl	28e10 <net_tcp_change_state>
	return send_syn_segment(context, NULL, remote, NET_TCP_SYN, "SYN");
   2a088:	2302      	movs	r3, #2
   2a08a:	462a      	mov	r2, r5
   2a08c:	2100      	movs	r1, #0
   2a08e:	4638      	mov	r0, r7
   2a090:	f7ff f872 	bl	29178 <send_syn_segment.isra.26>

	send_syn(context, addr);

	/* in tcp_synack_received() we give back this semaphore */
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   2a094:	b12e      	cbz	r6, 2a0a2 <net_tcp_connect+0xaa>
   2a096:	6c60      	ldr	r0, [r4, #68]	; 0x44
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2a098:	4631      	mov	r1, r6
   2a09a:	30a0      	adds	r0, #160	; 0xa0
   2a09c:	f002 f996 	bl	2c3cc <_impl_k_sem_take>
   2a0a0:	b918      	cbnz	r0, 2a0aa <net_tcp_connect+0xb2>
		return -ETIMEDOUT;
	}

	return 0;
   2a0a2:	2000      	movs	r0, #0
}
   2a0a4:	b004      	add	sp, #16
   2a0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ETIMEDOUT;
   2a0aa:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   2a0ae:	e7f9      	b.n	2a0a4 <net_tcp_connect+0xac>
   2a0b0:	2000d7c0 	.word	0x2000d7c0
   2a0b4:	0002d158 	.word	0x0002d158
   2a0b8:	0002cff8 	.word	0x0002cff8
   2a0bc:	00034e4a 	.word	0x00034e4a
   2a0c0:	00034ca2 	.word	0x00034ca2
   2a0c4:	00029d25 	.word	0x00029d25

0002a0c8 <net_udp_header_fits>:
{
   2a0c8:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2a0ca:	2208      	movs	r2, #8
{
   2a0cc:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2a0ce:	f7f8 f967 	bl	223a0 <net_header_fits>
   2a0d2:	2800      	cmp	r0, #0
}
   2a0d4:	bf14      	ite	ne
   2a0d6:	4620      	movne	r0, r4
   2a0d8:	2000      	moveq	r0, #0
   2a0da:	bd10      	pop	{r4, pc}

0002a0dc <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_pkt *pkt,
			       u16_t offset,
			       u16_t src_port,
			       u16_t dst_port)
{
   2a0dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2a0e0:	f8ad 2006 	strh.w	r2, [sp, #6]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   2a0e4:	f10d 020e 	add.w	r2, sp, #14
{
   2a0e8:	f8ad 3004 	strh.w	r3, [sp, #4]
   2a0ec:	4604      	mov	r4, r0
	frag = net_frag_get_pos(pkt, offset, &pos);
   2a0ee:	f7f7 fd35 	bl	21b5c <net_frag_get_pos>
   2a0f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!frag && pos == 0xffff) {
   2a0f6:	b940      	cbnz	r0, 2a10a <net_udp_insert+0x2e>
   2a0f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2a0fc:	4293      	cmp	r3, r2
   2a0fe:	d106      	bne.n	2a10e <net_udp_insert+0x32>
		NET_DBG("Offset %d out of pkt len %zd",
			offset, net_pkt_get_len(pkt));
		return NULL;
   2a100:	2400      	movs	r4, #0
	return pkt;

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   2a102:	4620      	mov	r0, r4
   2a104:	b004      	add	sp, #16
   2a106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (frag && pos != 0) {
   2a10a:	2b00      	cmp	r3, #0
   2a10c:	d1f8      	bne.n	2a100 <net_udp_insert+0x24>
	if (pkt->frags != frag) {
   2a10e:	6965      	ldr	r5, [r4, #20]
   2a110:	42a8      	cmp	r0, r5
   2a112:	d145      	bne.n	2a1a0 <net_udp_insert+0xc4>
	if (!prev) {
   2a114:	2d00      	cmp	r5, #0
   2a116:	d0f3      	beq.n	2a100 <net_udp_insert+0x24>
	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   2a118:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2a11c:	4620      	mov	r0, r4
   2a11e:	f7f7 f9bd 	bl	2149c <net_pkt_get_frag>
	if (!udp) {
   2a122:	4680      	mov	r8, r0
   2a124:	2800      	cmp	r0, #0
   2a126:	d0eb      	beq.n	2a100 <net_udp_insert+0x24>
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   2a128:	f100 0708 	add.w	r7, r0, #8
   2a12c:	2202      	movs	r2, #2
   2a12e:	f10d 0106 	add.w	r1, sp, #6
   2a132:	4638      	mov	r0, r7
   2a134:	f7f4 f9f0 	bl	1e518 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   2a138:	2202      	movs	r2, #2
   2a13a:	a901      	add	r1, sp, #4
   2a13c:	4638      	mov	r0, r7
   2a13e:	f7f4 f9eb 	bl	1e518 <net_buf_simple_add_mem>
	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   2a142:	6966      	ldr	r6, [r4, #20]
	size_t bytes = 0;
   2a144:	2300      	movs	r3, #0
	while (buf) {
   2a146:	bb7e      	cbnz	r6, 2a1a8 <net_udp_insert+0xcc>
   2a148:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2a14c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   2a150:	f1c1 0108 	rsb	r1, r1, #8
   2a154:	1a89      	subs	r1, r1, r2
   2a156:	4419      	add	r1, r3
   2a158:	b289      	uxth	r1, r1
   2a15a:	4638      	mov	r0, r7
   2a15c:	f7f4 f9fc 	bl	1e558 <net_buf_simple_add_be16>
	net_buf_add_be16(udp, 0); /* chksum */
   2a160:	4631      	mov	r1, r6
   2a162:	4638      	mov	r0, r7
   2a164:	f7f4 f9f8 	bl	1e558 <net_buf_simple_add_be16>
	net_buf_frag_insert(prev, udp);
   2a168:	4641      	mov	r1, r8
   2a16a:	4628      	mov	r0, r5
   2a16c:	f7f4 f9a7 	bl	1e4be <net_buf_frag_insert>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2a170:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2a174:	f101 0308 	add.w	r3, r1, #8
   2a178:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   2a17c:	4419      	add	r1, r3
   2a17e:	f10d 020e 	add.w	r2, sp, #14
   2a182:	b289      	uxth	r1, r1
   2a184:	4620      	mov	r0, r4
   2a186:	f7f7 fce9 	bl	21b5c <net_frag_get_pos>
	if (frag) {
   2a18a:	2800      	cmp	r0, #0
   2a18c:	d0b9      	beq.n	2a102 <net_udp_insert+0x26>
		net_pkt_set_appdata(pkt, frag->data + pos);
   2a18e:	6883      	ldr	r3, [r0, #8]
   2a190:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2a194:	4413      	add	r3, r2
	pkt->appdata = data;
   2a196:	6263      	str	r3, [r4, #36]	; 0x24
   2a198:	e7b3      	b.n	2a102 <net_udp_insert+0x26>
			if (tmp->frags == frag) {
   2a19a:	4298      	cmp	r0, r3
   2a19c:	d0bc      	beq.n	2a118 <net_udp_insert+0x3c>
   2a19e:	461d      	mov	r5, r3
		while (tmp->frags) {
   2a1a0:	682b      	ldr	r3, [r5, #0]
   2a1a2:	2b00      	cmp	r3, #0
   2a1a4:	d1f9      	bne.n	2a19a <net_udp_insert+0xbe>
   2a1a6:	e7ab      	b.n	2a100 <net_udp_insert+0x24>
		bytes += buf->len;
   2a1a8:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   2a1aa:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   2a1ac:	4413      	add	r3, r2
   2a1ae:	e7ca      	b.n	2a146 <net_udp_insert+0x6a>

0002a1b0 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1b4:	b086      	sub	sp, #24
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   2a1b6:	2700      	movs	r7, #0
{
   2a1b8:	4604      	mov	r4, r0
   2a1ba:	460d      	mov	r5, r1
	u16_t chksum = 0;
   2a1bc:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2a1c0:	f7f7 fce8 	bl	21b94 <net_pkt_udp_data>
   2a1c4:	4606      	mov	r6, r0
	if (net_udp_header_fits(pkt, hdr)) {
   2a1c6:	4601      	mov	r1, r0
   2a1c8:	4620      	mov	r0, r4
   2a1ca:	f7ff ff7d 	bl	2a0c8 <net_udp_header_fits>
   2a1ce:	b158      	cbz	r0, 2a1e8 <net_udp_set_chksum+0x38>
		hdr->chksum = 0;
   2a1d0:	71b7      	strb	r7, [r6, #6]
   2a1d2:	71f7      	strb	r7, [r6, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2a1d4:	2111      	movs	r1, #17
   2a1d6:	4620      	mov	r0, r4
   2a1d8:	f7f8 f86a 	bl	222b0 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   2a1dc:	43c0      	mvns	r0, r0
   2a1de:	80f0      	strh	r0, [r6, #6]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   2a1e0:	4628      	mov	r0, r5
   2a1e2:	b006      	add	sp, #24
   2a1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	frag = net_pkt_write(pkt, frag,
   2a1e8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   2a1ec:	1d93      	adds	r3, r2, #6
			     net_pkt_ip_hdr_len(pkt) +
   2a1ee:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
	frag = net_pkt_write(pkt, frag,
   2a1f2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2a1f6:	441a      	add	r2, r3
   2a1f8:	ae05      	add	r6, sp, #20
   2a1fa:	2702      	movs	r7, #2
   2a1fc:	f10d 0316 	add.w	r3, sp, #22
   2a200:	b292      	uxth	r2, r2
   2a202:	4629      	mov	r1, r5
   2a204:	f8cd 8008 	str.w	r8, [sp, #8]
   2a208:	9601      	str	r6, [sp, #4]
   2a20a:	9700      	str	r7, [sp, #0]
   2a20c:	4620      	mov	r0, r4
   2a20e:	f7f7 fbdd 	bl	219cc <net_pkt_write>
   2a212:	2111      	movs	r1, #17
   2a214:	4605      	mov	r5, r0
   2a216:	4620      	mov	r0, r4
   2a218:	f7f8 f84a 	bl	222b0 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2a21c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a220:	9700      	str	r7, [sp, #0]
	chksum = ~net_calc_chksum_udp(pkt);
   2a222:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2a224:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_udp(pkt);
   2a226:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2a22a:	4629      	mov	r1, r5
   2a22c:	e9cd 6801 	strd	r6, r8, [sp, #4]
   2a230:	f10d 0316 	add.w	r3, sp, #22
   2a234:	b292      	uxth	r2, r2
   2a236:	4620      	mov	r0, r4
   2a238:	f7f7 fbc8 	bl	219cc <net_pkt_write>
	NET_ASSERT(frag);
   2a23c:	4605      	mov	r5, r0
   2a23e:	2800      	cmp	r0, #0
   2a240:	d1ce      	bne.n	2a1e0 <net_udp_set_chksum+0x30>
   2a242:	4b0b      	ldr	r3, [pc, #44]	; (2a270 <net_udp_set_chksum+0xc0>)
   2a244:	681b      	ldr	r3, [r3, #0]
   2a246:	075b      	lsls	r3, r3, #29
   2a248:	d0ca      	beq.n	2a1e0 <net_udp_set_chksum+0x30>
   2a24a:	2301      	movs	r3, #1
   2a24c:	f04f 0200 	mov.w	r2, #0
   2a250:	f363 0202 	bfi	r2, r3, #0, #3
   2a254:	4907      	ldr	r1, [pc, #28]	; (2a274 <net_udp_set_chksum+0xc4>)
   2a256:	4b08      	ldr	r3, [pc, #32]	; (2a278 <net_udp_set_chksum+0xc8>)
   2a258:	1a5b      	subs	r3, r3, r1
   2a25a:	f360 02c5 	bfi	r2, r0, #3, #3
   2a25e:	08db      	lsrs	r3, r3, #3
   2a260:	f363 128f 	bfi	r2, r3, #6, #10
   2a264:	4905      	ldr	r1, [pc, #20]	; (2a27c <net_udp_set_chksum+0xcc>)
   2a266:	4806      	ldr	r0, [pc, #24]	; (2a280 <net_udp_set_chksum+0xd0>)
   2a268:	f7d7 fd76 	bl	1d58 <log_1>
   2a26c:	e7b8      	b.n	2a1e0 <net_udp_set_chksum+0x30>
   2a26e:	bf00      	nop
   2a270:	2000d7c4 	.word	0x2000d7c4
   2a274:	0002cff8 	.word	0x0002cff8
   2a278:	0002d160 	.word	0x0002d160
   2a27c:	00034fb4 	.word	0x00034fb4
   2a280:	00034e98 	.word	0x00034e98

0002a284 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2a284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a286:	4604      	mov	r4, r0
   2a288:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2a28a:	f7f7 fc83 	bl	21b94 <net_pkt_udp_data>
   2a28e:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   2a290:	4601      	mov	r1, r0
   2a292:	4620      	mov	r0, r4
   2a294:	f7ff ff18 	bl	2a0c8 <net_udp_header_fits>
   2a298:	b110      	cbz	r0, 2a2a0 <net_udp_get_chksum+0x1c>
		return hdr->chksum;
   2a29a:	88e8      	ldrh	r0, [r5, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   2a29c:	b004      	add	sp, #16
   2a29e:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(frag,
   2a2a0:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2a2a4:	1d8b      	adds	r3, r1, #6
			     net_pkt_ip_hdr_len(pkt) +
   2a2a6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
	frag = net_frag_read(frag,
   2a2aa:	4419      	add	r1, r3
   2a2ac:	ab03      	add	r3, sp, #12
   2a2ae:	9300      	str	r3, [sp, #0]
   2a2b0:	f10d 020e 	add.w	r2, sp, #14
   2a2b4:	2302      	movs	r3, #2
   2a2b6:	b289      	uxth	r1, r1
   2a2b8:	4630      	mov	r0, r6
   2a2ba:	f7f7 fb11 	bl	218e0 <net_frag_read>
	NET_ASSERT(frag);
   2a2be:	b9a0      	cbnz	r0, 2a2ea <net_udp_get_chksum+0x66>
   2a2c0:	4b0b      	ldr	r3, [pc, #44]	; (2a2f0 <net_udp_get_chksum+0x6c>)
   2a2c2:	681b      	ldr	r3, [r3, #0]
   2a2c4:	075b      	lsls	r3, r3, #29
   2a2c6:	d010      	beq.n	2a2ea <net_udp_get_chksum+0x66>
   2a2c8:	2301      	movs	r3, #1
   2a2ca:	f04f 0200 	mov.w	r2, #0
   2a2ce:	f363 0202 	bfi	r2, r3, #0, #3
   2a2d2:	4908      	ldr	r1, [pc, #32]	; (2a2f4 <net_udp_get_chksum+0x70>)
   2a2d4:	4b08      	ldr	r3, [pc, #32]	; (2a2f8 <net_udp_get_chksum+0x74>)
   2a2d6:	1a5b      	subs	r3, r3, r1
   2a2d8:	f360 02c5 	bfi	r2, r0, #3, #3
   2a2dc:	08db      	lsrs	r3, r3, #3
   2a2de:	f363 128f 	bfi	r2, r3, #6, #10
   2a2e2:	4906      	ldr	r1, [pc, #24]	; (2a2fc <net_udp_get_chksum+0x78>)
   2a2e4:	4806      	ldr	r0, [pc, #24]	; (2a300 <net_udp_get_chksum+0x7c>)
   2a2e6:	f7d7 fd37 	bl	1d58 <log_1>
	return chksum;
   2a2ea:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   2a2ee:	e7d5      	b.n	2a29c <net_udp_get_chksum+0x18>
   2a2f0:	2000d7c4 	.word	0x2000d7c4
   2a2f4:	0002cff8 	.word	0x0002cff8
   2a2f8:	0002d160 	.word	0x0002d160
   2a2fc:	00034fc7 	.word	0x00034fc7
   2a300:	00034e98 	.word	0x00034e98

0002a304 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2a304:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a306:	b085      	sub	sp, #20
   2a308:	4606      	mov	r6, r0
   2a30a:	460d      	mov	r5, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   2a30c:	f7f7 fc42 	bl	21b94 <net_pkt_udp_data>
	if (net_udp_header_fits(pkt, udp_hdr)) {
   2a310:	4601      	mov	r1, r0
	udp_hdr = net_pkt_udp_data(pkt);
   2a312:	4607      	mov	r7, r0
	if (net_udp_header_fits(pkt, udp_hdr)) {
   2a314:	4630      	mov	r0, r6
   2a316:	f7ff fed7 	bl	2a0c8 <net_udp_header_fits>
   2a31a:	4604      	mov	r4, r0
   2a31c:	2800      	cmp	r0, #0
   2a31e:	d140      	bne.n	2a3a2 <net_udp_get_hdr+0x9e>
		return udp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2a320:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
   2a324:	f896 1041 	ldrb.w	r1, [r6, #65]	; 0x41
   2a328:	9500      	str	r5, [sp, #0]
   2a32a:	4419      	add	r1, r3
   2a32c:	f10d 020e 	add.w	r2, sp, #14
   2a330:	2302      	movs	r3, #2
   2a332:	b289      	uxth	r1, r1
   2a334:	6970      	ldr	r0, [r6, #20]
   2a336:	f7f7 fad3 	bl	218e0 <net_frag_read>
			     net_pkt_ipv6_ext_len(pkt),
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   2a33a:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2a33c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a340:	9300      	str	r3, [sp, #0]
   2a342:	f10d 020e 	add.w	r2, sp, #14
   2a346:	2302      	movs	r3, #2
   2a348:	f7f7 faca 	bl	218e0 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len);
   2a34c:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2a34e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a352:	9300      	str	r3, [sp, #0]
   2a354:	f10d 020e 	add.w	r2, sp, #14
   2a358:	2302      	movs	r3, #2
   2a35a:	f7f7 fac1 	bl	218e0 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   2a35e:	1dab      	adds	r3, r5, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   2a360:	9300      	str	r3, [sp, #0]
   2a362:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a366:	2302      	movs	r3, #2
   2a368:	f10d 020e 	add.w	r2, sp, #14
   2a36c:	f7f7 fab8 	bl	218e0 <net_frag_read>
	if (!frag) {
   2a370:	b9c8      	cbnz	r0, 2a3a6 <net_udp_get_hdr+0xa2>
		NET_ASSERT(frag);
   2a372:	4b0e      	ldr	r3, [pc, #56]	; (2a3ac <net_udp_get_hdr+0xa8>)
   2a374:	681b      	ldr	r3, [r3, #0]
   2a376:	075b      	lsls	r3, r3, #29
   2a378:	d010      	beq.n	2a39c <net_udp_get_hdr+0x98>
   2a37a:	2301      	movs	r3, #1
   2a37c:	f04f 0200 	mov.w	r2, #0
   2a380:	f363 0202 	bfi	r2, r3, #0, #3
   2a384:	490a      	ldr	r1, [pc, #40]	; (2a3b0 <net_udp_get_hdr+0xac>)
   2a386:	4b0b      	ldr	r3, [pc, #44]	; (2a3b4 <net_udp_get_hdr+0xb0>)
   2a388:	480b      	ldr	r0, [pc, #44]	; (2a3b8 <net_udp_get_hdr+0xb4>)
   2a38a:	1a5b      	subs	r3, r3, r1
   2a38c:	f364 02c5 	bfi	r2, r4, #3, #3
   2a390:	08db      	lsrs	r3, r3, #3
   2a392:	f363 128f 	bfi	r2, r3, #6, #10
   2a396:	4909      	ldr	r1, [pc, #36]	; (2a3bc <net_udp_get_hdr+0xb8>)
   2a398:	f7d7 fcde 	bl	1d58 <log_1>
		return NULL;
	}

	return hdr;
}
   2a39c:	4620      	mov	r0, r4
   2a39e:	b005      	add	sp, #20
   2a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return udp_hdr;
   2a3a2:	463c      	mov	r4, r7
   2a3a4:	e7fa      	b.n	2a39c <net_udp_get_hdr+0x98>
	return hdr;
   2a3a6:	462c      	mov	r4, r5
   2a3a8:	e7f8      	b.n	2a39c <net_udp_get_hdr+0x98>
   2a3aa:	bf00      	nop
   2a3ac:	2000d7c4 	.word	0x2000d7c4
   2a3b0:	0002cff8 	.word	0x0002cff8
   2a3b4:	0002d160 	.word	0x0002d160
   2a3b8:	00034e98 	.word	0x00034e98
   2a3bc:	00034fda 	.word	0x00034fda

0002a3c0 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a3c4:	b086      	sub	sp, #24
   2a3c6:	4604      	mov	r4, r0
   2a3c8:	460d      	mov	r5, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   2a3ca:	f7ff fe7d 	bl	2a0c8 <net_udp_header_fits>
   2a3ce:	4606      	mov	r6, r0
   2a3d0:	b120      	cbz	r0, 2a3dc <net_udp_set_hdr+0x1c>
		return hdr;
   2a3d2:	462e      	mov	r6, r5
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2a3d4:	4630      	mov	r0, r6
   2a3d6:	b006      	add	sp, #24
   2a3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2a3dc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   2a3e0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
   2a3e4:	6961      	ldr	r1, [r4, #20]
   2a3e6:	2702      	movs	r7, #2
   2a3e8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2a3ec:	441a      	add	r2, r3
   2a3ee:	b292      	uxth	r2, r2
   2a3f0:	f10d 0316 	add.w	r3, sp, #22
   2a3f4:	e9cd 5801 	strd	r5, r8, [sp, #4]
   2a3f8:	9700      	str	r7, [sp, #0]
   2a3fa:	4620      	mov	r0, r4
   2a3fc:	f7f7 fae6 	bl	219cc <net_pkt_write>
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   2a400:	19eb      	adds	r3, r5, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2a402:	4601      	mov	r1, r0
   2a404:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a408:	f8cd 8008 	str.w	r8, [sp, #8]
   2a40c:	e9cd 7300 	strd	r7, r3, [sp]
   2a410:	4620      	mov	r0, r4
   2a412:	f10d 0316 	add.w	r3, sp, #22
   2a416:	f7f7 fad9 	bl	219cc <net_pkt_write>
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   2a41a:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   2a41c:	4601      	mov	r1, r0
   2a41e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a422:	f8cd 8008 	str.w	r8, [sp, #8]
   2a426:	e9cd 7300 	strd	r7, r3, [sp]
   2a42a:	4620      	mov	r0, r4
   2a42c:	f10d 0316 	add.w	r3, sp, #22
   2a430:	f7f7 facc 	bl	219cc <net_pkt_write>
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   2a434:	1dab      	adds	r3, r5, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2a436:	e9cd 7300 	strd	r7, r3, [sp]
   2a43a:	4601      	mov	r1, r0
   2a43c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2a440:	f8cd 8008 	str.w	r8, [sp, #8]
   2a444:	f10d 0316 	add.w	r3, sp, #22
   2a448:	4620      	mov	r0, r4
   2a44a:	f7f7 fabf 	bl	219cc <net_pkt_write>
	if (!frag) {
   2a44e:	2800      	cmp	r0, #0
   2a450:	d1bf      	bne.n	2a3d2 <net_udp_set_hdr+0x12>
		NET_ASSERT(frag);
   2a452:	4b0b      	ldr	r3, [pc, #44]	; (2a480 <net_udp_set_hdr+0xc0>)
   2a454:	681b      	ldr	r3, [r3, #0]
   2a456:	075b      	lsls	r3, r3, #29
   2a458:	d0bc      	beq.n	2a3d4 <net_udp_set_hdr+0x14>
   2a45a:	2301      	movs	r3, #1
   2a45c:	f04f 0200 	mov.w	r2, #0
   2a460:	f363 0202 	bfi	r2, r3, #0, #3
   2a464:	4907      	ldr	r1, [pc, #28]	; (2a484 <net_udp_set_hdr+0xc4>)
   2a466:	4b08      	ldr	r3, [pc, #32]	; (2a488 <net_udp_set_hdr+0xc8>)
   2a468:	4808      	ldr	r0, [pc, #32]	; (2a48c <net_udp_set_hdr+0xcc>)
   2a46a:	1a5b      	subs	r3, r3, r1
   2a46c:	f366 02c5 	bfi	r2, r6, #3, #3
   2a470:	08db      	lsrs	r3, r3, #3
   2a472:	f363 128f 	bfi	r2, r3, #6, #10
   2a476:	4906      	ldr	r1, [pc, #24]	; (2a490 <net_udp_set_hdr+0xd0>)
   2a478:	f7d7 fc6e 	bl	1d58 <log_1>
   2a47c:	e7aa      	b.n	2a3d4 <net_udp_set_hdr+0x14>
   2a47e:	bf00      	nop
   2a480:	2000d7c4 	.word	0x2000d7c4
   2a484:	0002cff8 	.word	0x0002cff8
   2a488:	0002d160 	.word	0x0002d160
   2a48c:	00034e98 	.word	0x00034e98
   2a490:	00034fea 	.word	0x00034fea

0002a494 <net_config_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_config_init(const char *app_info, u32_t flags, s32_t timeout)
{
   2a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a498:	460c      	mov	r4, r1
   2a49a:	4615      	mov	r5, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   2a49c:	f7f5 fc42 	bl	1fd24 <net_if_get_default>

	if (app_info) {
		NET_INFO("%s", log_strdup(app_info));
	}

	if (!iface) {
   2a4a0:	b9b8      	cbnz	r0, 2a4d2 <net_config_init+0x3e>
		NET_ERR("No network interfaces");
   2a4a2:	4b2f      	ldr	r3, [pc, #188]	; (2a560 <net_config_init+0xcc>)
   2a4a4:	681b      	ldr	r3, [r3, #0]
   2a4a6:	075c      	lsls	r4, r3, #29
   2a4a8:	d010      	beq.n	2a4cc <net_config_init+0x38>
   2a4aa:	2301      	movs	r3, #1
   2a4ac:	f04f 0200 	mov.w	r2, #0
   2a4b0:	f363 0202 	bfi	r2, r3, #0, #3
   2a4b4:	492b      	ldr	r1, [pc, #172]	; (2a564 <net_config_init+0xd0>)
   2a4b6:	4b2c      	ldr	r3, [pc, #176]	; (2a568 <net_config_init+0xd4>)
   2a4b8:	1a5b      	subs	r3, r3, r1
   2a4ba:	f360 02c5 	bfi	r2, r0, #3, #3
   2a4be:	08db      	lsrs	r3, r3, #3
   2a4c0:	f363 128f 	bfi	r2, r3, #6, #10
   2a4c4:	4929      	ldr	r1, [pc, #164]	; (2a56c <net_config_init+0xd8>)
   2a4c6:	482a      	ldr	r0, [pc, #168]	; (2a570 <net_config_init+0xdc>)
   2a4c8:	f7d7 fc46 	bl	1d58 <log_1>
		return -ENODEV;
   2a4cc:	f06f 0012 	mvn.w	r0, #18
   2a4d0:	e00d      	b.n	2a4ee <net_config_init+0x5a>

	if (flags & NET_CONFIG_NEED_IPV6) {
		count++;
	}

	if (flags & NET_CONFIG_NEED_IPV4) {
   2a4d2:	0760      	lsls	r0, r4, #29
	if (flags & NET_CONFIG_NEED_IPV6) {
   2a4d4:	f3c4 0140 	ubfx	r1, r4, #1, #1
		count++;
   2a4d8:	bf48      	it	mi
   2a4da:	3101      	addmi	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   2a4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a4e0:	4824      	ldr	r0, [pc, #144]	; (2a574 <net_config_init+0xe0>)
   2a4e2:	f001 ff43 	bl	2c36c <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   2a4e6:	2d00      	cmp	r5, #0
   2a4e8:	db35      	blt.n	2a556 <net_config_init+0xc2>
		count = -1;
	} else if (timeout == 0) {
   2a4ea:	d102      	bne.n	2a4f2 <net_config_init+0x5e>
	if (!count && timeout) {
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   2a4ec:	2000      	movs	r0, #0
}
   2a4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		count = timeout / 1000 + 1;
   2a4f2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2a4f6:	fb95 f4f4 	sdiv	r4, r5, r4
   2a4fa:	3401      	adds	r4, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2a4fc:	4f1e      	ldr	r7, [pc, #120]	; (2a578 <net_config_init+0xe4>)
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   2a4fe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2a574 <net_config_init+0xe0>
   2a502:	3c01      	subs	r4, #1
	int loop = timeout / LOOP_DIVIDER;
   2a504:	260a      	movs	r6, #10
   2a506:	fb95 f6f6 	sdiv	r6, r5, r6
	while (count--) {
   2a50a:	1c62      	adds	r2, r4, #1
   2a50c:	d0ee      	beq.n	2a4ec <net_config_init+0x58>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2a50e:	4631      	mov	r1, r6
   2a510:	4638      	mov	r0, r7
   2a512:	f001 ff5b 	bl	2c3cc <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   2a516:	b308      	cbz	r0, 2a55c <net_config_init+0xc8>
			if (!k_sem_count_get(&counter)) {
   2a518:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2a51c:	b9f3      	cbnz	r3, 2a55c <net_config_init+0xc8>
	if (!count && timeout) {
   2a51e:	2c00      	cmp	r4, #0
   2a520:	d1e4      	bne.n	2a4ec <net_config_init+0x58>
   2a522:	2d00      	cmp	r5, #0
   2a524:	d0e2      	beq.n	2a4ec <net_config_init+0x58>
		NET_ERR("Timeout while waiting setup");
   2a526:	4b0e      	ldr	r3, [pc, #56]	; (2a560 <net_config_init+0xcc>)
   2a528:	681b      	ldr	r3, [r3, #0]
   2a52a:	075b      	lsls	r3, r3, #29
   2a52c:	d010      	beq.n	2a550 <net_config_init+0xbc>
   2a52e:	2301      	movs	r3, #1
   2a530:	f04f 0200 	mov.w	r2, #0
   2a534:	f363 0202 	bfi	r2, r3, #0, #3
   2a538:	490a      	ldr	r1, [pc, #40]	; (2a564 <net_config_init+0xd0>)
   2a53a:	4b0b      	ldr	r3, [pc, #44]	; (2a568 <net_config_init+0xd4>)
   2a53c:	480f      	ldr	r0, [pc, #60]	; (2a57c <net_config_init+0xe8>)
   2a53e:	1a5b      	subs	r3, r3, r1
   2a540:	f364 02c5 	bfi	r2, r4, #3, #3
   2a544:	08db      	lsrs	r3, r3, #3
   2a546:	f363 128f 	bfi	r2, r3, #6, #10
   2a54a:	4908      	ldr	r1, [pc, #32]	; (2a56c <net_config_init+0xd8>)
   2a54c:	f7d7 fc04 	bl	1d58 <log_1>
		return -ETIMEDOUT;
   2a550:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   2a554:	e7cb      	b.n	2a4ee <net_config_init+0x5a>
		count = -1;
   2a556:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a55a:	e7cf      	b.n	2a4fc <net_config_init+0x68>
   2a55c:	3c01      	subs	r4, #1
   2a55e:	e7d4      	b.n	2a50a <net_config_init+0x76>
   2a560:	2000d77c 	.word	0x2000d77c
   2a564:	0002cff8 	.word	0x0002cff8
   2a568:	0002d0d0 	.word	0x0002d0d0
   2a56c:	0003501d 	.word	0x0003501d
   2a570:	000350a0 	.word	0x000350a0
   2a574:	20002db0 	.word	0x20002db0
   2a578:	2000d8bc 	.word	0x2000d8bc
   2a57c:	000350ba 	.word	0x000350ba

0002a580 <init_net_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_net_app(struct device *device)
{
   2a580:	b510      	push	{r4, lr}
	ret = _net_config_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_config_bt_setup();
   2a582:	f000 f845 	bl	2a610 <_net_config_bt_setup>
	if (ret < 0) {
   2a586:	1e02      	subs	r2, r0, #0
   2a588:	da14      	bge.n	2a5b4 <init_net_app+0x34>
		NET_ERR("Cannot setup Bluetooth interface (%d)", ret);
   2a58a:	4b1a      	ldr	r3, [pc, #104]	; (2a5f4 <init_net_app+0x74>)
   2a58c:	681b      	ldr	r3, [r3, #0]
   2a58e:	0759      	lsls	r1, r3, #29
   2a590:	d010      	beq.n	2a5b4 <init_net_app+0x34>
   2a592:	2101      	movs	r1, #1
   2a594:	f04f 0300 	mov.w	r3, #0
   2a598:	f361 0302 	bfi	r3, r1, #0, #3
   2a59c:	4816      	ldr	r0, [pc, #88]	; (2a5f8 <init_net_app+0x78>)
   2a59e:	4917      	ldr	r1, [pc, #92]	; (2a5fc <init_net_app+0x7c>)
   2a5a0:	1a09      	subs	r1, r1, r0
   2a5a2:	08c9      	lsrs	r1, r1, #3
   2a5a4:	f36f 03c5 	bfc	r3, #3, #3
   2a5a8:	f361 138f 	bfi	r3, r1, #6, #10
   2a5ac:	4814      	ldr	r0, [pc, #80]	; (2a600 <init_net_app+0x80>)
   2a5ae:	4915      	ldr	r1, [pc, #84]	; (2a604 <init_net_app+0x84>)
   2a5b0:	f7d7 fbe6 	bl	1d80 <log_2>
	if (IS_ENABLED(CONFIG_NET_CONFIG_NEED_IPV4)) {
		flags |= NET_CONFIG_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init("Initializing network", flags,
   2a5b4:	f247 5230 	movw	r2, #30000	; 0x7530
   2a5b8:	2100      	movs	r1, #0
   2a5ba:	4813      	ldr	r0, [pc, #76]	; (2a608 <init_net_app+0x88>)
   2a5bc:	f7ff ff6a 	bl	2a494 <net_config_init>
			      K_SECONDS(CONFIG_NET_CONFIG_INIT_TIMEOUT));
	if (ret < 0) {
   2a5c0:	1e04      	subs	r4, r0, #0
   2a5c2:	da15      	bge.n	2a5f0 <init_net_app+0x70>
		NET_ERR("Network initialization failed (%d)", ret);
   2a5c4:	4b0b      	ldr	r3, [pc, #44]	; (2a5f4 <init_net_app+0x74>)
   2a5c6:	681b      	ldr	r3, [r3, #0]
   2a5c8:	075b      	lsls	r3, r3, #29
   2a5ca:	d011      	beq.n	2a5f0 <init_net_app+0x70>
   2a5cc:	2201      	movs	r2, #1
   2a5ce:	f04f 0300 	mov.w	r3, #0
   2a5d2:	f362 0302 	bfi	r3, r2, #0, #3
   2a5d6:	4908      	ldr	r1, [pc, #32]	; (2a5f8 <init_net_app+0x78>)
   2a5d8:	4a08      	ldr	r2, [pc, #32]	; (2a5fc <init_net_app+0x7c>)
   2a5da:	480c      	ldr	r0, [pc, #48]	; (2a60c <init_net_app+0x8c>)
   2a5dc:	1a52      	subs	r2, r2, r1
   2a5de:	08d2      	lsrs	r2, r2, #3
   2a5e0:	f36f 03c5 	bfc	r3, #3, #3
   2a5e4:	f362 138f 	bfi	r3, r2, #6, #10
   2a5e8:	4906      	ldr	r1, [pc, #24]	; (2a604 <init_net_app+0x84>)
   2a5ea:	4622      	mov	r2, r4
   2a5ec:	f7d7 fbc8 	bl	1d80 <log_2>
	}

	return ret;
}
   2a5f0:	4620      	mov	r0, r4
   2a5f2:	bd10      	pop	{r4, pc}
   2a5f4:	2000d77c 	.word	0x2000d77c
   2a5f8:	0002cff8 	.word	0x0002cff8
   2a5fc:	0002d0d0 	.word	0x0002d0d0
   2a600:	0003503a 	.word	0x0003503a
   2a604:	0003502d 	.word	0x0003502d
   2a608:	00035064 	.word	0x00035064
   2a60c:	00035079 	.word	0x00035079

0002a610 <_net_config_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_config_bt_setup(void)
{
   2a610:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   2a612:	2000      	movs	r0, #0
   2a614:	f7de ff62 	bl	94dc <bt_enable>
	if (err < 0 && err != -EALREADY) {
   2a618:	2800      	cmp	r0, #0
   2a61a:	da02      	bge.n	2a622 <_net_config_bt_setup+0x12>
   2a61c:	f110 0f45 	cmn.w	r0, #69	; 0x45
   2a620:	d109      	bne.n	2a636 <_net_config_bt_setup+0x26>
		return err;
	}

	dev = device_get_binding("net_bt");
   2a622:	480d      	ldr	r0, [pc, #52]	; (2a658 <_net_config_bt_setup+0x48>)
   2a624:	f001 f84e 	bl	2b6c4 <device_get_binding>
	if (!dev) {
   2a628:	b190      	cbz	r0, 2a650 <_net_config_bt_setup+0x40>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   2a62a:	f7f5 fb69 	bl	1fd00 <net_if_lookup_by_dev>
	if (!iface) {
   2a62e:	4604      	mov	r4, r0
   2a630:	b910      	cbnz	r0, 2a638 <_net_config_bt_setup+0x28>
		return -EINVAL;
   2a632:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}
#endif

	return 0;
}
   2a636:	bd10      	pop	{r4, pc}
	bt_gatt_service_register(&ipss_svc);
   2a638:	4808      	ldr	r0, [pc, #32]	; (2a65c <_net_config_bt_setup+0x4c>)
   2a63a:	f7e3 f997 	bl	d96c <bt_gatt_service_register>
	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   2a63e:	2303      	movs	r3, #3
   2a640:	4a07      	ldr	r2, [pc, #28]	; (2a660 <_net_config_bt_setup+0x50>)
   2a642:	4808      	ldr	r0, [pc, #32]	; (2a664 <_net_config_bt_setup+0x54>)
   2a644:	4621      	mov	r1, r4
   2a646:	f7f4 f999 	bl	1e97c <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   2a64a:	2800      	cmp	r0, #0
   2a64c:	d0f3      	beq.n	2a636 <_net_config_bt_setup+0x26>
   2a64e:	e7f0      	b.n	2a632 <_net_config_bt_setup+0x22>
		return -ENODEV;
   2a650:	f06f 0012 	mvn.w	r0, #18
   2a654:	e7ef      	b.n	2a636 <_net_config_bt_setup+0x26>
   2a656:	bf00      	nop
   2a658:	00031e60 	.word	0x00031e60
   2a65c:	2000d584 	.word	0x2000d584
   2a660:	0002fc6f 	.word	0x0002fc6f
   2a664:	61550001 	.word	0x61550001

0002a668 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	u8_t channel_id = channel_cfg->channel_id;
   2a668:	7908      	ldrb	r0, [r1, #4]
{
   2a66a:	b570      	push	{r4, r5, r6, lr}
	u8_t channel_id = channel_cfg->channel_id;
   2a66c:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= NRF_SAADC_CHANNEL_COUNT) {
   2a670:	2c07      	cmp	r4, #7
   2a672:	d842      	bhi.n	2a6fa <adc_nrfx_channel_setup+0x92>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   2a674:	780b      	ldrb	r3, [r1, #0]
   2a676:	2b09      	cmp	r3, #9
   2a678:	d82a      	bhi.n	2a6d0 <adc_nrfx_channel_setup+0x68>
   2a67a:	e8df f003 	tbb	[pc, r3]
   2a67e:	4341      	.short	0x4341
   2a680:	29211f05 	.word	0x29211f05
   2a684:	27292523 	.word	0x27292523
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
		break;
	case ADC_GAIN_1_4:
		config.gain = NRF_SAADC_GAIN1_4;
   2a688:	2302      	movs	r3, #2
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   2a68a:	784a      	ldrb	r2, [r1, #1]
   2a68c:	2a03      	cmp	r2, #3
   2a68e:	d068      	beq.n	2a762 <adc_nrfx_channel_setup+0xfa>
   2a690:	2a04      	cmp	r2, #4
   2a692:	d039      	beq.n	2a708 <adc_nrfx_channel_setup+0xa0>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
   2a694:	4b49      	ldr	r3, [pc, #292]	; (2a7bc <adc_nrfx_channel_setup+0x154>)
   2a696:	681b      	ldr	r3, [r3, #0]
   2a698:	075a      	lsls	r2, r3, #29
   2a69a:	d02e      	beq.n	2a6fa <adc_nrfx_channel_setup+0x92>
   2a69c:	2301      	movs	r3, #1
   2a69e:	f04f 0200 	mov.w	r2, #0
   2a6a2:	f363 0202 	bfi	r2, r3, #0, #3
   2a6a6:	4946      	ldr	r1, [pc, #280]	; (2a7c0 <adc_nrfx_channel_setup+0x158>)
   2a6a8:	4b46      	ldr	r3, [pc, #280]	; (2a7c4 <adc_nrfx_channel_setup+0x15c>)
   2a6aa:	4847      	ldr	r0, [pc, #284]	; (2a7c8 <adc_nrfx_channel_setup+0x160>)
   2a6ac:	1a5b      	subs	r3, r3, r1
   2a6ae:	f36f 02c5 	bfc	r2, #3, #3
   2a6b2:	08db      	lsrs	r3, r3, #3
   2a6b4:	f363 128f 	bfi	r2, r3, #6, #10
   2a6b8:	4944      	ldr	r1, [pc, #272]	; (2a7cc <adc_nrfx_channel_setup+0x164>)
   2a6ba:	e01c      	b.n	2a6f6 <adc_nrfx_channel_setup+0x8e>
		config.gain = NRF_SAADC_GAIN1_3;
   2a6bc:	2303      	movs	r3, #3
		break;
   2a6be:	e7e4      	b.n	2a68a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_2;
   2a6c0:	2304      	movs	r3, #4
		break;
   2a6c2:	e7e2      	b.n	2a68a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1;
   2a6c4:	2305      	movs	r3, #5
		break;
   2a6c6:	e7e0      	b.n	2a68a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN2;
   2a6c8:	2306      	movs	r3, #6
		break;
   2a6ca:	e7de      	b.n	2a68a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   2a6cc:	2307      	movs	r3, #7
		break;
   2a6ce:	e7dc      	b.n	2a68a <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
   2a6d0:	4b3a      	ldr	r3, [pc, #232]	; (2a7bc <adc_nrfx_channel_setup+0x154>)
   2a6d2:	681b      	ldr	r3, [r3, #0]
   2a6d4:	0759      	lsls	r1, r3, #29
   2a6d6:	d010      	beq.n	2a6fa <adc_nrfx_channel_setup+0x92>
   2a6d8:	2301      	movs	r3, #1
   2a6da:	f04f 0200 	mov.w	r2, #0
   2a6de:	f363 0202 	bfi	r2, r3, #0, #3
   2a6e2:	4937      	ldr	r1, [pc, #220]	; (2a7c0 <adc_nrfx_channel_setup+0x158>)
   2a6e4:	4b37      	ldr	r3, [pc, #220]	; (2a7c4 <adc_nrfx_channel_setup+0x15c>)
   2a6e6:	483a      	ldr	r0, [pc, #232]	; (2a7d0 <adc_nrfx_channel_setup+0x168>)
   2a6e8:	1a5b      	subs	r3, r3, r1
   2a6ea:	f36f 02c5 	bfc	r2, #3, #3
   2a6ee:	08db      	lsrs	r3, r3, #3
   2a6f0:	4936      	ldr	r1, [pc, #216]	; (2a7cc <adc_nrfx_channel_setup+0x164>)
   2a6f2:	f363 128f 	bfi	r2, r3, #6, #10
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
   2a6f6:	f7d7 fb2f 	bl	1d58 <log_1>
		return -EINVAL;
   2a6fa:	f06f 0015 	mvn.w	r0, #21
   2a6fe:	e02f      	b.n	2a760 <adc_nrfx_channel_setup+0xf8>
	nrf_saadc_channel_config_t config = {
   2a700:	2300      	movs	r3, #0
   2a702:	e7c2      	b.n	2a68a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_5;
   2a704:	2301      	movs	r3, #1
   2a706:	e7c0      	b.n	2a68a <adc_nrfx_channel_setup+0x22>
	nrf_saadc_channel_config_t config = {
   2a708:	2600      	movs	r6, #0
	switch (channel_cfg->acquisition_time) {
   2a70a:	884a      	ldrh	r2, [r1, #2]
   2a70c:	f244 050a 	movw	r5, #16394	; 0x400a
   2a710:	42aa      	cmp	r2, r5
   2a712:	d009      	beq.n	2a728 <adc_nrfx_channel_setup+0xc0>
   2a714:	d827      	bhi.n	2a766 <adc_nrfx_channel_setup+0xfe>
   2a716:	f244 0503 	movw	r5, #16387	; 0x4003
   2a71a:	42aa      	cmp	r2, r5
   2a71c:	d049      	beq.n	2a7b2 <adc_nrfx_channel_setup+0x14a>
   2a71e:	f244 0505 	movw	r5, #16389	; 0x4005
   2a722:	42aa      	cmp	r2, r5
   2a724:	d047      	beq.n	2a7b6 <adc_nrfx_channel_setup+0x14e>
   2a726:	bb82      	cbnz	r2, 2a78a <adc_nrfx_channel_setup+0x122>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   2a728:	2202      	movs	r2, #2
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2a72a:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   2a72e:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2a730:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   2a734:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2a738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    NRF_SAADC->CH[channel].CONFIG =
   2a73c:	0122      	lsls	r2, r4, #4
   2a73e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2a742:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */
	config.pin_p = NRF_SAADC_INPUT_DISABLED;
	config.pin_n = channel_cfg->input_negative;
   2a746:	798d      	ldrb	r5, [r1, #6]
   2a748:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   2a74c:	4b21      	ldr	r3, [pc, #132]	; (2a7d4 <adc_nrfx_channel_setup+0x16c>)
    NRF_SAADC->CH[channel].PSELN = pseln;
   2a74e:	f8c2 5514 	str.w	r5, [r2, #1300]	; 0x514
    NRF_SAADC->CH[channel].PSELP = pselp;
   2a752:	2000      	movs	r0, #0
   2a754:	441c      	add	r4, r3
   2a756:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   2a75a:	794b      	ldrb	r3, [r1, #5]
   2a75c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

	return 0;
}
   2a760:	bd70      	pop	{r4, r5, r6, pc}
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   2a762:	2601      	movs	r6, #1
   2a764:	e7d1      	b.n	2a70a <adc_nrfx_channel_setup+0xa2>
	switch (channel_cfg->acquisition_time) {
   2a766:	f244 0514 	movw	r5, #16404	; 0x4014
   2a76a:	42aa      	cmp	r2, r5
   2a76c:	d009      	beq.n	2a782 <adc_nrfx_channel_setup+0x11a>
   2a76e:	f244 0528 	movw	r5, #16424	; 0x4028
   2a772:	42aa      	cmp	r2, r5
   2a774:	d007      	beq.n	2a786 <adc_nrfx_channel_setup+0x11e>
   2a776:	f244 050f 	movw	r5, #16399	; 0x400f
   2a77a:	42aa      	cmp	r2, r5
   2a77c:	d105      	bne.n	2a78a <adc_nrfx_channel_setup+0x122>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   2a77e:	2203      	movs	r2, #3
		break;
   2a780:	e7d3      	b.n	2a72a <adc_nrfx_channel_setup+0xc2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   2a782:	2204      	movs	r2, #4
		break;
   2a784:	e7d1      	b.n	2a72a <adc_nrfx_channel_setup+0xc2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   2a786:	2205      	movs	r2, #5
		break;
   2a788:	e7cf      	b.n	2a72a <adc_nrfx_channel_setup+0xc2>
		LOG_ERR("Selected ADC acquisition time is not valid");
   2a78a:	4b0c      	ldr	r3, [pc, #48]	; (2a7bc <adc_nrfx_channel_setup+0x154>)
   2a78c:	681b      	ldr	r3, [r3, #0]
   2a78e:	075b      	lsls	r3, r3, #29
   2a790:	d0b3      	beq.n	2a6fa <adc_nrfx_channel_setup+0x92>
   2a792:	2301      	movs	r3, #1
   2a794:	f04f 0200 	mov.w	r2, #0
   2a798:	f363 0202 	bfi	r2, r3, #0, #3
   2a79c:	4908      	ldr	r1, [pc, #32]	; (2a7c0 <adc_nrfx_channel_setup+0x158>)
   2a79e:	4b09      	ldr	r3, [pc, #36]	; (2a7c4 <adc_nrfx_channel_setup+0x15c>)
   2a7a0:	480d      	ldr	r0, [pc, #52]	; (2a7d8 <adc_nrfx_channel_setup+0x170>)
   2a7a2:	1a5b      	subs	r3, r3, r1
   2a7a4:	f36f 02c5 	bfc	r2, #3, #3
   2a7a8:	08db      	lsrs	r3, r3, #3
   2a7aa:	f363 128f 	bfi	r2, r3, #6, #10
   2a7ae:	4907      	ldr	r1, [pc, #28]	; (2a7cc <adc_nrfx_channel_setup+0x164>)
   2a7b0:	e7a1      	b.n	2a6f6 <adc_nrfx_channel_setup+0x8e>
	nrf_saadc_channel_config_t config = {
   2a7b2:	2200      	movs	r2, #0
   2a7b4:	e7b9      	b.n	2a72a <adc_nrfx_channel_setup+0xc2>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   2a7b6:	2201      	movs	r2, #1
   2a7b8:	e7b7      	b.n	2a72a <adc_nrfx_channel_setup+0xc2>
   2a7ba:	bf00      	nop
   2a7bc:	2000d710 	.word	0x2000d710
   2a7c0:	0002cff8 	.word	0x0002cff8
   2a7c4:	0002cff8 	.word	0x0002cff8
   2a7c8:	0003516a 	.word	0x0003516a
   2a7cc:	000350f3 	.word	0x000350f3
   2a7d0:	00035147 	.word	0x00035147
   2a7d4:	2000d590 	.word	0x2000d590
   2a7d8:	00035192 	.word	0x00035192

0002a7dc <adc_context_start_sampling.isra.1>:
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   2a7dc:	4a03      	ldr	r2, [pc, #12]	; (2a7ec <adc_context_start_sampling.isra.1+0x10>)
   2a7de:	2301      	movs	r3, #1
   2a7e0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
   2a7e4:	6013      	str	r3, [r2, #0]
   2a7e6:	6053      	str	r3, [r2, #4]

	nrf_saadc_enable();

	nrf_saadc_task_trigger(NRF_SAADC_TASK_START);
	nrf_saadc_task_trigger(NRF_SAADC_TASK_SAMPLE);
}
   2a7e8:	4770      	bx	lr
   2a7ea:	bf00      	nop
   2a7ec:	40007000 	.word	0x40007000

0002a7f0 <init_saadc>:
}

DEVICE_DECLARE(adc_0);

static int init_saadc(struct device *dev)
{
   2a7f0:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
   2a7f2:	4b0d      	ldr	r3, [pc, #52]	; (2a828 <init_saadc+0x38>)
   2a7f4:	2400      	movs	r4, #0
   2a7f6:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
   2a7f8:	681b      	ldr	r3, [r3, #0]
   2a7fa:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2a7fc:	9b01      	ldr	r3, [sp, #4]
    NRF_SAADC->INTENSET = saadc_int_mask;
   2a7fe:	4b0b      	ldr	r3, [pc, #44]	; (2a82c <init_saadc+0x3c>)
   2a800:	2202      	movs	r2, #2
   2a802:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC_EVENT_END);
	nrf_saadc_int_enable(NRF_SAADC_INT_END);
	NRFX_IRQ_ENABLE(CONFIG_ADC_0_IRQ);
   2a806:	2007      	movs	r0, #7
   2a808:	f7db f880 	bl	590c <_arch_irq_enable>

	IRQ_CONNECT(CONFIG_ADC_0_IRQ, CONFIG_ADC_0_IRQ_PRI,
   2a80c:	2007      	movs	r0, #7
   2a80e:	4622      	mov	r2, r4
   2a810:	2101      	movs	r1, #1
   2a812:	f7db f8ad 	bl	5970 <_irq_priority_set>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   2a816:	4806      	ldr	r0, [pc, #24]	; (2a830 <init_saadc+0x40>)
	k_sem_give(&ctx->lock);
}

static inline void adc_context_unlock_unconditionally(struct adc_context *ctx)
{
	if (!k_sem_count_get(&ctx->lock)) {
   2a818:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2a81a:	b913      	cbnz	r3, 2a822 <init_saadc+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2a81c:	3030      	adds	r0, #48	; 0x30
   2a81e:	f001 fdae 	bl	2c37e <_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   2a822:	2000      	movs	r0, #0
   2a824:	b002      	add	sp, #8
   2a826:	bd10      	pop	{r4, pc}
   2a828:	40007104 	.word	0x40007104
   2a82c:	40007000 	.word	0x40007000
   2a830:	2000d590 	.word	0x2000d590

0002a834 <start_read.isra.5>:
static int start_read(struct device *dev, const struct adc_sequence *sequence)
   2a834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t selected_channels = sequence->channels;
   2a836:	6844      	ldr	r4, [r0, #4]
	if (!selected_channels ||
   2a838:	b114      	cbz	r4, 2a840 <start_read.isra.5+0xc>
   2a83a:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
   2a83e:	d01a      	beq.n	2a876 <start_read.isra.5+0x42>
		LOG_ERR("Invalid selection of channels");
   2a840:	4b97      	ldr	r3, [pc, #604]	; (2aaa0 <start_read.isra.5+0x26c>)
   2a842:	681b      	ldr	r3, [r3, #0]
   2a844:	075b      	lsls	r3, r3, #29
   2a846:	d104      	bne.n	2a852 <start_read.isra.5+0x1e>
		return -EINVAL;
   2a848:	f06f 0515 	mvn.w	r5, #21
}
   2a84c:	4628      	mov	r0, r5
   2a84e:	b003      	add	sp, #12
   2a850:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Invalid selection of channels");
   2a852:	2301      	movs	r3, #1
   2a854:	f04f 0200 	mov.w	r2, #0
   2a858:	f363 0202 	bfi	r2, r3, #0, #3
   2a85c:	4991      	ldr	r1, [pc, #580]	; (2aaa4 <start_read.isra.5+0x270>)
   2a85e:	4b92      	ldr	r3, [pc, #584]	; (2aaa8 <start_read.isra.5+0x274>)
   2a860:	4892      	ldr	r0, [pc, #584]	; (2aaac <start_read.isra.5+0x278>)
   2a862:	1a5b      	subs	r3, r3, r1
   2a864:	f36f 02c5 	bfc	r2, #3, #3
   2a868:	08db      	lsrs	r3, r3, #3
   2a86a:	4991      	ldr	r1, [pc, #580]	; (2aab0 <start_read.isra.5+0x27c>)
   2a86c:	f363 128f 	bfi	r2, r3, #6, #10
   2a870:	f7d7 fa72 	bl	1d58 <log_1>
   2a874:	e7e8      	b.n	2a848 <start_read.isra.5+0x14>
    NRF_SAADC->CH[channel].PSELP = pselp;
   2a876:	4d8f      	ldr	r5, [pc, #572]	; (2aab4 <start_read.isra.5+0x280>)
			if (m_data.positive_inputs[channel_id] == 0) {
   2a878:	4f8f      	ldr	r7, [pc, #572]	; (2aab8 <start_read.isra.5+0x284>)
	active_channels = 0;
   2a87a:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   2a87c:	fa24 f302 	lsr.w	r3, r4, r2
   2a880:	f013 0301 	ands.w	r3, r3, #1
   2a884:	d03e      	beq.n	2a904 <start_read.isra.5+0xd0>
			if (m_data.positive_inputs[channel_id] == 0) {
   2a886:	18bb      	adds	r3, r7, r2
   2a888:	f893 6074 	ldrb.w	r6, [r3, #116]	; 0x74
   2a88c:	b9ae      	cbnz	r6, 2a8ba <start_read.isra.5+0x86>
				LOG_ERR("Channel %u not configured",
   2a88e:	4b84      	ldr	r3, [pc, #528]	; (2aaa0 <start_read.isra.5+0x26c>)
   2a890:	681b      	ldr	r3, [r3, #0]
   2a892:	075f      	lsls	r7, r3, #29
   2a894:	d0d8      	beq.n	2a848 <start_read.isra.5+0x14>
   2a896:	2101      	movs	r1, #1
   2a898:	f04f 0300 	mov.w	r3, #0
   2a89c:	f361 0302 	bfi	r3, r1, #0, #3
   2a8a0:	4880      	ldr	r0, [pc, #512]	; (2aaa4 <start_read.isra.5+0x270>)
   2a8a2:	4981      	ldr	r1, [pc, #516]	; (2aaa8 <start_read.isra.5+0x274>)
   2a8a4:	1a09      	subs	r1, r1, r0
   2a8a6:	08c9      	lsrs	r1, r1, #3
   2a8a8:	f366 03c5 	bfi	r3, r6, #3, #3
   2a8ac:	f361 138f 	bfi	r3, r1, #6, #10
   2a8b0:	4882      	ldr	r0, [pc, #520]	; (2aabc <start_read.isra.5+0x288>)
   2a8b2:	497f      	ldr	r1, [pc, #508]	; (2aab0 <start_read.isra.5+0x27c>)
		LOG_ERR("Oversampling value %d is not valid",
   2a8b4:	f7d7 fa64 	bl	1d80 <log_2>
   2a8b8:	e7c6      	b.n	2a848 <start_read.isra.5+0x14>
 */
__STATIC_INLINE void nrf_saadc_burst_set(uint8_t channel,
                                         nrf_saadc_burst_t burst)
{
    NRF_SAADC->CH[channel].CONFIG =
        (NRF_SAADC->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   2a8ba:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
			nrf_saadc_burst_set(channel_id,
   2a8be:	f890 c011 	ldrb.w	ip, [r0, #17]
   2a8c2:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   2a8c6:	f11c 0c00 	adds.w	ip, ip, #0
   2a8ca:	bf18      	it	ne
   2a8cc:	f04f 0c01 	movne.w	ip, #1
   2a8d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2a8d4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    NRF_SAADC->CH[channel].CONFIG =
   2a8d8:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    NRF_SAADC->CH[channel].PSELP = pselp;
   2a8dc:	f102 0351 	add.w	r3, r2, #81	; 0x51
   2a8e0:	011b      	lsls	r3, r3, #4
			++active_channels;
   2a8e2:	3101      	adds	r1, #1
   2a8e4:	50ee      	str	r6, [r5, r3]
   2a8e6:	b2c9      	uxtb	r1, r1
   2a8e8:	3201      	adds	r2, #1
	} while (++channel_id < NRF_SAADC_CHANNEL_COUNT);
   2a8ea:	2a08      	cmp	r2, #8
   2a8ec:	d1c6      	bne.n	2a87c <start_read.isra.5+0x48>
	error = set_resolution(sequence);
   2a8ee:	7c02      	ldrb	r2, [r0, #16]
	switch (sequence->resolution) {
   2a8f0:	f1a2 0308 	sub.w	r3, r2, #8
   2a8f4:	2b06      	cmp	r3, #6
   2a8f6:	d829      	bhi.n	2a94c <start_read.isra.5+0x118>
   2a8f8:	e8df f003 	tbb	[pc, r3]
   2a8fc:	2809283d 	.word	0x2809283d
   2a900:	283f      	.short	0x283f
   2a902:	26          	.byte	0x26
   2a903:	00          	.byte	0x00
   2a904:	f102 0651 	add.w	r6, r2, #81	; 0x51
   2a908:	0136      	lsls	r6, r6, #4
   2a90a:	51ab      	str	r3, [r5, r6]
   2a90c:	e7ec      	b.n	2a8e8 <start_read.isra.5+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
   2a90e:	2201      	movs	r2, #1
    NRF_SAADC->RESOLUTION = resolution;
   2a910:	4b68      	ldr	r3, [pc, #416]	; (2aab4 <start_read.isra.5+0x280>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2a912:	2901      	cmp	r1, #1
   2a914:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   2a918:	7c42      	ldrb	r2, [r0, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2a91a:	d930      	bls.n	2a97e <start_read.isra.5+0x14a>
   2a91c:	2a00      	cmp	r2, #0
   2a91e:	d038      	beq.n	2a992 <start_read.isra.5+0x15e>
		LOG_ERR(
   2a920:	4b5f      	ldr	r3, [pc, #380]	; (2aaa0 <start_read.isra.5+0x26c>)
   2a922:	681b      	ldr	r3, [r3, #0]
   2a924:	075c      	lsls	r4, r3, #29
   2a926:	d08f      	beq.n	2a848 <start_read.isra.5+0x14>
   2a928:	2301      	movs	r3, #1
   2a92a:	f04f 0200 	mov.w	r2, #0
   2a92e:	f363 0202 	bfi	r2, r3, #0, #3
   2a932:	495c      	ldr	r1, [pc, #368]	; (2aaa4 <start_read.isra.5+0x270>)
   2a934:	4b5c      	ldr	r3, [pc, #368]	; (2aaa8 <start_read.isra.5+0x274>)
   2a936:	4862      	ldr	r0, [pc, #392]	; (2aac0 <start_read.isra.5+0x28c>)
   2a938:	1a5b      	subs	r3, r3, r1
   2a93a:	f36f 02c5 	bfc	r2, #3, #3
   2a93e:	08db      	lsrs	r3, r3, #3
   2a940:	f363 128f 	bfi	r2, r3, #6, #10
   2a944:	495f      	ldr	r1, [pc, #380]	; (2aac4 <start_read.isra.5+0x290>)
   2a946:	e793      	b.n	2a870 <start_read.isra.5+0x3c>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   2a948:	2203      	movs	r2, #3
   2a94a:	e7e1      	b.n	2a910 <start_read.isra.5+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   2a94c:	4b54      	ldr	r3, [pc, #336]	; (2aaa0 <start_read.isra.5+0x26c>)
   2a94e:	681b      	ldr	r3, [r3, #0]
   2a950:	075d      	lsls	r5, r3, #29
   2a952:	f43f af79 	beq.w	2a848 <start_read.isra.5+0x14>
   2a956:	2101      	movs	r1, #1
   2a958:	f04f 0300 	mov.w	r3, #0
   2a95c:	f361 0302 	bfi	r3, r1, #0, #3
   2a960:	4850      	ldr	r0, [pc, #320]	; (2aaa4 <start_read.isra.5+0x270>)
   2a962:	4951      	ldr	r1, [pc, #324]	; (2aaa8 <start_read.isra.5+0x274>)
   2a964:	1a09      	subs	r1, r1, r0
   2a966:	08c9      	lsrs	r1, r1, #3
   2a968:	f36f 03c5 	bfc	r3, #3, #3
   2a96c:	f361 138f 	bfi	r3, r1, #6, #10
   2a970:	4855      	ldr	r0, [pc, #340]	; (2aac8 <start_read.isra.5+0x294>)
   2a972:	4956      	ldr	r1, [pc, #344]	; (2aacc <start_read.isra.5+0x298>)
   2a974:	e79e      	b.n	2a8b4 <start_read.isra.5+0x80>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   2a976:	2200      	movs	r2, #0
   2a978:	e7ca      	b.n	2a910 <start_read.isra.5+0xdc>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   2a97a:	2202      	movs	r2, #2
   2a97c:	e7c8      	b.n	2a910 <start_read.isra.5+0xdc>
	switch (sequence->oversampling) {
   2a97e:	2a08      	cmp	r2, #8
   2a980:	d83a      	bhi.n	2a9f8 <start_read.isra.5+0x1c4>
   2a982:	e8df f002 	tbb	[pc, r2]
   2a986:	054e      	.short	0x054e
   2a988:	312f2d2b 	.word	0x312f2d2b
   2a98c:	3533      	.short	0x3533
   2a98e:	37          	.byte	0x37
   2a98f:	00          	.byte	0x00
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_2X;
   2a990:	2201      	movs	r2, #1
	if (sequence->options) {
   2a992:	6805      	ldr	r5, [r0, #0]
    NRF_SAADC->OVERSAMPLE = oversample;
   2a994:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   2a998:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   2a99a:	b115      	cbz	r5, 2a9a2 <start_read.isra.5+0x16e>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   2a99c:	892a      	ldrh	r2, [r5, #8]
   2a99e:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   2a9a2:	68c2      	ldr	r2, [r0, #12]
   2a9a4:	429a      	cmp	r2, r3
   2a9a6:	d23e      	bcs.n	2aa26 <start_read.isra.5+0x1f2>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   2a9a8:	493d      	ldr	r1, [pc, #244]	; (2aaa0 <start_read.isra.5+0x26c>)
   2a9aa:	6809      	ldr	r1, [r1, #0]
   2a9ac:	0749      	lsls	r1, r1, #29
   2a9ae:	d012      	beq.n	2a9d6 <start_read.isra.5+0x1a2>
   2a9b0:	2101      	movs	r1, #1
   2a9b2:	f04f 0000 	mov.w	r0, #0
   2a9b6:	f361 0002 	bfi	r0, r1, #0, #3
   2a9ba:	4c3a      	ldr	r4, [pc, #232]	; (2aaa4 <start_read.isra.5+0x270>)
   2a9bc:	493a      	ldr	r1, [pc, #232]	; (2aaa8 <start_read.isra.5+0x274>)
   2a9be:	1b09      	subs	r1, r1, r4
   2a9c0:	08c9      	lsrs	r1, r1, #3
   2a9c2:	f36f 00c5 	bfc	r0, #3, #3
   2a9c6:	f361 108f 	bfi	r0, r1, #6, #10
   2a9ca:	f8ad 0000 	strh.w	r0, [sp]
   2a9ce:	4940      	ldr	r1, [pc, #256]	; (2aad0 <start_read.isra.5+0x29c>)
   2a9d0:	4840      	ldr	r0, [pc, #256]	; (2aad4 <start_read.isra.5+0x2a0>)
   2a9d2:	f7d7 f9ed 	bl	1db0 <log_3>
		return -ENOMEM;
   2a9d6:	f06f 050b 	mvn.w	r5, #11
   2a9da:	e737      	b.n	2a84c <start_read.isra.5+0x18>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_4X;
   2a9dc:	2202      	movs	r2, #2
   2a9de:	e7d8      	b.n	2a992 <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_8X;
   2a9e0:	2203      	movs	r2, #3
   2a9e2:	e7d6      	b.n	2a992 <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_16X;
   2a9e4:	2204      	movs	r2, #4
   2a9e6:	e7d4      	b.n	2a992 <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_32X;
   2a9e8:	2205      	movs	r2, #5
   2a9ea:	e7d2      	b.n	2a992 <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_64X;
   2a9ec:	2206      	movs	r2, #6
   2a9ee:	e7d0      	b.n	2a992 <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_128X;
   2a9f0:	2207      	movs	r2, #7
   2a9f2:	e7ce      	b.n	2a992 <start_read.isra.5+0x15e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
   2a9f4:	2208      	movs	r2, #8
   2a9f6:	e7cc      	b.n	2a992 <start_read.isra.5+0x15e>
		LOG_ERR("Oversampling value %d is not valid",
   2a9f8:	4b29      	ldr	r3, [pc, #164]	; (2aaa0 <start_read.isra.5+0x26c>)
   2a9fa:	681b      	ldr	r3, [r3, #0]
   2a9fc:	0758      	lsls	r0, r3, #29
   2a9fe:	f43f af23 	beq.w	2a848 <start_read.isra.5+0x14>
   2aa02:	2101      	movs	r1, #1
   2aa04:	f04f 0300 	mov.w	r3, #0
   2aa08:	f361 0302 	bfi	r3, r1, #0, #3
   2aa0c:	4825      	ldr	r0, [pc, #148]	; (2aaa4 <start_read.isra.5+0x270>)
   2aa0e:	4926      	ldr	r1, [pc, #152]	; (2aaa8 <start_read.isra.5+0x274>)
   2aa10:	1a09      	subs	r1, r1, r0
   2aa12:	08c9      	lsrs	r1, r1, #3
   2aa14:	f36f 03c5 	bfc	r3, #3, #3
   2aa18:	f361 138f 	bfi	r3, r1, #6, #10
   2aa1c:	482e      	ldr	r0, [pc, #184]	; (2aad8 <start_read.isra.5+0x2a4>)
   2aa1e:	4929      	ldr	r1, [pc, #164]	; (2aac4 <start_read.isra.5+0x290>)
   2aa20:	e748      	b.n	2a8b4 <start_read.isra.5+0x80>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_DISABLED;
   2aa22:	2200      	movs	r2, #0
   2aa24:	e7b5      	b.n	2a992 <start_read.isra.5+0x15e>
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
   2aa26:	4b23      	ldr	r3, [pc, #140]	; (2aab4 <start_read.isra.5+0x280>)
   2aa28:	6882      	ldr	r2, [r0, #8]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = sequence;
   2aa2a:	4c23      	ldr	r4, [pc, #140]	; (2aab8 <start_read.isra.5+0x284>)
   2aa2c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    NRF_SAADC->RESULT.MAXCNT = size;
   2aa30:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
	ctx->status = 0;
   2aa34:	2100      	movs	r1, #0
	ctx->sequence = sequence;
   2aa36:	66e0      	str	r0, [r4, #108]	; 0x6c
	ctx->status = 0;
   2aa38:	6621      	str	r1, [r4, #96]	; 0x60

	if (ctx->sequence->options) {
   2aa3a:	b365      	cbz	r5, 2aa96 <start_read.isra.5+0x262>
		ctx->sampling_index = 0;

		if (ctx->sequence->options->interval_us != 0) {
   2aa3c:	682b      	ldr	r3, [r5, #0]
		ctx->sampling_index = 0;
   2aa3e:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
		if (ctx->sequence->options->interval_us != 0) {
   2aa42:	b343      	cbz	r3, 2aa96 <start_read.isra.5+0x262>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2aa44:	f3bf 8f5b 	dmb	ish
   2aa48:	e854 3f00 	ldrex	r3, [r4]
   2aa4c:	e844 1200 	strex	r2, r1, [r4]
   2aa50:	2a00      	cmp	r2, #0
   2aa52:	d1f9      	bne.n	2aa48 <start_read.isra.5+0x214>
   2aa54:	f3bf 8f5b 	dmb	ish
	u32_t interval_us = ctx->sequence->options->interval_us;
   2aa58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   2aa5a:	681b      	ldr	r3, [r3, #0]
	u32_t interval_ms = ceiling_fraction(interval_us, 1000UL);
   2aa5c:	681b      	ldr	r3, [r3, #0]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
   2aa5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2aa62:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
   2aa66:	1d20      	adds	r0, r4, #4
   2aa68:	fbb3 f2f2 	udiv	r2, r3, r2
   2aa6c:	f002 f876 	bl	2cb5c <_impl_k_timer_start>
	if (ctx->asynchronous) {
   2aa70:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   2aa74:	b993      	cbnz	r3, 2aa9c <start_read.isra.5+0x268>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2aa76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2aa7a:	4818      	ldr	r0, [pc, #96]	; (2aadc <start_read.isra.5+0x2a8>)
   2aa7c:	f001 fca6 	bl	2c3cc <_impl_k_sem_take>
	return ctx->status;
   2aa80:	6e25      	ldr	r5, [r4, #96]	; 0x60
	if (ctx->asynchronous && (status == 0)) {
   2aa82:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   2aa86:	b113      	cbz	r3, 2aa8e <start_read.isra.5+0x25a>
   2aa88:	2d00      	cmp	r5, #0
   2aa8a:	f43f aedf 	beq.w	2a84c <start_read.isra.5+0x18>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2aa8e:	4814      	ldr	r0, [pc, #80]	; (2aae0 <start_read.isra.5+0x2ac>)
   2aa90:	f001 fc75 	bl	2c37e <_impl_k_sem_give>
   2aa94:	e6da      	b.n	2a84c <start_read.isra.5+0x18>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   2aa96:	f7ff fea1 	bl	2a7dc <adc_context_start_sampling.isra.1>
   2aa9a:	e7e9      	b.n	2aa70 <start_read.isra.5+0x23c>
		return 0;
   2aa9c:	2500      	movs	r5, #0
   2aa9e:	e7f0      	b.n	2aa82 <start_read.isra.5+0x24e>
   2aaa0:	2000d710 	.word	0x2000d710
   2aaa4:	0002cff8 	.word	0x0002cff8
   2aaa8:	0002cff8 	.word	0x0002cff8
   2aaac:	000351d0 	.word	0x000351d0
   2aab0:	0003513c 	.word	0x0003513c
   2aab4:	40007000 	.word	0x40007000
   2aab8:	2000d590 	.word	0x2000d590
   2aabc:	000351f2 	.word	0x000351f2
   2aac0:	00035239 	.word	0x00035239
   2aac4:	00035119 	.word	0x00035119
   2aac8:	00035210 	.word	0x00035210
   2aacc:	0003510a 	.word	0x0003510a
   2aad0:	0003512a 	.word	0x0003512a
   2aad4:	00035296 	.word	0x00035296
   2aad8:	0003526f 	.word	0x0003526f
   2aadc:	2000d5d8 	.word	0x2000d5d8
   2aae0:	2000d5c0 	.word	0x2000d5c0

0002aae4 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2aae4:	1f03      	subs	r3, r0, #4
   2aae6:	f3bf 8f5b 	dmb	ish
   2aaea:	e853 2f00 	ldrex	r2, [r3]
   2aaee:	1c51      	adds	r1, r2, #1
   2aaf0:	e843 1c00 	strex	ip, r1, [r3]
   2aaf4:	f1bc 0f00 	cmp.w	ip, #0
   2aaf8:	d1f7      	bne.n	2aaea <adc_context_on_timer_expired+0x6>
   2aafa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2aafe:	b90a      	cbnz	r2, 2ab04 <adc_context_on_timer_expired+0x20>
		adc_context_start_sampling(ctx);
   2ab00:	f7ff be6c 	b.w	2a7dc <adc_context_start_sampling.isra.1>
		ctx->status = -EIO;
   2ab04:	f06f 0304 	mvn.w	r3, #4
   2ab08:	65c3      	str	r3, [r0, #92]	; 0x5c
}
   2ab0a:	4770      	bx	lr

0002ab0c <adc_nrfx_read>:
{
   2ab0c:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2ab0e:	4c08      	ldr	r4, [pc, #32]	; (2ab30 <adc_nrfx_read+0x24>)
   2ab10:	460d      	mov	r5, r1
   2ab12:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ab16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ab1a:	f001 fc57 	bl	2c3cc <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   2ab1e:	2300      	movs	r3, #0
   2ab20:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
   2ab24:	6663      	str	r3, [r4, #100]	; 0x64
	return start_read(dev, sequence);
   2ab26:	4628      	mov	r0, r5
}
   2ab28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_read(dev, sequence);
   2ab2c:	f7ff be82 	b.w	2a834 <start_read.isra.5>
   2ab30:	2000d590 	.word	0x2000d590

0002ab34 <adc_nrfx_read_async>:
{
   2ab34:	b570      	push	{r4, r5, r6, lr}
   2ab36:	4c09      	ldr	r4, [pc, #36]	; (2ab5c <adc_nrfx_read_async+0x28>)
   2ab38:	460d      	mov	r5, r1
   2ab3a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ab3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ab42:	4616      	mov	r6, r2
   2ab44:	f001 fc42 	bl	2c3cc <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   2ab48:	2301      	movs	r3, #1
   2ab4a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
   2ab4e:	6666      	str	r6, [r4, #100]	; 0x64
	return start_read(dev, sequence);
   2ab50:	4628      	mov	r0, r5
}
   2ab52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_read(dev, sequence);
   2ab56:	f7ff be6d 	b.w	2a834 <start_read.isra.5>
   2ab5a:	bf00      	nop
   2ab5c:	2000d590 	.word	0x2000d590

0002ab60 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event);
   2ab60:	4b2f      	ldr	r3, [pc, #188]	; (2ac20 <saadc_irq_handler+0xc0>)
   2ab62:	681a      	ldr	r2, [r3, #0]
{
   2ab64:	b513      	push	{r0, r1, r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC_EVENT_END)) {
   2ab66:	2a00      	cmp	r2, #0
   2ab68:	d041      	beq.n	2abee <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
   2ab6a:	2200      	movs	r2, #0
   2ab6c:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
   2ab6e:	681b      	ldr	r3, [r3, #0]
   2ab70:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2ab72:	9b01      	ldr	r3, [sp, #4]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						struct device *dev)
{
	if (ctx->sequence->options) {
   2ab74:	4c2b      	ldr	r4, [pc, #172]	; (2ac24 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
   2ab76:	4b2c      	ldr	r3, [pc, #176]	; (2ac28 <saadc_irq_handler+0xc8>)
   2ab78:	2101      	movs	r1, #1
   2ab7a:	6019      	str	r1, [r3, #0]
   2ab7c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   2ab7e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   2ab82:	680b      	ldr	r3, [r1, #0]
   2ab84:	2b00      	cmp	r3, #0
   2ab86:	d03b      	beq.n	2ac00 <saadc_irq_handler+0xa0>
		adc_sequence_callback callback =
   2ab88:	685b      	ldr	r3, [r3, #4]
   2ab8a:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
			ctx->sequence->options->callback;
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   2ab8e:	b123      	cbz	r3, 2ab9a <saadc_irq_handler+0x3a>
			action = callback(dev,
   2ab90:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   2ab92:	2801      	cmp	r0, #1
   2ab94:	d015      	beq.n	2abc2 <saadc_irq_handler+0x62>
   2ab96:	2802      	cmp	r0, #2
   2ab98:	d02b      	beq.n	2abf2 <saadc_irq_handler+0x92>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->sequence->options->extra_samplings) {
   2ab9a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
			if (ctx->sampling_index <
   2ab9c:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
			    ctx->sequence->options->extra_samplings) {
   2aba0:	6812      	ldr	r2, [r2, #0]
			if (ctx->sampling_index <
   2aba2:	8912      	ldrh	r2, [r2, #8]
   2aba4:	429a      	cmp	r2, r3
   2aba6:	d924      	bls.n	2abf2 <saadc_irq_handler+0x92>
				++ctx->sampling_index;
   2aba8:	3301      	adds	r3, #1
   2abaa:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    return (nrf_saadc_value_t *)NRF_SAADC->RESULT.PTR;
   2abae:	4b1f      	ldr	r3, [pc, #124]	; (2ac2c <saadc_irq_handler+0xcc>)
   2abb0:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return NRF_SAADC->RESULT.AMOUNT;
   2abb4:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get() +
   2abb8:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   2abba:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
   2abbe:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->sequence->options->interval_us == 0) {
   2abc2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   2abc4:	681b      	ldr	r3, [r3, #0]
   2abc6:	681b      	ldr	r3, [r3, #0]
   2abc8:	b923      	cbnz	r3, 2abd4 <saadc_irq_handler+0x74>
}
   2abca:	b002      	add	sp, #8
   2abcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				adc_context_start_sampling(ctx);
   2abd0:	f7ff be04 	b.w	2a7dc <adc_context_start_sampling.isra.1>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2abd4:	f3bf 8f5b 	dmb	ish
   2abd8:	e854 3f00 	ldrex	r3, [r4]
   2abdc:	1e5a      	subs	r2, r3, #1
   2abde:	e844 2100 	strex	r1, r2, [r4]
   2abe2:	2900      	cmp	r1, #0
   2abe4:	d1f8      	bne.n	2abd8 <saadc_irq_handler+0x78>
   2abe6:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   2abea:	2b01      	cmp	r3, #1
   2abec:	dced      	bgt.n	2abca <saadc_irq_handler+0x6a>
   2abee:	b002      	add	sp, #8
   2abf0:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->sequence->options->interval_us != 0) {
   2abf2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   2abf4:	681b      	ldr	r3, [r3, #0]
   2abf6:	681b      	ldr	r3, [r3, #0]
   2abf8:	b113      	cbz	r3, 2ac00 <saadc_irq_handler+0xa0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
   2abfa:	480d      	ldr	r0, [pc, #52]	; (2ac30 <saadc_irq_handler+0xd0>)
   2abfc:	f001 ffe6 	bl	2cbcc <_impl_k_timer_stop>
	if (ctx->asynchronous) {
   2ac00:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   2ac04:	b153      	cbz	r3, 2ac1c <saadc_irq_handler+0xbc>
		if (ctx->signal) {
   2ac06:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2ac08:	b110      	cbz	r0, 2ac10 <saadc_irq_handler+0xb0>
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
   2ac0a:	2100      	movs	r1, #0
   2ac0c:	f002 f946 	bl	2ce9c <_impl_k_poll_signal>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2ac10:	4808      	ldr	r0, [pc, #32]	; (2ac34 <saadc_irq_handler+0xd4>)
   2ac12:	b002      	add	sp, #8
   2ac14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ac18:	f001 bbb1 	b.w	2c37e <_impl_k_sem_give>
   2ac1c:	4806      	ldr	r0, [pc, #24]	; (2ac38 <saadc_irq_handler+0xd8>)
   2ac1e:	e7f8      	b.n	2ac12 <saadc_irq_handler+0xb2>
   2ac20:	40007104 	.word	0x40007104
   2ac24:	2000d590 	.word	0x2000d590
   2ac28:	40007008 	.word	0x40007008
   2ac2c:	40007000 	.word	0x40007000
   2ac30:	2000d594 	.word	0x2000d594
   2ac34:	2000d5c0 	.word	0x2000d5c0
   2ac38:	2000d5d8 	.word	0x2000d5d8

0002ac3c <gpio_nrfx_write>:
	return 0;
}

static int gpio_nrfx_write(struct device *port, int access_op,
			   u32_t pin, u32_t value)
{
   2ac3c:	b510      	push	{r4, lr}
	return port->config->config_info;
   2ac3e:	6804      	ldr	r4, [r0, #0]
   2ac40:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac42:	68a4      	ldr	r4, [r4, #8]
   2ac44:	69c0      	ldr	r0, [r0, #28]
   2ac46:	6824      	ldr	r4, [r4, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	if (access_op == GPIO_ACCESS_BY_PORT) {
   2ac48:	2901      	cmp	r1, #1
   2ac4a:	d104      	bne.n	2ac56 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   2ac4c:	4058      	eors	r0, r3
}


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
   2ac4e:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	return 0;
}
   2ac52:	2000      	movs	r0, #0
   2ac54:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   2ac56:	3300      	adds	r3, #0
   2ac58:	fa20 f002 	lsr.w	r0, r0, r2
   2ac5c:	f04f 0101 	mov.w	r1, #1
   2ac60:	bf18      	it	ne
   2ac62:	2301      	movne	r3, #1
   2ac64:	f000 0001 	and.w	r0, r0, #1
   2ac68:	4091      	lsls	r1, r2
   2ac6a:	4283      	cmp	r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   2ac6c:	bf14      	ite	ne
   2ac6e:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   2ac72:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   2ac76:	e7ec      	b.n	2ac52 <gpio_nrfx_write+0x16>

0002ac78 <gpio_nrfx_read>:

static int gpio_nrfx_read(struct device *port, int access_op,
			  u32_t pin, u32_t *value)
{
   2ac78:	b510      	push	{r4, lr}
	return port->config->config_info;
   2ac7a:	6804      	ldr	r4, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
	struct gpio_nrfx_data *data = get_port_data(port);

	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
   2ac7c:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac7e:	68a4      	ldr	r4, [r4, #8]
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
   2ac80:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac82:	6824      	ldr	r4, [r4, #0]
    return p_reg->IN;
   2ac84:	f8d4 4510 	ldr.w	r4, [r4, #1296]	; 0x510

	if (access_op == GPIO_ACCESS_BY_PORT) {
   2ac88:	2901      	cmp	r1, #1
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
   2ac8a:	ea80 0004 	eor.w	r0, r0, r4
		*value = port_in;
	} else {
		*value = (port_in & BIT(pin)) ? 1 : 0;
   2ac8e:	bf1c      	itt	ne
   2ac90:	40d0      	lsrne	r0, r2
   2ac92:	f000 0001 	andne.w	r0, r0, #1
   2ac96:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
   2ac98:	2000      	movs	r0, #0
   2ac9a:	bd10      	pop	{r4, pc}

0002ac9c <gpio_nrfx_manage_callback>:

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
	_gpio_manage_callback(&get_port_data(port)->callbacks, callback, set);
   2ac9c:	6883      	ldr	r3, [r0, #8]
   2ac9e:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   2aca0:	b172      	cbz	r2, 2acc0 <gpio_nrfx_manage_callback+0x24>
	parent->next = child;
   2aca2:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2aca4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2aca6:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   2aca8:	b902      	cbnz	r2, 2acac <gpio_nrfx_manage_callback+0x10>
	list->tail = node;
   2acaa:	6059      	str	r1, [r3, #4]
	return 0;
}
   2acac:	2000      	movs	r0, #0
   2acae:	4770      	bx	lr
	parent->next = child;
   2acb0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2acb2:	6858      	ldr	r0, [r3, #4]
   2acb4:	4281      	cmp	r1, r0
	list->tail = node;
   2acb6:	bf08      	it	eq
   2acb8:	605a      	streq	r2, [r3, #4]
   2acba:	e00d      	b.n	2acd8 <gpio_nrfx_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2acbc:	4602      	mov	r2, r0
   2acbe:	6800      	ldr	r0, [r0, #0]
   2acc0:	2800      	cmp	r0, #0
   2acc2:	d0f3      	beq.n	2acac <gpio_nrfx_manage_callback+0x10>
   2acc4:	4288      	cmp	r0, r1
   2acc6:	d1f9      	bne.n	2acbc <gpio_nrfx_manage_callback+0x20>
   2acc8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2acca:	2a00      	cmp	r2, #0
   2accc:	d1f0      	bne.n	2acb0 <gpio_nrfx_manage_callback+0x14>
   2acce:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2acd0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2acd2:	4291      	cmp	r1, r2
   2acd4:	d100      	bne.n	2acd8 <gpio_nrfx_manage_callback+0x3c>
	list->tail = node;
   2acd6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2acd8:	2300      	movs	r3, #0
   2acda:	600b      	str	r3, [r1, #0]
   2acdc:	e7e6      	b.n	2acac <gpio_nrfx_manage_callback+0x10>
	...

0002ace0 <gpio_nrfx_init>:
		}
	}
}

static int gpio_nrfx_init(struct device *port)
{
   2ace0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   2ace2:	4b09      	ldr	r3, [pc, #36]	; (2ad08 <gpio_nrfx_init+0x28>)
   2ace4:	781a      	ldrb	r2, [r3, #0]
   2ace6:	b96a      	cbnz	r2, 2ad04 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   2ace8:	2101      	movs	r1, #1
   2acea:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(CONFIG_GPIOTE_IRQ, CONFIG_GPIOTE_IRQ_PRI,
   2acec:	2006      	movs	r0, #6
   2acee:	2105      	movs	r1, #5
   2acf0:	f7da fe3e 	bl	5970 <_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(CONFIG_GPIOTE_IRQ);
   2acf4:	2006      	movs	r0, #6
   2acf6:	f7da fe09 	bl	590c <_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
   2acfa:	4b04      	ldr	r3, [pc, #16]	; (2ad0c <gpio_nrfx_init+0x2c>)
   2acfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2ad00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   2ad04:	2000      	movs	r0, #0
   2ad06:	bd08      	pop	{r3, pc}
   2ad08:	20002dc8 	.word	0x20002dc8
   2ad0c:	40006000 	.word	0x40006000

0002ad10 <check_level_trigger_pins.constprop.11>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2ad10:	4a0b      	ldr	r2, [pc, #44]	; (2ad40 <check_level_trigger_pins.constprop.11+0x30>)
   2ad12:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   2ad14:	6812      	ldr	r2, [r2, #0]
	u32_t port_in = nrf_gpio_port_in_read(get_port_cfg(port)->port);
   2ad16:	6892      	ldr	r2, [r2, #8]
   2ad18:	6812      	ldr	r2, [r2, #0]
static u32_t check_level_trigger_pins(struct device *port)
   2ad1a:	b510      	push	{r4, lr}
   2ad1c:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	out &= ~data->trig_edge & ~data->double_edge;
   2ad20:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2ad24:	4311      	orrs	r1, r2
   2ad26:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   2ad2a:	4002      	ands	r2, r0
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2ad2c:	69d8      	ldr	r0, [r3, #28]
   2ad2e:	691b      	ldr	r3, [r3, #16]
   2ad30:	4058      	eors	r0, r3
	out &= ~data->trig_edge & ~data->double_edge;
   2ad32:	ea22 0201 	bic.w	r2, r2, r1
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2ad36:	4060      	eors	r0, r4
}
   2ad38:	ea22 0000 	bic.w	r0, r2, r0
   2ad3c:	bd10      	pop	{r4, pc}
   2ad3e:	bf00      	nop
   2ad40:	2000d6bc 	.word	0x2000d6bc

0002ad44 <gpiote_event_handler>:
{
   2ad44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   2ad46:	4d23      	ldr	r5, [pc, #140]	; (2add4 <gpiote_event_handler+0x90>)
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
   2ad48:	682b      	ldr	r3, [r5, #0]
   2ad4a:	2b01      	cmp	r3, #1
   2ad4c:	d133      	bne.n	2adb6 <gpiote_event_handler+0x72>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   2ad4e:	f7ff ffdf 	bl	2ad10 <check_level_trigger_pins.constprop.11>
   2ad52:	4606      	mov	r6, r0
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2ad54:	2300      	movs	r3, #0
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   2ad56:	4c20      	ldr	r4, [pc, #128]	; (2add8 <gpiote_event_handler+0x94>)
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   2ad58:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2ad5a:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
   2ad5c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
   2ad60:	fa07 f103 	lsl.w	r1, r7, r3
   2ad64:	4211      	tst	r1, r2
   2ad66:	d014      	beq.n	2ad92 <gpiote_event_handler+0x4e>
   2ad68:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
   2ad6c:	f502 52c2 	add.w	r2, r2, #6208	; 0x1840
   2ad70:	0092      	lsls	r2, r2, #2
   2ad72:	6811      	ldr	r1, [r2, #0]
   2ad74:	2901      	cmp	r1, #1
   2ad76:	d10c      	bne.n	2ad92 <gpiote_event_handler+0x4e>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2ad78:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   2ad7c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2ad80:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   2ad84:	6812      	ldr	r2, [r2, #0]
   2ad86:	9200      	str	r2, [sp, #0]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2ad88:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
   2ad8c:	4081      	lsls	r1, r0
    (void)dummy;
   2ad8e:	9a00      	ldr	r2, [sp, #0]
   2ad90:	430e      	orrs	r6, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2ad92:	3301      	adds	r3, #1
   2ad94:	2b08      	cmp	r3, #8
   2ad96:	d1e1      	bne.n	2ad5c <gpiote_event_handler+0x18>
	if (fired_triggers[0]) {
   2ad98:	b17e      	cbz	r6, 2adba <gpiote_event_handler+0x76>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   2ad9a:	4f10      	ldr	r7, [pc, #64]	; (2addc <gpiote_event_handler+0x98>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   2ad9c:	68bb      	ldr	r3, [r7, #8]
   2ad9e:	681c      	ldr	r4, [r3, #0]
   2ada0:	b15c      	cbz	r4, 2adba <gpiote_event_handler+0x76>
		if (cb->pin_mask & pins) {
   2ada2:	68a3      	ldr	r3, [r4, #8]
   2ada4:	421e      	tst	r6, r3
   2ada6:	d004      	beq.n	2adb2 <gpiote_event_handler+0x6e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   2ada8:	6863      	ldr	r3, [r4, #4]
   2adaa:	4632      	mov	r2, r6
   2adac:	4621      	mov	r1, r4
   2adae:	4638      	mov	r0, r7
   2adb0:	4798      	blx	r3
	return node->next;
   2adb2:	6824      	ldr	r4, [r4, #0]
   2adb4:	e7f4      	b.n	2ada0 <gpiote_event_handler+0x5c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2adb6:	2600      	movs	r6, #0
   2adb8:	e7cc      	b.n	2ad54 <gpiote_event_handler+0x10>
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
   2adba:	682b      	ldr	r3, [r5, #0]
   2adbc:	2b01      	cmp	r3, #1
   2adbe:	d106      	bne.n	2adce <gpiote_event_handler+0x8a>
		u32_t active_level_triggers =
   2adc0:	f7ff ffa6 	bl	2ad10 <check_level_trigger_pins.constprop.11>
		if (active_level_triggers == 0) {
   2adc4:	b918      	cbnz	r0, 2adce <gpiote_event_handler+0x8a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2adc6:	6028      	str	r0, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   2adc8:	682b      	ldr	r3, [r5, #0]
   2adca:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2adcc:	9b01      	ldr	r3, [sp, #4]
}
   2adce:	b003      	add	sp, #12
   2add0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2add2:	bf00      	nop
   2add4:	4000617c 	.word	0x4000617c
   2add8:	40006000 	.word	0x40006000
   2addc:	2000d6bc 	.word	0x2000d6bc

0002ade0 <gpiote_pin_int_cfg>:
{
   2ade0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
   2ade2:	6803      	ldr	r3, [r0, #0]
    return (NRF_GPIOTE->INTENSET & mask);
   2ade4:	4d58      	ldr	r5, [pc, #352]	; (2af48 <gpiote_pin_int_cfg+0x168>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2ade6:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   2ade8:	6884      	ldr	r4, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2adea:	791a      	ldrb	r2, [r3, #4]
   2adec:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2adf0:	f001 031f 	and.w	r3, r1, #31
   2adf4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   2adf8:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2adfa:	2200      	movs	r2, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2adfc:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   2ae00:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
   2ae04:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   2ae08:	42b3      	cmp	r3, r6
   2ae0a:	d175      	bne.n	2aef8 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
   2ae0c:	fa20 f602 	lsr.w	r6, r0, r2
   2ae10:	07f6      	lsls	r6, r6, #31
   2ae12:	d571      	bpl.n	2aef8 <gpiote_pin_int_cfg+0x118>
   2ae14:	0090      	lsls	r0, r2, #2
   2ae16:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2ae1a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   2ae1e:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
   2ae22:	f026 0601 	bic.w	r6, r6, #1
   2ae26:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   2ae2a:	2001      	movs	r0, #1
   2ae2c:	fa00 f202 	lsl.w	r2, r0, r2
    NRF_GPIOTE->INTENCLR = mask;
   2ae30:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   2ae34:	009a      	lsls	r2, r3, #2
   2ae36:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   2ae3a:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
   2ae3e:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
   2ae42:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2ae46:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
   2ae4a:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   2ae4e:	68a0      	ldr	r0, [r4, #8]
   2ae50:	40c8      	lsrs	r0, r1
   2ae52:	f010 0001 	ands.w	r0, r0, #1
   2ae56:	d04d      	beq.n	2aef4 <gpiote_pin_int_cfg+0x114>
   2ae58:	68e0      	ldr	r0, [r4, #12]
   2ae5a:	40c8      	lsrs	r0, r1
   2ae5c:	f010 0001 	ands.w	r0, r0, #1
   2ae60:	d048      	beq.n	2aef4 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
   2ae62:	6960      	ldr	r0, [r4, #20]
   2ae64:	40c8      	lsrs	r0, r1
   2ae66:	f010 0001 	ands.w	r0, r0, #1
   2ae6a:	d052      	beq.n	2af12 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
   2ae6c:	69a2      	ldr	r2, [r4, #24]
   2ae6e:	40ca      	lsrs	r2, r1
   2ae70:	07d2      	lsls	r2, r2, #31
   2ae72:	d446      	bmi.n	2af02 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0)
   2ae74:	6922      	ldr	r2, [r4, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2ae76:	69e0      	ldr	r0, [r4, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
   2ae78:	40ca      	lsrs	r2, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2ae7a:	fa20 f101 	lsr.w	r1, r0, r1
			} else if (((data->active_level & BIT(pin)) != 0)
   2ae7e:	f002 0201 	and.w	r2, r2, #1
   2ae82:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   2ae86:	428a      	cmp	r2, r1
   2ae88:	bf0c      	ite	eq
   2ae8a:	2102      	moveq	r1, #2
   2ae8c:	2101      	movne	r1, #1
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   2ae8e:	4f2e      	ldr	r7, [pc, #184]	; (2af48 <gpiote_pin_int_cfg+0x168>)
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   2ae90:	2500      	movs	r5, #0
   2ae92:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   2ae96:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   2ae9a:	f010 0003 	ands.w	r0, r0, #3
   2ae9e:	d132      	bne.n	2af06 <gpiote_pin_int_cfg+0x126>
			nrf_gpiote_events_t evt =
   2aea0:	00ac      	lsls	r4, r5, #2
   2aea2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2aea6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2aeaa:	021b      	lsls	r3, r3, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2aeac:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   2aeb0:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   2aeb4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   2aeb8:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2aebc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   2aec0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   2aec4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    return ((uint32_t)NRF_GPIOTE + event);
   2aec8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   2aecc:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2aed0:	4331      	orrs	r1, r6
   2aed2:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2aed6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   2aed8:	681b      	ldr	r3, [r3, #0]
   2aeda:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2aedc:	9b01      	ldr	r3, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2aede:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   2aee2:	f043 0301 	orr.w	r3, r3, #1
   2aee6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   2aeea:	2301      	movs	r3, #1
   2aeec:	fa03 f505 	lsl.w	r5, r3, r5
    NRF_GPIOTE->INTENSET = mask;
   2aef0:	f8c7 5304 	str.w	r5, [r7, #772]	; 0x304
}
   2aef4:	b003      	add	sp, #12
   2aef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2aef8:	3201      	adds	r2, #1
   2aefa:	2a08      	cmp	r2, #8
   2aefc:	f47f af7e 	bne.w	2adfc <gpiote_pin_int_cfg+0x1c>
   2af00:	e798      	b.n	2ae34 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2af02:	2103      	movs	r1, #3
   2af04:	e7c3      	b.n	2ae8e <gpiote_pin_int_cfg+0xae>
   2af06:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2af08:	2d08      	cmp	r5, #8
   2af0a:	d1c2      	bne.n	2ae92 <gpiote_pin_int_cfg+0xb2>
	return -ENODEV;
   2af0c:	f06f 0012 	mvn.w	r0, #18
   2af10:	e7f0      	b.n	2aef4 <gpiote_pin_int_cfg+0x114>
			if (((data->active_level & BIT(pin)) != 0)
   2af12:	6923      	ldr	r3, [r4, #16]
			    ^ ((BIT(pin) & data->inverted) != 0)) {
   2af14:	69e4      	ldr	r4, [r4, #28]
			if (((data->active_level & BIT(pin)) != 0)
   2af16:	40cb      	lsrs	r3, r1
			    ^ ((BIT(pin) & data->inverted) != 0)) {
   2af18:	fa24 f101 	lsr.w	r1, r4, r1
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   2af1c:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
   2af20:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
   2af24:	f8c2 4700 	str.w	r4, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2af28:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
			if (((data->active_level & BIT(pin)) != 0)
   2af2c:	f003 0301 	and.w	r3, r3, #1
   2af30:	f001 0101 	and.w	r1, r1, #1
   2af34:	428b      	cmp	r3, r1
   2af36:	bf0c      	ite	eq
   2af38:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
   2af3c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   2af40:	4323      	orrs	r3, r4
   2af42:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
   2af46:	e7d5      	b.n	2aef4 <gpiote_pin_int_cfg+0x114>
   2af48:	40006000 	.word	0x40006000

0002af4c <gpio_nrfx_config>:
{
   2af4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af50:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   2af52:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2af54:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   2af58:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   2af5c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2af5e:	d04a      	beq.n	2aff6 <gpio_nrfx_config+0xaa>
   2af60:	dc2d      	bgt.n	2afbe <gpio_nrfx_config+0x72>
   2af62:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2af66:	d03e      	beq.n	2afe6 <gpio_nrfx_config+0x9a>
   2af68:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   2af6c:	d03f      	beq.n	2afee <gpio_nrfx_config+0xa2>
   2af6e:	bb68      	cbnz	r0, 2afcc <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   2af70:	f406 7740 	and.w	r7, r6, #768	; 0x300
   2af74:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2af78:	d03f      	beq.n	2affa <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
   2af7a:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   2af7e:	4263      	negs	r3, r4
   2af80:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   2af82:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   2af86:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2af8a:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   2af8c:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   2af90:	bf18      	it	ne
   2af92:	b2d4      	uxtbne	r4, r2
   2af94:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   2af98:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   2af9c:	bf12      	itee	ne
   2af9e:	46a1      	movne	r9, r4
		to_pin   = 31;
   2afa0:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0;
   2afa4:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2afa6:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   2afaa:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2afae:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2afb2:	45a1      	cmp	r9, r4
   2afb4:	d223      	bcs.n	2affe <gpio_nrfx_config+0xb2>
	return 0;
   2afb6:	2000      	movs	r0, #0
}
   2afb8:	b003      	add	sp, #12
   2afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2afbe:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   2afc2:	d016      	beq.n	2aff2 <gpio_nrfx_config+0xa6>
   2afc4:	dc05      	bgt.n	2afd2 <gpio_nrfx_config+0x86>
   2afc6:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   2afca:	d00e      	beq.n	2afea <gpio_nrfx_config+0x9e>
		return -EINVAL;
   2afcc:	f06f 0015 	mvn.w	r0, #21
   2afd0:	e7f2      	b.n	2afb8 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2afd2:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   2afd6:	d004      	beq.n	2afe2 <gpio_nrfx_config+0x96>
   2afd8:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   2afdc:	d1f6      	bne.n	2afcc <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
   2afde:	2007      	movs	r0, #7
		break;
   2afe0:	e7c6      	b.n	2af70 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   2afe2:	2006      	movs	r0, #6
		break;
   2afe4:	e7c4      	b.n	2af70 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   2afe6:	2001      	movs	r0, #1
		break;
   2afe8:	e7c2      	b.n	2af70 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   2afea:	2003      	movs	r0, #3
		break;
   2afec:	e7c0      	b.n	2af70 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   2afee:	2004      	movs	r0, #4
		break;
   2aff0:	e7be      	b.n	2af70 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   2aff2:	2005      	movs	r0, #5
		break;
   2aff4:	e7bc      	b.n	2af70 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   2aff6:	2002      	movs	r0, #2
   2aff8:	e7ba      	b.n	2af70 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   2affa:	2303      	movs	r3, #3
   2affc:	e7c1      	b.n	2af82 <gpio_nrfx_config+0x36>
	return port->config->config_info;
   2affe:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   2b002:	6892      	ldr	r2, [r2, #8]
   2b004:	7911      	ldrb	r1, [r2, #4]
   2b006:	f004 021f 	and.w	r2, r4, #31
   2b00a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   2b00e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2b012:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   2b016:	fa0b f204 	lsl.w	r2, fp, r4
   2b01a:	68a9      	ldr	r1, [r5, #8]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2b01c:	2b00      	cmp	r3, #0
   2b01e:	d025      	beq.n	2b06c <gpio_nrfx_config+0x120>
   2b020:	4311      	orrs	r1, r2
   2b022:	60a9      	str	r1, [r5, #8]
   2b024:	6969      	ldr	r1, [r5, #20]
   2b026:	9301      	str	r3, [sp, #4]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   2b028:	06b0      	lsls	r0, r6, #26
   2b02a:	bf4c      	ite	mi
   2b02c:	4311      	orrmi	r1, r2
   2b02e:	4391      	bicpl	r1, r2
   2b030:	6169      	str	r1, [r5, #20]
   2b032:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   2b034:	0670      	lsls	r0, r6, #25
   2b036:	bf4c      	ite	mi
   2b038:	4311      	orrmi	r1, r2
   2b03a:	4391      	bicpl	r1, r2
   2b03c:	61a9      	str	r1, [r5, #24]
   2b03e:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   2b040:	0770      	lsls	r0, r6, #29
   2b042:	bf4c      	ite	mi
   2b044:	4311      	orrmi	r1, r2
   2b046:	4391      	bicpl	r1, r2
   2b048:	6129      	str	r1, [r5, #16]
   2b04a:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   2b04c:	0630      	lsls	r0, r6, #24
   2b04e:	bf4c      	ite	mi
   2b050:	430a      	orrmi	r2, r1
   2b052:	ea21 0202 	bicpl.w	r2, r1, r2
   2b056:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2b058:	4621      	mov	r1, r4
   2b05a:	4640      	mov	r0, r8
   2b05c:	f7ff fec0 	bl	2ade0 <gpiote_pin_int_cfg>
		if (res != 0) {
   2b060:	2800      	cmp	r0, #0
   2b062:	d1a9      	bne.n	2afb8 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2b064:	3401      	adds	r4, #1
   2b066:	b2e4      	uxtb	r4, r4
   2b068:	9b01      	ldr	r3, [sp, #4]
   2b06a:	e7a2      	b.n	2afb2 <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2b06c:	ea21 0102 	bic.w	r1, r1, r2
   2b070:	e7d7      	b.n	2b022 <gpio_nrfx_config+0xd6>

0002b072 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2b072:	2901      	cmp	r1, #1
{
   2b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2b078:	bf18      	it	ne
   2b07a:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   2b07c:	6887      	ldr	r7, [r0, #8]
{
   2b07e:	4606      	mov	r6, r0
		to_pin   = pin;
   2b080:	bf12      	itee	ne
   2b082:	4625      	movne	r5, r4
		to_pin   = 31;
   2b084:	251f      	moveq	r5, #31
		from_pin = 0;
   2b086:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2b088:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2b08c:	42ac      	cmp	r4, r5
   2b08e:	d902      	bls.n	2b096 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   2b090:	2000      	movs	r0, #0
}
   2b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2b096:	68fb      	ldr	r3, [r7, #12]
   2b098:	fa08 f204 	lsl.w	r2, r8, r4
   2b09c:	ea23 0302 	bic.w	r3, r3, r2
   2b0a0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2b0a2:	4621      	mov	r1, r4
   2b0a4:	4630      	mov	r0, r6
   2b0a6:	f7ff fe9b 	bl	2ade0 <gpiote_pin_int_cfg>
		if (res != 0) {
   2b0aa:	2800      	cmp	r0, #0
   2b0ac:	d1f1      	bne.n	2b092 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2b0ae:	3401      	adds	r4, #1
   2b0b0:	b2e4      	uxtb	r4, r4
   2b0b2:	e7eb      	b.n	2b08c <gpio_nrfx_pin_disable_callback+0x1a>

0002b0b4 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2b0b4:	2901      	cmp	r1, #1
{
   2b0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2b0ba:	bf18      	it	ne
   2b0bc:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   2b0be:	6887      	ldr	r7, [r0, #8]
{
   2b0c0:	4606      	mov	r6, r0
		to_pin   = pin;
   2b0c2:	bf12      	itee	ne
   2b0c4:	4625      	movne	r5, r4
		to_pin   = 31;
   2b0c6:	251f      	moveq	r5, #31
		from_pin = 0;
   2b0c8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2b0ca:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2b0ce:	42ac      	cmp	r4, r5
   2b0d0:	d902      	bls.n	2b0d8 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   2b0d2:	2000      	movs	r0, #0
}
   2b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2b0d8:	68fb      	ldr	r3, [r7, #12]
   2b0da:	fa08 f204 	lsl.w	r2, r8, r4
   2b0de:	4313      	orrs	r3, r2
   2b0e0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2b0e2:	4621      	mov	r1, r4
   2b0e4:	4630      	mov	r0, r6
   2b0e6:	f7ff fe7b 	bl	2ade0 <gpiote_pin_int_cfg>
		if (res != 0) {
   2b0ea:	2800      	cmp	r0, #0
   2b0ec:	d1f2      	bne.n	2b0d4 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2b0ee:	3401      	adds	r4, #1
   2b0f0:	b2e4      	uxtb	r4, r4
   2b0f2:	e7ec      	b.n	2b0ce <gpio_nrfx_pin_enable_callback+0x1a>

0002b0f4 <pwm_nrf5_sw_get_cycles_per_sec>:
static int pwm_nrf5_sw_get_cycles_per_sec(struct device *dev, u32_t pwm,
					  u64_t *cycles)
{
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;
   2b0f4:	6803      	ldr	r3, [r0, #0]

	/* HF timer frequency is derived from 16MHz source with a prescaler */
	*cycles = 16000000UL / BIT(config->prescaler);
   2b0f6:	689b      	ldr	r3, [r3, #8]
   2b0f8:	79d9      	ldrb	r1, [r3, #7]
   2b0fa:	4b03      	ldr	r3, [pc, #12]	; (2b108 <pwm_nrf5_sw_get_cycles_per_sec+0x14>)
   2b0fc:	2000      	movs	r0, #0
   2b0fe:	40cb      	lsrs	r3, r1
   2b100:	e9c2 3000 	strd	r3, r0, [r2]

	return 0;
}
   2b104:	4770      	bx	lr
   2b106:	bf00      	nop
   2b108:	00f42400 	.word	0x00f42400

0002b10c <pwm_nrf5_sw_init>:
static int pwm_nrf5_sw_init(struct device *dev)
{
	struct pwm_config *config;
	NRF_TIMER_Type *timer;

	config = (struct pwm_config *)dev->config->config_info;
   2b10c:	6803      	ldr	r3, [r0, #0]
   2b10e:	689a      	ldr	r2, [r3, #8]
	timer = config->timer;
   2b110:	6813      	ldr	r3, [r2, #0]

	/* setup HF timer */
	timer->MODE = TIMER_MODE_MODE_Timer;
   2b112:	2000      	movs	r0, #0
   2b114:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	timer->PRESCALER = config->prescaler;
   2b118:	79d2      	ldrb	r2, [r2, #7]
   2b11a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;

	/* TODO: set shorts according to map_size if not 3, i.e. if NRF_TIMER
	 * supports more than 4 compares, then more channels can be supported.
	 */
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
   2b11e:	2208      	movs	r2, #8
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
   2b120:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
   2b124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	return 0;
}
   2b128:	4770      	bx	lr
	...

0002b12c <pwm_nrf5_sw_pin_set>:
{
   2b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	config = (struct pwm_config *)dev->config->config_info;
   2b130:	6804      	ldr	r4, [r0, #0]
	data = dev->driver_data;
   2b132:	6885      	ldr	r5, [r0, #8]
	config = (struct pwm_config *)dev->config->config_info;
   2b134:	f8d4 e008 	ldr.w	lr, [r4, #8]
{
   2b138:	b087      	sub	sp, #28
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
   2b13a:	f89e 6006 	ldrb.w	r6, [lr, #6]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
   2b13e:	b133      	cbz	r3, 2b14e <pwm_nrf5_sw_pin_set+0x22>
   2b140:	429a      	cmp	r2, r3
   2b142:	d004      	beq.n	2b14e <pwm_nrf5_sw_pin_set+0x22>
   2b144:	4628      	mov	r0, r5
   2b146:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
	for (i = 0; i < map_size; i++) {
   2b14a:	42b8      	cmp	r0, r7
   2b14c:	d11f      	bne.n	2b18e <pwm_nrf5_sw_pin_set+0x62>
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
   2b14e:	2000      	movs	r0, #0
   2b150:	b2c4      	uxtb	r4, r0
	for (i = 0; i < map_size; i++) {
   2b152:	42a6      	cmp	r6, r4
   2b154:	d826      	bhi.n	2b1a4 <pwm_nrf5_sw_pin_set+0x78>
   2b156:	1e74      	subs	r4, r6, #1
   2b158:	b2e4      	uxtb	r4, r4
	while (i--) {
   2b15a:	2cff      	cmp	r4, #255	; 0xff
   2b15c:	d162      	bne.n	2b224 <pwm_nrf5_sw_pin_set+0xf8>
		LOG_ERR("No more channels available");
   2b15e:	4b6f      	ldr	r3, [pc, #444]	; (2b31c <pwm_nrf5_sw_pin_set+0x1f0>)
   2b160:	681b      	ldr	r3, [r3, #0]
   2b162:	075a      	lsls	r2, r3, #29
   2b164:	d010      	beq.n	2b188 <pwm_nrf5_sw_pin_set+0x5c>
   2b166:	2301      	movs	r3, #1
   2b168:	f04f 0200 	mov.w	r2, #0
   2b16c:	f363 0202 	bfi	r2, r3, #0, #3
   2b170:	496b      	ldr	r1, [pc, #428]	; (2b320 <pwm_nrf5_sw_pin_set+0x1f4>)
   2b172:	4b6c      	ldr	r3, [pc, #432]	; (2b324 <pwm_nrf5_sw_pin_set+0x1f8>)
   2b174:	486c      	ldr	r0, [pc, #432]	; (2b328 <pwm_nrf5_sw_pin_set+0x1fc>)
   2b176:	1a5b      	subs	r3, r3, r1
   2b178:	f36f 02c5 	bfc	r2, #3, #3
   2b17c:	08db      	lsrs	r3, r3, #3
   2b17e:	f363 128f 	bfi	r2, r3, #6, #10
   2b182:	496a      	ldr	r1, [pc, #424]	; (2b32c <pwm_nrf5_sw_pin_set+0x200>)
   2b184:	f7d6 fde8 	bl	1d58 <log_1>
		return -ENOMEM;
   2b188:	f06f 000b 	mvn.w	r0, #11
   2b18c:	e0c3      	b.n	2b316 <pwm_nrf5_sw_pin_set+0x1ea>
		if ((data->map[i].pwm != pwm) &&
   2b18e:	6844      	ldr	r4, [r0, #4]
   2b190:	42a1      	cmp	r1, r4
   2b192:	d005      	beq.n	2b1a0 <pwm_nrf5_sw_pin_set+0x74>
   2b194:	6884      	ldr	r4, [r0, #8]
   2b196:	b11c      	cbz	r4, 2b1a0 <pwm_nrf5_sw_pin_set+0x74>
		    (data->map[i].pulse_cycles != 0) &&
   2b198:	682c      	ldr	r4, [r5, #0]
   2b19a:	42a2      	cmp	r2, r4
   2b19c:	f040 80a4 	bne.w	2b2e8 <pwm_nrf5_sw_pin_set+0x1bc>
   2b1a0:	3008      	adds	r0, #8
   2b1a2:	e7d2      	b.n	2b14a <pwm_nrf5_sw_pin_set+0x1e>
   2b1a4:	3001      	adds	r0, #1
		if (pwm == data->map[i].pwm) {
   2b1a6:	eb05 07c0 	add.w	r7, r5, r0, lsl #3
   2b1aa:	f857 7c04 	ldr.w	r7, [r7, #-4]
   2b1ae:	42b9      	cmp	r1, r7
   2b1b0:	d1ce      	bne.n	2b150 <pwm_nrf5_sw_pin_set+0x24>
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
   2b1b2:	f89e 7004 	ldrb.w	r7, [lr, #4]
	timer = config->timer;
   2b1b6:	f8de c000 	ldr.w	ip, [lr]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
   2b1ba:	4427      	add	r7, r4
   2b1bc:	00bf      	lsls	r7, r7, #2
   2b1be:	f107 4080 	add.w	r0, r7, #1073741824	; 0x40000000
   2b1c2:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   2b1c6:	4607      	mov	r7, r0
   2b1c8:	9001      	str	r0, [sp, #4]
   2b1ca:	2000      	movs	r0, #0
   2b1cc:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
	ppi_index = config->ppi_base + (channel << 1);
   2b1d0:	f89e e005 	ldrb.w	lr, [lr, #5]
   2b1d4:	eb0e 0e44 	add.w	lr, lr, r4, lsl #1
   2b1d8:	fa5f fa8e 	uxtb.w	sl, lr
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
   2b1dc:	f10a 0801 	add.w	r8, sl, #1
   2b1e0:	f04f 0e01 	mov.w	lr, #1
   2b1e4:	fa0e f808 	lsl.w	r8, lr, r8
   2b1e8:	fa0e f90a 	lsl.w	r9, lr, sl
   2b1ec:	ea48 0009 	orr.w	r0, r8, r9
   2b1f0:	9002      	str	r0, [sp, #8]
	NRF_GPIO->DIRSET = BIT(pwm);
   2b1f2:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
   2b1f6:	484e      	ldr	r0, [pc, #312]	; (2b330 <pwm_nrf5_sw_pin_set+0x204>)
   2b1f8:	9f02      	ldr	r7, [sp, #8]
   2b1fa:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
	NRF_GPIO->DIRSET = BIT(pwm);
   2b1fe:	fa0e f901 	lsl.w	r9, lr, r1
   2b202:	f8c8 9518 	str.w	r9, [r8, #1304]	; 0x518
	if (pulse_cycles == 0) {
   2b206:	b9c3      	cbnz	r3, 2b23a <pwm_nrf5_sw_pin_set+0x10e>
		NRF_GPIO->OUTCLR = BIT(pwm);
   2b208:	f8c8 950c 	str.w	r9, [r8, #1292]	; 0x50c
	data->map[channel].pulse_cycles = 0;
   2b20c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   2b210:	2300      	movs	r3, #0
   2b212:	60a3      	str	r3, [r4, #8]
   2b214:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
	for (channel = 0; channel < config->map_size; channel++) {
   2b218:	42ae      	cmp	r6, r5
   2b21a:	d160      	bne.n	2b2de <pwm_nrf5_sw_pin_set+0x1b2>
		timer->TASKS_STOP = 1;
   2b21c:	2301      	movs	r3, #1
   2b21e:	f8cc 3004 	str.w	r3, [ip, #4]
   2b222:	e05a      	b.n	2b2da <pwm_nrf5_sw_pin_set+0x1ae>
		if (data->map[i].pulse_cycles == 0) {
   2b224:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
   2b228:	1e60      	subs	r0, r4, #1
   2b22a:	68bf      	ldr	r7, [r7, #8]
   2b22c:	b2c0      	uxtb	r0, r0
   2b22e:	b10f      	cbz	r7, 2b234 <pwm_nrf5_sw_pin_set+0x108>
   2b230:	4604      	mov	r4, r0
   2b232:	e792      	b.n	2b15a <pwm_nrf5_sw_pin_set+0x2e>
	if (channel >= config->map_size) {
   2b234:	42a6      	cmp	r6, r4
   2b236:	d992      	bls.n	2b15e <pwm_nrf5_sw_pin_set+0x32>
   2b238:	e7bb      	b.n	2b1b2 <pwm_nrf5_sw_pin_set+0x86>
	} else if (pulse_cycles == period_cycles) {
   2b23a:	429a      	cmp	r2, r3
   2b23c:	d102      	bne.n	2b244 <pwm_nrf5_sw_pin_set+0x118>
		NRF_GPIO->OUTSET = BIT(pwm);
   2b23e:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508
		goto pin_set_pwm_off;
   2b242:	e7e3      	b.n	2b20c <pwm_nrf5_sw_pin_set+0xe0>
   2b244:	fa0f fb84 	sxth.w	fp, r4
   2b248:	ea4f 008b 	mov.w	r0, fp, lsl #2
		NRF_GPIO->OUTCLR = BIT(pwm);
   2b24c:	f8c8 950c 	str.w	r9, [r8, #1292]	; 0x50c
   2b250:	9004      	str	r0, [sp, #16]
   2b252:	4460      	add	r0, ip
	timer->EVENTS_COMPARE[channel] = 0;
   2b254:	2700      	movs	r7, #0
	div = period_cycles >> 16;
   2b256:	ea4f 4812 	mov.w	r8, r2, lsr #16
	timer->EVENTS_COMPARE[channel] = 0;
   2b25a:	f8c0 7140 	str.w	r7, [r0, #320]	; 0x140
   2b25e:	9003      	str	r0, [sp, #12]
	timer->CC[channel] = pulse_cycles >> div;
   2b260:	fa23 f008 	lsr.w	r0, r3, r8
   2b264:	eb0c 0986 	add.w	r9, ip, r6, lsl #2
   2b268:	9005      	str	r0, [sp, #20]
   2b26a:	9803      	ldr	r0, [sp, #12]
	timer->EVENTS_COMPARE[config->map_size] = 0;
   2b26c:	f8c9 7140 	str.w	r7, [r9, #320]	; 0x140
	timer->CC[channel] = pulse_cycles >> div;
   2b270:	4607      	mov	r7, r0
	timer->CC[config->map_size] = period_cycles >> div;
   2b272:	fa22 f808 	lsr.w	r8, r2, r8
	timer->CC[channel] = pulse_cycles >> div;
   2b276:	9805      	ldr	r0, [sp, #20]
   2b278:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
	timer->CC[config->map_size] = period_cycles >> div;
   2b27c:	f8c9 8540 	str.w	r8, [r9, #1344]	; 0x540
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
   2b280:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2b338 <pwm_nrf5_sw_pin_set+0x20c>
   2b284:	9801      	ldr	r0, [sp, #4]
	timer->TASKS_CLEAR = 1;
   2b286:	f8cc e00c 	str.w	lr, [ip, #12]
   2b28a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
   2b28e:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
   2b292:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   2b296:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
   2b29a:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
   2b29e:	9804      	ldr	r0, [sp, #16]
				     &(timer->EVENTS_COMPARE[channel]);
   2b2a0:	3450      	adds	r4, #80	; 0x50
   2b2a2:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
   2b2a6:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
					 &(timer->EVENTS_COMPARE[
   2b2aa:	3650      	adds	r6, #80	; 0x50
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
   2b2ac:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
   2b2b0:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
					 &(timer->EVENTS_COMPARE[
   2b2b4:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
   2b2b8:	481d      	ldr	r0, [pc, #116]	; (2b330 <pwm_nrf5_sw_pin_set+0x204>)
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
   2b2ba:	f8c7 4514 	str.w	r4, [r7, #1300]	; 0x514
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
   2b2be:	f8c7 6518 	str.w	r6, [r7, #1304]	; 0x518
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
   2b2c2:	f8c7 451c 	str.w	r4, [r7, #1308]	; 0x51c
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
   2b2c6:	9c02      	ldr	r4, [sp, #8]
   2b2c8:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
	timer->TASKS_START = 1;
   2b2cc:	f8cc e000 	str.w	lr, [ip]
	data->period_cycles = period_cycles;
   2b2d0:	602a      	str	r2, [r5, #0]
   2b2d2:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
	data->map[channel].pulse_cycles = pulse_cycles;
   2b2d6:	e9c5 1301 	strd	r1, r3, [r5, #4]
	return 0;
   2b2da:	2000      	movs	r0, #0
   2b2dc:	e01b      	b.n	2b316 <pwm_nrf5_sw_pin_set+0x1ea>
		if (data->map[channel].pulse_cycles) {
   2b2de:	f855 3f08 	ldr.w	r3, [r5, #8]!
   2b2e2:	2b00      	cmp	r3, #0
   2b2e4:	d098      	beq.n	2b218 <pwm_nrf5_sw_pin_set+0xec>
   2b2e6:	e7f8      	b.n	2b2da <pwm_nrf5_sw_pin_set+0x1ae>
		LOG_ERR("Incompatible period");
   2b2e8:	4b0c      	ldr	r3, [pc, #48]	; (2b31c <pwm_nrf5_sw_pin_set+0x1f0>)
   2b2ea:	681b      	ldr	r3, [r3, #0]
   2b2ec:	075b      	lsls	r3, r3, #29
   2b2ee:	d010      	beq.n	2b312 <pwm_nrf5_sw_pin_set+0x1e6>
   2b2f0:	2301      	movs	r3, #1
   2b2f2:	f04f 0200 	mov.w	r2, #0
   2b2f6:	f363 0202 	bfi	r2, r3, #0, #3
   2b2fa:	4909      	ldr	r1, [pc, #36]	; (2b320 <pwm_nrf5_sw_pin_set+0x1f4>)
   2b2fc:	4b09      	ldr	r3, [pc, #36]	; (2b324 <pwm_nrf5_sw_pin_set+0x1f8>)
   2b2fe:	480d      	ldr	r0, [pc, #52]	; (2b334 <pwm_nrf5_sw_pin_set+0x208>)
   2b300:	1a5b      	subs	r3, r3, r1
   2b302:	f36f 02c5 	bfc	r2, #3, #3
   2b306:	08db      	lsrs	r3, r3, #3
   2b308:	f363 128f 	bfi	r2, r3, #6, #10
   2b30c:	4907      	ldr	r1, [pc, #28]	; (2b32c <pwm_nrf5_sw_pin_set+0x200>)
   2b30e:	f7d6 fd23 	bl	1d58 <log_1>
		return ret;
   2b312:	f06f 0015 	mvn.w	r0, #21
}
   2b316:	b007      	add	sp, #28
   2b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b31c:	2000d7cc 	.word	0x2000d7cc
   2b320:	0002cff8 	.word	0x0002cff8
   2b324:	0002d170 	.word	0x0002d170
   2b328:	00035330 	.word	0x00035330
   2b32c:	000352f4 	.word	0x000352f4
   2b330:	4001f000 	.word	0x4001f000
   2b334:	00035318 	.word	0x00035318
   2b338:	00130003 	.word	0x00130003

0002b33c <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b33c:	4b03      	ldr	r3, [pc, #12]	; (2b34c <uart_nrfx_err_check+0x10>)
   2b33e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   2b340:	b118      	cbz	r0, 2b34a <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2b342:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   2b346:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
   2b34a:	4770      	bx	lr
   2b34c:	40002124 	.word	0x40002124

0002b350 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   2b350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2b354:	2240      	movs	r2, #64	; 0x40
   2b356:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2b35a:	2000      	movs	r0, #0
   2b35c:	2203      	movs	r2, #3
   2b35e:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
   2b362:	f8c3 0720 	str.w	r0, [r3, #1824]	; 0x720
__STATIC_INLINE void nrf_uart_txrx_pins_set(NRF_UART_Type * p_reg, uint32_t pseltxd, uint32_t pselrxd)
{
#if defined(UART_PSEL_RXD_CONNECT_Pos)
    p_reg->PSEL.RXD = pselrxd;
#else
    p_reg->PSELRXD = pselrxd;
   2b366:	4b0c      	ldr	r3, [pc, #48]	; (2b398 <uart_nrfx_init+0x48>)
   2b368:	2208      	movs	r2, #8
   2b36a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#endif
#if defined(UART_PSEL_TXD_CONNECT_Pos)
    p_reg->PSEL.TXD = pseltxd;
#else
    p_reg->PSELTXD = pseltxd;
   2b36e:	2206      	movs	r2, #6
   2b370:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2b374:	4a09      	ldr	r2, [pc, #36]	; (2b39c <uart_nrfx_init+0x4c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   2b376:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   2b37a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   2b37e:	2204      	movs	r2, #4
   2b380:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b384:	4a06      	ldr	r2, [pc, #24]	; (2b3a0 <uart_nrfx_init+0x50>)
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   2b386:	b082      	sub	sp, #8
   2b388:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2b38a:	6812      	ldr	r2, [r2, #0]
   2b38c:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2b38e:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b390:	2201      	movs	r2, #1
   2b392:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(CONFIG_UART_0_IRQ_NUM);
#endif

	return 0;
}
   2b394:	b002      	add	sp, #8
   2b396:	4770      	bx	lr
   2b398:	40002000 	.word	0x40002000
   2b39c:	01d7e000 	.word	0x01d7e000
   2b3a0:	40002108 	.word	0x40002108

0002b3a4 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b3a4:	4b0a      	ldr	r3, [pc, #40]	; (2b3d0 <uart_nrfx_poll_out+0x2c>)
   2b3a6:	2200      	movs	r2, #0
   2b3a8:	601a      	str	r2, [r3, #0]
{
   2b3aa:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2b3ac:	681a      	ldr	r2, [r3, #0]
   2b3ae:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2b3b0:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b3b2:	4a08      	ldr	r2, [pc, #32]	; (2b3d4 <uart_nrfx_poll_out+0x30>)
   2b3b4:	2001      	movs	r0, #1
   2b3b6:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
   2b3b8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b3bc:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
   2b3be:	2a00      	cmp	r2, #0
   2b3c0:	d0fc      	beq.n	2b3bc <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b3c2:	4b05      	ldr	r3, [pc, #20]	; (2b3d8 <uart_nrfx_poll_out+0x34>)
   2b3c4:	2201      	movs	r2, #1
}
   2b3c6:	4608      	mov	r0, r1
   2b3c8:	601a      	str	r2, [r3, #0]
   2b3ca:	b002      	add	sp, #8
   2b3cc:	4770      	bx	lr
   2b3ce:	bf00      	nop
   2b3d0:	4000211c 	.word	0x4000211c
   2b3d4:	40002008 	.word	0x40002008
   2b3d8:	4000200c 	.word	0x4000200c

0002b3dc <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b3dc:	4b08      	ldr	r3, [pc, #32]	; (2b400 <uart_nrfx_poll_in+0x24>)
   2b3de:	681a      	ldr	r2, [r3, #0]
{
   2b3e0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   2b3e2:	b152      	cbz	r2, 2b3fa <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b3e4:	2000      	movs	r0, #0
   2b3e6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2b3e8:	681b      	ldr	r3, [r3, #0]
   2b3ea:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2b3ec:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   2b3ee:	4b05      	ldr	r3, [pc, #20]	; (2b404 <uart_nrfx_poll_in+0x28>)
   2b3f0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   2b3f4:	700b      	strb	r3, [r1, #0]
}
   2b3f6:	b002      	add	sp, #8
   2b3f8:	4770      	bx	lr
		return -1;
   2b3fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b3fe:	e7fa      	b.n	2b3f6 <uart_nrfx_poll_in+0x1a>
   2b400:	40002108 	.word	0x40002108
   2b404:	40002000 	.word	0x40002000

0002b408 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   2b408:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   2b40a:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   2b40c:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   2b40e:	f04f 0420 	mov.w	r4, #32
   2b412:	f3ef 8e11 	mrs	lr, BASEPRI
   2b416:	f384 8811 	msr	BASEPRI, r4
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2b41a:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2b41c:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   2b420:	1b9b      	subs	r3, r3, r6
   2b422:	403b      	ands	r3, r7
	if (available < len) {
   2b424:	429a      	cmp	r2, r3
		len = available;
   2b426:	bf88      	it	hi
   2b428:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2b42a:	18b4      	adds	r4, r6, r2
   2b42c:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   2b42e:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   2b430:	7004      	strb	r4, [r0, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b432:	f38e 8811 	msr	BASEPRI, lr
   2b436:	440a      	add	r2, r1
	u8_t *dst   = buf;
   2b438:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   2b43a:	42a2      	cmp	r2, r4
   2b43c:	d116      	bne.n	2b46c <rng_pool_get+0x64>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2b43e:	4566      	cmp	r6, ip
   2b440:	d109      	bne.n	2b456 <rng_pool_get+0x4e>
	__asm__ volatile(
   2b442:	f04f 0520 	mov.w	r5, #32
   2b446:	f3ef 8211 	mrs	r2, BASEPRI
   2b44a:	f385 8811 	msr	BASEPRI, r5
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   2b44e:	7805      	ldrb	r5, [r0, #0]
   2b450:	7045      	strb	r5, [r0, #1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b452:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(key);
	}

	len = dst - buf;
   2b456:	1a64      	subs	r4, r4, r1
   2b458:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   2b45a:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   2b45c:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   2b45e:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   2b460:	bf22      	ittt	cs
   2b462:	4b07      	ldrcs	r3, [pc, #28]	; (2b480 <rng_pool_get+0x78>)
   2b464:	2101      	movcs	r1, #1
   2b466:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
   2b468:	4610      	mov	r0, r2
   2b46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   2b46c:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   2b470:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2b472:	f89e e005 	ldrb.w	lr, [lr, #5]
   2b476:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   2b47a:	403d      	ands	r5, r7
   2b47c:	e7dd      	b.n	2b43a <rng_pool_get+0x32>
   2b47e:	bf00      	nop
   2b480:	4000d000 	.word	0x4000d000

0002b484 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   2b484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2b488:	4d11      	ldr	r5, [pc, #68]	; (2b4d0 <entropy_nrf5_get_entropy+0x4c>)
   2b48a:	460e      	mov	r6, r1
   2b48c:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2b48e:	f105 0845 	add.w	r8, r5, #69	; 0x45
   2b492:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   2b496:	b914      	cbnz	r4, 2b49e <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   2b498:	4620      	mov	r0, r4
   2b49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b49e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b4a2:	4628      	mov	r0, r5
   2b4a4:	f000 ff92 	bl	2c3cc <_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2b4a8:	4622      	mov	r2, r4
   2b4aa:	4631      	mov	r1, r6
   2b4ac:	4640      	mov	r0, r8
   2b4ae:	f7ff ffab 	bl	2b408 <rng_pool_get>
   2b4b2:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2b4b4:	4628      	mov	r0, r5
   2b4b6:	f000 ff62 	bl	2c37e <_impl_k_sem_give>
		if (bytes == 0) {
   2b4ba:	b92f      	cbnz	r7, 2b4c8 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   2b4bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b4c0:	4648      	mov	r0, r9
   2b4c2:	f000 ff83 	bl	2c3cc <_impl_k_sem_take>
			continue;
   2b4c6:	e7e6      	b.n	2b496 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   2b4c8:	1be4      	subs	r4, r4, r7
   2b4ca:	b2a4      	uxth	r4, r4
		buf += bytes;
   2b4cc:	443e      	add	r6, r7
   2b4ce:	e7e2      	b.n	2b496 <entropy_nrf5_get_entropy+0x12>
   2b4d0:	20002e08 	.word	0x20002e08

0002b4d4 <random_byte_get>:
{
   2b4d4:	b082      	sub	sp, #8
	__asm__ volatile(
   2b4d6:	f04f 0320 	mov.w	r3, #32
   2b4da:	f3ef 8211 	mrs	r2, BASEPRI
   2b4de:	f383 8811 	msr	BASEPRI, r3
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2b4e2:	4b09      	ldr	r3, [pc, #36]	; (2b508 <random_byte_get+0x34>)
   2b4e4:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   2b4e6:	b161      	cbz	r1, 2b502 <random_byte_get+0x2e>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   2b4e8:	4908      	ldr	r1, [pc, #32]	; (2b50c <random_byte_get+0x38>)
   2b4ea:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   2b4ee:	2100      	movs	r1, #0
   2b4f0:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2b4f2:	681b      	ldr	r3, [r3, #0]
   2b4f4:	9301      	str	r3, [sp, #4]
    (void)dummy;
   2b4f6:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
   2b4f8:	b2c0      	uxtb	r0, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b4fa:	f382 8811 	msr	BASEPRI, r2
}
   2b4fe:	b002      	add	sp, #8
   2b500:	4770      	bx	lr
	int retval = -EAGAIN;
   2b502:	f06f 000a 	mvn.w	r0, #10
   2b506:	e7f8      	b.n	2b4fa <random_byte_get+0x26>
   2b508:	4000d100 	.word	0x4000d100
   2b50c:	4000d000 	.word	0x4000d000

0002b510 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   2b510:	07db      	lsls	r3, r3, #31
{
   2b512:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2b516:	4688      	mov	r8, r1
   2b518:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   2b51a:	d405      	bmi.n	2b528 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2b51c:	481d      	ldr	r0, [pc, #116]	; (2b594 <entropy_nrf5_get_entropy_isr+0x84>)
   2b51e:	f7ff ff73 	bl	2b408 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   2b522:	b002      	add	sp, #8
   2b524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   2b528:	b372      	cbz	r2, 2b588 <entropy_nrf5_get_entropy_isr+0x78>
	__asm__ volatile(
   2b52a:	f04f 0320 	mov.w	r3, #32
   2b52e:	f3ef 8511 	mrs	r5, BASEPRI
   2b532:	f383 8811 	msr	BASEPRI, r3
		irq_enabled = irq_is_enabled(RNG_IRQn);
   2b536:	200d      	movs	r0, #13
   2b538:	f7da fa0c 	bl	5954 <_arch_irq_is_enabled>
   2b53c:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   2b53e:	200d      	movs	r0, #13
   2b540:	f7da f9f4 	bl	592c <_arch_irq_disable>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b544:	f385 8811 	msr	BASEPRI, r5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   2b548:	4e13      	ldr	r6, [pc, #76]	; (2b598 <entropy_nrf5_get_entropy_isr+0x88>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b54a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2b5a0 <entropy_nrf5_get_entropy_isr+0x90>
   2b54e:	2200      	movs	r2, #0
   2b550:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2b552:	6832      	ldr	r2, [r6, #0]
   2b554:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2b556:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   2b558:	4a10      	ldr	r2, [pc, #64]	; (2b59c <entropy_nrf5_get_entropy_isr+0x8c>)
   2b55a:	2101      	movs	r1, #1
   2b55c:	6011      	str	r1, [r2, #0]
   2b55e:	4625      	mov	r5, r4
   2b560:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2b564:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   2b566:	b18b      	cbz	r3, 2b58c <entropy_nrf5_get_entropy_isr+0x7c>
			byte = random_byte_get();
   2b568:	f7ff ffb4 	bl	2b4d4 <random_byte_get>
			if (byte < 0) {
   2b56c:	2800      	cmp	r0, #0
   2b56e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   2b572:	dbf7      	blt.n	2b564 <entropy_nrf5_get_entropy_isr+0x54>
   2b574:	3d01      	subs	r5, #1
   2b576:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   2b578:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   2b57c:	2d00      	cmp	r5, #0
   2b57e:	d1f1      	bne.n	2b564 <entropy_nrf5_get_entropy_isr+0x54>
		if (irq_enabled) {
   2b580:	b117      	cbz	r7, 2b588 <entropy_nrf5_get_entropy_isr+0x78>
			irq_enable(RNG_IRQn);
   2b582:	200d      	movs	r0, #13
   2b584:	f7da f9c2 	bl	590c <_arch_irq_enable>
	return cnt;
   2b588:	4620      	mov	r0, r4
   2b58a:	e7ca      	b.n	2b522 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   2b58c:	bf20      	wfe
				__SEV();
   2b58e:	bf40      	sev
				__WFE();
   2b590:	bf20      	wfe
   2b592:	e7e7      	b.n	2b564 <entropy_nrf5_get_entropy_isr+0x54>
   2b594:	20002e38 	.word	0x20002e38
   2b598:	4000d100 	.word	0x4000d100
   2b59c:	4000d000 	.word	0x4000d000
   2b5a0:	e000e100 	.word	0xe000e100

0002b5a4 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   2b5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   2b5a6:	4c1d      	ldr	r4, [pc, #116]	; (2b61c <entropy_nrf5_init+0x78>)
   2b5a8:	2201      	movs	r2, #1
   2b5aa:	4611      	mov	r1, r2
   2b5ac:	4620      	mov	r0, r4
   2b5ae:	f000 fedd 	bl	2c36c <_impl_k_sem_init>
   2b5b2:	f104 0018 	add.w	r0, r4, #24
   2b5b6:	2201      	movs	r2, #1
   2b5b8:	2100      	movs	r1, #0
   2b5ba:	f000 fed7 	bl	2c36c <_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2b5be:	2307      	movs	r3, #7
   2b5c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	rngp->threshold	  = threshold;
   2b5c4:	2304      	movs	r3, #4
   2b5c6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	rngp->first_alloc = 0;
   2b5ca:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2b5ce:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->mask	  = size - 1;
   2b5d0:	230c      	movs	r3, #12
   2b5d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0;
   2b5d6:	2500      	movs	r5, #0
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   2b5d8:	4b11      	ldr	r3, [pc, #68]	; (2b620 <entropy_nrf5_init+0x7c>)
   2b5da:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0;
   2b5de:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	rngp->last	  = 0;
   2b5e2:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
   2b5e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2b5ea:	f042 0201 	orr.w	r2, r2, #1
   2b5ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   2b5f2:	4a0c      	ldr	r2, [pc, #48]	; (2b624 <entropy_nrf5_init+0x80>)
   2b5f4:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   2b5f6:	6812      	ldr	r2, [r2, #0]
   2b5f8:	9201      	str	r2, [sp, #4]
    (void)dummy;
   2b5fa:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
   2b5fc:	2201      	movs	r2, #1
   2b5fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   2b602:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   2b604:	601a      	str	r2, [r3, #0]
   2b606:	200d      	movs	r0, #13
   2b608:	462a      	mov	r2, r5
   2b60a:	f7da f9b1 	bl	5970 <_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   2b60e:	200d      	movs	r0, #13
   2b610:	f7da f97c 	bl	590c <_arch_irq_enable>

	return 0;
}
   2b614:	4628      	mov	r0, r5
   2b616:	b003      	add	sp, #12
   2b618:	bd30      	pop	{r4, r5, pc}
   2b61a:	bf00      	nop
   2b61c:	20002e08 	.word	0x20002e08
   2b620:	4000d000 	.word	0x4000d000
   2b624:	4000d100 	.word	0x4000d100

0002b628 <isr>:
{
   2b628:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2b62a:	f7ff ff53 	bl	2b4d4 <random_byte_get>
	if (byte < 0) {
   2b62e:	2800      	cmp	r0, #0
   2b630:	db20      	blt.n	2b674 <isr+0x4c>
	u8_t last  = rngp->last;
   2b632:	4b17      	ldr	r3, [pc, #92]	; (2b690 <isr+0x68>)
   2b634:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   2b638:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   2b63c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   2b640:	1a51      	subs	r1, r2, r1
   2b642:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2b646:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   2b648:	d10d      	bne.n	2b666 <isr+0x3e>
	u8_t last  = rngp->last;
   2b64a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2b64e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   2b652:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   2b656:	1a51      	subs	r1, r2, r1
   2b658:	ea34 0101 	bics.w	r1, r4, r1
   2b65c:	d10b      	bne.n	2b676 <isr+0x4e>
   2b65e:	4b0d      	ldr	r3, [pc, #52]	; (2b694 <isr+0x6c>)
   2b660:	2201      	movs	r2, #1
   2b662:	601a      	str	r2, [r3, #0]
   2b664:	e00e      	b.n	2b684 <isr+0x5c>
	rngp->buffer[last] = byte;
   2b666:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2b668:	3201      	adds	r2, #1
   2b66a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2b66c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   2b670:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   2b674:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   2b676:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2b678:	3201      	adds	r2, #1
   2b67a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2b67c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   2b680:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2b684:	4804      	ldr	r0, [pc, #16]	; (2b698 <isr+0x70>)
}
   2b686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b68a:	f000 be78 	b.w	2c37e <_impl_k_sem_give>
   2b68e:	bf00      	nop
   2b690:	20002e08 	.word	0x20002e08
   2b694:	4000d004 	.word	0x4000d004
   2b698:	20002e20 	.word	0x20002e20

0002b69c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(s32_t level)
{
   2b69c:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   2b69e:	4b08      	ldr	r3, [pc, #32]	; (2b6c0 <_sys_device_do_config_level+0x24>)
   2b6a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2b6a4:	3001      	adds	r0, #1
   2b6a6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2b6aa:	4620      	mov	r0, r4
   2b6ac:	4285      	cmp	r5, r0
   2b6ae:	f104 040c 	add.w	r4, r4, #12
   2b6b2:	d800      	bhi.n	2b6b6 <_sys_device_do_config_level+0x1a>
		struct device_config *device_conf = info->config;

		(void)device_conf->init(info);
		_k_object_init(info);
	}
}
   2b6b4:	bd38      	pop	{r3, r4, r5, pc}
		(void)device_conf->init(info);
   2b6b6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2b6ba:	685b      	ldr	r3, [r3, #4]
   2b6bc:	4798      	blx	r3
   2b6be:	e7f4      	b.n	2b6aa <_sys_device_do_config_level+0xe>
   2b6c0:	00035370 	.word	0x00035370

0002b6c4 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   2b6c4:	4b10      	ldr	r3, [pc, #64]	; (2b708 <device_get_binding+0x44>)
{
   2b6c6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   2b6c8:	4c10      	ldr	r4, [pc, #64]	; (2b70c <device_get_binding+0x48>)
{
   2b6ca:	4605      	mov	r5, r0
   2b6cc:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   2b6ce:	429c      	cmp	r4, r3
   2b6d0:	d104      	bne.n	2b6dc <device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   2b6d2:	4c0e      	ldr	r4, [pc, #56]	; (2b70c <device_get_binding+0x48>)
   2b6d4:	42b4      	cmp	r4, r6
   2b6d6:	d109      	bne.n	2b6ec <device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2b6d8:	2400      	movs	r4, #0
   2b6da:	e012      	b.n	2b702 <device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   2b6dc:	6862      	ldr	r2, [r4, #4]
   2b6de:	b11a      	cbz	r2, 2b6e8 <device_get_binding+0x24>
		    (info->config->name == name)) {
   2b6e0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   2b6e2:	6812      	ldr	r2, [r2, #0]
   2b6e4:	42aa      	cmp	r2, r5
   2b6e6:	d00c      	beq.n	2b702 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2b6e8:	340c      	adds	r4, #12
   2b6ea:	e7f0      	b.n	2b6ce <device_get_binding+0xa>
		if (info->driver_api == NULL) {
   2b6ec:	6863      	ldr	r3, [r4, #4]
   2b6ee:	b90b      	cbnz	r3, 2b6f4 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2b6f0:	340c      	adds	r4, #12
   2b6f2:	e7ef      	b.n	2b6d4 <device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   2b6f4:	6823      	ldr	r3, [r4, #0]
   2b6f6:	4628      	mov	r0, r5
   2b6f8:	6819      	ldr	r1, [r3, #0]
   2b6fa:	f7da fb77 	bl	5dec <strcmp>
   2b6fe:	2800      	cmp	r0, #0
   2b700:	d1f6      	bne.n	2b6f0 <device_get_binding+0x2c>
}
   2b702:	4620      	mov	r0, r4
   2b704:	bd70      	pop	{r4, r5, r6, pc}
   2b706:	bf00      	nop
   2b708:	2000d710 	.word	0x2000d710
   2b70c:	2000d614 	.word	0x2000d614

0002b710 <_impl_z_errno>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *_impl_z_errno(void)
{
	return &_current->errno_var;
   2b710:	4b01      	ldr	r3, [pc, #4]	; (2b718 <_impl_z_errno+0x8>)
   2b712:	6898      	ldr	r0, [r3, #8]
}
   2b714:	3054      	adds	r0, #84	; 0x54
   2b716:	4770      	bx	lr
   2b718:	200031a8 	.word	0x200031a8

0002b71c <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	z_clock_idle_exit();
   2b71c:	f7d9 bee8 	b.w	54f0 <z_clock_idle_exit>

0002b720 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2b720:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2b722:	4d0a      	ldr	r5, [pc, #40]	; (2b74c <idle+0x2c>)
	__asm__ volatile(
   2b724:	f04f 0220 	mov.w	r2, #32
   2b728:	f3ef 8311 	mrs	r3, BASEPRI
   2b72c:	f382 8811 	msr	BASEPRI, r2
		k_yield();
	}
#else
	for (;;) {
		(void)irq_lock();
		sys_power_save_idle(_get_next_timeout_expiry());
   2b730:	f001 f8d8 	bl	2c8e4 <_get_next_timeout_expiry>
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
   2b734:	2101      	movs	r1, #1
   2b736:	2802      	cmp	r0, #2
		sys_power_save_idle(_get_next_timeout_expiry());
   2b738:	4604      	mov	r4, r0
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
   2b73a:	bfd8      	it	le
   2b73c:	4608      	movle	r0, r1
   2b73e:	f7d9 fed3 	bl	54e8 <z_clock_set_timeout>
	_kernel.idle = ticks;
   2b742:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   2b744:	f7da f970 	bl	5a28 <k_cpu_idle>
   2b748:	e7ec      	b.n	2b724 <idle+0x4>
   2b74a:	bf00      	nop
   2b74c:	200031a8 	.word	0x200031a8

0002b750 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
   2b750:	4802      	ldr	r0, [pc, #8]	; (2b75c <_bss_zero+0xc>)
   2b752:	4a03      	ldr	r2, [pc, #12]	; (2b760 <_bss_zero+0x10>)
   2b754:	2100      	movs	r1, #0
   2b756:	1a12      	subs	r2, r2, r0
   2b758:	f7da bbc3 	b.w	5ee2 <memset>
   2b75c:	20000000 	.word	0x20000000
   2b760:	20003254 	.word	0x20003254

0002b764 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   2b764:	4802      	ldr	r0, [pc, #8]	; (2b770 <_data_copy+0xc>)
   2b766:	4a03      	ldr	r2, [pc, #12]	; (2b774 <_data_copy+0x10>)
   2b768:	4903      	ldr	r1, [pc, #12]	; (2b778 <_data_copy+0x14>)
   2b76a:	1a12      	subs	r2, r2, r0
   2b76c:	f7da bb8c 	b.w	5e88 <memcpy>
   2b770:	2000cc18 	.word	0x2000cc18
   2b774:	2000daa4 	.word	0x2000daa4
   2b778:	000353cc 	.word	0x000353cc

0002b77c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2b77c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2b77e:	2002      	movs	r0, #2
   2b780:	f7ff ff8c 	bl	2b69c <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   2b784:	4807      	ldr	r0, [pc, #28]	; (2b7a4 <bg_thread_main+0x28>)
   2b786:	f7d5 fcb3 	bl	10f0 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   2b78a:	2003      	movs	r0, #3
   2b78c:	f7ff ff86 	bl	2b69c <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   2b790:	f000 ff06 	bl	2c5a0 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2b794:	f7d4 ffb2 	bl	6fc <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   2b798:	4a03      	ldr	r2, [pc, #12]	; (2b7a8 <bg_thread_main+0x2c>)
   2b79a:	7b13      	ldrb	r3, [r2, #12]
   2b79c:	f023 0301 	bic.w	r3, r3, #1
   2b7a0:	7313      	strb	r3, [r2, #12]
}
   2b7a2:	bd08      	pop	{r3, pc}
   2b7a4:	00035394 	.word	0x00035394
   2b7a8:	20002ec8 	.word	0x20002ec8

0002b7ac <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   2b7ac:	b580      	push	{r7, lr}
   2b7ae:	b086      	sub	sp, #24
   2b7b0:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   2b7b2:	f7d9 ff11 	bl	55d8 <_IntLibInit>

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
   2b7b6:	f7d6 fa13 	bl	1be0 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   2b7ba:	4b31      	ldr	r3, [pc, #196]	; (2b880 <_Cstart+0xd4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2b7bc:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2b7c0:	4b30      	ldr	r3, [pc, #192]	; (2b884 <_Cstart+0xd8>)
	_kernel.ready_q.cache = _main_thread;
   2b7c2:	4e31      	ldr	r6, [pc, #196]	; (2b888 <_Cstart+0xdc>)
   2b7c4:	4d31      	ldr	r5, [pc, #196]	; (2b88c <_Cstart+0xe0>)
   2b7c6:	2400      	movs	r4, #0
   2b7c8:	22e0      	movs	r2, #224	; 0xe0
   2b7ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   2b7ce:	77dc      	strb	r4, [r3, #31]
   2b7d0:	761c      	strb	r4, [r3, #24]
   2b7d2:	765c      	strb	r4, [r3, #25]
   2b7d4:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2b7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2b7d8:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   2b7dc:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   2b7de:	f7da f88d 	bl	58fc <_FaultInit>
	_CpuIdleInit();
   2b7e2:	f7da f91b 	bl	5a1c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2b7e6:	4620      	mov	r0, r4
   2b7e8:	f7ff ff58 	bl	2b69c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2b7ec:	2001      	movs	r0, #1
   2b7ee:	f7ff ff55 	bl	2b69c <_sys_device_do_config_level>
	_sched_init();
   2b7f2:	f000 fd13 	bl	2c21c <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   2b7f6:	4b26      	ldr	r3, [pc, #152]	; (2b890 <_Cstart+0xe4>)
	_kernel.ready_q.cache = _main_thread;
   2b7f8:	6275      	str	r5, [r6, #36]	; 0x24
	_setup_new_thread(_main_thread, _main_stack,
   2b7fa:	9305      	str	r3, [sp, #20]
   2b7fc:	2301      	movs	r3, #1
   2b7fe:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2b802:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2b806:	9400      	str	r4, [sp, #0]
   2b808:	4b22      	ldr	r3, [pc, #136]	; (2b894 <_Cstart+0xe8>)
   2b80a:	4923      	ldr	r1, [pc, #140]	; (2b898 <_Cstart+0xec>)
   2b80c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2b810:	4628      	mov	r0, r5
   2b812:	f000 fe6b 	bl	2c4ec <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b816:	7b6b      	ldrb	r3, [r5, #13]
   2b818:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2b81c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b820:	736a      	strb	r2, [r5, #13]
   2b822:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2b824:	d105      	bne.n	2b832 <_Cstart+0x86>
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
   2b826:	6a2b      	ldr	r3, [r5, #32]
   2b828:	3301      	adds	r3, #1
   2b82a:	d102      	bne.n	2b832 <_Cstart+0x86>
		_add_thread_to_ready_q(thread);
   2b82c:	4628      	mov	r0, r5
   2b82e:	f000 fc03 	bl	2c038 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   2b832:	4b1a      	ldr	r3, [pc, #104]	; (2b89c <_Cstart+0xf0>)
   2b834:	4e1a      	ldr	r6, [pc, #104]	; (2b8a0 <_Cstart+0xf4>)
   2b836:	9305      	str	r3, [sp, #20]
   2b838:	2201      	movs	r2, #1
   2b83a:	230f      	movs	r3, #15
   2b83c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   2b840:	2300      	movs	r3, #0
   2b842:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2b846:	9300      	str	r3, [sp, #0]
   2b848:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2b84c:	4b15      	ldr	r3, [pc, #84]	; (2b8a4 <_Cstart+0xf8>)
   2b84e:	4916      	ldr	r1, [pc, #88]	; (2b8a8 <_Cstart+0xfc>)
   2b850:	4630      	mov	r0, r6
   2b852:	f000 fe4b 	bl	2c4ec <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b856:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   2b858:	60e6      	str	r6, [r4, #12]
   2b85a:	f023 0304 	bic.w	r3, r3, #4
   2b85e:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
   2b860:	4b12      	ldr	r3, [pc, #72]	; (2b8ac <_Cstart+0x100>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
   2b862:	60a5      	str	r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   2b864:	e9c4 3306 	strd	r3, r3, [r4, #24]
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   2b868:	4a0a      	ldr	r2, [pc, #40]	; (2b894 <_Cstart+0xe8>)
   2b86a:	4b11      	ldr	r3, [pc, #68]	; (2b8b0 <_Cstart+0x104>)
   2b86c:	4c11      	ldr	r4, [pc, #68]	; (2b8b4 <_Cstart+0x108>)
   2b86e:	f383 8809 	msr	PSP, r3
   2b872:	b663      	cpsie	if
   2b874:	2100      	movs	r1, #0
   2b876:	f381 8811 	msr	BASEPRI, r1
   2b87a:	4610      	mov	r0, r2
   2b87c:	4720      	bx	r4
   2b87e:	bf00      	nop
   2b880:	2000c818 	.word	0x2000c818
   2b884:	e000ed00 	.word	0xe000ed00
   2b888:	200031a8 	.word	0x200031a8
   2b88c:	20002ec8 	.word	0x20002ec8
   2b890:	00033ad6 	.word	0x00033ad6
   2b894:	0002b77d 	.word	0x0002b77d
   2b898:	2000b6d8 	.word	0x2000b6d8
   2b89c:	00035388 	.word	0x00035388
   2b8a0:	20002e5c 	.word	0x20002e5c
   2b8a4:	0002b721 	.word	0x0002b721
   2b8a8:	2000bed8 	.word	0x2000bed8
   2b8ac:	200031c0 	.word	0x200031c0
   2b8b0:	2000bed8 	.word	0x2000bed8
   2b8b4:	00000975 	.word	0x00000975

0002b8b8 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   2b8b8:	4b0b      	ldr	r3, [pc, #44]	; (2b8e8 <init_mem_slab_module+0x30>)
   2b8ba:	480c      	ldr	r0, [pc, #48]	; (2b8ec <init_mem_slab_module+0x34>)
{
   2b8bc:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   2b8be:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   2b8c0:	4283      	cmp	r3, r0
   2b8c2:	d301      	bcc.n	2b8c8 <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   2b8c4:	2000      	movs	r0, #0
   2b8c6:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   2b8c8:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   2b8ca:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2b8cc:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   2b8ce:	2100      	movs	r1, #0
   2b8d0:	42a9      	cmp	r1, r5
   2b8d2:	d101      	bne.n	2b8d8 <init_mem_slab_module+0x20>
	     slab++) {
   2b8d4:	331c      	adds	r3, #28
   2b8d6:	e7f3      	b.n	2b8c0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   2b8d8:	695e      	ldr	r6, [r3, #20]
   2b8da:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   2b8dc:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   2b8de:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   2b8e0:	3101      	adds	r1, #1
		p += slab->block_size;
   2b8e2:	4432      	add	r2, r6
   2b8e4:	e7f4      	b.n	2b8d0 <init_mem_slab_module+0x18>
   2b8e6:	bf00      	nop
   2b8e8:	2000d808 	.word	0x2000d808
   2b8ec:	2000d85c 	.word	0x2000d85c

0002b8f0 <k_mem_slab_init>:
SYS_INIT(init_mem_slab_module, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, u32_t num_blocks)
{
   2b8f0:	b530      	push	{r4, r5, lr}
	slab->num_blocks = num_blocks;
	slab->block_size = block_size;
	slab->buffer = buffer;
	slab->num_used = 0;
   2b8f2:	2400      	movs	r4, #0
	slab->block_size = block_size;
   2b8f4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   2b8f8:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   2b8fc:	6101      	str	r1, [r0, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   2b8fe:	42a3      	cmp	r3, r4
   2b900:	d102      	bne.n	2b908 <k_mem_slab_init+0x18>
   2b902:	e9c0 0000 	strd	r0, r0, [r0]
	create_free_list(slab);
	_waitq_init(&slab->wait_q);
	SYS_TRACING_OBJ_INIT(k_mem_slab, slab);

	_k_object_init(slab);
}
   2b906:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2b908:	6945      	ldr	r5, [r0, #20]
   2b90a:	600d      	str	r5, [r1, #0]
	for (j = 0; j < slab->num_blocks; j++) {
   2b90c:	3401      	adds	r4, #1
		slab->free_list = p;
   2b90e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2b910:	4411      	add	r1, r2
   2b912:	e7f4      	b.n	2b8fe <k_mem_slab_init+0xe>

0002b914 <k_mem_slab_alloc>:

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2b914:	b538      	push	{r3, r4, r5, lr}
   2b916:	4603      	mov	r3, r0
   2b918:	460c      	mov	r4, r1
   2b91a:	f04f 0020 	mov.w	r0, #32
   2b91e:	f3ef 8511 	mrs	r5, BASEPRI
   2b922:	f380 8811 	msr	BASEPRI, r0
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   2b926:	6958      	ldr	r0, [r3, #20]
   2b928:	b150      	cbz	r0, 2b940 <k_mem_slab_alloc+0x2c>
		/* take a free block */
		*mem = slab->free_list;
   2b92a:	6020      	str	r0, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2b92c:	695a      	ldr	r2, [r3, #20]
   2b92e:	6812      	ldr	r2, [r2, #0]
   2b930:	615a      	str	r2, [r3, #20]
		slab->num_used++;
   2b932:	699a      	ldr	r2, [r3, #24]
   2b934:	3201      	adds	r2, #1
   2b936:	619a      	str	r2, [r3, #24]
		result = 0;
   2b938:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b93a:	f385 8811 	msr	BASEPRI, r5
		return result;
	}

	irq_unlock(key);

	return result;
   2b93e:	e00d      	b.n	2b95c <k_mem_slab_alloc+0x48>
	} else if (timeout == K_NO_WAIT) {
   2b940:	b91a      	cbnz	r2, 2b94a <k_mem_slab_alloc+0x36>
		*mem = NULL;
   2b942:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
   2b944:	f06f 000b 	mvn.w	r0, #11
   2b948:	e7f7      	b.n	2b93a <k_mem_slab_alloc+0x26>
		result = _pend_current_thread(key, &slab->wait_q, timeout);
   2b94a:	4619      	mov	r1, r3
   2b94c:	4628      	mov	r0, r5
   2b94e:	f000 fc1b 	bl	2c188 <_pend_current_thread>
		if (result == 0) {
   2b952:	b918      	cbnz	r0, 2b95c <k_mem_slab_alloc+0x48>
			*mem = _current->base.swap_data;
   2b954:	4b02      	ldr	r3, [pc, #8]	; (2b960 <k_mem_slab_alloc+0x4c>)
   2b956:	689b      	ldr	r3, [r3, #8]
   2b958:	695b      	ldr	r3, [r3, #20]
   2b95a:	6023      	str	r3, [r4, #0]
}
   2b95c:	bd38      	pop	{r3, r4, r5, pc}
   2b95e:	bf00      	nop
   2b960:	200031a8 	.word	0x200031a8

0002b964 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2b964:	b570      	push	{r4, r5, r6, lr}
   2b966:	4604      	mov	r4, r0
   2b968:	460d      	mov	r5, r1
	__asm__ volatile(
   2b96a:	f04f 0320 	mov.w	r3, #32
   2b96e:	f3ef 8611 	mrs	r6, BASEPRI
   2b972:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);
   2b976:	f000 faf4 	bl	2bf62 <_unpend_first_thread>

	if (pending_thread != NULL) {
   2b97a:	b180      	cbz	r0, 2b99e <k_mem_slab_free+0x3a>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   2b97c:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
   2b97e:	6142      	str	r2, [r0, #20]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2b980:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2b982:	2100      	movs	r1, #0
   2b984:	06d2      	lsls	r2, r2, #27
   2b986:	6681      	str	r1, [r0, #104]	; 0x68
   2b988:	d104      	bne.n	2b994 <k_mem_slab_free+0x30>
	if (_is_thread_ready(thread)) {
   2b98a:	6a03      	ldr	r3, [r0, #32]
   2b98c:	3301      	adds	r3, #1
   2b98e:	d101      	bne.n	2b994 <k_mem_slab_free+0x30>
		_add_thread_to_ready_q(thread);
   2b990:	f000 fb52 	bl	2c038 <_add_thread_to_ready_q>
		_ready_thread(pending_thread);
		_reschedule(key);
   2b994:	4630      	mov	r0, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		irq_unlock(key);
	}
}
   2b996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   2b99a:	f000 bafb 	b.w	2bf94 <_reschedule>
		**(char ***)mem = slab->free_list;
   2b99e:	682b      	ldr	r3, [r5, #0]
   2b9a0:	6962      	ldr	r2, [r4, #20]
   2b9a2:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2b9a4:	682b      	ldr	r3, [r5, #0]
   2b9a6:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2b9a8:	69a3      	ldr	r3, [r4, #24]
   2b9aa:	3b01      	subs	r3, #1
   2b9ac:	61a3      	str	r3, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b9ae:	f386 8811 	msr	BASEPRI, r6
}
   2b9b2:	bd70      	pop	{r4, r5, r6, pc}

0002b9b4 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2b9b4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   2b9b6:	4c07      	ldr	r4, [pc, #28]	; (2b9d4 <init_static_pools+0x20>)
   2b9b8:	4d07      	ldr	r5, [pc, #28]	; (2b9d8 <init_static_pools+0x24>)
   2b9ba:	42ac      	cmp	r4, r5
   2b9bc:	d301      	bcc.n	2b9c2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   2b9be:	2000      	movs	r0, #0
   2b9c0:	bd38      	pop	{r3, r4, r5, pc}
   2b9c2:	f104 0314 	add.w	r3, r4, #20
	_sys_mem_pool_base_init(&p->base);
   2b9c6:	4620      	mov	r0, r4
   2b9c8:	e9c4 3305 	strd	r3, r3, [r4, #20]
   2b9cc:	f7d5 f80e 	bl	9ec <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   2b9d0:	341c      	adds	r4, #28
   2b9d2:	e7f2      	b.n	2b9ba <init_static_pools+0x6>
   2b9d4:	2000d85c 	.word	0x2000d85c
   2b9d8:	2000d85c 	.word	0x2000d85c

0002b9dc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   2b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   2b9e0:	1e1d      	subs	r5, r3, #0
{
   2b9e2:	b085      	sub	sp, #20
   2b9e4:	4606      	mov	r6, r0
   2b9e6:	460c      	mov	r4, r1
   2b9e8:	4617      	mov	r7, r2
	if (timeout > 0) {
   2b9ea:	dd57      	ble.n	2ba9c <k_mem_pool_alloc+0xc0>
		end = z_tick_get() + _ms_to_ticks(timeout);
   2b9ec:	f001 f82c 	bl	2ca48 <z_tick_get>
   2b9f0:	4680      	mov	r8, r0
	return (s32_t)ceiling_fraction(
   2b9f2:	482b      	ldr	r0, [pc, #172]	; (2baa0 <k_mem_pool_alloc+0xc4>)
   2b9f4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2b9f8:	2100      	movs	r1, #0
   2b9fa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2b9fe:	2300      	movs	r3, #0
   2ba00:	fbcc 0105 	smlal	r0, r1, ip, r5
   2ba04:	f7d4 fc06 	bl	214 <__aeabi_ldivmod>
   2ba08:	eb18 0200 	adds.w	r2, r8, r0
	return pool - &_k_mem_pool_list_start[0];
   2ba0c:	4b25      	ldr	r3, [pc, #148]	; (2baa4 <k_mem_pool_alloc+0xc8>)
	s64_t end = 0;
   2ba0e:	4690      	mov	r8, r2
	return pool - &_k_mem_pool_list_start[0];
   2ba10:	1af3      	subs	r3, r6, r3
   2ba12:	4a25      	ldr	r2, [pc, #148]	; (2baa8 <k_mem_pool_alloc+0xcc>)
   2ba14:	109b      	asrs	r3, r3, #2
   2ba16:	fb02 fa03 	mul.w	sl, r2, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   2ba1a:	fa5f fa8a 	uxtb.w	sl, sl
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   2ba1e:	f106 0b14 	add.w	fp, r6, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   2ba22:	9400      	str	r4, [sp, #0]
   2ba24:	ab03      	add	r3, sp, #12
   2ba26:	aa02      	add	r2, sp, #8
   2ba28:	4639      	mov	r1, r7
   2ba2a:	4630      	mov	r0, r6
   2ba2c:	f7d5 f829 	bl	a82 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   2ba30:	f110 0f0b 	cmn.w	r0, #11
   2ba34:	d10b      	bne.n	2ba4e <k_mem_pool_alloc+0x72>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   2ba36:	9400      	str	r4, [sp, #0]
   2ba38:	ab03      	add	r3, sp, #12
   2ba3a:	aa02      	add	r2, sp, #8
   2ba3c:	4639      	mov	r1, r7
   2ba3e:	4630      	mov	r0, r6
   2ba40:	f7d5 f81f 	bl	a82 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   2ba44:	f110 0f0b 	cmn.w	r0, #11
   2ba48:	bf08      	it	eq
   2ba4a:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   2ba4e:	7963      	ldrb	r3, [r4, #5]
   2ba50:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   2ba52:	f884 a004 	strb.w	sl, [r4, #4]
		block->id.level = level_num;
   2ba56:	f362 0303 	bfi	r3, r2, #0, #4
   2ba5a:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   2ba5c:	6863      	ldr	r3, [r4, #4]
   2ba5e:	9a03      	ldr	r2, [sp, #12]
   2ba60:	f362 331f 	bfi	r3, r2, #12, #20
   2ba64:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   2ba66:	b1b0      	cbz	r0, 2ba96 <k_mem_pool_alloc+0xba>
   2ba68:	b1ad      	cbz	r5, 2ba96 <k_mem_pool_alloc+0xba>
   2ba6a:	f110 0f0c 	cmn.w	r0, #12
   2ba6e:	d112      	bne.n	2ba96 <k_mem_pool_alloc+0xba>
	__asm__ volatile(
   2ba70:	f04f 0320 	mov.w	r3, #32
   2ba74:	f3ef 8011 	mrs	r0, BASEPRI
   2ba78:	f383 8811 	msr	BASEPRI, r3
		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   2ba7c:	462a      	mov	r2, r5
   2ba7e:	4659      	mov	r1, fp
   2ba80:	f000 fb82 	bl	2c188 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   2ba84:	1c6b      	adds	r3, r5, #1
   2ba86:	d0cc      	beq.n	2ba22 <k_mem_pool_alloc+0x46>
			timeout = end - z_tick_get();
   2ba88:	f000 ffde 	bl	2ca48 <z_tick_get>

			if (timeout < 0) {
   2ba8c:	ebb8 0500 	subs.w	r5, r8, r0
   2ba90:	d5c7      	bpl.n	2ba22 <k_mem_pool_alloc+0x46>
				break;
			}
		}
	}

	return -EAGAIN;
   2ba92:	f06f 000a 	mvn.w	r0, #10
}
   2ba96:	b005      	add	sp, #20
   2ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   2ba9c:	2200      	movs	r2, #0
   2ba9e:	e7b5      	b.n	2ba0c <k_mem_pool_alloc+0x30>
   2baa0:	0004ffff 	.word	0x0004ffff
   2baa4:	2000d85c 	.word	0x2000d85c
   2baa8:	b6db6db7 	.word	0xb6db6db7

0002baac <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   2baac:	b570      	push	{r4, r5, r6, lr}
   2baae:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   2bab0:	6802      	ldr	r2, [r0, #0]
   2bab2:	7841      	ldrb	r1, [r0, #1]
   2bab4:	4e13      	ldr	r6, [pc, #76]	; (2bb04 <k_mem_pool_free_id+0x58>)
   2bab6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2baba:	00a4      	lsls	r4, r4, #2
   2babc:	0b12      	lsrs	r2, r2, #12
   2babe:	f001 010f 	and.w	r1, r1, #15
   2bac2:	1930      	adds	r0, r6, r4
   2bac4:	f7d5 f8b8 	bl	c38 <_sys_mem_pool_block_free>
   2bac8:	f04f 0320 	mov.w	r3, #32
   2bacc:	f3ef 8511 	mrs	r5, BASEPRI
   2bad0:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   2bad4:	f104 0014 	add.w	r0, r4, #20
   2bad8:	4430      	add	r0, r6
   2bada:	f000 fb8f 	bl	2c1fc <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   2bade:	b168      	cbz	r0, 2bafc <k_mem_pool_free_id+0x50>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2bae0:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   2bae4:	2b0d      	cmp	r3, #13
   2bae6:	d809      	bhi.n	2bafc <k_mem_pool_free_id+0x50>
   2bae8:	b11b      	cbz	r3, 2baf2 <k_mem_pool_free_id+0x46>
   2baea:	4b07      	ldr	r3, [pc, #28]	; (2bb08 <k_mem_pool_free_id+0x5c>)
   2baec:	685b      	ldr	r3, [r3, #4]
   2baee:	051b      	lsls	r3, r3, #20
   2baf0:	d504      	bpl.n	2bafc <k_mem_pool_free_id+0x50>
		_reschedule(key);
   2baf2:	4628      	mov	r0, r5
	} else {
		irq_unlock(key);
	}
}
   2baf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   2baf8:	f000 ba4c 	b.w	2bf94 <_reschedule>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2bafc:	f385 8811 	msr	BASEPRI, r5
}
   2bb00:	bd70      	pop	{r4, r5, r6, pc}
   2bb02:	bf00      	nop
   2bb04:	2000d85c 	.word	0x2000d85c
   2bb08:	e000ed00 	.word	0xe000ed00

0002bb0c <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   2bb0c:	b513      	push	{r0, r1, r4, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   2bb0e:	2404      	movs	r4, #4
   2bb10:	190a      	adds	r2, r1, r4
   2bb12:	d204      	bcs.n	2bb1e <k_mem_pool_malloc+0x12>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2bb14:	2300      	movs	r3, #0
   2bb16:	4669      	mov	r1, sp
   2bb18:	f7ff ff60 	bl	2b9dc <k_mem_pool_alloc>
   2bb1c:	b110      	cbz	r0, 2bb24 <k_mem_pool_malloc+0x18>
		return NULL;
   2bb1e:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   2bb20:	b002      	add	sp, #8
   2bb22:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   2bb24:	4622      	mov	r2, r4
   2bb26:	a901      	add	r1, sp, #4
   2bb28:	9800      	ldr	r0, [sp, #0]
   2bb2a:	f7da f9ad 	bl	5e88 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   2bb2e:	9800      	ldr	r0, [sp, #0]
   2bb30:	3004      	adds	r0, #4
   2bb32:	e7f5      	b.n	2bb20 <k_mem_pool_malloc+0x14>

0002bb34 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   2bb34:	b110      	cbz	r0, 2bb3c <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   2bb36:	3804      	subs	r0, #4
   2bb38:	f7ff bfb8 	b.w	2baac <k_mem_pool_free_id>
	}
}
   2bb3c:	4770      	bx	lr
	...

0002bb40 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   2bb40:	4b03      	ldr	r3, [pc, #12]	; (2bb50 <z_thread_malloc+0x10>)
   2bb42:	689b      	ldr	r3, [r3, #8]
{
   2bb44:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   2bb46:	6e18      	ldr	r0, [r3, #96]	; 0x60
   2bb48:	b108      	cbz	r0, 2bb4e <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   2bb4a:	f7ff bfdf 	b.w	2bb0c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2bb4e:	4770      	bx	lr
   2bb50:	200031a8 	.word	0x200031a8

0002bb54 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   2bb54:	b570      	push	{r4, r5, r6, lr}
   2bb56:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   2bb58:	492e      	ldr	r1, [pc, #184]	; (2bc14 <_impl_k_mutex_lock+0xc0>)
   2bb5a:	688a      	ldr	r2, [r1, #8]
   2bb5c:	7bd3      	ldrb	r3, [r2, #15]
   2bb5e:	3b01      	subs	r3, #1
   2bb60:	4604      	mov	r4, r0
   2bb62:	73d3      	strb	r3, [r2, #15]
	u32_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2bb64:	68c3      	ldr	r3, [r0, #12]
   2bb66:	4608      	mov	r0, r1
   2bb68:	b14b      	cbz	r3, 2bb7e <_impl_k_mutex_lock+0x2a>
   2bb6a:	68a2      	ldr	r2, [r4, #8]
   2bb6c:	6889      	ldr	r1, [r1, #8]
   2bb6e:	428a      	cmp	r2, r1
   2bb70:	d011      	beq.n	2bb96 <_impl_k_mutex_lock+0x42>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   2bb72:	b995      	cbnz	r5, 2bb9a <_impl_k_mutex_lock+0x46>
		k_sched_unlock();
   2bb74:	f000 fa26 	bl	2bfc4 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2bb78:	f06f 000f 	mvn.w	r0, #15
   2bb7c:	e00a      	b.n	2bb94 <_impl_k_mutex_lock+0x40>
					_current->base.prio :
   2bb7e:	688a      	ldr	r2, [r1, #8]
   2bb80:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2bb84:	6122      	str	r2, [r4, #16]
		mutex->lock_count++;
   2bb86:	3301      	adds	r3, #1
   2bb88:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2bb8a:	6883      	ldr	r3, [r0, #8]
   2bb8c:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   2bb8e:	f000 fa19 	bl	2bfc4 <k_sched_unlock>
		return 0;
   2bb92:	2000      	movs	r0, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2bb94:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   2bb96:	6922      	ldr	r2, [r4, #16]
   2bb98:	e7f4      	b.n	2bb84 <_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2bb9a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2bb9e:	f992 300e 	ldrsb.w	r3, [r2, #14]
   2bba2:	4299      	cmp	r1, r3
   2bba4:	bfa8      	it	ge
   2bba6:	4619      	movge	r1, r3
   2bba8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
   2bbac:	f04f 0320 	mov.w	r3, #32
   2bbb0:	f3ef 8611 	mrs	r6, BASEPRI
   2bbb4:	f383 8811 	msr	BASEPRI, r3
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2bbb8:	68a0      	ldr	r0, [r4, #8]
   2bbba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bbbe:	4299      	cmp	r1, r3
   2bbc0:	da01      	bge.n	2bbc6 <_impl_k_mutex_lock+0x72>
		_thread_priority_set(mutex->owner, new_prio);
   2bbc2:	f000 faef 	bl	2c1a4 <_thread_priority_set>
	s32_t got_mutex = _pend_current_thread(key, &mutex->wait_q, timeout);
   2bbc6:	462a      	mov	r2, r5
   2bbc8:	4621      	mov	r1, r4
   2bbca:	4630      	mov	r0, r6
   2bbcc:	f000 fadc 	bl	2c188 <_pend_current_thread>
	if (got_mutex == 0) {
   2bbd0:	2800      	cmp	r0, #0
   2bbd2:	d0dc      	beq.n	2bb8e <_impl_k_mutex_lock+0x3a>
	return list->head == list;
   2bbd4:	6823      	ldr	r3, [r4, #0]
   2bbd6:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bbd8:	429c      	cmp	r4, r3
   2bbda:	d007      	beq.n	2bbec <_impl_k_mutex_lock+0x98>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   2bbdc:	b133      	cbz	r3, 2bbec <_impl_k_mutex_lock+0x98>
   2bbde:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2bbe2:	4299      	cmp	r1, r3
   2bbe4:	bfa8      	it	ge
   2bbe6:	4619      	movge	r1, r3
   2bbe8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2bbec:	f04f 0320 	mov.w	r3, #32
   2bbf0:	f3ef 8511 	mrs	r5, BASEPRI
   2bbf4:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
   2bbf8:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2bbfa:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bbfe:	4299      	cmp	r1, r3
   2bc00:	d001      	beq.n	2bc06 <_impl_k_mutex_lock+0xb2>
		_thread_priority_set(mutex->owner, new_prio);
   2bc02:	f000 facf 	bl	2c1a4 <_thread_priority_set>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2bc06:	f385 8811 	msr	BASEPRI, r5
	k_sched_unlock();
   2bc0a:	f000 f9db 	bl	2bfc4 <k_sched_unlock>
	return -EAGAIN;
   2bc0e:	f06f 000a 	mvn.w	r0, #10
   2bc12:	e7bf      	b.n	2bb94 <_impl_k_mutex_lock+0x40>
   2bc14:	200031a8 	.word	0x200031a8

0002bc18 <_impl_k_mutex_unlock>:
   2bc18:	4b1b      	ldr	r3, [pc, #108]	; (2bc88 <_impl_k_mutex_unlock+0x70>)
   2bc1a:	689a      	ldr	r2, [r3, #8]
   2bc1c:	7bd3      	ldrb	r3, [r2, #15]
   2bc1e:	3b01      	subs	r3, #1
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2bc20:	b570      	push	{r4, r5, r6, lr}
   2bc22:	4604      	mov	r4, r0
   2bc24:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   2bc26:	68c3      	ldr	r3, [r0, #12]
   2bc28:	3b01      	subs	r3, #1
   2bc2a:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0U) {
   2bc2c:	bb3b      	cbnz	r3, 2bc7e <_impl_k_mutex_unlock+0x66>
	__asm__ volatile(
   2bc2e:	f04f 0320 	mov.w	r3, #32
   2bc32:	f3ef 8611 	mrs	r6, BASEPRI
   2bc36:	f383 8811 	msr	BASEPRI, r3
		goto k_mutex_unlock_return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2bc3a:	6901      	ldr	r1, [r0, #16]
   2bc3c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   2bc3e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bc42:	4299      	cmp	r1, r3
   2bc44:	d001      	beq.n	2bc4a <_impl_k_mutex_unlock+0x32>
		_thread_priority_set(mutex->owner, new_prio);
   2bc46:	f000 faad 	bl	2c1a4 <_thread_priority_set>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   2bc4a:	4620      	mov	r0, r4
   2bc4c:	f000 f989 	bl	2bf62 <_unpend_first_thread>
   2bc50:	4605      	mov	r5, r0

	mutex->owner = new_owner;
   2bc52:	60a0      	str	r0, [r4, #8]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
   2bc54:	b188      	cbz	r0, 2bc7a <_impl_k_mutex_unlock+0x62>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2bc56:	7b43      	ldrb	r3, [r0, #13]
   2bc58:	06db      	lsls	r3, r3, #27
   2bc5a:	d104      	bne.n	2bc66 <_impl_k_mutex_unlock+0x4e>
	if (_is_thread_ready(thread)) {
   2bc5c:	6a03      	ldr	r3, [r0, #32]
   2bc5e:	3301      	adds	r3, #1
   2bc60:	d101      	bne.n	2bc66 <_impl_k_mutex_unlock+0x4e>
		_add_thread_to_ready_q(thread);
   2bc62:	f000 f9e9 	bl	2c038 <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2bc66:	f386 8811 	msr	BASEPRI, r6
   2bc6a:	2300      	movs	r3, #0
   2bc6c:	66ab      	str	r3, [r5, #104]	; 0x68
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->lock_count++;
   2bc6e:	68e3      	ldr	r3, [r4, #12]
   2bc70:	3301      	adds	r3, #1
   2bc72:	60e3      	str	r3, [r4, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   2bc74:	f995 300e 	ldrsb.w	r3, [r5, #14]
   2bc78:	6123      	str	r3, [r4, #16]
   2bc7a:	f386 8811 	msr	BASEPRI, r6

	irq_unlock(key);

k_mutex_unlock_return:
	k_sched_unlock();
}
   2bc7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2bc82:	f000 b99f 	b.w	2bfc4 <k_sched_unlock>
   2bc86:	bf00      	nop
   2bc88:	200031a8 	.word	0x200031a8

0002bc8c <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc8e:	4604      	mov	r4, r0
   2bc90:	460e      	mov	r6, r1
   2bc92:	4617      	mov	r7, r2
	__asm__ volatile(
   2bc94:	f04f 0220 	mov.w	r2, #32
   2bc98:	f3ef 8511 	mrs	r5, BASEPRI
   2bc9c:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   2bca0:	b19b      	cbz	r3, 2bcca <queue_insert+0x3e>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   2bca2:	2008      	movs	r0, #8
   2bca4:	f7ff ff4c 	bl	2bb40 <z_thread_malloc>
		if (anode == NULL) {
   2bca8:	2800      	cmp	r0, #0
   2bcaa:	d032      	beq.n	2bd12 <queue_insert+0x86>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0, "flags too large");
	node->next_and_flags = flags;
   2bcac:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   2bcae:	6047      	str	r7, [r0, #4]
   2bcb0:	6003      	str	r3, [r0, #0]
   2bcb2:	6803      	ldr	r3, [r0, #0]
   2bcb4:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2bcb8:	b956      	cbnz	r6, 2bcd0 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bcba:	6823      	ldr	r3, [r4, #0]
   2bcbc:	4313      	orrs	r3, r2
   2bcbe:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2bcc0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2bcc2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2bcc4:	b96b      	cbnz	r3, 2bce2 <queue_insert+0x56>
	list->tail = node;
   2bcc6:	6060      	str	r0, [r4, #4]
   2bcc8:	e00b      	b.n	2bce2 <queue_insert+0x56>
	node->next_and_flags = flags;
   2bcca:	603b      	str	r3, [r7, #0]
   2bccc:	4638      	mov	r0, r7
   2bcce:	e7f0      	b.n	2bcb2 <queue_insert+0x26>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2bcd0:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2bcd2:	f033 0303 	bics.w	r3, r3, #3
   2bcd6:	d114      	bne.n	2bd02 <queue_insert+0x76>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bcd8:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2bcda:	6862      	ldr	r2, [r4, #4]
   2bcdc:	b95a      	cbnz	r2, 2bcf6 <queue_insert+0x6a>
	list->head = node;
   2bcde:	e9c4 0000 	strd	r0, r0, [r4]
	_handle_obj_poll_events(&queue->poll_events, state);
   2bce2:	2104      	movs	r1, #4
   2bce4:	f104 0008 	add.w	r0, r4, #8
   2bce8:	f001 f8c2 	bl	2ce70 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   2bcec:	4628      	mov	r0, r5
   2bcee:	f000 f951 	bl	2bf94 <_reschedule>
	return 0;
   2bcf2:	2000      	movs	r0, #0
}
   2bcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bcf6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bcf8:	f003 0303 	and.w	r3, r3, #3
   2bcfc:	4303      	orrs	r3, r0
   2bcfe:	6013      	str	r3, [r2, #0]
   2bd00:	e7e1      	b.n	2bcc6 <queue_insert+0x3a>
   2bd02:	4313      	orrs	r3, r2
   2bd04:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bd06:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bd08:	f003 0303 	and.w	r3, r3, #3
   2bd0c:	4318      	orrs	r0, r3
   2bd0e:	6030      	str	r0, [r6, #0]
   2bd10:	e7e7      	b.n	2bce2 <queue_insert+0x56>
			return -ENOMEM;
   2bd12:	f06f 000b 	mvn.w	r0, #11
   2bd16:	e7ed      	b.n	2bcf4 <queue_insert+0x68>

0002bd18 <z_queue_node_peek>:
{
   2bd18:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2bd1a:	4604      	mov	r4, r0
   2bd1c:	b130      	cbz	r0, 2bd2c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bd1e:	6802      	ldr	r2, [r0, #0]
   2bd20:	0793      	lsls	r3, r2, #30
   2bd22:	d003      	beq.n	2bd2c <z_queue_node_peek+0x14>
		ret = anode->data;
   2bd24:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2bd26:	b109      	cbz	r1, 2bd2c <z_queue_node_peek+0x14>
			k_free(anode);
   2bd28:	f7ff ff04 	bl	2bb34 <k_free>
}
   2bd2c:	4620      	mov	r0, r4
   2bd2e:	bd10      	pop	{r4, pc}

0002bd30 <_impl_k_queue_init>:
	list->head = NULL;
   2bd30:	2300      	movs	r3, #0
	list->tail = NULL;
   2bd32:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   2bd36:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
   2bd3a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2bd3e:	4770      	bx	lr

0002bd40 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2bd40:	460a      	mov	r2, r1
   2bd42:	2300      	movs	r3, #0
   2bd44:	6841      	ldr	r1, [r0, #4]
   2bd46:	f7ff bfa1 	b.w	2bc8c <queue_insert>

0002bd4a <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   2bd4a:	2300      	movs	r3, #0
   2bd4c:	460a      	mov	r2, r1
   2bd4e:	4619      	mov	r1, r3
   2bd50:	f7ff bf9c 	b.w	2bc8c <queue_insert>

0002bd54 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2bd54:	b538      	push	{r3, r4, r5, lr}
   2bd56:	f04f 0320 	mov.w	r3, #32
   2bd5a:	f3ef 8511 	mrs	r5, BASEPRI
   2bd5e:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2bd62:	6843      	ldr	r3, [r0, #4]
   2bd64:	b953      	cbnz	r3, 2bd7c <k_queue_append_list+0x28>
	list->head = node;
   2bd66:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2bd68:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   2bd6a:	2104      	movs	r1, #4
   2bd6c:	3008      	adds	r0, #8
   2bd6e:	f001 f87f 	bl	2ce70 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   2bd72:	4628      	mov	r0, r5
}
   2bd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   2bd78:	f000 b90c 	b.w	2bf94 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bd7c:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bd7e:	f004 0403 	and.w	r4, r4, #3
   2bd82:	4321      	orrs	r1, r4
   2bd84:	6019      	str	r1, [r3, #0]
   2bd86:	e7ef      	b.n	2bd68 <k_queue_append_list+0x14>

0002bd88 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2bd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd8c:	4604      	mov	r4, r0
   2bd8e:	b086      	sub	sp, #24
   2bd90:	460d      	mov	r5, r1
   2bd92:	f04f 0320 	mov.w	r3, #32
   2bd96:	f3ef 8711 	mrs	r7, BASEPRI
   2bd9a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   2bd9e:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2bda0:	b182      	cbz	r2, 2bdc4 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2bda2:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2bda4:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2bda6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2bdaa:	428a      	cmp	r2, r1
	list->head = node;
   2bdac:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2bdae:	bf08      	it	eq
   2bdb0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2bdb2:	2101      	movs	r1, #1
   2bdb4:	4610      	mov	r0, r2
   2bdb6:	f7ff ffaf 	bl	2bd18 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2bdba:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2bdbe:	b006      	add	sp, #24
   2bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   2bdc4:	b919      	cbnz	r1, 2bdce <_impl_k_queue_get+0x46>
   2bdc6:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   2bdca:	2000      	movs	r0, #0
   2bdcc:	e7f7      	b.n	2bdbe <_impl_k_queue_get+0x36>
   2bdce:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2bdd2:	2104      	movs	r1, #4
   2bdd4:	4603      	mov	r3, r0
   2bdd6:	eb0d 0001 	add.w	r0, sp, r1
   2bdda:	f000 ffad 	bl	2cd38 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   2bdde:	1c6a      	adds	r2, r5, #1
   2bde0:	d002      	beq.n	2bde8 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   2bde2:	f000 fe4d 	bl	2ca80 <_impl_k_uptime_get_32>
   2bde6:	4606      	mov	r6, r0
{
   2bde8:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   2bdea:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   2bdec:	1bea      	subs	r2, r5, r7
   2bdee:	f36f 3310 	bfc	r3, #12, #5
   2bdf2:	2101      	movs	r1, #1
   2bdf4:	a801      	add	r0, sp, #4
   2bdf6:	9304      	str	r3, [sp, #16]
   2bdf8:	f000 ffb4 	bl	2cd64 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   2bdfc:	b108      	cbz	r0, 2be02 <_impl_k_queue_get+0x7a>
   2bdfe:	300b      	adds	r0, #11
   2be00:	d1e3      	bne.n	2bdca <_impl_k_queue_get+0x42>
	__asm__ volatile(
   2be02:	f04f 0320 	mov.w	r3, #32
   2be06:	f3ef 8811 	mrs	r8, BASEPRI
   2be0a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   2be0e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2be10:	b138      	cbz	r0, 2be22 <_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2be12:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2be14:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2be16:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2be1a:	4290      	cmp	r0, r2
	list->head = node;
   2be1c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2be1e:	bf08      	it	eq
   2be20:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2be22:	2101      	movs	r1, #1
   2be24:	f7ff ff78 	bl	2bd18 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2be28:	f388 8811 	msr	BASEPRI, r8
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2be2c:	2800      	cmp	r0, #0
   2be2e:	d1c6      	bne.n	2bdbe <_impl_k_queue_get+0x36>
   2be30:	1c6b      	adds	r3, r5, #1
   2be32:	d0da      	beq.n	2bdea <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   2be34:	f000 fe24 	bl	2ca80 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   2be38:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   2be3a:	42bd      	cmp	r5, r7
   2be3c:	dad5      	bge.n	2bdea <_impl_k_queue_get+0x62>
   2be3e:	e7c4      	b.n	2bdca <_impl_k_queue_get+0x42>

0002be40 <sys_dlist_remove>:
	node->prev->next = node->next;
   2be40:	e9d0 2300 	ldrd	r2, r3, [r0]
   2be44:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2be46:	6802      	ldr	r2, [r0, #0]
   2be48:	6053      	str	r3, [r2, #4]
}
   2be4a:	4770      	bx	lr

0002be4c <reset_time_slice>:

static int slice_time;
static int slice_max_prio;

static void reset_time_slice(void)
{
   2be4c:	b510      	push	{r4, lr}
	int to = _get_next_timeout_expiry();
   2be4e:	f000 fd49 	bl	2c8e4 <_get_next_timeout_expiry>
   2be52:	4604      	mov	r4, r0

	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2be54:	f7d9 fb49 	bl	54ea <z_clock_elapsed>
   2be58:	4b07      	ldr	r3, [pc, #28]	; (2be78 <reset_time_slice+0x2c>)
   2be5a:	4a08      	ldr	r2, [pc, #32]	; (2be7c <reset_time_slice+0x30>)
   2be5c:	681b      	ldr	r3, [r3, #0]
   2be5e:	4418      	add	r0, r3
   2be60:	6110      	str	r0, [r2, #16]

	if (to == K_FOREVER || slice_time < to) {
   2be62:	1c62      	adds	r2, r4, #1
   2be64:	d001      	beq.n	2be6a <reset_time_slice+0x1e>
   2be66:	42a3      	cmp	r3, r4
   2be68:	da05      	bge.n	2be76 <reset_time_slice+0x2a>
		z_clock_set_timeout(slice_time, false);
   2be6a:	2100      	movs	r1, #0
   2be6c:	4618      	mov	r0, r3
	}
}
   2be6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_clock_set_timeout(slice_time, false);
   2be72:	f7d9 bb39 	b.w	54e8 <z_clock_set_timeout>
}
   2be76:	bd10      	pop	{r4, pc}
   2be78:	20002f38 	.word	0x20002f38
   2be7c:	200031a8 	.word	0x200031a8

0002be80 <k_spin_lock.isra.10>:
	__asm__ volatile(
   2be80:	f04f 0320 	mov.w	r3, #32
   2be84:	f3ef 8011 	mrs	r0, BASEPRI
   2be88:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   2be8c:	4770      	bx	lr
	...

0002be90 <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
   2be90:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2be92:	4c10      	ldr	r4, [pc, #64]	; (2bed4 <update_cache+0x44>)
   2be94:	4623      	mov	r3, r4
   2be96:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2be9a:	429d      	cmp	r5, r3
   2be9c:	d000      	beq.n	2bea0 <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
   2be9e:	b905      	cbnz	r5, 2bea2 <update_cache+0x12>
   2bea0:	68e5      	ldr	r5, [r4, #12]
   2bea2:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok) {
   2bea4:	b978      	cbnz	r0, 2bec6 <update_cache+0x36>
	if (!_current || !_is_thread_ready(_current)) {
   2bea6:	b173      	cbz	r3, 2bec6 <update_cache+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2bea8:	7b5a      	ldrb	r2, [r3, #13]
   2beaa:	06d2      	lsls	r2, r2, #27
   2beac:	d10b      	bne.n	2bec6 <update_cache+0x36>
   2beae:	6a1a      	ldr	r2, [r3, #32]
   2beb0:	3201      	adds	r2, #1
   2beb2:	d108      	bne.n	2bec6 <update_cache+0x36>
	if (_is_preempt(_current) || is_metairq(th)) {
   2beb4:	89da      	ldrh	r2, [r3, #14]
   2beb6:	2a7f      	cmp	r2, #127	; 0x7f
   2beb8:	d905      	bls.n	2bec6 <update_cache+0x36>
	return thread == _idle_thread;
   2beba:	4a07      	ldr	r2, [pc, #28]	; (2bed8 <update_cache+0x48>)
	if (_is_idle(_current)) {
   2bebc:	6812      	ldr	r2, [r2, #0]
   2bebe:	4293      	cmp	r3, r2
   2bec0:	d001      	beq.n	2bec6 <update_cache+0x36>
		if (th != _current) {
			reset_time_slice();
		}
		_kernel.ready_q.cache = th;
	} else {
		_kernel.ready_q.cache = _current;
   2bec2:	6263      	str	r3, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2bec4:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   2bec6:	42ab      	cmp	r3, r5
   2bec8:	d001      	beq.n	2bece <update_cache+0x3e>
			reset_time_slice();
   2beca:	f7ff ffbf 	bl	2be4c <reset_time_slice>
		_kernel.ready_q.cache = th;
   2bece:	6265      	str	r5, [r4, #36]	; 0x24
}
   2bed0:	e7f8      	b.n	2bec4 <update_cache+0x34>
   2bed2:	bf00      	nop
   2bed4:	200031a8 	.word	0x200031a8
   2bed8:	00035390 	.word	0x00035390

0002bedc <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   2bedc:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2bee0:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2bee4:	4298      	cmp	r0, r3
   2bee6:	bfac      	ite	ge
   2bee8:	2000      	movge	r0, #0
   2beea:	2001      	movlt	r0, #1
   2beec:	4770      	bx	lr
	...

0002bef0 <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   2bef0:	b510      	push	{r4, lr}
   2bef2:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   2bef4:	f7ff ffc4 	bl	2be80 <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
   2bef8:	7b4b      	ldrb	r3, [r1, #13]
   2befa:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   2befc:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   2befe:	d50d      	bpl.n	2bf1c <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2bf00:	4608      	mov	r0, r1
   2bf02:	f7ff ff9d 	bl	2be40 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   2bf06:	7b4b      	ldrb	r3, [r1, #13]
   2bf08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2bf0c:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
   2bf0e:	4b05      	ldr	r3, [pc, #20]	; (2bf24 <_remove_thread_from_ready_q+0x34>)
   2bf10:	6898      	ldr	r0, [r3, #8]
   2bf12:	1a43      	subs	r3, r0, r1
   2bf14:	4258      	negs	r0, r3
   2bf16:	4158      	adcs	r0, r3
   2bf18:	f7ff ffba 	bl	2be90 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2bf1c:	f384 8811 	msr	BASEPRI, r4
}
   2bf20:	bd10      	pop	{r4, pc}
   2bf22:	bf00      	nop
   2bf24:	200031a8 	.word	0x200031a8

0002bf28 <_find_first_thread_to_unpend>:
{
   2bf28:	b508      	push	{r3, lr}
   2bf2a:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   2bf2c:	f7ff ffa8 	bl	2be80 <k_spin_lock.isra.10>
	return list->head == list;
   2bf30:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bf32:	429a      	cmp	r2, r3
   2bf34:	bf08      	it	eq
   2bf36:	2300      	moveq	r3, #0
   2bf38:	f380 8811 	msr	BASEPRI, r0
}
   2bf3c:	4618      	mov	r0, r3
   2bf3e:	bd08      	pop	{r3, pc}

0002bf40 <_unpend_thread_no_timeout>:
{
   2bf40:	b510      	push	{r4, lr}
   2bf42:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   2bf44:	f7ff ff9c 	bl	2be80 <k_spin_lock.isra.10>
   2bf48:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   2bf4a:	4608      	mov	r0, r1
   2bf4c:	f7ff ff78 	bl	2be40 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2bf50:	7b4b      	ldrb	r3, [r1, #13]
   2bf52:	f023 0302 	bic.w	r3, r3, #2
   2bf56:	734b      	strb	r3, [r1, #13]
   2bf58:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
   2bf5c:	2300      	movs	r3, #0
   2bf5e:	608b      	str	r3, [r1, #8]
}
   2bf60:	bd10      	pop	{r4, pc}

0002bf62 <_unpend_first_thread>:
{
   2bf62:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   2bf64:	2100      	movs	r1, #0
   2bf66:	f7ff ffdf 	bl	2bf28 <_find_first_thread_to_unpend>

	if (thread != NULL) {
   2bf6a:	4604      	mov	r4, r0
   2bf6c:	b128      	cbz	r0, 2bf7a <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   2bf6e:	f7ff ffe7 	bl	2bf40 <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   2bf72:	f104 0018 	add.w	r0, r4, #24
   2bf76:	f000 fc83 	bl	2c880 <_abort_timeout>
}
   2bf7a:	4620      	mov	r0, r4
   2bf7c:	bd10      	pop	{r4, pc}

0002bf7e <_unpend_thread>:
{
   2bf7e:	b510      	push	{r4, lr}
   2bf80:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   2bf82:	f7ff ffdd 	bl	2bf40 <_unpend_thread_no_timeout>
   2bf86:	f104 0018 	add.w	r0, r4, #24
}
   2bf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bf8e:	f000 bc77 	b.w	2c880 <_abort_timeout>
	...

0002bf94 <_reschedule>:
   2bf94:	f3ef 8305 	mrs	r3, IPSR
   2bf98:	2b0d      	cmp	r3, #13
   2bf9a:	d80b      	bhi.n	2bfb4 <_reschedule+0x20>
   2bf9c:	b11b      	cbz	r3, 2bfa6 <_reschedule+0x12>
   2bf9e:	4b07      	ldr	r3, [pc, #28]	; (2bfbc <_reschedule+0x28>)
   2bfa0:	685b      	ldr	r3, [r3, #4]
   2bfa2:	051b      	lsls	r3, r3, #20
   2bfa4:	d506      	bpl.n	2bfb4 <_reschedule+0x20>
	if (_get_next_ready_thread() != _current) {
   2bfa6:	4b06      	ldr	r3, [pc, #24]	; (2bfc0 <_reschedule+0x2c>)
   2bfa8:	689a      	ldr	r2, [r3, #8]
   2bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bfac:	429a      	cmp	r2, r3
   2bfae:	d001      	beq.n	2bfb4 <_reschedule+0x20>
   2bfb0:	f7d9 bb1e 	b.w	55f0 <__swap>
   2bfb4:	f380 8811 	msr	BASEPRI, r0
}
   2bfb8:	4770      	bx	lr
   2bfba:	bf00      	nop
   2bfbc:	e000ed00 	.word	0xe000ed00
   2bfc0:	200031a8 	.word	0x200031a8

0002bfc4 <k_sched_unlock>:
{
   2bfc4:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   2bfc6:	f7ff ff5b 	bl	2be80 <k_spin_lock.isra.10>
		++_current->base.sched_locked;
   2bfca:	4b0a      	ldr	r3, [pc, #40]	; (2bff4 <k_sched_unlock+0x30>)
   2bfcc:	689a      	ldr	r2, [r3, #8]
   2bfce:	7bd3      	ldrb	r3, [r2, #15]
   2bfd0:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   2bfd2:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   2bfd4:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
   2bfd6:	2001      	movs	r0, #1
   2bfd8:	f7ff ff5a 	bl	2be90 <update_cache>
   2bfdc:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   2bfe0:	f04f 0320 	mov.w	r3, #32
   2bfe4:	f3ef 8011 	mrs	r0, BASEPRI
   2bfe8:	f383 8811 	msr	BASEPRI, r3
}
   2bfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   2bff0:	f7ff bfd0 	b.w	2bf94 <_reschedule>
   2bff4:	200031a8 	.word	0x200031a8

0002bff8 <_priq_dumb_add>:
	return list->head == list;
   2bff8:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bffa:	4298      	cmp	r0, r3
{
   2bffc:	b510      	push	{r4, lr}
   2bffe:	d013      	beq.n	2c028 <_priq_dumb_add+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c000:	b193      	cbz	r3, 2c028 <_priq_dumb_add+0x30>
	if (t1->base.prio < t2->base.prio) {
   2c002:	f991 200e 	ldrsb.w	r2, [r1, #14]
   2c006:	f993 400e 	ldrsb.w	r4, [r3, #14]
   2c00a:	4294      	cmp	r4, r2
   2c00c:	dd06      	ble.n	2c01c <_priq_dumb_add+0x24>
		node->prev = insert_point->prev;
   2c00e:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
   2c010:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
   2c014:	685a      	ldr	r2, [r3, #4]
   2c016:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   2c018:	6059      	str	r1, [r3, #4]
}
   2c01a:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   2c01c:	6844      	ldr	r4, [r0, #4]
   2c01e:	42a3      	cmp	r3, r4
   2c020:	d002      	beq.n	2c028 <_priq_dumb_add+0x30>
   2c022:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c024:	2b00      	cmp	r3, #0
   2c026:	d1ee      	bne.n	2c006 <_priq_dumb_add+0xe>
	node->prev = list->tail;
   2c028:	6843      	ldr	r3, [r0, #4]
   2c02a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   2c02c:	6843      	ldr	r3, [r0, #4]
	node->next = list;
   2c02e:	6008      	str	r0, [r1, #0]
	list->tail->next = node;
   2c030:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2c032:	6041      	str	r1, [r0, #4]
   2c034:	e7f1      	b.n	2c01a <_priq_dumb_add+0x22>
	...

0002c038 <_add_thread_to_ready_q>:
{
   2c038:	b538      	push	{r3, r4, r5, lr}
   2c03a:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   2c03c:	f7ff ff20 	bl	2be80 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2c040:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   2c042:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2c044:	4806      	ldr	r0, [pc, #24]	; (2c060 <_add_thread_to_ready_q+0x28>)
   2c046:	f7ff ffd7 	bl	2bff8 <_priq_dumb_add>
	thread->base.thread_state |= states;
   2c04a:	7b63      	ldrb	r3, [r4, #13]
   2c04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c050:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   2c052:	2000      	movs	r0, #0
   2c054:	f7ff ff1c 	bl	2be90 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c058:	f385 8811 	msr	BASEPRI, r5
}
   2c05c:	bd38      	pop	{r3, r4, r5, pc}
   2c05e:	bf00      	nop
   2c060:	200031d0 	.word	0x200031d0

0002c064 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2c064:	7b42      	ldrb	r2, [r0, #13]
   2c066:	06d2      	lsls	r2, r2, #27
   2c068:	d104      	bne.n	2c074 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
   2c06a:	6a03      	ldr	r3, [r0, #32]
   2c06c:	3301      	adds	r3, #1
   2c06e:	d101      	bne.n	2c074 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   2c070:	f7ff bfe2 	b.w	2c038 <_add_thread_to_ready_q>
}
   2c074:	4770      	bx	lr

0002c076 <z_thread_timeout>:
{
   2c076:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
   2c078:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2c07c:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   2c07e:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   2c082:	b113      	cbz	r3, 2c08a <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
   2c084:	4628      	mov	r0, r5
   2c086:	f7ff ff5b 	bl	2bf40 <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c08a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2c08e:	f023 0304 	bic.w	r3, r3, #4
   2c092:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
   2c096:	4628      	mov	r0, r5
}
   2c098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
   2c09c:	f7ff bfe2 	b.w	2c064 <_ready_thread>

0002c0a0 <_move_thread_to_end_of_prio_q>:
{
   2c0a0:	b570      	push	{r4, r5, r6, lr}
   2c0a2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   2c0a4:	f7ff feec 	bl	2be80 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2c0a8:	4d0b      	ldr	r5, [pc, #44]	; (2c0d8 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
   2c0aa:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   2c0ac:	4620      	mov	r0, r4
   2c0ae:	f7ff fec7 	bl	2be40 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   2c0b2:	4621      	mov	r1, r4
   2c0b4:	4628      	mov	r0, r5
   2c0b6:	f7ff ff9f 	bl	2bff8 <_priq_dumb_add>
	thread->base.thread_state |= states;
   2c0ba:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   2c0bc:	f855 0c20 	ldr.w	r0, [r5, #-32]
   2c0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c0c4:	7363      	strb	r3, [r4, #13]
   2c0c6:	1b03      	subs	r3, r0, r4
   2c0c8:	4258      	negs	r0, r3
   2c0ca:	4158      	adcs	r0, r3
   2c0cc:	f7ff fee0 	bl	2be90 <update_cache>
   2c0d0:	f386 8811 	msr	BASEPRI, r6
}
   2c0d4:	bd70      	pop	{r4, r5, r6, pc}
   2c0d6:	bf00      	nop
   2c0d8:	200031d0 	.word	0x200031d0

0002c0dc <z_time_slice>:
	if (slice_time && sliceable(_current)) {
   2c0dc:	4b11      	ldr	r3, [pc, #68]	; (2c124 <z_time_slice+0x48>)
   2c0de:	681b      	ldr	r3, [r3, #0]
{
   2c0e0:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
   2c0e2:	b1eb      	cbz	r3, 2c120 <z_time_slice+0x44>
   2c0e4:	4910      	ldr	r1, [pc, #64]	; (2c128 <z_time_slice+0x4c>)
   2c0e6:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
   2c0e8:	89da      	ldrh	r2, [r3, #14]
   2c0ea:	2a7f      	cmp	r2, #127	; 0x7f
   2c0ec:	d818      	bhi.n	2c120 <z_time_slice+0x44>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
   2c0ee:	4a0f      	ldr	r2, [pc, #60]	; (2c12c <z_time_slice+0x50>)
   2c0f0:	f993 400e 	ldrsb.w	r4, [r3, #14]
   2c0f4:	6812      	ldr	r2, [r2, #0]
   2c0f6:	4294      	cmp	r4, r2
   2c0f8:	db12      	blt.n	2c120 <z_time_slice+0x44>
	return thread == _idle_thread;
   2c0fa:	4a0d      	ldr	r2, [pc, #52]	; (2c130 <z_time_slice+0x54>)
		&& !_is_idle(t)
   2c0fc:	6812      	ldr	r2, [r2, #0]
   2c0fe:	4293      	cmp	r3, r2
   2c100:	d00e      	beq.n	2c120 <z_time_slice+0x44>
		&& !_is_thread_timeout_active(t);
   2c102:	6a1a      	ldr	r2, [r3, #32]
   2c104:	3201      	adds	r2, #1
   2c106:	d10b      	bne.n	2c120 <z_time_slice+0x44>
		if (ticks >= _current_cpu->slice_ticks) {
   2c108:	690a      	ldr	r2, [r1, #16]
   2c10a:	4282      	cmp	r2, r0
   2c10c:	dc06      	bgt.n	2c11c <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
   2c10e:	4618      	mov	r0, r3
   2c110:	f7ff ffc6 	bl	2c0a0 <_move_thread_to_end_of_prio_q>
}
   2c114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
   2c118:	f7ff be98 	b.w	2be4c <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
   2c11c:	1a12      	subs	r2, r2, r0
   2c11e:	610a      	str	r2, [r1, #16]
}
   2c120:	bd10      	pop	{r4, pc}
   2c122:	bf00      	nop
   2c124:	20002f38 	.word	0x20002f38
   2c128:	200031a8 	.word	0x200031a8
   2c12c:	20002f34 	.word	0x20002f34
   2c130:	00035390 	.word	0x00035390

0002c134 <pend>:
{
   2c134:	b570      	push	{r4, r5, r6, lr}
   2c136:	4604      	mov	r4, r0
   2c138:	460d      	mov	r5, r1
   2c13a:	4616      	mov	r6, r2
	_remove_thread_from_ready_q(thread);
   2c13c:	f7ff fed8 	bl	2bef0 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   2c140:	7b63      	ldrb	r3, [r4, #13]
   2c142:	f043 0302 	orr.w	r3, r3, #2
   2c146:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2c148:	b125      	cbz	r5, 2c154 <pend+0x20>
		thread->base.pended_on = wait_q;
   2c14a:	60a5      	str	r5, [r4, #8]
		_priq_wait_add(&wait_q->waitq, thread);
   2c14c:	4621      	mov	r1, r4
   2c14e:	4628      	mov	r0, r5
   2c150:	f7ff ff52 	bl	2bff8 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
   2c154:	1c73      	adds	r3, r6, #1
   2c156:	d012      	beq.n	2c17e <pend+0x4a>
   2c158:	4809      	ldr	r0, [pc, #36]	; (2c180 <pend+0x4c>)
   2c15a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2c15e:	2100      	movs	r1, #0
   2c160:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2c164:	fbc5 0106 	smlal	r0, r1, r5, r6
   2c168:	2300      	movs	r3, #0
   2c16a:	f7d4 f853 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2c16e:	4905      	ldr	r1, [pc, #20]	; (2c184 <pend+0x50>)
   2c170:	1c42      	adds	r2, r0, #1
   2c172:	f104 0018 	add.w	r0, r4, #24
}
   2c176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c17a:	f000 bbe1 	b.w	2c940 <_add_timeout>
   2c17e:	bd70      	pop	{r4, r5, r6, pc}
   2c180:	0004ffff 	.word	0x0004ffff
   2c184:	0002c077 	.word	0x0002c077

0002c188 <_pend_current_thread>:
{
   2c188:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   2c18a:	4b05      	ldr	r3, [pc, #20]	; (2c1a0 <_pend_current_thread+0x18>)
{
   2c18c:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   2c18e:	6898      	ldr	r0, [r3, #8]
   2c190:	f7ff ffd0 	bl	2c134 <pend>
   2c194:	4620      	mov	r0, r4
}
   2c196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c19a:	f7d9 ba29 	b.w	55f0 <__swap>
   2c19e:	bf00      	nop
   2c1a0:	200031a8 	.word	0x200031a8

0002c1a4 <_thread_priority_set>:
{
   2c1a4:	b538      	push	{r3, r4, r5, lr}
   2c1a6:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   2c1a8:	f7ff fe6a 	bl	2be80 <k_spin_lock.isra.10>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2c1ac:	7b63      	ldrb	r3, [r4, #13]
   2c1ae:	06db      	lsls	r3, r3, #27
   2c1b0:	4605      	mov	r5, r0
   2c1b2:	b249      	sxtb	r1, r1
   2c1b4:	d11b      	bne.n	2c1ee <_thread_priority_set+0x4a>
		if (need_sched) {
   2c1b6:	6a23      	ldr	r3, [r4, #32]
   2c1b8:	3301      	adds	r3, #1
   2c1ba:	d118      	bne.n	2c1ee <_thread_priority_set+0x4a>
	sys_dlist_remove(&thread->base.qnode_dlist);
   2c1bc:	4620      	mov	r0, r4
   2c1be:	f7ff fe3f 	bl	2be40 <sys_dlist_remove>
			_priq_run_add(&_kernel.ready_q.runq, thread);
   2c1c2:	480d      	ldr	r0, [pc, #52]	; (2c1f8 <_thread_priority_set+0x54>)
			thread->base.prio = prio;
   2c1c4:	73a1      	strb	r1, [r4, #14]
			_priq_run_add(&_kernel.ready_q.runq, thread);
   2c1c6:	4621      	mov	r1, r4
   2c1c8:	f7ff ff16 	bl	2bff8 <_priq_dumb_add>
			update_cache(1);
   2c1cc:	2001      	movs	r0, #1
   2c1ce:	f7ff fe5f 	bl	2be90 <update_cache>
   2c1d2:	2301      	movs	r3, #1
   2c1d4:	f385 8811 	msr	BASEPRI, r5
	if (need_sched) {
   2c1d8:	b163      	cbz	r3, 2c1f4 <_thread_priority_set+0x50>
	__asm__ volatile(
   2c1da:	f04f 0320 	mov.w	r3, #32
   2c1de:	f3ef 8011 	mrs	r0, BASEPRI
   2c1e2:	f383 8811 	msr	BASEPRI, r3
}
   2c1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(irq_lock());
   2c1ea:	f7ff bed3 	b.w	2bf94 <_reschedule>
			thread->base.prio = prio;
   2c1ee:	73a1      	strb	r1, [r4, #14]
   2c1f0:	2300      	movs	r3, #0
   2c1f2:	e7ef      	b.n	2c1d4 <_thread_priority_set+0x30>
}
   2c1f4:	bd38      	pop	{r3, r4, r5, pc}
   2c1f6:	bf00      	nop
   2c1f8:	200031d0 	.word	0x200031d0

0002c1fc <_unpend_all>:
	return CONTAINER_OF(sys_dlist_peek_head(l),
			    struct k_thread, base.qnode_dlist);
}

int _unpend_all(_wait_q_t *waitq)
{
   2c1fc:	b538      	push	{r3, r4, r5, lr}
   2c1fe:	4605      	mov	r5, r0
	int need_sched = 0;
   2c200:	2000      	movs	r0, #0
	return list->head == list;
   2c202:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c204:	42a5      	cmp	r5, r4
   2c206:	d000      	beq.n	2c20a <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq)) != NULL) {
   2c208:	b904      	cbnz	r4, 2c20c <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   2c20a:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   2c20c:	4620      	mov	r0, r4
   2c20e:	f7ff feb6 	bl	2bf7e <_unpend_thread>
		_ready_thread(th);
   2c212:	4620      	mov	r0, r4
   2c214:	f7ff ff26 	bl	2c064 <_ready_thread>
		need_sched = 1;
   2c218:	2001      	movs	r0, #1
   2c21a:	e7f2      	b.n	2c202 <_unpend_all+0x6>

0002c21c <_sched_init>:
	list->head = (sys_dnode_t *)list;
   2c21c:	4b05      	ldr	r3, [pc, #20]	; (2c234 <_sched_init+0x18>)
   2c21e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2c222:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
	slice_time = _ms_to_ticks(duration_in_ms);
   2c226:	4a04      	ldr	r2, [pc, #16]	; (2c238 <_sched_init+0x1c>)
   2c228:	2300      	movs	r3, #0
   2c22a:	6013      	str	r3, [r2, #0]
	slice_max_prio = prio;
   2c22c:	4a03      	ldr	r2, [pc, #12]	; (2c23c <_sched_init+0x20>)
   2c22e:	6013      	str	r3, [r2, #0]
	reset_time_slice();
   2c230:	f7ff be0c 	b.w	2be4c <reset_time_slice>
   2c234:	200031a8 	.word	0x200031a8
   2c238:	20002f38 	.word	0x20002f38
   2c23c:	20002f34 	.word	0x20002f34

0002c240 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   2c240:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   2c242:	4c12      	ldr	r4, [pc, #72]	; (2c28c <_impl_k_yield+0x4c>)
   2c244:	4b12      	ldr	r3, [pc, #72]	; (2c290 <_impl_k_yield+0x50>)
   2c246:	68a2      	ldr	r2, [r4, #8]
   2c248:	681b      	ldr	r3, [r3, #0]
   2c24a:	429a      	cmp	r2, r3
   2c24c:	d00f      	beq.n	2c26e <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   2c24e:	f7ff fe17 	bl	2be80 <k_spin_lock.isra.10>
   2c252:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   2c254:	68a0      	ldr	r0, [r4, #8]
   2c256:	f7ff fdf3 	bl	2be40 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2c25a:	68a1      	ldr	r1, [r4, #8]
   2c25c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2c260:	f7ff feca 	bl	2bff8 <_priq_dumb_add>
			update_cache(1);
   2c264:	2001      	movs	r0, #1
   2c266:	f7ff fe13 	bl	2be90 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c26a:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   2c26e:	68a2      	ldr	r2, [r4, #8]
   2c270:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c272:	429a      	cmp	r2, r3
   2c274:	d009      	beq.n	2c28a <_impl_k_yield+0x4a>
	__asm__ volatile(
   2c276:	f04f 0320 	mov.w	r3, #32
   2c27a:	f3ef 8011 	mrs	r0, BASEPRI
   2c27e:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
   2c282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c286:	f7d9 b9b3 	b.w	55f0 <__swap>
   2c28a:	bd38      	pop	{r3, r4, r5, pc}
   2c28c:	200031a8 	.word	0x200031a8
   2c290:	00035390 	.word	0x00035390

0002c294 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
   2c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   2c296:	4604      	mov	r4, r0
   2c298:	b918      	cbnz	r0, 2c2a2 <_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   2c29a:	f7ff ffd1 	bl	2c240 <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
   2c29e:	4620      	mov	r0, r4
   2c2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c2a2:	4819      	ldr	r0, [pc, #100]	; (2c308 <_impl_k_sleep+0x74>)
   2c2a4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2c2a8:	2100      	movs	r1, #0
   2c2aa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2c2ae:	2300      	movs	r3, #0
   2c2b0:	fbc5 0104 	smlal	r0, r1, r5, r4
   2c2b4:	f7d3 ffae 	bl	214 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   2c2b8:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   2c2ba:	f000 fbdb 	bl	2ca74 <z_tick_get_32>
   2c2be:	182c      	adds	r4, r5, r0
   2c2c0:	f04f 0320 	mov.w	r3, #32
   2c2c4:	f3ef 8711 	mrs	r7, BASEPRI
   2c2c8:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   2c2cc:	4e0f      	ldr	r6, [pc, #60]	; (2c30c <_impl_k_sleep+0x78>)
   2c2ce:	68b0      	ldr	r0, [r6, #8]
   2c2d0:	f7ff fe0e 	bl	2bef0 <_remove_thread_from_ready_q>
   2c2d4:	68b0      	ldr	r0, [r6, #8]
   2c2d6:	490e      	ldr	r1, [pc, #56]	; (2c310 <_impl_k_sleep+0x7c>)
   2c2d8:	462a      	mov	r2, r5
   2c2da:	3018      	adds	r0, #24
   2c2dc:	f000 fb30 	bl	2c940 <_add_timeout>
   2c2e0:	4638      	mov	r0, r7
   2c2e2:	f7d9 f985 	bl	55f0 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
   2c2e6:	f000 fbc5 	bl	2ca74 <z_tick_get_32>
   2c2ea:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
   2c2ec:	2800      	cmp	r0, #0
   2c2ee:	dd09      	ble.n	2c304 <_impl_k_sleep+0x70>
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   2c2f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2c2f4:	2264      	movs	r2, #100	; 0x64
   2c2f6:	2300      	movs	r3, #0
   2c2f8:	fb80 0101 	smull	r0, r1, r0, r1
   2c2fc:	f7d3 ffda 	bl	2b4 <__aeabi_uldivmod>
   2c300:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
   2c302:	e7cc      	b.n	2c29e <_impl_k_sleep+0xa>
	return 0;
   2c304:	2400      	movs	r4, #0
   2c306:	e7ca      	b.n	2c29e <_impl_k_sleep+0xa>
   2c308:	0004ffff 	.word	0x0004ffff
   2c30c:	200031a8 	.word	0x200031a8
   2c310:	0002c077 	.word	0x0002c077

0002c314 <_impl_k_wakeup>:
	return _impl_k_sleep(duration);
}
#endif

void _impl_k_wakeup(k_tid_t thread)
{
   2c314:	b538      	push	{r3, r4, r5, lr}
   2c316:	4605      	mov	r5, r0
   2c318:	f04f 0320 	mov.w	r3, #32
   2c31c:	f3ef 8411 	mrs	r4, BASEPRI
   2c320:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();

	/* verify first if thread is not waiting on an object */
	if (_is_thread_pending(thread)) {
   2c324:	7b43      	ldrb	r3, [r0, #13]
   2c326:	079a      	lsls	r2, r3, #30
   2c328:	d502      	bpl.n	2c330 <_impl_k_wakeup+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c32a:	f384 8811 	msr	BASEPRI, r4
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
	}
}
   2c32e:	bd38      	pop	{r3, r4, r5, pc}
	return _abort_timeout(&thread->base.timeout);
   2c330:	3018      	adds	r0, #24
   2c332:	f000 faa5 	bl	2c880 <_abort_timeout>
	if (_abort_thread_timeout(thread) == _INACTIVE) {
   2c336:	3001      	adds	r0, #1
   2c338:	d0f7      	beq.n	2c32a <_impl_k_wakeup+0x16>
	_ready_thread(thread);
   2c33a:	4628      	mov	r0, r5
   2c33c:	f7ff fe92 	bl	2c064 <_ready_thread>
   2c340:	f3ef 8305 	mrs	r3, IPSR
   2c344:	2b0d      	cmp	r3, #13
   2c346:	d8f0      	bhi.n	2c32a <_impl_k_wakeup+0x16>
   2c348:	b11b      	cbz	r3, 2c352 <_impl_k_wakeup+0x3e>
   2c34a:	4b04      	ldr	r3, [pc, #16]	; (2c35c <_impl_k_wakeup+0x48>)
   2c34c:	685b      	ldr	r3, [r3, #4]
   2c34e:	051b      	lsls	r3, r3, #20
   2c350:	d5eb      	bpl.n	2c32a <_impl_k_wakeup+0x16>
		_reschedule(key);
   2c352:	4620      	mov	r0, r4
}
   2c354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
   2c358:	f7ff be1c 	b.w	2bf94 <_reschedule>
   2c35c:	e000ed00 	.word	0xe000ed00

0002c360 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   2c360:	4b01      	ldr	r3, [pc, #4]	; (2c368 <_impl_k_current_get+0x8>)
   2c362:	6898      	ldr	r0, [r3, #8]
   2c364:	4770      	bx	lr
   2c366:	bf00      	nop
   2c368:	200031a8 	.word	0x200031a8

0002c36c <_impl_k_sem_init>:
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   2c36c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2c370:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2c374:	e9c0 0000 	strd	r0, r0, [r0]
   2c378:	e9c0 3304 	strd	r3, r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   2c37c:	4770      	bx	lr

0002c37e <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
   2c37e:	b570      	push	{r4, r5, r6, lr}
   2c380:	4604      	mov	r4, r0
	__asm__ volatile(
   2c382:	f04f 0320 	mov.w	r3, #32
   2c386:	f3ef 8611 	mrs	r6, BASEPRI
   2c38a:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   2c38e:	f7ff fde8 	bl	2bf62 <_unpend_first_thread>
	if (thread != NULL) {
   2c392:	4605      	mov	r5, r0
   2c394:	b170      	cbz	r0, 2c3b4 <_impl_k_sem_give+0x36>
   2c396:	7b43      	ldrb	r3, [r0, #13]
   2c398:	06db      	lsls	r3, r3, #27
   2c39a:	d104      	bne.n	2c3a6 <_impl_k_sem_give+0x28>
	if (_is_thread_ready(thread)) {
   2c39c:	6a03      	ldr	r3, [r0, #32]
   2c39e:	3301      	adds	r3, #1
   2c3a0:	d101      	bne.n	2c3a6 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   2c3a2:	f7ff fe49 	bl	2c038 <_add_thread_to_ready_q>
   2c3a6:	2300      	movs	r3, #0
   2c3a8:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
   2c3aa:	4630      	mov	r0, r6
}
   2c3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   2c3b0:	f7ff bdf0 	b.w	2bf94 <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2c3b4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2c3b8:	429a      	cmp	r2, r3
   2c3ba:	bf18      	it	ne
   2c3bc:	3301      	addne	r3, #1
   2c3be:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2c3c0:	2102      	movs	r1, #2
   2c3c2:	f104 0010 	add.w	r0, r4, #16
   2c3c6:	f000 fd53 	bl	2ce70 <_handle_obj_poll_events>
   2c3ca:	e7ee      	b.n	2c3aa <_impl_k_sem_give+0x2c>

0002c3cc <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   2c3cc:	b410      	push	{r4}
   2c3ce:	460a      	mov	r2, r1
   2c3d0:	4604      	mov	r4, r0
   2c3d2:	f04f 0320 	mov.w	r3, #32
   2c3d6:	f3ef 8011 	mrs	r0, BASEPRI
   2c3da:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
   2c3de:	68a3      	ldr	r3, [r4, #8]
   2c3e0:	b133      	cbz	r3, 2c3f0 <_impl_k_sem_take+0x24>
		sem->count--;
   2c3e2:	3b01      	subs	r3, #1
   2c3e4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c3e6:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   2c3ea:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   2c3ec:	bc10      	pop	{r4}
   2c3ee:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   2c3f0:	b921      	cbnz	r1, 2c3fc <_impl_k_sem_take+0x30>
   2c3f2:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   2c3f6:	f06f 000f 	mvn.w	r0, #15
   2c3fa:	e7f7      	b.n	2c3ec <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   2c3fc:	4621      	mov	r1, r4
}
   2c3fe:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   2c400:	f7ff bec2 	b.w	2c188 <_pend_current_thread>

0002c404 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2c404:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2c406:	4c08      	ldr	r4, [pc, #32]	; (2c428 <k_sys_work_q_init+0x24>)
   2c408:	4908      	ldr	r1, [pc, #32]	; (2c42c <k_sys_work_q_init+0x28>)
   2c40a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c40e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2c412:	4620      	mov	r0, r4
   2c414:	f000 f958 	bl	2c6c8 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   2c418:	f104 0010 	add.w	r0, r4, #16
   2c41c:	4904      	ldr	r1, [pc, #16]	; (2c430 <k_sys_work_q_init+0x2c>)
   2c41e:	f000 f84d 	bl	2c4bc <_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2c422:	2000      	movs	r0, #0
   2c424:	bd10      	pop	{r4, pc}
   2c426:	bf00      	nop
   2c428:	200031d8 	.word	0x200031d8
   2c42c:	2000c818 	.word	0x2000c818
   2c430:	000353c2 	.word	0x000353c2

0002c434 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   2c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c436:	4605      	mov	r5, r0
   2c438:	460f      	mov	r7, r1
	__asm__ volatile(
   2c43a:	f04f 0320 	mov.w	r3, #32
   2c43e:	f3ef 8411 	mrs	r4, BASEPRI
   2c442:	f383 8811 	msr	BASEPRI, r3
	return (s32_t)ceiling_fraction(
   2c446:	480a      	ldr	r0, [pc, #40]	; (2c470 <schedule_new_thread.part.8+0x3c>)
   2c448:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c44c:	2100      	movs	r1, #0
   2c44e:	2300      	movs	r3, #0
   2c450:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2c454:	fbc6 0107 	smlal	r0, r1, r6, r7
   2c458:	f7d3 fedc 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2c45c:	4905      	ldr	r1, [pc, #20]	; (2c474 <schedule_new_thread.part.8+0x40>)
   2c45e:	1c42      	adds	r2, r0, #1
   2c460:	f105 0018 	add.w	r0, r5, #24
   2c464:	f000 fa6c 	bl	2c940 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c468:	f384 8811 	msr	BASEPRI, r4
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   2c46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c46e:	bf00      	nop
   2c470:	0004ffff 	.word	0x0004ffff
   2c474:	0002c077 	.word	0x0002c077

0002c478 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2c478:	7b42      	ldrb	r2, [r0, #13]
   2c47a:	06d2      	lsls	r2, r2, #27
   2c47c:	d104      	bne.n	2c488 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
   2c47e:	6a03      	ldr	r3, [r0, #32]
   2c480:	3301      	adds	r3, #1
   2c482:	d101      	bne.n	2c488 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   2c484:	f7ff bdd8 	b.w	2c038 <_add_thread_to_ready_q>
}
   2c488:	4770      	bx	lr

0002c48a <k_thread_foreach>:
}
   2c48a:	4770      	bx	lr

0002c48c <k_is_in_isr>:
   2c48c:	f3ef 8005 	mrs	r0, IPSR
   2c490:	280d      	cmp	r0, #13
   2c492:	d807      	bhi.n	2c4a4 <k_is_in_isr+0x18>
   2c494:	b138      	cbz	r0, 2c4a6 <k_is_in_isr+0x1a>
   2c496:	4b04      	ldr	r3, [pc, #16]	; (2c4a8 <k_is_in_isr+0x1c>)
   2c498:	6858      	ldr	r0, [r3, #4]
   2c49a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   2c49e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   2c4a2:	4770      	bx	lr
   2c4a4:	2001      	movs	r0, #1
}
   2c4a6:	4770      	bx	lr
   2c4a8:	e000ed00 	.word	0xe000ed00

0002c4ac <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   2c4ac:	4b02      	ldr	r3, [pc, #8]	; (2c4b8 <_is_thread_essential+0xc>)
   2c4ae:	689b      	ldr	r3, [r3, #8]
   2c4b0:	7b18      	ldrb	r0, [r3, #12]
}
   2c4b2:	f000 0001 	and.w	r0, r0, #1
   2c4b6:	4770      	bx	lr
   2c4b8:	200031a8 	.word	0x200031a8

0002c4bc <_impl_k_thread_name_set>:
}
   2c4bc:	4770      	bx	lr

0002c4be <_impl_k_thread_start>:
{
   2c4be:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c4c0:	f04f 0320 	mov.w	r3, #32
   2c4c4:	f3ef 8411 	mrs	r4, BASEPRI
   2c4c8:	f383 8811 	msr	BASEPRI, r3
	if (_has_thread_started(thread)) {
   2c4cc:	7b43      	ldrb	r3, [r0, #13]
   2c4ce:	0759      	lsls	r1, r3, #29
   2c4d0:	d402      	bmi.n	2c4d8 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c4d2:	f384 8811 	msr	BASEPRI, r4
}
   2c4d6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c4d8:	f023 0304 	bic.w	r3, r3, #4
   2c4dc:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
   2c4de:	f7ff ffcb 	bl	2c478 <_ready_thread>
	_reschedule(key);
   2c4e2:	4620      	mov	r0, r4
}
   2c4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   2c4e8:	f7ff bd54 	b.w	2bf94 <_reschedule>

0002c4ec <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   2c4ec:	b530      	push	{r4, r5, lr}
   2c4ee:	b087      	sub	sp, #28
   2c4f0:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c4f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2c4f4:	9504      	str	r5, [sp, #16]
   2c4f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2c4f8:	9503      	str	r5, [sp, #12]
   2c4fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2c4fc:	9502      	str	r5, [sp, #8]
   2c4fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c500:	9501      	str	r5, [sp, #4]
   2c502:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c504:	9500      	str	r5, [sp, #0]
   2c506:	f7d9 fa5d 	bl	59c4 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2c50a:	4b04      	ldr	r3, [pc, #16]	; (2c51c <_setup_new_thread+0x30>)
   2c50c:	689b      	ldr	r3, [r3, #8]
   2c50e:	b913      	cbnz	r3, 2c516 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   2c510:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   2c512:	b007      	add	sp, #28
   2c514:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   2c516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2c518:	e7fa      	b.n	2c510 <_setup_new_thread+0x24>
   2c51a:	bf00      	nop
   2c51c:	200031a8 	.word	0x200031a8

0002c520 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   2c520:	b570      	push	{r4, r5, r6, lr}
   2c522:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");

	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c524:	2600      	movs	r6, #0
   2c526:	9605      	str	r6, [sp, #20]
   2c528:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2c52a:	9604      	str	r6, [sp, #16]
   2c52c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2c52e:	9603      	str	r6, [sp, #12]
   2c530:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2c532:	9602      	str	r6, [sp, #8]
   2c534:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   2c536:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c538:	9601      	str	r6, [sp, #4]
   2c53a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2c53c:	9600      	str	r6, [sp, #0]
{
   2c53e:	4604      	mov	r4, r0
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c540:	f7ff ffd4 	bl	2c4ec <_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   2c544:	1c6b      	adds	r3, r5, #1
   2c546:	d003      	beq.n	2c550 <_impl_k_thread_create+0x30>
	if (delay == 0) {
   2c548:	b92d      	cbnz	r5, 2c556 <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   2c54a:	4620      	mov	r0, r4
   2c54c:	f7ff ffb7 	bl	2c4be <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   2c550:	4620      	mov	r0, r4
   2c552:	b006      	add	sp, #24
   2c554:	bd70      	pop	{r4, r5, r6, pc}
   2c556:	4629      	mov	r1, r5
   2c558:	4620      	mov	r0, r4
   2c55a:	f7ff ff6b 	bl	2c434 <schedule_new_thread.part.8>
   2c55e:	e7f7      	b.n	2c550 <_impl_k_thread_create+0x30>

0002c560 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   2c560:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2c562:	b510      	push	{r4, lr}
   2c564:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2c566:	b103      	cbz	r3, 2c56a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   2c568:	4798      	blx	r3
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2c56a:	7b63      	ldrb	r3, [r4, #13]
   2c56c:	06da      	lsls	r2, r3, #27
   2c56e:	d10a      	bne.n	2c586 <_k_thread_single_abort+0x26>
	}

	if (_is_thread_ready(thread)) {
   2c570:	6a22      	ldr	r2, [r4, #32]
   2c572:	3201      	adds	r2, #1
   2c574:	d107      	bne.n	2c586 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
   2c576:	4620      	mov	r0, r4
   2c578:	f7ff fcba 	bl	2bef0 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   2c57c:	7b63      	ldrb	r3, [r4, #13]
   2c57e:	f043 0308 	orr.w	r3, r3, #8
   2c582:	7363      	strb	r3, [r4, #13]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   2c584:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   2c586:	079b      	lsls	r3, r3, #30
   2c588:	d502      	bpl.n	2c590 <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
   2c58a:	4620      	mov	r0, r4
   2c58c:	f7ff fcd8 	bl	2bf40 <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
   2c590:	6a23      	ldr	r3, [r4, #32]
   2c592:	3301      	adds	r3, #1
   2c594:	d0f2      	beq.n	2c57c <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
   2c596:	f104 0018 	add.w	r0, r4, #24
   2c59a:	f000 f971 	bl	2c880 <_abort_timeout>
   2c59e:	e7ed      	b.n	2c57c <_k_thread_single_abort+0x1c>

0002c5a0 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   2c5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   2c5a2:	4f23      	ldr	r7, [pc, #140]	; (2c630 <_init_static_threads+0x90>)
   2c5a4:	4d23      	ldr	r5, [pc, #140]	; (2c634 <_init_static_threads+0x94>)
{
   2c5a6:	b087      	sub	sp, #28
   2c5a8:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   2c5aa:	42bd      	cmp	r5, r7
   2c5ac:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2c5b0:	d314      	bcc.n	2c5dc <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   2c5b2:	4b21      	ldr	r3, [pc, #132]	; (2c638 <_init_static_threads+0x98>)
   2c5b4:	689a      	ldr	r2, [r3, #8]
   2c5b6:	7bd3      	ldrb	r3, [r2, #15]
   2c5b8:	3b01      	subs	r3, #1
   2c5ba:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2c5bc:	f04f 0320 	mov.w	r3, #32
   2c5c0:	f3ef 8511 	mrs	r5, BASEPRI
   2c5c4:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   2c5c8:	4c1a      	ldr	r4, [pc, #104]	; (2c634 <_init_static_threads+0x94>)
   2c5ca:	42b4      	cmp	r4, r6
   2c5cc:	d323      	bcc.n	2c616 <_init_static_threads+0x76>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c5ce:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   2c5d2:	b007      	add	sp, #28
   2c5d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   2c5d8:	f7ff bcf4 	b.w	2bfc4 <k_sched_unlock>
		_setup_new_thread(
   2c5dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c5e0:	9305      	str	r3, [sp, #20]
   2c5e2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2c5e6:	9304      	str	r3, [sp, #16]
   2c5e8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2c5ec:	9303      	str	r3, [sp, #12]
   2c5ee:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2c5f2:	9302      	str	r3, [sp, #8]
   2c5f4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2c5f8:	9301      	str	r3, [sp, #4]
   2c5fa:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2c5fe:	9300      	str	r3, [sp, #0]
   2c600:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2c604:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2c608:	f7ff ff70 	bl	2c4ec <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2c60c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c610:	64dd      	str	r5, [r3, #76]	; 0x4c
   2c612:	4625      	mov	r5, r4
   2c614:	e7c9      	b.n	2c5aa <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   2c616:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2c618:	1c4b      	adds	r3, r1, #1
   2c61a:	d003      	beq.n	2c624 <_init_static_threads+0x84>
			schedule_new_thread(thread_data->init_thread,
   2c61c:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   2c61e:	b919      	cbnz	r1, 2c628 <_init_static_threads+0x88>
   2c620:	f7ff ff4d 	bl	2c4be <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2c624:	3430      	adds	r4, #48	; 0x30
   2c626:	e7d0      	b.n	2c5ca <_init_static_threads+0x2a>
   2c628:	f7ff ff04 	bl	2c434 <schedule_new_thread.part.8>
   2c62c:	e7fa      	b.n	2c624 <_init_static_threads+0x84>
   2c62e:	bf00      	nop
   2c630:	2000d808 	.word	0x2000d808
   2c634:	2000d7d8 	.word	0x2000d7d8
   2c638:	200031a8 	.word	0x200031a8

0002c63c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   2c63c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   2c63e:	2300      	movs	r3, #0
   2c640:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
   2c642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
   2c646:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   2c648:	7381      	strb	r1, [r0, #14]
   2c64a:	6203      	str	r3, [r0, #32]

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
   2c64c:	4770      	bx	lr

0002c64e <k_work_submit_to_queue>:
{
   2c64e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c650:	f101 0308 	add.w	r3, r1, #8
   2c654:	f3bf 8f5b 	dmb	ish
   2c658:	e853 2f00 	ldrex	r2, [r3]
   2c65c:	f042 0c01 	orr.w	ip, r2, #1
   2c660:	e843 ce00 	strex	lr, ip, [r3]
   2c664:	f1be 0f00 	cmp.w	lr, #0
   2c668:	d1f6      	bne.n	2c658 <k_work_submit_to_queue+0xa>
   2c66a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2c66e:	07d3      	lsls	r3, r2, #31
   2c670:	d403      	bmi.n	2c67a <k_work_submit_to_queue+0x2c>
}
   2c672:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2c676:	f7ff bb63 	b.w	2bd40 <k_queue_append>
}
   2c67a:	f85d fb04 	ldr.w	pc, [sp], #4

0002c67e <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   2c67e:	f1a0 010c 	sub.w	r1, r0, #12
   2c682:	6900      	ldr	r0, [r0, #16]
   2c684:	f7ff bfe3 	b.w	2c64e <k_work_submit_to_queue>

0002c688 <work_q_main>:
{
   2c688:	b510      	push	{r4, lr}
   2c68a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   2c68c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c690:	4620      	mov	r0, r4
   2c692:	f7ff fb79 	bl	2bd88 <_impl_k_queue_get>
		if (work == NULL) {
   2c696:	4603      	mov	r3, r0
   2c698:	2800      	cmp	r0, #0
   2c69a:	d0f7      	beq.n	2c68c <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c69c:	3308      	adds	r3, #8
		handler = work->handler;
   2c69e:	6842      	ldr	r2, [r0, #4]
   2c6a0:	f3bf 8f5b 	dmb	ish
   2c6a4:	e853 1f00 	ldrex	r1, [r3]
   2c6a8:	f021 0c01 	bic.w	ip, r1, #1
   2c6ac:	e843 ce00 	strex	lr, ip, [r3]
   2c6b0:	f1be 0f00 	cmp.w	lr, #0
   2c6b4:	d1f6      	bne.n	2c6a4 <work_q_main+0x1c>
   2c6b6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   2c6ba:	07cb      	lsls	r3, r1, #31
   2c6bc:	d500      	bpl.n	2c6c0 <work_q_main+0x38>
			handler(work);
   2c6be:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   2c6c0:	f7ff fdbe 	bl	2c240 <_impl_k_yield>
   2c6c4:	e7e2      	b.n	2c68c <work_q_main+0x4>
	...

0002c6c8 <k_work_q_start>:
{
   2c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c6cc:	4605      	mov	r5, r0
   2c6ce:	b086      	sub	sp, #24
   2c6d0:	4698      	mov	r8, r3
   2c6d2:	460e      	mov	r6, r1
   2c6d4:	4617      	mov	r7, r2
	(void)k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
   2c6d6:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   2c6da:	f7ff fb29 	bl	2bd30 <_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   2c6de:	2000      	movs	r0, #0
   2c6e0:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2c6e4:	e9cd 0802 	strd	r0, r8, [sp, #8]
   2c6e8:	e9cd 5000 	strd	r5, r0, [sp]
   2c6ec:	4631      	mov	r1, r6
   2c6ee:	4b06      	ldr	r3, [pc, #24]	; (2c708 <k_work_q_start+0x40>)
   2c6f0:	463a      	mov	r2, r7
   2c6f2:	4620      	mov	r0, r4
   2c6f4:	f7ff ff14 	bl	2c520 <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   2c6f8:	4904      	ldr	r1, [pc, #16]	; (2c70c <k_work_q_start+0x44>)
   2c6fa:	4620      	mov	r0, r4
}
   2c6fc:	b006      	add	sp, #24
   2c6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c702:	f7ff bedb 	b.w	2c4bc <_impl_k_thread_name_set>
   2c706:	bf00      	nop
   2c708:	0002c689 	.word	0x0002c689
   2c70c:	00033b43 	.word	0x00033b43

0002c710 <k_delayed_work_init>:
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   2c710:	2300      	movs	r3, #0
   2c712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c716:	e9c0 3100 	strd	r3, r1, [r0]
   2c71a:	6083      	str	r3, [r0, #8]
   2c71c:	6142      	str	r2, [r0, #20]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   2c71e:	61c3      	str	r3, [r0, #28]

	_k_object_init(work);
}
   2c720:	4770      	bx	lr

0002c722 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2c722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c724:	4604      	mov	r4, r0
	__asm__ volatile(
   2c726:	f04f 0320 	mov.w	r3, #32
   2c72a:	f3ef 8511 	mrs	r5, BASEPRI
   2c72e:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();

	if (!work->work_q) {
   2c732:	69c3      	ldr	r3, [r0, #28]
   2c734:	b923      	cbnz	r3, 2c740 <k_delayed_work_cancel+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c736:	f385 8811 	msr	BASEPRI, r5

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   2c73a:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   2c73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c740:	f3bf 8f5b 	dmb	ish
   2c744:	6883      	ldr	r3, [r0, #8]
   2c746:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2c74a:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2c74c:	f100 0608 	add.w	r6, r0, #8
   2c750:	d532      	bpl.n	2c7b8 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2c752:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2c754:	6813      	ldr	r3, [r2, #0]
   2c756:	2100      	movs	r1, #0
   2c758:	2b00      	cmp	r3, #0
   2c75a:	d0ec      	beq.n	2c736 <k_delayed_work_cancel+0x14>
   2c75c:	429c      	cmp	r4, r3
   2c75e:	d126      	bne.n	2c7ae <k_delayed_work_cancel+0x8c>
   2c760:	6823      	ldr	r3, [r4, #0]
   2c762:	6857      	ldr	r7, [r2, #4]
   2c764:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   2c768:	b9c1      	cbnz	r1, 2c79c <k_delayed_work_cancel+0x7a>
   2c76a:	42bc      	cmp	r4, r7
	list->head = node;
   2c76c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2c76e:	d100      	bne.n	2c772 <k_delayed_work_cancel+0x50>
	list->tail = node;
   2c770:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2c772:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2c774:	f003 0303 	and.w	r3, r3, #3
   2c778:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2c77a:	2000      	movs	r0, #0
   2c77c:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c77e:	f3bf 8f5b 	dmb	ish
   2c782:	e856 3f00 	ldrex	r3, [r6]
   2c786:	f023 0301 	bic.w	r3, r3, #1
   2c78a:	e846 3200 	strex	r2, r3, [r6]
   2c78e:	2a00      	cmp	r2, #0
   2c790:	d1f7      	bne.n	2c782 <k_delayed_work_cancel+0x60>
   2c792:	f3bf 8f5b 	dmb	ish
   2c796:	f385 8811 	msr	BASEPRI, r5
	return 0;
   2c79a:	e7d0      	b.n	2c73e <k_delayed_work_cancel+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2c79c:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2c79e:	f003 0303 	and.w	r3, r3, #3
   2c7a2:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2c7a4:	42bc      	cmp	r4, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   2c7a6:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2c7a8:	bf08      	it	eq
   2c7aa:	6051      	streq	r1, [r2, #4]
   2c7ac:	e7e1      	b.n	2c772 <k_delayed_work_cancel+0x50>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2c7ae:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2c7b0:	4619      	mov	r1, r3
   2c7b2:	f020 0303 	bic.w	r3, r0, #3
   2c7b6:	e7cf      	b.n	2c758 <k_delayed_work_cancel+0x36>
		(void)_abort_timeout(&work->timeout);
   2c7b8:	300c      	adds	r0, #12
   2c7ba:	f000 f861 	bl	2c880 <_abort_timeout>
   2c7be:	e7dc      	b.n	2c77a <k_delayed_work_cancel+0x58>

0002c7c0 <k_delayed_work_submit_to_queue>:
{
   2c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c7c2:	4605      	mov	r5, r0
   2c7c4:	460c      	mov	r4, r1
   2c7c6:	4616      	mov	r6, r2
	__asm__ volatile(
   2c7c8:	f04f 0320 	mov.w	r3, #32
   2c7cc:	f3ef 8711 	mrs	r7, BASEPRI
   2c7d0:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   2c7d4:	69cb      	ldr	r3, [r1, #28]
   2c7d6:	b123      	cbz	r3, 2c7e2 <k_delayed_work_submit_to_queue+0x22>
   2c7d8:	4283      	cmp	r3, r0
   2c7da:	d00b      	beq.n	2c7f4 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   2c7dc:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   2c7e0:	e00d      	b.n	2c7fe <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   2c7e2:	b138      	cbz	r0, 2c7f4 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   2c7e4:	61e5      	str	r5, [r4, #28]
	if (!delay) {
   2c7e6:	b96e      	cbnz	r6, 2c804 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   2c7e8:	4621      	mov	r1, r4
   2c7ea:	4628      	mov	r0, r5
   2c7ec:	f7ff ff2f 	bl	2c64e <k_work_submit_to_queue>
	err = 0;
   2c7f0:	2000      	movs	r0, #0
   2c7f2:	e004      	b.n	2c7fe <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   2c7f4:	4620      	mov	r0, r4
   2c7f6:	f7ff ff94 	bl	2c722 <k_delayed_work_cancel>
		if (err < 0) {
   2c7fa:	2800      	cmp	r0, #0
   2c7fc:	daf2      	bge.n	2c7e4 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c7fe:	f387 8811 	msr	BASEPRI, r7
}
   2c802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c804:	4808      	ldr	r0, [pc, #32]	; (2c828 <k_delayed_work_submit_to_queue+0x68>)
   2c806:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2c80a:	2100      	movs	r1, #0
   2c80c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2c810:	2300      	movs	r3, #0
   2c812:	fbc5 0106 	smlal	r0, r1, r5, r6
   2c816:	f7d3 fcfd 	bl	214 <__aeabi_ldivmod>
		_add_timeout(&work->timeout, work_timeout,
   2c81a:	4904      	ldr	r1, [pc, #16]	; (2c82c <k_delayed_work_submit_to_queue+0x6c>)
   2c81c:	1c42      	adds	r2, r0, #1
   2c81e:	f104 000c 	add.w	r0, r4, #12
   2c822:	f000 f88d 	bl	2c940 <_add_timeout>
   2c826:	e7e3      	b.n	2c7f0 <k_delayed_work_submit_to_queue+0x30>
   2c828:	0004ffff 	.word	0x0004ffff
   2c82c:	0002c67f 	.word	0x0002c67f

0002c830 <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   2c830:	4b03      	ldr	r3, [pc, #12]	; (2c840 <elapsed+0x10>)
   2c832:	681b      	ldr	r3, [r3, #0]
   2c834:	b90b      	cbnz	r3, 2c83a <elapsed+0xa>
   2c836:	f7d8 be58 	b.w	54ea <z_clock_elapsed>
}
   2c83a:	2000      	movs	r0, #0
   2c83c:	4770      	bx	lr
   2c83e:	bf00      	nop
   2c840:	20002f3c 	.word	0x20002f3c

0002c844 <k_spin_lock.isra.1>:
	__asm__ volatile(
   2c844:	f04f 0320 	mov.w	r3, #32
   2c848:	f3ef 8011 	mrs	r0, BASEPRI
   2c84c:	f383 8811 	msr	BASEPRI, r3
   2c850:	4770      	bx	lr
	...

0002c854 <remove_timeout>:
{
   2c854:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c856:	b140      	cbz	r0, 2c86a <remove_timeout+0x16>
   2c858:	4a08      	ldr	r2, [pc, #32]	; (2c87c <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   2c85a:	6852      	ldr	r2, [r2, #4]
   2c85c:	4290      	cmp	r0, r2
   2c85e:	d004      	beq.n	2c86a <remove_timeout+0x16>
	if (next(t) != NULL) {
   2c860:	b11b      	cbz	r3, 2c86a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   2c862:	689a      	ldr	r2, [r3, #8]
   2c864:	6881      	ldr	r1, [r0, #8]
   2c866:	440a      	add	r2, r1
   2c868:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2c86a:	6842      	ldr	r2, [r0, #4]
   2c86c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2c86e:	6803      	ldr	r3, [r0, #0]
   2c870:	605a      	str	r2, [r3, #4]
	t->dticks = _INACTIVE;
   2c872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c876:	6083      	str	r3, [r0, #8]
}
   2c878:	4770      	bx	lr
   2c87a:	bf00      	nop
   2c87c:	2000d60c 	.word	0x2000d60c

0002c880 <_abort_timeout>:

	z_clock_set_timeout(_get_next_timeout_expiry(), false);
}

int _abort_timeout(struct _timeout *to)
{
   2c880:	b510      	push	{r4, lr}
   2c882:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
   2c884:	f7ff ffde 	bl	2c844 <k_spin_lock.isra.1>
   2c888:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
   2c88a:	6890      	ldr	r0, [r2, #8]
   2c88c:	1c43      	adds	r3, r0, #1
   2c88e:	d003      	beq.n	2c898 <_abort_timeout+0x18>
			remove_timeout(to);
   2c890:	4610      	mov	r0, r2
   2c892:	f7ff ffdf 	bl	2c854 <remove_timeout>
			ret = 0;
   2c896:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2c898:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
   2c89c:	bd10      	pop	{r4, pc}
	...

0002c8a0 <z_timeout_remaining>:

s32_t z_timeout_remaining(struct _timeout *to)
{
   2c8a0:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (to->dticks == _INACTIVE) {
   2c8a2:	6883      	ldr	r3, [r0, #8]
   2c8a4:	3301      	adds	r3, #1
{
   2c8a6:	4601      	mov	r1, r0
	if (to->dticks == _INACTIVE) {
   2c8a8:	d018      	beq.n	2c8dc <z_timeout_remaining+0x3c>
		return 0;
	}

	LOCKED(&timeout_lock) {
   2c8aa:	f7ff ffcb 	bl	2c844 <k_spin_lock.isra.1>
	return list->head == list;
   2c8ae:	4a0c      	ldr	r2, [pc, #48]	; (2c8e0 <z_timeout_remaining+0x40>)
   2c8b0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c8b2:	4293      	cmp	r3, r2
   2c8b4:	d010      	beq.n	2c8d8 <z_timeout_remaining+0x38>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c8b6:	6854      	ldr	r4, [r2, #4]
   2c8b8:	2200      	movs	r2, #0
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   2c8ba:	b91b      	cbnz	r3, 2c8c4 <z_timeout_remaining+0x24>
   2c8bc:	f380 8811 	msr	BASEPRI, r0
			}
		}
	}

	return ticks;
}
   2c8c0:	4610      	mov	r0, r2
   2c8c2:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   2c8c4:	689d      	ldr	r5, [r3, #8]
			if (to == t) {
   2c8c6:	428b      	cmp	r3, r1
			ticks += t->dticks;
   2c8c8:	442a      	add	r2, r5
			if (to == t) {
   2c8ca:	d0f7      	beq.n	2c8bc <z_timeout_remaining+0x1c>
   2c8cc:	2b00      	cmp	r3, #0
   2c8ce:	d0f5      	beq.n	2c8bc <z_timeout_remaining+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2c8d0:	42a3      	cmp	r3, r4
   2c8d2:	d0f3      	beq.n	2c8bc <z_timeout_remaining+0x1c>
   2c8d4:	681b      	ldr	r3, [r3, #0]
   2c8d6:	e7f0      	b.n	2c8ba <z_timeout_remaining+0x1a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c8d8:	2200      	movs	r2, #0
   2c8da:	e7ef      	b.n	2c8bc <z_timeout_remaining+0x1c>
		return 0;
   2c8dc:	2200      	movs	r2, #0
   2c8de:	e7ef      	b.n	2c8c0 <z_timeout_remaining+0x20>
   2c8e0:	2000d60c 	.word	0x2000d60c

0002c8e4 <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   2c8e4:	4b13      	ldr	r3, [pc, #76]	; (2c934 <_get_next_timeout_expiry+0x50>)
   2c8e6:	781b      	ldrb	r3, [r3, #0]
{
   2c8e8:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   2c8ea:	2b00      	cmp	r3, #0
   2c8ec:	bf14      	ite	ne
   2c8ee:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2c8f2:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
   2c8f6:	f7ff ffa5 	bl	2c844 <k_spin_lock.isra.1>
	return list->head == list;
   2c8fa:	4b0f      	ldr	r3, [pc, #60]	; (2c938 <_get_next_timeout_expiry+0x54>)
   2c8fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c8fe:	429c      	cmp	r4, r3
   2c900:	4606      	mov	r6, r0
   2c902:	d00a      	beq.n	2c91a <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
   2c904:	b14c      	cbz	r4, 2c91a <_get_next_timeout_expiry+0x36>
   2c906:	68a5      	ldr	r5, [r4, #8]
   2c908:	f7ff ff92 	bl	2c830 <elapsed>
   2c90c:	1a28      	subs	r0, r5, r0
   2c90e:	2800      	cmp	r0, #0
   2c910:	db0d      	blt.n	2c92e <_get_next_timeout_expiry+0x4a>
   2c912:	68a4      	ldr	r4, [r4, #8]
   2c914:	f7ff ff8c 	bl	2c830 <elapsed>
   2c918:	1a22      	subs	r2, r4, r0
   2c91a:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2c91e:	4b07      	ldr	r3, [pc, #28]	; (2c93c <_get_next_timeout_expiry+0x58>)
   2c920:	691b      	ldr	r3, [r3, #16]
   2c922:	b113      	cbz	r3, 2c92a <_get_next_timeout_expiry+0x46>
   2c924:	429a      	cmp	r2, r3
   2c926:	bfa8      	it	ge
   2c928:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2c92a:	4610      	mov	r0, r2
   2c92c:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
   2c92e:	2200      	movs	r2, #0
   2c930:	e7f3      	b.n	2c91a <_get_next_timeout_expiry+0x36>
   2c932:	bf00      	nop
   2c934:	20002f40 	.word	0x20002f40
   2c938:	2000d60c 	.word	0x2000d60c
   2c93c:	200031a8 	.word	0x200031a8

0002c940 <_add_timeout>:
{
   2c940:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
   2c942:	60c1      	str	r1, [r0, #12]
{
   2c944:	4615      	mov	r5, r2
   2c946:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   2c948:	f7ff ff7c 	bl	2c844 <k_spin_lock.isra.1>
   2c94c:	4606      	mov	r6, r0
		to->dticks = ticks + elapsed();
   2c94e:	f7ff ff6f 	bl	2c830 <elapsed>
	return list->head == list;
   2c952:	4a16      	ldr	r2, [pc, #88]	; (2c9ac <_add_timeout+0x6c>)
   2c954:	6813      	ldr	r3, [r2, #0]
   2c956:	2d01      	cmp	r5, #1
   2c958:	bfac      	ite	ge
   2c95a:	1940      	addge	r0, r0, r5
   2c95c:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c95e:	4293      	cmp	r3, r2
   2c960:	60a0      	str	r0, [r4, #8]
   2c962:	d001      	beq.n	2c968 <_add_timeout+0x28>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c964:	6855      	ldr	r5, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   2c966:	b933      	cbnz	r3, 2c976 <_add_timeout+0x36>
	node->prev = list->tail;
   2c968:	6853      	ldr	r3, [r2, #4]
   2c96a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2c96c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   2c96e:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
   2c970:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2c972:	6054      	str	r4, [r2, #4]
   2c974:	e00b      	b.n	2c98e <_add_timeout+0x4e>
			if (t->dticks > to->dticks) {
   2c976:	6898      	ldr	r0, [r3, #8]
   2c978:	68a1      	ldr	r1, [r4, #8]
   2c97a:	4288      	cmp	r0, r1
   2c97c:	dd10      	ble.n	2c9a0 <_add_timeout+0x60>
		node->prev = insert_point->prev;
   2c97e:	685a      	ldr	r2, [r3, #4]
				t->dticks -= to->dticks;
   2c980:	1a41      	subs	r1, r0, r1
   2c982:	6099      	str	r1, [r3, #8]
		node->next = insert_point;
   2c984:	e9c4 3200 	strd	r3, r2, [r4]
		insert_point->prev->next = node;
   2c988:	685a      	ldr	r2, [r3, #4]
   2c98a:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2c98c:	605c      	str	r4, [r3, #4]
   2c98e:	f386 8811 	msr	BASEPRI, r6
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2c992:	f7ff ffa7 	bl	2c8e4 <_get_next_timeout_expiry>
   2c996:	2100      	movs	r1, #0
}
   2c998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2c99c:	f7d8 bda4 	b.w	54e8 <z_clock_set_timeout>
			to->dticks -= t->dticks;
   2c9a0:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   2c9a2:	429d      	cmp	r5, r3
   2c9a4:	60a1      	str	r1, [r4, #8]
   2c9a6:	d0df      	beq.n	2c968 <_add_timeout+0x28>
   2c9a8:	681b      	ldr	r3, [r3, #0]
   2c9aa:	e7dc      	b.n	2c966 <_add_timeout+0x26>
   2c9ac:	2000d60c 	.word	0x2000d60c

0002c9b0 <z_clock_announce>:
{
   2c9b0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	announce_remaining = ticks;
   2c9b4:	4d21      	ldr	r5, [pc, #132]	; (2ca3c <z_clock_announce+0x8c>)
	return list->head == list;
   2c9b6:	4e22      	ldr	r6, [pc, #136]	; (2ca40 <z_clock_announce+0x90>)
					curr_tick += t->dticks;
   2c9b8:	4f22      	ldr	r7, [pc, #136]	; (2ca44 <z_clock_announce+0x94>)
{
   2c9ba:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c9bc:	f04f 0800 	mov.w	r8, #0
	z_time_slice(ticks);
   2c9c0:	f7ff fb8c 	bl	2c0dc <z_time_slice>
	announce_remaining = ticks;
   2c9c4:	602c      	str	r4, [r5, #0]
		LOCKED(&timeout_lock) {
   2c9c6:	f7ff ff3d 	bl	2c844 <k_spin_lock.isra.1>
	return list->head == list;
   2c9ca:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c9cc:	42b4      	cmp	r4, r6
   2c9ce:	4681      	mov	r9, r0
   2c9d0:	d01c      	beq.n	2ca0c <z_clock_announce+0x5c>
			if (t != NULL) {
   2c9d2:	b194      	cbz	r4, 2c9fa <z_clock_announce+0x4a>
				if (t->dticks <= announce_remaining) {
   2c9d4:	68a1      	ldr	r1, [r4, #8]
   2c9d6:	682b      	ldr	r3, [r5, #0]
   2c9d8:	4299      	cmp	r1, r3
   2c9da:	dc15      	bgt.n	2ca08 <z_clock_announce+0x58>
					announce_remaining -= t->dticks;
   2c9dc:	1a5b      	subs	r3, r3, r1
   2c9de:	602b      	str	r3, [r5, #0]
					curr_tick += t->dticks;
   2c9e0:	e9d7 2300 	ldrd	r2, r3, [r7]
   2c9e4:	eb12 0b01 	adds.w	fp, r2, r1
   2c9e8:	eb43 7ce1 	adc.w	ip, r3, r1, asr #31
					t->dticks = 0;
   2c9ec:	f8c4 8008 	str.w	r8, [r4, #8]
					remove_timeout(t);
   2c9f0:	4620      	mov	r0, r4
					curr_tick += t->dticks;
   2c9f2:	e9c7 bc00 	strd	fp, ip, [r7]
					remove_timeout(t);
   2c9f6:	f7ff ff2d 	bl	2c854 <remove_timeout>
   2c9fa:	f389 8811 	msr	BASEPRI, r9
		if (t == NULL) {
   2c9fe:	b13c      	cbz	r4, 2ca10 <z_clock_announce+0x60>
		t->fn(t);
   2ca00:	68e3      	ldr	r3, [r4, #12]
   2ca02:	4620      	mov	r0, r4
   2ca04:	4798      	blx	r3
		LOCKED(&timeout_lock) {
   2ca06:	e7de      	b.n	2c9c6 <z_clock_announce+0x16>
					t->dticks -= announce_remaining;
   2ca08:	1ac9      	subs	r1, r1, r3
   2ca0a:	60a1      	str	r1, [r4, #8]
   2ca0c:	2400      	movs	r4, #0
   2ca0e:	e7f4      	b.n	2c9fa <z_clock_announce+0x4a>
		curr_tick += announce_remaining;
   2ca10:	4e0c      	ldr	r6, [pc, #48]	; (2ca44 <z_clock_announce+0x94>)
	LOCKED(&timeout_lock) {
   2ca12:	f7ff ff17 	bl	2c844 <k_spin_lock.isra.1>
		curr_tick += announce_remaining;
   2ca16:	e9d6 2300 	ldrd	r2, r3, [r6]
   2ca1a:	6829      	ldr	r1, [r5, #0]
		announce_remaining = 0;
   2ca1c:	602c      	str	r4, [r5, #0]
		curr_tick += announce_remaining;
   2ca1e:	1857      	adds	r7, r2, r1
   2ca20:	eb43 78e1 	adc.w	r8, r3, r1, asr #31
   2ca24:	e9c6 7800 	strd	r7, r8, [r6]
   2ca28:	f380 8811 	msr	BASEPRI, r0
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2ca2c:	f7ff ff5a 	bl	2c8e4 <_get_next_timeout_expiry>
   2ca30:	4621      	mov	r1, r4
}
   2ca32:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
   2ca36:	f7d8 bd57 	b.w	54e8 <z_clock_set_timeout>
   2ca3a:	bf00      	nop
   2ca3c:	20002f3c 	.word	0x20002f3c
   2ca40:	2000d60c 	.word	0x2000d60c
   2ca44:	20002f48 	.word	0x20002f48

0002ca48 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   2ca48:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0;

	LOCKED(&timeout_lock) {
   2ca4c:	f7ff fefa 	bl	2c844 <k_spin_lock.isra.1>
   2ca50:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
   2ca52:	f7d8 fd4a 	bl	54ea <z_clock_elapsed>
   2ca56:	4b06      	ldr	r3, [pc, #24]	; (2ca70 <z_tick_get+0x28>)
   2ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ca5c:	eb12 0b00 	adds.w	fp, r2, r0
   2ca60:	f143 0c00 	adc.w	ip, r3, #0
   2ca64:	4658      	mov	r0, fp
   2ca66:	4661      	mov	r1, ip
   2ca68:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
   2ca6c:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   2ca70:	20002f48 	.word	0x20002f48

0002ca74 <z_tick_get_32>:
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
#else
	return (u32_t)curr_tick;
#endif
}
   2ca74:	4b01      	ldr	r3, [pc, #4]	; (2ca7c <z_tick_get_32+0x8>)
   2ca76:	6818      	ldr	r0, [r3, #0]
   2ca78:	4770      	bx	lr
   2ca7a:	bf00      	nop
   2ca7c:	20002f48 	.word	0x20002f48

0002ca80 <_impl_k_uptime_get_32>:

u32_t _impl_k_uptime_get_32(void)
{
   2ca80:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	return (u32_t)curr_tick;
   2ca84:	4b08      	ldr	r3, [pc, #32]	; (2caa8 <_impl_k_uptime_get_32+0x28>)
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   2ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ca8a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2ca8e:	fba2 0104 	umull	r0, r1, r2, r4
   2ca92:	f04f 0c00 	mov.w	ip, #0
   2ca96:	fb04 110c 	mla	r1, r4, ip, r1
   2ca9a:	2264      	movs	r2, #100	; 0x64
   2ca9c:	2300      	movs	r3, #0
   2ca9e:	f7d3 fc09 	bl	2b4 <__aeabi_uldivmod>
	return __ticks_to_ms(z_tick_get_32());
}
   2caa2:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   2caa6:	bf00      	nop
   2caa8:	20002f48 	.word	0x20002f48

0002caac <_impl_k_uptime_get>:
	return _impl_k_uptime_get_32();
}
#endif

s64_t _impl_k_uptime_get(void)
{
   2caac:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(z_tick_get());
   2caae:	f7ff ffcb 	bl	2ca48 <z_tick_get>
   2cab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2cab6:	fba0 4503 	umull	r4, r5, r0, r3
   2caba:	fb03 5501 	mla	r5, r3, r1, r5
   2cabe:	2264      	movs	r2, #100	; 0x64
   2cac0:	2300      	movs	r3, #0
   2cac2:	4620      	mov	r0, r4
   2cac4:	4629      	mov	r1, r5
   2cac6:	f7d3 fbf5 	bl	2b4 <__aeabi_uldivmod>
}
   2caca:	bd38      	pop	{r3, r4, r5, pc}

0002cacc <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2cacc:	7b42      	ldrb	r2, [r0, #13]
   2cace:	06d2      	lsls	r2, r2, #27
   2cad0:	d104      	bne.n	2cadc <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
   2cad2:	6a03      	ldr	r3, [r0, #32]
   2cad4:	3301      	adds	r3, #1
   2cad6:	d101      	bne.n	2cadc <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   2cad8:	f7ff baae 	b.w	2c038 <_add_thread_to_ready_q>
}
   2cadc:	4770      	bx	lr
	...

0002cae0 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   2cae0:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   2cae2:	6a03      	ldr	r3, [r0, #32]
   2cae4:	2b00      	cmp	r3, #0
{
   2cae6:	4604      	mov	r4, r0
	if (timer->period > 0) {
   2cae8:	dd0b      	ble.n	2cb02 <_timer_expiration_handler+0x22>
	__asm__ volatile(
   2caea:	f04f 0320 	mov.w	r3, #32
   2caee:	f3ef 8511 	mrs	r5, BASEPRI
   2caf2:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(&timer->timeout, _timer_expiration_handler,
   2caf6:	4911      	ldr	r1, [pc, #68]	; (2cb3c <_timer_expiration_handler+0x5c>)
   2caf8:	6a02      	ldr	r2, [r0, #32]
   2cafa:	f7ff ff21 	bl	2c940 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2cafe:	f385 8811 	msr	BASEPRI, r5
			     timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   2cb02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cb04:	3301      	adds	r3, #1
   2cb06:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2cb08:	69a3      	ldr	r3, [r4, #24]
   2cb0a:	b10b      	cbz	r3, 2cb10 <_timer_expiration_handler+0x30>
		timer->expiry_fn(timer);
   2cb0c:	4620      	mov	r0, r4
   2cb0e:	4798      	blx	r3
	return list->head == list;
   2cb10:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cb14:	42a5      	cmp	r5, r4
   2cb16:	d010      	beq.n	2cb3a <_timer_expiration_handler+0x5a>
	}

	thread = _waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2cb18:	b17d      	cbz	r5, 2cb3a <_timer_expiration_handler+0x5a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	_unpend_thread_no_timeout(thread);
   2cb1a:	4628      	mov	r0, r5
   2cb1c:	f7ff fa10 	bl	2bf40 <_unpend_thread_no_timeout>
	__asm__ volatile(
   2cb20:	f04f 0320 	mov.w	r3, #32
   2cb24:	f3ef 8411 	mrs	r4, BASEPRI
   2cb28:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   2cb2c:	4628      	mov	r0, r5
   2cb2e:	f7ff ffcd 	bl	2cacc <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2cb32:	f384 8811 	msr	BASEPRI, r4
   2cb36:	2300      	movs	r3, #0
   2cb38:	66ab      	str	r3, [r5, #104]	; 0x68
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
   2cb3a:	bd38      	pop	{r3, r4, r5, pc}
   2cb3c:	0002cae1 	.word	0x0002cae1

0002cb40 <k_timer_init>:
void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
	timer->stop_fn = stop_fn;
   2cb40:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void _waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2cb44:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0;
   2cb48:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2cb4a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   2cb4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cb52:	6243      	str	r3, [r0, #36]	; 0x24
   2cb54:	6082      	str	r2, [r0, #8]

	_waitq_init(&timer->wait_q);
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   2cb56:	6283      	str	r3, [r0, #40]	; 0x28

	_k_object_init(timer);
}
   2cb58:	4770      	bx	lr
	...

0002cb5c <_impl_k_timer_start>:


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   2cb5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return (s32_t)ceiling_fraction(
   2cb60:	4e18      	ldr	r6, [pc, #96]	; (2cbc4 <_impl_k_timer_start+0x68>)
   2cb62:	2700      	movs	r7, #0
   2cb64:	4688      	mov	r8, r1
   2cb66:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2cb6a:	4604      	mov	r4, r0
   2cb6c:	4639      	mov	r1, r7
   2cb6e:	4630      	mov	r0, r6
   2cb70:	fbc5 0102 	smlal	r0, r1, r5, r2
   2cb74:	2300      	movs	r3, #0
   2cb76:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2cb7a:	f7d3 fb4b 	bl	214 <__aeabi_ldivmod>
   2cb7e:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   2cb80:	9000      	str	r0, [sp, #0]
   2cb82:	4630      	mov	r0, r6
   2cb84:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2cb88:	2300      	movs	r3, #0
   2cb8a:	fbc5 0108 	smlal	r0, r1, r5, r8
   2cb8e:	f7d3 fb41 	bl	214 <__aeabi_ldivmod>
	duration_in_ticks = _ms_to_ticks(duration);
   2cb92:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2cb94:	f04f 0320 	mov.w	r3, #32
   2cb98:	f3ef 8511 	mrs	r5, BASEPRI
   2cb9c:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	(void)_abort_timeout(&timer->timeout);
   2cba0:	4620      	mov	r0, r4
   2cba2:	f7ff fe6d 	bl	2c880 <_abort_timeout>
	timer->period = period_in_ticks;
   2cba6:	9b00      	ldr	r3, [sp, #0]
   2cba8:	6223      	str	r3, [r4, #32]
	timer->status = 0;
   2cbaa:	2300      	movs	r3, #0
   2cbac:	6263      	str	r3, [r4, #36]	; 0x24
	_add_timeout(&timer->timeout, _timer_expiration_handler,
   2cbae:	9a01      	ldr	r2, [sp, #4]
   2cbb0:	4905      	ldr	r1, [pc, #20]	; (2cbc8 <_impl_k_timer_start+0x6c>)
   2cbb2:	4620      	mov	r0, r4
   2cbb4:	f7ff fec4 	bl	2c940 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2cbb8:	f385 8811 	msr	BASEPRI, r5
		     duration_in_ticks);
	irq_unlock(key);
}
   2cbbc:	b002      	add	sp, #8
   2cbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cbc2:	bf00      	nop
   2cbc4:	0004ffff 	.word	0x0004ffff
   2cbc8:	0002cae1 	.word	0x0002cae1

0002cbcc <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   2cbcc:	b538      	push	{r3, r4, r5, lr}
   2cbce:	4604      	mov	r4, r0
	__asm__ volatile(
   2cbd0:	f04f 0320 	mov.w	r3, #32
   2cbd4:	f3ef 8511 	mrs	r5, BASEPRI
   2cbd8:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
   2cbdc:	f7ff fe50 	bl	2c880 <_abort_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2cbe0:	f385 8811 	msr	BASEPRI, r5

	irq_unlock(key);

	if (inactive) {
   2cbe4:	3001      	adds	r0, #1
   2cbe6:	d025      	beq.n	2cc34 <_impl_k_timer_stop+0x68>
		return;
	}

	if (timer->stop_fn) {
   2cbe8:	69e3      	ldr	r3, [r4, #28]
   2cbea:	b10b      	cbz	r3, 2cbf0 <_impl_k_timer_stop+0x24>
		timer->stop_fn(timer);
   2cbec:	4620      	mov	r0, r4
   2cbee:	4798      	blx	r3
	__asm__ volatile(
   2cbf0:	f04f 0320 	mov.w	r3, #32
   2cbf4:	f3ef 8511 	mrs	r5, BASEPRI
   2cbf8:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   2cbfc:	2100      	movs	r1, #0
   2cbfe:	f104 0010 	add.w	r0, r4, #16
   2cc02:	f7ff f991 	bl	2bf28 <_find_first_thread_to_unpend>
	if (thread != NULL) {
   2cc06:	4604      	mov	r4, r0
   2cc08:	b120      	cbz	r0, 2cc14 <_impl_k_timer_stop+0x48>
		_unpend_thread_no_timeout(thread);
   2cc0a:	f7ff f999 	bl	2bf40 <_unpend_thread_no_timeout>

	key = irq_lock();
	struct k_thread *pending_thread = _unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		_ready_thread(pending_thread);
   2cc0e:	4620      	mov	r0, r4
   2cc10:	f7ff ff5c 	bl	2cacc <_ready_thread>
   2cc14:	f3ef 8305 	mrs	r3, IPSR
   2cc18:	2b0d      	cmp	r3, #13
   2cc1a:	d809      	bhi.n	2cc30 <_impl_k_timer_stop+0x64>
   2cc1c:	b11b      	cbz	r3, 2cc26 <_impl_k_timer_stop+0x5a>
   2cc1e:	4b06      	ldr	r3, [pc, #24]	; (2cc38 <_impl_k_timer_stop+0x6c>)
   2cc20:	685b      	ldr	r3, [r3, #4]
   2cc22:	051b      	lsls	r3, r3, #20
   2cc24:	d504      	bpl.n	2cc30 <_impl_k_timer_stop+0x64>
	}

	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
   2cc26:	4628      	mov	r0, r5
	}
}
   2cc28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
   2cc2c:	f7ff b9b2 	b.w	2bf94 <_reschedule>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2cc30:	f385 8811 	msr	BASEPRI, r5
}
   2cc34:	bd38      	pop	{r3, r4, r5, pc}
   2cc36:	bf00      	nop
   2cc38:	e000ed00 	.word	0xe000ed00

0002cc3c <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   2cc3c:	6883      	ldr	r3, [r0, #8]
{
   2cc3e:	b570      	push	{r4, r5, r6, lr}
   2cc40:	4605      	mov	r5, r0
   2cc42:	460e      	mov	r6, r1
	if (!event->poller) {
   2cc44:	b1d3      	cbz	r3, 2cc7c <signal_poll_event+0x40>
	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread != NULL,
		 "poller should have a thread\n");

	event->poller->is_polling = 0;
   2cc46:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   2cc48:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   2cc4a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   2cc4c:	7b63      	ldrb	r3, [r4, #13]
   2cc4e:	079a      	lsls	r2, r3, #30
   2cc50:	d514      	bpl.n	2cc7c <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   2cc52:	6a23      	ldr	r3, [r4, #32]
   2cc54:	3302      	adds	r3, #2
   2cc56:	d01b      	beq.n	2cc90 <signal_poll_event+0x54>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   2cc58:	4620      	mov	r0, r4
   2cc5a:	f7ff f990 	bl	2bf7e <_unpend_thread>
	_set_thread_return_value(thread,
   2cc5e:	2e08      	cmp	r6, #8
   2cc60:	bf0c      	ite	eq
   2cc62:	f06f 0303 	mvneq.w	r3, #3
   2cc66:	2300      	movne	r3, #0
   2cc68:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
   2cc6a:	7b63      	ldrb	r3, [r4, #13]
   2cc6c:	06db      	lsls	r3, r3, #27
   2cc6e:	d105      	bne.n	2cc7c <signal_poll_event+0x40>
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   2cc70:	6a23      	ldr	r3, [r4, #32]
   2cc72:	3301      	adds	r3, #1
   2cc74:	d102      	bne.n	2cc7c <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   2cc76:	4620      	mov	r0, r4
   2cc78:	f7ff f9de 	bl	2c038 <_add_thread_to_ready_q>
	event->state |= state;
   2cc7c:	68eb      	ldr	r3, [r5, #12]
   2cc7e:	f3c3 3204 	ubfx	r2, r3, #12, #5
   2cc82:	4316      	orrs	r6, r2
	event->poller = NULL;
   2cc84:	2000      	movs	r0, #0
	event->state |= state;
   2cc86:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   2cc8a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2cc8c:	60eb      	str	r3, [r5, #12]
	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
}
   2cc8e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   2cc90:	f06f 000a 	mvn.w	r0, #10
   2cc94:	e7fb      	b.n	2cc8e <signal_poll_event+0x52>

0002cc96 <add_event>:
{
   2cc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cc98:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2cc9a:	e9d0 2300 	ldrd	r2, r3, [r0]
   2cc9e:	4290      	cmp	r0, r2
   2cca0:	4604      	mov	r4, r0
   2cca2:	460d      	mov	r5, r1
   2cca4:	d106      	bne.n	2ccb4 <add_event+0x1e>
	node->prev = list->tail;
   2cca6:	6863      	ldr	r3, [r4, #4]
   2cca8:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2ccaa:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2ccac:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2ccae:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ccb0:	6065      	str	r5, [r4, #4]
   2ccb2:	e019      	b.n	2cce8 <add_event+0x52>
	if ((pending == NULL) ||
   2ccb4:	2b00      	cmp	r3, #0
   2ccb6:	d0f6      	beq.n	2cca6 <add_event+0x10>
		_is_t1_higher_prio_than_t2(pending->poller->thread,
   2ccb8:	689b      	ldr	r3, [r3, #8]
   2ccba:	6839      	ldr	r1, [r7, #0]
   2ccbc:	6818      	ldr	r0, [r3, #0]
   2ccbe:	f7ff f90d 	bl	2bedc <_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2ccc2:	2800      	cmp	r0, #0
   2ccc4:	d1ef      	bne.n	2cca6 <add_event+0x10>
	return list->head == list;
   2ccc6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ccc8:	42b4      	cmp	r4, r6
   2ccca:	d0ec      	beq.n	2cca6 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2cccc:	2e00      	cmp	r6, #0
   2ccce:	d0ea      	beq.n	2cca6 <add_event+0x10>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   2ccd0:	68b3      	ldr	r3, [r6, #8]
   2ccd2:	6838      	ldr	r0, [r7, #0]
   2ccd4:	6819      	ldr	r1, [r3, #0]
   2ccd6:	f7ff f901 	bl	2bedc <_is_t1_higher_prio_than_t2>
   2ccda:	b130      	cbz	r0, 2ccea <add_event+0x54>
		node->prev = insert_point->prev;
   2ccdc:	6873      	ldr	r3, [r6, #4]
		node->next = insert_point;
   2ccde:	e9c5 6300 	strd	r6, r3, [r5]
		insert_point->prev->next = node;
   2cce2:	6873      	ldr	r3, [r6, #4]
   2cce4:	601d      	str	r5, [r3, #0]
		insert_point->prev = node;
   2cce6:	6075      	str	r5, [r6, #4]
}
   2cce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2ccea:	6863      	ldr	r3, [r4, #4]
   2ccec:	429e      	cmp	r6, r3
   2ccee:	d0da      	beq.n	2cca6 <add_event+0x10>
   2ccf0:	6836      	ldr	r6, [r6, #0]
   2ccf2:	e7eb      	b.n	2cccc <add_event+0x36>

0002ccf4 <clear_event_registrations>:
{
   2ccf4:	2314      	movs	r3, #20
   2ccf6:	b530      	push	{r4, r5, lr}
   2ccf8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2ccfc:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   2ccfe:	2900      	cmp	r1, #0
   2cd00:	da00      	bge.n	2cd04 <clear_event_registrations+0x10>
}
   2cd02:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2cd04:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   2cd06:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   2cd08:	f003 030f 	and.w	r3, r3, #15
   2cd0c:	2b02      	cmp	r3, #2
   2cd0e:	d003      	beq.n	2cd18 <clear_event_registrations+0x24>
   2cd10:	2b04      	cmp	r3, #4
   2cd12:	d001      	beq.n	2cd18 <clear_event_registrations+0x24>
   2cd14:	2b01      	cmp	r3, #1
   2cd16:	d104      	bne.n	2cd22 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   2cd18:	e9d0 5300 	ldrd	r5, r3, [r0]
   2cd1c:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   2cd1e:	6805      	ldr	r5, [r0, #0]
   2cd20:	606b      	str	r3, [r5, #4]
   2cd22:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   2cd26:	f04f 0320 	mov.w	r3, #32
   2cd2a:	f3ef 8211 	mrs	r2, BASEPRI
   2cd2e:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   2cd32:	3901      	subs	r1, #1
   2cd34:	3814      	subs	r0, #20
   2cd36:	e7e2      	b.n	2ccfe <clear_event_registrations+0xa>

0002cd38 <k_poll_event_init>:
{
   2cd38:	b530      	push	{r4, r5, lr}
	event->type = type;
   2cd3a:	7b45      	ldrb	r5, [r0, #13]
	event->obj = obj;
   2cd3c:	6103      	str	r3, [r0, #16]
	event->type = type;
   2cd3e:	f361 0503 	bfi	r5, r1, #0, #4
   2cd42:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2cd44:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   2cd46:	2400      	movs	r4, #0
	event->state = K_POLL_STATE_NOT_READY;
   2cd48:	f364 3110 	bfi	r1, r4, #12, #5
   2cd4c:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2cd4e:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2cd52:	f362 0141 	bfi	r1, r2, #1, #1
   2cd56:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   2cd58:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   2cd5a:	6084      	str	r4, [r0, #8]
	event->unused = 0;
   2cd5c:	f364 028f 	bfi	r2, r4, #2, #14
   2cd60:	81c2      	strh	r2, [r0, #14]
}
   2cd62:	bd30      	pop	{r4, r5, pc}

0002cd64 <_impl_k_poll>:
{
   2cd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2cd68:	4b40      	ldr	r3, [pc, #256]	; (2ce6c <_impl_k_poll+0x108>)
{
   2cd6a:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2cd6c:	689b      	ldr	r3, [r3, #8]
   2cd6e:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   2cd70:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2cd72:	2301      	movs	r3, #1
{
   2cd74:	4607      	mov	r7, r0
   2cd76:	468a      	mov	sl, r1
   2cd78:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   2cd7a:	9301      	str	r3, [sp, #4]
   2cd7c:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   2cd7e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   2cd82:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   2cd84:	4556      	cmp	r6, sl
   2cd86:	db10      	blt.n	2cdaa <_impl_k_poll+0x46>
   2cd88:	f04f 0320 	mov.w	r3, #32
   2cd8c:	f3ef 8611 	mrs	r6, BASEPRI
   2cd90:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   2cd94:	9c01      	ldr	r4, [sp, #4]
   2cd96:	2c00      	cmp	r4, #0
   2cd98:	d14b      	bne.n	2ce32 <_impl_k_poll+0xce>
	clear_event_registrations(events, last_registered, key);
   2cd9a:	4632      	mov	r2, r6
   2cd9c:	4629      	mov	r1, r5
   2cd9e:	4638      	mov	r0, r7
   2cda0:	f7ff ffa8 	bl	2ccf4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2cda4:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   2cda8:	e04c      	b.n	2ce44 <_impl_k_poll+0xe0>
	__asm__ volatile(
   2cdaa:	f04f 0320 	mov.w	r3, #32
   2cdae:	f3ef 8b11 	mrs	fp, BASEPRI
   2cdb2:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   2cdb6:	7b63      	ldrb	r3, [r4, #13]
   2cdb8:	f003 030f 	and.w	r3, r3, #15
   2cdbc:	2b02      	cmp	r3, #2
   2cdbe:	d003      	beq.n	2cdc8 <_impl_k_poll+0x64>
   2cdc0:	2b04      	cmp	r3, #4
   2cdc2:	d004      	beq.n	2cdce <_impl_k_poll+0x6a>
   2cdc4:	2b01      	cmp	r3, #1
   2cdc6:	d115      	bne.n	2cdf4 <_impl_k_poll+0x90>
		if (event->signal->signaled) {
   2cdc8:	6922      	ldr	r2, [r4, #16]
   2cdca:	6892      	ldr	r2, [r2, #8]
   2cdcc:	e001      	b.n	2cdd2 <_impl_k_poll+0x6e>
Z_GENLIST_IS_EMPTY(sflist)
   2cdce:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   2cdd0:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled) {
   2cdd2:	b17a      	cbz	r2, 2cdf4 <_impl_k_poll+0x90>
	event->state |= state;
   2cdd4:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2cdd6:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   2cdda:	f3c2 3104 	ubfx	r1, r2, #12, #5
   2cdde:	430b      	orrs	r3, r1
   2cde0:	f363 3210 	bfi	r2, r3, #12, #5
   2cde4:	60e2      	str	r2, [r4, #12]
			poller.is_polling = 0;
   2cde6:	f8cd 9004 	str.w	r9, [sp, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2cdea:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   2cdee:	3601      	adds	r6, #1
   2cdf0:	3414      	adds	r4, #20
   2cdf2:	e7c7      	b.n	2cd84 <_impl_k_poll+0x20>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   2cdf4:	f1b8 0f00 	cmp.w	r8, #0
   2cdf8:	d0f7      	beq.n	2cdea <_impl_k_poll+0x86>
   2cdfa:	9a01      	ldr	r2, [sp, #4]
   2cdfc:	2a00      	cmp	r2, #0
   2cdfe:	d0f4      	beq.n	2cdea <_impl_k_poll+0x86>
	switch (event->type) {
   2ce00:	2b02      	cmp	r3, #2
   2ce02:	d007      	beq.n	2ce14 <_impl_k_poll+0xb0>
   2ce04:	2b04      	cmp	r3, #4
   2ce06:	d00f      	beq.n	2ce28 <_impl_k_poll+0xc4>
   2ce08:	2b01      	cmp	r3, #1
   2ce0a:	d109      	bne.n	2ce20 <_impl_k_poll+0xbc>
		add_event(&event->signal->poll_events, event, poller);
   2ce0c:	466a      	mov	r2, sp
   2ce0e:	4621      	mov	r1, r4
   2ce10:	6920      	ldr	r0, [r4, #16]
   2ce12:	e003      	b.n	2ce1c <_impl_k_poll+0xb8>
		add_event(&event->sem->poll_events, event, poller);
   2ce14:	6920      	ldr	r0, [r4, #16]
   2ce16:	466a      	mov	r2, sp
   2ce18:	4621      	mov	r1, r4
   2ce1a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2ce1c:	f7ff ff3b 	bl	2cc96 <add_event>
	event->poller = poller;
   2ce20:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   2ce24:	3501      	adds	r5, #1
   2ce26:	e7e0      	b.n	2cdea <_impl_k_poll+0x86>
		add_event(&event->queue->poll_events, event, poller);
   2ce28:	6920      	ldr	r0, [r4, #16]
   2ce2a:	466a      	mov	r2, sp
   2ce2c:	4621      	mov	r1, r4
   2ce2e:	3008      	adds	r0, #8
   2ce30:	e7f4      	b.n	2ce1c <_impl_k_poll+0xb8>
	poller.is_polling = 0;
   2ce32:	2300      	movs	r3, #0
   2ce34:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   2ce36:	f1b8 0f00 	cmp.w	r8, #0
   2ce3a:	d107      	bne.n	2ce4c <_impl_k_poll+0xe8>
   2ce3c:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   2ce40:	f06f 040a 	mvn.w	r4, #10
}
   2ce44:	4620      	mov	r0, r4
   2ce46:	b005      	add	sp, #20
   2ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2ce4c:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   2ce4e:	4642      	mov	r2, r8
   2ce50:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2ce52:	e9cd 1102 	strd	r1, r1, [sp, #8]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   2ce56:	f7ff f997 	bl	2c188 <_pend_current_thread>
   2ce5a:	4604      	mov	r4, r0
	__asm__ volatile(
   2ce5c:	f04f 0320 	mov.w	r3, #32
   2ce60:	f3ef 8611 	mrs	r6, BASEPRI
   2ce64:	f383 8811 	msr	BASEPRI, r3
   2ce68:	e797      	b.n	2cd9a <_impl_k_poll+0x36>
   2ce6a:	bf00      	nop
   2ce6c:	200031a8 	.word	0x200031a8

0002ce70 <_handle_obj_poll_events>:
	return list->head == list;
   2ce70:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2ce72:	4298      	cmp	r0, r3
   2ce74:	d007      	beq.n	2ce86 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   2ce76:	e9d3 0200 	ldrd	r0, r2, [r3]
   2ce7a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2ce7c:	6818      	ldr	r0, [r3, #0]
   2ce7e:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   2ce80:	4618      	mov	r0, r3
   2ce82:	f7ff bedb 	b.w	2cc3c <signal_poll_event>
	}
}
   2ce86:	4770      	bx	lr

0002ce88 <_impl_k_poll_signal_init>:

void _impl_k_poll_signal_init(struct k_poll_signal *signal)
{
	sys_dlist_init(&signal->poll_events);
	signal->signaled = 0;
   2ce88:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2ce8a:	e9c0 0000 	strd	r0, r0, [r0]
   2ce8e:	6083      	str	r3, [r0, #8]
	/* signal->result is left unitialized */
	_k_object_init(signal);
}
   2ce90:	4770      	bx	lr

0002ce92 <_impl_k_poll_signal_check>:
#endif

void _impl_k_poll_signal_check(struct k_poll_signal *signal,
			       unsigned int *signaled, int *result)
{
	*signaled = signal->signaled;
   2ce92:	6883      	ldr	r3, [r0, #8]
   2ce94:	600b      	str	r3, [r1, #0]
	*result = signal->result;
   2ce96:	68c3      	ldr	r3, [r0, #12]
   2ce98:	6013      	str	r3, [r2, #0]
}
   2ce9a:	4770      	bx	lr

0002ce9c <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   2ce9c:	b538      	push	{r3, r4, r5, lr}
   2ce9e:	f04f 0320 	mov.w	r3, #32
   2cea2:	f3ef 8511 	mrs	r5, BASEPRI
   2cea6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   2ceaa:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   2ceac:	60c1      	str	r1, [r0, #12]
	if (!sys_dlist_is_empty(list)) {
   2ceae:	4298      	cmp	r0, r3
	signal->signaled = 1;
   2ceb0:	f04f 0101 	mov.w	r1, #1
   2ceb4:	6081      	str	r1, [r0, #8]
   2ceb6:	d104      	bne.n	2cec2 <_impl_k_poll_signal+0x26>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ceb8:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		irq_unlock(key);
		return 0;
   2cebc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	_reschedule(key);
	return rc;
}
   2cebe:	4620      	mov	r0, r4
   2cec0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   2cec2:	e9d3 0200 	ldrd	r0, r2, [r3]
   2cec6:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2cec8:	6818      	ldr	r0, [r3, #0]
   2ceca:	6042      	str	r2, [r0, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2cecc:	4618      	mov	r0, r3
   2cece:	f7ff feb5 	bl	2cc3c <signal_poll_event>
   2ced2:	4604      	mov	r4, r0
	_reschedule(key);
   2ced4:	4628      	mov	r0, r5
   2ced6:	f7ff f85d 	bl	2bf94 <_reschedule>
	return rc;
   2ceda:	e7f0      	b.n	2cebe <_impl_k_poll_signal+0x22>

0002cedc <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   2cedc:	4770      	bx	lr
