
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

int __weak z_clock_device_ctrl(struct device *device,
				 u32_t ctrl_command, void *context)
{
	return 0;
}
       0:	20001360 	.word	0x20001360
Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *_impl_z_errno(void)
{
	return &_current->errno_var;
}
       4:	000028e9 	.word	0x000028e9
       8:	0000293d 	.word	0x0000293d
       c:	00002775 	.word	0x00002775
      10:	00002775 	.word	0x00002775
      14:	00002775 	.word	0x00002775
      18:	00002775 	.word	0x00002775
      1c:	00002775 	.word	0x00002775
      20:	00002775 	.word	0x00002775
      24:	00002775 	.word	0x00002775
      28:	00002775 	.word	0x00002775
      2c:	000023e9 	.word	0x000023e9
      30:	00002775 	.word	0x00002775
      34:	00002775 	.word	0x00002775
      38:	000023a5 	.word	0x000023a5
      3c:	00002775 	.word	0x00002775

00000040 <_irq_vector_table>:
      40:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      50:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      60:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      70:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      80:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      90:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      a0:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      b0:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      c0:	000028ad 000028ad 000028ad 000028ad     .(...(...(...(..
      d0:	000028ad 000028ad 000028ad              .(...(...(..

000000dc <_sw_isr_table>:
      dc:	00000000 00002121 00000000 00002709     ....!!.......'..
      ec:	00000000 00002709 00000000 00002709     .....'.......'..
      fc:	00000000 00002709 00000000 00002709     .....'.......'..
     10c:	00000000 00003a75 20001dc0 00003891     ....u:..... .8..
     11c:	00000000 00002709 00000000 00002709     .....'.......'..
     12c:	00000000 00002709 00000000 00002709     .....'.......'..
     13c:	00000000 00002709 00000000 00002709     .....'.......'..
     14c:	00000000 00002709 00000000 00002709     .....'.......'..
     15c:	00000000 00002709 00000000 0000225d     .....'......]"..
     16c:	00000000 00002709 00000000 00002709     .....'.......'..
     17c:	00000000 00002709 00000000 00002709     .....'.......'..
     18c:	00000000 00002709 00000000 00002709     .....'.......'..
     19c:	00000000 00002709 00000000 00002709     .....'.......'..
     1ac:	00000000 00002709 00000000 00002709     .....'.......'..
     1bc:	00000000 00002709 00000000 00002709     .....'.......'..
     1cc:	00000000 00002709 00000000 00002709     .....'.......'..
     1dc:	00000000 00002709 00000000 00002709     .....'.......'..
     1ec:	00000000 00002709 00000000 00002709     .....'.......'..
     1fc:	00000000 00002709 00000000 00002709     .....'.......'..
     20c:	00000000 00002709                       .....'..

00000214 <__aeabi_ldivmod>:
     214:	b97b      	cbnz	r3, 236 <__aeabi_ldivmod+0x22>
     216:	b972      	cbnz	r2, 236 <__aeabi_ldivmod+0x22>
     218:	2900      	cmp	r1, #0
     21a:	bfbe      	ittt	lt
     21c:	2000      	movlt	r0, #0
     21e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     222:	e006      	blt.n	232 <__aeabi_ldivmod+0x1e>
     224:	bf08      	it	eq
     226:	2800      	cmpeq	r0, #0
     228:	bf1c      	itt	ne
     22a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     22e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     232:	f000 b9bd 	b.w	5b0 <__aeabi_idiv0>
     236:	f1ad 0c08 	sub.w	ip, sp, #8
     23a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     23e:	2900      	cmp	r1, #0
     240:	db09      	blt.n	256 <__aeabi_ldivmod+0x42>
     242:	2b00      	cmp	r3, #0
     244:	db1a      	blt.n	27c <__aeabi_ldivmod+0x68>
     246:	f000 f84d 	bl	2e4 <__udivmoddi4>
     24a:	f8dd e004 	ldr.w	lr, [sp, #4]
     24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     252:	b004      	add	sp, #16
     254:	4770      	bx	lr
     256:	4240      	negs	r0, r0
     258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     25c:	2b00      	cmp	r3, #0
     25e:	db1b      	blt.n	298 <__aeabi_ldivmod+0x84>
     260:	f000 f840 	bl	2e4 <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	4252      	negs	r2, r2
     276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     27a:	4770      	bx	lr
     27c:	4252      	negs	r2, r2
     27e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     282:	f000 f82f 	bl	2e4 <__udivmoddi4>
     286:	f8dd e004 	ldr.w	lr, [sp, #4]
     28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     28e:	b004      	add	sp, #16
     290:	4240      	negs	r0, r0
     292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     296:	4770      	bx	lr
     298:	4252      	negs	r2, r2
     29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29e:	f000 f821 	bl	2e4 <__udivmoddi4>
     2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2aa:	b004      	add	sp, #16
     2ac:	4252      	negs	r2, r2
     2ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b2:	4770      	bx	lr

000002b4 <__aeabi_uldivmod>:
     2b4:	b953      	cbnz	r3, 2cc <__aeabi_uldivmod+0x18>
     2b6:	b94a      	cbnz	r2, 2cc <__aeabi_uldivmod+0x18>
     2b8:	2900      	cmp	r1, #0
     2ba:	bf08      	it	eq
     2bc:	2800      	cmpeq	r0, #0
     2be:	bf1c      	itt	ne
     2c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2c8:	f000 b972 	b.w	5b0 <__aeabi_idiv0>
     2cc:	f1ad 0c08 	sub.w	ip, sp, #8
     2d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2d4:	f000 f806 	bl	2e4 <__udivmoddi4>
     2d8:	f8dd e004 	ldr.w	lr, [sp, #4]
     2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2e0:	b004      	add	sp, #16
     2e2:	4770      	bx	lr

000002e4 <__udivmoddi4>:
     2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2e8:	9e08      	ldr	r6, [sp, #32]
     2ea:	4604      	mov	r4, r0
     2ec:	4688      	mov	r8, r1
     2ee:	2b00      	cmp	r3, #0
     2f0:	d14b      	bne.n	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     2f2:	428a      	cmp	r2, r1
     2f4:	4615      	mov	r5, r2
     2f6:	d967      	bls.n	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
     2f8:	fab2 f282 	clz	r2, r2
     2fc:	b14a      	cbz	r2, 312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     2fe:	f1c2 0720 	rsb	r7, r2, #32
     302:	fa01 f302 	lsl.w	r3, r1, r2
     306:	fa20 f707 	lsr.w	r7, r0, r7
     30a:	4095      	lsls	r5, r2
     30c:	ea47 0803 	orr.w	r8, r7, r3
     310:	4094      	lsls	r4, r2
     312:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     316:	0c23      	lsrs	r3, r4, #16
     318:	fbb8 f7fe 	udiv	r7, r8, lr
     31c:	fa1f fc85 	uxth.w	ip, r5
     320:	fb0e 8817 	mls	r8, lr, r7, r8
     324:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     328:	fb07 f10c 	mul.w	r1, r7, ip
     32c:	4299      	cmp	r1, r3
     32e:	d909      	bls.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     330:	18eb      	adds	r3, r5, r3
     332:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     336:	f080 811b 	bcs.w	570 <CONFIG_LOG_BUFFER_SIZE+0x170>
     33a:	4299      	cmp	r1, r3
     33c:	f240 8118 	bls.w	570 <CONFIG_LOG_BUFFER_SIZE+0x170>
     340:	3f02      	subs	r7, #2
     342:	442b      	add	r3, r5
     344:	1a5b      	subs	r3, r3, r1
     346:	b2a4      	uxth	r4, r4
     348:	fbb3 f0fe 	udiv	r0, r3, lr
     34c:	fb0e 3310 	mls	r3, lr, r0, r3
     350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     354:	fb00 fc0c 	mul.w	ip, r0, ip
     358:	45a4      	cmp	ip, r4
     35a:	d909      	bls.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     35c:	192c      	adds	r4, r5, r4
     35e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     362:	f080 8107 	bcs.w	574 <CONFIG_LOG_BUFFER_SIZE+0x174>
     366:	45a4      	cmp	ip, r4
     368:	f240 8104 	bls.w	574 <CONFIG_LOG_BUFFER_SIZE+0x174>
     36c:	3802      	subs	r0, #2
     36e:	442c      	add	r4, r5
     370:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     374:	eba4 040c 	sub.w	r4, r4, ip
     378:	2700      	movs	r7, #0
     37a:	b11e      	cbz	r6, 384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     37c:	40d4      	lsrs	r4, r2
     37e:	2300      	movs	r3, #0
     380:	e9c6 4300 	strd	r4, r3, [r6]
     384:	4639      	mov	r1, r7
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	428b      	cmp	r3, r1
     38c:	d909      	bls.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     38e:	2e00      	cmp	r6, #0
     390:	f000 80eb 	beq.w	56a <CONFIG_LOG_BUFFER_SIZE+0x16a>
     394:	2700      	movs	r7, #0
     396:	e9c6 0100 	strd	r0, r1, [r6]
     39a:	4638      	mov	r0, r7
     39c:	4639      	mov	r1, r7
     39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3a2:	fab3 f783 	clz	r7, r3
     3a6:	2f00      	cmp	r7, #0
     3a8:	d147      	bne.n	43a <CONFIG_LOG_BUFFER_SIZE+0x3a>
     3aa:	428b      	cmp	r3, r1
     3ac:	d302      	bcc.n	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     3ae:	4282      	cmp	r2, r0
     3b0:	f200 80fa 	bhi.w	5a8 <CONFIG_LOG_BUFFER_SIZE+0x1a8>
     3b4:	1a84      	subs	r4, r0, r2
     3b6:	eb61 0303 	sbc.w	r3, r1, r3
     3ba:	2001      	movs	r0, #1
     3bc:	4698      	mov	r8, r3
     3be:	2e00      	cmp	r6, #0
     3c0:	d0e0      	beq.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c2:	e9c6 4800 	strd	r4, r8, [r6]
     3c6:	e7dd      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c8:	b902      	cbnz	r2, 3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     3ca:	deff      	udf	#255	; 0xff
     3cc:	fab2 f282 	clz	r2, r2
     3d0:	2a00      	cmp	r2, #0
     3d2:	f040 808f 	bne.w	4f4 <CONFIG_LOG_BUFFER_SIZE+0xf4>
     3d6:	1b49      	subs	r1, r1, r5
     3d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3dc:	fa1f f885 	uxth.w	r8, r5
     3e0:	2701      	movs	r7, #1
     3e2:	fbb1 fcfe 	udiv	ip, r1, lr
     3e6:	0c23      	lsrs	r3, r4, #16
     3e8:	fb0e 111c 	mls	r1, lr, ip, r1
     3ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3f0:	fb08 f10c 	mul.w	r1, r8, ip
     3f4:	4299      	cmp	r1, r3
     3f6:	d907      	bls.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
     3f8:	18eb      	adds	r3, r5, r3
     3fa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     3fe:	d202      	bcs.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     400:	4299      	cmp	r1, r3
     402:	f200 80cd 	bhi.w	5a0 <CONFIG_LOG_BUFFER_SIZE+0x1a0>
     406:	4684      	mov	ip, r0
     408:	1a59      	subs	r1, r3, r1
     40a:	b2a3      	uxth	r3, r4
     40c:	fbb1 f0fe 	udiv	r0, r1, lr
     410:	fb0e 1410 	mls	r4, lr, r0, r1
     414:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     418:	fb08 f800 	mul.w	r8, r8, r0
     41c:	45a0      	cmp	r8, r4
     41e:	d907      	bls.n	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
     420:	192c      	adds	r4, r5, r4
     422:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     426:	d202      	bcs.n	42e <CONFIG_LOG_BUFFER_SIZE+0x2e>
     428:	45a0      	cmp	r8, r4
     42a:	f200 80b6 	bhi.w	59a <CONFIG_LOG_BUFFER_SIZE+0x19a>
     42e:	4618      	mov	r0, r3
     430:	eba4 0408 	sub.w	r4, r4, r8
     434:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     438:	e79f      	b.n	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     43a:	f1c7 0c20 	rsb	ip, r7, #32
     43e:	40bb      	lsls	r3, r7
     440:	fa22 fe0c 	lsr.w	lr, r2, ip
     444:	ea4e 0e03 	orr.w	lr, lr, r3
     448:	fa01 f407 	lsl.w	r4, r1, r7
     44c:	fa20 f50c 	lsr.w	r5, r0, ip
     450:	fa21 f30c 	lsr.w	r3, r1, ip
     454:	ea4f 481e 	mov.w	r8, lr, lsr #16
     458:	4325      	orrs	r5, r4
     45a:	fbb3 f9f8 	udiv	r9, r3, r8
     45e:	0c2c      	lsrs	r4, r5, #16
     460:	fb08 3319 	mls	r3, r8, r9, r3
     464:	fa1f fa8e 	uxth.w	sl, lr
     468:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     46c:	fb09 f40a 	mul.w	r4, r9, sl
     470:	429c      	cmp	r4, r3
     472:	fa02 f207 	lsl.w	r2, r2, r7
     476:	fa00 f107 	lsl.w	r1, r0, r7
     47a:	d90b      	bls.n	494 <CONFIG_LOG_BUFFER_SIZE+0x94>
     47c:	eb1e 0303 	adds.w	r3, lr, r3
     480:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     484:	f080 8087 	bcs.w	596 <CONFIG_LOG_BUFFER_SIZE+0x196>
     488:	429c      	cmp	r4, r3
     48a:	f240 8084 	bls.w	596 <CONFIG_LOG_BUFFER_SIZE+0x196>
     48e:	f1a9 0902 	sub.w	r9, r9, #2
     492:	4473      	add	r3, lr
     494:	1b1b      	subs	r3, r3, r4
     496:	b2ad      	uxth	r5, r5
     498:	fbb3 f0f8 	udiv	r0, r3, r8
     49c:	fb08 3310 	mls	r3, r8, r0, r3
     4a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     4a4:	fb00 fa0a 	mul.w	sl, r0, sl
     4a8:	45a2      	cmp	sl, r4
     4aa:	d908      	bls.n	4be <CONFIG_LOG_BUFFER_SIZE+0xbe>
     4ac:	eb1e 0404 	adds.w	r4, lr, r4
     4b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     4b4:	d26b      	bcs.n	58e <CONFIG_LOG_BUFFER_SIZE+0x18e>
     4b6:	45a2      	cmp	sl, r4
     4b8:	d969      	bls.n	58e <CONFIG_LOG_BUFFER_SIZE+0x18e>
     4ba:	3802      	subs	r0, #2
     4bc:	4474      	add	r4, lr
     4be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4c2:	fba0 8902 	umull	r8, r9, r0, r2
     4c6:	eba4 040a 	sub.w	r4, r4, sl
     4ca:	454c      	cmp	r4, r9
     4cc:	46c2      	mov	sl, r8
     4ce:	464b      	mov	r3, r9
     4d0:	d354      	bcc.n	57c <CONFIG_LOG_BUFFER_SIZE+0x17c>
     4d2:	d051      	beq.n	578 <CONFIG_LOG_BUFFER_SIZE+0x178>
     4d4:	2e00      	cmp	r6, #0
     4d6:	d069      	beq.n	5ac <CONFIG_LOG_BUFFER_SIZE+0x1ac>
     4d8:	ebb1 050a 	subs.w	r5, r1, sl
     4dc:	eb64 0403 	sbc.w	r4, r4, r3
     4e0:	fa04 fc0c 	lsl.w	ip, r4, ip
     4e4:	40fd      	lsrs	r5, r7
     4e6:	40fc      	lsrs	r4, r7
     4e8:	ea4c 0505 	orr.w	r5, ip, r5
     4ec:	e9c6 5400 	strd	r5, r4, [r6]
     4f0:	2700      	movs	r7, #0
     4f2:	e747      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     4f4:	f1c2 0320 	rsb	r3, r2, #32
     4f8:	fa20 f703 	lsr.w	r7, r0, r3
     4fc:	4095      	lsls	r5, r2
     4fe:	fa01 f002 	lsl.w	r0, r1, r2
     502:	fa21 f303 	lsr.w	r3, r1, r3
     506:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     50a:	4338      	orrs	r0, r7
     50c:	0c01      	lsrs	r1, r0, #16
     50e:	fbb3 f7fe 	udiv	r7, r3, lr
     512:	fa1f f885 	uxth.w	r8, r5
     516:	fb0e 3317 	mls	r3, lr, r7, r3
     51a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     51e:	fb07 f308 	mul.w	r3, r7, r8
     522:	428b      	cmp	r3, r1
     524:	fa04 f402 	lsl.w	r4, r4, r2
     528:	d907      	bls.n	53a <CONFIG_LOG_BUFFER_SIZE+0x13a>
     52a:	1869      	adds	r1, r5, r1
     52c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     530:	d22f      	bcs.n	592 <CONFIG_LOG_BUFFER_SIZE+0x192>
     532:	428b      	cmp	r3, r1
     534:	d92d      	bls.n	592 <CONFIG_LOG_BUFFER_SIZE+0x192>
     536:	3f02      	subs	r7, #2
     538:	4429      	add	r1, r5
     53a:	1acb      	subs	r3, r1, r3
     53c:	b281      	uxth	r1, r0
     53e:	fbb3 f0fe 	udiv	r0, r3, lr
     542:	fb0e 3310 	mls	r3, lr, r0, r3
     546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     54a:	fb00 f308 	mul.w	r3, r0, r8
     54e:	428b      	cmp	r3, r1
     550:	d907      	bls.n	562 <CONFIG_LOG_BUFFER_SIZE+0x162>
     552:	1869      	adds	r1, r5, r1
     554:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     558:	d217      	bcs.n	58a <CONFIG_LOG_BUFFER_SIZE+0x18a>
     55a:	428b      	cmp	r3, r1
     55c:	d915      	bls.n	58a <CONFIG_LOG_BUFFER_SIZE+0x18a>
     55e:	3802      	subs	r0, #2
     560:	4429      	add	r1, r5
     562:	1ac9      	subs	r1, r1, r3
     564:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     568:	e73b      	b.n	3e2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe2>
     56a:	4637      	mov	r7, r6
     56c:	4630      	mov	r0, r6
     56e:	e709      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     570:	4607      	mov	r7, r0
     572:	e6e7      	b.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     574:	4618      	mov	r0, r3
     576:	e6fb      	b.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     578:	4541      	cmp	r1, r8
     57a:	d2ab      	bcs.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     57c:	ebb8 0a02 	subs.w	sl, r8, r2
     580:	eb69 020e 	sbc.w	r2, r9, lr
     584:	3801      	subs	r0, #1
     586:	4613      	mov	r3, r2
     588:	e7a4      	b.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     58a:	4660      	mov	r0, ip
     58c:	e7e9      	b.n	562 <CONFIG_LOG_BUFFER_SIZE+0x162>
     58e:	4618      	mov	r0, r3
     590:	e795      	b.n	4be <CONFIG_LOG_BUFFER_SIZE+0xbe>
     592:	4667      	mov	r7, ip
     594:	e7d1      	b.n	53a <CONFIG_LOG_BUFFER_SIZE+0x13a>
     596:	4681      	mov	r9, r0
     598:	e77c      	b.n	494 <CONFIG_LOG_BUFFER_SIZE+0x94>
     59a:	3802      	subs	r0, #2
     59c:	442c      	add	r4, r5
     59e:	e747      	b.n	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
     5a0:	f1ac 0c02 	sub.w	ip, ip, #2
     5a4:	442b      	add	r3, r5
     5a6:	e72f      	b.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
     5a8:	4638      	mov	r0, r7
     5aa:	e708      	b.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     5ac:	4637      	mov	r7, r6
     5ae:	e6e9      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>

000005b0 <__aeabi_idiv0>:
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop

000005b4 <k_sleep>:

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     5b4:	f004 b982 	b.w	48bc <_impl_k_sleep>

000005b8 <pwm_pin_set_usec.constprop.4>:
 * @param pulse Pulse width (in micro second) set to the PWM.
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->get_cycles_per_sec(dev, pwm, cycles);
     5bc:	6843      	ldr	r3, [r0, #4]
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     5be:	460e      	mov	r6, r1
     5c0:	4692      	mov	sl, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
     5c2:	685b      	ldr	r3, [r3, #4]
     5c4:	466a      	mov	r2, sp
     5c6:	2116      	movs	r1, #22
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     5c8:	4604      	mov	r4, r0
	return api->get_cycles_per_sec(dev, pwm, cycles);
     5ca:	4798      	blx	r3
				   u32_t period, u32_t pulse)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     5cc:	bb40      	cbnz	r0, 620 <pwm_pin_set_usec.constprop.4+0x68>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     5ce:	e9dd b500 	ldrd	fp, r5, [sp]
     5d2:	fba6 010b 	umull	r0, r1, r6, fp
     5d6:	fb06 1105 	mla	r1, r6, r5, r1
     5da:	4a14      	ldr	r2, [pc, #80]	; (62c <pwm_pin_set_usec.constprop.4+0x74>)
     5dc:	2300      	movs	r3, #0
     5de:	f7ff fe69 	bl	2b4 <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
     5e2:	f04f 0900 	mov.w	r9, #0
     5e6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     5ea:	4589      	cmp	r9, r1
     5ec:	bf08      	it	eq
     5ee:	4580      	cmpeq	r8, r0
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     5f0:	4606      	mov	r6, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
     5f2:	d318      	bcc.n	626 <pwm_pin_set_usec.constprop.4+0x6e>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     5f4:	fbaa 010b 	umull	r0, r1, sl, fp
     5f8:	fb0a 1105 	mla	r1, sl, r5, r1
     5fc:	4a0b      	ldr	r2, [pc, #44]	; (62c <pwm_pin_set_usec.constprop.4+0x74>)
     5fe:	2300      	movs	r3, #0
     600:	f7ff fe58 	bl	2b4 <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     604:	4589      	cmp	r9, r1
     606:	bf08      	it	eq
     608:	4580      	cmpeq	r8, r0
     60a:	d30c      	bcc.n	626 <pwm_pin_set_usec.constprop.4+0x6e>
	return api->pin_set(dev, pwm, period, pulse);
     60c:	6863      	ldr	r3, [r4, #4]
     60e:	4632      	mov	r2, r6
     610:	681d      	ldr	r5, [r3, #0]
     612:	2116      	movs	r1, #22
     614:	4603      	mov	r3, r0
     616:	4620      	mov	r0, r4
     618:	47a8      	blx	r5
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
     61a:	b003      	add	sp, #12
     61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     620:	f06f 0004 	mvn.w	r0, #4
     624:	e7f9      	b.n	61a <pwm_pin_set_usec.constprop.4+0x62>
		return -ENOTSUP;
     626:	f06f 0022 	mvn.w	r0, #34	; 0x22
     62a:	e7f6      	b.n	61a <pwm_pin_set_usec.constprop.4+0x62>
     62c:	000f4240 	.word	0x000f4240

00000630 <sample_sensor>:
	return adc_dev;
}


int sample_sensor (int channel_id)
{
     630:	b530      	push	{r4, r5, lr}
     632:	b087      	sub	sp, #28
     634:	4604      	mov	r4, r0
	int ret;

	const struct adc_sequence sequence = {
     636:	2214      	movs	r2, #20
     638:	2100      	movs	r1, #0
     63a:	a801      	add	r0, sp, #4
     63c:	f002 fa21 	bl	2a82 <memset>
		.channels    = BIT(channel_id),
     640:	2001      	movs	r0, #1
     642:	40a0      	lsls	r0, r4
	const struct adc_sequence sequence = {
     644:	230c      	movs	r3, #12
     646:	9002      	str	r0, [sp, #8]
     648:	9304      	str	r3, [sp, #16]
     64a:	4d1a      	ldr	r5, [pc, #104]	; (6b4 <sample_sensor+0x84>)
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     64c:	481a      	ldr	r0, [pc, #104]	; (6b8 <sample_sensor+0x88>)
	const struct adc_sequence sequence = {
     64e:	9503      	str	r5, [sp, #12]
     650:	230a      	movs	r3, #10
     652:	f88d 3014 	strb.w	r3, [sp, #20]
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     656:	f003 fd13 	bl	4080 <device_get_binding>
	if (!adc_dev) {
     65a:	4604      	mov	r4, r0
     65c:	b980      	cbnz	r0, 680 <sample_sensor+0x50>
		printf("Cannot get ADC device");
     65e:	4817      	ldr	r0, [pc, #92]	; (6bc <sample_sensor+0x8c>)
     660:	f002 feb4 	bl	33cc <printf>
static inline int adc_read(struct device *dev,
			   const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api = dev->driver_api;

	return api->read(dev, sequence);
     664:	6863      	ldr	r3, [r4, #4]
     666:	a901      	add	r1, sp, #4
     668:	685b      	ldr	r3, [r3, #4]
     66a:	4620      	mov	r0, r4
     66c:	4798      	blx	r3
		return -1;
	}

	ret = adc_read(adc_dev, &sequence);

	if (ret) {
     66e:	4601      	mov	r1, r0
     670:	b110      	cbz	r0, 678 <sample_sensor+0x48>
		printf("Failed to read ADC with code %d", ret);
     672:	4813      	ldr	r0, [pc, #76]	; (6c0 <sample_sensor+0x90>)
     674:	f002 feaa 	bl	33cc <printf>
	}

	return m_sample_buffer[0];
     678:	f9b5 0000 	ldrsh.w	r0, [r5]
}
     67c:	b007      	add	sp, #28
     67e:	bd30      	pop	{r4, r5, pc}
	return api->channel_setup(dev, channel_cfg);
     680:	6843      	ldr	r3, [r0, #4]
     682:	4910      	ldr	r1, [pc, #64]	; (6c4 <sample_sensor+0x94>)
     684:	681b      	ldr	r3, [r3, #0]
     686:	4798      	blx	r3
	if (ret) {
     688:	4601      	mov	r1, r0
     68a:	b110      	cbz	r0, 692 <sample_sensor+0x62>
		printf("Setting up of the first channel failed with code %d", ret);
     68c:	480e      	ldr	r0, [pc, #56]	; (6c8 <sample_sensor+0x98>)
     68e:	f002 fe9d 	bl	33cc <printf>
     692:	6863      	ldr	r3, [r4, #4]
     694:	490d      	ldr	r1, [pc, #52]	; (6cc <sample_sensor+0x9c>)
     696:	681b      	ldr	r3, [r3, #0]
     698:	4620      	mov	r0, r4
     69a:	4798      	blx	r3
	if (ret) {
     69c:	4601      	mov	r1, r0
     69e:	b110      	cbz	r0, 6a6 <sample_sensor+0x76>
		printf("Setting up of the second channel failed with code %d", ret);
     6a0:	480b      	ldr	r0, [pc, #44]	; (6d0 <sample_sensor+0xa0>)
     6a2:	f002 fe93 	bl	33cc <printf>
	(void)memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
     6a6:	220c      	movs	r2, #12
     6a8:	2100      	movs	r1, #0
     6aa:	4802      	ldr	r0, [pc, #8]	; (6b4 <sample_sensor+0x84>)
     6ac:	f002 f9e9 	bl	2a82 <memset>
     6b0:	e7d8      	b.n	664 <sample_sensor+0x34>
     6b2:	bf00      	nop
     6b4:	20000000 	.word	0x20000000
     6b8:	000051ee 	.word	0x000051ee
     6bc:	000051f4 	.word	0x000051f4
     6c0:	00005273 	.word	0x00005273
     6c4:	000050fc 	.word	0x000050fc
     6c8:	0000520a 	.word	0x0000520a
     6cc:	00005104 	.word	0x00005104
     6d0:	0000523e 	.word	0x0000523e

000006d4 <turn_clockwise>:
//==========================================================================


void turn_clockwise (struct device *pwm_dev){
		u32_t pulse_width = PERIOD;
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6d4:	f644 6220 	movw	r2, #20000	; 0x4e20
void turn_clockwise (struct device *pwm_dev){
     6d8:	b510      	push	{r4, lr}
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6da:	4611      	mov	r1, r2
void turn_clockwise (struct device *pwm_dev){
     6dc:	4604      	mov	r4, r0
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6de:	f7ff ff6b 	bl	5b8 <pwm_pin_set_usec.constprop.4>
     6e2:	b120      	cbz	r0, 6ee <turn_clockwise+0x1a>
			printk("pwm pin set fails\n");
     6e4:	480e      	ldr	r0, [pc, #56]	; (720 <turn_clockwise+0x4c>)
		k_sleep(90);
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
			printk("pwm pin set fails\n");
			return;
		}
}
     6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printk("pwm pin set fails\n");
     6ea:	f000 bab7 	b.w	c5c <printk>
		k_sleep(90);
     6ee:	205a      	movs	r0, #90	; 0x5a
     6f0:	f7ff ff60 	bl	5b4 <k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6f4:	f644 5258 	movw	r2, #19800	; 0x4d58
     6f8:	f644 6120 	movw	r1, #20000	; 0x4e20
     6fc:	4620      	mov	r0, r4
     6fe:	f7ff ff5b 	bl	5b8 <pwm_pin_set_usec.constprop.4>
     702:	2800      	cmp	r0, #0
     704:	d1ee      	bne.n	6e4 <turn_clockwise+0x10>
		k_sleep(90);
     706:	205a      	movs	r0, #90	; 0x5a
     708:	f7ff ff54 	bl	5b4 <k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     70c:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
     710:	f644 6120 	movw	r1, #20000	; 0x4e20
     714:	4620      	mov	r0, r4
     716:	f7ff ff4f 	bl	5b8 <pwm_pin_set_usec.constprop.4>
     71a:	2800      	cmp	r0, #0
     71c:	d1e2      	bne.n	6e4 <turn_clockwise+0x10>
}
     71e:	bd10      	pop	{r4, pc}
     720:	00005293 	.word	0x00005293

00000724 <turn_anticlockwise>:

void turn_anticlockwise (struct device *pwm_dev){
     724:	b510      	push	{r4, lr}
		u32_t pulse_width = 0;
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     726:	2200      	movs	r2, #0
     728:	f644 6120 	movw	r1, #20000	; 0x4e20
void turn_anticlockwise (struct device *pwm_dev){
     72c:	4604      	mov	r4, r0
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     72e:	f7ff ff43 	bl	5b8 <pwm_pin_set_usec.constprop.4>
     732:	b120      	cbz	r0, 73e <turn_anticlockwise+0x1a>
			printk("pwm pin set fails\n");
     734:	480e      	ldr	r0, [pc, #56]	; (770 <turn_anticlockwise+0x4c>)
		k_sleep(90);
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
			printk("pwm pin set fails\n");
			return;
		}
}
     736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printk("pwm pin set fails\n");
     73a:	f000 ba8f 	b.w	c5c <printk>
		k_sleep(90);
     73e:	205a      	movs	r0, #90	; 0x5a
     740:	f7ff ff38 	bl	5b4 <k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     744:	22c8      	movs	r2, #200	; 0xc8
     746:	f644 6120 	movw	r1, #20000	; 0x4e20
     74a:	4620      	mov	r0, r4
     74c:	f7ff ff34 	bl	5b8 <pwm_pin_set_usec.constprop.4>
     750:	2800      	cmp	r0, #0
     752:	d1ef      	bne.n	734 <turn_anticlockwise+0x10>
		k_sleep(90);
     754:	205a      	movs	r0, #90	; 0x5a
     756:	f7ff ff2d 	bl	5b4 <k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     75a:	f44f 72c8 	mov.w	r2, #400	; 0x190
     75e:	f644 6120 	movw	r1, #20000	; 0x4e20
     762:	4620      	mov	r0, r4
     764:	f7ff ff28 	bl	5b8 <pwm_pin_set_usec.constprop.4>
     768:	2800      	cmp	r0, #0
     76a:	d1e3      	bne.n	734 <turn_anticlockwise+0x10>
}
     76c:	bd10      	pop	{r4, pc}
     76e:	bf00      	nop
     770:	00005293 	.word	0x00005293

00000774 <fill_up>:

void fill_up(struct device *pwm_dev){
     774:	b510      	push	{r4, lr}
     776:	4604      	mov	r4, r0
	turn_clockwise(pwm_dev);
     778:	f7ff ffac 	bl	6d4 <turn_clockwise>
	pwm_pin_set_usec(pwm_dev, YOUR_PIN, 0, 0);
     77c:	2200      	movs	r2, #0
     77e:	4611      	mov	r1, r2
     780:	4620      	mov	r0, r4
     782:	f7ff ff19 	bl	5b8 <pwm_pin_set_usec.constprop.4>
	k_sleep(MSEC_PER_SEC);
     786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     78a:	f7ff ff13 	bl	5b4 <k_sleep>
	turn_anticlockwise(pwm_dev);
     78e:	4620      	mov	r0, r4
     790:	f7ff ffc8 	bl	724 <turn_anticlockwise>
	pwm_pin_set_usec(pwm_dev, YOUR_PIN, 0, 0);
     794:	2200      	movs	r2, #0
     796:	4620      	mov	r0, r4
     798:	4611      	mov	r1, r2
}
     79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	pwm_pin_set_usec(pwm_dev, YOUR_PIN, 0, 0);
     79e:	f7ff bf0b 	b.w	5b8 <pwm_pin_set_usec.constprop.4>

000007a2 <get_time_to>:
//given the current time, calculate the length of time until the next feeding time.
//next feeding time must be the next 
u32_t get_time_to(u32_t start_time, u32_t end_time)
{
    u32_t time_diff_in_mins = 0;
    u32_t start_min = start_time % 100;
     7a2:	2364      	movs	r3, #100	; 0x64
    u32_t start_hour = start_time / 100;
    u32_t end_min = end_time % 100;
    u32_t end_hour = end_time / 100;

    if (end_time < start_time)
     7a4:	4288      	cmp	r0, r1
    u32_t start_min = start_time % 100;
     7a6:	fbb0 f2f3 	udiv	r2, r0, r3
{
     7aa:	b530      	push	{r4, r5, lr}
    u32_t end_min = end_time % 100;
     7ac:	fbb1 f4f3 	udiv	r4, r1, r3
    u32_t start_min = start_time % 100;
     7b0:	fb03 0512 	mls	r5, r3, r2, r0
    u32_t end_min = end_time % 100;
     7b4:	fb03 1314 	mls	r3, r3, r4, r1
    {
        end_hour += 12;
        time_diff_in_mins += 12*60;
     7b8:	bf8a      	itet	hi
     7ba:	f44f 7034 	movhi.w	r0, #720	; 0x2d0
    u32_t time_diff_in_mins = 0;
     7be:	2000      	movls	r0, #0
        end_hour += 12;
     7c0:	340c      	addhi	r4, #12
    }
    if (end_min > start_min)
     7c2:	429d      	cmp	r5, r3
        time_diff_in_mins += end_min - start_min;
        time_diff_in_mins += 60*(end_hour - start_hour); 
    }
    else
    {
        time_diff_in_mins += 60 - start_min + end_min;
     7c4:	bf29      	itett	cs
     7c6:	333c      	addcs	r3, #60	; 0x3c
        time_diff_in_mins += end_min - start_min;
     7c8:	1b5b      	subcc	r3, r3, r5
        time_diff_in_mins += 60 - start_min + end_min;
     7ca:	1b5b      	subcs	r3, r3, r5
        start_hour += 1;
        time_diff_in_mins += 60*(end_hour - start_hour);
     7cc:	43d2      	mvncs	r2, r2
        time_diff_in_mins += end_min - start_min;
     7ce:	bf35      	itete	cc
     7d0:	181b      	addcc	r3, r3, r0
        time_diff_in_mins += 60 - start_min + end_min;
     7d2:	181b      	addcs	r3, r3, r0
        time_diff_in_mins += 60*(end_hour - start_hour); 
     7d4:	1aa2      	subcc	r2, r4, r2
        time_diff_in_mins += 60*(end_hour - start_hour);
     7d6:	1912      	addcs	r2, r2, r4
     7d8:	203c      	movs	r0, #60	; 0x3c
     7da:	fb00 3302 	mla	r3, r0, r2, r3
    }
    
    
    return time_diff_in_mins * 60000;
}
     7de:	f64e 2060 	movw	r0, #60000	; 0xea60
     7e2:	4358      	muls	r0, r3
     7e4:	bd30      	pop	{r4, r5, pc}
	...

000007e8 <main>:




void main(void)
{
     7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int sample;

	printf("Preparing ADC\n");
     7ec:	4838      	ldr	r0, [pc, #224]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     7ee:	f002 fded 	bl	33cc <printf>
	
	u32_t time_stamp;
	u32_t milliseconds_spent;
	

	btn_dev = device_get_binding(BTN_PORT);
     7f2:	4838      	ldr	r0, [pc, #224]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
     7f4:	f003 fc44 	bl	4080 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     7f8:	6843      	ldr	r3, [r0, #4]
     7fa:	220d      	movs	r2, #13
     7fc:	2100      	movs	r1, #0
     7fe:	681c      	ldr	r4, [r3, #0]
     800:	f44f 7380 	mov.w	r3, #256	; 0x100
     804:	47a0      	blx	r4
	gpio_pin_configure(btn_dev, BTN, GPIO_DIR_IN | GPIO_PUD_PULL_UP);
	printk("PWM servo control 90degree clockwise -> 90degree anticlockwise\n");
     806:	4834      	ldr	r0, [pc, #208]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
     808:	f000 fa28 	bl	c5c <printk>
	pwm_dev = device_get_binding(PWM_DRIVER);
     80c:	4833      	ldr	r0, [pc, #204]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     80e:	f003 fc37 	bl	4080 <device_get_binding>
	if (!pwm_dev) {
     812:	4606      	mov	r6, r0
     814:	b928      	cbnz	r0, 822 <CONFIG_ISR_STACK_SIZE+0x22>
		printk("Cannot find %s!\n", PWM_DRIVER);
     816:	4931      	ldr	r1, [pc, #196]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     818:	4831      	ldr	r0, [pc, #196]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
			k_sleep(MSEC_PER_SEC);
			time_stamp = k_uptime_get_32();
		}

	}
}
     81a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		printk("Cannot find %s!\n", PWM_DRIVER);
     81e:	f000 ba1d 	b.w	c5c <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer)

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)

K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
     822:	f004 faef 	bl	4e04 <_impl_k_uptime_get_32>
	u32_t time_until = get_time_to(1501, 1502) + time_stamp;
     826:	f240 51de 	movw	r1, #1502	; 0x5de
     82a:	4604      	mov	r4, r0
     82c:	f240 50dd 	movw	r0, #1501	; 0x5dd
     830:	f7ff ffb7 	bl	7a2 <get_time_to>
	printf("%" PRIu32 "\n", time_stamp);
     834:	4621      	mov	r1, r4
	u32_t time_until = get_time_to(1501, 1502) + time_stamp;
     836:	1905      	adds	r5, r0, r4
	printf("%" PRIu32 "\n", time_stamp);
     838:	482a      	ldr	r0, [pc, #168]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
		printk("\nSampling ... ");
     83a:	4f2b      	ldr	r7, [pc, #172]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
			printf("Bowl is fullish");
     83c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			printf("Bowl is 3/4 fullish");
     840:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 900 <CONFIG_ISR_STACK_SIZE+0x100>
	printf("%" PRIu32 "\n", time_stamp);
     844:	f002 fdc2 	bl	33cc <printf>
	printf("%" PRIu32 "\n", time_until);
     848:	4629      	mov	r1, r5
     84a:	4826      	ldr	r0, [pc, #152]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     84c:	f002 fdbe 	bl	33cc <printf>
		k_sleep(500);
     850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     854:	f7ff feae 	bl	5b4 <k_sleep>
		printk("\nSampling ... ");
     858:	4638      	mov	r0, r7
     85a:	f000 f9ff 	bl	c5c <printk>
		sample = sample_sensor(ADC_1ST_CHANNEL_ID);
     85e:	2000      	movs	r0, #0
     860:	f7ff fee6 	bl	630 <sample_sensor>
		if(sample < 200){
     864:	28c7      	cmp	r0, #199	; 0xc7
		sample = sample_sensor(ADC_1ST_CHANNEL_ID);
     866:	4604      	mov	r4, r0
		if(sample < 200){
     868:	dc1c      	bgt.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
			printf("Bowl is emptyish");
     86a:	4820      	ldr	r0, [pc, #128]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
			printf("Bowl is fullish");
     86c:	f002 fdae 	bl	33cc <printf>
		printk("%d \n", sample);
     870:	4621      	mov	r1, r4
     872:	481f      	ldr	r0, [pc, #124]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     874:	f000 f9f2 	bl	c5c <printk>
     878:	f004 fac4 	bl	4e04 <_impl_k_uptime_get_32>
		if(milliseconds_spent >= (time_until) && milliseconds_spent <=(time_until+1000)){
     87c:	4285      	cmp	r5, r0
     87e:	4601      	mov	r1, r0
     880:	d8e6      	bhi.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
     882:	f505 737a 	add.w	r3, r5, #1000	; 0x3e8
     886:	4298      	cmp	r0, r3
     888:	d8e2      	bhi.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			printf("%" PRIu32 "\n", milliseconds_spent);
     88a:	4816      	ldr	r0, [pc, #88]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     88c:	f002 fd9e 	bl	33cc <printf>
			fill_up(pwm_dev);
     890:	4630      	mov	r0, r6
     892:	f7ff ff6f 	bl	774 <fill_up>
			k_sleep(MSEC_PER_SEC);
     896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     89a:	f7ff fe8b 	bl	5b4 <k_sleep>
     89e:	f004 fab1 	bl	4e04 <_impl_k_uptime_get_32>
     8a2:	e7d5      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		} else if(sample >= 200 && sample <= 370){
     8a4:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
     8a8:	2baa      	cmp	r3, #170	; 0xaa
     8aa:	d801      	bhi.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
			printf("Bowl is 1/4 fullish");
     8ac:	4811      	ldr	r0, [pc, #68]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
     8ae:	e7dd      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
		} else if(sample > 370 && sample <= 500){
     8b0:	f46f 72b9 	mvn.w	r2, #370	; 0x172
     8b4:	1883      	adds	r3, r0, r2
     8b6:	2b81      	cmp	r3, #129	; 0x81
     8b8:	d801      	bhi.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
			printf("Bowl is 1/2 fullish");
     8ba:	480f      	ldr	r0, [pc, #60]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     8bc:	e7d6      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
		} else if(sample > 500 && sample <= 580){
     8be:	f46f 73fa 	mvn.w	r3, #500	; 0x1f4
     8c2:	18c3      	adds	r3, r0, r3
     8c4:	2b4f      	cmp	r3, #79	; 0x4f
			printf("Bowl is 3/4 fullish");
     8c6:	bf94      	ite	ls
     8c8:	4648      	movls	r0, r9
			printf("Bowl is fullish");
     8ca:	4640      	movhi	r0, r8
     8cc:	e7ce      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     8ce:	bf00      	nop
     8d0:	0000510c 	.word	0x0000510c
     8d4:	0000511b 	.word	0x0000511b
     8d8:	00005122 	.word	0x00005122
     8dc:	00005162 	.word	0x00005162
     8e0:	00005168 	.word	0x00005168
     8e4:	00005179 	.word	0x00005179
     8e8:	0000517d 	.word	0x0000517d
     8ec:	0000518c 	.word	0x0000518c
     8f0:	000051e9 	.word	0x000051e9
     8f4:	0000519d 	.word	0x0000519d
     8f8:	000051b1 	.word	0x000051b1
     8fc:	000051d9 	.word	0x000051d9
     900:	000051c5 	.word	0x000051c5

00000904 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     904:	b508      	push	{r3, lr}
     906:	4604      	mov	r4, r0
     908:	4608      	mov	r0, r1
     90a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     90c:	461a      	mov	r2, r3
     90e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     910:	f004 f83a 	bl	4988 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     914:	f001 ffa6 	bl	2864 <_impl_k_thread_abort>

00000918 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     918:	2000      	movs	r0, #0
     91a:	4770      	bx	lr

0000091c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     91c:	680b      	ldr	r3, [r1, #0]
     91e:	3301      	adds	r3, #1
     920:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     922:	4b01      	ldr	r3, [pc, #4]	; (928 <char_out+0xc>)
     924:	681b      	ldr	r3, [r3, #0]
     926:	4718      	bx	r3
     928:	20001ca0 	.word	0x20001ca0

0000092c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     930:	b085      	sub	sp, #20
     932:	469b      	mov	fp, r3
     934:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     936:	f8df a090 	ldr.w	sl, [pc, #144]	; 9c8 <_printk_dec_ulong+0x9c>
     93a:	2c01      	cmp	r4, #1
     93c:	bfb8      	it	lt
     93e:	2401      	movlt	r4, #1
     940:	2b01      	cmp	r3, #1
     942:	bf0c      	ite	eq
     944:	2330      	moveq	r3, #48	; 0x30
     946:	2320      	movne	r3, #32
     948:	4615      	mov	r5, r2
     94a:	4680      	mov	r8, r0
     94c:	4689      	mov	r9, r1
     94e:	9401      	str	r4, [sp, #4]
     950:	9302      	str	r3, [sp, #8]
     952:	2601      	movs	r6, #1
     954:	270a      	movs	r7, #10
     956:	2200      	movs	r2, #0
     958:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     95c:	b90a      	cbnz	r2, 962 <_printk_dec_ulong+0x36>
     95e:	45aa      	cmp	sl, r5
     960:	d21f      	bcs.n	9a2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     962:	fbb5 f0f4 	udiv	r0, r5, r4
     966:	4649      	mov	r1, r9
     968:	3030      	adds	r0, #48	; 0x30
     96a:	47c0      	blx	r8
			digits++;
     96c:	3601      	adds	r6, #1
			found_largest_digit = 1;
     96e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     970:	3f01      	subs	r7, #1
	while (pos >= 9) {
     972:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     974:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     978:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     97c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     980:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     984:	d1e8      	bne.n	958 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     986:	4649      	mov	r1, r9
     988:	f105 0030 	add.w	r0, r5, #48	; 0x30
     98c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     98e:	f1bb 0f03 	cmp.w	fp, #3
     992:	d103      	bne.n	99c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     994:	9b01      	ldr	r3, [sp, #4]
     996:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     998:	2c00      	cmp	r4, #0
     99a:	dc0f      	bgt.n	9bc <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     99c:	b005      	add	sp, #20
     99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     9a2:	9b01      	ldr	r3, [sp, #4]
     9a4:	42bb      	cmp	r3, r7
     9a6:	dbe3      	blt.n	970 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     9a8:	f1bb 0f02 	cmp.w	fp, #2
     9ac:	d8e0      	bhi.n	970 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     9ae:	4649      	mov	r1, r9
     9b0:	9802      	ldr	r0, [sp, #8]
     9b2:	9203      	str	r2, [sp, #12]
			digits++;
     9b4:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     9b6:	47c0      	blx	r8
			digits++;
     9b8:	9a03      	ldr	r2, [sp, #12]
     9ba:	e7d9      	b.n	970 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     9bc:	4649      	mov	r1, r9
     9be:	2020      	movs	r0, #32
     9c0:	47c0      	blx	r8
     9c2:	3c01      	subs	r4, #1
     9c4:	e7e8      	b.n	998 <_printk_dec_ulong+0x6c>
     9c6:	bf00      	nop
     9c8:	3b9ac9ff 	.word	0x3b9ac9ff

000009cc <__printk_hook_install>:
	_char_out = fn;
     9cc:	4b01      	ldr	r3, [pc, #4]	; (9d4 <__printk_hook_install+0x8>)
     9ce:	6018      	str	r0, [r3, #0]
}
     9d0:	4770      	bx	lr
     9d2:	bf00      	nop
     9d4:	20001ca0 	.word	0x20001ca0

000009d8 <_vprintk>:
{
     9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9dc:	b089      	sub	sp, #36	; 0x24
     9de:	461c      	mov	r4, r3
	int long_ctr = 0;
     9e0:	f04f 0a00 	mov.w	sl, #0
     9e4:	1e53      	subs	r3, r2, #1
{
     9e6:	4606      	mov	r6, r0
     9e8:	460f      	mov	r7, r1
     9ea:	9304      	str	r3, [sp, #16]
	int min_width = -1;
     9ec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     9f0:	46d0      	mov	r8, sl
			might_format = 0;
     9f2:	2500      	movs	r5, #0
				break;
     9f4:	e005      	b.n	a02 <_vprintk+0x2a>
		if (!might_format) {
     9f6:	b96d      	cbnz	r5, a14 <_vprintk+0x3c>
			if (*fmt != '%') {
     9f8:	2825      	cmp	r0, #37	; 0x25
     9fa:	f000 8112 	beq.w	c22 <_vprintk+0x24a>
				out((int)*fmt, ctx);
     9fe:	4639      	mov	r1, r7
     a00:	47b0      	blx	r6
	while (*fmt) {
     a02:	9b04      	ldr	r3, [sp, #16]
     a04:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     a08:	9304      	str	r3, [sp, #16]
     a0a:	2800      	cmp	r0, #0
     a0c:	d1f3      	bne.n	9f6 <_vprintk+0x1e>
}
     a0e:	b009      	add	sp, #36	; 0x24
     a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     a14:	2864      	cmp	r0, #100	; 0x64
     a16:	d061      	beq.n	adc <_vprintk+0x104>
     a18:	d819      	bhi.n	a4e <_vprintk+0x76>
     a1a:	2839      	cmp	r0, #57	; 0x39
     a1c:	d80a      	bhi.n	a34 <_vprintk+0x5c>
     a1e:	2831      	cmp	r0, #49	; 0x31
     a20:	d250      	bcs.n	ac4 <_vprintk+0xec>
     a22:	282d      	cmp	r0, #45	; 0x2d
     a24:	d03c      	beq.n	aa0 <_vprintk+0xc8>
     a26:	2830      	cmp	r0, #48	; 0x30
     a28:	d03d      	beq.n	aa6 <_vprintk+0xce>
     a2a:	2825      	cmp	r0, #37	; 0x25
     a2c:	d108      	bne.n	a40 <_vprintk+0x68>
				out((int)'%', ctx);
     a2e:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     a30:	47b0      	blx	r6
     a32:	e7de      	b.n	9f2 <_vprintk+0x1a>
			switch (*fmt) {
     a34:	2858      	cmp	r0, #88	; 0x58
     a36:	f000 8088 	beq.w	b4a <_vprintk+0x172>
     a3a:	2863      	cmp	r0, #99	; 0x63
     a3c:	f000 80eb 	beq.w	c16 <_vprintk+0x23e>
				out((int)'%', ctx);
     a40:	4639      	mov	r1, r7
     a42:	2025      	movs	r0, #37	; 0x25
     a44:	47b0      	blx	r6
				out((int)*fmt, ctx);
     a46:	9b04      	ldr	r3, [sp, #16]
     a48:	4639      	mov	r1, r7
     a4a:	7818      	ldrb	r0, [r3, #0]
     a4c:	e7f0      	b.n	a30 <_vprintk+0x58>
			switch (*fmt) {
     a4e:	2870      	cmp	r0, #112	; 0x70
     a50:	d071      	beq.n	b36 <_vprintk+0x15e>
     a52:	d806      	bhi.n	a62 <_vprintk+0x8a>
     a54:	2869      	cmp	r0, #105	; 0x69
     a56:	d041      	beq.n	adc <_vprintk+0x104>
     a58:	286c      	cmp	r0, #108	; 0x6c
     a5a:	d03c      	beq.n	ad6 <_vprintk+0xfe>
     a5c:	2868      	cmp	r0, #104	; 0x68
     a5e:	d0d0      	beq.n	a02 <_vprintk+0x2a>
     a60:	e7ee      	b.n	a40 <_vprintk+0x68>
     a62:	2875      	cmp	r0, #117	; 0x75
     a64:	d057      	beq.n	b16 <_vprintk+0x13e>
     a66:	d817      	bhi.n	a98 <_vprintk+0xc0>
     a68:	2873      	cmp	r0, #115	; 0x73
     a6a:	d1e9      	bne.n	a40 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
     a6c:	6823      	ldr	r3, [r4, #0]
     a6e:	f104 0b04 	add.w	fp, r4, #4
     a72:	461c      	mov	r4, r3
				while (*s)
     a74:	4625      	mov	r5, r4
     a76:	f815 0b01 	ldrb.w	r0, [r5], #1
     a7a:	2800      	cmp	r0, #0
     a7c:	f040 80c0 	bne.w	c00 <_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
     a80:	f1b8 0f03 	cmp.w	r8, #3
     a84:	f040 80d6 	bne.w	c34 <_vprintk+0x25c>
					int remaining = min_width - (s - start);
     a88:	1ae4      	subs	r4, r4, r3
     a8a:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     a8e:	2c00      	cmp	r4, #0
     a90:	f300 80bc 	bgt.w	c0c <_vprintk+0x234>
				char *s = va_arg(ap, char *);
     a94:	465c      	mov	r4, fp
     a96:	e7ac      	b.n	9f2 <_vprintk+0x1a>
			switch (*fmt) {
     a98:	2878      	cmp	r0, #120	; 0x78
     a9a:	d056      	beq.n	b4a <_vprintk+0x172>
     a9c:	287a      	cmp	r0, #122	; 0x7a
     a9e:	e7de      	b.n	a5e <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
     aa0:	f04f 0803 	mov.w	r8, #3
     aa4:	e7ad      	b.n	a02 <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
     aa6:	f1b9 0f00 	cmp.w	r9, #0
     aaa:	da0e      	bge.n	aca <_vprintk+0xf2>
     aac:	f1b8 0f00 	cmp.w	r8, #0
     ab0:	f000 80bd 	beq.w	c2e <_vprintk+0x256>
					min_width = *fmt - '0';
     ab4:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     ab8:	f1b8 0f00 	cmp.w	r8, #0
     abc:	bf08      	it	eq
     abe:	f04f 0802 	moveq.w	r8, #2
     ac2:	e79e      	b.n	a02 <_vprintk+0x2a>
				if (min_width < 0) {
     ac4:	f1b9 0f00 	cmp.w	r9, #0
     ac8:	dbf4      	blt.n	ab4 <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
     aca:	230a      	movs	r3, #10
     acc:	fb03 0909 	mla	r9, r3, r9, r0
     ad0:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     ad4:	e7f0      	b.n	ab8 <_vprintk+0xe0>
				long_ctr++;
     ad6:	f10a 0a01 	add.w	sl, sl, #1
     ada:	e792      	b.n	a02 <_vprintk+0x2a>
				if (long_ctr < 2) {
     adc:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     ae0:	bfc5      	ittet	gt
     ae2:	3407      	addgt	r4, #7
     ae4:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     ae8:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     aea:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     aec:	bfd4      	ite	le
     aee:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     af0:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     af4:	2d00      	cmp	r5, #0
     af6:	da05      	bge.n	b04 <_vprintk+0x12c>
					out((int)'-', ctx);
     af8:	4639      	mov	r1, r7
     afa:	202d      	movs	r0, #45	; 0x2d
     afc:	47b0      	blx	r6
					d = -d;
     afe:	426d      	negs	r5, r5
					min_width--;
     b00:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     b04:	f8cd 9000 	str.w	r9, [sp]
     b08:	4643      	mov	r3, r8
     b0a:	462a      	mov	r2, r5
     b0c:	4639      	mov	r1, r7
     b0e:	4630      	mov	r0, r6
     b10:	f7ff ff0c 	bl	92c <_printk_dec_ulong>
     b14:	e76d      	b.n	9f2 <_vprintk+0x1a>
				if (long_ctr < 2) {
     b16:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     b1a:	bfc5      	ittet	gt
     b1c:	3407      	addgt	r4, #7
     b1e:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     b22:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     b24:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     b26:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     b2a:	bfcc      	ite	gt
     b2c:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     b30:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     b32:	4643      	mov	r3, r8
     b34:	e7ea      	b.n	b0c <_vprintk+0x134>
				  out('0', ctx);
     b36:	4639      	mov	r1, r7
     b38:	2030      	movs	r0, #48	; 0x30
     b3a:	47b0      	blx	r6
				  out('x', ctx);
     b3c:	4639      	mov	r1, r7
     b3e:	2078      	movs	r0, #120	; 0x78
     b40:	47b0      	blx	r6
				  min_width = 8;
     b42:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     b46:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     b4a:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     b4e:	bfc7      	ittee	gt
     b50:	3407      	addgt	r4, #7
     b52:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     b56:	6823      	ldrle	r3, [r4, #0]
     b58:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     b5a:	bfc2      	ittt	gt
     b5c:	f103 0408 	addgt.w	r4, r3, #8
     b60:	681b      	ldrgt	r3, [r3, #0]
     b62:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     b64:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     b68:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     b6c:	bfd8      	it	le
     b6e:	3404      	addle	r4, #4
	int digits = 0;
     b70:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     b72:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     b74:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     b76:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     b7a:	9b05      	ldr	r3, [sp, #20]
     b7c:	ea4f 008b 	mov.w	r0, fp, lsl #2
     b80:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     b84:	f010 000f 	ands.w	r0, r0, #15
     b88:	d109      	bne.n	b9e <_vprintk+0x1c6>
     b8a:	9b07      	ldr	r3, [sp, #28]
     b8c:	b913      	cbnz	r3, b94 <_vprintk+0x1bc>
     b8e:	f1bb 0f00 	cmp.w	fp, #0
     b92:	d124      	bne.n	bde <_vprintk+0x206>
			nibble += nibble > 9 ? 87 : 48;
     b94:	f04f 0c30 	mov.w	ip, #48	; 0x30
     b98:	e007      	b.n	baa <_vprintk+0x1d2>
	for (; size; size--) {
     b9a:	9a06      	ldr	r2, [sp, #24]
     b9c:	e7eb      	b.n	b76 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     b9e:	2809      	cmp	r0, #9
     ba0:	bf8c      	ite	hi
     ba2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     ba6:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
     baa:	4639      	mov	r1, r7
     bac:	4460      	add	r0, ip
     bae:	9206      	str	r2, [sp, #24]
     bb0:	47b0      	blx	r6
			digits++;
     bb2:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     bb4:	9507      	str	r5, [sp, #28]
			digits++;
     bb6:	3301      	adds	r3, #1
     bb8:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     bba:	f1bb 0f00 	cmp.w	fp, #0
     bbe:	d1ec      	bne.n	b9a <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     bc0:	f1b8 0f03 	cmp.w	r8, #3
     bc4:	f47f af15 	bne.w	9f2 <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
     bc8:	9b03      	ldr	r3, [sp, #12]
     bca:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     bce:	2d00      	cmp	r5, #0
     bd0:	f77f af0f 	ble.w	9f2 <_vprintk+0x1a>
			out(' ', ctx);
     bd4:	4639      	mov	r1, r7
     bd6:	2020      	movs	r0, #32
     bd8:	47b0      	blx	r6
     bda:	3d01      	subs	r5, #1
     bdc:	e7f7      	b.n	bce <_vprintk+0x1f6>
		if (remaining-- <= min_width) {
     bde:	1e53      	subs	r3, r2, #1
     be0:	4591      	cmp	r9, r2
     be2:	9306      	str	r3, [sp, #24]
     be4:	dbe9      	blt.n	bba <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     be6:	f1b8 0f01 	cmp.w	r8, #1
     bea:	d103      	bne.n	bf4 <_vprintk+0x21c>
				out('0', ctx);
     bec:	4639      	mov	r1, r7
     bee:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     bf0:	47b0      	blx	r6
     bf2:	e7e2      	b.n	bba <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     bf4:	f1b8 0f02 	cmp.w	r8, #2
     bf8:	d1df      	bne.n	bba <_vprintk+0x1e2>
				out(' ', ctx);
     bfa:	4639      	mov	r1, r7
     bfc:	2020      	movs	r0, #32
     bfe:	e7f7      	b.n	bf0 <_vprintk+0x218>
					out((int)(*s++), ctx);
     c00:	4639      	mov	r1, r7
     c02:	9303      	str	r3, [sp, #12]
     c04:	462c      	mov	r4, r5
     c06:	47b0      	blx	r6
     c08:	9b03      	ldr	r3, [sp, #12]
     c0a:	e733      	b.n	a74 <_vprintk+0x9c>
						out(' ', ctx);
     c0c:	4639      	mov	r1, r7
     c0e:	2020      	movs	r0, #32
     c10:	47b0      	blx	r6
     c12:	3c01      	subs	r4, #1
     c14:	e73b      	b.n	a8e <_vprintk+0xb6>
				out(c, ctx);
     c16:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     c18:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     c1a:	4639      	mov	r1, r7
     c1c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     c1e:	462c      	mov	r4, r5
     c20:	e6e7      	b.n	9f2 <_vprintk+0x1a>
				long_ctr = 0;
     c22:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     c24:	46a8      	mov	r8, r5
				min_width = -1;
     c26:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     c2a:	2501      	movs	r5, #1
     c2c:	e6e9      	b.n	a02 <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
     c2e:	f04f 0801 	mov.w	r8, #1
     c32:	e6e6      	b.n	a02 <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
     c34:	465c      	mov	r4, fp
			might_format = 0;
     c36:	4605      	mov	r5, r0
     c38:	e6e3      	b.n	a02 <_vprintk+0x2a>
	...

00000c3c <vprintk>:
{
     c3c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     c3e:	ac02      	add	r4, sp, #8
     c40:	2300      	movs	r3, #0
     c42:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     c46:	4602      	mov	r2, r0
     c48:	460b      	mov	r3, r1
     c4a:	4803      	ldr	r0, [pc, #12]	; (c58 <vprintk+0x1c>)
     c4c:	4621      	mov	r1, r4
     c4e:	f7ff fec3 	bl	9d8 <_vprintk>
}
     c52:	b002      	add	sp, #8
     c54:	bd10      	pop	{r4, pc}
     c56:	bf00      	nop
     c58:	0000091d 	.word	0x0000091d

00000c5c <printk>:
{
     c5c:	b40f      	push	{r0, r1, r2, r3}
     c5e:	b507      	push	{r0, r1, r2, lr}
     c60:	a904      	add	r1, sp, #16
     c62:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     c66:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
     c68:	f7ff ffe8 	bl	c3c <vprintk>
}
     c6c:	b003      	add	sp, #12
     c6e:	f85d eb04 	ldr.w	lr, [sp], #4
     c72:	b004      	add	sp, #16
     c74:	4770      	bx	lr

00000c76 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE_NO_BLOCK_SKIP, 1);
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE, 0);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_LINKER_ORPHAN_SECTION_WARN, 1);

GEN_ABS_SYM_END
     c76:	4770      	bx	lr

00000c78 <nordicsemi_nrf52_init>:
#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
#include <logging/log.h>
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf52_init(struct device *arg)
{
     c78:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     c7a:	f04f 0320 	mov.w	r3, #32
     c7e:	f3ef 8411 	mrs	r4, BASEPRI
     c82:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     c86:	f000 f84f 	bl	d28 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     c8a:	4a08      	ldr	r2, [pc, #32]	; (cac <nordicsemi_nrf52_init+0x34>)
     c8c:	2301      	movs	r3, #1
     c8e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
}
#endif

__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c96:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     c9a:	4b05      	ldr	r3, [pc, #20]	; (cb0 <nordicsemi_nrf52_init+0x38>)
     c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     ca0:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     ca2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     ca4:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     ca8:	2000      	movs	r0, #0
     caa:	bd10      	pop	{r4, pc}
     cac:	4001e000 	.word	0x4001e000
     cb0:	e000ed00 	.word	0xe000ed00

00000cb4 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     cb4:	4b0c      	ldr	r3, [pc, #48]	; (ce8 <errata_108+0x34>)
     cb6:	781b      	ldrb	r3, [r3, #0]
     cb8:	2b06      	cmp	r3, #6
     cba:	d110      	bne.n	cde <errata_108+0x2a>
     cbc:	4b0b      	ldr	r3, [pc, #44]	; (cec <errata_108+0x38>)
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	071a      	lsls	r2, r3, #28
     cc2:	d10c      	bne.n	cde <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     cc4:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <errata_108+0x3c>)
     cc6:	6818      	ldr	r0, [r3, #0]
     cc8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     ccc:	2b30      	cmp	r3, #48	; 0x30
     cce:	d008      	beq.n	ce2 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     cd0:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     cd4:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     cd8:	4258      	negs	r0, r3
     cda:	4158      	adcs	r0, r3
     cdc:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     cde:	2000      	movs	r0, #0
     ce0:	4770      	bx	lr
            return true;
     ce2:	2001      	movs	r0, #1
}
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop
     ce8:	f0000fe0 	.word	0xf0000fe0
     cec:	f0000fe4 	.word	0xf0000fe4
     cf0:	f0000fe8 	.word	0xf0000fe8

00000cf4 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     cf4:	4b09      	ldr	r3, [pc, #36]	; (d1c <errata_16+0x28>)
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b06      	cmp	r3, #6
     cfa:	d10c      	bne.n	d16 <errata_16+0x22>
     cfc:	4b08      	ldr	r3, [pc, #32]	; (d20 <errata_16+0x2c>)
     cfe:	681b      	ldr	r3, [r3, #0]
     d00:	071a      	lsls	r2, r3, #28
     d02:	d108      	bne.n	d16 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     d04:	4b07      	ldr	r3, [pc, #28]	; (d24 <errata_16+0x30>)
     d06:	6818      	ldr	r0, [r3, #0]
     d08:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     d0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     d10:	4258      	negs	r0, r3
     d12:	4158      	adcs	r0, r3
     d14:	4770      	bx	lr
            return true;
        }
    }

    return false;
     d16:	2000      	movs	r0, #0
}
     d18:	4770      	bx	lr
     d1a:	bf00      	nop
     d1c:	f0000fe0 	.word	0xf0000fe0
     d20:	f0000fe4 	.word	0xf0000fe4
     d24:	f0000fe8 	.word	0xf0000fe8

00000d28 <SystemInit>:
{
     d28:	b508      	push	{r3, lr}
    if (errata_12()){
     d2a:	f7ff ffc3 	bl	cb4 <errata_108>
     d2e:	b128      	cbz	r0, d3c <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     d30:	4b78      	ldr	r3, [pc, #480]	; (f14 <SystemInit+0x1ec>)
     d32:	4a79      	ldr	r2, [pc, #484]	; (f18 <SystemInit+0x1f0>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	f3c3 2304 	ubfx	r3, r3, #8, #5
     d3a:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     d3c:	f7ff ffda 	bl	cf4 <errata_16>
     d40:	b110      	cbz	r0, d48 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     d42:	4b76      	ldr	r3, [pc, #472]	; (f1c <SystemInit+0x1f4>)
     d44:	4a76      	ldr	r2, [pc, #472]	; (f20 <SystemInit+0x1f8>)
     d46:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     d48:	f7ff ffb4 	bl	cb4 <errata_108>
     d4c:	b128      	cbz	r0, d5a <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     d4e:	4b75      	ldr	r3, [pc, #468]	; (f24 <SystemInit+0x1fc>)
     d50:	4a75      	ldr	r2, [pc, #468]	; (f28 <SystemInit+0x200>)
     d52:	681b      	ldr	r3, [r3, #0]
     d54:	f3c3 3342 	ubfx	r3, r3, #13, #3
     d58:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     d5a:	f7ff ffcb 	bl	cf4 <errata_16>
     d5e:	b120      	cbz	r0, d6a <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     d60:	4a72      	ldr	r2, [pc, #456]	; (f2c <SystemInit+0x204>)
     d62:	68d3      	ldr	r3, [r2, #12]
     d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     d68:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     d6a:	f7ff ffa3 	bl	cb4 <errata_108>
     d6e:	b140      	cbz	r0, d82 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     d74:	2200      	movs	r2, #0
     d76:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     d7a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     d7e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     d82:	f7ff ffb7 	bl	cf4 <errata_16>
     d86:	b110      	cbz	r0, d8e <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     d88:	4b69      	ldr	r3, [pc, #420]	; (f30 <SystemInit+0x208>)
     d8a:	2203      	movs	r2, #3
     d8c:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     d8e:	f7ff ffb1 	bl	cf4 <errata_16>
     d92:	b140      	cbz	r0, da6 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     d94:	4b67      	ldr	r3, [pc, #412]	; (f34 <SystemInit+0x20c>)
     d96:	2205      	movs	r2, #5
     d98:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     d9a:	2201      	movs	r2, #1
     d9c:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     d9e:	2200      	movs	r2, #0
     da0:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     da2:	223f      	movs	r2, #63	; 0x3f
     da4:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     da6:	4b64      	ldr	r3, [pc, #400]	; (f38 <SystemInit+0x210>)
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	2b06      	cmp	r3, #6
     dac:	d150      	bne.n	e50 <SystemInit+0x128>
     dae:	4b63      	ldr	r3, [pc, #396]	; (f3c <SystemInit+0x214>)
     db0:	681b      	ldr	r3, [r3, #0]
     db2:	0719      	lsls	r1, r3, #28
     db4:	d14c      	bne.n	e50 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     db6:	4b62      	ldr	r3, [pc, #392]	; (f40 <SystemInit+0x218>)
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     dbe:	2b50      	cmp	r3, #80	; 0x50
     dc0:	d146      	bne.n	e50 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     dc6:	4b5f      	ldr	r3, [pc, #380]	; (f44 <SystemInit+0x21c>)
     dc8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     dcc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     dd0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     dd4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     dd8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     ddc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     de0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     de4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     de8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     dec:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     df0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     df4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     df8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     dfc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     e00:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     e04:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     e08:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     e0c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     e10:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     e14:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     e18:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     e1c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     e20:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     e24:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     e28:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     e2c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     e30:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     e34:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     e38:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     e3c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     e40:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     e44:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     e48:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     e4c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     e50:	f7ff ff30 	bl	cb4 <errata_108>
     e54:	b128      	cbz	r0, e62 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     e56:	4b3c      	ldr	r3, [pc, #240]	; (f48 <SystemInit+0x220>)
     e58:	4a3c      	ldr	r2, [pc, #240]	; (f4c <SystemInit+0x224>)
     e5a:	681b      	ldr	r3, [r3, #0]
     e5c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     e60:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     e62:	f7ff ff27 	bl	cb4 <errata_108>
     e66:	b148      	cbz	r0, e7c <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     e6c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     e70:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     e72:	bf44      	itt	mi
     e74:	f06f 0201 	mvnmi.w	r2, #1
     e78:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     e7c:	4b34      	ldr	r3, [pc, #208]	; (f50 <SystemInit+0x228>)
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	2b06      	cmp	r3, #6
     e82:	d108      	bne.n	e96 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     e84:	4b33      	ldr	r3, [pc, #204]	; (f54 <SystemInit+0x22c>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     e8a:	bf01      	itttt	eq
     e8c:	4a32      	ldreq	r2, [pc, #200]	; (f58 <SystemInit+0x230>)
     e8e:	6813      	ldreq	r3, [r2, #0]
     e90:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     e94:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     e96:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     e9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     e9e:	2a00      	cmp	r2, #0
     ea0:	db03      	blt.n	eaa <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     ea2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     ea6:	2b00      	cmp	r3, #0
     ea8:	da2f      	bge.n	f0a <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     eaa:	4b2c      	ldr	r3, [pc, #176]	; (f5c <SystemInit+0x234>)
     eac:	2201      	movs	r2, #1
     eae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     eb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     eb6:	2a00      	cmp	r2, #0
     eb8:	d0fb      	beq.n	eb2 <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
     eba:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     ebe:	2115      	movs	r1, #21
     ec0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     ec4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     ec8:	2a00      	cmp	r2, #0
     eca:	d0fb      	beq.n	ec4 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
     ecc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     ed0:	2215      	movs	r2, #21
     ed2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     ed6:	4b21      	ldr	r3, [pc, #132]	; (f5c <SystemInit+0x234>)
     ed8:	461a      	mov	r2, r3
     eda:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     ede:	2900      	cmp	r1, #0
     ee0:	d0fb      	beq.n	eda <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     ee2:	2100      	movs	r1, #0
     ee4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     ee8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     eec:	2b00      	cmp	r3, #0
     eee:	d0fb      	beq.n	ee8 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     ef0:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     ef4:	491a      	ldr	r1, [pc, #104]	; (f60 <SystemInit+0x238>)
     ef6:	4b1b      	ldr	r3, [pc, #108]	; (f64 <SystemInit+0x23c>)
     ef8:	68ca      	ldr	r2, [r1, #12]
     efa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     efe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     f00:	60cb      	str	r3, [r1, #12]
     f02:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     f06:	bf00      	nop
     f08:	e7fd      	b.n	f06 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     f0a:	4b17      	ldr	r3, [pc, #92]	; (f68 <SystemInit+0x240>)
     f0c:	4a17      	ldr	r2, [pc, #92]	; (f6c <SystemInit+0x244>)
     f0e:	601a      	str	r2, [r3, #0]
}
     f10:	bd08      	pop	{r3, pc}
     f12:	bf00      	nop
     f14:	10000324 	.word	0x10000324
     f18:	40013540 	.word	0x40013540
     f1c:	4007c074 	.word	0x4007c074
     f20:	baadf00d 	.word	0xbaadf00d
     f24:	10000244 	.word	0x10000244
     f28:	4000053c 	.word	0x4000053c
     f2c:	e000edf0 	.word	0xe000edf0
     f30:	400005a0 	.word	0x400005a0
     f34:	40005610 	.word	0x40005610
     f38:	f0000fe0 	.word	0xf0000fe0
     f3c:	f0000fe4 	.word	0xf0000fe4
     f40:	f0000fe8 	.word	0xf0000fe8
     f44:	4000c000 	.word	0x4000c000
     f48:	10000258 	.word	0x10000258
     f4c:	40000ee4 	.word	0x40000ee4
     f50:	10000130 	.word	0x10000130
     f54:	10000134 	.word	0x10000134
     f58:	4000173c 	.word	0x4000173c
     f5c:	4001e000 	.word	0x4001e000
     f60:	e000ed00 	.word	0xe000ed00
     f64:	05fa0004 	.word	0x05fa0004
     f68:	20001cc4 	.word	0x20001cc4
     f6c:	03d09000 	.word	0x03d09000

00000f70 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     f70:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
     f72:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
     f74:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     f76:	bf9d      	ittte	ls
     f78:	6882      	ldrls	r2, [r0, #8]
     f7a:	18d2      	addls	r2, r2, r3
     f7c:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
     f80:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     f84:	bf94      	ite	ls
     f86:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
     f88:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
     f8a:	4770      	bx	lr

00000f8c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
     f90:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     f94:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
     f96:	1bf6      	subs	r6, r6, r7
     f98:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
     f9a:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     f9c:	4688      	mov	r8, r1
     f9e:	4615      	mov	r5, r2
     fa0:	4438      	add	r0, r7
  if (Rem > NumBytes) {
     fa2:	d905      	bls.n	fb0 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     fa4:	f001 fd40 	bl	2a28 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
     fa8:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
     faa:	60e5      	str	r5, [r4, #12]
}
     fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     fb0:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
     fb2:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     fb4:	f001 fd38 	bl	2a28 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
     fb8:	462a      	mov	r2, r5
     fba:	eb08 0106 	add.w	r1, r8, r6
     fbe:	6860      	ldr	r0, [r4, #4]
     fc0:	f001 fd32 	bl	2a28 <memcpy>
     fc4:	e7f1      	b.n	faa <_WriteNoCheck+0x1e>

00000fc6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
     fca:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     fcc:	4606      	mov	r6, r0
     fce:	4689      	mov	r9, r1
     fd0:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
     fd2:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     fd6:	6934      	ldr	r4, [r6, #16]
     fd8:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     fda:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
     fdc:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     fde:	bf28      	it	cs
     fe0:	18e4      	addcs	r4, r4, r3
     fe2:	3c01      	subs	r4, #1
     fe4:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     fe6:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     fe8:	42bc      	cmp	r4, r7
     fea:	bf28      	it	cs
     fec:	463c      	movcs	r4, r7
     fee:	4294      	cmp	r4, r2
     ff0:	bf28      	it	cs
     ff2:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     ff4:	4649      	mov	r1, r9
     ff6:	4428      	add	r0, r5
     ff8:	4622      	mov	r2, r4
     ffa:	f001 fd15 	bl	2a28 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
     ffe:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    1000:	4425      	add	r5, r4
      WrOff = 0u;
    1002:	42ab      	cmp	r3, r5
    1004:	bf08      	it	eq
    1006:	2500      	moveq	r5, #0
  } while (NumBytes);
    1008:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    100a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    100c:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    100e:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    1010:	d1e1      	bne.n	fd6 <_WriteBlocking+0x10>
}
    1012:	4640      	mov	r0, r8
    1014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001018 <_DoInit>:
static void _DoInit(void) {
    1018:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    101a:	4c11      	ldr	r4, [pc, #68]	; (1060 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    101c:	4a11      	ldr	r2, [pc, #68]	; (1064 <_DoInit+0x4c>)
    101e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1020:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1022:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1026:	4b10      	ldr	r3, [pc, #64]	; (1068 <_DoInit+0x50>)
    1028:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    102a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    102c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1030:	4a0e      	ldr	r2, [pc, #56]	; (106c <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1032:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1034:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1036:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1038:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    103a:	490d      	ldr	r1, [pc, #52]	; (1070 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    103c:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    103e:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    1040:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1042:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1044:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1046:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1048:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    104a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    104c:	f001 fcb0 	bl	29b0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1050:	4908      	ldr	r1, [pc, #32]	; (1074 <_DoInit+0x5c>)
    1052:	4620      	mov	r0, r4
    1054:	f001 fcac 	bl	29b0 <strcpy>
  p->acID[6] = ' ';
    1058:	2320      	movs	r3, #32
    105a:	71a3      	strb	r3, [r4, #6]
}
    105c:	bd10      	pop	{r4, pc}
    105e:	bf00      	nop
    1060:	20000640 	.word	0x20000640
    1064:	000052b9 	.word	0x000052b9
    1068:	2000001c 	.word	0x2000001c
    106c:	2000000c 	.word	0x2000000c
    1070:	000052c2 	.word	0x000052c2
    1074:	000052c6 	.word	0x000052c6

00001078 <SEGGER_RTT_WriteSkipNoLock>:
  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    1078:	f8df c088 	ldr.w	ip, [pc, #136]	; 1104 <SEGGER_RTT_WriteSkipNoLock+0x8c>
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    107c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  RdOff = pRing->RdOff;
    1080:	f04f 0a18 	mov.w	sl, #24
    1084:	fb0a c700 	mla	r7, sl, r0, ip
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1088:	4689      	mov	r9, r1
  RdOff = pRing->RdOff;
    108a:	6abe      	ldr	r6, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
    108c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
    108e:	42ae      	cmp	r6, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1090:	4614      	mov	r4, r2
  if (RdOff <= WrOff) {
    1092:	d82b      	bhi.n	10ec <SEGGER_RTT_WriteSkipNoLock+0x74>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
    1094:	6a3b      	ldr	r3, [r7, #32]
    1096:	eba3 0805 	sub.w	r8, r3, r5
    109a:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {
    109e:	4572      	cmp	r2, lr
    10a0:	d806      	bhi.n	10b0 <SEGGER_RTT_WriteSkipNoLock+0x38>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    10a2:	fb00 a30a 	mla	r3, r0, sl, sl
    10a6:	449c      	add	ip, r3
    10a8:	f8dc 0004 	ldr.w	r0, [ip, #4]
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    10ac:	4428      	add	r0, r5
    10ae:	e00a      	b.n	10c6 <SEGGER_RTT_WriteSkipNoLock+0x4e>
    Avail += RdOff;
    10b0:	4476      	add	r6, lr
    if (Avail >= NumBytes) {
    10b2:	42b2      	cmp	r2, r6
    10b4:	d823      	bhi.n	10fe <SEGGER_RTT_WriteSkipNoLock+0x86>
    10b6:	fb00 a30a 	mla	r3, r0, sl, sl
    10ba:	eb0c 0603 	add.w	r6, ip, r3
      if (Rem > NumBytes) {
    10be:	4590      	cmp	r8, r2
    10c0:	6870      	ldr	r0, [r6, #4]
    10c2:	4428      	add	r0, r5
    10c4:	d903      	bls.n	10ce <SEGGER_RTT_WriteSkipNoLock+0x56>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    10c6:	f001 fcaf 	bl	2a28 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    10ca:	442c      	add	r4, r5
    10cc:	e00a      	b.n	10e4 <SEGGER_RTT_WriteSkipNoLock+0x6c>
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    10ce:	4642      	mov	r2, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    10d0:	eba4 0408 	sub.w	r4, r4, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    10d4:	f001 fca8 	bl	2a28 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    10d8:	4622      	mov	r2, r4
    10da:	eb09 0108 	add.w	r1, r9, r8
    10de:	6870      	ldr	r0, [r6, #4]
    10e0:	f001 fca2 	bl	2a28 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    10e4:	627c      	str	r4, [r7, #36]	; 0x24
#endif
      return 1;
    10e6:	2001      	movs	r0, #1
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
}
    10e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Avail = RdOff - WrOff - 1u;
    10ec:	3e01      	subs	r6, #1
    10ee:	1b76      	subs	r6, r6, r5
    if (Avail >= NumBytes) {
    10f0:	4296      	cmp	r6, r2
    10f2:	d304      	bcc.n	10fe <SEGGER_RTT_WriteSkipNoLock+0x86>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    10f4:	fb00 a30a 	mla	r3, r0, sl, sl
    10f8:	4463      	add	r3, ip
    10fa:	6858      	ldr	r0, [r3, #4]
    10fc:	e7d6      	b.n	10ac <SEGGER_RTT_WriteSkipNoLock+0x34>
  return 0;
    10fe:	2000      	movs	r0, #0
    1100:	e7f2      	b.n	10e8 <SEGGER_RTT_WriteSkipNoLock+0x70>
    1102:	bf00      	nop
    1104:	20000640 	.word	0x20000640

00001108 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    110a:	4c18      	ldr	r4, [pc, #96]	; (116c <SEGGER_RTT_WriteNoLock+0x64>)
    110c:	2318      	movs	r3, #24
    110e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1112:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1116:	4425      	add	r5, r4
  switch (pRing->Flags) {
    1118:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    111a:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    111c:	460f      	mov	r7, r1
    111e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    1120:	d011      	beq.n	1146 <SEGGER_RTT_WriteNoLock+0x3e>
    1122:	d303      	bcc.n	112c <SEGGER_RTT_WriteNoLock+0x24>
    1124:	2c02      	cmp	r4, #2
    1126:	d01b      	beq.n	1160 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    1128:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    112a:	e00a      	b.n	1142 <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    112c:	4628      	mov	r0, r5
    112e:	f7ff ff1f 	bl	f70 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    1132:	4286      	cmp	r6, r0
    1134:	d805      	bhi.n	1142 <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    1136:	4632      	mov	r2, r6
    1138:	4639      	mov	r1, r7
    113a:	4628      	mov	r0, r5
    113c:	f7ff ff26 	bl	f8c <_WriteNoCheck>
    1140:	4634      	mov	r4, r6
}
    1142:	4620      	mov	r0, r4
    1144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    1146:	4628      	mov	r0, r5
    1148:	f7ff ff12 	bl	f70 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    114c:	4286      	cmp	r6, r0
    114e:	4634      	mov	r4, r6
    1150:	bf28      	it	cs
    1152:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    1154:	4622      	mov	r2, r4
    1156:	4639      	mov	r1, r7
    1158:	4628      	mov	r0, r5
    115a:	f7ff ff17 	bl	f8c <_WriteNoCheck>
    break;
    115e:	e7f0      	b.n	1142 <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1160:	4628      	mov	r0, r5
}
    1162:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1166:	f7ff bf2e 	b.w	fc6 <_WriteBlocking>
    116a:	bf00      	nop
    116c:	20000640 	.word	0x20000640

00001170 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    1170:	4a03      	ldr	r2, [pc, #12]	; (1180 <SEGGER_RTT_HasDataUp+0x10>)
    1172:	2318      	movs	r3, #24
    1174:	fb03 2300 	mla	r3, r3, r0, r2
    1178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    117a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    117c:	1a80      	subs	r0, r0, r2
    117e:	4770      	bx	lr
    1180:	20000640 	.word	0x20000640

00001184 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    1184:	f7ff bf48 	b.w	1018 <_DoInit>

00001188 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    1188:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    118a:	f7ff fffb 	bl	1184 <SEGGER_RTT_Init>
}
    118e:	bd08      	pop	{r3, pc}

00001190 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    1190:	2300      	movs	r3, #0
	list->head = NULL;
    1192:	e9c0 3300 	strd	r3, r3, [r0]
}
    1196:	4770      	bx	lr

00001198 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    1198:	6803      	ldr	r3, [r0, #0]
    119a:	b923      	cbnz	r3, 11a6 <log_list_add_tail+0xe>
		list->head = msg;
    119c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    119e:	2300      	movs	r3, #0
	list->tail = msg;
    11a0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    11a2:	600b      	str	r3, [r1, #0]
}
    11a4:	4770      	bx	lr
		list->tail->next = msg;
    11a6:	6843      	ldr	r3, [r0, #4]
    11a8:	6019      	str	r1, [r3, #0]
    11aa:	e7f8      	b.n	119e <log_list_add_tail+0x6>

000011ac <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    11ac:	6800      	ldr	r0, [r0, #0]
    11ae:	4770      	bx	lr

000011b0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    11b0:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    11b2:	b10b      	cbz	r3, 11b8 <log_list_head_get+0x8>
		list->head = list->head->next;
    11b4:	681a      	ldr	r2, [r3, #0]
    11b6:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    11b8:	4618      	mov	r0, r3
    11ba:	4770      	bx	lr

000011bc <dummy_timestamp>:
static timestamp_get_t timestamp_func = dummy_timestamp;

static u32_t dummy_timestamp(void)
{
	return 0;
}
    11bc:	2000      	movs	r0, #0
    11be:	4770      	bx	lr

000011c0 <_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *_log_msg_std_alloc(void)
{
    11c0:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    11c2:	a902      	add	r1, sp, #8
    11c4:	2200      	movs	r2, #0
    11c6:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    11ca:	4808      	ldr	r0, [pc, #32]	; (11ec <_log_msg_std_alloc+0x2c>)
    11cc:	f003 f87a 	bl	42c4 <k_mem_slab_alloc>
	if (err != 0) {
    11d0:	b110      	cbz	r0, 11d8 <_log_msg_std_alloc+0x18>
		msg = log_msg_no_space_handle();
    11d2:	f000 fa1b 	bl	160c <log_msg_no_space_handle>
    11d6:	9001      	str	r0, [sp, #4]
	return msg;
    11d8:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    11da:	b118      	cbz	r0, 11e4 <_log_msg_std_alloc+0x24>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    11dc:	2301      	movs	r3, #1
    11de:	6043      	str	r3, [r0, #4]
    11e0:	2300      	movs	r3, #0
    11e2:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    11e4:	b003      	add	sp, #12
    11e6:	f85d fb04 	ldr.w	pc, [sp], #4
    11ea:	bf00      	nop
    11ec:	20000770 	.word	0x20000770

000011f0 <timestamp_get>:
	log_n(fmt, args, nargs, src_level);
}

static u32_t timestamp_get(void)
{
	return k_cycle_get_32();
    11f0:	f001 b896 	b.w	2320 <_timer_cycle_get_32>

000011f4 <log_core_init>:
}

void log_core_init(void)
{
    11f4:	b508      	push	{r3, lr}
	log_msg_pool_init();
    11f6:	f000 f9f1 	bl	15dc <log_msg_pool_init>
	log_list_init(&list);
    11fa:	4802      	ldr	r0, [pc, #8]	; (1204 <log_core_init+0x10>)
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    11fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_list_init(&list);
    1200:	f7ff bfc6 	b.w	1190 <log_list_init>
    1204:	20000428 	.word	0x20000428

00001208 <log_init>:
		}
	}
}

void log_init(void)
{
    1208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    120c:	4b1c      	ldr	r3, [pc, #112]	; (1280 <log_init+0x78>)
    120e:	f3bf 8f5b 	dmb	ish
    1212:	e853 4f00 	ldrex	r4, [r3]
    1216:	1c62      	adds	r2, r4, #1
    1218:	e843 2100 	strex	r1, r2, [r3]
    121c:	2900      	cmp	r1, #0
    121e:	d1f8      	bne.n	1212 <log_init+0xa>
    1220:	f3bf 8f5b 	dmb	ish
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
	int i;

	if (atomic_inc(&initialized)) {
    1224:	b9bc      	cbnz	r4, 1256 <log_init+0x4e>
		return;
	}

	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1226:	2304      	movs	r3, #4
    1228:	2228      	movs	r2, #40	; 0x28
    122a:	4916      	ldr	r1, [pc, #88]	; (1284 <log_init+0x7c>)
    122c:	4816      	ldr	r0, [pc, #88]	; (1288 <log_init+0x80>)
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    122e:	4d17      	ldr	r5, [pc, #92]	; (128c <log_init+0x84>)
			if (backend->api->init) {
				backend->api->init();
			}

			log_backend_activate(backend, NULL);
			backend_attached = true;
    1230:	f8df 9068 	ldr.w	r9, [pc, #104]	; 129c <log_init+0x94>
	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1234:	f003 f834 	bl	42a0 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    1238:	4b15      	ldr	r3, [pc, #84]	; (1290 <log_init+0x88>)
    123a:	4a16      	ldr	r2, [pc, #88]	; (1294 <log_init+0x8c>)
    123c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
    123e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1242:	f000 fd7b 	bl	1d3c <log_output_timestamp_freq_set>
    1246:	4b14      	ldr	r3, [pc, #80]	; (1298 <log_init+0x90>)
    1248:	1b5b      	subs	r3, r3, r5
    124a:	091f      	lsrs	r7, r3, #4
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	assert(backend);
	backend->cb->ctx = ctx;
    124c:	46a0      	mov	r8, r4
	for (i = 0; i < log_backend_count_get(); i++) {
    124e:	4623      	mov	r3, r4
	backend->cb->active = true;
    1250:	2601      	movs	r6, #1
    1252:	42bb      	cmp	r3, r7
    1254:	db01      	blt.n	125a <log_init+0x52>
		}
	}
}
    1256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		log_backend_id_set(backend,
    125a:	686a      	ldr	r2, [r5, #4]
	backend->cb->id = id;
    125c:	1c5c      	adds	r4, r3, #1
    125e:	7114      	strb	r4, [r2, #4]
		if (backend->autostart) {
    1260:	7b2b      	ldrb	r3, [r5, #12]
    1262:	b14b      	cbz	r3, 1278 <log_init+0x70>
			if (backend->api->init) {
    1264:	682b      	ldr	r3, [r5, #0]
    1266:	689a      	ldr	r2, [r3, #8]
    1268:	b102      	cbz	r2, 126c <log_init+0x64>
				backend->api->init();
    126a:	4790      	blx	r2
			log_backend_activate(backend, NULL);
    126c:	686a      	ldr	r2, [r5, #4]
			backend_attached = true;
    126e:	f889 6000 	strb.w	r6, [r9]
	backend->cb->ctx = ctx;
    1272:	f8c2 8000 	str.w	r8, [r2]
	backend->cb->active = true;
    1276:	7156      	strb	r6, [r2, #5]
	for (i = 0; i < log_backend_count_get(); i++) {
    1278:	4623      	mov	r3, r4
    127a:	3510      	adds	r5, #16
    127c:	e7e9      	b.n	1252 <log_init+0x4a>
    127e:	bf00      	nop
    1280:	20000424 	.word	0x20000424
    1284:	200007c0 	.word	0x200007c0
    1288:	20000754 	.word	0x20000754
    128c:	000050ec 	.word	0x000050ec
    1290:	20001cc8 	.word	0x20001cc8
    1294:	000011f1 	.word	0x000011f1
    1298:	000050fc 	.word	0x000050fc
    129c:	2000041c 	.word	0x2000041c

000012a0 <log_process>:

bool log_process(bool bypass)
{
	struct log_msg *msg;

	if (!backend_attached) {
    12a0:	4b23      	ldr	r3, [pc, #140]	; (1330 <log_process+0x90>)
{
    12a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12a6:	4605      	mov	r5, r0
	if (!backend_attached) {
    12a8:	7818      	ldrb	r0, [r3, #0]
    12aa:	b310      	cbz	r0, 12f2 <log_process+0x52>
	__asm__ volatile(
    12ac:	f04f 0320 	mov.w	r3, #32
    12b0:	f3ef 8411 	mrs	r4, BASEPRI
    12b4:	f383 8811 	msr	BASEPRI, r3
		return false;
	}
	unsigned int key = irq_lock();

	msg = log_list_head_get(&list);
    12b8:	481e      	ldr	r0, [pc, #120]	; (1334 <log_process+0x94>)
    12ba:	f7ff ff79 	bl	11b0 <log_list_head_get>
    12be:	4606      	mov	r6, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    12c0:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);

	if (msg != NULL) {
    12c4:	b178      	cbz	r0, 12e6 <log_process+0x46>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    12c6:	f3bf 8f5b 	dmb	ish
    12ca:	4b1b      	ldr	r3, [pc, #108]	; (1338 <log_process+0x98>)
    12cc:	e853 2f00 	ldrex	r2, [r3]
    12d0:	3a01      	subs	r2, #1
    12d2:	e843 2100 	strex	r1, r2, [r3]
    12d6:	2900      	cmp	r1, #0
    12d8:	d1f8      	bne.n	12cc <log_process+0x2c>
    12da:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    12de:	b155      	cbz	r5, 12f6 <log_process+0x56>
	log_msg_put(msg);
    12e0:	4630      	mov	r0, r6
    12e2:	f000 f9ff 	bl	16e4 <log_msg_put>
		atomic_dec(&buffered_cnt);
		msg_process(msg, bypass);
	}

	return (log_list_head_peek(&list) != NULL);
    12e6:	4813      	ldr	r0, [pc, #76]	; (1334 <log_process+0x94>)
    12e8:	f7ff ff60 	bl	11ac <log_list_head_peek>
    12ec:	3000      	adds	r0, #0
    12ee:	bf18      	it	ne
    12f0:	2001      	movne	r0, #1
}
    12f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    12f6:	4c11      	ldr	r4, [pc, #68]	; (133c <log_process+0x9c>)
    12f8:	4b11      	ldr	r3, [pc, #68]	; (1340 <log_process+0xa0>)
 * @param source_id Source ID.
 * @return Level.
 */
static inline u8_t log_compiled_level_get(u32_t source_id)
{
	return __log_const_start[source_id].level;
    12fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1344 <log_process+0xa4>
    12fe:	1b1b      	subs	r3, r3, r4
    1300:	091f      	lsrs	r7, r3, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    1302:	42bd      	cmp	r5, r7
    1304:	daec      	bge.n	12e0 <log_process+0x40>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	assert(backend);
	return backend->cb->active;
    1306:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    1308:	795b      	ldrb	r3, [r3, #5]
    130a:	b173      	cbz	r3, 132a <log_process+0x8a>
	return msg->hdr.ids.source_id;
    130c:	8973      	ldrh	r3, [r6, #10]
	return msg->hdr.ids.level;
    130e:	7ab2      	ldrb	r2, [r6, #10]
	return msg->hdr.ids.source_id;
    1310:	099b      	lsrs	r3, r3, #6
    1312:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    1316:	7919      	ldrb	r1, [r3, #4]
    1318:	f002 0307 	and.w	r3, r2, #7
    131c:	4299      	cmp	r1, r3
    131e:	d304      	bcc.n	132a <log_process+0x8a>
	backend->api->put(backend, msg);
    1320:	6823      	ldr	r3, [r4, #0]
    1322:	4631      	mov	r1, r6
    1324:	681b      	ldr	r3, [r3, #0]
    1326:	4620      	mov	r0, r4
    1328:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    132a:	3501      	adds	r5, #1
    132c:	3410      	adds	r4, #16
    132e:	e7e8      	b.n	1302 <log_process+0x62>
    1330:	2000041c 	.word	0x2000041c
    1334:	20000428 	.word	0x20000428
    1338:	20000420 	.word	0x20000420
    133c:	000050ec 	.word	0x000050ec
    1340:	000050fc 	.word	0x000050fc
    1344:	000050c4 	.word	0x000050c4

00001348 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    1348:	4b18      	ldr	r3, [pc, #96]	; (13ac <msg_finalize+0x64>)
{
    134a:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    134c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    134e:	8141      	strh	r1, [r0, #10]
{
    1350:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    1352:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1354:	4c16      	ldr	r4, [pc, #88]	; (13b0 <msg_finalize+0x68>)
    1356:	60e8      	str	r0, [r5, #12]
    1358:	f3bf 8f5b 	dmb	ish
    135c:	e854 3f00 	ldrex	r3, [r4]
    1360:	3301      	adds	r3, #1
    1362:	e844 3200 	strex	r2, r3, [r4]
    1366:	2a00      	cmp	r2, #0
    1368:	d1f8      	bne.n	135c <msg_finalize+0x14>
    136a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    136e:	f04f 0320 	mov.w	r3, #32
    1372:	f3ef 8611 	mrs	r6, BASEPRI
    1376:	f383 8811 	msr	BASEPRI, r3
	log_list_add_tail(&list, msg);
    137a:	480e      	ldr	r0, [pc, #56]	; (13b4 <msg_finalize+0x6c>)
    137c:	4629      	mov	r1, r5
    137e:	f7ff ff0b 	bl	1198 <log_list_add_tail>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1382:	f386 8811 	msr	BASEPRI, r6
	if (IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) || panic_mode) {
    1386:	4b0c      	ldr	r3, [pc, #48]	; (13b8 <msg_finalize+0x70>)
    1388:	781b      	ldrb	r3, [r3, #0]
    138a:	b123      	cbz	r3, 1396 <msg_finalize+0x4e>
		(void)log_process(false);
    138c:	2000      	movs	r0, #0
}
    138e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)log_process(false);
    1392:	f7ff bf85 	b.w	12a0 <log_process>
		if (buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1396:	6823      	ldr	r3, [r4, #0]
    1398:	2b0a      	cmp	r3, #10
    139a:	d106      	bne.n	13aa <msg_finalize+0x62>
    139c:	4b07      	ldr	r3, [pc, #28]	; (13bc <msg_finalize+0x74>)
    139e:	6818      	ldr	r0, [r3, #0]
    13a0:	b118      	cbz	r0, 13aa <msg_finalize+0x62>
}
    13a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    13a6:	f003 bac9 	b.w	493c <_impl_k_wakeup>
    13aa:	bd70      	pop	{r4, r5, r6, pc}
    13ac:	20001cc8 	.word	0x20001cc8
    13b0:	20000420 	.word	0x20000420
    13b4:	20000428 	.word	0x20000428
    13b8:	20000430 	.word	0x20000430
    13bc:	20000434 	.word	0x20000434

000013c0 <log_1>:
{
    13c0:	b570      	push	{r4, r5, r6, lr}
    13c2:	4604      	mov	r4, r0
    13c4:	460e      	mov	r6, r1
    13c6:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    13c8:	f7ff fefa 	bl	11c0 <_log_msg_std_alloc>

	if (msg != NULL) {
    13cc:	b158      	cbz	r0, 13e6 <log_1+0x26>
		msg->str = str;
    13ce:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1;
    13d0:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    13d2:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1;
    13d4:	2201      	movs	r2, #1
    13d6:	f362 1407 	bfi	r4, r2, #4, #4
    13da:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
    13dc:	4629      	mov	r1, r5
}
    13de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
    13e2:	f7ff bfb1 	b.w	1348 <msg_finalize>
}
    13e6:	bd70      	pop	{r4, r5, r6, pc}

000013e8 <log_2>:
{
    13e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13ec:	4605      	mov	r5, r0
    13ee:	4688      	mov	r8, r1
    13f0:	4617      	mov	r7, r2
    13f2:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    13f4:	f7ff fee4 	bl	11c0 <_log_msg_std_alloc>

	if (msg != NULL) {
    13f8:	b160      	cbz	r0, 1414 <log_2+0x2c>
		msg->str = str;
    13fa:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2;
    13fc:	7a45      	ldrb	r5, [r0, #9]
    13fe:	2302      	movs	r3, #2
    1400:	f363 1507 	bfi	r5, r3, #4, #4
    1404:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    1406:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
    140a:	4631      	mov	r1, r6
}
    140c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
    1410:	f7ff bf9a 	b.w	1348 <msg_finalize>
}
    1414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001418 <log_3>:
{
    1418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    141c:	4605      	mov	r5, r0
    141e:	4689      	mov	r9, r1
    1420:	4690      	mov	r8, r2
    1422:	461f      	mov	r7, r3
    1424:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       u32_t arg1,
					       u32_t arg2,
					       u32_t arg3)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    1428:	f7ff feca 	bl	11c0 <_log_msg_std_alloc>

	if (msg != NULL) {
    142c:	b168      	cbz	r0, 144a <log_3+0x32>
		msg->str = str;
    142e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3;
    1430:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    1432:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3;
    1434:	2303      	movs	r3, #3
    1436:	f363 1507 	bfi	r5, r3, #4, #4
    143a:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    143c:	e9c0 9805 	strd	r9, r8, [r0, #20]
	msg_finalize(msg, src_level);
    1440:	4631      	mov	r1, r6
}
    1442:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
    1446:	f7ff bf7f 	b.w	1348 <msg_finalize>
}
    144a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00001450 <log_panic>:
{
    1450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1452:	4f0d      	ldr	r7, [pc, #52]	; (1488 <log_panic+0x38>)
    1454:	783d      	ldrb	r5, [r7, #0]
    1456:	b965      	cbnz	r5, 1472 <log_panic+0x22>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    1458:	4c0c      	ldr	r4, [pc, #48]	; (148c <log_panic+0x3c>)
    145a:	4e0d      	ldr	r6, [pc, #52]	; (1490 <log_panic+0x40>)
    145c:	1b36      	subs	r6, r6, r4
    145e:	0936      	lsrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1460:	42b5      	cmp	r5, r6
    1462:	db07      	blt.n	1474 <log_panic+0x24>
	panic_mode = true;
    1464:	2301      	movs	r3, #1
    1466:	703b      	strb	r3, [r7, #0]
	while (log_process(false) == true) {
    1468:	2000      	movs	r0, #0
    146a:	f7ff ff19 	bl	12a0 <log_process>
    146e:	2800      	cmp	r0, #0
    1470:	d1fa      	bne.n	1468 <log_panic+0x18>
}
    1472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1474:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1476:	795b      	ldrb	r3, [r3, #5]
    1478:	b11b      	cbz	r3, 1482 <log_panic+0x32>
	backend->api->panic(backend);
    147a:	6823      	ldr	r3, [r4, #0]
    147c:	4620      	mov	r0, r4
    147e:	685b      	ldr	r3, [r3, #4]
    1480:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1482:	3501      	adds	r5, #1
    1484:	3410      	adds	r4, #16
    1486:	e7eb      	b.n	1460 <log_panic+0x10>
    1488:	20000430 	.word	0x20000430
    148c:	000050ec 	.word	0x000050ec
    1490:	000050fc 	.word	0x000050fc

00001494 <log_process_thread_func>:
	}
}

#ifdef CONFIG_LOG_PROCESS_THREAD
static void log_process_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
    1494:	b508      	push	{r3, lr}
	log_init();
    1496:	f7ff feb7 	bl	1208 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    149a:	f003 fa75 	bl	4988 <_impl_k_current_get>
	proc_tid = process_tid;
    149e:	4a09      	ldr	r2, [pc, #36]	; (14c4 <log_process_thread_func+0x30>)
    14a0:	6010      	str	r0, [r2, #0]
	if (!IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) &&
    14a2:	b128      	cbz	r0, 14b0 <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    14a4:	4b08      	ldr	r3, [pc, #32]	; (14c8 <log_process_thread_func+0x34>)
	    process_tid &&
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	2b09      	cmp	r3, #9
    14aa:	dd01      	ble.n	14b0 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    14ac:	f003 fa46 	bl	493c <_impl_k_wakeup>
	thread_set(k_current_get());

	while (1) {
		if (log_process(false) == false) {
    14b0:	2000      	movs	r0, #0
    14b2:	f7ff fef5 	bl	12a0 <log_process>
    14b6:	2800      	cmp	r0, #0
    14b8:	d1fa      	bne.n	14b0 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    14ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    14be:	f003 f9fd 	bl	48bc <_impl_k_sleep>
    14c2:	e7f5      	b.n	14b0 <log_process_thread_func+0x1c>
    14c4:	20000434 	.word	0x20000434
    14c8:	20000420 	.word	0x20000420

000014cc <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    14cc:	4a04      	ldr	r2, [pc, #16]	; (14e0 <log_source_name_get+0x14>)
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <log_source_name_get+0x18>)
    14d0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    14d2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    14d6:	bf34      	ite	cc
    14d8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    14dc:	2000      	movcs	r0, #0
}
    14de:	4770      	bx	lr
    14e0:	000050c4 	.word	0x000050c4
    14e4:	000050ec 	.word	0x000050ec

000014e8 <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    14e8:	4b05      	ldr	r3, [pc, #20]	; (1500 <log_is_strdup+0x18>)
    14ea:	4298      	cmp	r0, r3
    14ec:	d305      	bcc.n	14fa <log_is_strdup+0x12>
    14ee:	3378      	adds	r3, #120	; 0x78
    14f0:	4298      	cmp	r0, r3
    14f2:	bf8c      	ite	hi
    14f4:	2000      	movhi	r0, #0
    14f6:	2001      	movls	r0, #1
    14f8:	4770      	bx	lr
    14fa:	2000      	movs	r0, #0
}
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop
    1500:	200007c4 	.word	0x200007c4

00001504 <log_free>:
{
    1504:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1506:	3804      	subs	r0, #4
    1508:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    150a:	f3bf 8f5b 	dmb	ish
    150e:	e850 3f00 	ldrex	r3, [r0]
    1512:	1e5a      	subs	r2, r3, #1
    1514:	e840 2100 	strex	r1, r2, [r0]
    1518:	2900      	cmp	r1, #0
    151a:	d1f8      	bne.n	150e <log_free+0xa>
    151c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    1520:	2b01      	cmp	r3, #1
    1522:	d103      	bne.n	152c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1524:	a901      	add	r1, sp, #4
    1526:	4803      	ldr	r0, [pc, #12]	; (1534 <log_free+0x30>)
    1528:	f002 fef4 	bl	4314 <k_mem_slab_free>
}
    152c:	b003      	add	sp, #12
    152e:	f85d fb04 	ldr.w	pc, [sp], #4
    1532:	bf00      	nop
    1534:	20000754 	.word	0x20000754

00001538 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    1538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    153c:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    153e:	8903      	ldrh	r3, [r0, #8]
{
    1540:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    1544:	08db      	lsrs	r3, r3, #3
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    1546:	42a3      	cmp	r3, r4
{
    1548:	460e      	mov	r6, r1
	if (offset >= available_len) {
    154a:	d803      	bhi.n	1554 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    154c:	2300      	movs	r3, #0
    154e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    1550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    1554:	6811      	ldr	r1, [r2, #0]
    1556:	4421      	add	r1, r4
    1558:	4299      	cmp	r1, r3
		*length = available_len - offset;
    155a:	bf84      	itt	hi
    155c:	1b19      	subhi	r1, r3, r4
    155e:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    1560:	2b0c      	cmp	r3, #12
	req_len = *length;
    1562:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    1566:	d928      	bls.n	15ba <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    1568:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    156a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    156e:	d82b      	bhi.n	15c8 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
    1570:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    1572:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    1574:	454b      	cmp	r3, r9
    1576:	bf28      	it	cs
    1578:	464b      	movcs	r3, r9
    157a:	461d      	mov	r5, r3
    157c:	4420      	add	r0, r4
			memcpy(&head_data[offset], data, cpy_len);
    157e:	461a      	mov	r2, r3
		if (put_op) {
    1580:	b1ff      	cbz	r7, 15c2 <log_msg_hexdump_data_op+0x8a>
			memcpy(&head_data[offset], data, cpy_len);
    1582:	4631      	mov	r1, r6
			memcpy(data, &head_data[offset], cpy_len);
    1584:	f001 fa50 	bl	2a28 <memcpy>
		req_len -= cpy_len;
    1588:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    158c:	442e      	add	r6, r5
	while (req_len > 0) {
    158e:	f1b9 0f00 	cmp.w	r9, #0
    1592:	d0dd      	beq.n	1550 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    1594:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    1598:	454d      	cmp	r5, r9
    159a:	bf28      	it	cs
    159c:	464d      	movcs	r5, r9
    159e:	1d20      	adds	r0, r4, #4
    15a0:	4440      	add	r0, r8
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    15a2:	462a      	mov	r2, r5
		if (put_op) {
    15a4:	b1bf      	cbz	r7, 15d6 <log_msg_hexdump_data_op+0x9e>
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    15a6:	4631      	mov	r1, r6
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    15a8:	f001 fa3e 	bl	2a28 <memcpy>
		req_len -= cpy_len;
    15ac:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    15b0:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    15b4:	442e      	add	r6, r5
		offset = 0;
    15b6:	2400      	movs	r4, #0
    15b8:	e7e9      	b.n	158e <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    15ba:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    15bc:	f04f 0800 	mov.w	r8, #0
    15c0:	e7d8      	b.n	1574 <log_msg_hexdump_data_op+0x3c>
			memcpy(data, &head_data[offset], cpy_len);
    15c2:	4601      	mov	r1, r0
    15c4:	4630      	mov	r0, r6
    15c6:	e7dd      	b.n	1584 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    15c8:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    15ca:	2c1b      	cmp	r4, #27
    15cc:	d9df      	bls.n	158e <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    15ce:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    15d2:	3c1c      	subs	r4, #28
    15d4:	e7f9      	b.n	15ca <log_msg_hexdump_data_op+0x92>
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    15d6:	4601      	mov	r1, r0
    15d8:	4630      	mov	r0, r6
    15da:	e7e5      	b.n	15a8 <log_msg_hexdump_data_op+0x70>

000015dc <log_msg_pool_init>:
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    15dc:	2320      	movs	r3, #32
    15de:	461a      	mov	r2, r3
    15e0:	4901      	ldr	r1, [pc, #4]	; (15e8 <log_msg_pool_init+0xc>)
    15e2:	4802      	ldr	r0, [pc, #8]	; (15ec <log_msg_pool_init+0x10>)
    15e4:	f002 be5c 	b.w	42a0 <k_mem_slab_init>
    15e8:	20000b60 	.word	0x20000b60
    15ec:	20000770 	.word	0x20000770

000015f0 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    15f0:	3004      	adds	r0, #4
    15f2:	f3bf 8f5b 	dmb	ish
    15f6:	e850 3f00 	ldrex	r3, [r0]
    15fa:	3301      	adds	r3, #1
    15fc:	e840 3200 	strex	r2, r3, [r0]
    1600:	2a00      	cmp	r2, #0
    1602:	d1f8      	bne.n	15f6 <log_msg_get+0x6>
    1604:	f3bf 8f5b 	dmb	ish
}
    1608:	4770      	bx	lr
	...

0000160c <log_msg_no_space_handle>:
{
    160c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	union log_msg_chunk *msg = NULL;
    160e:	ac02      	add	r4, sp, #8
    1610:	2300      	movs	r3, #0
    1612:	f844 3d04 	str.w	r3, [r4, #-4]!
			err = k_mem_slab_alloc(&log_msg_pool,
    1616:	4e08      	ldr	r6, [pc, #32]	; (1638 <log_msg_no_space_handle+0x2c>)
			more = log_process(true);
    1618:	2001      	movs	r0, #1
    161a:	f7ff fe41 	bl	12a0 <log_process>
			err = k_mem_slab_alloc(&log_msg_pool,
    161e:	2200      	movs	r2, #0
			more = log_process(true);
    1620:	4605      	mov	r5, r0
			err = k_mem_slab_alloc(&log_msg_pool,
    1622:	4621      	mov	r1, r4
    1624:	4630      	mov	r0, r6
    1626:	f002 fe4d 	bl	42c4 <k_mem_slab_alloc>
		} while ((err != 0) && more);
    162a:	b108      	cbz	r0, 1630 <log_msg_no_space_handle+0x24>
    162c:	2d00      	cmp	r5, #0
    162e:	d1f3      	bne.n	1618 <log_msg_no_space_handle+0xc>
}
    1630:	9801      	ldr	r0, [sp, #4]
    1632:	b002      	add	sp, #8
    1634:	bd70      	pop	{r4, r5, r6, pc}
    1636:	bf00      	nop
    1638:	20000770 	.word	0x20000770

0000163c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    163c:	7a40      	ldrb	r0, [r0, #9]
}
    163e:	0900      	lsrs	r0, r0, #4
    1640:	4770      	bx	lr

00001642 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    1642:	7a43      	ldrb	r3, [r0, #9]
    1644:	091b      	lsrs	r3, r3, #4
    1646:	428b      	cmp	r3, r1
    1648:	d916      	bls.n	1678 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    164a:	2b03      	cmp	r3, #3
    164c:	d803      	bhi.n	1656 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    164e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    1652:	6948      	ldr	r0, [r1, #20]
    1654:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    1656:	2901      	cmp	r1, #1
    1658:	d803      	bhi.n	1662 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    165a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    165e:	6988      	ldr	r0, [r1, #24]
    1660:	4770      	bx	lr
	cont = msg->payload.ext.next;
    1662:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    1664:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    1666:	2906      	cmp	r1, #6
    1668:	d803      	bhi.n	1672 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    166a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    166e:	6848      	ldr	r0, [r1, #4]
    1670:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    1672:	3907      	subs	r1, #7
		cont = cont->next;
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	e7f6      	b.n	1666 <log_msg_arg_get+0x24>
		return 0;
    1678:	2000      	movs	r0, #0
}
    167a:	4770      	bx	lr

0000167c <msg_free>:
{
    167c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    167e:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    1680:	7a45      	ldrb	r5, [r0, #9]
{
    1682:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    1684:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    1688:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    168c:	d010      	beq.n	16b0 <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    168e:	9b01      	ldr	r3, [sp, #4]
    1690:	7a1a      	ldrb	r2, [r3, #8]
    1692:	0792      	lsls	r2, r2, #30
    1694:	d506      	bpl.n	16a4 <msg_free+0x28>
    1696:	ac04      	add	r4, sp, #16
    1698:	695b      	ldr	r3, [r3, #20]
    169a:	f844 3d04 	str.w	r3, [r4, #-4]!
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    169e:	4d10      	ldr	r5, [pc, #64]	; (16e0 <msg_free+0x64>)
	while (cont != NULL) {
    16a0:	9b03      	ldr	r3, [sp, #12]
    16a2:	b9b3      	cbnz	r3, 16d2 <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    16a4:	a901      	add	r1, sp, #4
    16a6:	480e      	ldr	r0, [pc, #56]	; (16e0 <msg_free+0x64>)
    16a8:	f002 fe34 	bl	4314 <k_mem_slab_free>
}
    16ac:	b004      	add	sp, #16
    16ae:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    16b0:	2d00      	cmp	r5, #0
    16b2:	d0ec      	beq.n	168e <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    16b4:	42ac      	cmp	r4, r5
    16b6:	9801      	ldr	r0, [sp, #4]
    16b8:	d2e9      	bcs.n	168e <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    16ba:	4621      	mov	r1, r4
    16bc:	f7ff ffc1 	bl	1642 <log_msg_arg_get>
    16c0:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    16c2:	f7ff ff11 	bl	14e8 <log_is_strdup>
    16c6:	b110      	cbz	r0, 16ce <msg_free+0x52>
				log_free(buf);
    16c8:	4630      	mov	r0, r6
    16ca:	f7ff ff1b 	bl	1504 <log_free>
		for (i = 0; i < nargs; i++) {
    16ce:	3401      	adds	r4, #1
    16d0:	e7f0      	b.n	16b4 <msg_free+0x38>
		next = cont->next;
    16d2:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    16d4:	4621      	mov	r1, r4
    16d6:	4628      	mov	r0, r5
    16d8:	f002 fe1c 	bl	4314 <k_mem_slab_free>
		cont = next;
    16dc:	9603      	str	r6, [sp, #12]
    16de:	e7df      	b.n	16a0 <msg_free+0x24>
    16e0:	20000770 	.word	0x20000770

000016e4 <log_msg_put>:
{
    16e4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    16e6:	1d02      	adds	r2, r0, #4
    16e8:	f3bf 8f5b 	dmb	ish
    16ec:	e852 1f00 	ldrex	r1, [r2]
    16f0:	3901      	subs	r1, #1
    16f2:	e842 1c00 	strex	ip, r1, [r2]
    16f6:	f1bc 0f00 	cmp.w	ip, #0
    16fa:	d1f7      	bne.n	16ec <log_msg_put+0x8>
    16fc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    1700:	685b      	ldr	r3, [r3, #4]
    1702:	b90b      	cbnz	r3, 1708 <log_msg_put+0x24>
		msg_free(msg);
    1704:	f7ff bfba 	b.w	167c <msg_free>
}
    1708:	4770      	bx	lr

0000170a <log_msg_str_get>:
}
    170a:	6900      	ldr	r0, [r0, #16]
    170c:	4770      	bx	lr

0000170e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    170e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    1710:	2400      	movs	r4, #0
    1712:	9400      	str	r4, [sp, #0]
    1714:	f7ff ff10 	bl	1538 <log_msg_hexdump_data_op>
}
    1718:	b002      	add	sp, #8
    171a:	bd10      	pop	{r4, pc}

0000171c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    171c:	b40e      	push	{r1, r2, r3}
    171e:	b503      	push	{r0, r1, lr}
    1720:	ab03      	add	r3, sp, #12
	va_list args;
	int length = 0;

	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    1722:	4601      	mov	r1, r0
{
    1724:	f853 2b04 	ldr.w	r2, [r3], #4
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    1728:	4804      	ldr	r0, [pc, #16]	; (173c <print_formatted+0x20>)
	va_start(args, fmt);
    172a:	9301      	str	r3, [sp, #4]
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    172c:	f001 fa52 	bl	2bd4 <_prf>
	_vprintk(out_func, (void *)log_output, fmt, args);
#endif
	va_end(args);

	return length;
}
    1730:	b002      	add	sp, #8
    1732:	f85d eb04 	ldr.w	lr, [sp], #4
    1736:	b003      	add	sp, #12
    1738:	4770      	bx	lr
    173a:	bf00      	nop
    173c:	00001765 	.word	0x00001765

00001740 <log_output_flush>:

void log_output_flush(const struct log_output *log_output)
{
	int offset = 0;
	int len = log_output->control_block->offset;
    1740:	6843      	ldr	r3, [r0, #4]
{
    1742:	b570      	push	{r4, r5, r6, lr}
	int len = log_output->control_block->offset;
    1744:	681c      	ldr	r4, [r3, #0]
{
    1746:	4605      	mov	r5, r0
	int offset = 0;
    1748:	2600      	movs	r6, #0
	int processed;

	do {
		processed = log_output->func(&log_output->buf[offset], len,
    174a:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
    174e:	4621      	mov	r1, r4
    1750:	4430      	add	r0, r6
    1752:	682b      	ldr	r3, [r5, #0]
    1754:	6852      	ldr	r2, [r2, #4]
    1756:	4798      	blx	r3
					     log_output->control_block->ctx);
		len -= processed;
		offset += processed;
	} while (len);
    1758:	1a24      	subs	r4, r4, r0
		offset += processed;
    175a:	4406      	add	r6, r0
	} while (len);
    175c:	d1f5      	bne.n	174a <log_output_flush+0xa>

	log_output->control_block->offset = 0;
    175e:	686b      	ldr	r3, [r5, #4]
    1760:	601c      	str	r4, [r3, #0]
}
    1762:	bd70      	pop	{r4, r5, r6, pc}

00001764 <out_func>:
{
    1764:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    1766:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    176e:	684a      	ldr	r2, [r1, #4]
    1770:	6813      	ldr	r3, [r2, #0]
    1772:	3301      	adds	r3, #1
    1774:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    1776:	68ca      	ldr	r2, [r1, #12]
    1778:	4293      	cmp	r3, r2
    177a:	d102      	bne.n	1782 <out_func+0x1e>
		log_output_flush(out_ctx);
    177c:	4608      	mov	r0, r1
    177e:	f7ff ffdf 	bl	1740 <log_output_flush>
}
    1782:	2000      	movs	r0, #0
    1784:	bd08      	pop	{r3, pc}
	...

00001788 <log_output_msg_process>:
}

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    1788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    178c:	7a0b      	ldrb	r3, [r1, #8]
    178e:	b093      	sub	sp, #76	; 0x4c
	if (!log_msg_is_raw_string(msg)) {
    1790:	f003 0305 	and.w	r3, r3, #5
    1794:	2b05      	cmp	r3, #5
{
    1796:	4605      	mov	r5, r0
    1798:	460c      	mov	r4, r1
    179a:	9209      	str	r2, [sp, #36]	; 0x24
	if (!log_msg_is_raw_string(msg)) {
    179c:	d07e      	beq.n	189c <log_output_msg_process+0x114>
		if (stamp) {
    179e:	f012 0602 	ands.w	r6, r2, #2
		bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    17a2:	4613      	mov	r3, r2
    17a4:	f002 0801 	and.w	r8, r2, #1
		bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    17a8:	f002 0708 	and.w	r7, r2, #8
		if (stamp) {
    17ac:	d006      	beq.n	17bc <log_output_msg_process+0x34>
	if (!format) {
    17ae:	075e      	lsls	r6, r3, #29
	u32_t timestamp = log_msg_timestamp_get(msg);
    17b0:	68ca      	ldr	r2, [r1, #12]
	if (!format) {
    17b2:	d448      	bmi.n	1846 <log_output_msg_process+0xbe>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    17b4:	49cc      	ldr	r1, [pc, #816]	; (1ae8 <log_output_msg_process+0x360>)
    17b6:	f7ff ffb1 	bl	171c <print_formatted>
		length = print_formatted(log_output,
    17ba:	4606      	mov	r6, r0
	if (color) {
    17bc:	f1b8 0f00 	cmp.w	r8, #0
    17c0:	d00a      	beq.n	17d8 <log_output_msg_process+0x50>
		if (colors[level] != NULL) {
    17c2:	7aa3      	ldrb	r3, [r4, #10]
    17c4:	4ac9      	ldr	r2, [pc, #804]	; (1aec <log_output_msg_process+0x364>)
    17c6:	f003 0307 	and.w	r3, r3, #7
    17ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    17ce:	b11a      	cbz	r2, 17d8 <log_output_msg_process+0x50>
			print_formatted(log_output, "%s", color);
    17d0:	49c7      	ldr	r1, [pc, #796]	; (1af0 <log_output_msg_process+0x368>)
    17d2:	4628      	mov	r0, r5
    17d4:	f7ff ffa2 	bl	171c <print_formatted>
	return msg->hdr.ids.domain_id;
    17d8:	7aa3      	ldrb	r3, [r4, #10]
	return msg->hdr.ids.source_id;
    17da:	f8b4 800a 	ldrh.w	r8, [r4, #10]
	return msg->hdr.ids.domain_id;
    17de:	f3c3 09c2 	ubfx	r9, r3, #3, #3
	return msg->hdr.ids.source_id;
    17e2:	ea4f 1898 	mov.w	r8, r8, lsr #6
	if (level_on) {
    17e6:	b14f      	cbz	r7, 17fc <log_output_msg_process+0x74>
	return msg->hdr.ids.level;
    17e8:	f003 0307 	and.w	r3, r3, #7
		total += print_formatted(log_output, "<%s> ", severity[level]);
    17ec:	4ac1      	ldr	r2, [pc, #772]	; (1af4 <log_output_msg_process+0x36c>)
    17ee:	49c2      	ldr	r1, [pc, #776]	; (1af8 <log_output_msg_process+0x370>)
    17f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    17f4:	4628      	mov	r0, r5
    17f6:	f7ff ff91 	bl	171c <print_formatted>
    17fa:	4607      	mov	r7, r0
	total += print_formatted(log_output,
    17fc:	4641      	mov	r1, r8
    17fe:	4648      	mov	r0, r9
    1800:	f7ff fe64 	bl	14cc <log_source_name_get>
    1804:	49bd      	ldr	r1, [pc, #756]	; (1afc <log_output_msg_process+0x374>)
    1806:	4602      	mov	r2, r0
    1808:	4628      	mov	r0, r5
    180a:	f7ff ff87 	bl	171c <print_formatted>
    180e:	4407      	add	r7, r0
		length += ids_print(msg, log_output, level_on);
    1810:	443e      	add	r6, r7
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1812:	7a23      	ldrb	r3, [r4, #8]
	int prefix_offset = prefix_print(msg, log_output, flags);

	if (log_msg_is_std(msg)) {
    1814:	07d9      	lsls	r1, r3, #31
    1816:	f100 81fc 	bmi.w	1c12 <log_output_msg_process+0x48a>
	const char *str = log_msg_str_get(msg);
    181a:	4620      	mov	r0, r4
    181c:	f7ff ff75 	bl	170a <log_msg_str_get>
    1820:	4606      	mov	r6, r0
	switch (log_msg_nargs_get(msg)) {
    1822:	4620      	mov	r0, r4
    1824:	f7ff ff0a 	bl	163c <log_msg_nargs_get>
    1828:	280a      	cmp	r0, #10
    182a:	d847      	bhi.n	18bc <log_output_msg_process+0x134>
    182c:	e8df f010 	tbh	[pc, r0, lsl #1]
    1830:	003d0038 	.word	0x003d0038
    1834:	007a006a 	.word	0x007a006a
    1838:	00ac0090 	.word	0x00ac0090
    183c:	00f700cf 	.word	0x00f700cf
    1840:	01740126 	.word	0x01740126
    1844:	01af      	.short	0x01af
	} else if (freq) {
    1846:	4bae      	ldr	r3, [pc, #696]	; (1b00 <log_output_msg_process+0x378>)
    1848:	681e      	ldr	r6, [r3, #0]
    184a:	2e00      	cmp	r6, #0
    184c:	d0b6      	beq.n	17bc <log_output_msg_process+0x34>
		timestamp /= timestamp_div;
    184e:	4bad      	ldr	r3, [pc, #692]	; (1b04 <log_output_msg_process+0x37c>)
    1850:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    1854:	6819      	ldr	r1, [r3, #0]
    1856:	fbb2 f1f1 	udiv	r1, r2, r1
		ms = (remainder * 1000) / freq;
    185a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    185e:	fbb1 f3f6 	udiv	r3, r1, r6
    1862:	fbb3 f2fe 	udiv	r2, r3, lr
    1866:	fb0e 3e12 	mls	lr, lr, r2, r3
		remainder = timestamp % freq;
    186a:	fb06 1313 	mls	r3, r6, r3, r1
		ms = (remainder * 1000) / freq;
    186e:	fb0c f103 	mul.w	r1, ip, r3
		mins = seconds / 60;
    1872:	f04f 093c 	mov.w	r9, #60	; 0x3c
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    1876:	fbb1 faf6 	udiv	sl, r1, r6
    187a:	fb06 111a 	mls	r1, r6, sl, r1
    187e:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    1882:	fbbe f3f9 	udiv	r3, lr, r9
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    1886:	fbb1 f6f6 	udiv	r6, r1, r6
		length = print_formatted(log_output,
    188a:	fb09 e113 	mls	r1, r9, r3, lr
    188e:	9100      	str	r1, [sp, #0]
    1890:	e9cd a601 	strd	sl, r6, [sp, #4]
    1894:	499c      	ldr	r1, [pc, #624]	; (1b08 <log_output_msg_process+0x380>)
    1896:	f7ff ff41 	bl	171c <print_formatted>
    189a:	e78e      	b.n	17ba <log_output_msg_process+0x32>
	int length = 0;
    189c:	2600      	movs	r6, #0
    189e:	e7b8      	b.n	1812 <log_output_msg_process+0x8a>
		print_formatted(log_output, str);
    18a0:	4631      	mov	r1, r6
	print_formatted(log_output, "\r");
    18a2:	4628      	mov	r0, r5
    18a4:	f7ff ff3a 	bl	171c <print_formatted>
    18a8:	e008      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str, log_msg_arg_get(msg, 0));
    18aa:	2100      	movs	r1, #0
    18ac:	4620      	mov	r0, r4
    18ae:	f7ff fec8 	bl	1642 <log_msg_arg_get>
    18b2:	4631      	mov	r1, r6
    18b4:	4602      	mov	r2, r0
    18b6:	4628      	mov	r0, r5
    18b8:	f7ff ff30 	bl	171c <print_formatted>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    18bc:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_raw_string(msg)) {
    18be:	f003 0305 	and.w	r3, r3, #5
    18c2:	2b05      	cmp	r3, #5
    18c4:	d018      	beq.n	18f8 <log_output_msg_process+0x170>
	if (color) {
    18c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18c8:	07d9      	lsls	r1, r3, #31
    18ca:	d50b      	bpl.n	18e4 <log_output_msg_process+0x15c>
	return msg->hdr.ids.level;
    18cc:	7aa3      	ldrb	r3, [r4, #10]
		if (colors[level] != NULL) {
    18ce:	4a87      	ldr	r2, [pc, #540]	; (1aec <log_output_msg_process+0x364>)
    18d0:	f003 0307 	and.w	r3, r3, #7
    18d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18d8:	b123      	cbz	r3, 18e4 <log_output_msg_process+0x15c>
			print_formatted(log_output, "%s", color);
    18da:	4a8c      	ldr	r2, [pc, #560]	; (1b0c <log_output_msg_process+0x384>)
    18dc:	4984      	ldr	r1, [pc, #528]	; (1af0 <log_output_msg_process+0x368>)
    18de:	4628      	mov	r0, r5
    18e0:	f7ff ff1c 	bl	171c <print_formatted>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    18e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18e6:	06da      	lsls	r2, r3, #27
    18e8:	d406      	bmi.n	18f8 <log_output_msg_process+0x170>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    18ea:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    18ec:	bf4c      	ite	mi
    18ee:	4988      	ldrmi	r1, [pc, #544]	; (1b10 <log_output_msg_process+0x388>)
		print_formatted(ctx, "\r\n");
    18f0:	4988      	ldrpl	r1, [pc, #544]	; (1b14 <log_output_msg_process+0x38c>)
    18f2:	4628      	mov	r0, r5
    18f4:	f7ff ff12 	bl	171c <print_formatted>
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	postfix_print(msg, log_output, flags);

	log_output_flush(log_output);
    18f8:	4628      	mov	r0, r5
    18fa:	f7ff ff21 	bl	1740 <log_output_flush>
}
    18fe:	b013      	add	sp, #76	; 0x4c
    1900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		print_formatted(log_output, str,
    1904:	2100      	movs	r1, #0
    1906:	4620      	mov	r0, r4
    1908:	f7ff fe9b 	bl	1642 <log_msg_arg_get>
    190c:	2101      	movs	r1, #1
    190e:	4607      	mov	r7, r0
    1910:	4620      	mov	r0, r4
    1912:	f7ff fe96 	bl	1642 <log_msg_arg_get>
    1916:	463a      	mov	r2, r7
    1918:	4603      	mov	r3, r0
    191a:	4631      	mov	r1, r6
    191c:	4628      	mov	r0, r5
    191e:	f7ff fefd 	bl	171c <print_formatted>
    1922:	e7cb      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1924:	2100      	movs	r1, #0
    1926:	4620      	mov	r0, r4
    1928:	f7ff fe8b 	bl	1642 <log_msg_arg_get>
    192c:	2101      	movs	r1, #1
    192e:	4607      	mov	r7, r0
    1930:	4620      	mov	r0, r4
    1932:	f7ff fe86 	bl	1642 <log_msg_arg_get>
    1936:	2102      	movs	r1, #2
    1938:	4680      	mov	r8, r0
    193a:	4620      	mov	r0, r4
    193c:	f7ff fe81 	bl	1642 <log_msg_arg_get>
    1940:	4643      	mov	r3, r8
    1942:	9000      	str	r0, [sp, #0]
    1944:	463a      	mov	r2, r7
    1946:	4631      	mov	r1, r6
    1948:	4628      	mov	r0, r5
    194a:	f7ff fee7 	bl	171c <print_formatted>
    194e:	e7b5      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1950:	2100      	movs	r1, #0
    1952:	4620      	mov	r0, r4
    1954:	f7ff fe75 	bl	1642 <log_msg_arg_get>
    1958:	2101      	movs	r1, #1
    195a:	4607      	mov	r7, r0
    195c:	4620      	mov	r0, r4
    195e:	f7ff fe70 	bl	1642 <log_msg_arg_get>
    1962:	2102      	movs	r1, #2
    1964:	4680      	mov	r8, r0
    1966:	4620      	mov	r0, r4
    1968:	f7ff fe6b 	bl	1642 <log_msg_arg_get>
    196c:	2103      	movs	r1, #3
    196e:	4681      	mov	r9, r0
    1970:	4620      	mov	r0, r4
    1972:	f7ff fe66 	bl	1642 <log_msg_arg_get>
    1976:	4643      	mov	r3, r8
    1978:	e9cd 9000 	strd	r9, r0, [sp]
    197c:	463a      	mov	r2, r7
    197e:	4631      	mov	r1, r6
    1980:	4628      	mov	r0, r5
    1982:	f7ff fecb 	bl	171c <print_formatted>
    1986:	e799      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1988:	2100      	movs	r1, #0
    198a:	4620      	mov	r0, r4
    198c:	f7ff fe59 	bl	1642 <log_msg_arg_get>
    1990:	2101      	movs	r1, #1
    1992:	4607      	mov	r7, r0
    1994:	4620      	mov	r0, r4
    1996:	f7ff fe54 	bl	1642 <log_msg_arg_get>
    199a:	2102      	movs	r1, #2
    199c:	4680      	mov	r8, r0
    199e:	4620      	mov	r0, r4
    19a0:	f7ff fe4f 	bl	1642 <log_msg_arg_get>
    19a4:	2103      	movs	r1, #3
    19a6:	4681      	mov	r9, r0
    19a8:	4620      	mov	r0, r4
    19aa:	f7ff fe4a 	bl	1642 <log_msg_arg_get>
    19ae:	2104      	movs	r1, #4
    19b0:	4682      	mov	sl, r0
    19b2:	4620      	mov	r0, r4
    19b4:	f7ff fe45 	bl	1642 <log_msg_arg_get>
    19b8:	f8cd 9000 	str.w	r9, [sp]
    19bc:	e9cd a001 	strd	sl, r0, [sp, #4]
    19c0:	4643      	mov	r3, r8
    19c2:	463a      	mov	r2, r7
    19c4:	4631      	mov	r1, r6
    19c6:	4628      	mov	r0, r5
    19c8:	f7ff fea8 	bl	171c <print_formatted>
    19cc:	e776      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    19ce:	2100      	movs	r1, #0
    19d0:	4620      	mov	r0, r4
    19d2:	f7ff fe36 	bl	1642 <log_msg_arg_get>
    19d6:	2101      	movs	r1, #1
    19d8:	4607      	mov	r7, r0
    19da:	4620      	mov	r0, r4
    19dc:	f7ff fe31 	bl	1642 <log_msg_arg_get>
    19e0:	2102      	movs	r1, #2
    19e2:	4680      	mov	r8, r0
    19e4:	4620      	mov	r0, r4
    19e6:	f7ff fe2c 	bl	1642 <log_msg_arg_get>
    19ea:	2103      	movs	r1, #3
    19ec:	4681      	mov	r9, r0
    19ee:	4620      	mov	r0, r4
    19f0:	f7ff fe27 	bl	1642 <log_msg_arg_get>
    19f4:	2104      	movs	r1, #4
    19f6:	4682      	mov	sl, r0
    19f8:	4620      	mov	r0, r4
    19fa:	f7ff fe22 	bl	1642 <log_msg_arg_get>
    19fe:	2105      	movs	r1, #5
    1a00:	4683      	mov	fp, r0
    1a02:	4620      	mov	r0, r4
    1a04:	f7ff fe1d 	bl	1642 <log_msg_arg_get>
    1a08:	e9cd 9a00 	strd	r9, sl, [sp]
    1a0c:	e9cd b002 	strd	fp, r0, [sp, #8]
    1a10:	4643      	mov	r3, r8
    1a12:	463a      	mov	r2, r7
    1a14:	4631      	mov	r1, r6
    1a16:	4628      	mov	r0, r5
    1a18:	f7ff fe80 	bl	171c <print_formatted>
    1a1c:	e74e      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1a1e:	2100      	movs	r1, #0
    1a20:	4620      	mov	r0, r4
    1a22:	f7ff fe0e 	bl	1642 <log_msg_arg_get>
    1a26:	2101      	movs	r1, #1
    1a28:	4607      	mov	r7, r0
    1a2a:	4620      	mov	r0, r4
    1a2c:	f7ff fe09 	bl	1642 <log_msg_arg_get>
    1a30:	2102      	movs	r1, #2
    1a32:	4680      	mov	r8, r0
    1a34:	4620      	mov	r0, r4
    1a36:	f7ff fe04 	bl	1642 <log_msg_arg_get>
    1a3a:	2103      	movs	r1, #3
    1a3c:	4681      	mov	r9, r0
    1a3e:	4620      	mov	r0, r4
    1a40:	f7ff fdff 	bl	1642 <log_msg_arg_get>
    1a44:	2104      	movs	r1, #4
    1a46:	4682      	mov	sl, r0
    1a48:	4620      	mov	r0, r4
    1a4a:	f7ff fdfa 	bl	1642 <log_msg_arg_get>
    1a4e:	2105      	movs	r1, #5
    1a50:	4683      	mov	fp, r0
    1a52:	4620      	mov	r0, r4
    1a54:	f7ff fdf5 	bl	1642 <log_msg_arg_get>
    1a58:	2106      	movs	r1, #6
    1a5a:	900a      	str	r0, [sp, #40]	; 0x28
    1a5c:	4620      	mov	r0, r4
    1a5e:	f7ff fdf0 	bl	1642 <log_msg_arg_get>
    1a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a64:	9004      	str	r0, [sp, #16]
    1a66:	e9cd b302 	strd	fp, r3, [sp, #8]
    1a6a:	e9cd 9a00 	strd	r9, sl, [sp]
    1a6e:	4643      	mov	r3, r8
    1a70:	463a      	mov	r2, r7
    1a72:	4631      	mov	r1, r6
    1a74:	4628      	mov	r0, r5
    1a76:	f7ff fe51 	bl	171c <print_formatted>
    1a7a:	e71f      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1a7c:	2100      	movs	r1, #0
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fddf 	bl	1642 <log_msg_arg_get>
    1a84:	2101      	movs	r1, #1
    1a86:	4607      	mov	r7, r0
    1a88:	4620      	mov	r0, r4
    1a8a:	f7ff fdda 	bl	1642 <log_msg_arg_get>
    1a8e:	2102      	movs	r1, #2
    1a90:	4680      	mov	r8, r0
    1a92:	4620      	mov	r0, r4
    1a94:	f7ff fdd5 	bl	1642 <log_msg_arg_get>
    1a98:	2103      	movs	r1, #3
    1a9a:	4681      	mov	r9, r0
    1a9c:	4620      	mov	r0, r4
    1a9e:	f7ff fdd0 	bl	1642 <log_msg_arg_get>
    1aa2:	2104      	movs	r1, #4
    1aa4:	4682      	mov	sl, r0
    1aa6:	4620      	mov	r0, r4
    1aa8:	f7ff fdcb 	bl	1642 <log_msg_arg_get>
    1aac:	2105      	movs	r1, #5
    1aae:	4683      	mov	fp, r0
    1ab0:	4620      	mov	r0, r4
    1ab2:	f7ff fdc6 	bl	1642 <log_msg_arg_get>
    1ab6:	2106      	movs	r1, #6
    1ab8:	900b      	str	r0, [sp, #44]	; 0x2c
    1aba:	4620      	mov	r0, r4
    1abc:	f7ff fdc1 	bl	1642 <log_msg_arg_get>
    1ac0:	2107      	movs	r1, #7
    1ac2:	900a      	str	r0, [sp, #40]	; 0x28
    1ac4:	4620      	mov	r0, r4
    1ac6:	f7ff fdbc 	bl	1642 <log_msg_arg_get>
    1aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ace:	9005      	str	r0, [sp, #20]
    1ad0:	9204      	str	r2, [sp, #16]
    1ad2:	e9cd b302 	strd	fp, r3, [sp, #8]
    1ad6:	e9cd 9a00 	strd	r9, sl, [sp]
    1ada:	4643      	mov	r3, r8
    1adc:	463a      	mov	r2, r7
    1ade:	4631      	mov	r1, r6
    1ae0:	4628      	mov	r0, r5
    1ae2:	f7ff fe1b 	bl	171c <print_formatted>
    1ae6:	e6e9      	b.n	18bc <log_output_msg_process+0x134>
    1ae8:	000052ec 	.word	0x000052ec
    1aec:	000052d8 	.word	0x000052d8
    1af0:	00005311 	.word	0x00005311
    1af4:	00005338 	.word	0x00005338
    1af8:	00005314 	.word	0x00005314
    1afc:	0000531a 	.word	0x0000531a
    1b00:	20000438 	.word	0x20000438
    1b04:	2000043c 	.word	0x2000043c
    1b08:	000052f5 	.word	0x000052f5
    1b0c:	00005330 	.word	0x00005330
    1b10:	0000531f 	.word	0x0000531f
    1b14:	0000531e 	.word	0x0000531e
		print_formatted(log_output, str,
    1b18:	2100      	movs	r1, #0
    1b1a:	4620      	mov	r0, r4
    1b1c:	f7ff fd91 	bl	1642 <log_msg_arg_get>
    1b20:	2101      	movs	r1, #1
    1b22:	900c      	str	r0, [sp, #48]	; 0x30
    1b24:	4620      	mov	r0, r4
    1b26:	f7ff fd8c 	bl	1642 <log_msg_arg_get>
    1b2a:	2102      	movs	r1, #2
    1b2c:	900b      	str	r0, [sp, #44]	; 0x2c
    1b2e:	4620      	mov	r0, r4
    1b30:	f7ff fd87 	bl	1642 <log_msg_arg_get>
    1b34:	2103      	movs	r1, #3
    1b36:	4607      	mov	r7, r0
    1b38:	4620      	mov	r0, r4
    1b3a:	f7ff fd82 	bl	1642 <log_msg_arg_get>
    1b3e:	2104      	movs	r1, #4
    1b40:	4680      	mov	r8, r0
    1b42:	4620      	mov	r0, r4
    1b44:	f7ff fd7d 	bl	1642 <log_msg_arg_get>
    1b48:	2105      	movs	r1, #5
    1b4a:	4681      	mov	r9, r0
    1b4c:	4620      	mov	r0, r4
    1b4e:	f7ff fd78 	bl	1642 <log_msg_arg_get>
    1b52:	2106      	movs	r1, #6
    1b54:	4682      	mov	sl, r0
    1b56:	4620      	mov	r0, r4
    1b58:	f7ff fd73 	bl	1642 <log_msg_arg_get>
    1b5c:	2107      	movs	r1, #7
    1b5e:	4683      	mov	fp, r0
    1b60:	4620      	mov	r0, r4
    1b62:	f7ff fd6e 	bl	1642 <log_msg_arg_get>
    1b66:	2108      	movs	r1, #8
    1b68:	900a      	str	r0, [sp, #40]	; 0x28
    1b6a:	4620      	mov	r0, r4
    1b6c:	f7ff fd69 	bl	1642 <log_msg_arg_get>
    1b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b72:	9006      	str	r0, [sp, #24]
    1b74:	e9cd b304 	strd	fp, r3, [sp, #16]
    1b78:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    1b7c:	e9cd 7800 	strd	r7, r8, [sp]
    1b80:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
    1b84:	4631      	mov	r1, r6
    1b86:	4628      	mov	r0, r5
    1b88:	f7ff fdc8 	bl	171c <print_formatted>
    1b8c:	e696      	b.n	18bc <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1b8e:	2100      	movs	r1, #0
    1b90:	4620      	mov	r0, r4
    1b92:	f7ff fd56 	bl	1642 <log_msg_arg_get>
    1b96:	2101      	movs	r1, #1
    1b98:	900d      	str	r0, [sp, #52]	; 0x34
    1b9a:	4620      	mov	r0, r4
    1b9c:	f7ff fd51 	bl	1642 <log_msg_arg_get>
    1ba0:	2102      	movs	r1, #2
    1ba2:	900c      	str	r0, [sp, #48]	; 0x30
    1ba4:	4620      	mov	r0, r4
    1ba6:	f7ff fd4c 	bl	1642 <log_msg_arg_get>
    1baa:	2103      	movs	r1, #3
    1bac:	900a      	str	r0, [sp, #40]	; 0x28
    1bae:	4620      	mov	r0, r4
    1bb0:	f7ff fd47 	bl	1642 <log_msg_arg_get>
    1bb4:	2104      	movs	r1, #4
    1bb6:	4607      	mov	r7, r0
    1bb8:	4620      	mov	r0, r4
    1bba:	f7ff fd42 	bl	1642 <log_msg_arg_get>
    1bbe:	2105      	movs	r1, #5
    1bc0:	4680      	mov	r8, r0
    1bc2:	4620      	mov	r0, r4
    1bc4:	f7ff fd3d 	bl	1642 <log_msg_arg_get>
    1bc8:	2106      	movs	r1, #6
    1bca:	4681      	mov	r9, r0
    1bcc:	4620      	mov	r0, r4
    1bce:	f7ff fd38 	bl	1642 <log_msg_arg_get>
    1bd2:	2107      	movs	r1, #7
    1bd4:	4682      	mov	sl, r0
    1bd6:	4620      	mov	r0, r4
    1bd8:	f7ff fd33 	bl	1642 <log_msg_arg_get>
    1bdc:	2108      	movs	r1, #8
    1bde:	4683      	mov	fp, r0
    1be0:	4620      	mov	r0, r4
    1be2:	f7ff fd2e 	bl	1642 <log_msg_arg_get>
    1be6:	2109      	movs	r1, #9
    1be8:	900b      	str	r0, [sp, #44]	; 0x2c
    1bea:	4620      	mov	r0, r4
    1bec:	f7ff fd29 	bl	1642 <log_msg_arg_get>
    1bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bf2:	9007      	str	r0, [sp, #28]
    1bf4:	e9cd b305 	strd	fp, r3, [sp, #20]
    1bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1bfa:	9300      	str	r3, [sp, #0]
    1bfc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
    1c00:	e9cd 7801 	strd	r7, r8, [sp, #4]
    1c04:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    1c08:	4631      	mov	r1, r6
    1c0a:	4628      	mov	r0, r5
    1c0c:	f7ff fd86 	bl	171c <print_formatted>
    1c10:	e654      	b.n	18bc <log_output_msg_process+0x134>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    1c12:	7a23      	ldrb	r3, [r4, #8]
	} else if (log_msg_is_raw_string(msg)) {
    1c14:	f003 0305 	and.w	r3, r3, #5
    1c18:	2b05      	cmp	r3, #5
    1c1a:	af10      	add	r7, sp, #64	; 0x40
    1c1c:	d114      	bne.n	1c48 <log_output_msg_process+0x4c0>
	size_t offset = 0;
    1c1e:	2600      	movs	r6, #0
		length = log_output->size;
    1c20:	68eb      	ldr	r3, [r5, #12]
    1c22:	9310      	str	r3, [sp, #64]	; 0x40
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1c24:	463a      	mov	r2, r7
    1c26:	4633      	mov	r3, r6
    1c28:	68a9      	ldr	r1, [r5, #8]
    1c2a:	4620      	mov	r0, r4
    1c2c:	f7ff fd6f 	bl	170e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    1c30:	686b      	ldr	r3, [r5, #4]
    1c32:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1c34:	601a      	str	r2, [r3, #0]
		log_output_flush(log_output);
    1c36:	4628      	mov	r0, r5
    1c38:	f7ff fd82 	bl	1740 <log_output_flush>
		offset += length;
    1c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c3e:	441e      	add	r6, r3
	} while (length > 0);
    1c40:	2b00      	cmp	r3, #0
    1c42:	d1ed      	bne.n	1c20 <log_output_msg_process+0x498>
	print_formatted(log_output, "\r");
    1c44:	4934      	ldr	r1, [pc, #208]	; (1d18 <log_output_msg_process+0x590>)
    1c46:	e62c      	b.n	18a2 <log_output_msg_process+0x11a>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1c48:	4620      	mov	r0, r4
    1c4a:	f7ff fd5e 	bl	170a <log_msg_str_get>
    1c4e:	4933      	ldr	r1, [pc, #204]	; (1d1c <log_output_msg_process+0x594>)
			print_formatted(log_output, " ");
    1c50:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1d34 <log_output_msg_process+0x5ac>
				print_formatted(log_output, "%02x ", buf[i]);
    1c54:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1d38 <log_output_msg_process+0x5b0>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1c58:	4602      	mov	r2, r0
    1c5a:	4628      	mov	r0, r5
    1c5c:	f7ff fd5e 	bl	171c <print_formatted>
	u32_t offset = 0;
    1c60:	f04f 0800 	mov.w	r8, #0
	size_t length = sizeof(buf);
    1c64:	aa12      	add	r2, sp, #72	; 0x48
    1c66:	2308      	movs	r3, #8
    1c68:	f842 3d0c 	str.w	r3, [r2, #-12]!
	log_msg_hexdump_data_get(msg, buf, &length, offset);
    1c6c:	4639      	mov	r1, r7
    1c6e:	4643      	mov	r3, r8
    1c70:	4620      	mov	r0, r4
    1c72:	f7ff fd4c 	bl	170e <log_msg_hexdump_data_get>
	if (length > 0) {
    1c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d036      	beq.n	1cea <log_output_msg_process+0x562>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    1c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c7e:	06da      	lsls	r2, r3, #27
    1c80:	d406      	bmi.n	1c90 <log_output_msg_process+0x508>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    1c82:	0698      	lsls	r0, r3, #26
		print_formatted(ctx, "\n");
    1c84:	bf4c      	ite	mi
    1c86:	4926      	ldrmi	r1, [pc, #152]	; (1d20 <log_output_msg_process+0x598>)
		print_formatted(ctx, "\r\n");
    1c88:	4926      	ldrpl	r1, [pc, #152]	; (1d24 <log_output_msg_process+0x59c>)
    1c8a:	4628      	mov	r0, r5
    1c8c:	f7ff fd46 	bl	171c <print_formatted>
	u32_t offset = 0;
    1c90:	f04f 0a00 	mov.w	sl, #0
		for (int i = 0; i < prefix_offset; i++) {
    1c94:	4556      	cmp	r6, sl
    1c96:	dc2e      	bgt.n	1cf6 <log_output_msg_process+0x56e>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c98:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    1c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c9e:	459a      	cmp	sl, r3
    1ca0:	d230      	bcs.n	1d04 <log_output_msg_process+0x57c>
				print_formatted(log_output, "%02x ", buf[i]);
    1ca2:	f817 200a 	ldrb.w	r2, [r7, sl]
    1ca6:	4659      	mov	r1, fp
    1ca8:	4628      	mov	r0, r5
    1caa:	f7ff fd37 	bl	171c <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cae:	f10a 0a01 	add.w	sl, sl, #1
    1cb2:	f1ba 0f08 	cmp.w	sl, #8
    1cb6:	d1f1      	bne.n	1c9c <log_output_msg_process+0x514>
		print_formatted(log_output, "|");
    1cb8:	491b      	ldr	r1, [pc, #108]	; (1d28 <log_output_msg_process+0x5a0>)
    1cba:	4628      	mov	r0, r5
    1cbc:	f7ff fd2e 	bl	171c <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cc0:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    1cc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1cc6:	4592      	cmp	sl, r2
    1cc8:	d221      	bcs.n	1d0e <log_output_msg_process+0x586>
				char c = (char)buf[i];
    1cca:	f817 200a 	ldrb.w	r2, [r7, sl]
	return ((((unsigned)c) > ' ') && (((unsigned)c) <= '~'));
}

static inline int isprint(int c)
{
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    1cce:	f1a2 0120 	sub.w	r1, r2, #32
				print_formatted(log_output, "%c",
    1cd2:	295f      	cmp	r1, #95	; 0x5f
    1cd4:	bf28      	it	cs
    1cd6:	222e      	movcs	r2, #46	; 0x2e
    1cd8:	4914      	ldr	r1, [pc, #80]	; (1d2c <log_output_msg_process+0x5a4>)
    1cda:	4628      	mov	r0, r5
    1cdc:	f7ff fd1e 	bl	171c <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1ce0:	f10a 0a01 	add.w	sl, sl, #1
    1ce4:	f1ba 0f08 	cmp.w	sl, #8
    1ce8:	d1ec      	bne.n	1cc4 <log_output_msg_process+0x53c>
	return length;
    1cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if (length < HEXDUMP_BYTES_IN_LINE) {
    1cec:	2b07      	cmp	r3, #7
    1cee:	f67f ade5 	bls.w	18bc <log_output_msg_process+0x134>
		offset += length;
    1cf2:	4498      	add	r8, r3
    1cf4:	e7b6      	b.n	1c64 <log_output_msg_process+0x4dc>
			print_formatted(log_output, " ");
    1cf6:	4649      	mov	r1, r9
    1cf8:	4628      	mov	r0, r5
    1cfa:	f7ff fd0f 	bl	171c <print_formatted>
		for (int i = 0; i < prefix_offset; i++) {
    1cfe:	f10a 0a01 	add.w	sl, sl, #1
    1d02:	e7c7      	b.n	1c94 <log_output_msg_process+0x50c>
				print_formatted(log_output, "   ");
    1d04:	490a      	ldr	r1, [pc, #40]	; (1d30 <log_output_msg_process+0x5a8>)
    1d06:	4628      	mov	r0, r5
    1d08:	f7ff fd08 	bl	171c <print_formatted>
    1d0c:	e7cf      	b.n	1cae <log_output_msg_process+0x526>
				print_formatted(log_output, " ");
    1d0e:	4649      	mov	r1, r9
    1d10:	4628      	mov	r0, r5
    1d12:	f7ff fd03 	bl	171c <print_formatted>
    1d16:	e7e3      	b.n	1ce0 <log_output_msg_process+0x558>
    1d18:	0000539e 	.word	0x0000539e
    1d1c:	00005311 	.word	0x00005311
    1d20:	0000531f 	.word	0x0000531f
    1d24:	0000531e 	.word	0x0000531e
    1d28:	0000532b 	.word	0x0000532b
    1d2c:	0000532d 	.word	0x0000532d
    1d30:	00005327 	.word	0x00005327
    1d34:	00005329 	.word	0x00005329
    1d38:	00005321 	.word	0x00005321

00001d3c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1;
    1d3c:	4a08      	ldr	r2, [pc, #32]	; (1d60 <log_output_timestamp_freq_set+0x24>)
{
    1d3e:	b510      	push	{r4, lr}
	timestamp_div = 1;
    1d40:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1d42:	4c08      	ldr	r4, [pc, #32]	; (1d64 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1;
    1d44:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1d46:	2100      	movs	r1, #0
    1d48:	42a0      	cmp	r0, r4
    1d4a:	d804      	bhi.n	1d56 <log_output_timestamp_freq_set+0x1a>
    1d4c:	b101      	cbz	r1, 1d50 <log_output_timestamp_freq_set+0x14>
    1d4e:	6013      	str	r3, [r2, #0]
		frequency /= 2;
		timestamp_div *= 2;
	}

	freq = frequency;
    1d50:	4b05      	ldr	r3, [pc, #20]	; (1d68 <log_output_timestamp_freq_set+0x2c>)
    1d52:	6018      	str	r0, [r3, #0]
}
    1d54:	bd10      	pop	{r4, pc}
		frequency /= 2;
    1d56:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2;
    1d58:	005b      	lsls	r3, r3, #1
    1d5a:	2101      	movs	r1, #1
    1d5c:	e7f4      	b.n	1d48 <log_output_timestamp_freq_set+0xc>
    1d5e:	bf00      	nop
    1d60:	2000043c 	.word	0x2000043c
    1d64:	000f4240 	.word	0x000f4240
    1d68:	20000438 	.word	0x20000438

00001d6c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	panic_mode = 0;
    1d6c:	4b03      	ldr	r3, [pc, #12]	; (1d7c <log_backend_rtt_init+0x10>)
    1d6e:	2200      	movs	r2, #0
    1d70:	601a      	str	r2, [r3, #0]
	line_pos = line_buf;
    1d72:	4b03      	ldr	r3, [pc, #12]	; (1d80 <log_backend_rtt_init+0x14>)
    1d74:	4a03      	ldr	r2, [pc, #12]	; (1d84 <log_backend_rtt_init+0x18>)
    1d76:	601a      	str	r2, [r3, #0]
}
    1d78:	4770      	bx	lr
    1d7a:	bf00      	nop
    1d7c:	200004f8 	.word	0x200004f8
    1d80:	200004ec 	.word	0x200004ec
    1d84:	20000454 	.word	0x20000454

00001d88 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = 1;
    1d88:	4b01      	ldr	r3, [pc, #4]	; (1d90 <panic+0x8>)
    1d8a:	2201      	movs	r2, #1
    1d8c:	601a      	str	r2, [r3, #0]
}
    1d8e:	4770      	bx	lr
    1d90:	200004f8 	.word	0x200004f8

00001d94 <put>:
{
    1d94:	b510      	push	{r4, lr}
	log_msg_get(msg);
    1d96:	4608      	mov	r0, r1
{
    1d98:	460c      	mov	r4, r1
	log_msg_get(msg);
    1d9a:	f7ff fc29 	bl	15f0 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    1d9e:	4621      	mov	r1, r4
    1da0:	4804      	ldr	r0, [pc, #16]	; (1db4 <put+0x20>)
    1da2:	220f      	movs	r2, #15
    1da4:	f7ff fcf0 	bl	1788 <log_output_msg_process>
	log_msg_put(msg);
    1da8:	4620      	mov	r0, r4
}
    1daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    1dae:	f7ff bc99 	b.w	16e4 <log_msg_put>
    1db2:	bf00      	nop
    1db4:	00005378 	.word	0x00005378

00001db8 <msg_out>:
{
    1db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (panic_mode) {
    1dbc:	4b41      	ldr	r3, [pc, #260]	; (1ec4 <msg_out+0x10c>)
    1dbe:	681b      	ldr	r3, [r3, #0]
{
    1dc0:	4680      	mov	r8, r0
    1dc2:	4689      	mov	r9, r1
	if (panic_mode) {
    1dc4:	b953      	cbnz	r3, 1ddc <msg_out+0x24>
    1dc6:	4e40      	ldr	r6, [pc, #256]	; (1ec8 <msg_out+0x110>)
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    1dc8:	f8df a110 	ldr.w	sl, [pc, #272]	; 1edc <msg_out+0x124>
    1dcc:	4605      	mov	r5, r0
	for (pos = data; pos < data + length; pos++) {
    1dce:	eb08 0309 	add.w	r3, r8, r9
    1dd2:	429d      	cmp	r5, r3
    1dd4:	d310      	bcc.n	1df8 <msg_out+0x40>
	return (int) (pos - data);
    1dd6:	eba5 0008 	sub.w	r0, r5, r8
    1dda:	e00b      	b.n	1df4 <msg_out+0x3c>
	written = SEGGER_RTT_WriteNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER, data,
    1ddc:	460a      	mov	r2, r1
    1dde:	4601      	mov	r1, r0
    1de0:	2000      	movs	r0, #0
    1de2:	f7ff f991 	bl	1108 <SEGGER_RTT_WriteNoLock>
    1de6:	4605      	mov	r5, r0

static void log_backend_rtt_flush(void)
{
	while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER)) {
    1de8:	2000      	movs	r0, #0
    1dea:	f7ff f9c1 	bl	1170 <SEGGER_RTT_HasDataUp>
    1dee:	2800      	cmp	r0, #0
    1df0:	d1fa      	bne.n	1de8 <msg_out+0x30>
	return written;
    1df2:	4628      	mov	r0, r5
}
    1df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (line_out(*pos)) {
    1df8:	f815 3b01 	ldrb.w	r3, [r5], #1
    1dfc:	6832      	ldr	r2, [r6, #0]
	if (data == '\r') {
    1dfe:	2b0d      	cmp	r3, #13
    1e00:	d15a      	bne.n	1eb8 <msg_out+0x100>
	if (drop_cnt > 0 && !drop_warn) {
    1e02:	4f32      	ldr	r7, [pc, #200]	; (1ecc <msg_out+0x114>)
	*line_pos = '\r';
    1e04:	7013      	strb	r3, [r2, #0]
	if (drop_cnt > 0 && !drop_warn) {
    1e06:	683b      	ldr	r3, [r7, #0]
    1e08:	4c31      	ldr	r4, [pc, #196]	; (1ed0 <msg_out+0x118>)
    1e0a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1ee0 <msg_out+0x128>
    1e0e:	2b00      	cmp	r3, #0
    1e10:	dd13      	ble.n	1e3a <msg_out+0x82>
    1e12:	f8db 3000 	ldr.w	r3, [fp]
    1e16:	b983      	cbnz	r3, 1e3a <msg_out+0x82>
		memmove(line_buf + DROP_MSG_LEN, line_buf,
    1e18:	1b12      	subs	r2, r2, r4
    1e1a:	4621      	mov	r1, r4
    1e1c:	f104 0017 	add.w	r0, r4, #23
    1e20:	f000 fdeb 	bl	29fa <memmove>
		memcpy(line_buf, drop_msg, DROP_MSG_LEN);
    1e24:	2217      	movs	r2, #23
    1e26:	492b      	ldr	r1, [pc, #172]	; (1ed4 <msg_out+0x11c>)
    1e28:	4620      	mov	r0, r4
    1e2a:	f000 fdfd 	bl	2a28 <memcpy>
		line_pos += DROP_MSG_LEN;
    1e2e:	6833      	ldr	r3, [r6, #0]
    1e30:	3317      	adds	r3, #23
    1e32:	6033      	str	r3, [r6, #0]
		drop_warn = 1;
    1e34:	2301      	movs	r3, #1
    1e36:	f8cb 3000 	str.w	r3, [fp]
	if (drop_warn) {
    1e3a:	f8db 3000 	ldr.w	r3, [fp]
    1e3e:	b163      	cbz	r3, 1e5a <msg_out+0xa2>
		int cnt = min(drop_cnt, DROP_MAX);
    1e40:	683b      	ldr	r3, [r7, #0]
    1e42:	2b63      	cmp	r3, #99	; 0x63
    1e44:	461a      	mov	r2, r3
    1e46:	bfa8      	it	ge
    1e48:	2263      	movge	r2, #99	; 0x63
		if (cnt < 10) {
    1e4a:	2b09      	cmp	r3, #9
    1e4c:	dc23      	bgt.n	1e96 <msg_out+0xde>
			line_buf[DROP_MSG_LEN - 2] = ' ';
    1e4e:	2120      	movs	r1, #32
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    1e50:	f102 0330 	add.w	r3, r2, #48	; 0x30
			line_buf[DROP_MSG_LEN - 2] = ' ';
    1e54:	7561      	strb	r1, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    1e56:	7523      	strb	r3, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = ' ';
    1e58:	74e1      	strb	r1, [r4, #19]

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    1e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1e5e:	481e      	ldr	r0, [pc, #120]	; (1ed8 <msg_out+0x120>)
    1e60:	f002 fa80 	bl	4364 <_impl_k_mutex_lock>
					     line_buf, line_pos - line_buf + 1);
    1e64:	6832      	ldr	r2, [r6, #0]
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1e66:	491a      	ldr	r1, [pc, #104]	; (1ed0 <msg_out+0x118>)
					     line_buf, line_pos - line_buf + 1);
    1e68:	f1c4 0401 	rsb	r4, r4, #1
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1e6c:	4422      	add	r2, r4
    1e6e:	2000      	movs	r0, #0
    1e70:	f7ff f902 	bl	1078 <SEGGER_RTT_WriteSkipNoLock>
    1e74:	4604      	mov	r4, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    1e76:	4818      	ldr	r0, [pc, #96]	; (1ed8 <msg_out+0x120>)
    1e78:	f002 fad6 	bl	4428 <_impl_k_mutex_unlock>
	if (!ret) {
    1e7c:	b9bc      	cbnz	r4, 1eae <msg_out+0xf6>
		drop_cnt++;
    1e7e:	683b      	ldr	r3, [r7, #0]
    1e80:	3301      	adds	r3, #1
    1e82:	603b      	str	r3, [r7, #0]
		line_pos = drop_cnt > 0 ? line_buf + DROP_MSG_LEN : line_buf;
    1e84:	4b12      	ldr	r3, [pc, #72]	; (1ed0 <msg_out+0x118>)
    1e86:	6839      	ldr	r1, [r7, #0]
    1e88:	f103 0217 	add.w	r2, r3, #23
    1e8c:	2900      	cmp	r1, #0
    1e8e:	bfc8      	it	gt
    1e90:	4613      	movgt	r3, r2
    1e92:	6033      	str	r3, [r6, #0]
    1e94:	e79b      	b.n	1dce <msg_out+0x16>
			line_buf[DROP_MSG_LEN - 2] = (u8_t) ('0' + cnt % 10);
    1e96:	230a      	movs	r3, #10
    1e98:	fb92 f1f3 	sdiv	r1, r2, r3
    1e9c:	fb03 2311 	mls	r3, r3, r1, r2
    1ea0:	3330      	adds	r3, #48	; 0x30
    1ea2:	7563      	strb	r3, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    1ea4:	3130      	adds	r1, #48	; 0x30
			line_buf[DROP_MSG_LEN - 4] = '>';
    1ea6:	233e      	movs	r3, #62	; 0x3e
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    1ea8:	7521      	strb	r1, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = '>';
    1eaa:	74e3      	strb	r3, [r4, #19]
    1eac:	e7d5      	b.n	1e5a <msg_out+0xa2>
	drop_cnt = 0;
    1eae:	2300      	movs	r3, #0
    1eb0:	603b      	str	r3, [r7, #0]
	drop_warn = 0;
    1eb2:	f8cb 3000 	str.w	r3, [fp]
    1eb6:	e7e5      	b.n	1e84 <msg_out+0xcc>
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    1eb8:	4552      	cmp	r2, sl
		*line_pos++ = data;
    1eba:	bf3e      	ittt	cc
    1ebc:	1c51      	addcc	r1, r2, #1
    1ebe:	6031      	strcc	r1, [r6, #0]
    1ec0:	7013      	strbcc	r3, [r2, #0]
    1ec2:	e784      	b.n	1dce <msg_out+0x16>
    1ec4:	200004f8 	.word	0x200004f8
    1ec8:	200004ec 	.word	0x200004ec
    1ecc:	2000044c 	.word	0x2000044c
    1ed0:	20000454 	.word	0x20000454
    1ed4:	00005388 	.word	0x00005388
    1ed8:	20001e08 	.word	0x20001e08
    1edc:	200004ea 	.word	0x200004ea
    1ee0:	20000450 	.word	0x20000450

00001ee4 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    1ee4:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    1ee6:	4c04      	ldr	r4, [pc, #16]	; (1ef8 <rtt_console_init+0x14>)
    1ee8:	4620      	mov	r0, r4
    1eea:	f7fe fd6f 	bl	9cc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    1eee:	4620      	mov	r0, r4
    1ef0:	f001 fa5a 	bl	33a8 <__stdout_hook_install>

	return 0;
}
    1ef4:	2000      	movs	r0, #0
    1ef6:	bd10      	pop	{r4, pc}
    1ef8:	00001efd 	.word	0x00001efd

00001efc <rtt_console_out>:
{
    1efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    1f00:	4f16      	ldr	r7, [pc, #88]	; (1f5c <rtt_console_out+0x60>)
    1f02:	4d17      	ldr	r5, [pc, #92]	; (1f60 <rtt_console_out+0x64>)
	char c = (char)character;
    1f04:	f88d 0007 	strb.w	r0, [sp, #7]
{
    1f08:	4606      	mov	r6, r0
	char c = (char)character;
    1f0a:	2403      	movs	r4, #3
    1f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1f10:	4638      	mov	r0, r7
    1f12:	f002 fa27 	bl	4364 <_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    1f16:	2201      	movs	r2, #1
    1f18:	f10d 0107 	add.w	r1, sp, #7
    1f1c:	2000      	movs	r0, #0
    1f1e:	f7ff f8f3 	bl	1108 <SEGGER_RTT_WriteNoLock>
    1f22:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    1f24:	4638      	mov	r0, r7
    1f26:	f002 fa7f 	bl	4428 <_impl_k_mutex_unlock>
		if (cnt) {
    1f2a:	f1b8 0f00 	cmp.w	r8, #0
    1f2e:	d005      	beq.n	1f3c <rtt_console_out+0x40>
			host_present = true;
    1f30:	2301      	movs	r3, #1
    1f32:	702b      	strb	r3, [r5, #0]
}
    1f34:	4630      	mov	r0, r6
    1f36:	b002      	add	sp, #8
    1f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    1f3c:	782b      	ldrb	r3, [r5, #0]
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d0f8      	beq.n	1f34 <rtt_console_out+0x38>
			if (max_cnt) {
    1f42:	3c01      	subs	r4, #1
    1f44:	d007      	beq.n	1f56 <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    1f46:	f002 fd95 	bl	4a74 <k_is_in_isr>
    1f4a:	2800      	cmp	r0, #0
    1f4c:	d1de      	bne.n	1f0c <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    1f4e:	2002      	movs	r0, #2
    1f50:	f002 fcb4 	bl	48bc <_impl_k_sleep>
		SEGGER_RTT_LOCK();
    1f54:	e7da      	b.n	1f0c <rtt_console_out+0x10>
				host_present = false;
    1f56:	702c      	strb	r4, [r5, #0]
    1f58:	e7ec      	b.n	1f34 <rtt_console_out+0x38>
    1f5a:	bf00      	nop
    1f5c:	20001e08 	.word	0x20001e08
    1f60:	200004fc 	.word	0x200004fc

00001f64 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1f64:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f66:	f04f 0320 	mov.w	r3, #32
    1f6a:	f3ef 8211 	mrs	r2, BASEPRI
    1f6e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1f72:	4c11      	ldr	r4, [pc, #68]	; (1fb8 <_m16src_stop+0x54>)
    1f74:	7823      	ldrb	r3, [r4, #0]
    1f76:	b923      	cbnz	r3, 1f82 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1f78:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1f7c:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    1f80:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    1f82:	3b01      	subs	r3, #1
    1f84:	b2db      	uxtb	r3, r3
    1f86:	7023      	strb	r3, [r4, #0]
    1f88:	b123      	cbz	r3, 1f94 <_m16src_stop+0x30>
    1f8a:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    1f8e:	f06f 000f 	mvn.w	r0, #15
    1f92:	e7f5      	b.n	1f80 <_m16src_stop+0x1c>
	if (m16src_grd) {
    1f94:	4b09      	ldr	r3, [pc, #36]	; (1fbc <_m16src_stop+0x58>)
    1f96:	7818      	ldrb	r0, [r3, #0]
    1f98:	2101      	movs	r1, #1
    1f9a:	b128      	cbz	r0, 1fa8 <_m16src_stop+0x44>
		m16src_ref++;
    1f9c:	7021      	strb	r1, [r4, #0]
    1f9e:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    1fa2:	f06f 000a 	mvn.w	r0, #10
    1fa6:	e7eb      	b.n	1f80 <_m16src_stop+0x1c>
	m16src_grd = 1;
    1fa8:	7019      	strb	r1, [r3, #0]
    1faa:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1fae:	4a04      	ldr	r2, [pc, #16]	; (1fc0 <_m16src_stop+0x5c>)
    1fb0:	6011      	str	r1, [r2, #0]
	m16src_grd = 0;
    1fb2:	7018      	strb	r0, [r3, #0]
	return 0;
    1fb4:	e7e4      	b.n	1f80 <_m16src_stop+0x1c>
    1fb6:	bf00      	nop
    1fb8:	200004ff 	.word	0x200004ff
    1fbc:	200004fe 	.word	0x200004fe
    1fc0:	40000004 	.word	0x40000004

00001fc4 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    1fc4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1fc6:	2200      	movs	r2, #0
    1fc8:	4610      	mov	r0, r2
    1fca:	2101      	movs	r1, #1
    1fcc:	f000 fb84 	bl	26d8 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1fd0:	2000      	movs	r0, #0
    1fd2:	f000 fb5d 	bl	2690 <_arch_irq_enable>

	return 0;
}
    1fd6:	2000      	movs	r0, #0
    1fd8:	bd08      	pop	{r3, pc}
	...

00001fdc <_m16src_start>:
{
    1fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1fde:	f04f 0220 	mov.w	r2, #32
    1fe2:	f3ef 8311 	mrs	r3, BASEPRI
    1fe6:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1fea:	4a26      	ldr	r2, [pc, #152]	; (2084 <_m16src_start+0xa8>)
    1fec:	7810      	ldrb	r0, [r2, #0]
    1fee:	1c44      	adds	r4, r0, #1
    1ff0:	7014      	strb	r4, [r2, #0]
    1ff2:	b170      	cbz	r0, 2012 <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1ff4:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    1ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ffc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2000:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    2004:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    2008:	bf0c      	ite	eq
    200a:	2000      	moveq	r0, #0
    200c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    2010:	e007      	b.n	2022 <_m16src_start+0x46>
	if (m16src_grd) {
    2012:	4d1d      	ldr	r5, [pc, #116]	; (2088 <_m16src_start+0xac>)
    2014:	782f      	ldrb	r7, [r5, #0]
    2016:	b12f      	cbz	r7, 2024 <_m16src_start+0x48>
		m16src_ref--;
    2018:	7010      	strb	r0, [r2, #0]
    201a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    201e:	f06f 000a 	mvn.w	r0, #10
}
    2022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    2024:	2601      	movs	r6, #1
    2026:	702e      	strb	r6, [r5, #0]
    2028:	f383 8811 	msr	BASEPRI, r3
    202c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    2030:	b319      	cbz	r1, 207a <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    2032:	4638      	mov	r0, r7
    2034:	f000 fb3c 	bl	26b0 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2038:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    203c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    2040:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    2044:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2046:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    204a:	b192      	cbz	r2, 2072 <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    204c:	2200      	movs	r2, #0
    204e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2052:	4a0e      	ldr	r2, [pc, #56]	; (208c <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2054:	f013 0f01 	tst.w	r3, #1
    2058:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    205c:	bf08      	it	eq
    205e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    2062:	2000      	movs	r0, #0
    2064:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    2068:	f000 fb12 	bl	2690 <_arch_irq_enable>
	m16src_grd = 0;
    206c:	2300      	movs	r3, #0
    206e:	702b      	strb	r3, [r5, #0]
    2070:	e7c2      	b.n	1ff8 <_m16src_start+0x1c>
			__WFE();
    2072:	bf20      	wfe
			__SEV();
    2074:	bf40      	sev
			__WFE();
    2076:	bf20      	wfe
    2078:	e7e5      	b.n	2046 <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    207a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    207e:	6026      	str	r6, [r4, #0]
    2080:	e7f4      	b.n	206c <_m16src_start+0x90>
    2082:	bf00      	nop
    2084:	200004ff 	.word	0x200004ff
    2088:	200004fe 	.word	0x200004fe
    208c:	e000e100 	.word	0xe000e100

00002090 <_k32src_start>:
{
    2090:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2092:	f04f 0220 	mov.w	r2, #32
    2096:	f3ef 8311 	mrs	r3, BASEPRI
    209a:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    209e:	4d1d      	ldr	r5, [pc, #116]	; (2114 <_k32src_start+0x84>)
    20a0:	782a      	ldrb	r2, [r5, #0]
    20a2:	b18a      	cbz	r2, 20c8 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    20a4:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    20a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    20ac:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    20b0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    20b4:	f003 0303 	and.w	r3, r3, #3
    20b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    20bc:	4393      	bics	r3, r2
}
    20be:	bf14      	ite	ne
    20c0:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    20c4:	2000      	moveq	r0, #0
    20c6:	bd38      	pop	{r3, r4, r5, pc}
	k32src_initialized = 1;
    20c8:	2401      	movs	r4, #1
    20ca:	702c      	strb	r4, [r5, #0]
    20cc:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    20d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    20d4:	4d10      	ldr	r5, [pc, #64]	; (2118 <_k32src_start+0x88>)
    20d6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    20da:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    20de:	602c      	str	r4, [r5, #0]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    20e0:	f011 0103 	ands.w	r1, r1, #3
    NRF_CLOCK->INTENCLR = int_mask;
    20e4:	f04f 0518 	mov.w	r5, #24
    20e8:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    20ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    20f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    20f4:	d1d8      	bne.n	20a8 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    20f6:	2210      	movs	r2, #16
    20f8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    20fc:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    2100:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2104:	f7ff ff6a 	bl	1fdc <_m16src_start>
		if (!err) {
    2108:	2800      	cmp	r0, #0
    210a:	d1cd      	bne.n	20a8 <_k32src_start+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    210c:	4b03      	ldr	r3, [pc, #12]	; (211c <_k32src_start+0x8c>)
    210e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    2112:	e7c9      	b.n	20a8 <_k32src_start+0x18>
    2114:	200004fd 	.word	0x200004fd
    2118:	40000008 	.word	0x40000008
    211c:	e000e100 	.word	0xe000e100

00002120 <_power_clock_isr>:
{
    2120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    2126:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2128:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    212c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2130:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2134:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2138:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    213c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2140:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2144:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    2148:	f1bc 0f00 	cmp.w	ip, #0
    214c:	d003      	beq.n	2156 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    214e:	f04f 0c00 	mov.w	ip, #0
    2152:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    2156:	b127      	cbz	r7, 2162 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    215c:	2700      	movs	r7, #0
    215e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2162:	b152      	cbz	r2, 217a <_power_clock_isr+0x5a>
    2164:	03e3      	lsls	r3, r4, #15
    2166:	d508      	bpl.n	217a <_power_clock_isr+0x5a>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    216c:	4c15      	ldr	r4, [pc, #84]	; (21c4 <_power_clock_isr+0xa4>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    216e:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    2170:	2702      	movs	r7, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2172:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    2176:	6027      	str	r7, [r4, #0]
		NRF_CLOCK->TASKS_CAL = 1;
    2178:	611a      	str	r2, [r3, #16]
	if (lf) {
    217a:	b120      	cbz	r0, 2186 <_power_clock_isr+0x66>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    217c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2180:	2200      	movs	r2, #0
    2182:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2186:	b159      	cbz	r1, 21a0 <_power_clock_isr+0x80>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    2188:	4b0e      	ldr	r3, [pc, #56]	; (21c4 <_power_clock_isr+0xa4>)
		NRF_CLOCK->EVENTS_DONE = 0;
    218a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    218e:	2100      	movs	r1, #0
    2190:	6019      	str	r1, [r3, #0]
		err = _m16src_stop(dev, NULL);
    2192:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    2194:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2198:	f7ff fee4 	bl	1f64 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    219c:	2301      	movs	r3, #1
    219e:	6163      	str	r3, [r4, #20]
	if (ctto) {
    21a0:	b176      	cbz	r6, 21c0 <_power_clock_isr+0xa0>
		NRF_CLOCK->EVENTS_CTTO = 0;
    21a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21a6:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    21a8:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    21aa:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    21ae:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    21b0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    21b4:	f7ff ff12 	bl	1fdc <_m16src_start>
		if (!err) {
    21b8:	b910      	cbnz	r0, 21c0 <_power_clock_isr+0xa0>
    21ba:	4b03      	ldr	r3, [pc, #12]	; (21c8 <_power_clock_isr+0xa8>)
    21bc:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    21c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21c2:	bf00      	nop
    21c4:	40000c34 	.word	0x40000c34
    21c8:	e000e100 	.word	0xe000e100

000021cc <rtc_compare_set>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)
{
    p_rtc->CC[ch] = cc_val;
    21cc:	4b08      	ldr	r3, [pc, #32]	; (21f0 <rtc_compare_set+0x24>)
    21ce:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)
{
     return p_rtc->COUNTER;
    21d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    21d6:	1ac0      	subs	r0, r0, r3
    21d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21dc:	4b05      	ldr	r3, [pc, #20]	; (21f4 <rtc_compare_set+0x28>)
    21de:	3802      	subs	r0, #2
    21e0:	4298      	cmp	r0, r3
    21e2:	bf82      	ittt	hi
    21e4:	4b04      	ldrhi	r3, [pc, #16]	; (21f8 <rtc_compare_set+0x2c>)
    21e6:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    21ea:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    21ee:	4770      	bx	lr
    21f0:	40011000 	.word	0x40011000
    21f4:	007ffffd 	.word	0x007ffffd
    21f8:	e000e100 	.word	0xe000e100

000021fc <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    21fc:	b510      	push	{r4, lr}
    21fe:	4b13      	ldr	r3, [pc, #76]	; (224c <rtc_announce_set_next+0x50>)
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    2200:	4c13      	ldr	r4, [pc, #76]	; (2250 <rtc_announce_set_next+0x54>)
    2202:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    2206:	6822      	ldr	r2, [r4, #0]
    2208:	1a80      	subs	r0, r0, r2
    220a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick()) {
    220e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    2212:	d913      	bls.n	223c <rtc_announce_set_next+0x40>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();

		if (sys_elapsed > expected_sys_ticks) {
    2214:	490f      	ldr	r1, [pc, #60]	; (2254 <rtc_announce_set_next+0x58>)
    2216:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();
    2218:	f240 1347 	movw	r3, #327	; 0x147
    221c:	fbb0 f0f3 	udiv	r0, r0, r3
    2220:	4288      	cmp	r0, r1
    2222:	bf28      	it	cs
    2224:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    2226:	fb03 2300 	mla	r3, r3, r0, r2
#endif
}

static void wrapped_announce(s32_t ticks)
{
	driver_uptime += ticks;
    222a:	4a0b      	ldr	r2, [pc, #44]	; (2258 <rtc_announce_set_next+0x5c>)
				(sys_elapsed * sys_clock_hw_cycles_per_tick())
			   ) & RTC_MASK;
    222c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    2230:	6023      	str	r3, [r4, #0]
    2232:	6813      	ldr	r3, [r2, #0]
    2234:	4403      	add	r3, r0
    2236:	6013      	str	r3, [r2, #0]
	z_clock_announce(ticks);
    2238:	f002 fd7c 	bl	4d34 <z_clock_announce>
		_sys_idle_elapsed_ticks = sys_elapsed;
		z_clock_announce(_sys_idle_elapsed_ticks);
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    223c:	6820      	ldr	r0, [r4, #0]
}
    223e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    2242:	f200 1047 	addw	r0, r0, #327	; 0x147
    2246:	f7ff bfc1 	b.w	21cc <rtc_compare_set>
    224a:	bf00      	nop
    224c:	40011000 	.word	0x40011000
    2250:	20000508 	.word	0x20000508
    2254:	20000504 	.word	0x20000504
    2258:	20000500 	.word	0x20000500

0000225c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    225c:	4b02      	ldr	r3, [pc, #8]	; (2268 <rtc1_nrf5_isr+0xc>)
    225e:	2200      	movs	r2, #0
    2260:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	/* z_clock_announce() could cause new programming */
	if (!expected_sys_ticks && _sys_clock_always_on) {
		program_max_cycles();
	}
#else
	rtc_announce_set_next();
    2264:	f7ff bfca 	b.w	21fc <rtc_announce_set_next>
    2268:	40011000 	.word	0x40011000

0000226c <z_clock_set_timeout>:
}
    226c:	4770      	bx	lr

0000226e <z_clock_elapsed>:
}
    226e:	2000      	movs	r0, #0
    2270:	4770      	bx	lr
	...

00002274 <z_clock_idle_exit>:
{
    2274:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    2276:	4b07      	ldr	r3, [pc, #28]	; (2294 <z_clock_idle_exit+0x20>)
    2278:	2200      	movs	r2, #0
    227a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    227e:	4b06      	ldr	r3, [pc, #24]	; (2298 <z_clock_idle_exit+0x24>)
    2280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2284:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    2288:	f7ff ffb8 	bl	21fc <rtc_announce_set_next>
	expected_sys_ticks = 1;
    228c:	4b03      	ldr	r3, [pc, #12]	; (229c <z_clock_idle_exit+0x28>)
    228e:	2201      	movs	r2, #1
    2290:	601a      	str	r2, [r3, #0]
}
    2292:	bd08      	pop	{r3, pc}
    2294:	40011000 	.word	0x40011000
    2298:	e000e100 	.word	0xe000e100
    229c:	20000504 	.word	0x20000504

000022a0 <z_clock_driver_init>:
	sys_trace_isr_exit();

}

int z_clock_driver_init(struct device *device)
{
    22a0:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    22a2:	4819      	ldr	r0, [pc, #100]	; (2308 <z_clock_driver_init+0x68>)
    22a4:	f001 feec 	bl	4080 <device_get_binding>
	if (!clock) {
    22a8:	b350      	cbz	r0, 2300 <z_clock_driver_init+0x60>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    22aa:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    22ac:	4d17      	ldr	r5, [pc, #92]	; (230c <z_clock_driver_init+0x6c>)
    22ae:	681b      	ldr	r3, [r3, #0]
    22b0:	2101      	movs	r1, #1
    22b2:	4798      	blx	r3
	rtc_past = 0;
    22b4:	4b16      	ldr	r3, [pc, #88]	; (2310 <z_clock_driver_init+0x70>)
    22b6:	2400      	movs	r4, #0
    22b8:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    22ba:	4b16      	ldr	r3, [pc, #88]	; (2314 <z_clock_driver_init+0x74>)
    22bc:	2601      	movs	r6, #1
    22be:	601e      	str	r6, [r3, #0]
    p_rtc->CC[ch] = cc_val;
    22c0:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    22c4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    22c8:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENSET = mask;
    22cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    22d0:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_rtc->INTENSET = mask;
    22d4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    22d8:	4b0f      	ldr	r3, [pc, #60]	; (2318 <z_clock_driver_init+0x78>)
		       sys_clock_hw_cycles_per_tick());
	nrf_rtc_event_enable(SYS_CLOCK_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(SYS_CLOCK_RTC, RTC_INTENSET_COMPARE0_Msk);

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    22da:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    22de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    22e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    22e6:	4631      	mov	r1, r6
    22e8:	4622      	mov	r2, r4
    22ea:	2011      	movs	r0, #17
    22ec:	f000 f9f4 	bl	26d8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    22f0:	2011      	movs	r0, #17
    22f2:	f000 f9cd 	bl	2690 <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    22f6:	4b09      	ldr	r3, [pc, #36]	; (231c <z_clock_driver_init+0x7c>)

	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_START);

	return 0;
    22f8:	4620      	mov	r0, r4
    22fa:	601e      	str	r6, [r3, #0]
    22fc:	602e      	str	r6, [r5, #0]
}
    22fe:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2304:	e7fb      	b.n	22fe <z_clock_driver_init+0x5e>
    2306:	bf00      	nop
    2308:	000053c8 	.word	0x000053c8
    230c:	40011000 	.word	0x40011000
    2310:	20000508 	.word	0x20000508
    2314:	20000504 	.word	0x20000504
    2318:	e000e100 	.word	0xe000e100
    231c:	40011008 	.word	0x40011008

00002320 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2320:	b508      	push	{r3, lr}
	u32_t ticked_cycles;
	u32_t elapsed_cycles;

	/* Number of timer cycles announced as ticks so far. */
	ticked_cycles = z_tick_get() * sys_clock_hw_cycles_per_tick();
    2322:	f002 fd53 	bl	4dcc <z_tick_get>
    2326:	f240 1347 	movw	r3, #327	; 0x147
    232a:	4358      	muls	r0, r3
     return p_rtc->COUNTER;
    232c:	4b03      	ldr	r3, [pc, #12]	; (233c <_timer_cycle_get_32+0x1c>)
    232e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * The value of RTC_COUNTER is not reset on tick, so it will
	 * compensate potentialy missed update of z_tick_get()
	 * which could have happen between the ticked_cycles calculation
	 * and the code below.
	 */
	elapsed_cycles = (RTC_COUNTER - ticked_cycles) & RTC_MASK;
    2332:	1a1b      	subs	r3, r3, r0
    2334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return ticked_cycles + elapsed_cycles;
}
    2338:	4418      	add	r0, r3
    233a:	bd08      	pop	{r3, pc}
    233c:	40011000 	.word	0x40011000

00002340 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    2340:	4804      	ldr	r0, [pc, #16]	; (2354 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    2342:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    2344:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    2346:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    2348:	d003      	beq.n	2352 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    234a:	4903      	ldr	r1, [pc, #12]	; (2358 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    234c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    2350:	600a      	str	r2, [r1, #0]

00002352 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    2352:	4770      	bx	lr
    ldr r0, =_kernel
    2354:	2000078c 	.word	0x2000078c
    ldr r1, =_SCS_ICSR
    2358:	e000ed04 	.word	0xe000ed04

0000235c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    235c:	4804      	ldr	r0, [pc, #16]	; (2370 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    235e:	2300      	movs	r3, #0
    2360:	2120      	movs	r1, #32
    2362:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2364:	3301      	adds	r3, #1
    2366:	2b27      	cmp	r3, #39	; 0x27
    2368:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    236c:	d1f9      	bne.n	2362 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    236e:	4770      	bx	lr
    2370:	e000e100 	.word	0xe000e100

00002374 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    2374:	4a08      	ldr	r2, [pc, #32]	; (2398 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2376:	4909      	ldr	r1, [pc, #36]	; (239c <__swap+0x28>)
	_current->arch.basepri = key;
    2378:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    237a:	6809      	ldr	r1, [r1, #0]
    237c:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    237e:	4908      	ldr	r1, [pc, #32]	; (23a0 <__swap+0x2c>)
	_current->arch.basepri = key;
    2380:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2382:	684b      	ldr	r3, [r1, #4]
    2384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2388:	604b      	str	r3, [r1, #4]
    238a:	2300      	movs	r3, #0
    238c:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    2390:	6893      	ldr	r3, [r2, #8]
}
    2392:	6e98      	ldr	r0, [r3, #104]	; 0x68
    2394:	4770      	bx	lr
    2396:	bf00      	nop
    2398:	2000078c 	.word	0x2000078c
    239c:	00005a88 	.word	0x00005a88
    23a0:	e000ed00 	.word	0xe000ed00

000023a4 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    23a4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    23a6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    23aa:	490d      	ldr	r1, [pc, #52]	; (23e0 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    23ac:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    23ae:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    23b2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    23b4:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    23b8:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    23bc:	4f09      	ldr	r7, [pc, #36]	; (23e4 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    23be:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    23c2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    23c4:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    23c6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    23c8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    23ca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    23cc:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    23ce:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    23d2:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    23d6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
    23da:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    23de:	4770      	bx	lr
    ldr r1, =_kernel
    23e0:	2000078c 	.word	0x2000078c
    ldr v4, =_SCS_ICSR
    23e4:	e000ed04 	.word	0xe000ed04

000023e8 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    23e8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    23ec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    23ee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    23f2:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    23f6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    23f8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    23fc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    2400:	2902      	cmp	r1, #2
    beq _oops
    2402:	d0ff      	beq.n	2404 <_oops>

00002404 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    2404:	b500      	push	{lr}
    blx _do_kernel_oops
    2406:	f000 f9fd 	bl	2804 <_do_kernel_oops>
    pop {pc}
    240a:	bd00      	pop	{pc}

0000240c <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    240c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    240e:	4c19      	ldr	r4, [pc, #100]	; (2474 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    2410:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    2412:	4819      	ldr	r0, [pc, #100]	; (2478 <_MpuFault.isra.2+0x6c>)
    2414:	f7fe fc22 	bl	c5c <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    241a:	06d9      	lsls	r1, r3, #27
    241c:	d502      	bpl.n	2424 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    241e:	4817      	ldr	r0, [pc, #92]	; (247c <_MpuFault.isra.2+0x70>)
    2420:	f7fe fc1c 	bl	c5c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    2424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2426:	071a      	lsls	r2, r3, #28
    2428:	d502      	bpl.n	2430 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    242a:	4815      	ldr	r0, [pc, #84]	; (2480 <_MpuFault.isra.2+0x74>)
    242c:	f7fe fc16 	bl	c5c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    2430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2432:	079b      	lsls	r3, r3, #30
    2434:	d50e      	bpl.n	2454 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    2436:	4813      	ldr	r0, [pc, #76]	; (2484 <_MpuFault.isra.2+0x78>)
    2438:	f7fe fc10 	bl	c5c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    243c:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    243e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2440:	0618      	lsls	r0, r3, #24
    2442:	d507      	bpl.n	2454 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    2444:	4810      	ldr	r0, [pc, #64]	; (2488 <_MpuFault.isra.2+0x7c>)
    2446:	f7fe fc09 	bl	c5c <printk>
			if (fromHardFault) {
    244a:	b11d      	cbz	r5, 2454 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    244c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    244e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2452:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    2454:	4c07      	ldr	r4, [pc, #28]	; (2474 <_MpuFault.isra.2+0x68>)
    2456:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2458:	07d2      	lsls	r2, r2, #31
    245a:	d502      	bpl.n	2462 <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    245c:	480b      	ldr	r0, [pc, #44]	; (248c <_MpuFault.isra.2+0x80>)
    245e:	f7fe fbfd 	bl	c5c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    2462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2464:	069b      	lsls	r3, r3, #26
    2466:	d502      	bpl.n	246e <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    2468:	4809      	ldr	r0, [pc, #36]	; (2490 <_MpuFault.isra.2+0x84>)
    246a:	f7fe fbf7 	bl	c5c <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    246e:	2000      	movs	r0, #0
    2470:	bd38      	pop	{r3, r4, r5, pc}
    2472:	bf00      	nop
    2474:	e000ed00 	.word	0xe000ed00
    2478:	00005537 	.word	0x00005537
    247c:	0000554e 	.word	0x0000554e
    2480:	00005560 	.word	0x00005560
    2484:	00005574 	.word	0x00005574
    2488:	0000558d 	.word	0x0000558d
    248c:	000055a4 	.word	0x000055a4
    2490:	000055c4 	.word	0x000055c4

00002494 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    2494:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2496:	4c1b      	ldr	r4, [pc, #108]	; (2504 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    2498:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    249a:	481b      	ldr	r0, [pc, #108]	; (2508 <_BusFault.isra.3+0x74>)
    249c:	f7fe fbde 	bl	c5c <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    24a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24a2:	04d8      	lsls	r0, r3, #19
    24a4:	d504      	bpl.n	24b0 <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    24a6:	4819      	ldr	r0, [pc, #100]	; (250c <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    24a8:	f7fe fbd8 	bl	c5c <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    24ac:	2000      	movs	r0, #0
    24ae:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    24b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24b2:	0519      	lsls	r1, r3, #20
    24b4:	d501      	bpl.n	24ba <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    24b6:	4816      	ldr	r0, [pc, #88]	; (2510 <_BusFault.isra.3+0x7c>)
    24b8:	e7f6      	b.n	24a8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    24ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24bc:	059a      	lsls	r2, r3, #22
    24be:	d514      	bpl.n	24ea <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    24c0:	4814      	ldr	r0, [pc, #80]	; (2514 <_BusFault.isra.3+0x80>)
    24c2:	f7fe fbcb 	bl	c5c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    24c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    24c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ca:	041b      	lsls	r3, r3, #16
    24cc:	d507      	bpl.n	24de <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    24ce:	4812      	ldr	r0, [pc, #72]	; (2518 <_BusFault.isra.3+0x84>)
    24d0:	f7fe fbc4 	bl	c5c <printk>
			if (fromHardFault) {
    24d4:	b11d      	cbz	r5, 24de <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    24d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    24dc:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    24de:	4b09      	ldr	r3, [pc, #36]	; (2504 <_BusFault.isra.3+0x70>)
    24e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24e2:	0558      	lsls	r0, r3, #21
    24e4:	d5e2      	bpl.n	24ac <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    24e6:	480d      	ldr	r0, [pc, #52]	; (251c <_BusFault.isra.3+0x88>)
    24e8:	e7de      	b.n	24a8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    24ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ec:	0559      	lsls	r1, r3, #21
    24ee:	d4fa      	bmi.n	24e6 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    24f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24f2:	05da      	lsls	r2, r3, #23
    24f4:	d501      	bpl.n	24fa <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    24f6:	480a      	ldr	r0, [pc, #40]	; (2520 <_BusFault.isra.3+0x8c>)
    24f8:	e7d6      	b.n	24a8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    24fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24fc:	049b      	lsls	r3, r3, #18
    24fe:	d5d5      	bpl.n	24ac <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    2500:	4808      	ldr	r0, [pc, #32]	; (2524 <_BusFault.isra.3+0x90>)
    2502:	e7d1      	b.n	24a8 <_BusFault.isra.3+0x14>
    2504:	e000ed00 	.word	0xe000ed00
    2508:	000053e8 	.word	0x000053e8
    250c:	0000554e 	.word	0x0000554e
    2510:	00005560 	.word	0x00005560
    2514:	000053ff 	.word	0x000053ff
    2518:	00005419 	.word	0x00005419
    251c:	0000542f 	.word	0x0000542f
    2520:	0000544b 	.word	0x0000544b
    2524:	000055c4 	.word	0x000055c4

00002528 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    2528:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    252a:	4c19      	ldr	r4, [pc, #100]	; (2590 <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    252c:	4819      	ldr	r0, [pc, #100]	; (2594 <_UsageFault.isra.5+0x6c>)
    252e:	f7fe fb95 	bl	c5c <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    2532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2534:	019a      	lsls	r2, r3, #6
    2536:	d502      	bpl.n	253e <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    2538:	4817      	ldr	r0, [pc, #92]	; (2598 <_UsageFault.isra.5+0x70>)
    253a:	f7fe fb8f 	bl	c5c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    253e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2540:	01db      	lsls	r3, r3, #7
    2542:	d502      	bpl.n	254a <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    2544:	4815      	ldr	r0, [pc, #84]	; (259c <_UsageFault.isra.5+0x74>)
    2546:	f7fe fb89 	bl	c5c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    254a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    254c:	0318      	lsls	r0, r3, #12
    254e:	d502      	bpl.n	2556 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    2550:	4813      	ldr	r0, [pc, #76]	; (25a0 <_UsageFault.isra.5+0x78>)
    2552:	f7fe fb83 	bl	c5c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    2556:	4c0e      	ldr	r4, [pc, #56]	; (2590 <_UsageFault.isra.5+0x68>)
    2558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    255a:	0359      	lsls	r1, r3, #13
    255c:	d502      	bpl.n	2564 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    255e:	4811      	ldr	r0, [pc, #68]	; (25a4 <_UsageFault.isra.5+0x7c>)
    2560:	f7fe fb7c 	bl	c5c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    2564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2566:	039a      	lsls	r2, r3, #14
    2568:	d502      	bpl.n	2570 <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    256a:	480f      	ldr	r0, [pc, #60]	; (25a8 <_UsageFault.isra.5+0x80>)
    256c:	f7fe fb76 	bl	c5c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    2570:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2572:	03db      	lsls	r3, r3, #15
    2574:	d502      	bpl.n	257c <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    2576:	480d      	ldr	r0, [pc, #52]	; (25ac <_UsageFault.isra.5+0x84>)
    2578:	f7fe fb70 	bl	c5c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    257c:	4a04      	ldr	r2, [pc, #16]	; (2590 <_UsageFault.isra.5+0x68>)
    257e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2580:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2584:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2588:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    258a:	2000      	movs	r0, #0
    258c:	bd10      	pop	{r4, pc}
    258e:	bf00      	nop
    2590:	e000ed00 	.word	0xe000ed00
    2594:	000055f4 	.word	0x000055f4
    2598:	0000560d 	.word	0x0000560d
    259c:	00005621 	.word	0x00005621
    25a0:	0000563c 	.word	0x0000563c
    25a4:	0000565b 	.word	0x0000565b
    25a8:	00005681 	.word	0x00005681
    25ac:	0000569c 	.word	0x0000569c

000025b0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    25b0:	b570      	push	{r4, r5, r6, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    25b2:	4d28      	ldr	r5, [pc, #160]	; (2654 <_Fault+0xa4>)
    25b4:	686c      	ldr	r4, [r5, #4]
    25b6:	f3c4 0408 	ubfx	r4, r4, #0, #9
{
    25ba:	4606      	mov	r6, r0

	LOG_PANIC();
    25bc:	f7fe ff48 	bl	1450 <log_panic>
	switch (fault) {
    25c0:	1ee3      	subs	r3, r4, #3
    25c2:	2b09      	cmp	r3, #9
    25c4:	d83a      	bhi.n	263c <_Fault+0x8c>
    25c6:	e8df f003 	tbb	[pc, r3]
    25ca:	3305      	.short	0x3305
    25cc:	39393035 	.word	0x39393035
    25d0:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    25d4:	4820      	ldr	r0, [pc, #128]	; (2658 <_Fault+0xa8>)
    25d6:	f7fe fb41 	bl	c5c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    25da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    25dc:	079a      	lsls	r2, r3, #30
    25de:	d503      	bpl.n	25e8 <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
    25e0:	481e      	ldr	r0, [pc, #120]	; (265c <_Fault+0xac>)
	PR_FAULT_INFO(
    25e2:	f7fe fb3b 	bl	c5c <printk>
    25e6:	e002      	b.n	25ee <_Fault+0x3e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    25e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    25ea:	005b      	lsls	r3, r3, #1
    25ec:	d405      	bmi.n	25fa <_Fault+0x4a>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    25ee:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
    25f0:	4631      	mov	r1, r6
}
    25f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_NanoFatalErrorHandler(reason, esf);
    25f6:	f000 b8d1 	b.w	279c <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    25fa:	4819      	ldr	r0, [pc, #100]	; (2660 <_Fault+0xb0>)
    25fc:	f7fe fb2e 	bl	c5c <printk>
		if (SCB_MMFSR) {
    2600:	4b18      	ldr	r3, [pc, #96]	; (2664 <_Fault+0xb4>)
    2602:	781b      	ldrb	r3, [r3, #0]
    2604:	b12b      	cbz	r3, 2612 <_Fault+0x62>
			reason = _MpuFault(esf, 1);
    2606:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    2608:	f7ff ff00 	bl	240c <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    260c:	2806      	cmp	r0, #6
    260e:	d1ef      	bne.n	25f0 <_Fault+0x40>
}
    2610:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR) {
    2612:	4b15      	ldr	r3, [pc, #84]	; (2668 <_Fault+0xb8>)
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	b11b      	cbz	r3, 2620 <_Fault+0x70>
			reason = _BusFault(esf, 1);
    2618:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    261a:	f7ff ff3b 	bl	2494 <_BusFault.isra.3>
    261e:	e7f5      	b.n	260c <_Fault+0x5c>
		} else if (SCB_UFSR) {
    2620:	4b12      	ldr	r3, [pc, #72]	; (266c <_Fault+0xbc>)
    2622:	881b      	ldrh	r3, [r3, #0]
    2624:	b29b      	uxth	r3, r3
    2626:	2b00      	cmp	r3, #0
    2628:	d0e1      	beq.n	25ee <_Fault+0x3e>
		reason = _UsageFault(esf);
    262a:	f7ff ff7d 	bl	2528 <_UsageFault.isra.5>
    262e:	e7ed      	b.n	260c <_Fault+0x5c>
		reason = _MpuFault(esf, 0);
    2630:	2000      	movs	r0, #0
    2632:	e7e9      	b.n	2608 <_Fault+0x58>
		reason = _BusFault(esf, 0);
    2634:	2000      	movs	r0, #0
    2636:	e7f0      	b.n	261a <_Fault+0x6a>
	PR_FAULT_INFO(
    2638:	480d      	ldr	r0, [pc, #52]	; (2670 <_Fault+0xc0>)
    263a:	e7d2      	b.n	25e2 <_Fault+0x32>
	PR_FAULT_INFO("***** %s %d) *****\n",
    263c:	4b0d      	ldr	r3, [pc, #52]	; (2674 <_Fault+0xc4>)
    263e:	490e      	ldr	r1, [pc, #56]	; (2678 <_Fault+0xc8>)
    2640:	480e      	ldr	r0, [pc, #56]	; (267c <_Fault+0xcc>)
    2642:	f1a4 0210 	sub.w	r2, r4, #16
    2646:	2c0f      	cmp	r4, #15
    2648:	bfc8      	it	gt
    264a:	4619      	movgt	r1, r3
    264c:	f7fe fb06 	bl	c5c <printk>
    2650:	e7cd      	b.n	25ee <_Fault+0x3e>
    2652:	bf00      	nop
    2654:	e000ed00 	.word	0xe000ed00
    2658:	00005492 	.word	0x00005492
    265c:	000054aa 	.word	0x000054aa
    2660:	000054cc 	.word	0x000054cc
    2664:	e000ed28 	.word	0xe000ed28
    2668:	e000ed29 	.word	0xe000ed29
    266c:	e000ed2a 	.word	0xe000ed2a
    2670:	000054ec 	.word	0x000054ec
    2674:	00005479 	.word	0x00005479
    2678:	00005464 	.word	0x00005464
    267c:	00005523 	.word	0x00005523

00002680 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2680:	4a02      	ldr	r2, [pc, #8]	; (268c <_FaultInit+0xc>)
    2682:	6953      	ldr	r3, [r2, #20]
    2684:	f043 0310 	orr.w	r3, r3, #16
    2688:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    268a:	4770      	bx	lr
    268c:	e000ed00 	.word	0xe000ed00

00002690 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2690:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2692:	2b00      	cmp	r3, #0
    2694:	db08      	blt.n	26a8 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2696:	2201      	movs	r2, #1
    2698:	f000 001f 	and.w	r0, r0, #31
    269c:	fa02 f000 	lsl.w	r0, r2, r0
    26a0:	095b      	lsrs	r3, r3, #5
    26a2:	4a02      	ldr	r2, [pc, #8]	; (26ac <_arch_irq_enable+0x1c>)
    26a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    26a8:	4770      	bx	lr
    26aa:	bf00      	nop
    26ac:	e000e100 	.word	0xe000e100

000026b0 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    26b0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    26b2:	2b00      	cmp	r3, #0
    26b4:	db0d      	blt.n	26d2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26b6:	2201      	movs	r2, #1
    26b8:	095b      	lsrs	r3, r3, #5
    26ba:	f000 001f 	and.w	r0, r0, #31
    26be:	fa02 f000 	lsl.w	r0, r2, r0
    26c2:	3320      	adds	r3, #32
    26c4:	4a03      	ldr	r2, [pc, #12]	; (26d4 <_arch_irq_disable+0x24>)
    26c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    26ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26ce:	f3bf 8f6f 	isb	sy
}
    26d2:	4770      	bx	lr
    26d4:	e000e100 	.word	0xe000e100

000026d8 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    26d8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    26da:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26dc:	bfa8      	it	ge
    26de:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    26e2:	f101 0101 	add.w	r1, r1, #1
    26e6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    26ea:	bfae      	itee	ge
    26ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26f0:	f000 000f 	andlt.w	r0, r0, #15
    26f4:	4b03      	ldrlt	r3, [pc, #12]	; (2704 <_irq_priority_set+0x2c>)
    26f6:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26f8:	bfac      	ite	ge
    26fa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26fe:	5419      	strblt	r1, [r3, r0]
}
    2700:	4770      	bx	lr
    2702:	bf00      	nop
    2704:	e000ed14 	.word	0xe000ed14

00002708 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    2708:	f000 b834 	b.w	2774 <__bus_fault>

0000270c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    270e:	460c      	mov	r4, r1
    2710:	4616      	mov	r6, r2
    2712:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    2714:	2204      	movs	r2, #4
    2716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2718:	9909      	ldr	r1, [sp, #36]	; 0x24
    271a:	4605      	mov	r5, r0
    271c:	f002 fa62 	bl	4be4 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2720:	f1a6 0120 	sub.w	r1, r6, #32
    2724:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    2726:	4a0c      	ldr	r2, [pc, #48]	; (2758 <_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2728:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    272c:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    272e:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    2732:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    2736:	e9c5 4616 	strd	r4, r6, [r5, #88]	; 0x58
    273a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    273c:	9a06      	ldr	r2, [sp, #24]
    273e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    2740:	9a07      	ldr	r2, [sp, #28]
    2742:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    2744:	9a08      	ldr	r2, [sp, #32]
    2746:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    2748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    274c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    274e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    2750:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    2752:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2756:	bf00      	nop
    2758:	00000905 	.word	0x00000905

0000275c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    275c:	4901      	ldr	r1, [pc, #4]	; (2764 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    275e:	2210      	movs	r2, #16
	str r2, [r1]
    2760:	600a      	str	r2, [r1, #0]
	bx lr
    2762:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    2764:	e000ed10 	.word	0xe000ed10

00002768 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    2768:	4040      	eors	r0, r0
	msr BASEPRI, r0
    276a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    276e:	bf30      	wfi

	bx lr
    2770:	4770      	bx	lr
    2772:	bf00      	nop

00002774 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    2774:	4040      	eors	r0, r0
	msr BASEPRI, r0
    2776:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    277a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 2798 <__bus_fault+0x24>
	ldr ip, [ip]
    277e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    2782:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    2786:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    2788:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    278c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    2790:	b500      	push	{lr}
	bl _Fault
    2792:	f7ff ff0d 	bl	25b0 <_Fault>

	pop {pc}
    2796:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    2798:	e000ed04 	.word	0xe000ed04

0000279c <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    279c:	b538      	push	{r3, r4, r5, lr}
    279e:	4604      	mov	r4, r0
    27a0:	460d      	mov	r5, r1
	LOG_PANIC();
    27a2:	f7fe fe55 	bl	1450 <log_panic>

	switch (reason) {
    27a6:	2c05      	cmp	r4, #5
    27a8:	d81a      	bhi.n	27e0 <_NanoFatalErrorHandler+0x44>
    27aa:	e8df f004 	tbb	[pc, r4]
    27ae:	1903      	.short	0x1903
    27b0:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    27b4:	480d      	ldr	r0, [pc, #52]	; (27ec <_NanoFatalErrorHandler+0x50>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    27b6:	f7fe fa51 	bl	c5c <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    27ba:	f002 f8e5 	bl	4988 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    27be:	69aa      	ldr	r2, [r5, #24]
    27c0:	4601      	mov	r1, r0
    27c2:	480b      	ldr	r0, [pc, #44]	; (27f0 <_NanoFatalErrorHandler+0x54>)
    27c4:	f7fe fa4a 	bl	c5c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    27c8:	4629      	mov	r1, r5
    27ca:	4620      	mov	r0, r4
}
    27cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    27d0:	f000 b81c 	b.w	280c <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    27d4:	4807      	ldr	r0, [pc, #28]	; (27f4 <_NanoFatalErrorHandler+0x58>)
    27d6:	e7ee      	b.n	27b6 <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
    27d8:	4807      	ldr	r0, [pc, #28]	; (27f8 <_NanoFatalErrorHandler+0x5c>)
    27da:	e7ec      	b.n	27b6 <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
    27dc:	4807      	ldr	r0, [pc, #28]	; (27fc <_NanoFatalErrorHandler+0x60>)
    27de:	e7ea      	b.n	27b6 <_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    27e0:	4621      	mov	r1, r4
    27e2:	4807      	ldr	r0, [pc, #28]	; (2800 <_NanoFatalErrorHandler+0x64>)
    27e4:	f7fe fa3a 	bl	c5c <printk>
		break;
    27e8:	e7e7      	b.n	27ba <_NanoFatalErrorHandler+0x1e>
    27ea:	bf00      	nop
    27ec:	000056c8 	.word	0x000056c8
    27f0:	00005766 	.word	0x00005766
    27f4:	000056e8 	.word	0x000056e8
    27f8:	0000570e 	.word	0x0000570e
    27fc:	00005728 	.word	0x00005728
    2800:	00005743 	.word	0x00005743

00002804 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    2804:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    2806:	6800      	ldr	r0, [r0, #0]
    2808:	f7ff bfc8 	b.w	279c <_NanoFatalErrorHandler>

0000280c <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    280c:	2805      	cmp	r0, #5
{
    280e:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    2810:	d00c      	beq.n	282c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    2812:	f002 f92f 	bl	4a74 <k_is_in_isr>
    2816:	b160      	cbz	r0, 2832 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    2818:	f002 f92c 	bl	4a74 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    281c:	490c      	ldr	r1, [pc, #48]	; (2850 <_SysFatalErrorHandler+0x44>)
    281e:	4b0d      	ldr	r3, [pc, #52]	; (2854 <_SysFatalErrorHandler+0x48>)
    2820:	2800      	cmp	r0, #0
    2822:	bf08      	it	eq
    2824:	4619      	moveq	r1, r3
    2826:	480c      	ldr	r0, [pc, #48]	; (2858 <_SysFatalErrorHandler+0x4c>)
    2828:	f7fe fa18 	bl	c5c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    282c:	f7ff ff9c 	bl	2768 <k_cpu_idle>
    2830:	e7fc      	b.n	282c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    2832:	f002 f92f 	bl	4a94 <_is_thread_essential>
    2836:	2800      	cmp	r0, #0
    2838:	d1ee      	bne.n	2818 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    283a:	4c08      	ldr	r4, [pc, #32]	; (285c <_SysFatalErrorHandler+0x50>)
    283c:	4808      	ldr	r0, [pc, #32]	; (2860 <_SysFatalErrorHandler+0x54>)
    283e:	68a1      	ldr	r1, [r4, #8]
    2840:	f7fe fa0c 	bl	c5c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    2844:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    2846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    284a:	f000 b80b 	b.w	2864 <_impl_k_thread_abort>
    284e:	bf00      	nop
    2850:	000057a2 	.word	0x000057a2
    2854:	000057a6 	.word	0x000057a6
    2858:	000057b7 	.word	0x000057b7
    285c:	2000078c 	.word	0x2000078c
    2860:	000057d7 	.word	0x000057d7

00002864 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    2864:	b538      	push	{r3, r4, r5, lr}
    2866:	4605      	mov	r5, r0
	__asm__ volatile(
    2868:	f04f 0320 	mov.w	r3, #32
    286c:	f3ef 8411 	mrs	r4, BASEPRI
    2870:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    2874:	f002 f948 	bl	4b08 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    2878:	4b0a      	ldr	r3, [pc, #40]	; (28a4 <_impl_k_thread_abort+0x40>)
    287a:	689b      	ldr	r3, [r3, #8]
    287c:	42ab      	cmp	r3, r5
    287e:	d10b      	bne.n	2898 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2880:	4b09      	ldr	r3, [pc, #36]	; (28a8 <_impl_k_thread_abort+0x44>)
    2882:	685a      	ldr	r2, [r3, #4]
    2884:	f3c2 0208 	ubfx	r2, r2, #0, #9
    2888:	b912      	cbnz	r2, 2890 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    288a:	4620      	mov	r0, r4
    288c:	f7ff fd72 	bl	2374 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2890:	685a      	ldr	r2, [r3, #4]
    2892:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2896:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    2898:	4620      	mov	r0, r4
}
    289a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    289e:	f001 be9d 	b.w	45dc <_reschedule>
    28a2:	bf00      	nop
    28a4:	2000078c 	.word	0x2000078c
    28a8:	e000ed00 	.word	0xe000ed00

000028ac <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    28ac:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    28ae:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    28b0:	4a0b      	ldr	r2, [pc, #44]	; (28e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    28b2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    28b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    28b6:	bf1e      	ittt	ne
	movne	r1, #0
    28b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    28ba:	6211      	strne	r1, [r2, #32]
		blxne	_sys_power_save_idle_exit
    28bc:	f001 fc06 	blne	40cc <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    28c0:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    28c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    28c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    28ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    28ce:	4905      	ldr	r1, [pc, #20]	; (28e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    28d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    28d2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    28d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    28d6:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    28da:	f7ff bd31 	b.w	2340 <_ExcExit>
    28de:	0000      	.short	0x0000
	ldr r2, =_kernel
    28e0:	2000078c 	.word	0x2000078c
	ldr r1, =_sw_isr_table
    28e4:	000000dc 	.word	0x000000dc

000028e8 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    28e8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    28ea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    28ee:	4806      	ldr	r0, [pc, #24]	; (2908 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    28f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    28f4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    28f6:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    28fa:	2002      	movs	r0, #2
    msr CONTROL, r0
    28fc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    2900:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    2904:	f000 f806 	bl	2914 <_PrepC>
    ldr r0, =_interrupt_stack
    2908:	200014a0 	.word	0x200014a0

0000290c <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    290c:	bf30      	wfi
    b _SysNmiOnReset
    290e:	f7ff bffd 	b.w	290c <_SysNmiOnReset>
    2912:	bf00      	nop

00002914 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    2914:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2916:	4b07      	ldr	r3, [pc, #28]	; (2934 <_PrepC+0x20>)
    2918:	4a07      	ldr	r2, [pc, #28]	; (2938 <_PrepC+0x24>)
    291a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    291e:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2924:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    2928:	f001 fbea 	bl	4100 <_bss_zero>
	_data_copy();
    292c:	f001 fbf2 	bl	4114 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    2930:	f001 fc14 	bl	415c <_Cstart>
    2934:	00000000 	.word	0x00000000
    2938:	e000ed00 	.word	0xe000ed00

0000293c <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    293c:	b508      	push	{r3, lr}
	handler();
    293e:	f7ff ffe5 	bl	290c <_SysNmiOnReset>
	_ExcExit();
}
    2942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    2946:	f7ff bcfb 	b.w	2340 <_ExcExit>
	...

0000294c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    294c:	4b03      	ldr	r3, [pc, #12]	; (295c <arm_core_mpu_enable+0x10>)
    294e:	2205      	movs	r2, #5
    2950:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2952:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2956:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    295a:	4770      	bx	lr
    295c:	e000ed90 	.word	0xe000ed90

00002960 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    2960:	4a11      	ldr	r2, [pc, #68]	; (29a8 <arm_mpu_init+0x48>)
{
    2962:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    2964:	6814      	ldr	r4, [r2, #0]
    2966:	2c08      	cmp	r4, #8
    2968:	d81b      	bhi.n	29a2 <arm_mpu_init+0x42>
	MPU->CTRL = 0;
    296a:	4910      	ldr	r1, [pc, #64]	; (29ac <arm_mpu_init+0x4c>)
    296c:	6850      	ldr	r0, [r2, #4]
    296e:	2300      	movs	r3, #0
    2970:	604b      	str	r3, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    2972:	429c      	cmp	r4, r3
    2974:	f100 000c 	add.w	r0, r0, #12
    2978:	d103      	bne.n	2982 <arm_mpu_init+0x22>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    297a:	f7ff ffe7 	bl	294c <arm_core_mpu_enable>
    297e:	2000      	movs	r0, #0
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    2980:	bd10      	pop	{r4, pc}
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    2982:	608b      	str	r3, [r1, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2984:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    2988:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    298c:	f042 0210 	orr.w	r2, r2, #16
    2990:	431a      	orrs	r2, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2992:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2994:	f850 2c04 	ldr.w	r2, [r0, #-4]
    2998:	f042 0201 	orr.w	r2, r2, #1
    299c:	610a      	str	r2, [r1, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    299e:	3301      	adds	r3, #1
    29a0:	e7e7      	b.n	2972 <arm_mpu_init+0x12>
		return -1;
    29a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29a6:	e7eb      	b.n	2980 <arm_mpu_init+0x20>
    29a8:	20001ca4 	.word	0x20001ca4
    29ac:	e000ed90 	.word	0xe000ed90

000029b0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    29b0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    29b2:	4603      	mov	r3, r0
    29b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    29b8:	b90a      	cbnz	r2, 29be <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    29ba:	701a      	strb	r2, [r3, #0]

	return dest;
}
    29bc:	4770      	bx	lr
		*d = *s;
    29be:	f803 2b01 	strb.w	r2, [r3], #1
    29c2:	e7f7      	b.n	29b4 <strcpy+0x4>

000029c4 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    29c4:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    29c6:	7802      	ldrb	r2, [r0, #0]
    29c8:	428a      	cmp	r2, r1
    29ca:	4603      	mov	r3, r0
    29cc:	f100 0001 	add.w	r0, r0, #1
    29d0:	d004      	beq.n	29dc <strchr+0x18>
    29d2:	2a00      	cmp	r2, #0
    29d4:	d1f7      	bne.n	29c6 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    29d6:	2900      	cmp	r1, #0
    29d8:	bf18      	it	ne
    29da:	2300      	movne	r3, #0
}
    29dc:	4618      	mov	r0, r3
    29de:	4770      	bx	lr

000029e0 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    29e0:	3801      	subs	r0, #1
    29e2:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    29e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    29e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    29ec:	4293      	cmp	r3, r2
    29ee:	d102      	bne.n	29f6 <strcmp+0x16>
    29f0:	2b00      	cmp	r3, #0
    29f2:	d1f7      	bne.n	29e4 <strcmp+0x4>
    29f4:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    29f6:	1a98      	subs	r0, r3, r2
    29f8:	4770      	bx	lr

000029fa <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    29fa:	1a43      	subs	r3, r0, r1
    29fc:	4293      	cmp	r3, r2
{
    29fe:	b510      	push	{r4, lr}
    2a00:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    2a04:	d308      	bcc.n	2a18 <memmove+0x1e>
    2a06:	3901      	subs	r1, #1
	char *dest = d;
    2a08:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    2a0a:	429a      	cmp	r2, r3
    2a0c:	d00b      	beq.n	2a26 <memmove+0x2c>
			*dest = *src;
    2a0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2a12:	f802 4b01 	strb.w	r4, [r2], #1
    2a16:	e7f8      	b.n	2a0a <memmove+0x10>
    2a18:	440a      	add	r2, r1
			dest[n] = src[n];
    2a1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    2a1e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    2a22:	428a      	cmp	r2, r1
    2a24:	d1f9      	bne.n	2a1a <memmove+0x20>
			n--;
		}
	}

	return d;
}
    2a26:	bd10      	pop	{r4, pc}

00002a28 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    2a28:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    2a2a:	ea81 0400 	eor.w	r4, r1, r0
    2a2e:	07a5      	lsls	r5, r4, #30
    2a30:	4603      	mov	r3, r0
    2a32:	d00b      	beq.n	2a4c <memcpy+0x24>
    2a34:	3b01      	subs	r3, #1
    2a36:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2a38:	4291      	cmp	r1, r2
    2a3a:	d11d      	bne.n	2a78 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    2a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    2a3e:	2a00      	cmp	r2, #0
    2a40:	d0fc      	beq.n	2a3c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    2a42:	f811 4b01 	ldrb.w	r4, [r1], #1
    2a46:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    2a4a:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    2a4c:	079c      	lsls	r4, r3, #30
    2a4e:	d1f6      	bne.n	2a3e <memcpy+0x16>
    2a50:	1f1d      	subs	r5, r3, #4
    2a52:	460c      	mov	r4, r1
    2a54:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    2a56:	1b3e      	subs	r6, r7, r4
    2a58:	2e03      	cmp	r6, #3
    2a5a:	d808      	bhi.n	2a6e <memcpy+0x46>
    2a5c:	0894      	lsrs	r4, r2, #2
    2a5e:	f06f 0503 	mvn.w	r5, #3
    2a62:	fb05 2204 	mla	r2, r5, r4, r2
    2a66:	00a4      	lsls	r4, r4, #2
    2a68:	4423      	add	r3, r4
    2a6a:	4421      	add	r1, r4
    2a6c:	e7e2      	b.n	2a34 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    2a6e:	f854 6b04 	ldr.w	r6, [r4], #4
    2a72:	f845 6f04 	str.w	r6, [r5, #4]!
    2a76:	e7ee      	b.n	2a56 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    2a78:	f811 4b01 	ldrb.w	r4, [r1], #1
    2a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
    2a80:	e7da      	b.n	2a38 <memcpy+0x10>

00002a82 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    2a82:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    2a84:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    2a86:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    2a88:	079c      	lsls	r4, r3, #30
    2a8a:	d10f      	bne.n	2aac <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    2a8c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    2a90:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    2a94:	461d      	mov	r5, r3
    2a96:	189f      	adds	r7, r3, r2
    2a98:	1b7e      	subs	r6, r7, r5
    2a9a:	2e03      	cmp	r6, #3
    2a9c:	d80c      	bhi.n	2ab8 <memset+0x36>
    2a9e:	0894      	lsrs	r4, r2, #2
    2aa0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2aa4:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    2aa6:	429c      	cmp	r4, r3
    2aa8:	d109      	bne.n	2abe <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    2aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    2aac:	2a00      	cmp	r2, #0
    2aae:	d0fc      	beq.n	2aaa <memset+0x28>
		*(d_byte++) = c_byte;
    2ab0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    2ab4:	3a01      	subs	r2, #1
    2ab6:	e7e7      	b.n	2a88 <memset+0x6>
		*(d_word++) = c_word;
    2ab8:	f845 4b04 	str.w	r4, [r5], #4
    2abc:	e7ec      	b.n	2a98 <memset+0x16>
		*(d_byte++) = c_byte;
    2abe:	f804 1b01 	strb.w	r1, [r4], #1
    2ac2:	e7f0      	b.n	2aa6 <memset+0x24>

00002ac4 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    2ac4:	b570      	push	{r4, r5, r6, lr}
    2ac6:	4604      	mov	r4, r0
	char *buf0 = buf;

	do {
		int d = n % base;
    2ac8:	fbb1 f6f2 	udiv	r6, r1, r2
    2acc:	fb02 1116 	mls	r1, r2, r6, r1

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    2ad0:	b2cd      	uxtb	r5, r1
    2ad2:	2909      	cmp	r1, #9
    2ad4:	bf8c      	ite	hi
    2ad6:	2127      	movhi	r1, #39	; 0x27
    2ad8:	2100      	movls	r1, #0
    2ada:	3530      	adds	r5, #48	; 0x30
    2adc:	4429      	add	r1, r5
    2ade:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
    2ae2:	4631      	mov	r1, r6
    2ae4:	2e00      	cmp	r6, #0
    2ae6:	d1ef      	bne.n	2ac8 <_to_x+0x4>
		*end++ = '0';
    2ae8:	2130      	movs	r1, #48	; 0x30
    2aea:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
    2aec:	4293      	cmp	r3, r2
    2aee:	dc07      	bgt.n	2b00 <_to_x+0x3c>
	*end = 0;
    2af0:	4623      	mov	r3, r4
    2af2:	2100      	movs	r1, #0
    2af4:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
    2af8:	4283      	cmp	r3, r0
    2afa:	d804      	bhi.n	2b06 <_to_x+0x42>
	return _reverse_and_pad(buf0, buf, minlen);
}
    2afc:	4610      	mov	r0, r2
    2afe:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
    2b00:	f804 1b01 	strb.w	r1, [r4], #1
    2b04:	e7f1      	b.n	2aea <_to_x+0x26>
		char tmp = *end;
    2b06:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
    2b08:	7804      	ldrb	r4, [r0, #0]
    2b0a:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
    2b0e:	f800 1b01 	strb.w	r1, [r0], #1
    2b12:	e7f1      	b.n	2af8 <_to_x+0x34>

00002b14 <_rlrshift>:
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
    2b14:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    2b18:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
    2b1c:	ea5f 0c53 	movs.w	ip, r3, lsr #1
    2b20:	ea4f 0b32 	mov.w	fp, r2, rrx
    2b24:	f002 0401 	and.w	r4, r2, #1
    2b28:	eb1b 0204 	adds.w	r2, fp, r4
    2b2c:	f04f 0500 	mov.w	r5, #0
    2b30:	eb4c 0305 	adc.w	r3, ip, r5
    2b34:	e9c0 2300 	strd	r2, r3, [r0]
}
    2b38:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00002b3c <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
    2b3c:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    2b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5) << shifts[i];
    2b44:	2105      	movs	r1, #5
	rem += 2;
    2b46:	f112 0802 	adds.w	r8, r2, #2
		rem -= q * 5;
    2b4a:	f04f 0600 	mov.w	r6, #0
	rem += 2;
    2b4e:	f143 0900 	adc.w	r9, r3, #0
		rem -= q * 5;
    2b52:	ebb8 0806 	subs.w	r8, r8, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    2b56:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5;
    2b5a:	fb01 f705 	mul.w	r7, r1, r5
    2b5e:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
    2b62:	ea4f 06d8 	mov.w	r6, r8, lsr #3
    2b66:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5) << shifts[i];
    2b6a:	2400      	movs	r4, #0
    2b6c:	fbb6 fcf1 	udiv	ip, r6, r1
    2b70:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		quot += q;
    2b74:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    2b76:	ea4f 775c 	mov.w	r7, ip, lsr #29
		rem -= q * 5;
    2b7a:	46c2      	mov	sl, r8
		quot += q;
    2b7c:	eb45 0307 	adc.w	r3, r5, r7
    2b80:	4614      	mov	r4, r2
		rem -= q * 5;
    2b82:	fba6 8901 	umull	r8, r9, r6, r1
    2b86:	ebba 0208 	subs.w	r2, sl, r8
		quot += q;
    2b8a:	461d      	mov	r5, r3
		q = (uint64_t)(hi / 5) << shifts[i];
    2b8c:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
    2b90:	18a4      	adds	r4, r4, r2
    2b92:	f145 0500 	adc.w	r5, r5, #0
	}

	*v = quot;
    2b96:	e9c0 4500 	strd	r4, r5, [r0]
}
    2b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002b9e <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
    2b9e:	680b      	ldr	r3, [r1, #0]
    2ba0:	2b00      	cmp	r3, #0
{
    2ba2:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
    2ba6:	dd13      	ble.n	2bd0 <_get_digit+0x32>
		*digit_count -= 1;
		*fr = *fr * 10;
    2ba8:	6802      	ldr	r2, [r0, #0]
    2baa:	6844      	ldr	r4, [r0, #4]
		*digit_count -= 1;
    2bac:	3b01      	subs	r3, #1
    2bae:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
    2bb0:	210a      	movs	r1, #10
    2bb2:	fba2 bc01 	umull	fp, ip, r2, r1
    2bb6:	fb01 cc04 	mla	ip, r1, r4, ip
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    2bba:	465a      	mov	r2, fp
    2bbc:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
    2bc0:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    2bc4:	ea4f 711c 	mov.w	r1, ip, lsr #28
    2bc8:	3130      	adds	r1, #48	; 0x30
	} else
		rval = '0';
	return (char) (rval);
}
    2bca:	b2c8      	uxtb	r0, r1
    2bcc:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
    2bd0:	2130      	movs	r1, #48	; 0x30
    2bd2:	e7fa      	b.n	2bca <_get_digit+0x2c>

00002bd4 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    2bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bd8:	b0c9      	sub	sp, #292	; 0x124
    2bda:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    2bde:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    2be0:	2300      	movs	r3, #0
{
    2be2:	4693      	mov	fp, r2
	count = 0;
    2be4:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
    2be6:	f89b 0000 	ldrb.w	r0, [fp]
    2bea:	f10b 0501 	add.w	r5, fp, #1
    2bee:	b148      	cbz	r0, 2c04 <_prf+0x30>
		if (c != '%') {
    2bf0:	2825      	cmp	r0, #37	; 0x25
    2bf2:	d07b      	beq.n	2cec <_prf+0x118>
			if ((*func) (c, dest) == EOF) {
    2bf4:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    2bf8:	4798      	blx	r3
    2bfa:	3001      	adds	r0, #1
    2bfc:	d106      	bne.n	2c0c <_prf+0x38>
				return EOF;
    2bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c02:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    2c04:	9804      	ldr	r0, [sp, #16]
    2c06:	b049      	add	sp, #292	; 0x124
    2c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
    2c0c:	9b04      	ldr	r3, [sp, #16]
    2c0e:	3301      	adds	r3, #1
    2c10:	e9cd 3704 	strd	r3, r7, [sp, #16]
	while ((c = *format++)) {
    2c14:	46ab      	mov	fp, r5
			if (c >= MAXFLD + 1)
    2c16:	9f05      	ldr	r7, [sp, #20]
    2c18:	e7e5      	b.n	2be6 <_prf+0x12>
				switch (c) {
    2c1a:	2c23      	cmp	r4, #35	; 0x23
    2c1c:	d05f      	beq.n	2cde <_prf+0x10a>
    2c1e:	d854      	bhi.n	2cca <_prf+0xf6>
    2c20:	2c00      	cmp	r4, #0
    2c22:	d0ef      	beq.n	2c04 <_prf+0x30>
					fspace = true;
    2c24:	2c20      	cmp	r4, #32
    2c26:	bf08      	it	eq
    2c28:	f04f 0901 	moveq.w	r9, #1
					fplus = true;
    2c2c:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    2c2e:	46ab      	mov	fp, r5
    2c30:	48bf      	ldr	r0, [pc, #764]	; (2f30 <_prf+0x35c>)
    2c32:	f81b 4b01 	ldrb.w	r4, [fp], #1
    2c36:	4621      	mov	r1, r4
    2c38:	f7ff fec4 	bl	29c4 <strchr>
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d1ec      	bne.n	2c1a <_prf+0x46>
			if (c == '*') {
    2c40:	2c2a      	cmp	r4, #42	; 0x2a
    2c42:	d15b      	bne.n	2cfc <_prf+0x128>
				width = (int32_t) va_arg(vargs, int32_t);
    2c44:	683a      	ldr	r2, [r7, #0]
    2c46:	9203      	str	r2, [sp, #12]
				if (width < 0) {
    2c48:	2a00      	cmp	r2, #0
					width = -width;
    2c4a:	bfb8      	it	lt
    2c4c:	4252      	neglt	r2, r2
				width = (int32_t) va_arg(vargs, int32_t);
    2c4e:	f107 0304 	add.w	r3, r7, #4
					width = -width;
    2c52:	bfb8      	it	lt
    2c54:	9203      	strlt	r2, [sp, #12]
				c = *format++;
    2c56:	786c      	ldrb	r4, [r5, #1]
					fminus = true;
    2c58:	bfbc      	itt	lt
    2c5a:	2201      	movlt	r2, #1
    2c5c:	9206      	strlt	r2, [sp, #24]
				c = *format++;
    2c5e:	f105 0b02 	add.w	fp, r5, #2
				width = (int32_t) va_arg(vargs, int32_t);
    2c62:	461f      	mov	r7, r3
				width = MAXFLD;
    2c64:	9b03      	ldr	r3, [sp, #12]
    2c66:	2bc9      	cmp	r3, #201	; 0xc9
    2c68:	bf28      	it	cs
    2c6a:	23c8      	movcs	r3, #200	; 0xc8
    2c6c:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    2c6e:	2c2e      	cmp	r4, #46	; 0x2e
    2c70:	d169      	bne.n	2d46 <_prf+0x172>
				if (c == '*') {
    2c72:	f89b 3000 	ldrb.w	r3, [fp]
    2c76:	2b2a      	cmp	r3, #42	; 0x2a
    2c78:	d162      	bne.n	2d40 <_prf+0x16c>
					precision = (int32_t)
    2c7a:	683d      	ldr	r5, [r7, #0]
				c = *format++;
    2c7c:	f10b 0b01 	add.w	fp, fp, #1
					precision = (int32_t)
    2c80:	3704      	adds	r7, #4
					precision = -1;
    2c82:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    2c84:	f89b 4000 	ldrb.w	r4, [fp]
					precision = -1;
    2c88:	bfa8      	it	ge
    2c8a:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
				c = *format++;
    2c8e:	f10b 0b01 	add.w	fp, fp, #1
			if (strchr("hlLz", c) != NULL) {
    2c92:	4621      	mov	r1, r4
    2c94:	48a7      	ldr	r0, [pc, #668]	; (2f34 <_prf+0x360>)
    2c96:	f7ff fe95 	bl	29c4 <strchr>
    2c9a:	b118      	cbz	r0, 2ca4 <_prf+0xd0>
				c = *format++;
    2c9c:	f89b 4000 	ldrb.w	r4, [fp]
    2ca0:	f10b 0b01 	add.w	fp, fp, #1
			switch (c) {
    2ca4:	2c67      	cmp	r4, #103	; 0x67
    2ca6:	dc7c      	bgt.n	2da2 <_prf+0x1ce>
    2ca8:	2c65      	cmp	r4, #101	; 0x65
    2caa:	f280 80e0 	bge.w	2e6e <_prf+0x29a>
    2cae:	2c47      	cmp	r4, #71	; 0x47
    2cb0:	dc4c      	bgt.n	2d4c <_prf+0x178>
    2cb2:	2c45      	cmp	r4, #69	; 0x45
    2cb4:	f280 80db 	bge.w	2e6e <_prf+0x29a>
    2cb8:	2c00      	cmp	r4, #0
    2cba:	d0a3      	beq.n	2c04 <_prf+0x30>
    2cbc:	2c25      	cmp	r4, #37	; 0x25
    2cbe:	f000 8335 	beq.w	332c <_prf+0x758>
			if (c >= MAXFLD + 1)
    2cc2:	2cc8      	cmp	r4, #200	; 0xc8
    2cc4:	f340 833c 	ble.w	3340 <_prf+0x76c>
    2cc8:	e799      	b.n	2bfe <_prf+0x2a>
				switch (c) {
    2cca:	2c2d      	cmp	r4, #45	; 0x2d
    2ccc:	d00b      	beq.n	2ce6 <_prf+0x112>
    2cce:	2c30      	cmp	r4, #48	; 0x30
    2cd0:	d007      	beq.n	2ce2 <_prf+0x10e>
					fplus = true;
    2cd2:	2c2b      	cmp	r4, #43	; 0x2b
    2cd4:	9b07      	ldr	r3, [sp, #28]
    2cd6:	bf08      	it	eq
    2cd8:	2301      	moveq	r3, #1
    2cda:	9307      	str	r3, [sp, #28]
    2cdc:	e7a6      	b.n	2c2c <_prf+0x58>
					falt = true;
    2cde:	2601      	movs	r6, #1
					break;
    2ce0:	e7a4      	b.n	2c2c <_prf+0x58>
					pad = '0';
    2ce2:	9402      	str	r4, [sp, #8]
					break;
    2ce4:	e7a2      	b.n	2c2c <_prf+0x58>
					fminus = true;
    2ce6:	2301      	movs	r3, #1
    2ce8:	9306      	str	r3, [sp, #24]
    2cea:	e79f      	b.n	2c2c <_prf+0x58>
			fminus = fplus = fspace = falt = false;
    2cec:	f04f 0900 	mov.w	r9, #0
			pad = ' ';		/* Default pad character    */
    2cf0:	2320      	movs	r3, #32
    2cf2:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    2cf4:	e9cd 9906 	strd	r9, r9, [sp, #24]
    2cf8:	464e      	mov	r6, r9
    2cfa:	e798      	b.n	2c2e <_prf+0x5a>
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    2cfc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c))
    2d00:	2b09      	cmp	r3, #9
				width = 0;
    2d02:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c))
    2d04:	d8b3      	bhi.n	2c6e <_prf+0x9a>
		i = 10 * i + *p++ - '0';
    2d06:	220a      	movs	r2, #10
	while (isdigit(((int) *p)))
    2d08:	46ab      	mov	fp, r5
    2d0a:	f81b 0b01 	ldrb.w	r0, [fp], #1
    2d0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2d12:	2b09      	cmp	r3, #9
    2d14:	4604      	mov	r4, r0
    2d16:	d8a5      	bhi.n	2c64 <_prf+0x90>
		i = 10 * i + *p++ - '0';
    2d18:	9b03      	ldr	r3, [sp, #12]
    2d1a:	fb02 0003 	mla	r0, r2, r3, r0
    2d1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2d22:	9303      	str	r3, [sp, #12]
    2d24:	465d      	mov	r5, fp
    2d26:	e7ef      	b.n	2d08 <_prf+0x134>
    2d28:	fb00 3505 	mla	r5, r0, r5, r3
    2d2c:	3d30      	subs	r5, #48	; 0x30
    2d2e:	4693      	mov	fp, r2
	while (isdigit(((int) *p)))
    2d30:	465a      	mov	r2, fp
    2d32:	f812 3b01 	ldrb.w	r3, [r2], #1
    2d36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    2d3a:	2909      	cmp	r1, #9
    2d3c:	d9f4      	bls.n	2d28 <_prf+0x154>
    2d3e:	e7a0      	b.n	2c82 <_prf+0xae>
	i = 0;
    2d40:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    2d42:	200a      	movs	r0, #10
    2d44:	e7f4      	b.n	2d30 <_prf+0x15c>
			precision = -1;	/* No precision specified   */
    2d46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2d4a:	e7a2      	b.n	2c92 <_prf+0xbe>
			switch (c) {
    2d4c:	2c63      	cmp	r4, #99	; 0x63
    2d4e:	d06f      	beq.n	2e30 <_prf+0x25c>
    2d50:	dc32      	bgt.n	2db8 <_prf+0x1e4>
    2d52:	2c58      	cmp	r4, #88	; 0x58
    2d54:	d1b5      	bne.n	2cc2 <_prf+0xee>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    2d56:	1d3b      	adds	r3, r7, #4
    2d58:	9305      	str	r3, [sp, #20]
    2d5a:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    2d5c:	2e00      	cmp	r6, #0
    2d5e:	f000 82dc 	beq.w	331a <_prf+0x746>
		*buf++ = '0';
    2d62:	f647 0330 	movw	r3, #30768	; 0x7830
    2d66:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
		*buf++ = 'x';
    2d6a:	f10d 0756 	add.w	r7, sp, #86	; 0x56
	len = _to_x(buf, value, 16, precision);
    2d6e:	462b      	mov	r3, r5
    2d70:	2210      	movs	r2, #16
    2d72:	4638      	mov	r0, r7
    2d74:	f7ff fea6 	bl	2ac4 <_to_x>
	if (prefix == 'X') {
    2d78:	2c58      	cmp	r4, #88	; 0x58
    2d7a:	d106      	bne.n	2d8a <_prf+0x1b6>
    2d7c:	f10d 0253 	add.w	r2, sp, #83	; 0x53
	for (/**/; *buf; buf++) {
    2d80:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2d84:	2b00      	cmp	r3, #0
    2d86:	f040 82ca 	bne.w	331e <_prf+0x74a>
	return len + (buf - buf0);
    2d8a:	f10d 0854 	add.w	r8, sp, #84	; 0x54
			prefix = 0;
    2d8e:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
    2d90:	eba7 0808 	sub.w	r8, r7, r8
    2d94:	4440      	add	r0, r8
			prefix = 0;
    2d96:	bf14      	ite	ne
    2d98:	f04f 0902 	movne.w	r9, #2
    2d9c:	f04f 0900 	moveq.w	r9, #0
    2da0:	e029      	b.n	2df6 <_prf+0x222>
			switch (c) {
    2da2:	2c70      	cmp	r4, #112	; 0x70
    2da4:	f000 8294 	beq.w	32d0 <_prf+0x6fc>
    2da8:	dc2b      	bgt.n	2e02 <_prf+0x22e>
    2daa:	2c6e      	cmp	r4, #110	; 0x6e
    2dac:	f000 8253 	beq.w	3256 <_prf+0x682>
    2db0:	f300 8257 	bgt.w	3262 <_prf+0x68e>
    2db4:	2c69      	cmp	r4, #105	; 0x69
    2db6:	d184      	bne.n	2cc2 <_prf+0xee>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    2db8:	683c      	ldr	r4, [r7, #0]
    2dba:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
    2dbc:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    2dbe:	9305      	str	r3, [sp, #20]
	if (value < 0) {
    2dc0:	da42      	bge.n	2e48 <_prf+0x274>
		*buf++ = '-';
    2dc2:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000)
    2dc4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    2dc8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (value != 0x80000000)
    2dcc:	d041      	beq.n	2e52 <_prf+0x27e>
			value = -value;
    2dce:	4261      	negs	r1, r4
		*buf++ = ' ';
    2dd0:	f10d 0855 	add.w	r8, sp, #85	; 0x55
	return _to_x(buf, value, 10, precision);
    2dd4:	462b      	mov	r3, r5
    2dd6:	4640      	mov	r0, r8
    2dd8:	220a      	movs	r2, #10
    2dda:	f7ff fe73 	bl	2ac4 <_to_x>
				if (fplus || fspace || (int32_temp < 0))
    2dde:	9b07      	ldr	r3, [sp, #28]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    2de0:	4480      	add	r8, r0
    2de2:	a815      	add	r0, sp, #84	; 0x54
    2de4:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (int32_temp < 0))
    2de8:	2b00      	cmp	r3, #0
    2dea:	d13d      	bne.n	2e68 <_prf+0x294>
    2dec:	f1b9 0f00 	cmp.w	r9, #0
    2df0:	d101      	bne.n	2df6 <_prf+0x222>
    2df2:	ea4f 79d4 	mov.w	r9, r4, lsr #31
			prefix = 0;
    2df6:	3501      	adds	r5, #1
    2df8:	9b02      	ldr	r3, [sp, #8]
    2dfa:	bf18      	it	ne
    2dfc:	2320      	movne	r3, #32
    2dfe:	9302      	str	r3, [sp, #8]
    2e00:	e080      	b.n	2f04 <_prf+0x330>
			switch (c) {
    2e02:	2c75      	cmp	r4, #117	; 0x75
    2e04:	f000 8280 	beq.w	3308 <_prf+0x734>
    2e08:	2c78      	cmp	r4, #120	; 0x78
    2e0a:	d0a4      	beq.n	2d56 <_prf+0x182>
    2e0c:	2c73      	cmp	r4, #115	; 0x73
    2e0e:	f47f af58 	bne.w	2cc2 <_prf+0xee>
				cptr_temp = (char *) va_arg(vargs, char *);
    2e12:	1d3b      	adds	r3, r7, #4
    2e14:	6839      	ldr	r1, [r7, #0]
    2e16:	9305      	str	r3, [sp, #20]
				for (c = 0; c < MAXFLD; c++) {
    2e18:	2600      	movs	r6, #0
					if (cptr_temp[c] == '\0') {
    2e1a:	5d8b      	ldrb	r3, [r1, r6]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	f000 8266 	beq.w	32ee <_prf+0x71a>
				for (c = 0; c < MAXFLD; c++) {
    2e22:	3601      	adds	r6, #1
    2e24:	2ec8      	cmp	r6, #200	; 0xc8
    2e26:	d1f8      	bne.n	2e1a <_prf+0x246>
				if ((precision >= 0) && (precision < c))
    2e28:	2d00      	cmp	r5, #0
    2e2a:	f280 8262 	bge.w	32f2 <_prf+0x71e>
    2e2e:	e266      	b.n	32fe <_prf+0x72a>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    2e30:	1d3b      	adds	r3, r7, #4
    2e32:	9305      	str	r3, [sp, #20]
    2e34:	683b      	ldr	r3, [r7, #0]
    2e36:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				buf[1] = '\0';
    2e3a:	2300      	movs	r3, #0
    2e3c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				c = 1;
    2e40:	2601      	movs	r6, #1
					prefix = 2;
    2e42:	f04f 0900 	mov.w	r9, #0
    2e46:	e21c      	b.n	3282 <_prf+0x6ae>
	} else if (fplus)
    2e48:	9b07      	ldr	r3, [sp, #28]
    2e4a:	b123      	cbz	r3, 2e56 <_prf+0x282>
		*buf++ = '+';
    2e4c:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    2e4e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    2e52:	4621      	mov	r1, r4
    2e54:	e7bc      	b.n	2dd0 <_prf+0x1fc>
	else if (fspace)
    2e56:	f1b9 0f00 	cmp.w	r9, #0
    2e5a:	d001      	beq.n	2e60 <_prf+0x28c>
		*buf++ = ' ';
    2e5c:	2320      	movs	r3, #32
    2e5e:	e7f6      	b.n	2e4e <_prf+0x27a>
	else if (fspace)
    2e60:	4621      	mov	r1, r4
    2e62:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    2e66:	e7b5      	b.n	2dd4 <_prf+0x200>
					prefix = 1;
    2e68:	f8dd 901c 	ldr.w	r9, [sp, #28]
    2e6c:	e7c3      	b.n	2df6 <_prf+0x222>
				u.d = (double) va_arg(vargs, double);
    2e6e:	3707      	adds	r7, #7
    2e70:	f027 0707 	bic.w	r7, r7, #7
    2e74:	f107 0308 	add.w	r3, r7, #8
				double_temp = u.i;
    2e78:	e9d7 c700 	ldrd	ip, r7, [r7]
				u.d = (double) va_arg(vargs, double);
    2e7c:	9305      	str	r3, [sp, #20]
	fract = (double_temp << 11) & ~HIGHBIT64;
    2e7e:	02fb      	lsls	r3, r7, #11
    2e80:	ea43 535c 	orr.w	r3, r3, ip, lsr #21
    2e84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    2e88:	ea4f 22cc 	mov.w	r2, ip, lsl #11
    2e8c:	460b      	mov	r3, r1
	exp = double_temp >> 52 & 0x7ff;
    2e8e:	f3c7 580a 	ubfx	r8, r7, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    2e92:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (exp == 0x7ff) {
    2e96:	f240 73ff 	movw	r3, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
    2e9a:	4610      	mov	r0, r2
	if (exp == 0x7ff) {
    2e9c:	4598      	cmp	r8, r3
	fract = (double_temp << 11) & ~HIGHBIT64;
    2e9e:	e9cd 0100 	strd	r0, r1, [sp]
	sign = !!(double_temp & HIGHBIT64);
    2ea2:	4660      	mov	r0, ip
	if (exp == 0x7ff) {
    2ea4:	d148      	bne.n	2f38 <_prf+0x364>
		if (sign) {
    2ea6:	2800      	cmp	r0, #0
		if (!fract) {
    2ea8:	e9dd 1200 	ldrd	r1, r2, [sp]
		if (sign) {
    2eac:	f177 0300 	sbcs.w	r3, r7, #0
			*buf++ = '-';
    2eb0:	bfb8      	it	lt
    2eb2:	232d      	movlt	r3, #45	; 0x2d
    2eb4:	a815      	add	r0, sp, #84	; 0x54
    2eb6:	bfb6      	itet	lt
    2eb8:	f88d 3054 	strblt.w	r3, [sp, #84]	; 0x54
		if (sign) {
    2ebc:	4603      	movge	r3, r0
			*buf++ = '-';
    2ebe:	f10d 0355 	addlt.w	r3, sp, #85	; 0x55
		if (!fract) {
    2ec2:	430a      	orrs	r2, r1
    2ec4:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    2ec8:	f103 0803 	add.w	r8, r3, #3
    2ecc:	d125      	bne.n	2f1a <_prf+0x346>
			if (isupper(c)) {
    2ece:	2c19      	cmp	r4, #25
    2ed0:	d81d      	bhi.n	2f0e <_prf+0x33a>
				*buf++ = 'I';
    2ed2:	2249      	movs	r2, #73	; 0x49
    2ed4:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    2ed6:	224e      	movs	r2, #78	; 0x4e
    2ed8:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    2eda:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    2edc:	709a      	strb	r2, [r3, #2]
		*buf = 0;
    2ede:	2200      	movs	r2, #0
    2ee0:	70da      	strb	r2, [r3, #3]
				if (fplus || fspace || (buf[0] == '-'))
    2ee2:	9b07      	ldr	r3, [sp, #28]
	return buf - start;
    2ee4:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (buf[0] == '-'))
    2ee8:	2b00      	cmp	r3, #0
    2eea:	f040 8255 	bne.w	3398 <_prf+0x7c4>
    2eee:	f1b9 0f00 	cmp.w	r9, #0
    2ef2:	d107      	bne.n	2f04 <_prf+0x330>
    2ef4:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    2ef8:	f1a1 032d 	sub.w	r3, r1, #45	; 0x2d
    2efc:	f1d3 0900 	rsbs	r9, r3, #0
    2f00:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1)
    2f04:	28c8      	cmp	r0, #200	; 0xc8
    2f06:	f73f ae7a 	bgt.w	2bfe <_prf+0x2a>
    2f0a:	4606      	mov	r6, r0
    2f0c:	e1b9      	b.n	3282 <_prf+0x6ae>
				*buf++ = 'i';
    2f0e:	2269      	movs	r2, #105	; 0x69
    2f10:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    2f12:	226e      	movs	r2, #110	; 0x6e
    2f14:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    2f16:	2266      	movs	r2, #102	; 0x66
    2f18:	e7e0      	b.n	2edc <_prf+0x308>
			if (isupper(c)) {
    2f1a:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    2f1c:	bf99      	ittee	ls
    2f1e:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    2f20:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    2f22:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    2f24:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    2f26:	bf94      	ite	ls
    2f28:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    2f2a:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    2f2c:	7059      	strb	r1, [r3, #1]
    2f2e:	e7d5      	b.n	2edc <_prf+0x308>
    2f30:	00005800 	.word	0x00005800
    2f34:	00005806 	.word	0x00005806
	if ((exp | fract) != 0) {
    2f38:	e9dd 2300 	ldrd	r2, r3, [sp]
		c = 'f';
    2f3c:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    2f3e:	ea42 0208 	orr.w	r2, r2, r8
    2f42:	ea43 73e8 	orr.w	r3, r3, r8, asr #31
		c = 'f';
    2f46:	bf08      	it	eq
    2f48:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    2f4a:	4313      	orrs	r3, r2
    2f4c:	d043      	beq.n	2fd6 <_prf+0x402>
		fract |= HIGHBIT64;
    2f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (decexp && sign) {
    2f52:	2800      	cmp	r0, #0
		fract |= HIGHBIT64;
    2f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2f58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (decexp && sign) {
    2f5c:	f177 0300 	sbcs.w	r3, r7, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2f60:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
	if (decexp && sign) {
    2f64:	da39      	bge.n	2fda <_prf+0x406>
		*buf++ = '-';
    2f66:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    2f68:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    2f6c:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
	decexp = 0;
    2f70:	2300      	movs	r3, #0
    2f72:	9300      	str	r3, [sp, #0]
	while (exp <= -3) {
    2f74:	f118 0f02 	cmn.w	r8, #2
    2f78:	db3e      	blt.n	2ff8 <_prf+0x424>
	while (exp > 0) {
    2f7a:	f1b8 0f00 	cmp.w	r8, #0
    2f7e:	dc79      	bgt.n	3074 <_prf+0x4a0>
		_rlrshift(&fract);
    2f80:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    2f82:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    2f86:	f7ff fdc5 	bl	2b14 <_rlrshift>
	while (exp < (0 + 4)) {
    2f8a:	f1b8 0f04 	cmp.w	r8, #4
    2f8e:	d1f7      	bne.n	2f80 <_prf+0x3ac>
		precision = 6;		/* Default precision if none given */
    2f90:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    2f92:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    2f96:	bfb8      	it	lt
    2f98:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    2f9a:	2b47      	cmp	r3, #71	; 0x47
    2f9c:	f040 8097 	bne.w	30ce <_prf+0x4fa>
		if (!falt && (precision > 0))
    2fa0:	2e00      	cmp	r6, #0
    2fa2:	f040 8092 	bne.w	30ca <_prf+0x4f6>
    2fa6:	1c2b      	adds	r3, r5, #0
    2fa8:	bf18      	it	ne
    2faa:	2301      	movne	r3, #1
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2fac:	9308      	str	r3, [sp, #32]
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    2fae:	9b00      	ldr	r3, [sp, #0]
    2fb0:	3303      	adds	r3, #3
    2fb2:	db04      	blt.n	2fbe <_prf+0x3ea>
    2fb4:	9a00      	ldr	r2, [sp, #0]
    2fb6:	1c6b      	adds	r3, r5, #1
    2fb8:	429a      	cmp	r2, r3
    2fba:	f340 808d 	ble.w	30d8 <_prf+0x504>
				c = 'E';
    2fbe:	2c67      	cmp	r4, #103	; 0x67
    2fc0:	bf0c      	ite	eq
    2fc2:	2465      	moveq	r4, #101	; 0x65
    2fc4:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    2fc6:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    2fca:	2310      	movs	r3, #16
    2fcc:	4598      	cmp	r8, r3
    2fce:	930f      	str	r3, [sp, #60]	; 0x3c
    2fd0:	bfa8      	it	ge
    2fd2:	4698      	movge	r8, r3
    2fd4:	e089      	b.n	30ea <_prf+0x516>
	if ((exp | fract) != 0) {
    2fd6:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    2fda:	9b07      	ldr	r3, [sp, #28]
    2fdc:	b10b      	cbz	r3, 2fe2 <_prf+0x40e>
		*buf++ = '+';
    2fde:	232b      	movs	r3, #43	; 0x2b
    2fe0:	e7c2      	b.n	2f68 <_prf+0x394>
	} else if (fspace) {
    2fe2:	f1b9 0f00 	cmp.w	r9, #0
    2fe6:	d001      	beq.n	2fec <_prf+0x418>
		*buf++ = ' ';
    2fe8:	2320      	movs	r3, #32
    2fea:	e7bd      	b.n	2f68 <_prf+0x394>
	} else if (fspace) {
    2fec:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
    2ff0:	e7be      	b.n	2f70 <_prf+0x39c>
			_rlrshift(&fract);
    2ff2:	a810      	add	r0, sp, #64	; 0x40
    2ff4:	f7ff fd8e 	bl	2b14 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    2ff8:	e9dd 7c10 	ldrd	r7, ip, [sp, #64]	; 0x40
    2ffc:	2300      	movs	r3, #0
    2ffe:	930b      	str	r3, [sp, #44]	; 0x2c
    3000:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    3004:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3008:	4aa8      	ldr	r2, [pc, #672]	; (32ac <_prf+0x6d8>)
    300a:	2300      	movs	r3, #0
    300c:	428b      	cmp	r3, r1
    300e:	bf08      	it	eq
    3010:	4282      	cmpeq	r2, r0
    3012:	f108 0801 	add.w	r8, r8, #1
    3016:	d3ec      	bcc.n	2ff2 <_prf+0x41e>
		fract *= 5;
    3018:	2205      	movs	r2, #5
    301a:	fba7 0102 	umull	r0, r1, r7, r2
    301e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    3022:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3024:	fb02 330c 	mla	r3, r2, ip, r3
    3028:	9309      	str	r3, [sp, #36]	; 0x24
    302a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    302e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		decexp--;
    3032:	9b00      	ldr	r3, [sp, #0]
    3034:	3b01      	subs	r3, #1
    3036:	9300      	str	r3, [sp, #0]
    3038:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    303c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    303e:	2300      	movs	r3, #0
    3040:	2100      	movs	r1, #0
    3042:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3046:	4299      	cmp	r1, r3
    3048:	bf08      	it	eq
    304a:	4290      	cmpeq	r0, r2
    304c:	d207      	bcs.n	305e <_prf+0x48a>
    304e:	f1bc 0f00 	cmp.w	ip, #0
    3052:	d08f      	beq.n	2f74 <_prf+0x3a0>
    3054:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    3058:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    305c:	e78a      	b.n	2f74 <_prf+0x3a0>
			fract <<= 1;
    305e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    3062:	1892      	adds	r2, r2, r2
    3064:	415b      	adcs	r3, r3
    3066:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    306a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    306e:	f04f 0c01 	mov.w	ip, #1
    3072:	e7e3      	b.n	303c <_prf+0x468>
		_ldiv5(&fract);
    3074:	a810      	add	r0, sp, #64	; 0x40
    3076:	f7ff fd61 	bl	2b3c <_ldiv5>
		decexp++;
    307a:	9b00      	ldr	r3, [sp, #0]
    307c:	3301      	adds	r3, #1
    307e:	9300      	str	r3, [sp, #0]
    3080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    3084:	e9cd 2308 	strd	r2, r3, [sp, #32]
		exp--;
    3088:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    308c:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    3090:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3092:	2300      	movs	r3, #0
    3094:	2100      	movs	r1, #0
    3096:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    309a:	4299      	cmp	r1, r3
    309c:	bf08      	it	eq
    309e:	4290      	cmpeq	r0, r2
    30a0:	d208      	bcs.n	30b4 <_prf+0x4e0>
    30a2:	f1bc 0f00 	cmp.w	ip, #0
    30a6:	f43f af68 	beq.w	2f7a <_prf+0x3a6>
    30aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    30ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    30b2:	e762      	b.n	2f7a <_prf+0x3a6>
			fract <<= 1;
    30b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    30b8:	1892      	adds	r2, r2, r2
    30ba:	415b      	adcs	r3, r3
    30bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    30c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    30c4:	f04f 0c01 	mov.w	ip, #1
    30c8:	e7e2      	b.n	3090 <_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    30ca:	2300      	movs	r3, #0
    30cc:	e76e      	b.n	2fac <_prf+0x3d8>
    30ce:	2300      	movs	r3, #0
	if (c == 'f') {
    30d0:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    30d2:	9308      	str	r3, [sp, #32]
	if (c == 'f') {
    30d4:	f47f af77 	bne.w	2fc6 <_prf+0x3f2>
		if (exp < 0)
    30d8:	9b00      	ldr	r3, [sp, #0]
    30da:	eb13 0805 	adds.w	r8, r3, r5
    30de:	d54b      	bpl.n	3178 <_prf+0x5a4>
	digit_count = 16;
    30e0:	2310      	movs	r3, #16
    30e2:	930f      	str	r3, [sp, #60]	; 0x3c
    30e4:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    30e6:	f04f 0800 	mov.w	r8, #0
	ltemp = 0x0800000000000000;
    30ea:	a948      	add	r1, sp, #288	; 0x120
    30ec:	2200      	movs	r2, #0
    30ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    30f2:	e961 2336 	strd	r2, r3, [r1, #-216]!	; 0xd8
	while (exp--) {
    30f6:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    30fa:	d23f      	bcs.n	317c <_prf+0x5a8>
	fract += ltemp;
    30fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    3100:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3104:	1817      	adds	r7, r2, r0
    3106:	eb43 0801 	adc.w	r8, r3, r1
    310a:	463a      	mov	r2, r7
    310c:	4643      	mov	r3, r8
    310e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
    3112:	f008 4270 	and.w	r2, r8, #4026531840	; 0xf0000000
    3116:	2300      	movs	r3, #0
    3118:	4313      	orrs	r3, r2
    311a:	d008      	beq.n	312e <_prf+0x55a>
		_ldiv5(&fract);
    311c:	a810      	add	r0, sp, #64	; 0x40
    311e:	f7ff fd0d 	bl	2b3c <_ldiv5>
		_rlrshift(&fract);
    3122:	a810      	add	r0, sp, #64	; 0x40
    3124:	f7ff fcf6 	bl	2b14 <_rlrshift>
		decexp++;
    3128:	9b00      	ldr	r3, [sp, #0]
    312a:	3301      	adds	r3, #1
    312c:	9300      	str	r3, [sp, #0]
	if (c == 'f') {
    312e:	2c66      	cmp	r4, #102	; 0x66
    3130:	f10a 0801 	add.w	r8, sl, #1
    3134:	d140      	bne.n	31b8 <_prf+0x5e4>
		if (decexp > 0) {
    3136:	9b00      	ldr	r3, [sp, #0]
    3138:	2b00      	cmp	r3, #0
    313a:	dd29      	ble.n	3190 <_prf+0x5bc>
    313c:	4453      	add	r3, sl
    313e:	4698      	mov	r8, r3
				*buf++ = _get_digit(&fract, &digit_count);
    3140:	a90f      	add	r1, sp, #60	; 0x3c
    3142:	a810      	add	r0, sp, #64	; 0x40
    3144:	f7ff fd2b 	bl	2b9e <_get_digit>
    3148:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
    314c:	45c2      	cmp	sl, r8
    314e:	d1f7      	bne.n	3140 <_prf+0x56c>
    3150:	2300      	movs	r3, #0
    3152:	9300      	str	r3, [sp, #0]
		if (falt || (precision > 0))
    3154:	b906      	cbnz	r6, 3158 <_prf+0x584>
    3156:	b15d      	cbz	r5, 3170 <_prf+0x59c>
			*buf++ = '.';
    3158:	232e      	movs	r3, #46	; 0x2e
    315a:	f888 3000 	strb.w	r3, [r8]
    315e:	4646      	mov	r6, r8
    3160:	eb08 0305 	add.w	r3, r8, r5
				*buf++ = '0';
    3164:	f04f 0a30 	mov.w	sl, #48	; 0x30
		while (precision-- > 0) {
    3168:	42b3      	cmp	r3, r6
    316a:	d115      	bne.n	3198 <_prf+0x5c4>
    316c:	3501      	adds	r5, #1
    316e:	44a8      	add	r8, r5
	if (prune_zero) {
    3170:	9b08      	ldr	r3, [sp, #32]
    3172:	2b00      	cmp	r3, #0
    3174:	d139      	bne.n	31ea <_prf+0x616>
    3176:	e060      	b.n	323a <_prf+0x666>
		if (exp < 0)
    3178:	2466      	movs	r4, #102	; 0x66
    317a:	e726      	b.n	2fca <_prf+0x3f6>
		_ldiv5(&ltemp);
    317c:	4608      	mov	r0, r1
    317e:	910a      	str	r1, [sp, #40]	; 0x28
    3180:	f7ff fcdc 	bl	2b3c <_ldiv5>
		_rlrshift(&ltemp);
    3184:	990a      	ldr	r1, [sp, #40]	; 0x28
    3186:	4608      	mov	r0, r1
    3188:	f7ff fcc4 	bl	2b14 <_rlrshift>
    318c:	990a      	ldr	r1, [sp, #40]	; 0x28
    318e:	e7b2      	b.n	30f6 <_prf+0x522>
			*buf++ = '0';
    3190:	2330      	movs	r3, #48	; 0x30
    3192:	f88a 3000 	strb.w	r3, [sl]
    3196:	e7dd      	b.n	3154 <_prf+0x580>
			if (decexp < 0) {
    3198:	9a00      	ldr	r2, [sp, #0]
    319a:	b12a      	cbz	r2, 31a8 <_prf+0x5d4>
				decexp++;
    319c:	3201      	adds	r2, #1
				*buf++ = '0';
    319e:	f886 a001 	strb.w	sl, [r6, #1]
				decexp++;
    31a2:	9200      	str	r2, [sp, #0]
    31a4:	3601      	adds	r6, #1
    31a6:	e7df      	b.n	3168 <_prf+0x594>
				*buf++ = _get_digit(&fract, &digit_count);
    31a8:	a90f      	add	r1, sp, #60	; 0x3c
    31aa:	a810      	add	r0, sp, #64	; 0x40
    31ac:	930a      	str	r3, [sp, #40]	; 0x28
    31ae:	f7ff fcf6 	bl	2b9e <_get_digit>
    31b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    31b4:	7070      	strb	r0, [r6, #1]
    31b6:	e7f5      	b.n	31a4 <_prf+0x5d0>
		*buf = _get_digit(&fract, &digit_count);
    31b8:	a90f      	add	r1, sp, #60	; 0x3c
    31ba:	a810      	add	r0, sp, #64	; 0x40
    31bc:	f7ff fcef 	bl	2b9e <_get_digit>
		if (*buf++ != '0')
    31c0:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    31c2:	bf18      	it	ne
    31c4:	9b00      	ldrne	r3, [sp, #0]
		*buf = _get_digit(&fract, &digit_count);
    31c6:	f88a 0000 	strb.w	r0, [sl]
			decexp--;
    31ca:	bf1c      	itt	ne
    31cc:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    31d0:	9300      	strne	r3, [sp, #0]
		if (falt || (precision > 0))
    31d2:	b906      	cbnz	r6, 31d6 <_prf+0x602>
    31d4:	b13d      	cbz	r5, 31e6 <_prf+0x612>
			*buf++ = '.';
    31d6:	f10a 0802 	add.w	r8, sl, #2
    31da:	232e      	movs	r3, #46	; 0x2e
    31dc:	f88a 3001 	strb.w	r3, [sl, #1]
    31e0:	4445      	add	r5, r8
		while (precision-- > 0)
    31e2:	4545      	cmp	r5, r8
    31e4:	d12e      	bne.n	3244 <_prf+0x670>
	if (prune_zero) {
    31e6:	9b08      	ldr	r3, [sp, #32]
    31e8:	b143      	cbz	r3, 31fc <_prf+0x628>
		while (*--buf == '0')
    31ea:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    31ee:	2a30      	cmp	r2, #48	; 0x30
    31f0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    31f4:	d02d      	beq.n	3252 <_prf+0x67e>
    31f6:	2a2e      	cmp	r2, #46	; 0x2e
    31f8:	bf08      	it	eq
    31fa:	4698      	moveq	r8, r3
	if ((c == 'e') || (c == 'E')) {
    31fc:	f024 0320 	bic.w	r3, r4, #32
    3200:	2b45      	cmp	r3, #69	; 0x45
    3202:	d11a      	bne.n	323a <_prf+0x666>
		if (decexp < 0) {
    3204:	9b00      	ldr	r3, [sp, #0]
		*buf++ = (char) c;
    3206:	f888 4000 	strb.w	r4, [r8]
		if (decexp < 0) {
    320a:	2b00      	cmp	r3, #0
			decexp = -decexp;
    320c:	bfbb      	ittet	lt
    320e:	425b      	neglt	r3, r3
    3210:	9300      	strlt	r3, [sp, #0]
			*buf++ = '+';
    3212:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
    3214:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    3216:	f888 3001 	strb.w	r3, [r8, #1]
		*buf++ = (char) ((decexp / 10) + '0');
    321a:	220a      	movs	r2, #10
    321c:	9b00      	ldr	r3, [sp, #0]
    321e:	fb93 f3f2 	sdiv	r3, r3, r2
    3222:	f103 0130 	add.w	r1, r3, #48	; 0x30
    3226:	f888 1002 	strb.w	r1, [r8, #2]
		decexp %= 10;
    322a:	9900      	ldr	r1, [sp, #0]
    322c:	fb02 1713 	mls	r7, r2, r3, r1
		*buf++ = (char) (decexp + '0');
    3230:	3730      	adds	r7, #48	; 0x30
    3232:	f888 7003 	strb.w	r7, [r8, #3]
    3236:	f108 0804 	add.w	r8, r8, #4
	*buf = 0;
    323a:	2300      	movs	r3, #0
    323c:	f888 3000 	strb.w	r3, [r8]
	return buf - start;
    3240:	a815      	add	r0, sp, #84	; 0x54
    3242:	e64e      	b.n	2ee2 <_prf+0x30e>
			*buf++ = _get_digit(&fract, &digit_count);
    3244:	a90f      	add	r1, sp, #60	; 0x3c
    3246:	a810      	add	r0, sp, #64	; 0x40
    3248:	f7ff fca9 	bl	2b9e <_get_digit>
    324c:	f808 0b01 	strb.w	r0, [r8], #1
    3250:	e7c7      	b.n	31e2 <_prf+0x60e>
		while (*--buf == '0')
    3252:	4698      	mov	r8, r3
    3254:	e7c9      	b.n	31ea <_prf+0x616>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    3256:	1d3b      	adds	r3, r7, #4
    3258:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
    325a:	683b      	ldr	r3, [r7, #0]
    325c:	9a04      	ldr	r2, [sp, #16]
    325e:	601a      	str	r2, [r3, #0]
				break;
    3260:	e4d9      	b.n	2c16 <_prf+0x42>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    3262:	1d3b      	adds	r3, r7, #4
    3264:	9305      	str	r3, [sp, #20]
    3266:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    3268:	b316      	cbz	r6, 32b0 <_prf+0x6dc>
		*buf++ = '0';
    326a:	2330      	movs	r3, #48	; 0x30
    326c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
    3270:	bb59      	cbnz	r1, 32ca <_prf+0x6f6>
			prefix = 0;
    3272:	3501      	adds	r5, #1
    3274:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    3276:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
    327a:	bf18      	it	ne
    327c:	2320      	movne	r3, #32
    327e:	4689      	mov	r9, r1
    3280:	9302      	str	r3, [sp, #8]
				if (c < width) {
    3282:	9b03      	ldr	r3, [sp, #12]
    3284:	42b3      	cmp	r3, r6
    3286:	f340 8085 	ble.w	3394 <_prf+0x7c0>
					if (fminus)	{
    328a:	9b06      	ldr	r3, [sp, #24]
    328c:	ad15      	add	r5, sp, #84	; 0x54
    328e:	2b00      	cmp	r3, #0
    3290:	d058      	beq.n	3344 <_prf+0x770>
							buf[i] = ' ';
    3292:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    3294:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    3296:	55ab      	strb	r3, [r5, r6]
						for (i = c; i < width; i++)
    3298:	3601      	adds	r6, #1
    329a:	42b2      	cmp	r2, r6
    329c:	d1fa      	bne.n	3294 <_prf+0x6c0>
    329e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
					if ((*func)(*cptr, dest) == EOF)
    32a2:	ac15      	add	r4, sp, #84	; 0x54
    32a4:	4413      	add	r3, r2
    32a6:	461d      	mov	r5, r3
    32a8:	1aa4      	subs	r4, r4, r2
    32aa:	e06f      	b.n	338c <_prf+0x7b8>
    32ac:	33333332 	.word	0x33333332
	if (alt_form) {
    32b0:	a815      	add	r0, sp, #84	; 0x54
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    32b2:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    32b6:	462b      	mov	r3, r5
    32b8:	2208      	movs	r2, #8
    32ba:	eba0 0808 	sub.w	r8, r0, r8
    32be:	f7ff fc01 	bl	2ac4 <_to_x>
    32c2:	4440      	add	r0, r8
			prefix = 0;
    32c4:	f04f 0900 	mov.w	r9, #0
    32c8:	e595      	b.n	2df6 <_prf+0x222>
		*buf++ = '0';
    32ca:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    32ce:	e7f0      	b.n	32b2 <_prf+0x6de>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    32d0:	1d3b      	adds	r3, r7, #4
    32d2:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
    32d4:	f647 0330 	movw	r3, #30768	; 0x7830
    32d8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    32dc:	6839      	ldr	r1, [r7, #0]
	len = _to_x(buf, value, 16, precision);
    32de:	2308      	movs	r3, #8
    32e0:	2210      	movs	r2, #16
    32e2:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    32e6:	f7ff fbed 	bl	2ac4 <_to_x>
	return len + (buf - buf0);
    32ea:	3002      	adds	r0, #2
    32ec:	e7ea      	b.n	32c4 <_prf+0x6f0>
				if ((precision >= 0) && (precision < c))
    32ee:	2d00      	cmp	r5, #0
    32f0:	db02      	blt.n	32f8 <_prf+0x724>
    32f2:	42ae      	cmp	r6, r5
    32f4:	bfa8      	it	ge
    32f6:	462e      	movge	r6, r5
				if (c > 0) {
    32f8:	2e00      	cmp	r6, #0
    32fa:	f43f ac8c 	beq.w	2c16 <_prf+0x42>
					memcpy(buf, cptr_temp, (size_t) c);
    32fe:	4632      	mov	r2, r6
    3300:	a815      	add	r0, sp, #84	; 0x54
    3302:	f7ff fb91 	bl	2a28 <memcpy>
    3306:	e59c      	b.n	2e42 <_prf+0x26e>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    3308:	1d3b      	adds	r3, r7, #4
    330a:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
    330c:	220a      	movs	r2, #10
    330e:	462b      	mov	r3, r5
    3310:	6839      	ldr	r1, [r7, #0]
    3312:	a815      	add	r0, sp, #84	; 0x54
    3314:	f7ff fbd6 	bl	2ac4 <_to_x>
    3318:	e7d4      	b.n	32c4 <_prf+0x6f0>
	if (alt_form) {
    331a:	af15      	add	r7, sp, #84	; 0x54
    331c:	e527      	b.n	2d6e <_prf+0x19a>
		if (*buf >= 'a' && *buf <= 'z') {
    331e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    3322:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    3324:	bf9c      	itt	ls
    3326:	3b20      	subls	r3, #32
    3328:	7013      	strbls	r3, [r2, #0]
    332a:	e529      	b.n	2d80 <_prf+0x1ac>
				if ((*func)('%', dest) == EOF) {
    332c:	990d      	ldr	r1, [sp, #52]	; 0x34
    332e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3330:	4620      	mov	r0, r4
    3332:	4798      	blx	r3
    3334:	3001      	adds	r0, #1
    3336:	f43f ac62 	beq.w	2bfe <_prf+0x2a>
				count++;
    333a:	9b04      	ldr	r3, [sp, #16]
    333c:	3301      	adds	r3, #1
    333e:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1)
    3340:	9705      	str	r7, [sp, #20]
    3342:	e468      	b.n	2c16 <_prf+0x42>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    3344:	9b03      	ldr	r3, [sp, #12]
    3346:	1b9c      	subs	r4, r3, r6
    3348:	1c72      	adds	r2, r6, #1
    334a:	1928      	adds	r0, r5, r4
    334c:	4629      	mov	r1, r5
    334e:	f7ff fb54 	bl	29fa <memmove>
						if (pad == ' ')
    3352:	9b06      	ldr	r3, [sp, #24]
    3354:	9a02      	ldr	r2, [sp, #8]
    3356:	2a20      	cmp	r2, #32
    3358:	bf18      	it	ne
    335a:	464b      	movne	r3, r9
    335c:	9306      	str	r3, [sp, #24]
						c = width - c + prefix;
    335e:	441c      	add	r4, r3
						for (i = prefix; i < c; i++)
    3360:	9b06      	ldr	r3, [sp, #24]
    3362:	42a3      	cmp	r3, r4
    3364:	da9b      	bge.n	329e <_prf+0x6ca>
							buf[i] = pad;
    3366:	9b06      	ldr	r3, [sp, #24]
    3368:	461a      	mov	r2, r3
    336a:	9b02      	ldr	r3, [sp, #8]
    336c:	54ab      	strb	r3, [r5, r2]
						for (i = prefix; i < c; i++)
    336e:	4613      	mov	r3, r2
    3370:	3301      	adds	r3, #1
    3372:	9306      	str	r3, [sp, #24]
    3374:	e7f4      	b.n	3360 <_prf+0x78c>
					if ((*func)(*cptr, dest) == EOF)
    3376:	9b04      	ldr	r3, [sp, #16]
    3378:	990d      	ldr	r1, [sp, #52]	; 0x34
    337a:	5ce0      	ldrb	r0, [r4, r3]
    337c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    337e:	4798      	blx	r3
    3380:	3001      	adds	r0, #1
    3382:	f43f ac3c 	beq.w	2bfe <_prf+0x2a>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    3386:	9b04      	ldr	r3, [sp, #16]
    3388:	3301      	adds	r3, #1
    338a:	9304      	str	r3, [sp, #16]
    338c:	9b04      	ldr	r3, [sp, #16]
    338e:	42ab      	cmp	r3, r5
    3390:	d1f1      	bne.n	3376 <_prf+0x7a2>
    3392:	e440      	b.n	2c16 <_prf+0x42>
    3394:	9603      	str	r6, [sp, #12]
    3396:	e782      	b.n	329e <_prf+0x6ca>
					prefix = 1;
    3398:	f8dd 901c 	ldr.w	r9, [sp, #28]
    339c:	e5b2      	b.n	2f04 <_prf+0x330>
    339e:	bf00      	nop

000033a0 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    33a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33a4:	4770      	bx	lr
	...

000033a8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    33a8:	4b01      	ldr	r3, [pc, #4]	; (33b0 <__stdout_hook_install+0x8>)
    33aa:	6018      	str	r0, [r3, #0]
}
    33ac:	4770      	bx	lr
    33ae:	bf00      	nop
    33b0:	20001ccc 	.word	0x20001ccc

000033b4 <_impl__zephyr_fputc>:

int _impl__zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    33b4:	2902      	cmp	r1, #2
    33b6:	d102      	bne.n	33be <_impl__zephyr_fputc+0xa>
    33b8:	4b02      	ldr	r3, [pc, #8]	; (33c4 <_impl__zephyr_fputc+0x10>)
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	4718      	bx	r3
}
    33be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33c2:	4770      	bx	lr
    33c4:	20001ccc 	.word	0x20001ccc

000033c8 <fputc>:

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_READ, _zephyr_read, int, char *, buf, int, nbytes)

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_WRITE, _zephyr_write, int, const void *, buf, int, nbytes)

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_FPUTC, _zephyr_fputc, int, int, c, FILE *, stream)
    33c8:	f7ff bff4 	b.w	33b4 <_impl__zephyr_fputc>

000033cc <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    33cc:	b40f      	push	{r0, r1, r2, r3}
    33ce:	b507      	push	{r0, r1, r2, lr}
    33d0:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
    33d2:	2102      	movs	r1, #2
{
    33d4:	f853 2b04 	ldr.w	r2, [r3], #4
	r = _prf(fputc, DESC(stdout), format, vargs);
    33d8:	4804      	ldr	r0, [pc, #16]	; (33ec <printf+0x20>)
	va_start(vargs, format);
    33da:	9301      	str	r3, [sp, #4]
	r = _prf(fputc, DESC(stdout), format, vargs);
    33dc:	f7ff fbfa 	bl	2bd4 <_prf>
	va_end(vargs);

	return r;
}
    33e0:	b003      	add	sp, #12
    33e2:	f85d eb04 	ldr.w	lr, [sp], #4
    33e6:	b004      	add	sp, #16
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop
    33ec:	000033c9 	.word	0x000033c9

000033f0 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	u8_t channel_id = channel_cfg->channel_id;
    33f0:	7908      	ldrb	r0, [r1, #4]
{
    33f2:	b570      	push	{r4, r5, r6, lr}
	u8_t channel_id = channel_cfg->channel_id;
    33f4:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= NRF_SAADC_CHANNEL_COUNT) {
    33f8:	2c07      	cmp	r4, #7
    33fa:	d83a      	bhi.n	3472 <adc_nrfx_channel_setup+0x82>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    33fc:	780b      	ldrb	r3, [r1, #0]
    33fe:	2b09      	cmp	r3, #9
    3400:	d826      	bhi.n	3450 <adc_nrfx_channel_setup+0x60>
    3402:	e8df f003 	tbb	[pc, r3]
    3406:	3b39      	.short	0x3b39
    3408:	251d1b05 	.word	0x251d1b05
    340c:	2325211f 	.word	0x2325211f
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
		break;
	case ADC_GAIN_1_4:
		config.gain = NRF_SAADC_GAIN1_4;
    3410:	2302      	movs	r3, #2
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    3412:	784a      	ldrb	r2, [r1, #1]
    3414:	2a03      	cmp	r2, #3
    3416:	d060      	beq.n	34da <adc_nrfx_channel_setup+0xea>
    3418:	2a04      	cmp	r2, #4
    341a:	d031      	beq.n	3480 <adc_nrfx_channel_setup+0x90>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    341c:	2301      	movs	r3, #1
    341e:	f04f 0200 	mov.w	r2, #0
    3422:	f363 0202 	bfi	r2, r3, #0, #3
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    3426:	4941      	ldr	r1, [pc, #260]	; (352c <adc_nrfx_channel_setup+0x13c>)
    3428:	4b41      	ldr	r3, [pc, #260]	; (3530 <adc_nrfx_channel_setup+0x140>)
    342a:	4842      	ldr	r0, [pc, #264]	; (3534 <adc_nrfx_channel_setup+0x144>)
    342c:	1a5b      	subs	r3, r3, r1
    342e:	f36f 02c5 	bfc	r2, #3, #3
    3432:	08db      	lsrs	r3, r3, #3
    3434:	f363 128f 	bfi	r2, r3, #6, #10
    3438:	493f      	ldr	r1, [pc, #252]	; (3538 <adc_nrfx_channel_setup+0x148>)
    343a:	e018      	b.n	346e <adc_nrfx_channel_setup+0x7e>
		config.gain = NRF_SAADC_GAIN1_3;
    343c:	2303      	movs	r3, #3
		break;
    343e:	e7e8      	b.n	3412 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_2;
    3440:	2304      	movs	r3, #4
		break;
    3442:	e7e6      	b.n	3412 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1;
    3444:	2305      	movs	r3, #5
		break;
    3446:	e7e4      	b.n	3412 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN2;
    3448:	2306      	movs	r3, #6
		break;
    344a:	e7e2      	b.n	3412 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    344c:	2307      	movs	r3, #7
		break;
    344e:	e7e0      	b.n	3412 <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    3450:	2301      	movs	r3, #1
    3452:	f04f 0200 	mov.w	r2, #0
    3456:	f363 0202 	bfi	r2, r3, #0, #3
    345a:	4934      	ldr	r1, [pc, #208]	; (352c <adc_nrfx_channel_setup+0x13c>)
    345c:	4b34      	ldr	r3, [pc, #208]	; (3530 <adc_nrfx_channel_setup+0x140>)
    345e:	4837      	ldr	r0, [pc, #220]	; (353c <adc_nrfx_channel_setup+0x14c>)
    3460:	1a5b      	subs	r3, r3, r1
    3462:	f36f 02c5 	bfc	r2, #3, #3
    3466:	08db      	lsrs	r3, r3, #3
    3468:	4933      	ldr	r1, [pc, #204]	; (3538 <adc_nrfx_channel_setup+0x148>)
    346a:	f363 128f 	bfi	r2, r3, #6, #10
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    346e:	f7fd ffa7 	bl	13c0 <log_1>
		return -EINVAL;
    3472:	f06f 0015 	mvn.w	r0, #21
    3476:	e02f      	b.n	34d8 <adc_nrfx_channel_setup+0xe8>
	nrf_saadc_channel_config_t config = {
    3478:	2300      	movs	r3, #0
    347a:	e7ca      	b.n	3412 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_5;
    347c:	2301      	movs	r3, #1
    347e:	e7c8      	b.n	3412 <adc_nrfx_channel_setup+0x22>
	nrf_saadc_channel_config_t config = {
    3480:	2600      	movs	r6, #0
	switch (channel_cfg->acquisition_time) {
    3482:	884a      	ldrh	r2, [r1, #2]
    3484:	f244 050a 	movw	r5, #16394	; 0x400a
    3488:	42aa      	cmp	r2, r5
    348a:	d009      	beq.n	34a0 <adc_nrfx_channel_setup+0xb0>
    348c:	d827      	bhi.n	34de <adc_nrfx_channel_setup+0xee>
    348e:	f244 0503 	movw	r5, #16387	; 0x4003
    3492:	42aa      	cmp	r2, r5
    3494:	d045      	beq.n	3522 <adc_nrfx_channel_setup+0x132>
    3496:	f244 0505 	movw	r5, #16389	; 0x4005
    349a:	42aa      	cmp	r2, r5
    349c:	d043      	beq.n	3526 <adc_nrfx_channel_setup+0x136>
    349e:	bb82      	cbnz	r2, 3502 <adc_nrfx_channel_setup+0x112>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    34a0:	2202      	movs	r2, #2
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    34a2:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    34a6:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    34a8:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    34ac:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
    34b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    NRF_SAADC->CH[channel].CONFIG =
    34b4:	0122      	lsls	r2, r4, #4
    34b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    34ba:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */
	config.pin_p = NRF_SAADC_INPUT_DISABLED;
	config.pin_n = channel_cfg->input_negative;
    34be:	798d      	ldrb	r5, [r1, #6]
    34c0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    34c4:	4b1e      	ldr	r3, [pc, #120]	; (3540 <adc_nrfx_channel_setup+0x150>)
    NRF_SAADC->CH[channel].PSELN = pseln;
    34c6:	f8c2 5514 	str.w	r5, [r2, #1300]	; 0x514
    NRF_SAADC->CH[channel].PSELP = pselp;
    34ca:	2000      	movs	r0, #0
    34cc:	441c      	add	r4, r3
    34ce:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    34d2:	794b      	ldrb	r3, [r1, #5]
    34d4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

	return 0;
}
    34d8:	bd70      	pop	{r4, r5, r6, pc}
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    34da:	2601      	movs	r6, #1
    34dc:	e7d1      	b.n	3482 <adc_nrfx_channel_setup+0x92>
	switch (channel_cfg->acquisition_time) {
    34de:	f244 0514 	movw	r5, #16404	; 0x4014
    34e2:	42aa      	cmp	r2, r5
    34e4:	d009      	beq.n	34fa <adc_nrfx_channel_setup+0x10a>
    34e6:	f244 0528 	movw	r5, #16424	; 0x4028
    34ea:	42aa      	cmp	r2, r5
    34ec:	d007      	beq.n	34fe <adc_nrfx_channel_setup+0x10e>
    34ee:	f244 050f 	movw	r5, #16399	; 0x400f
    34f2:	42aa      	cmp	r2, r5
    34f4:	d105      	bne.n	3502 <adc_nrfx_channel_setup+0x112>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    34f6:	2203      	movs	r2, #3
		break;
    34f8:	e7d3      	b.n	34a2 <adc_nrfx_channel_setup+0xb2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    34fa:	2204      	movs	r2, #4
		break;
    34fc:	e7d1      	b.n	34a2 <adc_nrfx_channel_setup+0xb2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    34fe:	2205      	movs	r2, #5
		break;
    3500:	e7cf      	b.n	34a2 <adc_nrfx_channel_setup+0xb2>
		LOG_ERR("Selected ADC acquisition time is not valid");
    3502:	2301      	movs	r3, #1
    3504:	f04f 0200 	mov.w	r2, #0
    3508:	f363 0202 	bfi	r2, r3, #0, #3
    350c:	4907      	ldr	r1, [pc, #28]	; (352c <adc_nrfx_channel_setup+0x13c>)
    350e:	4b08      	ldr	r3, [pc, #32]	; (3530 <adc_nrfx_channel_setup+0x140>)
    3510:	480c      	ldr	r0, [pc, #48]	; (3544 <adc_nrfx_channel_setup+0x154>)
    3512:	1a5b      	subs	r3, r3, r1
    3514:	f36f 02c5 	bfc	r2, #3, #3
    3518:	08db      	lsrs	r3, r3, #3
    351a:	f363 128f 	bfi	r2, r3, #6, #10
    351e:	4906      	ldr	r1, [pc, #24]	; (3538 <adc_nrfx_channel_setup+0x148>)
    3520:	e7a5      	b.n	346e <adc_nrfx_channel_setup+0x7e>
	nrf_saadc_channel_config_t config = {
    3522:	2200      	movs	r2, #0
    3524:	e7bd      	b.n	34a2 <adc_nrfx_channel_setup+0xb2>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    3526:	2201      	movs	r2, #1
    3528:	e7bb      	b.n	34a2 <adc_nrfx_channel_setup+0xb2>
    352a:	bf00      	nop
    352c:	000050c4 	.word	0x000050c4
    3530:	000050c4 	.word	0x000050c4
    3534:	00005882 	.word	0x00005882
    3538:	0000580b 	.word	0x0000580b
    353c:	0000585f 	.word	0x0000585f
    3540:	20001cd0 	.word	0x20001cd0
    3544:	000058aa 	.word	0x000058aa

00003548 <adc_context_start_sampling.isra.1>:
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3548:	4a03      	ldr	r2, [pc, #12]	; (3558 <adc_context_start_sampling.isra.1+0x10>)
    354a:	2301      	movs	r3, #1
    354c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
    3550:	6013      	str	r3, [r2, #0]
    3552:	6053      	str	r3, [r2, #4]

	nrf_saadc_enable();

	nrf_saadc_task_trigger(NRF_SAADC_TASK_START);
	nrf_saadc_task_trigger(NRF_SAADC_TASK_SAMPLE);
}
    3554:	4770      	bx	lr
    3556:	bf00      	nop
    3558:	40007000 	.word	0x40007000

0000355c <init_saadc>:
}

DEVICE_DECLARE(adc_0);

static int init_saadc(struct device *dev)
{
    355c:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
    355e:	4b0d      	ldr	r3, [pc, #52]	; (3594 <init_saadc+0x38>)
    3560:	2400      	movs	r4, #0
    3562:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3568:	9b01      	ldr	r3, [sp, #4]
    NRF_SAADC->INTENSET = saadc_int_mask;
    356a:	4b0b      	ldr	r3, [pc, #44]	; (3598 <init_saadc+0x3c>)
    356c:	2202      	movs	r2, #2
    356e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC_EVENT_END);
	nrf_saadc_int_enable(NRF_SAADC_INT_END);
	NRFX_IRQ_ENABLE(CONFIG_ADC_0_IRQ);
    3572:	2007      	movs	r0, #7
    3574:	f7ff f88c 	bl	2690 <_arch_irq_enable>

	IRQ_CONNECT(CONFIG_ADC_0_IRQ, CONFIG_ADC_0_IRQ_PRI,
    3578:	2007      	movs	r0, #7
    357a:	4622      	mov	r2, r4
    357c:	2101      	movs	r1, #1
    357e:	f7ff f8ab 	bl	26d8 <_irq_priority_set>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_RESET, k_sem_reset, struct k_sem *, sem)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
    3582:	4806      	ldr	r0, [pc, #24]	; (359c <init_saadc+0x40>)
	k_sem_give(&ctx->lock);
}

static inline void adc_context_unlock_unconditionally(struct adc_context *ctx)
{
	if (!k_sem_count_get(&ctx->lock)) {
    3584:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3586:	b913      	cbnz	r3, 358e <init_saadc+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3588:	3030      	adds	r0, #48	; 0x30
    358a:	f001 fa03 	bl	4994 <_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    358e:	2000      	movs	r0, #0
    3590:	b002      	add	sp, #8
    3592:	bd10      	pop	{r4, pc}
    3594:	40007104 	.word	0x40007104
    3598:	40007000 	.word	0x40007000
    359c:	20001cd0 	.word	0x20001cd0

000035a0 <start_read.isra.5>:
static int start_read(struct device *dev, const struct adc_sequence *sequence)
    35a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t selected_channels = sequence->channels;
    35a2:	6844      	ldr	r4, [r0, #4]
	if (!selected_channels ||
    35a4:	b114      	cbz	r4, 35ac <start_read.isra.5+0xc>
    35a6:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    35aa:	d011      	beq.n	35d0 <start_read.isra.5+0x30>
		LOG_ERR("Invalid selection of channels");
    35ac:	2301      	movs	r3, #1
    35ae:	f04f 0200 	mov.w	r2, #0
    35b2:	f363 0202 	bfi	r2, r3, #0, #3
    35b6:	4987      	ldr	r1, [pc, #540]	; (37d4 <start_read.isra.5+0x234>)
    35b8:	4b87      	ldr	r3, [pc, #540]	; (37d8 <start_read.isra.5+0x238>)
    35ba:	4888      	ldr	r0, [pc, #544]	; (37dc <start_read.isra.5+0x23c>)
    35bc:	1a5b      	subs	r3, r3, r1
    35be:	f36f 02c5 	bfc	r2, #3, #3
    35c2:	08db      	lsrs	r3, r3, #3
    35c4:	4986      	ldr	r1, [pc, #536]	; (37e0 <start_read.isra.5+0x240>)
    35c6:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR(
    35ca:	f7fd fef9 	bl	13c0 <log_1>
    35ce:	e01c      	b.n	360a <start_read.isra.5+0x6a>
    NRF_SAADC->CH[channel].PSELP = pselp;
    35d0:	4d84      	ldr	r5, [pc, #528]	; (37e4 <start_read.isra.5+0x244>)
			if (m_data.positive_inputs[channel_id] == 0) {
    35d2:	4f85      	ldr	r7, [pc, #532]	; (37e8 <start_read.isra.5+0x248>)
	active_channels = 0;
    35d4:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    35d6:	fa24 f302 	lsr.w	r3, r4, r2
    35da:	f013 0301 	ands.w	r3, r3, #1
    35de:	d03e      	beq.n	365e <start_read.isra.5+0xbe>
			if (m_data.positive_inputs[channel_id] == 0) {
    35e0:	18bb      	adds	r3, r7, r2
    35e2:	f893 6074 	ldrb.w	r6, [r3, #116]	; 0x74
    35e6:	b9ae      	cbnz	r6, 3614 <start_read.isra.5+0x74>
				LOG_ERR("Channel %u not configured",
    35e8:	2101      	movs	r1, #1
    35ea:	f04f 0300 	mov.w	r3, #0
    35ee:	f361 0302 	bfi	r3, r1, #0, #3
    35f2:	4878      	ldr	r0, [pc, #480]	; (37d4 <start_read.isra.5+0x234>)
    35f4:	4978      	ldr	r1, [pc, #480]	; (37d8 <start_read.isra.5+0x238>)
    35f6:	1a09      	subs	r1, r1, r0
    35f8:	08c9      	lsrs	r1, r1, #3
    35fa:	f366 03c5 	bfi	r3, r6, #3, #3
    35fe:	f361 138f 	bfi	r3, r1, #6, #10
    3602:	487a      	ldr	r0, [pc, #488]	; (37ec <start_read.isra.5+0x24c>)
    3604:	4976      	ldr	r1, [pc, #472]	; (37e0 <start_read.isra.5+0x240>)
    3606:	f7fd feef 	bl	13e8 <log_2>
				return -EINVAL;
    360a:	f06f 0515 	mvn.w	r5, #21
}
    360e:	4628      	mov	r0, r5
    3610:	b003      	add	sp, #12
    3612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
__STATIC_INLINE void nrf_saadc_burst_set(uint8_t channel,
                                         nrf_saadc_burst_t burst)
{
    NRF_SAADC->CH[channel].CONFIG =
        (NRF_SAADC->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    3614:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
			nrf_saadc_burst_set(channel_id,
    3618:	f890 c011 	ldrb.w	ip, [r0, #17]
    361c:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    3620:	f11c 0c00 	adds.w	ip, ip, #0
    3624:	bf18      	it	ne
    3626:	f04f 0c01 	movne.w	ip, #1
    362a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    362e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    NRF_SAADC->CH[channel].CONFIG =
    3632:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    NRF_SAADC->CH[channel].PSELP = pselp;
    3636:	f102 0351 	add.w	r3, r2, #81	; 0x51
    363a:	011b      	lsls	r3, r3, #4
			++active_channels;
    363c:	3101      	adds	r1, #1
    363e:	50ee      	str	r6, [r5, r3]
    3640:	b2c9      	uxtb	r1, r1
    3642:	3201      	adds	r2, #1
	} while (++channel_id < NRF_SAADC_CHANNEL_COUNT);
    3644:	2a08      	cmp	r2, #8
    3646:	d1c6      	bne.n	35d6 <start_read.isra.5+0x36>
	error = set_resolution(sequence);
    3648:	7c02      	ldrb	r2, [r0, #16]
	switch (sequence->resolution) {
    364a:	f1a2 0308 	sub.w	r3, r2, #8
    364e:	2b06      	cmp	r3, #6
    3650:	d824      	bhi.n	369c <start_read.isra.5+0xfc>
    3652:	e8df f003 	tbb	[pc, r3]
    3656:	2333      	.short	0x2333
    3658:	23352309 	.word	0x23352309
    365c:	21          	.byte	0x21
    365d:	00          	.byte	0x00
    365e:	f102 0651 	add.w	r6, r2, #81	; 0x51
    3662:	0136      	lsls	r6, r6, #4
    3664:	51ab      	str	r3, [r5, r6]
    3666:	e7ec      	b.n	3642 <start_read.isra.5+0xa2>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    3668:	2201      	movs	r2, #1
    NRF_SAADC->RESOLUTION = resolution;
    366a:	4b5e      	ldr	r3, [pc, #376]	; (37e4 <start_read.isra.5+0x244>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    366c:	2901      	cmp	r1, #1
    366e:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    3672:	7c42      	ldrb	r2, [r0, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3674:	d926      	bls.n	36c4 <start_read.isra.5+0x124>
    3676:	b37a      	cbz	r2, 36d8 <start_read.isra.5+0x138>
		LOG_ERR(
    3678:	2301      	movs	r3, #1
    367a:	f04f 0200 	mov.w	r2, #0
    367e:	f363 0202 	bfi	r2, r3, #0, #3
    3682:	4954      	ldr	r1, [pc, #336]	; (37d4 <start_read.isra.5+0x234>)
    3684:	4b54      	ldr	r3, [pc, #336]	; (37d8 <start_read.isra.5+0x238>)
    3686:	485a      	ldr	r0, [pc, #360]	; (37f0 <start_read.isra.5+0x250>)
    3688:	1a5b      	subs	r3, r3, r1
    368a:	f36f 02c5 	bfc	r2, #3, #3
    368e:	08db      	lsrs	r3, r3, #3
    3690:	f363 128f 	bfi	r2, r3, #6, #10
    3694:	4957      	ldr	r1, [pc, #348]	; (37f4 <start_read.isra.5+0x254>)
    3696:	e798      	b.n	35ca <start_read.isra.5+0x2a>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3698:	2203      	movs	r2, #3
    369a:	e7e6      	b.n	366a <start_read.isra.5+0xca>
		LOG_ERR("ADC resolution value %d is not valid",
    369c:	2101      	movs	r1, #1
    369e:	f04f 0300 	mov.w	r3, #0
    36a2:	f361 0302 	bfi	r3, r1, #0, #3
    36a6:	484b      	ldr	r0, [pc, #300]	; (37d4 <start_read.isra.5+0x234>)
    36a8:	494b      	ldr	r1, [pc, #300]	; (37d8 <start_read.isra.5+0x238>)
    36aa:	1a09      	subs	r1, r1, r0
    36ac:	08c9      	lsrs	r1, r1, #3
    36ae:	f36f 03c5 	bfc	r3, #3, #3
    36b2:	f361 138f 	bfi	r3, r1, #6, #10
    36b6:	4850      	ldr	r0, [pc, #320]	; (37f8 <start_read.isra.5+0x258>)
    36b8:	4950      	ldr	r1, [pc, #320]	; (37fc <start_read.isra.5+0x25c>)
    36ba:	e7a4      	b.n	3606 <start_read.isra.5+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    36bc:	2200      	movs	r2, #0
    36be:	e7d4      	b.n	366a <start_read.isra.5+0xca>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    36c0:	2202      	movs	r2, #2
    36c2:	e7d2      	b.n	366a <start_read.isra.5+0xca>
	switch (sequence->oversampling) {
    36c4:	2a08      	cmp	r2, #8
    36c6:	d836      	bhi.n	3736 <start_read.isra.5+0x196>
    36c8:	e8df f002 	tbb	[pc, r2]
    36cc:	29270545 	.word	0x29270545
    36d0:	312f2d2b 	.word	0x312f2d2b
    36d4:	33          	.byte	0x33
    36d5:	00          	.byte	0x00
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_2X;
    36d6:	2201      	movs	r2, #1
	if (sequence->options) {
    36d8:	6805      	ldr	r5, [r0, #0]
    NRF_SAADC->OVERSAMPLE = oversample;
    36da:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    36de:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    36e0:	b115      	cbz	r5, 36e8 <start_read.isra.5+0x148>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    36e2:	892a      	ldrh	r2, [r5, #8]
    36e4:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    36e8:	68c2      	ldr	r2, [r0, #12]
    36ea:	429a      	cmp	r2, r3
    36ec:	d235      	bcs.n	375a <start_read.isra.5+0x1ba>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    36ee:	2101      	movs	r1, #1
    36f0:	f04f 0000 	mov.w	r0, #0
    36f4:	f361 0002 	bfi	r0, r1, #0, #3
    36f8:	4c36      	ldr	r4, [pc, #216]	; (37d4 <start_read.isra.5+0x234>)
    36fa:	4937      	ldr	r1, [pc, #220]	; (37d8 <start_read.isra.5+0x238>)
    36fc:	1b09      	subs	r1, r1, r4
    36fe:	08c9      	lsrs	r1, r1, #3
    3700:	f36f 00c5 	bfc	r0, #3, #3
    3704:	f361 108f 	bfi	r0, r1, #6, #10
    3708:	f8ad 0000 	strh.w	r0, [sp]
    370c:	493c      	ldr	r1, [pc, #240]	; (3800 <start_read.isra.5+0x260>)
    370e:	483d      	ldr	r0, [pc, #244]	; (3804 <start_read.isra.5+0x264>)
    3710:	f7fd fe82 	bl	1418 <log_3>
		return -ENOMEM;
    3714:	f06f 050b 	mvn.w	r5, #11
    3718:	e779      	b.n	360e <start_read.isra.5+0x6e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_4X;
    371a:	2202      	movs	r2, #2
    371c:	e7dc      	b.n	36d8 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_8X;
    371e:	2203      	movs	r2, #3
    3720:	e7da      	b.n	36d8 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_16X;
    3722:	2204      	movs	r2, #4
    3724:	e7d8      	b.n	36d8 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_32X;
    3726:	2205      	movs	r2, #5
    3728:	e7d6      	b.n	36d8 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_64X;
    372a:	2206      	movs	r2, #6
    372c:	e7d4      	b.n	36d8 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_128X;
    372e:	2207      	movs	r2, #7
    3730:	e7d2      	b.n	36d8 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
    3732:	2208      	movs	r2, #8
    3734:	e7d0      	b.n	36d8 <start_read.isra.5+0x138>
		LOG_ERR("Oversampling value %d is not valid",
    3736:	2101      	movs	r1, #1
    3738:	f04f 0300 	mov.w	r3, #0
    373c:	f361 0302 	bfi	r3, r1, #0, #3
    3740:	4824      	ldr	r0, [pc, #144]	; (37d4 <start_read.isra.5+0x234>)
    3742:	4925      	ldr	r1, [pc, #148]	; (37d8 <start_read.isra.5+0x238>)
    3744:	1a09      	subs	r1, r1, r0
    3746:	08c9      	lsrs	r1, r1, #3
    3748:	f36f 03c5 	bfc	r3, #3, #3
    374c:	f361 138f 	bfi	r3, r1, #6, #10
    3750:	482d      	ldr	r0, [pc, #180]	; (3808 <start_read.isra.5+0x268>)
    3752:	4928      	ldr	r1, [pc, #160]	; (37f4 <start_read.isra.5+0x254>)
    3754:	e757      	b.n	3606 <start_read.isra.5+0x66>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_DISABLED;
    3756:	2200      	movs	r2, #0
    3758:	e7be      	b.n	36d8 <start_read.isra.5+0x138>
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
    375a:	4b22      	ldr	r3, [pc, #136]	; (37e4 <start_read.isra.5+0x244>)
    375c:	6882      	ldr	r2, [r0, #8]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = sequence;
    375e:	4c22      	ldr	r4, [pc, #136]	; (37e8 <start_read.isra.5+0x248>)
    3760:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    NRF_SAADC->RESULT.MAXCNT = size;
    3764:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
	ctx->status = 0;
    3768:	2100      	movs	r1, #0
	ctx->sequence = sequence;
    376a:	66e0      	str	r0, [r4, #108]	; 0x6c
	ctx->status = 0;
    376c:	6621      	str	r1, [r4, #96]	; 0x60

	if (ctx->sequence->options) {
    376e:	b365      	cbz	r5, 37ca <start_read.isra.5+0x22a>
		ctx->sampling_index = 0;

		if (ctx->sequence->options->interval_us != 0) {
    3770:	682b      	ldr	r3, [r5, #0]
		ctx->sampling_index = 0;
    3772:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
		if (ctx->sequence->options->interval_us != 0) {
    3776:	b343      	cbz	r3, 37ca <start_read.isra.5+0x22a>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3778:	f3bf 8f5b 	dmb	ish
    377c:	e854 3f00 	ldrex	r3, [r4]
    3780:	e844 1200 	strex	r2, r1, [r4]
    3784:	2a00      	cmp	r2, #0
    3786:	d1f9      	bne.n	377c <start_read.isra.5+0x1dc>
    3788:	f3bf 8f5b 	dmb	ish
	u32_t interval_us = ctx->sequence->options->interval_us;
    378c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    378e:	681b      	ldr	r3, [r3, #0]
	u32_t interval_ms = ceiling_fraction(interval_us, 1000UL);
    3790:	681b      	ldr	r3, [r3, #0]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    3792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3796:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
    379a:	1d20      	adds	r0, r4, #4
    379c:	fbb3 f2f2 	udiv	r2, r3, r2
    37a0:	f001 fb80 	bl	4ea4 <_impl_k_timer_start>
	if (ctx->asynchronous) {
    37a4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    37a8:	b993      	cbnz	r3, 37d0 <start_read.isra.5+0x230>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    37aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    37ae:	4817      	ldr	r0, [pc, #92]	; (380c <start_read.isra.5+0x26c>)
    37b0:	f001 f917 	bl	49e2 <_impl_k_sem_take>
	return ctx->status;
    37b4:	6e25      	ldr	r5, [r4, #96]	; 0x60
	if (ctx->asynchronous && (status == 0)) {
    37b6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    37ba:	b113      	cbz	r3, 37c2 <start_read.isra.5+0x222>
    37bc:	2d00      	cmp	r5, #0
    37be:	f43f af26 	beq.w	360e <start_read.isra.5+0x6e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    37c2:	4813      	ldr	r0, [pc, #76]	; (3810 <start_read.isra.5+0x270>)
    37c4:	f001 f8e6 	bl	4994 <_impl_k_sem_give>
    37c8:	e721      	b.n	360e <start_read.isra.5+0x6e>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    37ca:	f7ff febd 	bl	3548 <adc_context_start_sampling.isra.1>
    37ce:	e7e9      	b.n	37a4 <start_read.isra.5+0x204>
		return 0;
    37d0:	2500      	movs	r5, #0
    37d2:	e7f0      	b.n	37b6 <start_read.isra.5+0x216>
    37d4:	000050c4 	.word	0x000050c4
    37d8:	000050c4 	.word	0x000050c4
    37dc:	000058e8 	.word	0x000058e8
    37e0:	00005854 	.word	0x00005854
    37e4:	40007000 	.word	0x40007000
    37e8:	20001cd0 	.word	0x20001cd0
    37ec:	0000590a 	.word	0x0000590a
    37f0:	00005951 	.word	0x00005951
    37f4:	00005831 	.word	0x00005831
    37f8:	00005928 	.word	0x00005928
    37fc:	00005822 	.word	0x00005822
    3800:	00005842 	.word	0x00005842
    3804:	000059ae 	.word	0x000059ae
    3808:	00005987 	.word	0x00005987
    380c:	20001d18 	.word	0x20001d18
    3810:	20001d00 	.word	0x20001d00

00003814 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3814:	1f03      	subs	r3, r0, #4
    3816:	f3bf 8f5b 	dmb	ish
    381a:	e853 2f00 	ldrex	r2, [r3]
    381e:	1c51      	adds	r1, r2, #1
    3820:	e843 1c00 	strex	ip, r1, [r3]
    3824:	f1bc 0f00 	cmp.w	ip, #0
    3828:	d1f7      	bne.n	381a <adc_context_on_timer_expired+0x6>
    382a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    382e:	b90a      	cbnz	r2, 3834 <adc_context_on_timer_expired+0x20>
		adc_context_start_sampling(ctx);
    3830:	f7ff be8a 	b.w	3548 <adc_context_start_sampling.isra.1>
		ctx->status = -EIO;
    3834:	f06f 0304 	mvn.w	r3, #4
    3838:	65c3      	str	r3, [r0, #92]	; 0x5c
}
    383a:	4770      	bx	lr

0000383c <adc_nrfx_read>:
{
    383c:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    383e:	4c08      	ldr	r4, [pc, #32]	; (3860 <adc_nrfx_read+0x24>)
    3840:	460d      	mov	r5, r1
    3842:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3846:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    384a:	f001 f8ca 	bl	49e2 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    384e:	2300      	movs	r3, #0
    3850:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
    3854:	6663      	str	r3, [r4, #100]	; 0x64
	return start_read(dev, sequence);
    3856:	4628      	mov	r0, r5
}
    3858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_read(dev, sequence);
    385c:	f7ff bea0 	b.w	35a0 <start_read.isra.5>
    3860:	20001cd0 	.word	0x20001cd0

00003864 <adc_nrfx_read_async>:
{
    3864:	b570      	push	{r4, r5, r6, lr}
    3866:	4c09      	ldr	r4, [pc, #36]	; (388c <adc_nrfx_read_async+0x28>)
    3868:	460d      	mov	r5, r1
    386a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    386e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3872:	4616      	mov	r6, r2
    3874:	f001 f8b5 	bl	49e2 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3878:	2301      	movs	r3, #1
    387a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
    387e:	6666      	str	r6, [r4, #100]	; 0x64
	return start_read(dev, sequence);
    3880:	4628      	mov	r0, r5
}
    3882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_read(dev, sequence);
    3886:	f7ff be8b 	b.w	35a0 <start_read.isra.5>
    388a:	bf00      	nop
    388c:	20001cd0 	.word	0x20001cd0

00003890 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event);
    3890:	4b2f      	ldr	r3, [pc, #188]	; (3950 <saadc_irq_handler+0xc0>)
    3892:	681a      	ldr	r2, [r3, #0]
{
    3894:	b513      	push	{r0, r1, r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC_EVENT_END)) {
    3896:	2a00      	cmp	r2, #0
    3898:	d041      	beq.n	391e <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
    389a:	2200      	movs	r2, #0
    389c:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
    389e:	681b      	ldr	r3, [r3, #0]
    38a0:	9301      	str	r3, [sp, #4]
    (void)dummy;
    38a2:	9b01      	ldr	r3, [sp, #4]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						struct device *dev)
{
	if (ctx->sequence->options) {
    38a4:	4c2b      	ldr	r4, [pc, #172]	; (3954 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
    38a6:	4b2c      	ldr	r3, [pc, #176]	; (3958 <saadc_irq_handler+0xc8>)
    38a8:	2101      	movs	r1, #1
    38aa:	6019      	str	r1, [r3, #0]
    38ac:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    38ae:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    38b2:	680b      	ldr	r3, [r1, #0]
    38b4:	2b00      	cmp	r3, #0
    38b6:	d03b      	beq.n	3930 <saadc_irq_handler+0xa0>
		adc_sequence_callback callback =
    38b8:	685b      	ldr	r3, [r3, #4]
    38ba:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
			ctx->sequence->options->callback;
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    38be:	b123      	cbz	r3, 38ca <saadc_irq_handler+0x3a>
			action = callback(dev,
    38c0:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    38c2:	2801      	cmp	r0, #1
    38c4:	d015      	beq.n	38f2 <saadc_irq_handler+0x62>
    38c6:	2802      	cmp	r0, #2
    38c8:	d02b      	beq.n	3922 <saadc_irq_handler+0x92>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->sequence->options->extra_samplings) {
    38ca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
			if (ctx->sampling_index <
    38cc:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
			    ctx->sequence->options->extra_samplings) {
    38d0:	6812      	ldr	r2, [r2, #0]
			if (ctx->sampling_index <
    38d2:	8912      	ldrh	r2, [r2, #8]
    38d4:	429a      	cmp	r2, r3
    38d6:	d924      	bls.n	3922 <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    38d8:	3301      	adds	r3, #1
    38da:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    return (nrf_saadc_value_t *)NRF_SAADC->RESULT.PTR;
    38de:	4b1f      	ldr	r3, [pc, #124]	; (395c <saadc_irq_handler+0xcc>)
    38e0:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return NRF_SAADC->RESULT.AMOUNT;
    38e4:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get() +
    38e8:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    38ea:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
    38ee:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->sequence->options->interval_us == 0) {
    38f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    38f4:	681b      	ldr	r3, [r3, #0]
    38f6:	681b      	ldr	r3, [r3, #0]
    38f8:	b923      	cbnz	r3, 3904 <saadc_irq_handler+0x74>
}
    38fa:	b002      	add	sp, #8
    38fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				adc_context_start_sampling(ctx);
    3900:	f7ff be22 	b.w	3548 <adc_context_start_sampling.isra.1>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3904:	f3bf 8f5b 	dmb	ish
    3908:	e854 3f00 	ldrex	r3, [r4]
    390c:	1e5a      	subs	r2, r3, #1
    390e:	e844 2100 	strex	r1, r2, [r4]
    3912:	2900      	cmp	r1, #0
    3914:	d1f8      	bne.n	3908 <saadc_irq_handler+0x78>
    3916:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    391a:	2b01      	cmp	r3, #1
    391c:	dced      	bgt.n	38fa <saadc_irq_handler+0x6a>
    391e:	b002      	add	sp, #8
    3920:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->sequence->options->interval_us != 0) {
    3922:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    3924:	681b      	ldr	r3, [r3, #0]
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	b113      	cbz	r3, 3930 <saadc_irq_handler+0xa0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    392a:	480d      	ldr	r0, [pc, #52]	; (3960 <saadc_irq_handler+0xd0>)
    392c:	f001 faf2 	bl	4f14 <_impl_k_timer_stop>
	if (ctx->asynchronous) {
    3930:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    3934:	b153      	cbz	r3, 394c <saadc_irq_handler+0xbc>
		if (ctx->signal) {
    3936:	6e60      	ldr	r0, [r4, #100]	; 0x64
    3938:	b110      	cbz	r0, 3940 <saadc_irq_handler+0xb0>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    393a:	2100      	movs	r1, #0
    393c:	f001 fb5b 	bl	4ff6 <_impl_k_poll_signal>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3940:	4808      	ldr	r0, [pc, #32]	; (3964 <saadc_irq_handler+0xd4>)
    3942:	b002      	add	sp, #8
    3944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3948:	f001 b824 	b.w	4994 <_impl_k_sem_give>
    394c:	4806      	ldr	r0, [pc, #24]	; (3968 <saadc_irq_handler+0xd8>)
    394e:	e7f8      	b.n	3942 <saadc_irq_handler+0xb2>
    3950:	40007104 	.word	0x40007104
    3954:	20001cd0 	.word	0x20001cd0
    3958:	40007008 	.word	0x40007008
    395c:	40007000 	.word	0x40007000
    3960:	20001cd4 	.word	0x20001cd4
    3964:	20001d00 	.word	0x20001d00
    3968:	20001d18 	.word	0x20001d18

0000396c <gpio_nrfx_write>:
	return 0;
}

static int gpio_nrfx_write(struct device *port, int access_op,
			   u32_t pin, u32_t value)
{
    396c:	b510      	push	{r4, lr}
	return port->config->config_info;
    396e:	6804      	ldr	r4, [r0, #0]
    3970:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3972:	68a4      	ldr	r4, [r4, #8]
    3974:	69c0      	ldr	r0, [r0, #28]
    3976:	6824      	ldr	r4, [r4, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	if (access_op == GPIO_ACCESS_BY_PORT) {
    3978:	2901      	cmp	r1, #1
    397a:	d104      	bne.n	3986 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    397c:	4058      	eors	r0, r3
}


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
    397e:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	return 0;
}
    3982:	2000      	movs	r0, #0
    3984:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    3986:	3300      	adds	r3, #0
    3988:	fa20 f002 	lsr.w	r0, r0, r2
    398c:	f04f 0101 	mov.w	r1, #1
    3990:	bf18      	it	ne
    3992:	2301      	movne	r3, #1
    3994:	f000 0001 	and.w	r0, r0, #1
    3998:	4091      	lsls	r1, r2
    399a:	4283      	cmp	r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    399c:	bf14      	ite	ne
    399e:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    39a2:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    39a6:	e7ec      	b.n	3982 <gpio_nrfx_write+0x16>

000039a8 <gpio_nrfx_read>:

static int gpio_nrfx_read(struct device *port, int access_op,
			  u32_t pin, u32_t *value)
{
    39a8:	b510      	push	{r4, lr}
	return port->config->config_info;
    39aa:	6804      	ldr	r4, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
	struct gpio_nrfx_data *data = get_port_data(port);

	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    39ac:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    39ae:	68a4      	ldr	r4, [r4, #8]
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    39b0:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    39b2:	6824      	ldr	r4, [r4, #0]
    return p_reg->IN;
    39b4:	f8d4 4510 	ldr.w	r4, [r4, #1296]	; 0x510

	if (access_op == GPIO_ACCESS_BY_PORT) {
    39b8:	2901      	cmp	r1, #1
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    39ba:	ea80 0004 	eor.w	r0, r0, r4
		*value = port_in;
	} else {
		*value = (port_in & BIT(pin)) ? 1 : 0;
    39be:	bf1c      	itt	ne
    39c0:	40d0      	lsrne	r0, r2
    39c2:	f000 0001 	andne.w	r0, r0, #1
    39c6:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
    39c8:	2000      	movs	r0, #0
    39ca:	bd10      	pop	{r4, pc}

000039cc <gpio_nrfx_manage_callback>:

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
	_gpio_manage_callback(&get_port_data(port)->callbacks, callback, set);
    39cc:	6883      	ldr	r3, [r0, #8]
    39ce:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    39d0:	b172      	cbz	r2, 39f0 <gpio_nrfx_manage_callback+0x24>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    39d2:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
    39d4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    39d6:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    39d8:	b902      	cbnz	r2, 39dc <gpio_nrfx_manage_callback+0x10>
	list->tail = node;
    39da:	6059      	str	r1, [r3, #4]
	return 0;
}
    39dc:	2000      	movs	r0, #0
    39de:	4770      	bx	lr
	parent->next = child;
    39e0:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    39e2:	6858      	ldr	r0, [r3, #4]
    39e4:	4281      	cmp	r1, r0
	list->tail = node;
    39e6:	bf08      	it	eq
    39e8:	605a      	streq	r2, [r3, #4]
    39ea:	e00d      	b.n	3a08 <gpio_nrfx_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    39ec:	4602      	mov	r2, r0
    39ee:	6800      	ldr	r0, [r0, #0]
    39f0:	2800      	cmp	r0, #0
    39f2:	d0f3      	beq.n	39dc <gpio_nrfx_manage_callback+0x10>
    39f4:	4288      	cmp	r0, r1
    39f6:	d1f9      	bne.n	39ec <gpio_nrfx_manage_callback+0x20>
    39f8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    39fa:	2a00      	cmp	r2, #0
    39fc:	d1f0      	bne.n	39e0 <gpio_nrfx_manage_callback+0x14>
    39fe:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    3a00:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    3a02:	4291      	cmp	r1, r2
    3a04:	d100      	bne.n	3a08 <gpio_nrfx_manage_callback+0x3c>
	list->tail = node;
    3a06:	6058      	str	r0, [r3, #4]
	parent->next = child;
    3a08:	2300      	movs	r3, #0
    3a0a:	600b      	str	r3, [r1, #0]
    3a0c:	e7e6      	b.n	39dc <gpio_nrfx_manage_callback+0x10>
	...

00003a10 <gpio_nrfx_init>:
		}
	}
}

static int gpio_nrfx_init(struct device *port)
{
    3a10:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    3a12:	4b09      	ldr	r3, [pc, #36]	; (3a38 <gpio_nrfx_init+0x28>)
    3a14:	781a      	ldrb	r2, [r3, #0]
    3a16:	b96a      	cbnz	r2, 3a34 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    3a18:	2101      	movs	r1, #1
    3a1a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(CONFIG_GPIOTE_IRQ, CONFIG_GPIOTE_IRQ_PRI,
    3a1c:	2006      	movs	r0, #6
    3a1e:	2105      	movs	r1, #5
    3a20:	f7fe fe5a 	bl	26d8 <_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(CONFIG_GPIOTE_IRQ);
    3a24:	2006      	movs	r0, #6
    3a26:	f7fe fe33 	bl	2690 <_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    3a2a:	4b04      	ldr	r3, [pc, #16]	; (3a3c <gpio_nrfx_init+0x2c>)
    3a2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3a30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3a34:	2000      	movs	r0, #0
    3a36:	bd08      	pop	{r3, pc}
    3a38:	2000050c 	.word	0x2000050c
    3a3c:	40006000 	.word	0x40006000

00003a40 <check_level_trigger_pins.constprop.11>:
	struct gpio_nrfx_data *data = get_port_data(port);
    3a40:	4a0b      	ldr	r2, [pc, #44]	; (3a70 <check_level_trigger_pins.constprop.11+0x30>)
    3a42:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    3a44:	6812      	ldr	r2, [r2, #0]
	u32_t port_in = nrf_gpio_port_in_read(get_port_cfg(port)->port);
    3a46:	6892      	ldr	r2, [r2, #8]
    3a48:	6812      	ldr	r2, [r2, #0]
static u32_t check_level_trigger_pins(struct device *port)
    3a4a:	b510      	push	{r4, lr}
    3a4c:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	out &= ~data->trig_edge & ~data->double_edge;
    3a50:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    3a54:	4311      	orrs	r1, r2
    3a56:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    3a5a:	4002      	ands	r2, r0
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    3a5c:	69d8      	ldr	r0, [r3, #28]
    3a5e:	691b      	ldr	r3, [r3, #16]
    3a60:	4058      	eors	r0, r3
	out &= ~data->trig_edge & ~data->double_edge;
    3a62:	ea22 0201 	bic.w	r2, r2, r1
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    3a66:	4060      	eors	r0, r4
}
    3a68:	ea22 0000 	bic.w	r0, r2, r0
    3a6c:	bd10      	pop	{r4, pc}
    3a6e:	bf00      	nop
    3a70:	20001db4 	.word	0x20001db4

00003a74 <gpiote_event_handler>:
{
    3a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    3a76:	4d23      	ldr	r5, [pc, #140]	; (3b04 <gpiote_event_handler+0x90>)
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
    3a78:	682b      	ldr	r3, [r5, #0]
    3a7a:	2b01      	cmp	r3, #1
    3a7c:	d133      	bne.n	3ae6 <gpiote_event_handler+0x72>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    3a7e:	f7ff ffdf 	bl	3a40 <check_level_trigger_pins.constprop.11>
    3a82:	4606      	mov	r6, r0
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3a84:	2300      	movs	r3, #0
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    3a86:	4c20      	ldr	r4, [pc, #128]	; (3b08 <gpiote_event_handler+0x94>)
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    3a88:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3a8a:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    3a8c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
    3a90:	fa07 f103 	lsl.w	r1, r7, r3
    3a94:	4211      	tst	r1, r2
    3a96:	d014      	beq.n	3ac2 <gpiote_event_handler+0x4e>
    3a98:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    3a9c:	f502 52c2 	add.w	r2, r2, #6208	; 0x1840
    3aa0:	0092      	lsls	r2, r2, #2
    3aa2:	6811      	ldr	r1, [r2, #0]
    3aa4:	2901      	cmp	r1, #1
    3aa6:	d10c      	bne.n	3ac2 <gpiote_event_handler+0x4e>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3aa8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    3aac:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3ab0:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    3ab4:	6812      	ldr	r2, [r2, #0]
    3ab6:	9200      	str	r2, [sp, #0]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3ab8:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
    3abc:	4081      	lsls	r1, r0
    (void)dummy;
    3abe:	9a00      	ldr	r2, [sp, #0]
    3ac0:	430e      	orrs	r6, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3ac2:	3301      	adds	r3, #1
    3ac4:	2b08      	cmp	r3, #8
    3ac6:	d1e1      	bne.n	3a8c <gpiote_event_handler+0x18>
	if (fired_triggers[0]) {
    3ac8:	b17e      	cbz	r6, 3aea <gpiote_event_handler+0x76>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    3aca:	4f10      	ldr	r7, [pc, #64]	; (3b0c <gpiote_event_handler+0x98>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    3acc:	68bb      	ldr	r3, [r7, #8]
    3ace:	681c      	ldr	r4, [r3, #0]
    3ad0:	b15c      	cbz	r4, 3aea <gpiote_event_handler+0x76>
		if (cb->pin_mask & pins) {
    3ad2:	68a3      	ldr	r3, [r4, #8]
    3ad4:	421e      	tst	r6, r3
    3ad6:	d004      	beq.n	3ae2 <gpiote_event_handler+0x6e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    3ad8:	6863      	ldr	r3, [r4, #4]
    3ada:	4632      	mov	r2, r6
    3adc:	4621      	mov	r1, r4
    3ade:	4638      	mov	r0, r7
    3ae0:	4798      	blx	r3
	return node->next;
    3ae2:	6824      	ldr	r4, [r4, #0]
    3ae4:	e7f4      	b.n	3ad0 <gpiote_event_handler+0x5c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    3ae6:	2600      	movs	r6, #0
    3ae8:	e7cc      	b.n	3a84 <gpiote_event_handler+0x10>
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
    3aea:	682b      	ldr	r3, [r5, #0]
    3aec:	2b01      	cmp	r3, #1
    3aee:	d106      	bne.n	3afe <gpiote_event_handler+0x8a>
		u32_t active_level_triggers =
    3af0:	f7ff ffa6 	bl	3a40 <check_level_trigger_pins.constprop.11>
		if (active_level_triggers == 0) {
    3af4:	b918      	cbnz	r0, 3afe <gpiote_event_handler+0x8a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3af6:	6028      	str	r0, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    3af8:	682b      	ldr	r3, [r5, #0]
    3afa:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3afc:	9b01      	ldr	r3, [sp, #4]
}
    3afe:	b003      	add	sp, #12
    3b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b02:	bf00      	nop
    3b04:	4000617c 	.word	0x4000617c
    3b08:	40006000 	.word	0x40006000
    3b0c:	20001db4 	.word	0x20001db4

00003b10 <gpiote_pin_int_cfg>:
{
    3b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
    3b12:	6803      	ldr	r3, [r0, #0]
    return (NRF_GPIOTE->INTENSET & mask);
    3b14:	4d58      	ldr	r5, [pc, #352]	; (3c78 <gpiote_pin_int_cfg+0x168>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b16:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    3b18:	6884      	ldr	r4, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b1a:	791a      	ldrb	r2, [r3, #4]
    3b1c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3b20:	f001 031f 	and.w	r3, r1, #31
    3b24:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    3b28:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3b2a:	2200      	movs	r2, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3b2c:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    3b30:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    3b34:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    3b38:	42b3      	cmp	r3, r6
    3b3a:	d175      	bne.n	3c28 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    3b3c:	fa20 f602 	lsr.w	r6, r0, r2
    3b40:	07f6      	lsls	r6, r6, #31
    3b42:	d571      	bpl.n	3c28 <gpiote_pin_int_cfg+0x118>
    3b44:	0090      	lsls	r0, r2, #2
    3b46:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3b4a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3b4e:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
    3b52:	f026 0601 	bic.w	r6, r6, #1
    3b56:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    3b5a:	2001      	movs	r0, #1
    3b5c:	fa00 f202 	lsl.w	r2, r0, r2
    NRF_GPIOTE->INTENCLR = mask;
    3b60:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    3b64:	009a      	lsls	r2, r3, #2
    3b66:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    3b6a:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    3b6e:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    3b72:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3b76:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    3b7a:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    3b7e:	68a0      	ldr	r0, [r4, #8]
    3b80:	40c8      	lsrs	r0, r1
    3b82:	f010 0001 	ands.w	r0, r0, #1
    3b86:	d04d      	beq.n	3c24 <gpiote_pin_int_cfg+0x114>
    3b88:	68e0      	ldr	r0, [r4, #12]
    3b8a:	40c8      	lsrs	r0, r1
    3b8c:	f010 0001 	ands.w	r0, r0, #1
    3b90:	d048      	beq.n	3c24 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    3b92:	6960      	ldr	r0, [r4, #20]
    3b94:	40c8      	lsrs	r0, r1
    3b96:	f010 0001 	ands.w	r0, r0, #1
    3b9a:	d052      	beq.n	3c42 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    3b9c:	69a2      	ldr	r2, [r4, #24]
    3b9e:	40ca      	lsrs	r2, r1
    3ba0:	07d2      	lsls	r2, r2, #31
    3ba2:	d446      	bmi.n	3c32 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0)
    3ba4:	6922      	ldr	r2, [r4, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    3ba6:	69e0      	ldr	r0, [r4, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
    3ba8:	40ca      	lsrs	r2, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    3baa:	fa20 f101 	lsr.w	r1, r0, r1
			} else if (((data->active_level & BIT(pin)) != 0)
    3bae:	f002 0201 	and.w	r2, r2, #1
    3bb2:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    3bb6:	428a      	cmp	r2, r1
    3bb8:	bf0c      	ite	eq
    3bba:	2102      	moveq	r1, #2
    3bbc:	2101      	movne	r1, #1
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    3bbe:	4f2e      	ldr	r7, [pc, #184]	; (3c78 <gpiote_pin_int_cfg+0x168>)
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    3bc0:	2500      	movs	r5, #0
    3bc2:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    3bc6:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    3bca:	f010 0003 	ands.w	r0, r0, #3
    3bce:	d132      	bne.n	3c36 <gpiote_pin_int_cfg+0x126>
			nrf_gpiote_events_t evt =
    3bd0:	00ac      	lsls	r4, r5, #2
    3bd2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    3bd6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bda:	021b      	lsls	r3, r3, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3bdc:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    3be0:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    3be4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    3be8:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bec:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    3bf0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    3bf4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    return ((uint32_t)NRF_GPIOTE + event);
    3bf8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    3bfc:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c00:	4331      	orrs	r1, r6
    3c02:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3c06:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3c0c:	9b01      	ldr	r3, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3c0e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    3c12:	f043 0301 	orr.w	r3, r3, #1
    3c16:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    3c1a:	2301      	movs	r3, #1
    3c1c:	fa03 f505 	lsl.w	r5, r3, r5
    NRF_GPIOTE->INTENSET = mask;
    3c20:	f8c7 5304 	str.w	r5, [r7, #772]	; 0x304
}
    3c24:	b003      	add	sp, #12
    3c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3c28:	3201      	adds	r2, #1
    3c2a:	2a08      	cmp	r2, #8
    3c2c:	f47f af7e 	bne.w	3b2c <gpiote_pin_int_cfg+0x1c>
    3c30:	e798      	b.n	3b64 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3c32:	2103      	movs	r1, #3
    3c34:	e7c3      	b.n	3bbe <gpiote_pin_int_cfg+0xae>
    3c36:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3c38:	2d08      	cmp	r5, #8
    3c3a:	d1c2      	bne.n	3bc2 <gpiote_pin_int_cfg+0xb2>
	return -ENODEV;
    3c3c:	f06f 0012 	mvn.w	r0, #18
    3c40:	e7f0      	b.n	3c24 <gpiote_pin_int_cfg+0x114>
			if (((data->active_level & BIT(pin)) != 0)
    3c42:	6923      	ldr	r3, [r4, #16]
			    ^ ((BIT(pin) & data->inverted) != 0)) {
    3c44:	69e4      	ldr	r4, [r4, #28]
			if (((data->active_level & BIT(pin)) != 0)
    3c46:	40cb      	lsrs	r3, r1
			    ^ ((BIT(pin) & data->inverted) != 0)) {
    3c48:	fa24 f101 	lsr.w	r1, r4, r1
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    3c4c:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
    3c50:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    3c54:	f8c2 4700 	str.w	r4, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3c58:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
			if (((data->active_level & BIT(pin)) != 0)
    3c5c:	f003 0301 	and.w	r3, r3, #1
    3c60:	f001 0101 	and.w	r1, r1, #1
    3c64:	428b      	cmp	r3, r1
    3c66:	bf0c      	ite	eq
    3c68:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    3c6c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    3c70:	4323      	orrs	r3, r4
    3c72:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    3c76:	e7d5      	b.n	3c24 <gpiote_pin_int_cfg+0x114>
    3c78:	40006000 	.word	0x40006000

00003c7c <gpio_nrfx_config>:
{
    3c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c80:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    3c82:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3c84:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    3c88:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    3c8c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3c8e:	d04a      	beq.n	3d26 <gpio_nrfx_config+0xaa>
    3c90:	dc2d      	bgt.n	3cee <gpio_nrfx_config+0x72>
    3c92:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    3c96:	d03e      	beq.n	3d16 <gpio_nrfx_config+0x9a>
    3c98:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    3c9c:	d03f      	beq.n	3d1e <gpio_nrfx_config+0xa2>
    3c9e:	bb68      	cbnz	r0, 3cfc <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3ca0:	f406 7740 	and.w	r7, r6, #768	; 0x300
    3ca4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    3ca8:	d03f      	beq.n	3d2a <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
    3caa:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    3cae:	4263      	negs	r3, r4
    3cb0:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    3cb2:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    3cb6:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3cba:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3cbc:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    3cc0:	bf18      	it	ne
    3cc2:	b2d4      	uxtbne	r4, r2
    3cc4:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    3cc8:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    3ccc:	bf12      	itee	ne
    3cce:	46a1      	movne	r9, r4
		to_pin   = 31;
    3cd0:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0;
    3cd4:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3cd6:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    3cda:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3cde:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3ce2:	45a1      	cmp	r9, r4
    3ce4:	d223      	bcs.n	3d2e <gpio_nrfx_config+0xb2>
	return 0;
    3ce6:	2000      	movs	r0, #0
}
    3ce8:	b003      	add	sp, #12
    3cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3cee:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    3cf2:	d016      	beq.n	3d22 <gpio_nrfx_config+0xa6>
    3cf4:	dc05      	bgt.n	3d02 <gpio_nrfx_config+0x86>
    3cf6:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    3cfa:	d00e      	beq.n	3d1a <gpio_nrfx_config+0x9e>
		return -EINVAL;
    3cfc:	f06f 0015 	mvn.w	r0, #21
    3d00:	e7f2      	b.n	3ce8 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3d02:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    3d06:	d004      	beq.n	3d12 <gpio_nrfx_config+0x96>
    3d08:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    3d0c:	d1f6      	bne.n	3cfc <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
    3d0e:	2007      	movs	r0, #7
		break;
    3d10:	e7c6      	b.n	3ca0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    3d12:	2006      	movs	r0, #6
		break;
    3d14:	e7c4      	b.n	3ca0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    3d16:	2001      	movs	r0, #1
		break;
    3d18:	e7c2      	b.n	3ca0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    3d1a:	2003      	movs	r0, #3
		break;
    3d1c:	e7c0      	b.n	3ca0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    3d1e:	2004      	movs	r0, #4
		break;
    3d20:	e7be      	b.n	3ca0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    3d22:	2005      	movs	r0, #5
		break;
    3d24:	e7bc      	b.n	3ca0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    3d26:	2002      	movs	r0, #2
    3d28:	e7ba      	b.n	3ca0 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    3d2a:	2303      	movs	r3, #3
    3d2c:	e7c1      	b.n	3cb2 <gpio_nrfx_config+0x36>
	return port->config->config_info;
    3d2e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    3d32:	6892      	ldr	r2, [r2, #8]
    3d34:	7911      	ldrb	r1, [r2, #4]
    3d36:	f004 021f 	and.w	r2, r4, #31
    3d3a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    3d3e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3d42:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
    3d46:	fa0b f204 	lsl.w	r2, fp, r4
    3d4a:	68a9      	ldr	r1, [r5, #8]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d025      	beq.n	3d9c <gpio_nrfx_config+0x120>
    3d50:	4311      	orrs	r1, r2
    3d52:	60a9      	str	r1, [r5, #8]
    3d54:	6969      	ldr	r1, [r5, #20]
    3d56:	9301      	str	r3, [sp, #4]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    3d58:	06b0      	lsls	r0, r6, #26
    3d5a:	bf4c      	ite	mi
    3d5c:	4311      	orrmi	r1, r2
    3d5e:	4391      	bicpl	r1, r2
    3d60:	6169      	str	r1, [r5, #20]
    3d62:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    3d64:	0670      	lsls	r0, r6, #25
    3d66:	bf4c      	ite	mi
    3d68:	4311      	orrmi	r1, r2
    3d6a:	4391      	bicpl	r1, r2
    3d6c:	61a9      	str	r1, [r5, #24]
    3d6e:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
    3d70:	0770      	lsls	r0, r6, #29
    3d72:	bf4c      	ite	mi
    3d74:	4311      	orrmi	r1, r2
    3d76:	4391      	bicpl	r1, r2
    3d78:	6129      	str	r1, [r5, #16]
    3d7a:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    3d7c:	0630      	lsls	r0, r6, #24
    3d7e:	bf4c      	ite	mi
    3d80:	430a      	orrmi	r2, r1
    3d82:	ea21 0202 	bicpl.w	r2, r1, r2
    3d86:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3d88:	4621      	mov	r1, r4
    3d8a:	4640      	mov	r0, r8
    3d8c:	f7ff fec0 	bl	3b10 <gpiote_pin_int_cfg>
		if (res != 0) {
    3d90:	2800      	cmp	r0, #0
    3d92:	d1a9      	bne.n	3ce8 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3d94:	3401      	adds	r4, #1
    3d96:	b2e4      	uxtb	r4, r4
    3d98:	9b01      	ldr	r3, [sp, #4]
    3d9a:	e7a2      	b.n	3ce2 <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3d9c:	ea21 0102 	bic.w	r1, r1, r2
    3da0:	e7d7      	b.n	3d52 <gpio_nrfx_config+0xd6>

00003da2 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3da2:	2901      	cmp	r1, #1
{
    3da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    3da8:	bf18      	it	ne
    3daa:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    3dac:	6887      	ldr	r7, [r0, #8]
{
    3dae:	4606      	mov	r6, r0
		to_pin   = pin;
    3db0:	bf12      	itee	ne
    3db2:	4625      	movne	r5, r4
		to_pin   = 31;
    3db4:	251f      	moveq	r5, #31
		from_pin = 0;
    3db6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    3db8:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3dbc:	42ac      	cmp	r4, r5
    3dbe:	d902      	bls.n	3dc6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    3dc0:	2000      	movs	r0, #0
}
    3dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    3dc6:	68fb      	ldr	r3, [r7, #12]
    3dc8:	fa08 f204 	lsl.w	r2, r8, r4
    3dcc:	ea23 0302 	bic.w	r3, r3, r2
    3dd0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3dd2:	4621      	mov	r1, r4
    3dd4:	4630      	mov	r0, r6
    3dd6:	f7ff fe9b 	bl	3b10 <gpiote_pin_int_cfg>
		if (res != 0) {
    3dda:	2800      	cmp	r0, #0
    3ddc:	d1f1      	bne.n	3dc2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3dde:	3401      	adds	r4, #1
    3de0:	b2e4      	uxtb	r4, r4
    3de2:	e7eb      	b.n	3dbc <gpio_nrfx_pin_disable_callback+0x1a>

00003de4 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3de4:	2901      	cmp	r1, #1
{
    3de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    3dea:	bf18      	it	ne
    3dec:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    3dee:	6887      	ldr	r7, [r0, #8]
{
    3df0:	4606      	mov	r6, r0
		to_pin   = pin;
    3df2:	bf12      	itee	ne
    3df4:	4625      	movne	r5, r4
		to_pin   = 31;
    3df6:	251f      	moveq	r5, #31
		from_pin = 0;
    3df8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    3dfa:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3dfe:	42ac      	cmp	r4, r5
    3e00:	d902      	bls.n	3e08 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    3e02:	2000      	movs	r0, #0
}
    3e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	fa08 f204 	lsl.w	r2, r8, r4
    3e0e:	4313      	orrs	r3, r2
    3e10:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3e12:	4621      	mov	r1, r4
    3e14:	4630      	mov	r0, r6
    3e16:	f7ff fe7b 	bl	3b10 <gpiote_pin_int_cfg>
		if (res != 0) {
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d1f2      	bne.n	3e04 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3e1e:	3401      	adds	r4, #1
    3e20:	b2e4      	uxtb	r4, r4
    3e22:	e7ec      	b.n	3dfe <gpio_nrfx_pin_enable_callback+0x1a>

00003e24 <pwm_nrf5_sw_get_cycles_per_sec>:
static int pwm_nrf5_sw_get_cycles_per_sec(struct device *dev, u32_t pwm,
					  u64_t *cycles)
{
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;
    3e24:	6803      	ldr	r3, [r0, #0]

	/* HF timer frequency is derived from 16MHz source with a prescaler */
	*cycles = 16000000UL / BIT(config->prescaler);
    3e26:	689b      	ldr	r3, [r3, #8]
    3e28:	79d9      	ldrb	r1, [r3, #7]
    3e2a:	4b03      	ldr	r3, [pc, #12]	; (3e38 <pwm_nrf5_sw_get_cycles_per_sec+0x14>)
    3e2c:	2000      	movs	r0, #0
    3e2e:	40cb      	lsrs	r3, r1
    3e30:	e9c2 3000 	strd	r3, r0, [r2]

	return 0;
}
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop
    3e38:	00f42400 	.word	0x00f42400

00003e3c <pwm_nrf5_sw_init>:
static int pwm_nrf5_sw_init(struct device *dev)
{
	struct pwm_config *config;
	NRF_TIMER_Type *timer;

	config = (struct pwm_config *)dev->config->config_info;
    3e3c:	6803      	ldr	r3, [r0, #0]
    3e3e:	689a      	ldr	r2, [r3, #8]
	timer = config->timer;
    3e40:	6813      	ldr	r3, [r2, #0]

	/* setup HF timer */
	timer->MODE = TIMER_MODE_MODE_Timer;
    3e42:	2000      	movs	r0, #0
    3e44:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	timer->PRESCALER = config->prescaler;
    3e48:	79d2      	ldrb	r2, [r2, #7]
    3e4a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;

	/* TODO: set shorts according to map_size if not 3, i.e. if NRF_TIMER
	 * supports more than 4 compares, then more channels can be supported.
	 */
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    3e4e:	2208      	movs	r2, #8
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    3e50:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    3e54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	return 0;
}
    3e58:	4770      	bx	lr
	...

00003e5c <pwm_nrf5_sw_pin_set>:
{
    3e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	config = (struct pwm_config *)dev->config->config_info;
    3e60:	6804      	ldr	r4, [r0, #0]
	data = dev->driver_data;
    3e62:	6885      	ldr	r5, [r0, #8]
	config = (struct pwm_config *)dev->config->config_info;
    3e64:	f8d4 e008 	ldr.w	lr, [r4, #8]
{
    3e68:	b087      	sub	sp, #28
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
    3e6a:	f89e 6006 	ldrb.w	r6, [lr, #6]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    3e6e:	b133      	cbz	r3, 3e7e <pwm_nrf5_sw_pin_set+0x22>
    3e70:	429a      	cmp	r2, r3
    3e72:	d004      	beq.n	3e7e <pwm_nrf5_sw_pin_set+0x22>
    3e74:	4628      	mov	r0, r5
    3e76:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
	for (i = 0; i < map_size; i++) {
    3e7a:	42b8      	cmp	r0, r7
    3e7c:	d11d      	bne.n	3eba <pwm_nrf5_sw_pin_set+0x5e>
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    3e7e:	2000      	movs	r0, #0
    3e80:	b2c4      	uxtb	r4, r0
	for (i = 0; i < map_size; i++) {
    3e82:	42a6      	cmp	r6, r4
    3e84:	d824      	bhi.n	3ed0 <pwm_nrf5_sw_pin_set+0x74>
    3e86:	1e74      	subs	r4, r6, #1
    3e88:	b2e4      	uxtb	r4, r4
	while (i--) {
    3e8a:	2cff      	cmp	r4, #255	; 0xff
    3e8c:	d160      	bne.n	3f50 <pwm_nrf5_sw_pin_set+0xf4>
		LOG_ERR("No more channels available");
    3e8e:	2301      	movs	r3, #1
    3e90:	f04f 0200 	mov.w	r2, #0
    3e94:	f363 0202 	bfi	r2, r3, #0, #3
    3e98:	4968      	ldr	r1, [pc, #416]	; (403c <pwm_nrf5_sw_pin_set+0x1e0>)
    3e9a:	4b69      	ldr	r3, [pc, #420]	; (4040 <pwm_nrf5_sw_pin_set+0x1e4>)
    3e9c:	4869      	ldr	r0, [pc, #420]	; (4044 <pwm_nrf5_sw_pin_set+0x1e8>)
    3e9e:	1a5b      	subs	r3, r3, r1
    3ea0:	08db      	lsrs	r3, r3, #3
    3ea2:	f36f 02c5 	bfc	r2, #3, #3
    3ea6:	f363 128f 	bfi	r2, r3, #6, #10
    3eaa:	4967      	ldr	r1, [pc, #412]	; (4048 <pwm_nrf5_sw_pin_set+0x1ec>)
    3eac:	f7fd fa88 	bl	13c0 <log_1>
		return -ENOMEM;
    3eb0:	f06f 000b 	mvn.w	r0, #11
}
    3eb4:	b007      	add	sp, #28
    3eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((data->map[i].pwm != pwm) &&
    3eba:	6844      	ldr	r4, [r0, #4]
    3ebc:	42a1      	cmp	r1, r4
    3ebe:	d005      	beq.n	3ecc <pwm_nrf5_sw_pin_set+0x70>
    3ec0:	6884      	ldr	r4, [r0, #8]
    3ec2:	b11c      	cbz	r4, 3ecc <pwm_nrf5_sw_pin_set+0x70>
		    (data->map[i].pulse_cycles != 0) &&
    3ec4:	682c      	ldr	r4, [r5, #0]
    3ec6:	42a2      	cmp	r2, r4
    3ec8:	f040 80a4 	bne.w	4014 <pwm_nrf5_sw_pin_set+0x1b8>
    3ecc:	3008      	adds	r0, #8
    3ece:	e7d4      	b.n	3e7a <pwm_nrf5_sw_pin_set+0x1e>
    3ed0:	3001      	adds	r0, #1
		if (pwm == data->map[i].pwm) {
    3ed2:	eb05 07c0 	add.w	r7, r5, r0, lsl #3
    3ed6:	f857 7c04 	ldr.w	r7, [r7, #-4]
    3eda:	42b9      	cmp	r1, r7
    3edc:	d1d0      	bne.n	3e80 <pwm_nrf5_sw_pin_set+0x24>
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    3ede:	f89e 7004 	ldrb.w	r7, [lr, #4]
	timer = config->timer;
    3ee2:	f8de c000 	ldr.w	ip, [lr]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    3ee6:	4427      	add	r7, r4
    3ee8:	00bf      	lsls	r7, r7, #2
    3eea:	f107 4080 	add.w	r0, r7, #1073741824	; 0x40000000
    3eee:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    3ef2:	4607      	mov	r7, r0
    3ef4:	9001      	str	r0, [sp, #4]
    3ef6:	2000      	movs	r0, #0
    3ef8:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
	ppi_index = config->ppi_base + (channel << 1);
    3efc:	f89e e005 	ldrb.w	lr, [lr, #5]
    3f00:	eb0e 0e44 	add.w	lr, lr, r4, lsl #1
    3f04:	fa5f fa8e 	uxtb.w	sl, lr
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    3f08:	f10a 0801 	add.w	r8, sl, #1
    3f0c:	f04f 0e01 	mov.w	lr, #1
    3f10:	fa0e f808 	lsl.w	r8, lr, r8
    3f14:	fa0e f90a 	lsl.w	r9, lr, sl
    3f18:	ea48 0009 	orr.w	r0, r8, r9
    3f1c:	9002      	str	r0, [sp, #8]
	NRF_GPIO->DIRSET = BIT(pwm);
    3f1e:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    3f22:	484a      	ldr	r0, [pc, #296]	; (404c <pwm_nrf5_sw_pin_set+0x1f0>)
    3f24:	9f02      	ldr	r7, [sp, #8]
    3f26:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
	NRF_GPIO->DIRSET = BIT(pwm);
    3f2a:	fa0e f901 	lsl.w	r9, lr, r1
    3f2e:	f8c8 9518 	str.w	r9, [r8, #1304]	; 0x518
	if (pulse_cycles == 0) {
    3f32:	b9c3      	cbnz	r3, 3f66 <pwm_nrf5_sw_pin_set+0x10a>
		NRF_GPIO->OUTCLR = BIT(pwm);
    3f34:	f8c8 950c 	str.w	r9, [r8, #1292]	; 0x50c
	data->map[channel].pulse_cycles = 0;
    3f38:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    3f3c:	2300      	movs	r3, #0
    3f3e:	60a3      	str	r3, [r4, #8]
    3f40:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
	for (channel = 0; channel < config->map_size; channel++) {
    3f44:	42ae      	cmp	r6, r5
    3f46:	d160      	bne.n	400a <pwm_nrf5_sw_pin_set+0x1ae>
		timer->TASKS_STOP = 1;
    3f48:	2301      	movs	r3, #1
    3f4a:	f8cc 3004 	str.w	r3, [ip, #4]
    3f4e:	e05a      	b.n	4006 <pwm_nrf5_sw_pin_set+0x1aa>
		if (data->map[i].pulse_cycles == 0) {
    3f50:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
    3f54:	1e60      	subs	r0, r4, #1
    3f56:	68bf      	ldr	r7, [r7, #8]
    3f58:	b2c0      	uxtb	r0, r0
    3f5a:	b10f      	cbz	r7, 3f60 <pwm_nrf5_sw_pin_set+0x104>
    3f5c:	4604      	mov	r4, r0
    3f5e:	e794      	b.n	3e8a <pwm_nrf5_sw_pin_set+0x2e>
	if (channel >= config->map_size) {
    3f60:	42a6      	cmp	r6, r4
    3f62:	d8bc      	bhi.n	3ede <pwm_nrf5_sw_pin_set+0x82>
    3f64:	e793      	b.n	3e8e <pwm_nrf5_sw_pin_set+0x32>
	} else if (pulse_cycles == period_cycles) {
    3f66:	429a      	cmp	r2, r3
    3f68:	d102      	bne.n	3f70 <pwm_nrf5_sw_pin_set+0x114>
		NRF_GPIO->OUTSET = BIT(pwm);
    3f6a:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508
		goto pin_set_pwm_off;
    3f6e:	e7e3      	b.n	3f38 <pwm_nrf5_sw_pin_set+0xdc>
    3f70:	fa0f fb84 	sxth.w	fp, r4
    3f74:	ea4f 008b 	mov.w	r0, fp, lsl #2
		NRF_GPIO->OUTCLR = BIT(pwm);
    3f78:	f8c8 950c 	str.w	r9, [r8, #1292]	; 0x50c
    3f7c:	9004      	str	r0, [sp, #16]
    3f7e:	4460      	add	r0, ip
	timer->EVENTS_COMPARE[channel] = 0;
    3f80:	2700      	movs	r7, #0
	div = period_cycles >> 16;
    3f82:	ea4f 4812 	mov.w	r8, r2, lsr #16
	timer->EVENTS_COMPARE[channel] = 0;
    3f86:	f8c0 7140 	str.w	r7, [r0, #320]	; 0x140
    3f8a:	9003      	str	r0, [sp, #12]
	timer->CC[channel] = pulse_cycles >> div;
    3f8c:	fa23 f008 	lsr.w	r0, r3, r8
    3f90:	eb0c 0986 	add.w	r9, ip, r6, lsl #2
    3f94:	9005      	str	r0, [sp, #20]
    3f96:	9803      	ldr	r0, [sp, #12]
	timer->EVENTS_COMPARE[config->map_size] = 0;
    3f98:	f8c9 7140 	str.w	r7, [r9, #320]	; 0x140
	timer->CC[channel] = pulse_cycles >> div;
    3f9c:	4607      	mov	r7, r0
	timer->CC[config->map_size] = period_cycles >> div;
    3f9e:	fa22 f808 	lsr.w	r8, r2, r8
	timer->CC[channel] = pulse_cycles >> div;
    3fa2:	9805      	ldr	r0, [sp, #20]
    3fa4:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
	timer->CC[config->map_size] = period_cycles >> div;
    3fa8:	f8c9 8540 	str.w	r8, [r9, #1344]	; 0x540
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    3fac:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4054 <pwm_nrf5_sw_pin_set+0x1f8>
    3fb0:	9801      	ldr	r0, [sp, #4]
	timer->TASKS_CLEAR = 1;
    3fb2:	f8cc e00c 	str.w	lr, [ip, #12]
    3fb6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    3fba:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
    3fbe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    3fc2:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    3fc6:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    3fca:	9804      	ldr	r0, [sp, #16]
				     &(timer->EVENTS_COMPARE[channel]);
    3fcc:	3450      	adds	r4, #80	; 0x50
    3fce:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    3fd2:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
					 &(timer->EVENTS_COMPARE[
    3fd6:	3650      	adds	r6, #80	; 0x50
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    3fd8:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
    3fdc:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
					 &(timer->EVENTS_COMPARE[
    3fe0:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    3fe4:	4819      	ldr	r0, [pc, #100]	; (404c <pwm_nrf5_sw_pin_set+0x1f0>)
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    3fe6:	f8c7 4514 	str.w	r4, [r7, #1300]	; 0x514
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    3fea:	f8c7 6518 	str.w	r6, [r7, #1304]	; 0x518
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
    3fee:	f8c7 451c 	str.w	r4, [r7, #1308]	; 0x51c
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    3ff2:	9c02      	ldr	r4, [sp, #8]
    3ff4:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
	timer->TASKS_START = 1;
    3ff8:	f8cc e000 	str.w	lr, [ip]
	data->period_cycles = period_cycles;
    3ffc:	602a      	str	r2, [r5, #0]
    3ffe:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
	data->map[channel].pulse_cycles = pulse_cycles;
    4002:	e9c5 1301 	strd	r1, r3, [r5, #4]
	return 0;
    4006:	2000      	movs	r0, #0
    4008:	e754      	b.n	3eb4 <pwm_nrf5_sw_pin_set+0x58>
		if (data->map[channel].pulse_cycles) {
    400a:	f855 3f08 	ldr.w	r3, [r5, #8]!
    400e:	2b00      	cmp	r3, #0
    4010:	d098      	beq.n	3f44 <pwm_nrf5_sw_pin_set+0xe8>
    4012:	e7f8      	b.n	4006 <pwm_nrf5_sw_pin_set+0x1aa>
		LOG_ERR("Incompatible period");
    4014:	2301      	movs	r3, #1
    4016:	f04f 0200 	mov.w	r2, #0
    401a:	f363 0202 	bfi	r2, r3, #0, #3
    401e:	4907      	ldr	r1, [pc, #28]	; (403c <pwm_nrf5_sw_pin_set+0x1e0>)
    4020:	4b07      	ldr	r3, [pc, #28]	; (4040 <pwm_nrf5_sw_pin_set+0x1e4>)
    4022:	480b      	ldr	r0, [pc, #44]	; (4050 <pwm_nrf5_sw_pin_set+0x1f4>)
    4024:	1a5b      	subs	r3, r3, r1
    4026:	08db      	lsrs	r3, r3, #3
    4028:	f36f 02c5 	bfc	r2, #3, #3
    402c:	f363 128f 	bfi	r2, r3, #6, #10
    4030:	4905      	ldr	r1, [pc, #20]	; (4048 <pwm_nrf5_sw_pin_set+0x1ec>)
    4032:	f7fd f9c5 	bl	13c0 <log_1>
		return ret;
    4036:	f06f 0015 	mvn.w	r0, #21
    403a:	e73b      	b.n	3eb4 <pwm_nrf5_sw_pin_set+0x58>
    403c:	000050c4 	.word	0x000050c4
    4040:	000050dc 	.word	0x000050dc
    4044:	00005a30 	.word	0x00005a30
    4048:	00005a0c 	.word	0x00005a0c
    404c:	4001f000 	.word	0x4001f000
    4050:	00005a4f 	.word	0x00005a4f
    4054:	00130003 	.word	0x00130003

00004058 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(s32_t level)
{
    4058:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    405a:	4b08      	ldr	r3, [pc, #32]	; (407c <_sys_device_do_config_level+0x24>)
    405c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4060:	3001      	adds	r0, #1
    4062:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    4066:	4620      	mov	r0, r4
    4068:	4285      	cmp	r5, r0
    406a:	f104 040c 	add.w	r4, r4, #12
    406e:	d800      	bhi.n	4072 <_sys_device_do_config_level+0x1a>
		struct device_config *device_conf = info->config;

		(void)device_conf->init(info);
		_k_object_init(info);
	}
}
    4070:	bd38      	pop	{r3, r4, r5, pc}
		(void)device_conf->init(info);
    4072:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    4076:	685b      	ldr	r3, [r3, #4]
    4078:	4798      	blx	r3
    407a:	e7f4      	b.n	4066 <_sys_device_do_config_level+0xe>
    407c:	00005a74 	.word	0x00005a74

00004080 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    4080:	4b10      	ldr	r3, [pc, #64]	; (40c4 <device_get_binding+0x44>)
{
    4082:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    4084:	4c10      	ldr	r4, [pc, #64]	; (40c8 <device_get_binding+0x48>)
{
    4086:	4605      	mov	r5, r0
    4088:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    408a:	429c      	cmp	r4, r3
    408c:	d104      	bne.n	4098 <device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    408e:	4c0e      	ldr	r4, [pc, #56]	; (40c8 <device_get_binding+0x48>)
    4090:	42b4      	cmp	r4, r6
    4092:	d109      	bne.n	40a8 <device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    4094:	2400      	movs	r4, #0
    4096:	e012      	b.n	40be <device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    4098:	6862      	ldr	r2, [r4, #4]
    409a:	b11a      	cbz	r2, 40a4 <device_get_binding+0x24>
		    (info->config->name == name)) {
    409c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    409e:	6812      	ldr	r2, [r2, #0]
    40a0:	42aa      	cmp	r2, r5
    40a2:	d00c      	beq.n	40be <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    40a4:	340c      	adds	r4, #12
    40a6:	e7f0      	b.n	408a <device_get_binding+0xa>
		if (info->driver_api == NULL) {
    40a8:	6863      	ldr	r3, [r4, #4]
    40aa:	b90b      	cbnz	r3, 40b0 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    40ac:	340c      	adds	r4, #12
    40ae:	e7ef      	b.n	4090 <device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    40b0:	6823      	ldr	r3, [r4, #0]
    40b2:	4628      	mov	r0, r5
    40b4:	6819      	ldr	r1, [r3, #0]
    40b6:	f7fe fc93 	bl	29e0 <strcmp>
    40ba:	2800      	cmp	r0, #0
    40bc:	d1f6      	bne.n	40ac <device_get_binding+0x2c>
}
    40be:	4620      	mov	r0, r4
    40c0:	bd70      	pop	{r4, r5, r6, pc}
    40c2:	bf00      	nop
    40c4:	20001dd8 	.word	0x20001dd8
    40c8:	20001d54 	.word	0x20001d54

000040cc <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	z_clock_idle_exit();
    40cc:	f7fe b8d2 	b.w	2274 <z_clock_idle_exit>

000040d0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    40d0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    40d2:	4d0a      	ldr	r5, [pc, #40]	; (40fc <idle+0x2c>)
    40d4:	f04f 0220 	mov.w	r2, #32
    40d8:	f3ef 8311 	mrs	r3, BASEPRI
    40dc:	f382 8811 	msr	BASEPRI, r2
		k_yield();
	}
#else
	for (;;) {
		(void)irq_lock();
		sys_power_save_idle(_get_next_timeout_expiry());
    40e0:	f000 fdc2 	bl	4c68 <_get_next_timeout_expiry>
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
    40e4:	2101      	movs	r1, #1
    40e6:	2802      	cmp	r0, #2
		sys_power_save_idle(_get_next_timeout_expiry());
    40e8:	4604      	mov	r4, r0
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
    40ea:	bfd8      	it	le
    40ec:	4608      	movle	r0, r1
    40ee:	f7fe f8bd 	bl	226c <z_clock_set_timeout>
	_kernel.idle = ticks;
    40f2:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    40f4:	f7fe fb38 	bl	2768 <k_cpu_idle>
    40f8:	e7ec      	b.n	40d4 <idle+0x4>
    40fa:	bf00      	nop
    40fc:	2000078c 	.word	0x2000078c

00004100 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    4100:	4802      	ldr	r0, [pc, #8]	; (410c <_bss_zero+0xc>)
    4102:	4a03      	ldr	r2, [pc, #12]	; (4110 <_bss_zero+0x10>)
    4104:	2100      	movs	r1, #0
    4106:	1a12      	subs	r2, r2, r0
    4108:	f7fe bcbb 	b.w	2a82 <memset>
    410c:	20000000 	.word	0x20000000
    4110:	200007bc 	.word	0x200007bc

00004114 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4114:	4802      	ldr	r0, [pc, #8]	; (4120 <_data_copy+0xc>)
    4116:	4a03      	ldr	r2, [pc, #12]	; (4124 <_data_copy+0x10>)
    4118:	4903      	ldr	r1, [pc, #12]	; (4128 <_data_copy+0x14>)
    411a:	1a12      	subs	r2, r2, r0
    411c:	f7fe bc84 	b.w	2a28 <memcpy>
    4120:	20001ca0 	.word	0x20001ca0
    4124:	20001e1c 	.word	0x20001e1c
    4128:	00005acc 	.word	0x00005acc

0000412c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    412c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    412e:	2002      	movs	r0, #2
    4130:	f7ff ff92 	bl	4058 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    4134:	4807      	ldr	r0, [pc, #28]	; (4154 <bg_thread_main+0x28>)
    4136:	f7fc fd91 	bl	c5c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    413a:	2003      	movs	r0, #3
    413c:	f7ff ff8c 	bl	4058 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    4140:	f000 fd02 	bl	4b48 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4144:	f7fc fb50 	bl	7e8 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    4148:	4a03      	ldr	r2, [pc, #12]	; (4158 <bg_thread_main+0x2c>)
    414a:	7b13      	ldrb	r3, [r2, #12]
    414c:	f023 0301 	bic.w	r3, r3, #1
    4150:	7313      	strb	r3, [r2, #12]
}
    4152:	bd08      	pop	{r3, pc}
    4154:	00005a9c 	.word	0x00005a9c
    4158:	200005b8 	.word	0x200005b8

0000415c <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    415c:	b580      	push	{r7, lr}
    415e:	b086      	sub	sp, #24
    4160:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    4162:	f7fe f8fb 	bl	235c <_IntLibInit>

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
    4166:	f7fd f845 	bl	11f4 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    416a:	4b31      	ldr	r3, [pc, #196]	; (4230 <_Cstart+0xd4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    416c:	f383 8808 	msr	MSP, r3
    4170:	4b30      	ldr	r3, [pc, #192]	; (4234 <_Cstart+0xd8>)
	_kernel.ready_q.cache = _main_thread;
    4172:	4e31      	ldr	r6, [pc, #196]	; (4238 <_Cstart+0xdc>)
    4174:	4d31      	ldr	r5, [pc, #196]	; (423c <_Cstart+0xe0>)
    4176:	2400      	movs	r4, #0
    4178:	22e0      	movs	r2, #224	; 0xe0
    417a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    417e:	77dc      	strb	r4, [r3, #31]
    4180:	761c      	strb	r4, [r3, #24]
    4182:	765c      	strb	r4, [r3, #25]
    4184:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4188:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    418c:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    418e:	f7fe fa77 	bl	2680 <_FaultInit>
	_CpuIdleInit();
    4192:	f7fe fae3 	bl	275c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4196:	4620      	mov	r0, r4
    4198:	f7ff ff5e 	bl	4058 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    419c:	2001      	movs	r0, #1
    419e:	f7ff ff5b 	bl	4058 <_sys_device_do_config_level>
	_sched_init();
    41a2:	f000 fb4f 	bl	4844 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    41a6:	4b26      	ldr	r3, [pc, #152]	; (4240 <_Cstart+0xe4>)
	_kernel.ready_q.cache = _main_thread;
    41a8:	6275      	str	r5, [r6, #36]	; 0x24
	_setup_new_thread(_main_thread, _main_stack,
    41aa:	9305      	str	r3, [sp, #20]
    41ac:	2301      	movs	r3, #1
    41ae:	e9cd 4303 	strd	r4, r3, [sp, #12]
    41b2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    41b6:	9400      	str	r4, [sp, #0]
    41b8:	4b22      	ldr	r3, [pc, #136]	; (4244 <_Cstart+0xe8>)
    41ba:	4923      	ldr	r1, [pc, #140]	; (4248 <_Cstart+0xec>)
    41bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    41c0:	4628      	mov	r0, r5
    41c2:	f000 fc87 	bl	4ad4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    41c6:	7b6b      	ldrb	r3, [r5, #13]
    41c8:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    41cc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    41d0:	736a      	strb	r2, [r5, #13]
    41d2:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    41d4:	d105      	bne.n	41e2 <_Cstart+0x86>
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
    41d6:	6a2b      	ldr	r3, [r5, #32]
    41d8:	3301      	adds	r3, #1
    41da:	d102      	bne.n	41e2 <_Cstart+0x86>
		_add_thread_to_ready_q(thread);
    41dc:	4628      	mov	r0, r5
    41de:	f000 fa4f 	bl	4680 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    41e2:	4b1a      	ldr	r3, [pc, #104]	; (424c <_Cstart+0xf0>)
    41e4:	4e1a      	ldr	r6, [pc, #104]	; (4250 <_Cstart+0xf4>)
    41e6:	9305      	str	r3, [sp, #20]
    41e8:	2201      	movs	r2, #1
    41ea:	230f      	movs	r3, #15
    41ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
    41f0:	2300      	movs	r3, #0
    41f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    41f6:	9300      	str	r3, [sp, #0]
    41f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    41fc:	4b15      	ldr	r3, [pc, #84]	; (4254 <_Cstart+0xf8>)
    41fe:	4916      	ldr	r1, [pc, #88]	; (4258 <_Cstart+0xfc>)
    4200:	4630      	mov	r0, r6
    4202:	f000 fc67 	bl	4ad4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4206:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    4208:	60e6      	str	r6, [r4, #12]
    420a:	f023 0304 	bic.w	r3, r3, #4
    420e:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    4210:	4b12      	ldr	r3, [pc, #72]	; (425c <_Cstart+0x100>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
    4212:	60a5      	str	r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
    4214:	e9c4 3306 	strd	r3, r3, [r4, #24]
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    4218:	4a0a      	ldr	r2, [pc, #40]	; (4244 <_Cstart+0xe8>)
    421a:	4b11      	ldr	r3, [pc, #68]	; (4260 <_Cstart+0x104>)
    421c:	4c11      	ldr	r4, [pc, #68]	; (4264 <_Cstart+0x108>)
    421e:	f383 8809 	msr	PSP, r3
    4222:	b663      	cpsie	if
    4224:	2100      	movs	r1, #0
    4226:	f381 8811 	msr	BASEPRI, r1
    422a:	4610      	mov	r0, r2
    422c:	4720      	bx	r4
    422e:	bf00      	nop
    4230:	20001ca0 	.word	0x20001ca0
    4234:	e000ed00 	.word	0xe000ed00
    4238:	2000078c 	.word	0x2000078c
    423c:	200005b8 	.word	0x200005b8
    4240:	00005a8c 	.word	0x00005a8c
    4244:	0000412d 	.word	0x0000412d
    4248:	20000f60 	.word	0x20000f60
    424c:	00005a91 	.word	0x00005a91
    4250:	2000054c 	.word	0x2000054c
    4254:	000040d1 	.word	0x000040d1
    4258:	20001360 	.word	0x20001360
    425c:	200007a4 	.word	0x200007a4
    4260:	20001360 	.word	0x20001360
    4264:	00000905 	.word	0x00000905

00004268 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
    4268:	4b0b      	ldr	r3, [pc, #44]	; (4298 <init_mem_slab_module+0x30>)
    426a:	480c      	ldr	r0, [pc, #48]	; (429c <init_mem_slab_module+0x34>)
{
    426c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    426e:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
    4270:	4283      	cmp	r3, r0
    4272:	d301      	bcc.n	4278 <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
    4274:	2000      	movs	r0, #0
    4276:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    4278:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
    427a:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    427c:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
    427e:	2100      	movs	r1, #0
    4280:	42a9      	cmp	r1, r5
    4282:	d101      	bne.n	4288 <init_mem_slab_module+0x20>
	     slab++) {
    4284:	331c      	adds	r3, #28
    4286:	e7f3      	b.n	4270 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    4288:	695e      	ldr	r6, [r3, #20]
    428a:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    428c:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    428e:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
    4290:	3101      	adds	r1, #1
		p += slab->block_size;
    4292:	4432      	add	r2, r6
    4294:	e7f4      	b.n	4280 <init_mem_slab_module+0x18>
    4296:	bf00      	nop
    4298:	20001e08 	.word	0x20001e08
    429c:	20001e08 	.word	0x20001e08

000042a0 <k_mem_slab_init>:
SYS_INIT(init_mem_slab_module, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, u32_t num_blocks)
{
    42a0:	b530      	push	{r4, r5, lr}
	slab->num_blocks = num_blocks;
	slab->block_size = block_size;
	slab->buffer = buffer;
	slab->num_used = 0;
    42a2:	2400      	movs	r4, #0
	slab->block_size = block_size;
    42a4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    42a8:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    42ac:	6101      	str	r1, [r0, #16]
	for (j = 0; j < slab->num_blocks; j++) {
    42ae:	42a3      	cmp	r3, r4
    42b0:	d102      	bne.n	42b8 <k_mem_slab_init+0x18>
    42b2:	e9c0 0000 	strd	r0, r0, [r0]
	create_free_list(slab);
	_waitq_init(&slab->wait_q);
	SYS_TRACING_OBJ_INIT(k_mem_slab, slab);

	_k_object_init(slab);
}
    42b6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    42b8:	6945      	ldr	r5, [r0, #20]
    42ba:	600d      	str	r5, [r1, #0]
	for (j = 0; j < slab->num_blocks; j++) {
    42bc:	3401      	adds	r4, #1
		slab->free_list = p;
    42be:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    42c0:	4411      	add	r1, r2
    42c2:	e7f4      	b.n	42ae <k_mem_slab_init+0xe>

000042c4 <k_mem_slab_alloc>:

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    42c4:	b538      	push	{r3, r4, r5, lr}
    42c6:	4603      	mov	r3, r0
    42c8:	460c      	mov	r4, r1
    42ca:	f04f 0020 	mov.w	r0, #32
    42ce:	f3ef 8511 	mrs	r5, BASEPRI
    42d2:	f380 8811 	msr	BASEPRI, r0
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
    42d6:	6958      	ldr	r0, [r3, #20]
    42d8:	b150      	cbz	r0, 42f0 <k_mem_slab_alloc+0x2c>
		/* take a free block */
		*mem = slab->free_list;
    42da:	6020      	str	r0, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    42dc:	695a      	ldr	r2, [r3, #20]
    42de:	6812      	ldr	r2, [r2, #0]
    42e0:	615a      	str	r2, [r3, #20]
		slab->num_used++;
    42e2:	699a      	ldr	r2, [r3, #24]
    42e4:	3201      	adds	r2, #1
    42e6:	619a      	str	r2, [r3, #24]
		result = 0;
    42e8:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    42ea:	f385 8811 	msr	BASEPRI, r5
		return result;
	}

	irq_unlock(key);

	return result;
    42ee:	e00d      	b.n	430c <k_mem_slab_alloc+0x48>
	} else if (timeout == K_NO_WAIT) {
    42f0:	b91a      	cbnz	r2, 42fa <k_mem_slab_alloc+0x36>
		*mem = NULL;
    42f2:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
    42f4:	f06f 000b 	mvn.w	r0, #11
    42f8:	e7f7      	b.n	42ea <k_mem_slab_alloc+0x26>
		result = _pend_current_thread(key, &slab->wait_q, timeout);
    42fa:	4619      	mov	r1, r3
    42fc:	4628      	mov	r0, r5
    42fe:	f000 fa67 	bl	47d0 <_pend_current_thread>
		if (result == 0) {
    4302:	b918      	cbnz	r0, 430c <k_mem_slab_alloc+0x48>
			*mem = _current->base.swap_data;
    4304:	4b02      	ldr	r3, [pc, #8]	; (4310 <k_mem_slab_alloc+0x4c>)
    4306:	689b      	ldr	r3, [r3, #8]
    4308:	695b      	ldr	r3, [r3, #20]
    430a:	6023      	str	r3, [r4, #0]
}
    430c:	bd38      	pop	{r3, r4, r5, pc}
    430e:	bf00      	nop
    4310:	2000078c 	.word	0x2000078c

00004314 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4314:	b570      	push	{r4, r5, r6, lr}
    4316:	4604      	mov	r4, r0
    4318:	460d      	mov	r5, r1
	__asm__ volatile(
    431a:	f04f 0320 	mov.w	r3, #32
    431e:	f3ef 8611 	mrs	r6, BASEPRI
    4322:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);
    4326:	f000 f940 	bl	45aa <_unpend_first_thread>

	if (pending_thread != NULL) {
    432a:	b180      	cbz	r0, 434e <k_mem_slab_free+0x3a>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
    432c:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
    432e:	6142      	str	r2, [r0, #20]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4330:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4332:	2100      	movs	r1, #0
    4334:	06d2      	lsls	r2, r2, #27
    4336:	6681      	str	r1, [r0, #104]	; 0x68
    4338:	d104      	bne.n	4344 <k_mem_slab_free+0x30>
	if (_is_thread_ready(thread)) {
    433a:	6a03      	ldr	r3, [r0, #32]
    433c:	3301      	adds	r3, #1
    433e:	d101      	bne.n	4344 <k_mem_slab_free+0x30>
		_add_thread_to_ready_q(thread);
    4340:	f000 f99e 	bl	4680 <_add_thread_to_ready_q>
		_ready_thread(pending_thread);
		_reschedule(key);
    4344:	4630      	mov	r0, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		irq_unlock(key);
	}
}
    4346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
    434a:	f000 b947 	b.w	45dc <_reschedule>
		**(char ***)mem = slab->free_list;
    434e:	682b      	ldr	r3, [r5, #0]
    4350:	6962      	ldr	r2, [r4, #20]
    4352:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    4354:	682b      	ldr	r3, [r5, #0]
    4356:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    4358:	69a3      	ldr	r3, [r4, #24]
    435a:	3b01      	subs	r3, #1
    435c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    435e:	f386 8811 	msr	BASEPRI, r6
}
    4362:	bd70      	pop	{r4, r5, r6, pc}

00004364 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    4368:	492e      	ldr	r1, [pc, #184]	; (4424 <_impl_k_mutex_lock+0xc0>)
    436a:	688a      	ldr	r2, [r1, #8]
    436c:	7bd3      	ldrb	r3, [r2, #15]
    436e:	3b01      	subs	r3, #1
    4370:	4604      	mov	r4, r0
    4372:	73d3      	strb	r3, [r2, #15]
	u32_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4374:	68c3      	ldr	r3, [r0, #12]
    4376:	4608      	mov	r0, r1
    4378:	b14b      	cbz	r3, 438e <_impl_k_mutex_lock+0x2a>
    437a:	68a2      	ldr	r2, [r4, #8]
    437c:	6889      	ldr	r1, [r1, #8]
    437e:	428a      	cmp	r2, r1
    4380:	d011      	beq.n	43a6 <_impl_k_mutex_lock+0x42>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    4382:	b995      	cbnz	r5, 43aa <_impl_k_mutex_lock+0x46>
		k_sched_unlock();
    4384:	f000 f942 	bl	460c <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    4388:	f06f 000f 	mvn.w	r0, #15
    438c:	e00a      	b.n	43a4 <_impl_k_mutex_lock+0x40>
					_current->base.prio :
    438e:	688a      	ldr	r2, [r1, #8]
    4390:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4394:	6122      	str	r2, [r4, #16]
		mutex->lock_count++;
    4396:	3301      	adds	r3, #1
    4398:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    439a:	6883      	ldr	r3, [r0, #8]
    439c:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    439e:	f000 f935 	bl	460c <k_sched_unlock>
		return 0;
    43a2:	2000      	movs	r0, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    43a4:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    43a6:	6922      	ldr	r2, [r4, #16]
    43a8:	e7f4      	b.n	4394 <_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    43aa:	f991 100e 	ldrsb.w	r1, [r1, #14]
    43ae:	f992 300e 	ldrsb.w	r3, [r2, #14]
    43b2:	4299      	cmp	r1, r3
    43b4:	bfa8      	it	ge
    43b6:	4619      	movge	r1, r3
    43b8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
    43bc:	f04f 0320 	mov.w	r3, #32
    43c0:	f3ef 8611 	mrs	r6, BASEPRI
    43c4:	f383 8811 	msr	BASEPRI, r3
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    43c8:	68a0      	ldr	r0, [r4, #8]
    43ca:	f990 300e 	ldrsb.w	r3, [r0, #14]
    43ce:	4299      	cmp	r1, r3
    43d0:	da01      	bge.n	43d6 <_impl_k_mutex_lock+0x72>
		_thread_priority_set(mutex->owner, new_prio);
    43d2:	f000 fa0b 	bl	47ec <_thread_priority_set>
	s32_t got_mutex = _pend_current_thread(key, &mutex->wait_q, timeout);
    43d6:	462a      	mov	r2, r5
    43d8:	4621      	mov	r1, r4
    43da:	4630      	mov	r0, r6
    43dc:	f000 f9f8 	bl	47d0 <_pend_current_thread>
	if (got_mutex == 0) {
    43e0:	2800      	cmp	r0, #0
    43e2:	d0dc      	beq.n	439e <_impl_k_mutex_lock+0x3a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    43e4:	6823      	ldr	r3, [r4, #0]
    43e6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43e8:	429c      	cmp	r4, r3
    43ea:	d007      	beq.n	43fc <_impl_k_mutex_lock+0x98>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    43ec:	b133      	cbz	r3, 43fc <_impl_k_mutex_lock+0x98>
    43ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
    43f2:	4299      	cmp	r1, r3
    43f4:	bfa8      	it	ge
    43f6:	4619      	movge	r1, r3
    43f8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    43fc:	f04f 0320 	mov.w	r3, #32
    4400:	f3ef 8511 	mrs	r5, BASEPRI
    4404:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
    4408:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    440a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    440e:	4299      	cmp	r1, r3
    4410:	d001      	beq.n	4416 <_impl_k_mutex_lock+0xb2>
		_thread_priority_set(mutex->owner, new_prio);
    4412:	f000 f9eb 	bl	47ec <_thread_priority_set>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4416:	f385 8811 	msr	BASEPRI, r5
	k_sched_unlock();
    441a:	f000 f8f7 	bl	460c <k_sched_unlock>
	return -EAGAIN;
    441e:	f06f 000a 	mvn.w	r0, #10
    4422:	e7bf      	b.n	43a4 <_impl_k_mutex_lock+0x40>
    4424:	2000078c 	.word	0x2000078c

00004428 <_impl_k_mutex_unlock>:
    4428:	4b1b      	ldr	r3, [pc, #108]	; (4498 <_impl_k_mutex_unlock+0x70>)
    442a:	689a      	ldr	r2, [r3, #8]
    442c:	7bd3      	ldrb	r3, [r2, #15]
    442e:	3b01      	subs	r3, #1
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4430:	b570      	push	{r4, r5, r6, lr}
    4432:	4604      	mov	r4, r0
    4434:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    4436:	68c3      	ldr	r3, [r0, #12]
    4438:	3b01      	subs	r3, #1
    443a:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0U) {
    443c:	bb3b      	cbnz	r3, 448e <_impl_k_mutex_unlock+0x66>
	__asm__ volatile(
    443e:	f04f 0320 	mov.w	r3, #32
    4442:	f3ef 8611 	mrs	r6, BASEPRI
    4446:	f383 8811 	msr	BASEPRI, r3
		goto k_mutex_unlock_return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    444a:	6901      	ldr	r1, [r0, #16]
    444c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    444e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4452:	4299      	cmp	r1, r3
    4454:	d001      	beq.n	445a <_impl_k_mutex_unlock+0x32>
		_thread_priority_set(mutex->owner, new_prio);
    4456:	f000 f9c9 	bl	47ec <_thread_priority_set>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
    445a:	4620      	mov	r0, r4
    445c:	f000 f8a5 	bl	45aa <_unpend_first_thread>
    4460:	4605      	mov	r5, r0

	mutex->owner = new_owner;
    4462:	60a0      	str	r0, [r4, #8]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
    4464:	b188      	cbz	r0, 448a <_impl_k_mutex_unlock+0x62>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4466:	7b43      	ldrb	r3, [r0, #13]
    4468:	06db      	lsls	r3, r3, #27
    446a:	d104      	bne.n	4476 <_impl_k_mutex_unlock+0x4e>
	if (_is_thread_ready(thread)) {
    446c:	6a03      	ldr	r3, [r0, #32]
    446e:	3301      	adds	r3, #1
    4470:	d101      	bne.n	4476 <_impl_k_mutex_unlock+0x4e>
		_add_thread_to_ready_q(thread);
    4472:	f000 f905 	bl	4680 <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4476:	f386 8811 	msr	BASEPRI, r6
    447a:	2300      	movs	r3, #0
    447c:	66ab      	str	r3, [r5, #104]	; 0x68
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->lock_count++;
    447e:	68e3      	ldr	r3, [r4, #12]
    4480:	3301      	adds	r3, #1
    4482:	60e3      	str	r3, [r4, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    4484:	f995 300e 	ldrsb.w	r3, [r5, #14]
    4488:	6123      	str	r3, [r4, #16]
    448a:	f386 8811 	msr	BASEPRI, r6

	irq_unlock(key);

k_mutex_unlock_return:
	k_sched_unlock();
}
    448e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    4492:	f000 b8bb 	b.w	460c <k_sched_unlock>
    4496:	bf00      	nop
    4498:	2000078c 	.word	0x2000078c

0000449c <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    449c:	e9d0 2300 	ldrd	r2, r3, [r0]
    44a0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    44a2:	6802      	ldr	r2, [r0, #0]
    44a4:	6053      	str	r3, [r2, #4]
}
    44a6:	4770      	bx	lr

000044a8 <reset_time_slice>:

static int slice_time;
static int slice_max_prio;

static void reset_time_slice(void)
{
    44a8:	b510      	push	{r4, lr}
	int to = _get_next_timeout_expiry();
    44aa:	f000 fbdd 	bl	4c68 <_get_next_timeout_expiry>
    44ae:	4604      	mov	r4, r0

	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    44b0:	f7fd fedd 	bl	226e <z_clock_elapsed>
    44b4:	4b07      	ldr	r3, [pc, #28]	; (44d4 <reset_time_slice+0x2c>)
    44b6:	4a08      	ldr	r2, [pc, #32]	; (44d8 <reset_time_slice+0x30>)
    44b8:	681b      	ldr	r3, [r3, #0]
    44ba:	4418      	add	r0, r3
    44bc:	6110      	str	r0, [r2, #16]

	if (to == K_FOREVER || slice_time < to) {
    44be:	1c62      	adds	r2, r4, #1
    44c0:	d001      	beq.n	44c6 <reset_time_slice+0x1e>
    44c2:	42a3      	cmp	r3, r4
    44c4:	da05      	bge.n	44d2 <reset_time_slice+0x2a>
		z_clock_set_timeout(slice_time, false);
    44c6:	2100      	movs	r1, #0
    44c8:	4618      	mov	r0, r3
	}
}
    44ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_clock_set_timeout(slice_time, false);
    44ce:	f7fd becd 	b.w	226c <z_clock_set_timeout>
}
    44d2:	bd10      	pop	{r4, pc}
    44d4:	20000628 	.word	0x20000628
    44d8:	2000078c 	.word	0x2000078c

000044dc <k_spin_lock.isra.10>:
	__asm__ volatile(
    44dc:	f04f 0320 	mov.w	r3, #32
    44e0:	f3ef 8011 	mrs	r0, BASEPRI
    44e4:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    44e8:	4770      	bx	lr
	...

000044ec <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
    44ec:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    44ee:	4c10      	ldr	r4, [pc, #64]	; (4530 <update_cache+0x44>)
    44f0:	4623      	mov	r3, r4
    44f2:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44f6:	429d      	cmp	r5, r3
    44f8:	d000      	beq.n	44fc <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
    44fa:	b905      	cbnz	r5, 44fe <update_cache+0x12>
    44fc:	68e5      	ldr	r5, [r4, #12]
    44fe:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok) {
    4500:	b978      	cbnz	r0, 4522 <update_cache+0x36>
	if (!_current || !_is_thread_ready(_current)) {
    4502:	b173      	cbz	r3, 4522 <update_cache+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4504:	7b5a      	ldrb	r2, [r3, #13]
    4506:	06d2      	lsls	r2, r2, #27
    4508:	d10b      	bne.n	4522 <update_cache+0x36>
    450a:	6a1a      	ldr	r2, [r3, #32]
    450c:	3201      	adds	r2, #1
    450e:	d108      	bne.n	4522 <update_cache+0x36>
	if (_is_preempt(_current) || is_metairq(th)) {
    4510:	89da      	ldrh	r2, [r3, #14]
    4512:	2a7f      	cmp	r2, #127	; 0x7f
    4514:	d905      	bls.n	4522 <update_cache+0x36>
	return thread == _idle_thread;
    4516:	4a07      	ldr	r2, [pc, #28]	; (4534 <update_cache+0x48>)
	if (_is_idle(_current)) {
    4518:	6812      	ldr	r2, [r2, #0]
    451a:	4293      	cmp	r3, r2
    451c:	d001      	beq.n	4522 <update_cache+0x36>
		if (th != _current) {
			reset_time_slice();
		}
		_kernel.ready_q.cache = th;
	} else {
		_kernel.ready_q.cache = _current;
    451e:	6263      	str	r3, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    4520:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    4522:	42ab      	cmp	r3, r5
    4524:	d001      	beq.n	452a <update_cache+0x3e>
			reset_time_slice();
    4526:	f7ff ffbf 	bl	44a8 <reset_time_slice>
		_kernel.ready_q.cache = th;
    452a:	6265      	str	r5, [r4, #36]	; 0x24
}
    452c:	e7f8      	b.n	4520 <update_cache+0x34>
    452e:	bf00      	nop
    4530:	2000078c 	.word	0x2000078c
    4534:	00005a98 	.word	0x00005a98

00004538 <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    4538:	b510      	push	{r4, lr}
    453a:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    453c:	f7ff ffce 	bl	44dc <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
    4540:	7b4b      	ldrb	r3, [r1, #13]
    4542:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
    4544:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    4546:	d50d      	bpl.n	4564 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4548:	4608      	mov	r0, r1
    454a:	f7ff ffa7 	bl	449c <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    454e:	7b4b      	ldrb	r3, [r1, #13]
    4550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4554:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
    4556:	4b05      	ldr	r3, [pc, #20]	; (456c <_remove_thread_from_ready_q+0x34>)
    4558:	6898      	ldr	r0, [r3, #8]
    455a:	1a43      	subs	r3, r0, r1
    455c:	4258      	negs	r0, r3
    455e:	4158      	adcs	r0, r3
    4560:	f7ff ffc4 	bl	44ec <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4564:	f384 8811 	msr	BASEPRI, r4
}
    4568:	bd10      	pop	{r4, pc}
    456a:	bf00      	nop
    456c:	2000078c 	.word	0x2000078c

00004570 <_find_first_thread_to_unpend>:
{
    4570:	b508      	push	{r3, lr}
    4572:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    4574:	f7ff ffb2 	bl	44dc <k_spin_lock.isra.10>
	return list->head == list;
    4578:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    457a:	429a      	cmp	r2, r3
    457c:	bf08      	it	eq
    457e:	2300      	moveq	r3, #0
    4580:	f380 8811 	msr	BASEPRI, r0
}
    4584:	4618      	mov	r0, r3
    4586:	bd08      	pop	{r3, pc}

00004588 <_unpend_thread_no_timeout>:
{
    4588:	b510      	push	{r4, lr}
    458a:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    458c:	f7ff ffa6 	bl	44dc <k_spin_lock.isra.10>
    4590:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    4592:	4608      	mov	r0, r1
    4594:	f7ff ff82 	bl	449c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4598:	7b4b      	ldrb	r3, [r1, #13]
    459a:	f023 0302 	bic.w	r3, r3, #2
    459e:	734b      	strb	r3, [r1, #13]
    45a0:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
    45a4:	2300      	movs	r3, #0
    45a6:	608b      	str	r3, [r1, #8]
}
    45a8:	bd10      	pop	{r4, pc}

000045aa <_unpend_first_thread>:
{
    45aa:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    45ac:	2100      	movs	r1, #0
    45ae:	f7ff ffdf 	bl	4570 <_find_first_thread_to_unpend>

	if (thread != NULL) {
    45b2:	4604      	mov	r4, r0
    45b4:	b128      	cbz	r0, 45c2 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
    45b6:	f7ff ffe7 	bl	4588 <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    45ba:	f104 0018 	add.w	r0, r4, #24
    45be:	f000 fb43 	bl	4c48 <_abort_timeout>
}
    45c2:	4620      	mov	r0, r4
    45c4:	bd10      	pop	{r4, pc}

000045c6 <_unpend_thread>:
{
    45c6:	b510      	push	{r4, lr}
    45c8:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
    45ca:	f7ff ffdd 	bl	4588 <_unpend_thread_no_timeout>
    45ce:	f104 0018 	add.w	r0, r4, #24
}
    45d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45d6:	f000 bb37 	b.w	4c48 <_abort_timeout>
	...

000045dc <_reschedule>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    45dc:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    45e0:	2b0d      	cmp	r3, #13
    45e2:	d80b      	bhi.n	45fc <_reschedule+0x20>
    45e4:	b11b      	cbz	r3, 45ee <_reschedule+0x12>
    45e6:	4b07      	ldr	r3, [pc, #28]	; (4604 <_reschedule+0x28>)
    45e8:	685b      	ldr	r3, [r3, #4]
    45ea:	051b      	lsls	r3, r3, #20
    45ec:	d506      	bpl.n	45fc <_reschedule+0x20>
	if (_get_next_ready_thread() != _current) {
    45ee:	4b06      	ldr	r3, [pc, #24]	; (4608 <_reschedule+0x2c>)
    45f0:	689a      	ldr	r2, [r3, #8]
    45f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45f4:	429a      	cmp	r2, r3
    45f6:	d001      	beq.n	45fc <_reschedule+0x20>
    45f8:	f7fd bebc 	b.w	2374 <__swap>
    45fc:	f380 8811 	msr	BASEPRI, r0
}
    4600:	4770      	bx	lr
    4602:	bf00      	nop
    4604:	e000ed00 	.word	0xe000ed00
    4608:	2000078c 	.word	0x2000078c

0000460c <k_sched_unlock>:
{
    460c:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
    460e:	f7ff ff65 	bl	44dc <k_spin_lock.isra.10>
		++_current->base.sched_locked;
    4612:	4b0a      	ldr	r3, [pc, #40]	; (463c <k_sched_unlock+0x30>)
    4614:	689a      	ldr	r2, [r3, #8]
    4616:	7bd3      	ldrb	r3, [r2, #15]
    4618:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    461a:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    461c:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    461e:	2001      	movs	r0, #1
    4620:	f7ff ff64 	bl	44ec <update_cache>
    4624:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    4628:	f04f 0320 	mov.w	r3, #32
    462c:	f3ef 8011 	mrs	r0, BASEPRI
    4630:	f383 8811 	msr	BASEPRI, r3
}
    4634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    4638:	f7ff bfd0 	b.w	45dc <_reschedule>
    463c:	2000078c 	.word	0x2000078c

00004640 <_priq_dumb_add>:
	return list->head == list;
    4640:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4642:	4298      	cmp	r0, r3
{
    4644:	b510      	push	{r4, lr}
    4646:	d013      	beq.n	4670 <_priq_dumb_add+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4648:	b193      	cbz	r3, 4670 <_priq_dumb_add+0x30>
	if (t1->base.prio < t2->base.prio) {
    464a:	f991 200e 	ldrsb.w	r2, [r1, #14]
    464e:	f993 400e 	ldrsb.w	r4, [r3, #14]
    4652:	4294      	cmp	r4, r2
    4654:	dd06      	ble.n	4664 <_priq_dumb_add+0x24>
		node->prev = insert_point->prev;
    4656:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    4658:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    465c:	685a      	ldr	r2, [r3, #4]
    465e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    4660:	6059      	str	r1, [r3, #4]
}
    4662:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
    4664:	6844      	ldr	r4, [r0, #4]
    4666:	42a3      	cmp	r3, r4
    4668:	d002      	beq.n	4670 <_priq_dumb_add+0x30>
    466a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    466c:	2b00      	cmp	r3, #0
    466e:	d1ee      	bne.n	464e <_priq_dumb_add+0xe>
	node->prev = list->tail;
    4670:	6843      	ldr	r3, [r0, #4]
    4672:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    4674:	6843      	ldr	r3, [r0, #4]
	node->next = list;
    4676:	6008      	str	r0, [r1, #0]
	list->tail->next = node;
    4678:	6019      	str	r1, [r3, #0]
	list->tail = node;
    467a:	6041      	str	r1, [r0, #4]
    467c:	e7f1      	b.n	4662 <_priq_dumb_add+0x22>
	...

00004680 <_add_thread_to_ready_q>:
{
    4680:	b538      	push	{r3, r4, r5, lr}
    4682:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    4684:	f7ff ff2a 	bl	44dc <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    4688:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    468a:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    468c:	4806      	ldr	r0, [pc, #24]	; (46a8 <_add_thread_to_ready_q+0x28>)
    468e:	f7ff ffd7 	bl	4640 <_priq_dumb_add>
	thread->base.thread_state |= states;
    4692:	7b63      	ldrb	r3, [r4, #13]
    4694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4698:	7363      	strb	r3, [r4, #13]
		update_cache(0);
    469a:	2000      	movs	r0, #0
    469c:	f7ff ff26 	bl	44ec <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    46a0:	f385 8811 	msr	BASEPRI, r5
}
    46a4:	bd38      	pop	{r3, r4, r5, pc}
    46a6:	bf00      	nop
    46a8:	200007b4 	.word	0x200007b4

000046ac <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    46ac:	7b42      	ldrb	r2, [r0, #13]
    46ae:	06d2      	lsls	r2, r2, #27
    46b0:	d104      	bne.n	46bc <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    46b2:	6a03      	ldr	r3, [r0, #32]
    46b4:	3301      	adds	r3, #1
    46b6:	d101      	bne.n	46bc <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    46b8:	f7ff bfe2 	b.w	4680 <_add_thread_to_ready_q>
}
    46bc:	4770      	bx	lr

000046be <z_thread_timeout>:
{
    46be:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
    46c0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    46c4:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    46c6:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    46ca:	b113      	cbz	r3, 46d2 <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
    46cc:	4628      	mov	r0, r5
    46ce:	f7ff ff5b 	bl	4588 <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    46d2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    46d6:	f023 0304 	bic.w	r3, r3, #4
    46da:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
    46de:	4628      	mov	r0, r5
}
    46e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
    46e4:	f7ff bfe2 	b.w	46ac <_ready_thread>

000046e8 <_move_thread_to_end_of_prio_q>:
{
    46e8:	b570      	push	{r4, r5, r6, lr}
    46ea:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    46ec:	f7ff fef6 	bl	44dc <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    46f0:	4d0b      	ldr	r5, [pc, #44]	; (4720 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
    46f2:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    46f4:	4620      	mov	r0, r4
    46f6:	f7ff fed1 	bl	449c <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    46fa:	4621      	mov	r1, r4
    46fc:	4628      	mov	r0, r5
    46fe:	f7ff ff9f 	bl	4640 <_priq_dumb_add>
	thread->base.thread_state |= states;
    4702:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    4704:	f855 0c20 	ldr.w	r0, [r5, #-32]
    4708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    470c:	7363      	strb	r3, [r4, #13]
    470e:	1b03      	subs	r3, r0, r4
    4710:	4258      	negs	r0, r3
    4712:	4158      	adcs	r0, r3
    4714:	f7ff feea 	bl	44ec <update_cache>
    4718:	f386 8811 	msr	BASEPRI, r6
}
    471c:	bd70      	pop	{r4, r5, r6, pc}
    471e:	bf00      	nop
    4720:	200007b4 	.word	0x200007b4

00004724 <z_time_slice>:
	if (slice_time && sliceable(_current)) {
    4724:	4b11      	ldr	r3, [pc, #68]	; (476c <z_time_slice+0x48>)
    4726:	681b      	ldr	r3, [r3, #0]
{
    4728:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
    472a:	b1eb      	cbz	r3, 4768 <z_time_slice+0x44>
    472c:	4910      	ldr	r1, [pc, #64]	; (4770 <z_time_slice+0x4c>)
    472e:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
    4730:	89da      	ldrh	r2, [r3, #14]
    4732:	2a7f      	cmp	r2, #127	; 0x7f
    4734:	d818      	bhi.n	4768 <z_time_slice+0x44>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
    4736:	4a0f      	ldr	r2, [pc, #60]	; (4774 <z_time_slice+0x50>)
    4738:	f993 400e 	ldrsb.w	r4, [r3, #14]
    473c:	6812      	ldr	r2, [r2, #0]
    473e:	4294      	cmp	r4, r2
    4740:	db12      	blt.n	4768 <z_time_slice+0x44>
	return thread == _idle_thread;
    4742:	4a0d      	ldr	r2, [pc, #52]	; (4778 <z_time_slice+0x54>)
		&& !_is_idle(t)
    4744:	6812      	ldr	r2, [r2, #0]
    4746:	4293      	cmp	r3, r2
    4748:	d00e      	beq.n	4768 <z_time_slice+0x44>
		&& !_is_thread_timeout_active(t);
    474a:	6a1a      	ldr	r2, [r3, #32]
    474c:	3201      	adds	r2, #1
    474e:	d10b      	bne.n	4768 <z_time_slice+0x44>
		if (ticks >= _current_cpu->slice_ticks) {
    4750:	690a      	ldr	r2, [r1, #16]
    4752:	4282      	cmp	r2, r0
    4754:	dc06      	bgt.n	4764 <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
    4756:	4618      	mov	r0, r3
    4758:	f7ff ffc6 	bl	46e8 <_move_thread_to_end_of_prio_q>
}
    475c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    4760:	f7ff bea2 	b.w	44a8 <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
    4764:	1a12      	subs	r2, r2, r0
    4766:	610a      	str	r2, [r1, #16]
}
    4768:	bd10      	pop	{r4, pc}
    476a:	bf00      	nop
    476c:	20000628 	.word	0x20000628
    4770:	2000078c 	.word	0x2000078c
    4774:	20000624 	.word	0x20000624
    4778:	00005a98 	.word	0x00005a98

0000477c <pend>:
{
    477c:	b570      	push	{r4, r5, r6, lr}
    477e:	4604      	mov	r4, r0
    4780:	460d      	mov	r5, r1
    4782:	4616      	mov	r6, r2
	_remove_thread_from_ready_q(thread);
    4784:	f7ff fed8 	bl	4538 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    4788:	7b63      	ldrb	r3, [r4, #13]
    478a:	f043 0302 	orr.w	r3, r3, #2
    478e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4790:	b125      	cbz	r5, 479c <pend+0x20>
		thread->base.pended_on = wait_q;
    4792:	60a5      	str	r5, [r4, #8]
		_priq_wait_add(&wait_q->waitq, thread);
    4794:	4621      	mov	r1, r4
    4796:	4628      	mov	r0, r5
    4798:	f7ff ff52 	bl	4640 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
    479c:	1c73      	adds	r3, r6, #1
    479e:	d012      	beq.n	47c6 <pend+0x4a>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    47a0:	4809      	ldr	r0, [pc, #36]	; (47c8 <pend+0x4c>)
    47a2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    47a6:	2100      	movs	r1, #0
    47a8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    47ac:	fbc5 0106 	smlal	r0, r1, r5, r6
    47b0:	2300      	movs	r3, #0
    47b2:	f7fb fd2f 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    47b6:	4905      	ldr	r1, [pc, #20]	; (47cc <pend+0x50>)
    47b8:	1c42      	adds	r2, r0, #1
    47ba:	f104 0018 	add.w	r0, r4, #24
}
    47be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47c2:	f000 ba7f 	b.w	4cc4 <_add_timeout>
    47c6:	bd70      	pop	{r4, r5, r6, pc}
    47c8:	0004ffff 	.word	0x0004ffff
    47cc:	000046bf 	.word	0x000046bf

000047d0 <_pend_current_thread>:
{
    47d0:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
    47d2:	4b05      	ldr	r3, [pc, #20]	; (47e8 <_pend_current_thread+0x18>)
{
    47d4:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
    47d6:	6898      	ldr	r0, [r3, #8]
    47d8:	f7ff ffd0 	bl	477c <pend>
    47dc:	4620      	mov	r0, r4
}
    47de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    47e2:	f7fd bdc7 	b.w	2374 <__swap>
    47e6:	bf00      	nop
    47e8:	2000078c 	.word	0x2000078c

000047ec <_thread_priority_set>:
{
    47ec:	b538      	push	{r3, r4, r5, lr}
    47ee:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    47f0:	f7ff fe74 	bl	44dc <k_spin_lock.isra.10>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    47f4:	7b63      	ldrb	r3, [r4, #13]
    47f6:	06db      	lsls	r3, r3, #27
    47f8:	4605      	mov	r5, r0
    47fa:	b249      	sxtb	r1, r1
    47fc:	d11b      	bne.n	4836 <_thread_priority_set+0x4a>
		if (need_sched) {
    47fe:	6a23      	ldr	r3, [r4, #32]
    4800:	3301      	adds	r3, #1
    4802:	d118      	bne.n	4836 <_thread_priority_set+0x4a>
	sys_dlist_remove(&thread->base.qnode_dlist);
    4804:	4620      	mov	r0, r4
    4806:	f7ff fe49 	bl	449c <sys_dlist_remove>
			_priq_run_add(&_kernel.ready_q.runq, thread);
    480a:	480d      	ldr	r0, [pc, #52]	; (4840 <_thread_priority_set+0x54>)
			thread->base.prio = prio;
    480c:	73a1      	strb	r1, [r4, #14]
			_priq_run_add(&_kernel.ready_q.runq, thread);
    480e:	4621      	mov	r1, r4
    4810:	f7ff ff16 	bl	4640 <_priq_dumb_add>
			update_cache(1);
    4814:	2001      	movs	r0, #1
    4816:	f7ff fe69 	bl	44ec <update_cache>
    481a:	2301      	movs	r3, #1
    481c:	f385 8811 	msr	BASEPRI, r5
	if (need_sched) {
    4820:	b163      	cbz	r3, 483c <_thread_priority_set+0x50>
	__asm__ volatile(
    4822:	f04f 0320 	mov.w	r3, #32
    4826:	f3ef 8011 	mrs	r0, BASEPRI
    482a:	f383 8811 	msr	BASEPRI, r3
}
    482e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(irq_lock());
    4832:	f7ff bed3 	b.w	45dc <_reschedule>
			thread->base.prio = prio;
    4836:	73a1      	strb	r1, [r4, #14]
    4838:	2300      	movs	r3, #0
    483a:	e7ef      	b.n	481c <_thread_priority_set+0x30>
}
    483c:	bd38      	pop	{r3, r4, r5, pc}
    483e:	bf00      	nop
    4840:	200007b4 	.word	0x200007b4

00004844 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    4844:	4b05      	ldr	r3, [pc, #20]	; (485c <_sched_init+0x18>)
    4846:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    484a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
	slice_time = _ms_to_ticks(duration_in_ms);
    484e:	4a04      	ldr	r2, [pc, #16]	; (4860 <_sched_init+0x1c>)
    4850:	2300      	movs	r3, #0
    4852:	6013      	str	r3, [r2, #0]
	slice_max_prio = prio;
    4854:	4a03      	ldr	r2, [pc, #12]	; (4864 <_sched_init+0x20>)
    4856:	6013      	str	r3, [r2, #0]
	reset_time_slice();
    4858:	f7ff be26 	b.w	44a8 <reset_time_slice>
    485c:	2000078c 	.word	0x2000078c
    4860:	20000628 	.word	0x20000628
    4864:	20000624 	.word	0x20000624

00004868 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    4868:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    486a:	4c12      	ldr	r4, [pc, #72]	; (48b4 <_impl_k_yield+0x4c>)
    486c:	4b12      	ldr	r3, [pc, #72]	; (48b8 <_impl_k_yield+0x50>)
    486e:	68a2      	ldr	r2, [r4, #8]
    4870:	681b      	ldr	r3, [r3, #0]
    4872:	429a      	cmp	r2, r3
    4874:	d00f      	beq.n	4896 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
    4876:	f7ff fe31 	bl	44dc <k_spin_lock.isra.10>
    487a:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    487c:	68a0      	ldr	r0, [r4, #8]
    487e:	f7ff fe0d 	bl	449c <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
    4882:	68a1      	ldr	r1, [r4, #8]
    4884:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4888:	f7ff feda 	bl	4640 <_priq_dumb_add>
			update_cache(1);
    488c:	2001      	movs	r0, #1
    488e:	f7ff fe2d 	bl	44ec <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4892:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    4896:	68a2      	ldr	r2, [r4, #8]
    4898:	6a63      	ldr	r3, [r4, #36]	; 0x24
    489a:	429a      	cmp	r2, r3
    489c:	d009      	beq.n	48b2 <_impl_k_yield+0x4a>
	__asm__ volatile(
    489e:	f04f 0320 	mov.w	r3, #32
    48a2:	f3ef 8011 	mrs	r0, BASEPRI
    48a6:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
    48aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    48ae:	f7fd bd61 	b.w	2374 <__swap>
    48b2:	bd38      	pop	{r3, r4, r5, pc}
    48b4:	2000078c 	.word	0x2000078c
    48b8:	00005a98 	.word	0x00005a98

000048bc <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
    48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    48be:	4604      	mov	r4, r0
    48c0:	b918      	cbnz	r0, 48ca <_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    48c2:	f7ff ffd1 	bl	4868 <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
    48c6:	4620      	mov	r0, r4
    48c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48ca:	4819      	ldr	r0, [pc, #100]	; (4930 <_impl_k_sleep+0x74>)
    48cc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    48d0:	2100      	movs	r1, #0
    48d2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    48d6:	2300      	movs	r3, #0
    48d8:	fbc5 0104 	smlal	r0, r1, r5, r4
    48dc:	f7fb fc9a 	bl	214 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    48e0:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    48e2:	f000 fa89 	bl	4df8 <z_tick_get_32>
    48e6:	182c      	adds	r4, r5, r0
    48e8:	f04f 0320 	mov.w	r3, #32
    48ec:	f3ef 8711 	mrs	r7, BASEPRI
    48f0:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    48f4:	4e0f      	ldr	r6, [pc, #60]	; (4934 <_impl_k_sleep+0x78>)
    48f6:	68b0      	ldr	r0, [r6, #8]
    48f8:	f7ff fe1e 	bl	4538 <_remove_thread_from_ready_q>
    48fc:	68b0      	ldr	r0, [r6, #8]
    48fe:	490e      	ldr	r1, [pc, #56]	; (4938 <_impl_k_sleep+0x7c>)
    4900:	462a      	mov	r2, r5
    4902:	3018      	adds	r0, #24
    4904:	f000 f9de 	bl	4cc4 <_add_timeout>
    4908:	4638      	mov	r0, r7
    490a:	f7fd fd33 	bl	2374 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
    490e:	f000 fa73 	bl	4df8 <z_tick_get_32>
    4912:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    4914:	2800      	cmp	r0, #0
    4916:	dd09      	ble.n	492c <_impl_k_sleep+0x70>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    4918:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    491c:	2264      	movs	r2, #100	; 0x64
    491e:	2300      	movs	r3, #0
    4920:	fb80 0101 	smull	r0, r1, r0, r1
    4924:	f7fb fcc6 	bl	2b4 <__aeabi_uldivmod>
    4928:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
    492a:	e7cc      	b.n	48c6 <_impl_k_sleep+0xa>
	return 0;
    492c:	2400      	movs	r4, #0
    492e:	e7ca      	b.n	48c6 <_impl_k_sleep+0xa>
    4930:	0004ffff 	.word	0x0004ffff
    4934:	2000078c 	.word	0x2000078c
    4938:	000046bf 	.word	0x000046bf

0000493c <_impl_k_wakeup>:
	return _impl_k_sleep(duration);
}
#endif

void _impl_k_wakeup(k_tid_t thread)
{
    493c:	b538      	push	{r3, r4, r5, lr}
    493e:	4605      	mov	r5, r0
    4940:	f04f 0320 	mov.w	r3, #32
    4944:	f3ef 8411 	mrs	r4, BASEPRI
    4948:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();

	/* verify first if thread is not waiting on an object */
	if (_is_thread_pending(thread)) {
    494c:	7b43      	ldrb	r3, [r0, #13]
    494e:	079a      	lsls	r2, r3, #30
    4950:	d502      	bpl.n	4958 <_impl_k_wakeup+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4952:	f384 8811 	msr	BASEPRI, r4
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
	}
}
    4956:	bd38      	pop	{r3, r4, r5, pc}
	return _abort_timeout(&thread->base.timeout);
    4958:	3018      	adds	r0, #24
    495a:	f000 f975 	bl	4c48 <_abort_timeout>
	if (_abort_thread_timeout(thread) == _INACTIVE) {
    495e:	3001      	adds	r0, #1
    4960:	d0f7      	beq.n	4952 <_impl_k_wakeup+0x16>
	_ready_thread(thread);
    4962:	4628      	mov	r0, r5
    4964:	f7ff fea2 	bl	46ac <_ready_thread>
    4968:	f3ef 8305 	mrs	r3, IPSR
    496c:	2b0d      	cmp	r3, #13
    496e:	d8f0      	bhi.n	4952 <_impl_k_wakeup+0x16>
    4970:	b11b      	cbz	r3, 497a <_impl_k_wakeup+0x3e>
    4972:	4b04      	ldr	r3, [pc, #16]	; (4984 <_impl_k_wakeup+0x48>)
    4974:	685b      	ldr	r3, [r3, #4]
    4976:	051b      	lsls	r3, r3, #20
    4978:	d5eb      	bpl.n	4952 <_impl_k_wakeup+0x16>
		_reschedule(key);
    497a:	4620      	mov	r0, r4
}
    497c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
    4980:	f7ff be2c 	b.w	45dc <_reschedule>
    4984:	e000ed00 	.word	0xe000ed00

00004988 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    4988:	4b01      	ldr	r3, [pc, #4]	; (4990 <_impl_k_current_get+0x8>)
    498a:	6898      	ldr	r0, [r3, #8]
    498c:	4770      	bx	lr
    498e:	bf00      	nop
    4990:	2000078c 	.word	0x2000078c

00004994 <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
    4994:	b570      	push	{r4, r5, r6, lr}
    4996:	4604      	mov	r4, r0
	__asm__ volatile(
    4998:	f04f 0320 	mov.w	r3, #32
    499c:	f3ef 8611 	mrs	r6, BASEPRI
    49a0:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    49a4:	f7ff fe01 	bl	45aa <_unpend_first_thread>
	if (thread != NULL) {
    49a8:	4605      	mov	r5, r0
    49aa:	b170      	cbz	r0, 49ca <_impl_k_sem_give+0x36>
    49ac:	7b43      	ldrb	r3, [r0, #13]
    49ae:	06db      	lsls	r3, r3, #27
    49b0:	d104      	bne.n	49bc <_impl_k_sem_give+0x28>
	if (_is_thread_ready(thread)) {
    49b2:	6a03      	ldr	r3, [r0, #32]
    49b4:	3301      	adds	r3, #1
    49b6:	d101      	bne.n	49bc <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
    49b8:	f7ff fe62 	bl	4680 <_add_thread_to_ready_q>
    49bc:	2300      	movs	r3, #0
    49be:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
    49c0:	4630      	mov	r0, r6
}
    49c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
    49c6:	f7ff be09 	b.w	45dc <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    49ca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    49ce:	429a      	cmp	r2, r3
    49d0:	bf18      	it	ne
    49d2:	3301      	addne	r3, #1
    49d4:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    49d6:	2102      	movs	r1, #2
    49d8:	f104 0010 	add.w	r0, r4, #16
    49dc:	f000 faff 	bl	4fde <_handle_obj_poll_events>
    49e0:	e7ee      	b.n	49c0 <_impl_k_sem_give+0x2c>

000049e2 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    49e2:	b410      	push	{r4}
    49e4:	460a      	mov	r2, r1
    49e6:	4604      	mov	r4, r0
    49e8:	f04f 0320 	mov.w	r3, #32
    49ec:	f3ef 8011 	mrs	r0, BASEPRI
    49f0:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
    49f4:	68a3      	ldr	r3, [r4, #8]
    49f6:	b133      	cbz	r3, 4a06 <_impl_k_sem_take+0x24>
		sem->count--;
    49f8:	3b01      	subs	r3, #1
    49fa:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    49fc:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    4a00:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
    4a02:	bc10      	pop	{r4}
    4a04:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    4a06:	b921      	cbnz	r1, 4a12 <_impl_k_sem_take+0x30>
    4a08:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
    4a0c:	f06f 000f 	mvn.w	r0, #15
    4a10:	e7f7      	b.n	4a02 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
    4a12:	4621      	mov	r1, r4
}
    4a14:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
    4a16:	f7ff bedb 	b.w	47d0 <_pend_current_thread>
	...

00004a1c <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    4a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a1e:	4605      	mov	r5, r0
    4a20:	460f      	mov	r7, r1
	__asm__ volatile(
    4a22:	f04f 0320 	mov.w	r3, #32
    4a26:	f3ef 8411 	mrs	r4, BASEPRI
    4a2a:	f383 8811 	msr	BASEPRI, r3
	return (s32_t)ceiling_fraction(
    4a2e:	480a      	ldr	r0, [pc, #40]	; (4a58 <schedule_new_thread.part.8+0x3c>)
    4a30:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4a34:	2100      	movs	r1, #0
    4a36:	2300      	movs	r3, #0
    4a38:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4a3c:	fbc6 0107 	smlal	r0, r1, r6, r7
    4a40:	f7fb fbe8 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4a44:	4905      	ldr	r1, [pc, #20]	; (4a5c <schedule_new_thread.part.8+0x40>)
    4a46:	1c42      	adds	r2, r0, #1
    4a48:	f105 0018 	add.w	r0, r5, #24
    4a4c:	f000 f93a 	bl	4cc4 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4a50:	f384 8811 	msr	BASEPRI, r4
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    4a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a56:	bf00      	nop
    4a58:	0004ffff 	.word	0x0004ffff
    4a5c:	000046bf 	.word	0x000046bf

00004a60 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4a60:	7b42      	ldrb	r2, [r0, #13]
    4a62:	06d2      	lsls	r2, r2, #27
    4a64:	d104      	bne.n	4a70 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    4a66:	6a03      	ldr	r3, [r0, #32]
    4a68:	3301      	adds	r3, #1
    4a6a:	d101      	bne.n	4a70 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    4a6c:	f7ff be08 	b.w	4680 <_add_thread_to_ready_q>
}
    4a70:	4770      	bx	lr
	...

00004a74 <k_is_in_isr>:
    4a74:	f3ef 8005 	mrs	r0, IPSR
    4a78:	280d      	cmp	r0, #13
    4a7a:	d807      	bhi.n	4a8c <k_is_in_isr+0x18>
    4a7c:	b138      	cbz	r0, 4a8e <k_is_in_isr+0x1a>
    4a7e:	4b04      	ldr	r3, [pc, #16]	; (4a90 <k_is_in_isr+0x1c>)
    4a80:	6858      	ldr	r0, [r3, #4]
    4a82:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    4a86:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    4a8a:	4770      	bx	lr
    4a8c:	2001      	movs	r0, #1
}
    4a8e:	4770      	bx	lr
    4a90:	e000ed00 	.word	0xe000ed00

00004a94 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    4a94:	4b02      	ldr	r3, [pc, #8]	; (4aa0 <_is_thread_essential+0xc>)
    4a96:	689b      	ldr	r3, [r3, #8]
    4a98:	7b18      	ldrb	r0, [r3, #12]
}
    4a9a:	f000 0001 	and.w	r0, r0, #1
    4a9e:	4770      	bx	lr
    4aa0:	2000078c 	.word	0x2000078c

00004aa4 <_impl_k_thread_start>:
{
    4aa4:	b510      	push	{r4, lr}
	__asm__ volatile(
    4aa6:	f04f 0320 	mov.w	r3, #32
    4aaa:	f3ef 8411 	mrs	r4, BASEPRI
    4aae:	f383 8811 	msr	BASEPRI, r3
	if (_has_thread_started(thread)) {
    4ab2:	7b43      	ldrb	r3, [r0, #13]
    4ab4:	0759      	lsls	r1, r3, #29
    4ab6:	d402      	bmi.n	4abe <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4ab8:	f384 8811 	msr	BASEPRI, r4
}
    4abc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4abe:	f023 0304 	bic.w	r3, r3, #4
    4ac2:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
    4ac4:	f7ff ffcc 	bl	4a60 <_ready_thread>
	_reschedule(key);
    4ac8:	4620      	mov	r0, r4
}
    4aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    4ace:	f7ff bd85 	b.w	45dc <_reschedule>
	...

00004ad4 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    4ad4:	b530      	push	{r4, r5, lr}
    4ad6:	b087      	sub	sp, #28
    4ad8:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4ada:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4adc:	9504      	str	r5, [sp, #16]
    4ade:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4ae0:	9503      	str	r5, [sp, #12]
    4ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4ae4:	9502      	str	r5, [sp, #8]
    4ae6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4ae8:	9501      	str	r5, [sp, #4]
    4aea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4aec:	9500      	str	r5, [sp, #0]
    4aee:	f7fd fe0d 	bl	270c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    4af2:	4b04      	ldr	r3, [pc, #16]	; (4b04 <_setup_new_thread+0x30>)
    4af4:	689b      	ldr	r3, [r3, #8]
    4af6:	b913      	cbnz	r3, 4afe <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4af8:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    4afa:	b007      	add	sp, #28
    4afc:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    4afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4b00:	e7fa      	b.n	4af8 <_setup_new_thread+0x24>
    4b02:	bf00      	nop
    4b04:	2000078c 	.word	0x2000078c

00004b08 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    4b08:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    4b0a:	b510      	push	{r4, lr}
    4b0c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    4b0e:	b103      	cbz	r3, 4b12 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    4b10:	4798      	blx	r3
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4b12:	7b63      	ldrb	r3, [r4, #13]
    4b14:	06da      	lsls	r2, r3, #27
    4b16:	d10a      	bne.n	4b2e <_k_thread_single_abort+0x26>
	}

	if (_is_thread_ready(thread)) {
    4b18:	6a22      	ldr	r2, [r4, #32]
    4b1a:	3201      	adds	r2, #1
    4b1c:	d107      	bne.n	4b2e <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    4b1e:	4620      	mov	r0, r4
    4b20:	f7ff fd0a 	bl	4538 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    4b24:	7b63      	ldrb	r3, [r4, #13]
    4b26:	f043 0308 	orr.w	r3, r3, #8
    4b2a:	7363      	strb	r3, [r4, #13]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    4b2c:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    4b2e:	079b      	lsls	r3, r3, #30
    4b30:	d502      	bpl.n	4b38 <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
    4b32:	4620      	mov	r0, r4
    4b34:	f7ff fd28 	bl	4588 <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
    4b38:	6a23      	ldr	r3, [r4, #32]
    4b3a:	3301      	adds	r3, #1
    4b3c:	d0f2      	beq.n	4b24 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    4b3e:	f104 0018 	add.w	r0, r4, #24
    4b42:	f000 f881 	bl	4c48 <_abort_timeout>
    4b46:	e7ed      	b.n	4b24 <_k_thread_single_abort+0x1c>

00004b48 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    4b48:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    4b4a:	4f23      	ldr	r7, [pc, #140]	; (4bd8 <_init_static_threads+0x90>)
    4b4c:	4d23      	ldr	r5, [pc, #140]	; (4bdc <_init_static_threads+0x94>)
{
    4b4e:	b087      	sub	sp, #28
    4b50:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    4b52:	42bd      	cmp	r5, r7
    4b54:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4b58:	d314      	bcc.n	4b84 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    4b5a:	4b21      	ldr	r3, [pc, #132]	; (4be0 <_init_static_threads+0x98>)
    4b5c:	689a      	ldr	r2, [r3, #8]
    4b5e:	7bd3      	ldrb	r3, [r2, #15]
    4b60:	3b01      	subs	r3, #1
    4b62:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4b64:	f04f 0320 	mov.w	r3, #32
    4b68:	f3ef 8511 	mrs	r5, BASEPRI
    4b6c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    4b70:	4c1a      	ldr	r4, [pc, #104]	; (4bdc <_init_static_threads+0x94>)
    4b72:	42b4      	cmp	r4, r6
    4b74:	d323      	bcc.n	4bbe <_init_static_threads+0x76>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4b76:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    4b7a:	b007      	add	sp, #28
    4b7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    4b80:	f7ff bd44 	b.w	460c <k_sched_unlock>
		_setup_new_thread(
    4b84:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4b88:	9305      	str	r3, [sp, #20]
    4b8a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4b8e:	9304      	str	r3, [sp, #16]
    4b90:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4b94:	9303      	str	r3, [sp, #12]
    4b96:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4b9a:	9302      	str	r3, [sp, #8]
    4b9c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4ba0:	9301      	str	r3, [sp, #4]
    4ba2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4ba6:	9300      	str	r3, [sp, #0]
    4ba8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4bac:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4bb0:	f7ff ff90 	bl	4ad4 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4bb4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4bb8:	64dd      	str	r5, [r3, #76]	; 0x4c
    4bba:	4625      	mov	r5, r4
    4bbc:	e7c9      	b.n	4b52 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    4bbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4bc0:	1c4b      	adds	r3, r1, #1
    4bc2:	d003      	beq.n	4bcc <_init_static_threads+0x84>
			schedule_new_thread(thread_data->init_thread,
    4bc4:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    4bc6:	b919      	cbnz	r1, 4bd0 <_init_static_threads+0x88>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    4bc8:	f7ff ff6c 	bl	4aa4 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4bcc:	3430      	adds	r4, #48	; 0x30
    4bce:	e7d0      	b.n	4b72 <_init_static_threads+0x2a>
    4bd0:	f7ff ff24 	bl	4a1c <schedule_new_thread.part.8>
    4bd4:	e7fa      	b.n	4bcc <_init_static_threads+0x84>
    4bd6:	bf00      	nop
    4bd8:	20001e08 	.word	0x20001e08
    4bdc:	20001dd8 	.word	0x20001dd8
    4be0:	2000078c 	.word	0x2000078c

00004be4 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    4be4:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    4be6:	2300      	movs	r3, #0
    4be8:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
    4bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
    4bee:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    4bf0:	7381      	strb	r1, [r0, #14]
    4bf2:	6203      	str	r3, [r0, #32]

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    4bf4:	4770      	bx	lr
	...

00004bf8 <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4bf8:	4b03      	ldr	r3, [pc, #12]	; (4c08 <elapsed+0x10>)
    4bfa:	681b      	ldr	r3, [r3, #0]
    4bfc:	b90b      	cbnz	r3, 4c02 <elapsed+0xa>
    4bfe:	f7fd bb36 	b.w	226e <z_clock_elapsed>
}
    4c02:	2000      	movs	r0, #0
    4c04:	4770      	bx	lr
    4c06:	bf00      	nop
    4c08:	2000062c 	.word	0x2000062c

00004c0c <k_spin_lock.isra.1>:
	__asm__ volatile(
    4c0c:	f04f 0320 	mov.w	r3, #32
    4c10:	f3ef 8011 	mrs	r0, BASEPRI
    4c14:	f383 8811 	msr	BASEPRI, r3
    4c18:	4770      	bx	lr
	...

00004c1c <remove_timeout>:
{
    4c1c:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c1e:	b140      	cbz	r0, 4c32 <remove_timeout+0x16>
    4c20:	4a08      	ldr	r2, [pc, #32]	; (4c44 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    4c22:	6852      	ldr	r2, [r2, #4]
    4c24:	4290      	cmp	r0, r2
    4c26:	d004      	beq.n	4c32 <remove_timeout+0x16>
	if (next(t) != NULL) {
    4c28:	b11b      	cbz	r3, 4c32 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    4c2a:	689a      	ldr	r2, [r3, #8]
    4c2c:	6881      	ldr	r1, [r0, #8]
    4c2e:	440a      	add	r2, r1
    4c30:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    4c32:	6842      	ldr	r2, [r0, #4]
    4c34:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4c36:	6803      	ldr	r3, [r0, #0]
    4c38:	605a      	str	r2, [r3, #4]
	t->dticks = _INACTIVE;
    4c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c3e:	6083      	str	r3, [r0, #8]
}
    4c40:	4770      	bx	lr
    4c42:	bf00      	nop
    4c44:	20001d4c 	.word	0x20001d4c

00004c48 <_abort_timeout>:

	z_clock_set_timeout(_get_next_timeout_expiry(), false);
}

int _abort_timeout(struct _timeout *to)
{
    4c48:	b510      	push	{r4, lr}
    4c4a:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
    4c4c:	f7ff ffde 	bl	4c0c <k_spin_lock.isra.1>
    4c50:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
    4c52:	6890      	ldr	r0, [r2, #8]
    4c54:	1c43      	adds	r3, r0, #1
    4c56:	d003      	beq.n	4c60 <_abort_timeout+0x18>
			remove_timeout(to);
    4c58:	4610      	mov	r0, r2
    4c5a:	f7ff ffdf 	bl	4c1c <remove_timeout>
			ret = 0;
    4c5e:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4c60:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
    4c64:	bd10      	pop	{r4, pc}
	...

00004c68 <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    4c68:	4b13      	ldr	r3, [pc, #76]	; (4cb8 <_get_next_timeout_expiry+0x50>)
    4c6a:	781b      	ldrb	r3, [r3, #0]
{
    4c6c:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    4c6e:	2b00      	cmp	r3, #0
    4c70:	bf14      	ite	ne
    4c72:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    4c76:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
    4c7a:	f7ff ffc7 	bl	4c0c <k_spin_lock.isra.1>
	return list->head == list;
    4c7e:	4b0f      	ldr	r3, [pc, #60]	; (4cbc <_get_next_timeout_expiry+0x54>)
    4c80:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c82:	429c      	cmp	r4, r3
    4c84:	4606      	mov	r6, r0
    4c86:	d00a      	beq.n	4c9e <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    4c88:	b14c      	cbz	r4, 4c9e <_get_next_timeout_expiry+0x36>
    4c8a:	68a5      	ldr	r5, [r4, #8]
    4c8c:	f7ff ffb4 	bl	4bf8 <elapsed>
    4c90:	1a28      	subs	r0, r5, r0
    4c92:	2800      	cmp	r0, #0
    4c94:	db0d      	blt.n	4cb2 <_get_next_timeout_expiry+0x4a>
    4c96:	68a4      	ldr	r4, [r4, #8]
    4c98:	f7ff ffae 	bl	4bf8 <elapsed>
    4c9c:	1a22      	subs	r2, r4, r0
    4c9e:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4ca2:	4b07      	ldr	r3, [pc, #28]	; (4cc0 <_get_next_timeout_expiry+0x58>)
    4ca4:	691b      	ldr	r3, [r3, #16]
    4ca6:	b113      	cbz	r3, 4cae <_get_next_timeout_expiry+0x46>
    4ca8:	429a      	cmp	r2, r3
    4caa:	bfa8      	it	ge
    4cac:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4cae:	4610      	mov	r0, r2
    4cb0:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    4cb2:	2200      	movs	r2, #0
    4cb4:	e7f3      	b.n	4c9e <_get_next_timeout_expiry+0x36>
    4cb6:	bf00      	nop
    4cb8:	20000630 	.word	0x20000630
    4cbc:	20001d4c 	.word	0x20001d4c
    4cc0:	2000078c 	.word	0x2000078c

00004cc4 <_add_timeout>:
{
    4cc4:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
    4cc6:	60c1      	str	r1, [r0, #12]
{
    4cc8:	4615      	mov	r5, r2
    4cca:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    4ccc:	f7ff ff9e 	bl	4c0c <k_spin_lock.isra.1>
    4cd0:	4606      	mov	r6, r0
		to->dticks = ticks + elapsed();
    4cd2:	f7ff ff91 	bl	4bf8 <elapsed>
	return list->head == list;
    4cd6:	4a16      	ldr	r2, [pc, #88]	; (4d30 <_add_timeout+0x6c>)
    4cd8:	6813      	ldr	r3, [r2, #0]
    4cda:	2d01      	cmp	r5, #1
    4cdc:	bfac      	ite	ge
    4cde:	1940      	addge	r0, r0, r5
    4ce0:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ce2:	4293      	cmp	r3, r2
    4ce4:	60a0      	str	r0, [r4, #8]
    4ce6:	d001      	beq.n	4cec <_add_timeout+0x28>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ce8:	6855      	ldr	r5, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    4cea:	b933      	cbnz	r3, 4cfa <_add_timeout+0x36>
	node->prev = list->tail;
    4cec:	6853      	ldr	r3, [r2, #4]
    4cee:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4cf0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
    4cf2:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
    4cf4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4cf6:	6054      	str	r4, [r2, #4]
    4cf8:	e00b      	b.n	4d12 <_add_timeout+0x4e>
			if (t->dticks > to->dticks) {
    4cfa:	6898      	ldr	r0, [r3, #8]
    4cfc:	68a1      	ldr	r1, [r4, #8]
    4cfe:	4288      	cmp	r0, r1
    4d00:	dd10      	ble.n	4d24 <_add_timeout+0x60>
		node->prev = insert_point->prev;
    4d02:	685a      	ldr	r2, [r3, #4]
				t->dticks -= to->dticks;
    4d04:	1a41      	subs	r1, r0, r1
    4d06:	6099      	str	r1, [r3, #8]
		node->next = insert_point;
    4d08:	e9c4 3200 	strd	r3, r2, [r4]
		insert_point->prev->next = node;
    4d0c:	685a      	ldr	r2, [r3, #4]
    4d0e:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
    4d10:	605c      	str	r4, [r3, #4]
    4d12:	f386 8811 	msr	BASEPRI, r6
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    4d16:	f7ff ffa7 	bl	4c68 <_get_next_timeout_expiry>
    4d1a:	2100      	movs	r1, #0
}
    4d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    4d20:	f7fd baa4 	b.w	226c <z_clock_set_timeout>
			to->dticks -= t->dticks;
    4d24:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    4d26:	429d      	cmp	r5, r3
    4d28:	60a1      	str	r1, [r4, #8]
    4d2a:	d0df      	beq.n	4cec <_add_timeout+0x28>
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	e7dc      	b.n	4cea <_add_timeout+0x26>
    4d30:	20001d4c 	.word	0x20001d4c

00004d34 <z_clock_announce>:
{
    4d34:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	announce_remaining = ticks;
    4d38:	4d21      	ldr	r5, [pc, #132]	; (4dc0 <z_clock_announce+0x8c>)
	return list->head == list;
    4d3a:	4e22      	ldr	r6, [pc, #136]	; (4dc4 <z_clock_announce+0x90>)
					curr_tick += t->dticks;
    4d3c:	4f22      	ldr	r7, [pc, #136]	; (4dc8 <z_clock_announce+0x94>)
{
    4d3e:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d40:	f04f 0800 	mov.w	r8, #0
	z_time_slice(ticks);
    4d44:	f7ff fcee 	bl	4724 <z_time_slice>
	announce_remaining = ticks;
    4d48:	602c      	str	r4, [r5, #0]
		LOCKED(&timeout_lock) {
    4d4a:	f7ff ff5f 	bl	4c0c <k_spin_lock.isra.1>
	return list->head == list;
    4d4e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d50:	42b4      	cmp	r4, r6
    4d52:	4681      	mov	r9, r0
    4d54:	d01c      	beq.n	4d90 <z_clock_announce+0x5c>
			if (t != NULL) {
    4d56:	b194      	cbz	r4, 4d7e <z_clock_announce+0x4a>
				if (t->dticks <= announce_remaining) {
    4d58:	68a1      	ldr	r1, [r4, #8]
    4d5a:	682b      	ldr	r3, [r5, #0]
    4d5c:	4299      	cmp	r1, r3
    4d5e:	dc15      	bgt.n	4d8c <z_clock_announce+0x58>
					announce_remaining -= t->dticks;
    4d60:	1a5b      	subs	r3, r3, r1
    4d62:	602b      	str	r3, [r5, #0]
					curr_tick += t->dticks;
    4d64:	e9d7 2300 	ldrd	r2, r3, [r7]
    4d68:	eb12 0b01 	adds.w	fp, r2, r1
    4d6c:	eb43 7ce1 	adc.w	ip, r3, r1, asr #31
					t->dticks = 0;
    4d70:	f8c4 8008 	str.w	r8, [r4, #8]
					remove_timeout(t);
    4d74:	4620      	mov	r0, r4
					curr_tick += t->dticks;
    4d76:	e9c7 bc00 	strd	fp, ip, [r7]
					remove_timeout(t);
    4d7a:	f7ff ff4f 	bl	4c1c <remove_timeout>
    4d7e:	f389 8811 	msr	BASEPRI, r9
		if (t == NULL) {
    4d82:	b13c      	cbz	r4, 4d94 <z_clock_announce+0x60>
		t->fn(t);
    4d84:	68e3      	ldr	r3, [r4, #12]
    4d86:	4620      	mov	r0, r4
    4d88:	4798      	blx	r3
		LOCKED(&timeout_lock) {
    4d8a:	e7de      	b.n	4d4a <z_clock_announce+0x16>
					t->dticks -= announce_remaining;
    4d8c:	1ac9      	subs	r1, r1, r3
    4d8e:	60a1      	str	r1, [r4, #8]
    4d90:	2400      	movs	r4, #0
    4d92:	e7f4      	b.n	4d7e <z_clock_announce+0x4a>
		curr_tick += announce_remaining;
    4d94:	4e0c      	ldr	r6, [pc, #48]	; (4dc8 <z_clock_announce+0x94>)
	LOCKED(&timeout_lock) {
    4d96:	f7ff ff39 	bl	4c0c <k_spin_lock.isra.1>
		curr_tick += announce_remaining;
    4d9a:	e9d6 2300 	ldrd	r2, r3, [r6]
    4d9e:	6829      	ldr	r1, [r5, #0]
		announce_remaining = 0;
    4da0:	602c      	str	r4, [r5, #0]
		curr_tick += announce_remaining;
    4da2:	1857      	adds	r7, r2, r1
    4da4:	eb43 78e1 	adc.w	r8, r3, r1, asr #31
    4da8:	e9c6 7800 	strd	r7, r8, [r6]
    4dac:	f380 8811 	msr	BASEPRI, r0
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    4db0:	f7ff ff5a 	bl	4c68 <_get_next_timeout_expiry>
    4db4:	4621      	mov	r1, r4
}
    4db6:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    4dba:	f7fd ba57 	b.w	226c <z_clock_set_timeout>
    4dbe:	bf00      	nop
    4dc0:	2000062c 	.word	0x2000062c
    4dc4:	20001d4c 	.word	0x20001d4c
    4dc8:	20000638 	.word	0x20000638

00004dcc <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    4dcc:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0;

	LOCKED(&timeout_lock) {
    4dd0:	f7ff ff1c 	bl	4c0c <k_spin_lock.isra.1>
    4dd4:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
    4dd6:	f7fd fa4a 	bl	226e <z_clock_elapsed>
    4dda:	4b06      	ldr	r3, [pc, #24]	; (4df4 <z_tick_get+0x28>)
    4ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4de0:	eb12 0b00 	adds.w	fp, r2, r0
    4de4:	f143 0c00 	adc.w	ip, r3, #0
    4de8:	4658      	mov	r0, fp
    4dea:	4661      	mov	r1, ip
    4dec:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
    4df0:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    4df4:	20000638 	.word	0x20000638

00004df8 <z_tick_get_32>:
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
#else
	return (u32_t)curr_tick;
#endif
}
    4df8:	4b01      	ldr	r3, [pc, #4]	; (4e00 <z_tick_get_32+0x8>)
    4dfa:	6818      	ldr	r0, [r3, #0]
    4dfc:	4770      	bx	lr
    4dfe:	bf00      	nop
    4e00:	20000638 	.word	0x20000638

00004e04 <_impl_k_uptime_get_32>:

u32_t _impl_k_uptime_get_32(void)
{
    4e04:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	return (u32_t)curr_tick;
    4e08:	4b08      	ldr	r3, [pc, #32]	; (4e2c <_impl_k_uptime_get_32+0x28>)
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    4e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e0e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    4e12:	fba2 0104 	umull	r0, r1, r2, r4
    4e16:	f04f 0c00 	mov.w	ip, #0
    4e1a:	fb04 110c 	mla	r1, r4, ip, r1
    4e1e:	2264      	movs	r2, #100	; 0x64
    4e20:	2300      	movs	r3, #0
    4e22:	f7fb fa47 	bl	2b4 <__aeabi_uldivmod>
	return __ticks_to_ms(z_tick_get_32());
}
    4e26:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    4e2a:	bf00      	nop
    4e2c:	20000638 	.word	0x20000638

00004e30 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4e30:	7b42      	ldrb	r2, [r0, #13]
    4e32:	06d2      	lsls	r2, r2, #27
    4e34:	d104      	bne.n	4e40 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    4e36:	6a03      	ldr	r3, [r0, #32]
    4e38:	3301      	adds	r3, #1
    4e3a:	d101      	bne.n	4e40 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    4e3c:	f7ff bc20 	b.w	4680 <_add_thread_to_ready_q>
}
    4e40:	4770      	bx	lr
	...

00004e44 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
    4e44:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    4e46:	6a03      	ldr	r3, [r0, #32]
    4e48:	2b00      	cmp	r3, #0
{
    4e4a:	4604      	mov	r4, r0
	if (timer->period > 0) {
    4e4c:	dd0b      	ble.n	4e66 <_timer_expiration_handler+0x22>
	__asm__ volatile(
    4e4e:	f04f 0320 	mov.w	r3, #32
    4e52:	f3ef 8511 	mrs	r5, BASEPRI
    4e56:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(&timer->timeout, _timer_expiration_handler,
    4e5a:	4911      	ldr	r1, [pc, #68]	; (4ea0 <_timer_expiration_handler+0x5c>)
    4e5c:	6a02      	ldr	r2, [r0, #32]
    4e5e:	f7ff ff31 	bl	4cc4 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4e62:	f385 8811 	msr	BASEPRI, r5
			     timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    4e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e68:	3301      	adds	r3, #1
    4e6a:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    4e6c:	69a3      	ldr	r3, [r4, #24]
    4e6e:	b10b      	cbz	r3, 4e74 <_timer_expiration_handler+0x30>
		timer->expiry_fn(timer);
    4e70:	4620      	mov	r0, r4
    4e72:	4798      	blx	r3
	return list->head == list;
    4e74:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e78:	42a5      	cmp	r5, r4
    4e7a:	d010      	beq.n	4e9e <_timer_expiration_handler+0x5a>
	}

	thread = _waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4e7c:	b17d      	cbz	r5, 4e9e <_timer_expiration_handler+0x5a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	_unpend_thread_no_timeout(thread);
    4e7e:	4628      	mov	r0, r5
    4e80:	f7ff fb82 	bl	4588 <_unpend_thread_no_timeout>
	__asm__ volatile(
    4e84:	f04f 0320 	mov.w	r3, #32
    4e88:	f3ef 8411 	mrs	r4, BASEPRI
    4e8c:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    4e90:	4628      	mov	r0, r5
    4e92:	f7ff ffcd 	bl	4e30 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4e96:	f384 8811 	msr	BASEPRI, r4
    4e9a:	2300      	movs	r3, #0
    4e9c:	66ab      	str	r3, [r5, #104]	; 0x68
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
    4e9e:	bd38      	pop	{r3, r4, r5, pc}
    4ea0:	00004e45 	.word	0x00004e45

00004ea4 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    4ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return (s32_t)ceiling_fraction(
    4ea8:	4e18      	ldr	r6, [pc, #96]	; (4f0c <_impl_k_timer_start+0x68>)
    4eaa:	2700      	movs	r7, #0
    4eac:	4688      	mov	r8, r1
    4eae:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    4eb2:	4604      	mov	r4, r0
    4eb4:	4639      	mov	r1, r7
    4eb6:	4630      	mov	r0, r6
    4eb8:	fbc5 0102 	smlal	r0, r1, r5, r2
    4ebc:	2300      	movs	r3, #0
    4ebe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4ec2:	f7fb f9a7 	bl	214 <__aeabi_ldivmod>
    4ec6:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
    4ec8:	9000      	str	r0, [sp, #0]
    4eca:	4630      	mov	r0, r6
    4ecc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4ed0:	2300      	movs	r3, #0
    4ed2:	fbc5 0108 	smlal	r0, r1, r5, r8
    4ed6:	f7fb f99d 	bl	214 <__aeabi_ldivmod>
	duration_in_ticks = _ms_to_ticks(duration);
    4eda:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    4edc:	f04f 0320 	mov.w	r3, #32
    4ee0:	f3ef 8511 	mrs	r5, BASEPRI
    4ee4:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	(void)_abort_timeout(&timer->timeout);
    4ee8:	4620      	mov	r0, r4
    4eea:	f7ff fead 	bl	4c48 <_abort_timeout>
	timer->period = period_in_ticks;
    4eee:	9b00      	ldr	r3, [sp, #0]
    4ef0:	6223      	str	r3, [r4, #32]
	timer->status = 0;
    4ef2:	2300      	movs	r3, #0
    4ef4:	6263      	str	r3, [r4, #36]	; 0x24
	_add_timeout(&timer->timeout, _timer_expiration_handler,
    4ef6:	9a01      	ldr	r2, [sp, #4]
    4ef8:	4905      	ldr	r1, [pc, #20]	; (4f10 <_impl_k_timer_start+0x6c>)
    4efa:	4620      	mov	r0, r4
    4efc:	f7ff fee2 	bl	4cc4 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4f00:	f385 8811 	msr	BASEPRI, r5
		     duration_in_ticks);
	irq_unlock(key);
}
    4f04:	b002      	add	sp, #8
    4f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f0a:	bf00      	nop
    4f0c:	0004ffff 	.word	0x0004ffff
    4f10:	00004e45 	.word	0x00004e45

00004f14 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
    4f14:	b538      	push	{r3, r4, r5, lr}
    4f16:	4604      	mov	r4, r0
	__asm__ volatile(
    4f18:	f04f 0320 	mov.w	r3, #32
    4f1c:	f3ef 8511 	mrs	r5, BASEPRI
    4f20:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
    4f24:	f7ff fe90 	bl	4c48 <_abort_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4f28:	f385 8811 	msr	BASEPRI, r5

	irq_unlock(key);

	if (inactive) {
    4f2c:	3001      	adds	r0, #1
    4f2e:	d025      	beq.n	4f7c <_impl_k_timer_stop+0x68>
		return;
	}

	if (timer->stop_fn) {
    4f30:	69e3      	ldr	r3, [r4, #28]
    4f32:	b10b      	cbz	r3, 4f38 <_impl_k_timer_stop+0x24>
		timer->stop_fn(timer);
    4f34:	4620      	mov	r0, r4
    4f36:	4798      	blx	r3
	__asm__ volatile(
    4f38:	f04f 0320 	mov.w	r3, #32
    4f3c:	f3ef 8511 	mrs	r5, BASEPRI
    4f40:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    4f44:	2100      	movs	r1, #0
    4f46:	f104 0010 	add.w	r0, r4, #16
    4f4a:	f7ff fb11 	bl	4570 <_find_first_thread_to_unpend>
	if (thread != NULL) {
    4f4e:	4604      	mov	r4, r0
    4f50:	b120      	cbz	r0, 4f5c <_impl_k_timer_stop+0x48>
		_unpend_thread_no_timeout(thread);
    4f52:	f7ff fb19 	bl	4588 <_unpend_thread_no_timeout>

	key = irq_lock();
	struct k_thread *pending_thread = _unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		_ready_thread(pending_thread);
    4f56:	4620      	mov	r0, r4
    4f58:	f7ff ff6a 	bl	4e30 <_ready_thread>
    4f5c:	f3ef 8305 	mrs	r3, IPSR
    4f60:	2b0d      	cmp	r3, #13
    4f62:	d809      	bhi.n	4f78 <_impl_k_timer_stop+0x64>
    4f64:	b11b      	cbz	r3, 4f6e <_impl_k_timer_stop+0x5a>
    4f66:	4b06      	ldr	r3, [pc, #24]	; (4f80 <_impl_k_timer_stop+0x6c>)
    4f68:	685b      	ldr	r3, [r3, #4]
    4f6a:	051b      	lsls	r3, r3, #20
    4f6c:	d504      	bpl.n	4f78 <_impl_k_timer_stop+0x64>
	}

	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
    4f6e:	4628      	mov	r0, r5
	}
}
    4f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
    4f74:	f7ff bb32 	b.w	45dc <_reschedule>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4f78:	f385 8811 	msr	BASEPRI, r5
}
    4f7c:	bd38      	pop	{r3, r4, r5, pc}
    4f7e:	bf00      	nop
    4f80:	e000ed00 	.word	0xe000ed00

00004f84 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
    4f84:	6883      	ldr	r3, [r0, #8]
{
    4f86:	b570      	push	{r4, r5, r6, lr}
    4f88:	4605      	mov	r5, r0
    4f8a:	460e      	mov	r6, r1
	if (!event->poller) {
    4f8c:	b1d3      	cbz	r3, 4fc4 <signal_poll_event+0x40>
	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread != NULL,
		 "poller should have a thread\n");

	event->poller->is_polling = 0;
    4f8e:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    4f90:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
    4f92:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
    4f94:	7b63      	ldrb	r3, [r4, #13]
    4f96:	079a      	lsls	r2, r3, #30
    4f98:	d514      	bpl.n	4fc4 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    4f9a:	6a23      	ldr	r3, [r4, #32]
    4f9c:	3302      	adds	r3, #2
    4f9e:	d01b      	beq.n	4fd8 <signal_poll_event+0x54>
		return -EAGAIN;
	}

	_unpend_thread(thread);
    4fa0:	4620      	mov	r0, r4
    4fa2:	f7ff fb10 	bl	45c6 <_unpend_thread>
	_set_thread_return_value(thread,
    4fa6:	2e08      	cmp	r6, #8
    4fa8:	bf0c      	ite	eq
    4faa:	f06f 0303 	mvneq.w	r3, #3
    4fae:	2300      	movne	r3, #0
    4fb0:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4fb2:	7b63      	ldrb	r3, [r4, #13]
    4fb4:	06db      	lsls	r3, r3, #27
    4fb6:	d105      	bne.n	4fc4 <signal_poll_event+0x40>
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
    4fb8:	6a23      	ldr	r3, [r4, #32]
    4fba:	3301      	adds	r3, #1
    4fbc:	d102      	bne.n	4fc4 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
    4fbe:	4620      	mov	r0, r4
    4fc0:	f7ff fb5e 	bl	4680 <_add_thread_to_ready_q>
	event->state |= state;
    4fc4:	68eb      	ldr	r3, [r5, #12]
    4fc6:	f3c3 3204 	ubfx	r2, r3, #12, #5
    4fca:	4316      	orrs	r6, r2
	event->poller = NULL;
    4fcc:	2000      	movs	r0, #0
	event->state |= state;
    4fce:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
    4fd2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    4fd4:	60eb      	str	r3, [r5, #12]
	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
}
    4fd6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    4fd8:	f06f 000a 	mvn.w	r0, #10
    4fdc:	e7fb      	b.n	4fd6 <signal_poll_event+0x52>

00004fde <_handle_obj_poll_events>:
	return list->head == list;
    4fde:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    4fe0:	4298      	cmp	r0, r3
    4fe2:	d007      	beq.n	4ff4 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
    4fe4:	e9d3 0200 	ldrd	r0, r2, [r3]
    4fe8:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    4fea:	6818      	ldr	r0, [r3, #0]
    4fec:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
    4fee:	4618      	mov	r0, r3
    4ff0:	f7ff bfc8 	b.w	4f84 <signal_poll_event>
	}
}
    4ff4:	4770      	bx	lr

00004ff6 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
    4ff6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4ff8:	f04f 0320 	mov.w	r3, #32
    4ffc:	f3ef 8511 	mrs	r5, BASEPRI
    5000:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    5004:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
    5006:	60c1      	str	r1, [r0, #12]
	if (!sys_dlist_is_empty(list)) {
    5008:	4298      	cmp	r0, r3
	signal->signaled = 1;
    500a:	f04f 0101 	mov.w	r1, #1
    500e:	6081      	str	r1, [r0, #8]
    5010:	d104      	bne.n	501c <_impl_k_poll_signal+0x26>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5012:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		irq_unlock(key);
		return 0;
    5016:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	_reschedule(key);
	return rc;
}
    5018:	4620      	mov	r0, r4
    501a:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    501c:	e9d3 0200 	ldrd	r0, r2, [r3]
    5020:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    5022:	6818      	ldr	r0, [r3, #0]
    5024:	6042      	str	r2, [r0, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    5026:	4618      	mov	r0, r3
    5028:	f7ff ffac 	bl	4f84 <signal_poll_event>
    502c:	4604      	mov	r4, r0
	_reschedule(key);
    502e:	4628      	mov	r0, r5
    5030:	f7ff fad4 	bl	45dc <_reschedule>
	return rc;
    5034:	e7f0      	b.n	5018 <_impl_k_poll_signal+0x22>

00005036 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    5036:	4770      	bx	lr
