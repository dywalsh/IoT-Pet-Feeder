
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *_impl_z_errno(void)
{
	return &_current->errno_var;
       0:	20000a10 	.word	0x20000a10
}
       4:	000019b1 	.word	0x000019b1
       8:	00001a05 	.word	0x00001a05
       c:	0000183d 	.word	0x0000183d
      10:	0000183d 	.word	0x0000183d
      14:	0000183d 	.word	0x0000183d
      18:	0000183d 	.word	0x0000183d
      1c:	0000183d 	.word	0x0000183d
      20:	0000183d 	.word	0x0000183d
      24:	0000183d 	.word	0x0000183d
      28:	0000183d 	.word	0x0000183d
      2c:	000014b5 	.word	0x000014b5
      30:	0000183d 	.word	0x0000183d
      34:	0000183d 	.word	0x0000183d
      38:	00001471 	.word	0x00001471
      3c:	0000183d 	.word	0x0000183d

00000040 <_irq_vector_table>:
      40:	00001975 00001975 00001975 00001975     u...u...u...u...
      50:	00001975 00001975 00001975 00001975     u...u...u...u...
      60:	00001975 00001975 00001975 00001975     u...u...u...u...
      70:	00001975 00001975 00001975 00001975     u...u...u...u...
      80:	00001975 00001975 00001975 00001975     u...u...u...u...
      90:	00001975 00001975 00001975 00001975     u...u...u...u...
      a0:	00001975 00001975 00001975 00001975     u...u...u...u...
      b0:	00001975 00001975 00001975 00001975     u...u...u...u...
      c0:	00001975 00001975 00001975 00001975     u...u...u...u...
      d0:	00001975 00001975 00001975              u...u...u...

000000dc <_sw_isr_table>:
      dc:	00000000 000011e5 00000000 000017d1     ................
      ec:	00000000 000017d1 00000000 000017d1     ................
      fc:	00000000 000017d1 00000000 000017d1     ................
     10c:	00000000 00001dbd 00000000 000017d1     ................
     11c:	00000000 000017d1 00000000 000017d1     ................
     12c:	00000000 000017d1 00000000 000017d1     ................
     13c:	00000000 000017d1 00000000 000017d1     ................
     14c:	00000000 000017d1 00000000 000017d1     ................
     15c:	00000000 000017d1 00000000 0000130d     ................
     16c:	00000000 000017d1 00000000 000017d1     ................
     17c:	00000000 000017d1 00000000 000017d1     ................
     18c:	00000000 000017d1 00000000 000017d1     ................
     19c:	00000000 000017d1 00000000 000017d1     ................
     1ac:	00000000 000017d1 00000000 000017d1     ................
     1bc:	00000000 000017d1 00000000 000017d1     ................
     1cc:	00000000 000017d1 00000000 000017d1     ................
     1dc:	00000000 000017d1 00000000 000017d1     ................
     1ec:	00000000 000017d1 00000000 000017d1     ................
     1fc:	00000000 000017d1 00000000 000017d1     ................
     20c:	00000000 000017d1                       ........

00000214 <__aeabi_ldivmod>:
     214:	b97b      	cbnz	r3, 236 <__aeabi_ldivmod+0x22>
     216:	b972      	cbnz	r2, 236 <__aeabi_ldivmod+0x22>
     218:	2900      	cmp	r1, #0
     21a:	bfbe      	ittt	lt
     21c:	2000      	movlt	r0, #0
     21e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     222:	e006      	blt.n	232 <__aeabi_ldivmod+0x1e>
     224:	bf08      	it	eq
     226:	2800      	cmpeq	r0, #0
     228:	bf1c      	itt	ne
     22a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     22e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     232:	f000 b9d1 	b.w	5d8 <__aeabi_idiv0>
     236:	f1ad 0c08 	sub.w	ip, sp, #8
     23a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     23e:	2900      	cmp	r1, #0
     240:	db09      	blt.n	256 <__aeabi_ldivmod+0x42>
     242:	2b00      	cmp	r3, #0
     244:	db1a      	blt.n	27c <__aeabi_ldivmod+0x68>
     246:	f000 f861 	bl	30c <__udivmoddi4>
     24a:	f8dd e004 	ldr.w	lr, [sp, #4]
     24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     252:	b004      	add	sp, #16
     254:	4770      	bx	lr
     256:	4240      	negs	r0, r0
     258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     25c:	2b00      	cmp	r3, #0
     25e:	db1b      	blt.n	298 <__aeabi_ldivmod+0x84>
     260:	f000 f854 	bl	30c <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	4252      	negs	r2, r2
     276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     27a:	4770      	bx	lr
     27c:	4252      	negs	r2, r2
     27e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     282:	f000 f843 	bl	30c <__udivmoddi4>
     286:	f8dd e004 	ldr.w	lr, [sp, #4]
     28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     28e:	b004      	add	sp, #16
     290:	4240      	negs	r0, r0
     292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     296:	4770      	bx	lr
     298:	4252      	negs	r2, r2
     29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29e:	f000 f835 	bl	30c <__udivmoddi4>
     2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2aa:	b004      	add	sp, #16
     2ac:	4252      	negs	r2, r2
     2ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b2:	4770      	bx	lr

000002b4 <__aeabi_uldivmod>:
     2b4:	b953      	cbnz	r3, 2cc <__aeabi_uldivmod+0x18>
     2b6:	b94a      	cbnz	r2, 2cc <__aeabi_uldivmod+0x18>
     2b8:	2900      	cmp	r1, #0
     2ba:	bf08      	it	eq
     2bc:	2800      	cmpeq	r0, #0
     2be:	bf1c      	itt	ne
     2c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2c8:	f000 b986 	b.w	5d8 <__aeabi_idiv0>
     2cc:	f1ad 0c08 	sub.w	ip, sp, #8
     2d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2d4:	f000 f81a 	bl	30c <__udivmoddi4>
     2d8:	f8dd e004 	ldr.w	lr, [sp, #4]
     2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2e0:	b004      	add	sp, #16
     2e2:	4770      	bx	lr

000002e4 <__popcountsi2>:
     2e4:	0843      	lsrs	r3, r0, #1
     2e6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     2ea:	1ac0      	subs	r0, r0, r3
     2ec:	0883      	lsrs	r3, r0, #2
     2ee:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2f2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2f6:	4418      	add	r0, r3
     2f8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2fc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     300:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     304:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     308:	0e00      	lsrs	r0, r0, #24
     30a:	4770      	bx	lr

0000030c <__udivmoddi4>:
     30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     310:	9e08      	ldr	r6, [sp, #32]
     312:	4604      	mov	r4, r0
     314:	4688      	mov	r8, r1
     316:	2b00      	cmp	r3, #0
     318:	d14b      	bne.n	3b2 <__udivmoddi4+0xa6>
     31a:	428a      	cmp	r2, r1
     31c:	4615      	mov	r5, r2
     31e:	d967      	bls.n	3f0 <__udivmoddi4+0xe4>
     320:	fab2 f282 	clz	r2, r2
     324:	b14a      	cbz	r2, 33a <__udivmoddi4+0x2e>
     326:	f1c2 0720 	rsb	r7, r2, #32
     32a:	fa01 f302 	lsl.w	r3, r1, r2
     32e:	fa20 f707 	lsr.w	r7, r0, r7
     332:	4095      	lsls	r5, r2
     334:	ea47 0803 	orr.w	r8, r7, r3
     338:	4094      	lsls	r4, r2
     33a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     33e:	0c23      	lsrs	r3, r4, #16
     340:	fbb8 f7fe 	udiv	r7, r8, lr
     344:	fa1f fc85 	uxth.w	ip, r5
     348:	fb0e 8817 	mls	r8, lr, r7, r8
     34c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     350:	fb07 f10c 	mul.w	r1, r7, ip
     354:	4299      	cmp	r1, r3
     356:	d909      	bls.n	36c <__udivmoddi4+0x60>
     358:	18eb      	adds	r3, r5, r3
     35a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     35e:	f080 811b 	bcs.w	598 <CONFIG_MAIN_STACK_SIZE+0x198>
     362:	4299      	cmp	r1, r3
     364:	f240 8118 	bls.w	598 <CONFIG_MAIN_STACK_SIZE+0x198>
     368:	3f02      	subs	r7, #2
     36a:	442b      	add	r3, r5
     36c:	1a5b      	subs	r3, r3, r1
     36e:	b2a4      	uxth	r4, r4
     370:	fbb3 f0fe 	udiv	r0, r3, lr
     374:	fb0e 3310 	mls	r3, lr, r0, r3
     378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     37c:	fb00 fc0c 	mul.w	ip, r0, ip
     380:	45a4      	cmp	ip, r4
     382:	d909      	bls.n	398 <__udivmoddi4+0x8c>
     384:	192c      	adds	r4, r5, r4
     386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     38a:	f080 8107 	bcs.w	59c <CONFIG_MAIN_STACK_SIZE+0x19c>
     38e:	45a4      	cmp	ip, r4
     390:	f240 8104 	bls.w	59c <CONFIG_MAIN_STACK_SIZE+0x19c>
     394:	3802      	subs	r0, #2
     396:	442c      	add	r4, r5
     398:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     39c:	eba4 040c 	sub.w	r4, r4, ip
     3a0:	2700      	movs	r7, #0
     3a2:	b11e      	cbz	r6, 3ac <__udivmoddi4+0xa0>
     3a4:	40d4      	lsrs	r4, r2
     3a6:	2300      	movs	r3, #0
     3a8:	e9c6 4300 	strd	r4, r3, [r6]
     3ac:	4639      	mov	r1, r7
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	428b      	cmp	r3, r1
     3b4:	d909      	bls.n	3ca <__udivmoddi4+0xbe>
     3b6:	2e00      	cmp	r6, #0
     3b8:	f000 80eb 	beq.w	592 <CONFIG_MAIN_STACK_SIZE+0x192>
     3bc:	2700      	movs	r7, #0
     3be:	e9c6 0100 	strd	r0, r1, [r6]
     3c2:	4638      	mov	r0, r7
     3c4:	4639      	mov	r1, r7
     3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ca:	fab3 f783 	clz	r7, r3
     3ce:	2f00      	cmp	r7, #0
     3d0:	d147      	bne.n	462 <CONFIG_MAIN_STACK_SIZE+0x62>
     3d2:	428b      	cmp	r3, r1
     3d4:	d302      	bcc.n	3dc <__udivmoddi4+0xd0>
     3d6:	4282      	cmp	r2, r0
     3d8:	f200 80fa 	bhi.w	5d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>
     3dc:	1a84      	subs	r4, r0, r2
     3de:	eb61 0303 	sbc.w	r3, r1, r3
     3e2:	2001      	movs	r0, #1
     3e4:	4698      	mov	r8, r3
     3e6:	2e00      	cmp	r6, #0
     3e8:	d0e0      	beq.n	3ac <__udivmoddi4+0xa0>
     3ea:	e9c6 4800 	strd	r4, r8, [r6]
     3ee:	e7dd      	b.n	3ac <__udivmoddi4+0xa0>
     3f0:	b902      	cbnz	r2, 3f4 <__udivmoddi4+0xe8>
     3f2:	deff      	udf	#255	; 0xff
     3f4:	fab2 f282 	clz	r2, r2
     3f8:	2a00      	cmp	r2, #0
     3fa:	f040 808f 	bne.w	51c <CONFIG_MAIN_STACK_SIZE+0x11c>
     3fe:	1b49      	subs	r1, r1, r5
     400:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     404:	fa1f f885 	uxth.w	r8, r5
     408:	2701      	movs	r7, #1
     40a:	fbb1 fcfe 	udiv	ip, r1, lr
     40e:	0c23      	lsrs	r3, r4, #16
     410:	fb0e 111c 	mls	r1, lr, ip, r1
     414:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     418:	fb08 f10c 	mul.w	r1, r8, ip
     41c:	4299      	cmp	r1, r3
     41e:	d907      	bls.n	430 <CONFIG_MAIN_STACK_SIZE+0x30>
     420:	18eb      	adds	r3, r5, r3
     422:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     426:	d202      	bcs.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
     428:	4299      	cmp	r1, r3
     42a:	f200 80cd 	bhi.w	5c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>
     42e:	4684      	mov	ip, r0
     430:	1a59      	subs	r1, r3, r1
     432:	b2a3      	uxth	r3, r4
     434:	fbb1 f0fe 	udiv	r0, r1, lr
     438:	fb0e 1410 	mls	r4, lr, r0, r1
     43c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     440:	fb08 f800 	mul.w	r8, r8, r0
     444:	45a0      	cmp	r8, r4
     446:	d907      	bls.n	458 <CONFIG_MAIN_STACK_SIZE+0x58>
     448:	192c      	adds	r4, r5, r4
     44a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     44e:	d202      	bcs.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     450:	45a0      	cmp	r8, r4
     452:	f200 80b6 	bhi.w	5c2 <CONFIG_MAIN_STACK_SIZE+0x1c2>
     456:	4618      	mov	r0, r3
     458:	eba4 0408 	sub.w	r4, r4, r8
     45c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     460:	e79f      	b.n	3a2 <__udivmoddi4+0x96>
     462:	f1c7 0c20 	rsb	ip, r7, #32
     466:	40bb      	lsls	r3, r7
     468:	fa22 fe0c 	lsr.w	lr, r2, ip
     46c:	ea4e 0e03 	orr.w	lr, lr, r3
     470:	fa01 f407 	lsl.w	r4, r1, r7
     474:	fa20 f50c 	lsr.w	r5, r0, ip
     478:	fa21 f30c 	lsr.w	r3, r1, ip
     47c:	ea4f 481e 	mov.w	r8, lr, lsr #16
     480:	4325      	orrs	r5, r4
     482:	fbb3 f9f8 	udiv	r9, r3, r8
     486:	0c2c      	lsrs	r4, r5, #16
     488:	fb08 3319 	mls	r3, r8, r9, r3
     48c:	fa1f fa8e 	uxth.w	sl, lr
     490:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     494:	fb09 f40a 	mul.w	r4, r9, sl
     498:	429c      	cmp	r4, r3
     49a:	fa02 f207 	lsl.w	r2, r2, r7
     49e:	fa00 f107 	lsl.w	r1, r0, r7
     4a2:	d90b      	bls.n	4bc <CONFIG_MAIN_STACK_SIZE+0xbc>
     4a4:	eb1e 0303 	adds.w	r3, lr, r3
     4a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4ac:	f080 8087 	bcs.w	5be <CONFIG_MAIN_STACK_SIZE+0x1be>
     4b0:	429c      	cmp	r4, r3
     4b2:	f240 8084 	bls.w	5be <CONFIG_MAIN_STACK_SIZE+0x1be>
     4b6:	f1a9 0902 	sub.w	r9, r9, #2
     4ba:	4473      	add	r3, lr
     4bc:	1b1b      	subs	r3, r3, r4
     4be:	b2ad      	uxth	r5, r5
     4c0:	fbb3 f0f8 	udiv	r0, r3, r8
     4c4:	fb08 3310 	mls	r3, r8, r0, r3
     4c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     4cc:	fb00 fa0a 	mul.w	sl, r0, sl
     4d0:	45a2      	cmp	sl, r4
     4d2:	d908      	bls.n	4e6 <CONFIG_MAIN_STACK_SIZE+0xe6>
     4d4:	eb1e 0404 	adds.w	r4, lr, r4
     4d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     4dc:	d26b      	bcs.n	5b6 <CONFIG_MAIN_STACK_SIZE+0x1b6>
     4de:	45a2      	cmp	sl, r4
     4e0:	d969      	bls.n	5b6 <CONFIG_MAIN_STACK_SIZE+0x1b6>
     4e2:	3802      	subs	r0, #2
     4e4:	4474      	add	r4, lr
     4e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4ea:	fba0 8902 	umull	r8, r9, r0, r2
     4ee:	eba4 040a 	sub.w	r4, r4, sl
     4f2:	454c      	cmp	r4, r9
     4f4:	46c2      	mov	sl, r8
     4f6:	464b      	mov	r3, r9
     4f8:	d354      	bcc.n	5a4 <CONFIG_MAIN_STACK_SIZE+0x1a4>
     4fa:	d051      	beq.n	5a0 <CONFIG_MAIN_STACK_SIZE+0x1a0>
     4fc:	2e00      	cmp	r6, #0
     4fe:	d069      	beq.n	5d4 <CONFIG_MAIN_STACK_SIZE+0x1d4>
     500:	ebb1 050a 	subs.w	r5, r1, sl
     504:	eb64 0403 	sbc.w	r4, r4, r3
     508:	fa04 fc0c 	lsl.w	ip, r4, ip
     50c:	40fd      	lsrs	r5, r7
     50e:	40fc      	lsrs	r4, r7
     510:	ea4c 0505 	orr.w	r5, ip, r5
     514:	e9c6 5400 	strd	r5, r4, [r6]
     518:	2700      	movs	r7, #0
     51a:	e747      	b.n	3ac <__udivmoddi4+0xa0>
     51c:	f1c2 0320 	rsb	r3, r2, #32
     520:	fa20 f703 	lsr.w	r7, r0, r3
     524:	4095      	lsls	r5, r2
     526:	fa01 f002 	lsl.w	r0, r1, r2
     52a:	fa21 f303 	lsr.w	r3, r1, r3
     52e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     532:	4338      	orrs	r0, r7
     534:	0c01      	lsrs	r1, r0, #16
     536:	fbb3 f7fe 	udiv	r7, r3, lr
     53a:	fa1f f885 	uxth.w	r8, r5
     53e:	fb0e 3317 	mls	r3, lr, r7, r3
     542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     546:	fb07 f308 	mul.w	r3, r7, r8
     54a:	428b      	cmp	r3, r1
     54c:	fa04 f402 	lsl.w	r4, r4, r2
     550:	d907      	bls.n	562 <CONFIG_MAIN_STACK_SIZE+0x162>
     552:	1869      	adds	r1, r5, r1
     554:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     558:	d22f      	bcs.n	5ba <CONFIG_MAIN_STACK_SIZE+0x1ba>
     55a:	428b      	cmp	r3, r1
     55c:	d92d      	bls.n	5ba <CONFIG_MAIN_STACK_SIZE+0x1ba>
     55e:	3f02      	subs	r7, #2
     560:	4429      	add	r1, r5
     562:	1acb      	subs	r3, r1, r3
     564:	b281      	uxth	r1, r0
     566:	fbb3 f0fe 	udiv	r0, r3, lr
     56a:	fb0e 3310 	mls	r3, lr, r0, r3
     56e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     572:	fb00 f308 	mul.w	r3, r0, r8
     576:	428b      	cmp	r3, r1
     578:	d907      	bls.n	58a <CONFIG_MAIN_STACK_SIZE+0x18a>
     57a:	1869      	adds	r1, r5, r1
     57c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     580:	d217      	bcs.n	5b2 <CONFIG_MAIN_STACK_SIZE+0x1b2>
     582:	428b      	cmp	r3, r1
     584:	d915      	bls.n	5b2 <CONFIG_MAIN_STACK_SIZE+0x1b2>
     586:	3802      	subs	r0, #2
     588:	4429      	add	r1, r5
     58a:	1ac9      	subs	r1, r1, r3
     58c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     590:	e73b      	b.n	40a <CONFIG_MAIN_STACK_SIZE+0xa>
     592:	4637      	mov	r7, r6
     594:	4630      	mov	r0, r6
     596:	e709      	b.n	3ac <__udivmoddi4+0xa0>
     598:	4607      	mov	r7, r0
     59a:	e6e7      	b.n	36c <__udivmoddi4+0x60>
     59c:	4618      	mov	r0, r3
     59e:	e6fb      	b.n	398 <__udivmoddi4+0x8c>
     5a0:	4541      	cmp	r1, r8
     5a2:	d2ab      	bcs.n	4fc <CONFIG_MAIN_STACK_SIZE+0xfc>
     5a4:	ebb8 0a02 	subs.w	sl, r8, r2
     5a8:	eb69 020e 	sbc.w	r2, r9, lr
     5ac:	3801      	subs	r0, #1
     5ae:	4613      	mov	r3, r2
     5b0:	e7a4      	b.n	4fc <CONFIG_MAIN_STACK_SIZE+0xfc>
     5b2:	4660      	mov	r0, ip
     5b4:	e7e9      	b.n	58a <CONFIG_MAIN_STACK_SIZE+0x18a>
     5b6:	4618      	mov	r0, r3
     5b8:	e795      	b.n	4e6 <CONFIG_MAIN_STACK_SIZE+0xe6>
     5ba:	4667      	mov	r7, ip
     5bc:	e7d1      	b.n	562 <CONFIG_MAIN_STACK_SIZE+0x162>
     5be:	4681      	mov	r9, r0
     5c0:	e77c      	b.n	4bc <CONFIG_MAIN_STACK_SIZE+0xbc>
     5c2:	3802      	subs	r0, #2
     5c4:	442c      	add	r4, r5
     5c6:	e747      	b.n	458 <CONFIG_MAIN_STACK_SIZE+0x58>
     5c8:	f1ac 0c02 	sub.w	ip, ip, #2
     5cc:	442b      	add	r3, r5
     5ce:	e72f      	b.n	430 <CONFIG_MAIN_STACK_SIZE+0x30>
     5d0:	4638      	mov	r0, r7
     5d2:	e708      	b.n	3e6 <__udivmoddi4+0xda>
     5d4:	4637      	mov	r7, r6
     5d6:	e6e9      	b.n	3ac <__udivmoddi4+0xa0>

000005d8 <__aeabi_idiv0>:
     5d8:	4770      	bx	lr
     5da:	bf00      	nop

000005dc <pwm_pin_set_usec.constprop.5>:
 * @param pulse Pulse width (in micro second) set to the PWM.
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->get_cycles_per_sec(dev, pwm, cycles);
     5e0:	6843      	ldr	r3, [r0, #4]
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     5e2:	460e      	mov	r6, r1
     5e4:	4692      	mov	sl, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
     5e6:	685b      	ldr	r3, [r3, #4]
     5e8:	466a      	mov	r2, sp
     5ea:	2116      	movs	r1, #22
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     5ec:	4604      	mov	r4, r0
	return api->get_cycles_per_sec(dev, pwm, cycles);
     5ee:	4798      	blx	r3
				   u32_t period, u32_t pulse)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     5f0:	bb40      	cbnz	r0, 644 <pwm_pin_set_usec.constprop.5+0x68>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     5f2:	e9dd b500 	ldrd	fp, r5, [sp]
     5f6:	fba6 010b 	umull	r0, r1, r6, fp
     5fa:	fb06 1105 	mla	r1, r6, r5, r1
     5fe:	4a14      	ldr	r2, [pc, #80]	; (650 <pwm_pin_set_usec.constprop.5+0x74>)
     600:	2300      	movs	r3, #0
     602:	f7ff fe57 	bl	2b4 <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
     606:	f04f 0900 	mov.w	r9, #0
     60a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     60e:	4589      	cmp	r9, r1
     610:	bf08      	it	eq
     612:	4580      	cmpeq	r8, r0
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     614:	4606      	mov	r6, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
     616:	d318      	bcc.n	64a <pwm_pin_set_usec.constprop.5+0x6e>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     618:	fbaa 010b 	umull	r0, r1, sl, fp
     61c:	fb0a 1105 	mla	r1, sl, r5, r1
     620:	4a0b      	ldr	r2, [pc, #44]	; (650 <pwm_pin_set_usec.constprop.5+0x74>)
     622:	2300      	movs	r3, #0
     624:	f7ff fe46 	bl	2b4 <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     628:	4589      	cmp	r9, r1
     62a:	bf08      	it	eq
     62c:	4580      	cmpeq	r8, r0
     62e:	d30c      	bcc.n	64a <pwm_pin_set_usec.constprop.5+0x6e>
	return api->pin_set(dev, pwm, period, pulse);
     630:	6863      	ldr	r3, [r4, #4]
     632:	4632      	mov	r2, r6
     634:	681d      	ldr	r5, [r3, #0]
     636:	2116      	movs	r1, #22
     638:	4603      	mov	r3, r0
     63a:	4620      	mov	r0, r4
     63c:	47a8      	blx	r5
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
     63e:	b003      	add	sp, #12
     640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     644:	f06f 0004 	mvn.w	r0, #4
     648:	e7f9      	b.n	63e <pwm_pin_set_usec.constprop.5+0x62>
		return -ENOTSUP;
     64a:	f06f 0022 	mvn.w	r0, #34	; 0x22
     64e:	e7f6      	b.n	63e <pwm_pin_set_usec.constprop.5+0x62>
     650:	000f4240 	.word	0x000f4240

00000654 <turn_clockwise>:
/* in micro second */
#define FADESTEP	3000

void turn_clockwise (struct device *pwm_dev, u32_t pulse_width){
		pulse_width = PERIOD;
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     654:	f644 6220 	movw	r2, #20000	; 0x4e20
void turn_clockwise (struct device *pwm_dev, u32_t pulse_width){
     658:	b510      	push	{r4, lr}
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     65a:	4611      	mov	r1, r2
void turn_clockwise (struct device *pwm_dev, u32_t pulse_width){
     65c:	4604      	mov	r4, r0
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     65e:	f7ff ffbd 	bl	5dc <pwm_pin_set_usec.constprop.5>
     662:	b120      	cbz	r0, 66e <turn_clockwise+0x1a>
			printk("pwm pin set fails\n");
     664:	480e      	ldr	r0, [pc, #56]	; (6a0 <turn_clockwise+0x4c>)
		k_sleep(90);
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
			printk("pwm pin set fails\n");
			return;
		}
}
     666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printk("pwm pin set fails\n");
     66a:	f000 ba7b 	b.w	b64 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     66e:	205a      	movs	r0, #90	; 0x5a
     670:	f001 ff9e 	bl	25b0 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     674:	f644 5258 	movw	r2, #19800	; 0x4d58
     678:	f644 6120 	movw	r1, #20000	; 0x4e20
     67c:	4620      	mov	r0, r4
     67e:	f7ff ffad 	bl	5dc <pwm_pin_set_usec.constprop.5>
     682:	2800      	cmp	r0, #0
     684:	d1ee      	bne.n	664 <turn_clockwise+0x10>
     686:	205a      	movs	r0, #90	; 0x5a
     688:	f001 ff92 	bl	25b0 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     68c:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
     690:	f644 6120 	movw	r1, #20000	; 0x4e20
     694:	4620      	mov	r0, r4
     696:	f7ff ffa1 	bl	5dc <pwm_pin_set_usec.constprop.5>
     69a:	2800      	cmp	r0, #0
     69c:	d1e2      	bne.n	664 <turn_clockwise+0x10>
}
     69e:	bd10      	pop	{r4, pc}
     6a0:	00002b2c 	.word	0x00002b2c

000006a4 <turn_anticlockwise>:
void turn_anticlockwise (struct device *pwm_dev, u32_t pulse_width){
     6a4:	b510      	push	{r4, lr}
		pulse_width = 0;
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6a6:	2200      	movs	r2, #0
     6a8:	f644 6120 	movw	r1, #20000	; 0x4e20
void turn_anticlockwise (struct device *pwm_dev, u32_t pulse_width){
     6ac:	4604      	mov	r4, r0
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6ae:	f7ff ff95 	bl	5dc <pwm_pin_set_usec.constprop.5>
     6b2:	b120      	cbz	r0, 6be <turn_anticlockwise+0x1a>
			printk("pwm pin set fails\n");
     6b4:	480e      	ldr	r0, [pc, #56]	; (6f0 <turn_anticlockwise+0x4c>)
		k_sleep(90);
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
			printk("pwm pin set fails\n");
			return;
		}
}
     6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printk("pwm pin set fails\n");
     6ba:	f000 ba53 	b.w	b64 <printk>
     6be:	20b4      	movs	r0, #180	; 0xb4
     6c0:	f001 ff76 	bl	25b0 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6c4:	22c8      	movs	r2, #200	; 0xc8
     6c6:	f644 6120 	movw	r1, #20000	; 0x4e20
     6ca:	4620      	mov	r0, r4
     6cc:	f7ff ff86 	bl	5dc <pwm_pin_set_usec.constprop.5>
     6d0:	2800      	cmp	r0, #0
     6d2:	d1ef      	bne.n	6b4 <turn_anticlockwise+0x10>
     6d4:	205a      	movs	r0, #90	; 0x5a
     6d6:	f001 ff6b 	bl	25b0 <_impl_k_sleep>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, PERIOD, pulse_width)) {
     6da:	f44f 72c8 	mov.w	r2, #400	; 0x190
     6de:	f644 6120 	movw	r1, #20000	; 0x4e20
     6e2:	4620      	mov	r0, r4
     6e4:	f7ff ff7a 	bl	5dc <pwm_pin_set_usec.constprop.5>
     6e8:	2800      	cmp	r0, #0
     6ea:	d1e3      	bne.n	6b4 <turn_anticlockwise+0x10>
}
     6ec:	bd10      	pop	{r4, pc}
     6ee:	bf00      	nop
     6f0:	00002b2c 	.word	0x00002b2c

000006f4 <main>:
void main(void)
{
     6f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t last_val = 1;

	u32_t cur_val1;
	u32_t last_val1 = 1;

	btn_dev = device_get_binding(BTN_PORT);
     6f8:	482f      	ldr	r0, [pc, #188]	; (7b8 <main+0xc4>)
     6fa:	f001 fcb7 	bl	206c <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     6fe:	6843      	ldr	r3, [r0, #4]
     700:	220d      	movs	r2, #13
     702:	681c      	ldr	r4, [r3, #0]
     704:	2100      	movs	r1, #0
     706:	f44f 7380 	mov.w	r3, #256	; 0x100
     70a:	4606      	mov	r6, r0
     70c:	47a0      	blx	r4
	gpio_pin_configure(btn_dev, BTN, GPIO_DIR_IN | GPIO_PUD_PULL_UP);

	btn_dev1 = device_get_binding(BTN_PORT1);
     70e:	482a      	ldr	r0, [pc, #168]	; (7b8 <main+0xc4>)
     710:	f001 fcac 	bl	206c <device_get_binding>
     714:	6843      	ldr	r3, [r0, #4]
     716:	220e      	movs	r2, #14
     718:	681c      	ldr	r4, [r3, #0]
     71a:	2100      	movs	r1, #0
     71c:	f44f 7380 	mov.w	r3, #256	; 0x100
     720:	4607      	mov	r7, r0
     722:	47a0      	blx	r4

	//struct device *pwm_dev2;
	u32_t pulse_width = PERIOD;
	u8_t dir = 0;

	printk("PWM demo app-fade LED\n");
     724:	4825      	ldr	r0, [pc, #148]	; (7bc <main+0xc8>)
     726:	f000 fa1d 	bl	b64 <printk>
	//nrf_gpio_cfg_output(YOUR_PIN);

	pwm_dev = device_get_binding(PWM_DRIVER);
     72a:	4825      	ldr	r0, [pc, #148]	; (7c0 <main+0xcc>)
     72c:	f001 fc9e 	bl	206c <device_get_binding>
	
	if (!pwm_dev) {
     730:	4604      	mov	r4, r0
     732:	b930      	cbnz	r0, 742 <main+0x4e>
		printk("Cannot find %s!\n", PWM_DRIVER);
     734:	4922      	ldr	r1, [pc, #136]	; (7c0 <main+0xcc>)
     736:	4823      	ldr	r0, [pc, #140]	; (7c4 <main+0xd0>)
     738:	f000 fa14 	bl	b64 <printk>
		last_val = cur_val;
		last_val1 = cur_val1;
		//k_sleep(MSEC_PER_SEC);
		
	}
}
     73c:	b002      	add	sp, #8
     73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	u32_t last_val1 = 1;
     742:	2501      	movs	r5, #1
			printk("Button press detected ");
     744:	f8df 9084 	ldr.w	r9, [pc, #132]	; 7cc <main+0xd8>
	u32_t last_val = 1;
     748:	46a8      	mov	r8, r5
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
     74a:	6873      	ldr	r3, [r6, #4]
     74c:	220d      	movs	r2, #13
     74e:	f8d3 a008 	ldr.w	sl, [r3, #8]
     752:	2100      	movs	r1, #0
     754:	466b      	mov	r3, sp
     756:	4630      	mov	r0, r6
     758:	47d0      	blx	sl
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	220e      	movs	r2, #14
     75e:	f8d3 a008 	ldr.w	sl, [r3, #8]
     762:	2100      	movs	r1, #0
     764:	ab01      	add	r3, sp, #4
     766:	4638      	mov	r0, r7
     768:	47d0      	blx	sl
		if (cur_val == 0 && last_val == 1) {
     76a:	9b00      	ldr	r3, [sp, #0]
     76c:	b953      	cbnz	r3, 784 <main+0x90>
     76e:	f1b8 0f01 	cmp.w	r8, #1
     772:	d107      	bne.n	784 <main+0x90>
			printk("Button press detected ");
     774:	4648      	mov	r0, r9
     776:	f000 f9f5 	bl	b64 <printk>
			turn_clockwise(pwm_dev, pulse_width);
     77a:	f644 6120 	movw	r1, #20000	; 0x4e20
     77e:	4620      	mov	r0, r4
     780:	f7ff ff68 	bl	654 <turn_clockwise>
		if (cur_val1 == 0 && last_val1 == 1) {
     784:	9b01      	ldr	r3, [sp, #4]
     786:	b94b      	cbnz	r3, 79c <main+0xa8>
     788:	2d01      	cmp	r5, #1
     78a:	d107      	bne.n	79c <main+0xa8>
			printk("Button press detected ");
     78c:	4648      	mov	r0, r9
     78e:	f000 f9e9 	bl	b64 <printk>
			turn_anticlockwise(pwm_dev, pulse_width);
     792:	f644 6120 	movw	r1, #20000	; 0x4e20
     796:	4620      	mov	r0, r4
     798:	f7ff ff84 	bl	6a4 <turn_anticlockwise>
		if (pwm_pin_set_usec(pwm_dev, YOUR_PIN, 0, 0)) {
     79c:	2200      	movs	r2, #0
     79e:	4611      	mov	r1, r2
     7a0:	4620      	mov	r0, r4
     7a2:	f7ff ff1b 	bl	5dc <pwm_pin_set_usec.constprop.5>
     7a6:	b118      	cbz	r0, 7b0 <main+0xbc>
			printk("pwm pin set fails\n");
     7a8:	4807      	ldr	r0, [pc, #28]	; (7c8 <main+0xd4>)
     7aa:	f000 f9db 	bl	b64 <printk>
			return;
     7ae:	e7c5      	b.n	73c <main+0x48>
		last_val1 = cur_val1;
     7b0:	e9dd 8500 	ldrd	r8, r5, [sp]
		gpio_pin_read(btn_dev, BTN, &cur_val);
     7b4:	e7c9      	b.n	74a <main+0x56>
     7b6:	bf00      	nop
     7b8:	00002ae0 	.word	0x00002ae0
     7bc:	00002ae7 	.word	0x00002ae7
     7c0:	00002afe 	.word	0x00002afe
     7c4:	00002b04 	.word	0x00002b04
     7c8:	00002b2c 	.word	0x00002b2c
     7cc:	00002b15 	.word	0x00002b15

000007d0 <nordicsemi_nrf52_init>:

#include <nrf.h>
#include <hal/nrf_power.h>

static int nordicsemi_nrf52_init(struct device *arg)
{
     7d0:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     7d2:	f04f 0320 	mov.w	r3, #32
     7d6:	f3ef 8411 	mrs	r4, BASEPRI
     7da:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     7de:	f000 fa09 	bl	bf4 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     7e2:	4a08      	ldr	r2, [pc, #32]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7e4:	2301      	movs	r3, #1
     7e6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
}
#endif

__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     7ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     7ee:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     7f2:	4b05      	ldr	r3, [pc, #20]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     7f8:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     7fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     7fc:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     800:	2000      	movs	r0, #0
     802:	bd10      	pop	{r4, pc}
     804:	4001e000 	.word	0x4001e000
     808:	e000ed00 	.word	0xe000ed00

0000080c <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     80c:	b508      	push	{r3, lr}
     80e:	4604      	mov	r4, r0
     810:	4608      	mov	r0, r1
     812:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     814:	461a      	mov	r2, r3
     816:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     818:	f001 fefe 	bl	2618 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     81c:	f001 f884 	bl	1928 <_impl_k_thread_abort>

00000820 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     820:	2000      	movs	r0, #0
     822:	4770      	bx	lr

00000824 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     824:	680b      	ldr	r3, [r1, #0]
     826:	3301      	adds	r3, #1
     828:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     82a:	4b01      	ldr	r3, [pc, #4]	; (830 <char_out+0xc>)
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	4718      	bx	r3
     830:	20001370 	.word	0x20001370

00000834 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     838:	b085      	sub	sp, #20
     83a:	469b      	mov	fp, r3
     83c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     83e:	f8df a090 	ldr.w	sl, [pc, #144]	; 8d0 <_printk_dec_ulong+0x9c>
     842:	2c01      	cmp	r4, #1
     844:	bfb8      	it	lt
     846:	2401      	movlt	r4, #1
     848:	2b01      	cmp	r3, #1
     84a:	bf0c      	ite	eq
     84c:	2330      	moveq	r3, #48	; 0x30
     84e:	2320      	movne	r3, #32
     850:	4615      	mov	r5, r2
     852:	4680      	mov	r8, r0
     854:	4689      	mov	r9, r1
     856:	9401      	str	r4, [sp, #4]
     858:	9302      	str	r3, [sp, #8]
     85a:	2601      	movs	r6, #1
     85c:	270a      	movs	r7, #10
     85e:	2200      	movs	r2, #0
     860:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     864:	b90a      	cbnz	r2, 86a <_printk_dec_ulong+0x36>
     866:	45aa      	cmp	sl, r5
     868:	d21f      	bcs.n	8aa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     86a:	fbb5 f0f4 	udiv	r0, r5, r4
     86e:	4649      	mov	r1, r9
     870:	3030      	adds	r0, #48	; 0x30
     872:	47c0      	blx	r8
			digits++;
     874:	3601      	adds	r6, #1
			found_largest_digit = 1;
     876:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     878:	3f01      	subs	r7, #1
	while (pos >= 9) {
     87a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     87c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     880:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     884:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     888:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     88c:	d1e8      	bne.n	860 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     88e:	4649      	mov	r1, r9
     890:	f105 0030 	add.w	r0, r5, #48	; 0x30
     894:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     896:	f1bb 0f03 	cmp.w	fp, #3
     89a:	d103      	bne.n	8a4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     89c:	9b01      	ldr	r3, [sp, #4]
     89e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     8a0:	2c00      	cmp	r4, #0
     8a2:	dc0f      	bgt.n	8c4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     8a4:	b005      	add	sp, #20
     8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     8aa:	9b01      	ldr	r3, [sp, #4]
     8ac:	42bb      	cmp	r3, r7
     8ae:	dbe3      	blt.n	878 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     8b0:	f1bb 0f02 	cmp.w	fp, #2
     8b4:	d8e0      	bhi.n	878 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     8b6:	4649      	mov	r1, r9
     8b8:	9802      	ldr	r0, [sp, #8]
     8ba:	9203      	str	r2, [sp, #12]
			digits++;
     8bc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     8be:	47c0      	blx	r8
			digits++;
     8c0:	9a03      	ldr	r2, [sp, #12]
     8c2:	e7d9      	b.n	878 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     8c4:	4649      	mov	r1, r9
     8c6:	2020      	movs	r0, #32
     8c8:	47c0      	blx	r8
     8ca:	3c01      	subs	r4, #1
     8cc:	e7e8      	b.n	8a0 <_printk_dec_ulong+0x6c>
     8ce:	bf00      	nop
     8d0:	3b9ac9ff 	.word	0x3b9ac9ff

000008d4 <__printk_hook_install>:
	_char_out = fn;
     8d4:	4b01      	ldr	r3, [pc, #4]	; (8dc <__printk_hook_install+0x8>)
     8d6:	6018      	str	r0, [r3, #0]
}
     8d8:	4770      	bx	lr
     8da:	bf00      	nop
     8dc:	20001370 	.word	0x20001370

000008e0 <_vprintk>:
{
     8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8e4:	b089      	sub	sp, #36	; 0x24
     8e6:	461c      	mov	r4, r3
	int long_ctr = 0;
     8e8:	f04f 0a00 	mov.w	sl, #0
     8ec:	1e53      	subs	r3, r2, #1
{
     8ee:	4606      	mov	r6, r0
     8f0:	460f      	mov	r7, r1
     8f2:	9304      	str	r3, [sp, #16]
	int min_width = -1;
     8f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     8f8:	46d0      	mov	r8, sl
			might_format = 0;
     8fa:	2500      	movs	r5, #0
				break;
     8fc:	e005      	b.n	90a <_vprintk+0x2a>
		if (!might_format) {
     8fe:	b96d      	cbnz	r5, 91c <_vprintk+0x3c>
			if (*fmt != '%') {
     900:	2825      	cmp	r0, #37	; 0x25
     902:	f000 8112 	beq.w	b2a <_vprintk+0x24a>
				out((int)*fmt, ctx);
     906:	4639      	mov	r1, r7
     908:	47b0      	blx	r6
	while (*fmt) {
     90a:	9b04      	ldr	r3, [sp, #16]
     90c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     910:	9304      	str	r3, [sp, #16]
     912:	2800      	cmp	r0, #0
     914:	d1f3      	bne.n	8fe <_vprintk+0x1e>
}
     916:	b009      	add	sp, #36	; 0x24
     918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     91c:	2864      	cmp	r0, #100	; 0x64
     91e:	d061      	beq.n	9e4 <_vprintk+0x104>
     920:	d819      	bhi.n	956 <_vprintk+0x76>
     922:	2839      	cmp	r0, #57	; 0x39
     924:	d80a      	bhi.n	93c <_vprintk+0x5c>
     926:	2831      	cmp	r0, #49	; 0x31
     928:	d250      	bcs.n	9cc <_vprintk+0xec>
     92a:	282d      	cmp	r0, #45	; 0x2d
     92c:	d03c      	beq.n	9a8 <_vprintk+0xc8>
     92e:	2830      	cmp	r0, #48	; 0x30
     930:	d03d      	beq.n	9ae <_vprintk+0xce>
     932:	2825      	cmp	r0, #37	; 0x25
     934:	d108      	bne.n	948 <_vprintk+0x68>
				out((int)'%', ctx);
     936:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     938:	47b0      	blx	r6
     93a:	e7de      	b.n	8fa <_vprintk+0x1a>
			switch (*fmt) {
     93c:	2858      	cmp	r0, #88	; 0x58
     93e:	f000 8088 	beq.w	a52 <_vprintk+0x172>
     942:	2863      	cmp	r0, #99	; 0x63
     944:	f000 80eb 	beq.w	b1e <_vprintk+0x23e>
				out((int)'%', ctx);
     948:	4639      	mov	r1, r7
     94a:	2025      	movs	r0, #37	; 0x25
     94c:	47b0      	blx	r6
				out((int)*fmt, ctx);
     94e:	9b04      	ldr	r3, [sp, #16]
     950:	4639      	mov	r1, r7
     952:	7818      	ldrb	r0, [r3, #0]
     954:	e7f0      	b.n	938 <_vprintk+0x58>
			switch (*fmt) {
     956:	2870      	cmp	r0, #112	; 0x70
     958:	d071      	beq.n	a3e <_vprintk+0x15e>
     95a:	d806      	bhi.n	96a <_vprintk+0x8a>
     95c:	2869      	cmp	r0, #105	; 0x69
     95e:	d041      	beq.n	9e4 <_vprintk+0x104>
     960:	286c      	cmp	r0, #108	; 0x6c
     962:	d03c      	beq.n	9de <_vprintk+0xfe>
     964:	2868      	cmp	r0, #104	; 0x68
     966:	d0d0      	beq.n	90a <_vprintk+0x2a>
     968:	e7ee      	b.n	948 <_vprintk+0x68>
     96a:	2875      	cmp	r0, #117	; 0x75
     96c:	d057      	beq.n	a1e <_vprintk+0x13e>
     96e:	d817      	bhi.n	9a0 <_vprintk+0xc0>
     970:	2873      	cmp	r0, #115	; 0x73
     972:	d1e9      	bne.n	948 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
     974:	6823      	ldr	r3, [r4, #0]
     976:	f104 0b04 	add.w	fp, r4, #4
     97a:	461c      	mov	r4, r3
				while (*s)
     97c:	4625      	mov	r5, r4
     97e:	f815 0b01 	ldrb.w	r0, [r5], #1
     982:	2800      	cmp	r0, #0
     984:	f040 80c0 	bne.w	b08 <_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
     988:	f1b8 0f03 	cmp.w	r8, #3
     98c:	f040 80d6 	bne.w	b3c <_vprintk+0x25c>
					int remaining = min_width - (s - start);
     990:	1ae4      	subs	r4, r4, r3
     992:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     996:	2c00      	cmp	r4, #0
     998:	f300 80bc 	bgt.w	b14 <_vprintk+0x234>
				char *s = va_arg(ap, char *);
     99c:	465c      	mov	r4, fp
     99e:	e7ac      	b.n	8fa <_vprintk+0x1a>
			switch (*fmt) {
     9a0:	2878      	cmp	r0, #120	; 0x78
     9a2:	d056      	beq.n	a52 <_vprintk+0x172>
     9a4:	287a      	cmp	r0, #122	; 0x7a
     9a6:	e7de      	b.n	966 <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
     9a8:	f04f 0803 	mov.w	r8, #3
     9ac:	e7ad      	b.n	90a <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
     9ae:	f1b9 0f00 	cmp.w	r9, #0
     9b2:	da0e      	bge.n	9d2 <_vprintk+0xf2>
     9b4:	f1b8 0f00 	cmp.w	r8, #0
     9b8:	f000 80bd 	beq.w	b36 <_vprintk+0x256>
					min_width = *fmt - '0';
     9bc:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     9c0:	f1b8 0f00 	cmp.w	r8, #0
     9c4:	bf08      	it	eq
     9c6:	f04f 0802 	moveq.w	r8, #2
     9ca:	e79e      	b.n	90a <_vprintk+0x2a>
				if (min_width < 0) {
     9cc:	f1b9 0f00 	cmp.w	r9, #0
     9d0:	dbf4      	blt.n	9bc <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
     9d2:	230a      	movs	r3, #10
     9d4:	fb03 0909 	mla	r9, r3, r9, r0
     9d8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     9dc:	e7f0      	b.n	9c0 <_vprintk+0xe0>
				long_ctr++;
     9de:	f10a 0a01 	add.w	sl, sl, #1
     9e2:	e792      	b.n	90a <_vprintk+0x2a>
				if (long_ctr < 2) {
     9e4:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     9e8:	bfc5      	ittet	gt
     9ea:	3407      	addgt	r4, #7
     9ec:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     9f0:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     9f2:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     9f4:	bfd4      	ite	le
     9f6:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     9f8:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     9fc:	2d00      	cmp	r5, #0
     9fe:	da05      	bge.n	a0c <_vprintk+0x12c>
					out((int)'-', ctx);
     a00:	4639      	mov	r1, r7
     a02:	202d      	movs	r0, #45	; 0x2d
     a04:	47b0      	blx	r6
					d = -d;
     a06:	426d      	negs	r5, r5
					min_width--;
     a08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     a0c:	f8cd 9000 	str.w	r9, [sp]
     a10:	4643      	mov	r3, r8
     a12:	462a      	mov	r2, r5
     a14:	4639      	mov	r1, r7
     a16:	4630      	mov	r0, r6
     a18:	f7ff ff0c 	bl	834 <_printk_dec_ulong>
     a1c:	e76d      	b.n	8fa <_vprintk+0x1a>
				if (long_ctr < 2) {
     a1e:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     a22:	bfc5      	ittet	gt
     a24:	3407      	addgt	r4, #7
     a26:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     a2a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     a2c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     a2e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     a32:	bfcc      	ite	gt
     a34:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     a38:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     a3a:	4643      	mov	r3, r8
     a3c:	e7ea      	b.n	a14 <_vprintk+0x134>
				  out('0', ctx);
     a3e:	4639      	mov	r1, r7
     a40:	2030      	movs	r0, #48	; 0x30
     a42:	47b0      	blx	r6
				  out('x', ctx);
     a44:	4639      	mov	r1, r7
     a46:	2078      	movs	r0, #120	; 0x78
     a48:	47b0      	blx	r6
				  min_width = 8;
     a4a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     a4e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     a52:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     a56:	bfc7      	ittee	gt
     a58:	3407      	addgt	r4, #7
     a5a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     a5e:	6823      	ldrle	r3, [r4, #0]
     a60:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     a62:	bfc2      	ittt	gt
     a64:	f103 0408 	addgt.w	r4, r3, #8
     a68:	681b      	ldrgt	r3, [r3, #0]
     a6a:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     a6c:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     a70:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     a74:	bfd8      	it	le
     a76:	3404      	addle	r4, #4
	int digits = 0;
     a78:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     a7a:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     a7c:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     a7e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     a82:	9b05      	ldr	r3, [sp, #20]
     a84:	ea4f 008b 	mov.w	r0, fp, lsl #2
     a88:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     a8c:	f010 000f 	ands.w	r0, r0, #15
     a90:	d109      	bne.n	aa6 <_vprintk+0x1c6>
     a92:	9b07      	ldr	r3, [sp, #28]
     a94:	b913      	cbnz	r3, a9c <_vprintk+0x1bc>
     a96:	f1bb 0f00 	cmp.w	fp, #0
     a9a:	d124      	bne.n	ae6 <_vprintk+0x206>
			nibble += nibble > 9 ? 87 : 48;
     a9c:	f04f 0c30 	mov.w	ip, #48	; 0x30
     aa0:	e007      	b.n	ab2 <_vprintk+0x1d2>
	for (; size; size--) {
     aa2:	9a06      	ldr	r2, [sp, #24]
     aa4:	e7eb      	b.n	a7e <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     aa6:	2809      	cmp	r0, #9
     aa8:	bf8c      	ite	hi
     aaa:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     aae:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
     ab2:	4639      	mov	r1, r7
     ab4:	4460      	add	r0, ip
     ab6:	9206      	str	r2, [sp, #24]
     ab8:	47b0      	blx	r6
			digits++;
     aba:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     abc:	9507      	str	r5, [sp, #28]
			digits++;
     abe:	3301      	adds	r3, #1
     ac0:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     ac2:	f1bb 0f00 	cmp.w	fp, #0
     ac6:	d1ec      	bne.n	aa2 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ac8:	f1b8 0f03 	cmp.w	r8, #3
     acc:	f47f af15 	bne.w	8fa <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
     ad0:	9b03      	ldr	r3, [sp, #12]
     ad2:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     ad6:	2d00      	cmp	r5, #0
     ad8:	f77f af0f 	ble.w	8fa <_vprintk+0x1a>
			out(' ', ctx);
     adc:	4639      	mov	r1, r7
     ade:	2020      	movs	r0, #32
     ae0:	47b0      	blx	r6
     ae2:	3d01      	subs	r5, #1
     ae4:	e7f7      	b.n	ad6 <_vprintk+0x1f6>
		if (remaining-- <= min_width) {
     ae6:	1e53      	subs	r3, r2, #1
     ae8:	4591      	cmp	r9, r2
     aea:	9306      	str	r3, [sp, #24]
     aec:	dbe9      	blt.n	ac2 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     aee:	f1b8 0f01 	cmp.w	r8, #1
     af2:	d103      	bne.n	afc <_vprintk+0x21c>
				out('0', ctx);
     af4:	4639      	mov	r1, r7
     af6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     af8:	47b0      	blx	r6
     afa:	e7e2      	b.n	ac2 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     afc:	f1b8 0f02 	cmp.w	r8, #2
     b00:	d1df      	bne.n	ac2 <_vprintk+0x1e2>
				out(' ', ctx);
     b02:	4639      	mov	r1, r7
     b04:	2020      	movs	r0, #32
     b06:	e7f7      	b.n	af8 <_vprintk+0x218>
					out((int)(*s++), ctx);
     b08:	4639      	mov	r1, r7
     b0a:	9303      	str	r3, [sp, #12]
     b0c:	462c      	mov	r4, r5
     b0e:	47b0      	blx	r6
     b10:	9b03      	ldr	r3, [sp, #12]
     b12:	e733      	b.n	97c <_vprintk+0x9c>
						out(' ', ctx);
     b14:	4639      	mov	r1, r7
     b16:	2020      	movs	r0, #32
     b18:	47b0      	blx	r6
     b1a:	3c01      	subs	r4, #1
     b1c:	e73b      	b.n	996 <_vprintk+0xb6>
				out(c, ctx);
     b1e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     b20:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     b22:	4639      	mov	r1, r7
     b24:	47b0      	blx	r6
				int c = va_arg(ap, int);
     b26:	462c      	mov	r4, r5
     b28:	e6e7      	b.n	8fa <_vprintk+0x1a>
				long_ctr = 0;
     b2a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     b2c:	46a8      	mov	r8, r5
				min_width = -1;
     b2e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     b32:	2501      	movs	r5, #1
     b34:	e6e9      	b.n	90a <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
     b36:	f04f 0801 	mov.w	r8, #1
     b3a:	e6e6      	b.n	90a <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
     b3c:	465c      	mov	r4, fp
			might_format = 0;
     b3e:	4605      	mov	r5, r0
     b40:	e6e3      	b.n	90a <_vprintk+0x2a>
	...

00000b44 <vprintk>:
{
     b44:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     b46:	ac02      	add	r4, sp, #8
     b48:	2300      	movs	r3, #0
     b4a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     b4e:	4602      	mov	r2, r0
     b50:	460b      	mov	r3, r1
     b52:	4803      	ldr	r0, [pc, #12]	; (b60 <vprintk+0x1c>)
     b54:	4621      	mov	r1, r4
     b56:	f7ff fec3 	bl	8e0 <_vprintk>
}
     b5a:	9801      	ldr	r0, [sp, #4]
     b5c:	b002      	add	sp, #8
     b5e:	bd10      	pop	{r4, pc}
     b60:	00000825 	.word	0x00000825

00000b64 <printk>:
{
     b64:	b40f      	push	{r0, r1, r2, r3}
     b66:	b507      	push	{r0, r1, r2, lr}
     b68:	a904      	add	r1, sp, #16
     b6a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     b6e:	9101      	str	r1, [sp, #4]
		ret = vprintk(fmt, ap);
     b70:	f7ff ffe8 	bl	b44 <vprintk>
}
     b74:	b003      	add	sp, #12
     b76:	f85d eb04 	ldr.w	lr, [sp], #4
     b7a:	b004      	add	sp, #16
     b7c:	4770      	bx	lr

00000b7e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_PPI, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_PWM0, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_HW_NRF_PWM1, 1);
GEN_ABSOLUTE_SYM(CONFIG_DISK_ACCESS_MAX_VOLUMES, 8);

GEN_ABS_SYM_END
     b7e:	4770      	bx	lr

00000b80 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     b80:	4b0c      	ldr	r3, [pc, #48]	; (bb4 <errata_108+0x34>)
     b82:	781b      	ldrb	r3, [r3, #0]
     b84:	2b06      	cmp	r3, #6
     b86:	d110      	bne.n	baa <errata_108+0x2a>
     b88:	4b0b      	ldr	r3, [pc, #44]	; (bb8 <errata_108+0x38>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	071a      	lsls	r2, r3, #28
     b8e:	d10c      	bne.n	baa <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     b90:	4b0a      	ldr	r3, [pc, #40]	; (bbc <errata_108+0x3c>)
     b92:	6818      	ldr	r0, [r3, #0]
     b94:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     b98:	2b30      	cmp	r3, #48	; 0x30
     b9a:	d008      	beq.n	bae <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     b9c:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     ba0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     ba4:	4258      	negs	r0, r3
     ba6:	4158      	adcs	r0, r3
     ba8:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     baa:	2000      	movs	r0, #0
     bac:	4770      	bx	lr
            return true;
     bae:	2001      	movs	r0, #1
}
     bb0:	4770      	bx	lr
     bb2:	bf00      	nop
     bb4:	f0000fe0 	.word	0xf0000fe0
     bb8:	f0000fe4 	.word	0xf0000fe4
     bbc:	f0000fe8 	.word	0xf0000fe8

00000bc0 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     bc0:	4b09      	ldr	r3, [pc, #36]	; (be8 <errata_16+0x28>)
     bc2:	781b      	ldrb	r3, [r3, #0]
     bc4:	2b06      	cmp	r3, #6
     bc6:	d10c      	bne.n	be2 <errata_16+0x22>
     bc8:	4b08      	ldr	r3, [pc, #32]	; (bec <errata_16+0x2c>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	071a      	lsls	r2, r3, #28
     bce:	d108      	bne.n	be2 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     bd0:	4b07      	ldr	r3, [pc, #28]	; (bf0 <errata_16+0x30>)
     bd2:	6818      	ldr	r0, [r3, #0]
     bd4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     bd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     bdc:	4258      	negs	r0, r3
     bde:	4158      	adcs	r0, r3
     be0:	4770      	bx	lr
            return true;
        }
    }

    return false;
     be2:	2000      	movs	r0, #0
}
     be4:	4770      	bx	lr
     be6:	bf00      	nop
     be8:	f0000fe0 	.word	0xf0000fe0
     bec:	f0000fe4 	.word	0xf0000fe4
     bf0:	f0000fe8 	.word	0xf0000fe8

00000bf4 <SystemInit>:
{
     bf4:	b508      	push	{r3, lr}
    if (errata_12()){
     bf6:	f7ff ffc3 	bl	b80 <errata_108>
     bfa:	b128      	cbz	r0, c08 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     bfc:	4b78      	ldr	r3, [pc, #480]	; (de0 <SystemInit+0x1ec>)
     bfe:	4a79      	ldr	r2, [pc, #484]	; (de4 <SystemInit+0x1f0>)
     c00:	681b      	ldr	r3, [r3, #0]
     c02:	f3c3 2304 	ubfx	r3, r3, #8, #5
     c06:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     c08:	f7ff ffda 	bl	bc0 <errata_16>
     c0c:	b110      	cbz	r0, c14 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     c0e:	4b76      	ldr	r3, [pc, #472]	; (de8 <SystemInit+0x1f4>)
     c10:	4a76      	ldr	r2, [pc, #472]	; (dec <SystemInit+0x1f8>)
     c12:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     c14:	f7ff ffb4 	bl	b80 <errata_108>
     c18:	b128      	cbz	r0, c26 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     c1a:	4b75      	ldr	r3, [pc, #468]	; (df0 <SystemInit+0x1fc>)
     c1c:	4a75      	ldr	r2, [pc, #468]	; (df4 <SystemInit+0x200>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	f3c3 3342 	ubfx	r3, r3, #13, #3
     c24:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     c26:	f7ff ffcb 	bl	bc0 <errata_16>
     c2a:	b120      	cbz	r0, c36 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     c2c:	4a72      	ldr	r2, [pc, #456]	; (df8 <SystemInit+0x204>)
     c2e:	68d3      	ldr	r3, [r2, #12]
     c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     c34:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     c36:	f7ff ffa3 	bl	b80 <errata_108>
     c3a:	b140      	cbz	r0, c4e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c40:	2200      	movs	r2, #0
     c42:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     c46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     c4a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     c4e:	f7ff ffb7 	bl	bc0 <errata_16>
     c52:	b110      	cbz	r0, c5a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     c54:	4b69      	ldr	r3, [pc, #420]	; (dfc <SystemInit+0x208>)
     c56:	2203      	movs	r2, #3
     c58:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     c5a:	f7ff ffb1 	bl	bc0 <errata_16>
     c5e:	b140      	cbz	r0, c72 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     c60:	4b67      	ldr	r3, [pc, #412]	; (e00 <SystemInit+0x20c>)
     c62:	2205      	movs	r2, #5
     c64:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     c66:	2201      	movs	r2, #1
     c68:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     c6a:	2200      	movs	r2, #0
     c6c:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     c6e:	223f      	movs	r2, #63	; 0x3f
     c70:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     c72:	4b64      	ldr	r3, [pc, #400]	; (e04 <SystemInit+0x210>)
     c74:	781b      	ldrb	r3, [r3, #0]
     c76:	2b06      	cmp	r3, #6
     c78:	d150      	bne.n	d1c <SystemInit+0x128>
     c7a:	4b63      	ldr	r3, [pc, #396]	; (e08 <SystemInit+0x214>)
     c7c:	681b      	ldr	r3, [r3, #0]
     c7e:	0719      	lsls	r1, r3, #28
     c80:	d14c      	bne.n	d1c <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     c82:	4b62      	ldr	r3, [pc, #392]	; (e0c <SystemInit+0x218>)
     c84:	681b      	ldr	r3, [r3, #0]
     c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     c8a:	2b50      	cmp	r3, #80	; 0x50
     c8c:	d146      	bne.n	d1c <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     c92:	4b5f      	ldr	r3, [pc, #380]	; (e10 <SystemInit+0x21c>)
     c94:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     c98:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     c9c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     ca0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     ca4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     ca8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     cac:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     cb0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     cb4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     cb8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     cbc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     cc0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     cc4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     cc8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     ccc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     cd0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     cd4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     cd8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     cdc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     ce0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     ce4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     ce8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     cec:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     cf0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     cf4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     cf8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     cfc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     d00:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     d04:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     d08:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     d0c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     d10:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     d14:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     d18:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     d1c:	f7ff ff30 	bl	b80 <errata_108>
     d20:	b128      	cbz	r0, d2e <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     d22:	4b3c      	ldr	r3, [pc, #240]	; (e14 <SystemInit+0x220>)
     d24:	4a3c      	ldr	r2, [pc, #240]	; (e18 <SystemInit+0x224>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     d2c:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     d2e:	f7ff ff27 	bl	b80 <errata_108>
     d32:	b148      	cbz	r0, d48 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     d38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     d3c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     d3e:	bf44      	itt	mi
     d40:	f06f 0201 	mvnmi.w	r2, #1
     d44:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     d48:	4b34      	ldr	r3, [pc, #208]	; (e1c <SystemInit+0x228>)
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	2b06      	cmp	r3, #6
     d4e:	d108      	bne.n	d62 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     d50:	4b33      	ldr	r3, [pc, #204]	; (e20 <SystemInit+0x22c>)
     d52:	681b      	ldr	r3, [r3, #0]
     d54:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     d56:	bf01      	itttt	eq
     d58:	4a32      	ldreq	r2, [pc, #200]	; (e24 <SystemInit+0x230>)
     d5a:	6813      	ldreq	r3, [r2, #0]
     d5c:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     d60:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     d62:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     d66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     d6a:	2a00      	cmp	r2, #0
     d6c:	db03      	blt.n	d76 <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     d6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     d72:	2b00      	cmp	r3, #0
     d74:	da2f      	bge.n	dd6 <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     d76:	4b2c      	ldr	r3, [pc, #176]	; (e28 <SystemInit+0x234>)
     d78:	2201      	movs	r2, #1
     d7a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     d7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     d82:	2a00      	cmp	r2, #0
     d84:	d0fb      	beq.n	d7e <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
     d86:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     d8a:	2115      	movs	r1, #21
     d8c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     d90:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     d94:	2a00      	cmp	r2, #0
     d96:	d0fb      	beq.n	d90 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
     d98:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     d9c:	2215      	movs	r2, #21
     d9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     da2:	4b21      	ldr	r3, [pc, #132]	; (e28 <SystemInit+0x234>)
     da4:	461a      	mov	r2, r3
     da6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     daa:	2900      	cmp	r1, #0
     dac:	d0fb      	beq.n	da6 <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     dae:	2100      	movs	r1, #0
     db0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     db4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     db8:	2b00      	cmp	r3, #0
     dba:	d0fb      	beq.n	db4 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     dbc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     dc0:	491a      	ldr	r1, [pc, #104]	; (e2c <SystemInit+0x238>)
     dc2:	4b1b      	ldr	r3, [pc, #108]	; (e30 <SystemInit+0x23c>)
     dc4:	68ca      	ldr	r2, [r1, #12]
     dc6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     dca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     dcc:	60cb      	str	r3, [r1, #12]
     dce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     dd2:	bf00      	nop
     dd4:	e7fd      	b.n	dd2 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     dd6:	4b17      	ldr	r3, [pc, #92]	; (e34 <SystemInit+0x240>)
     dd8:	4a17      	ldr	r2, [pc, #92]	; (e38 <SystemInit+0x244>)
     dda:	601a      	str	r2, [r3, #0]
}
     ddc:	bd08      	pop	{r3, pc}
     dde:	bf00      	nop
     de0:	10000324 	.word	0x10000324
     de4:	40013540 	.word	0x40013540
     de8:	4007c074 	.word	0x4007c074
     dec:	baadf00d 	.word	0xbaadf00d
     df0:	10000244 	.word	0x10000244
     df4:	4000053c 	.word	0x4000053c
     df8:	e000edf0 	.word	0xe000edf0
     dfc:	400005a0 	.word	0x400005a0
     e00:	40005610 	.word	0x40005610
     e04:	f0000fe0 	.word	0xf0000fe0
     e08:	f0000fe4 	.word	0xf0000fe4
     e0c:	f0000fe8 	.word	0xf0000fe8
     e10:	4000c000 	.word	0x4000c000
     e14:	10000258 	.word	0x10000258
     e18:	40000ee4 	.word	0x40000ee4
     e1c:	10000130 	.word	0x10000130
     e20:	10000134 	.word	0x10000134
     e24:	4000173c 	.word	0x4000173c
     e28:	4001e000 	.word	0x4001e000
     e2c:	e000ed00 	.word	0xe000ed00
     e30:	05fa0004 	.word	0x05fa0004
     e34:	20001374 	.word	0x20001374
     e38:	03d09000 	.word	0x03d09000

00000e3c <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e3c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
     e3e:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
     e40:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e42:	bf9d      	ittte	ls
     e44:	6882      	ldrls	r2, [r0, #8]
     e46:	18d2      	addls	r2, r2, r3
     e48:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
     e4c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e50:	bf94      	ite	ls
     e52:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
     e54:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
     e56:	4770      	bx	lr

00000e58 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
     e5c:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     e60:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
     e62:	1bf6      	subs	r6, r6, r7
     e64:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
     e66:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     e68:	4688      	mov	r8, r1
     e6a:	4615      	mov	r5, r2
     e6c:	4438      	add	r0, r7
  if (Rem > NumBytes) {
     e6e:	d905      	bls.n	e7c <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     e70:	f000 fe19 	bl	1aa6 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
     e74:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
     e76:	60e5      	str	r5, [r4, #12]
}
     e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     e7c:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
     e7e:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     e80:	f000 fe11 	bl	1aa6 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
     e84:	462a      	mov	r2, r5
     e86:	eb08 0106 	add.w	r1, r8, r6
     e8a:	6860      	ldr	r0, [r4, #4]
     e8c:	f000 fe0b 	bl	1aa6 <memcpy>
     e90:	e7f1      	b.n	e76 <_WriteNoCheck+0x1e>

00000e92 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     e92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
     e96:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     e98:	4606      	mov	r6, r0
     e9a:	4689      	mov	r9, r1
     e9c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
     e9e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     ea2:	6934      	ldr	r4, [r6, #16]
     ea4:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     ea6:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
     ea8:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     eaa:	bf28      	it	cs
     eac:	18e4      	addcs	r4, r4, r3
     eae:	3c01      	subs	r4, #1
     eb0:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     eb2:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     eb4:	42bc      	cmp	r4, r7
     eb6:	bf28      	it	cs
     eb8:	463c      	movcs	r4, r7
     eba:	4294      	cmp	r4, r2
     ebc:	bf28      	it	cs
     ebe:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     ec0:	4649      	mov	r1, r9
     ec2:	4428      	add	r0, r5
     ec4:	4622      	mov	r2, r4
     ec6:	f000 fdee 	bl	1aa6 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
     eca:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
     ecc:	4425      	add	r5, r4
      WrOff = 0u;
     ece:	42ab      	cmp	r3, r5
     ed0:	bf08      	it	eq
     ed2:	2500      	moveq	r5, #0
  } while (NumBytes);
     ed4:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
     ed6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
     ed8:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
     eda:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
     edc:	d1e1      	bne.n	ea2 <_WriteBlocking+0x10>
}
     ede:	4640      	mov	r0, r8
     ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000ee4 <_DoInit>:
static void _DoInit(void) {
     ee4:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     ee6:	4c11      	ldr	r4, [pc, #68]	; (f2c <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
     ee8:	4a11      	ldr	r2, [pc, #68]	; (f30 <_DoInit+0x4c>)
     eea:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     eec:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     eee:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
     ef2:	4b10      	ldr	r3, [pc, #64]	; (f34 <_DoInit+0x50>)
     ef4:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
     ef6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
     efc:	4a0e      	ldr	r2, [pc, #56]	; (f38 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     efe:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
     f00:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
     f02:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     f04:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
     f06:	490d      	ldr	r1, [pc, #52]	; (f3c <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
     f08:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
     f0a:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
     f0c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
     f10:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     f12:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     f14:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     f16:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
     f18:	f000 fdae 	bl	1a78 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
     f1c:	4908      	ldr	r1, [pc, #32]	; (f40 <_DoInit+0x5c>)
     f1e:	4620      	mov	r0, r4
     f20:	f000 fdaa 	bl	1a78 <strcpy>
  p->acID[6] = ' ';
     f24:	2320      	movs	r3, #32
     f26:	71a3      	strb	r3, [r4, #6]
}
     f28:	bd10      	pop	{r4, pc}
     f2a:	bf00      	nop
     f2c:	2000052c 	.word	0x2000052c
     f30:	00002b4e 	.word	0x00002b4e
     f34:	20000010 	.word	0x20000010
     f38:	20000000 	.word	0x20000000
     f3c:	00002b57 	.word	0x00002b57
     f40:	00002b5b 	.word	0x00002b5b

00000f44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     f46:	4c18      	ldr	r4, [pc, #96]	; (fa8 <SEGGER_RTT_WriteNoLock+0x64>)
     f48:	2318      	movs	r3, #24
     f4a:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     f4e:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     f52:	4425      	add	r5, r4
  switch (pRing->Flags) {
     f54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     f56:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f58:	460f      	mov	r7, r1
     f5a:	4616      	mov	r6, r2
  switch (pRing->Flags) {
     f5c:	d011      	beq.n	f82 <SEGGER_RTT_WriteNoLock+0x3e>
     f5e:	d303      	bcc.n	f68 <SEGGER_RTT_WriteNoLock+0x24>
     f60:	2c02      	cmp	r4, #2
     f62:	d01b      	beq.n	f9c <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
     f64:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
     f66:	e00a      	b.n	f7e <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
     f68:	4628      	mov	r0, r5
     f6a:	f7ff ff67 	bl	e3c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
     f6e:	4286      	cmp	r6, r0
     f70:	d805      	bhi.n	f7e <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
     f72:	4632      	mov	r2, r6
     f74:	4639      	mov	r1, r7
     f76:	4628      	mov	r0, r5
     f78:	f7ff ff6e 	bl	e58 <_WriteNoCheck>
     f7c:	4634      	mov	r4, r6
}
     f7e:	4620      	mov	r0, r4
     f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
     f82:	4628      	mov	r0, r5
     f84:	f7ff ff5a 	bl	e3c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
     f88:	4286      	cmp	r6, r0
     f8a:	4634      	mov	r4, r6
     f8c:	bf28      	it	cs
     f8e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
     f90:	4622      	mov	r2, r4
     f92:	4639      	mov	r1, r7
     f94:	4628      	mov	r0, r5
     f96:	f7ff ff5f 	bl	e58 <_WriteNoCheck>
    break;
     f9a:	e7f0      	b.n	f7e <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
     f9c:	4628      	mov	r0, r5
}
     f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
     fa2:	f7ff bf76 	b.w	e92 <_WriteBlocking>
     fa6:	bf00      	nop
     fa8:	2000052c 	.word	0x2000052c

00000fac <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
     fac:	f7ff bf9a 	b.w	ee4 <_DoInit>

00000fb0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
     fb0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	SEGGER_RTT_Init();

	__printk_hook_install(rtt_console_out);
     fb2:	4c05      	ldr	r4, [pc, #20]	; (fc8 <rtt_console_init+0x18>)
	SEGGER_RTT_Init();
     fb4:	f7ff fffa 	bl	fac <SEGGER_RTT_Init>
	__printk_hook_install(rtt_console_out);
     fb8:	4620      	mov	r0, r4
     fba:	f7ff fc8b 	bl	8d4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
     fbe:	4620      	mov	r0, r4
     fc0:	f000 fdc2 	bl	1b48 <__stdout_hook_install>

	return 0;
}
     fc4:	2000      	movs	r0, #0
     fc6:	bd10      	pop	{r4, pc}
     fc8:	00000fcd 	.word	0x00000fcd

00000fcc <rtt_console_out>:
{
     fcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	char c = (char)character;
     fd0:	ae02      	add	r6, sp, #8
     fd2:	4d14      	ldr	r5, [pc, #80]	; (1024 <rtt_console_out+0x58>)
     fd4:	f806 0d01 	strb.w	r0, [r6, #-1]!
{
     fd8:	4607      	mov	r7, r0
	char c = (char)character;
     fda:	2403      	movs	r4, #3
	__asm__ volatile(
     fdc:	f04f 0320 	mov.w	r3, #32
     fe0:	f3ef 8811 	mrs	r8, BASEPRI
     fe4:	f383 8811 	msr	BASEPRI, r3
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
     fe8:	2201      	movs	r2, #1
     fea:	4631      	mov	r1, r6
     fec:	2000      	movs	r0, #0
     fee:	f7ff ffa9 	bl	f44 <SEGGER_RTT_WriteNoLock>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     ff2:	f388 8811 	msr	BASEPRI, r8
		if (cnt) {
     ff6:	b128      	cbz	r0, 1004 <rtt_console_out+0x38>
			host_present = true;
     ff8:	2301      	movs	r3, #1
     ffa:	702b      	strb	r3, [r5, #0]
}
     ffc:	4638      	mov	r0, r7
     ffe:	b002      	add	sp, #8
    1000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    1004:	782b      	ldrb	r3, [r5, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d0f8      	beq.n	ffc <rtt_console_out+0x30>
			if (max_cnt) {
    100a:	3c01      	subs	r4, #1
    100c:	d007      	beq.n	101e <rtt_console_out+0x52>
	if (k_is_in_isr()) {
    100e:	f001 fc71 	bl	28f4 <k_is_in_isr>
    1012:	2800      	cmp	r0, #0
    1014:	d1e2      	bne.n	fdc <rtt_console_out+0x10>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1016:	2002      	movs	r0, #2
    1018:	f001 faca 	bl	25b0 <_impl_k_sleep>
		key = irq_lock();
    101c:	e7de      	b.n	fdc <rtt_console_out+0x10>
				host_present = false;
    101e:	702c      	strb	r4, [r5, #0]
    1020:	e7ec      	b.n	ffc <rtt_console_out+0x30>
    1022:	bf00      	nop
    1024:	20000410 	.word	0x20000410

00001028 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1028:	b510      	push	{r4, lr}
	__asm__ volatile(
    102a:	f04f 0320 	mov.w	r3, #32
    102e:	f3ef 8211 	mrs	r2, BASEPRI
    1032:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1036:	4c11      	ldr	r4, [pc, #68]	; (107c <_m16src_stop+0x54>)
    1038:	7823      	ldrb	r3, [r4, #0]
    103a:	b923      	cbnz	r3, 1046 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    103c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1040:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    1044:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    1046:	3b01      	subs	r3, #1
    1048:	b2db      	uxtb	r3, r3
    104a:	7023      	strb	r3, [r4, #0]
    104c:	b123      	cbz	r3, 1058 <_m16src_stop+0x30>
    104e:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    1052:	f06f 000f 	mvn.w	r0, #15
    1056:	e7f5      	b.n	1044 <_m16src_stop+0x1c>
	if (m16src_grd) {
    1058:	4b09      	ldr	r3, [pc, #36]	; (1080 <_m16src_stop+0x58>)
    105a:	7818      	ldrb	r0, [r3, #0]
    105c:	2101      	movs	r1, #1
    105e:	b128      	cbz	r0, 106c <_m16src_stop+0x44>
		m16src_ref++;
    1060:	7021      	strb	r1, [r4, #0]
    1062:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    1066:	f06f 000a 	mvn.w	r0, #10
    106a:	e7eb      	b.n	1044 <_m16src_stop+0x1c>
	m16src_grd = 1;
    106c:	7019      	strb	r1, [r3, #0]
    106e:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1072:	4a04      	ldr	r2, [pc, #16]	; (1084 <_m16src_stop+0x5c>)
    1074:	6011      	str	r1, [r2, #0]
	m16src_grd = 0;
    1076:	7018      	strb	r0, [r3, #0]
	return 0;
    1078:	e7e4      	b.n	1044 <_m16src_stop+0x1c>
    107a:	bf00      	nop
    107c:	20000413 	.word	0x20000413
    1080:	20000412 	.word	0x20000412
    1084:	40000004 	.word	0x40000004

00001088 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    1088:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    108a:	2200      	movs	r2, #0
    108c:	4610      	mov	r0, r2
    108e:	2101      	movs	r1, #1
    1090:	f000 fb86 	bl	17a0 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1094:	2000      	movs	r0, #0
    1096:	f000 fb5f 	bl	1758 <_arch_irq_enable>

	return 0;
}
    109a:	2000      	movs	r0, #0
    109c:	bd08      	pop	{r3, pc}
	...

000010a0 <_m16src_start>:
{
    10a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10a2:	f04f 0220 	mov.w	r2, #32
    10a6:	f3ef 8311 	mrs	r3, BASEPRI
    10aa:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    10ae:	4a26      	ldr	r2, [pc, #152]	; (1148 <_m16src_start+0xa8>)
    10b0:	7810      	ldrb	r0, [r2, #0]
    10b2:	1c44      	adds	r4, r0, #1
    10b4:	7014      	strb	r4, [r2, #0]
    10b6:	b170      	cbz	r0, 10d6 <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10b8:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    10bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    10c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    10c4:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    10c8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    10cc:	bf0c      	ite	eq
    10ce:	2000      	moveq	r0, #0
    10d0:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    10d4:	e007      	b.n	10e6 <_m16src_start+0x46>
	if (m16src_grd) {
    10d6:	4d1d      	ldr	r5, [pc, #116]	; (114c <_m16src_start+0xac>)
    10d8:	782f      	ldrb	r7, [r5, #0]
    10da:	b12f      	cbz	r7, 10e8 <_m16src_start+0x48>
		m16src_ref--;
    10dc:	7010      	strb	r0, [r2, #0]
    10de:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    10e2:	f06f 000a 	mvn.w	r0, #10
}
    10e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    10e8:	2601      	movs	r6, #1
    10ea:	702e      	strb	r6, [r5, #0]
    10ec:	f383 8811 	msr	BASEPRI, r3
    10f0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    10f4:	b319      	cbz	r1, 113e <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    10f6:	4638      	mov	r0, r7
    10f8:	f000 fb3e 	bl	1778 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    10fc:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1100:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    1104:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1108:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    110a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    110e:	b192      	cbz	r2, 1136 <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1110:	2200      	movs	r2, #0
    1112:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1116:	4a0e      	ldr	r2, [pc, #56]	; (1150 <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1118:	f013 0f01 	tst.w	r3, #1
    111c:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    1120:	bf08      	it	eq
    1122:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1126:	2000      	movs	r0, #0
    1128:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    112c:	f000 fb14 	bl	1758 <_arch_irq_enable>
	m16src_grd = 0;
    1130:	2300      	movs	r3, #0
    1132:	702b      	strb	r3, [r5, #0]
    1134:	e7c2      	b.n	10bc <_m16src_start+0x1c>
			__WFE();
    1136:	bf20      	wfe
			__SEV();
    1138:	bf40      	sev
			__WFE();
    113a:	bf20      	wfe
    113c:	e7e5      	b.n	110a <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    113e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1142:	6026      	str	r6, [r4, #0]
    1144:	e7f4      	b.n	1130 <_m16src_start+0x90>
    1146:	bf00      	nop
    1148:	20000413 	.word	0x20000413
    114c:	20000412 	.word	0x20000412
    1150:	e000e100 	.word	0xe000e100

00001154 <_k32src_start>:
{
    1154:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1156:	f04f 0220 	mov.w	r2, #32
    115a:	f3ef 8311 	mrs	r3, BASEPRI
    115e:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1162:	4d1d      	ldr	r5, [pc, #116]	; (11d8 <_k32src_start+0x84>)
    1164:	782a      	ldrb	r2, [r5, #0]
    1166:	b18a      	cbz	r2, 118c <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1168:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    116c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1170:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    1174:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1178:	f003 0303 	and.w	r3, r3, #3
    117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    1180:	4393      	bics	r3, r2
}
    1182:	bf14      	ite	ne
    1184:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    1188:	2000      	moveq	r0, #0
    118a:	bd38      	pop	{r3, r4, r5, pc}
	k32src_initialized = 1;
    118c:	2401      	movs	r4, #1
    118e:	702c      	strb	r4, [r5, #0]
    1190:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1198:	4d10      	ldr	r5, [pc, #64]	; (11dc <_k32src_start+0x88>)
    119a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    119e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    11a2:	602c      	str	r4, [r5, #0]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    11a4:	f011 0103 	ands.w	r1, r1, #3
    NRF_CLOCK->INTENCLR = int_mask;
    11a8:	f04f 0518 	mov.w	r5, #24
    11ac:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    11b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    11b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    11b8:	d1d8      	bne.n	116c <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    11ba:	2210      	movs	r2, #16
    11bc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    11c0:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    11c4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    11c8:	f7ff ff6a 	bl	10a0 <_m16src_start>
		if (!err) {
    11cc:	2800      	cmp	r0, #0
    11ce:	d1cd      	bne.n	116c <_k32src_start+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11d0:	4b03      	ldr	r3, [pc, #12]	; (11e0 <_k32src_start+0x8c>)
    11d2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    11d6:	e7c9      	b.n	116c <_k32src_start+0x18>
    11d8:	20000411 	.word	0x20000411
    11dc:	40000008 	.word	0x40000008
    11e0:	e000e100 	.word	0xe000e100

000011e4 <_power_clock_isr>:
{
    11e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    11e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    11ea:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    11ec:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    11f0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    11f4:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    11f8:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    11fc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1200:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1204:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1208:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    120c:	f1bc 0f00 	cmp.w	ip, #0
    1210:	d003      	beq.n	121a <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    1212:	f04f 0c00 	mov.w	ip, #0
    1216:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    121a:	b127      	cbz	r7, 1226 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1220:	2700      	movs	r7, #0
    1222:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    1226:	b13a      	cbz	r2, 1238 <_power_clock_isr+0x54>
    1228:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    122a:	bf41      	itttt	mi
    122c:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    1230:	2201      	movmi	r2, #1
    1232:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    1236:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    1238:	b120      	cbz	r0, 1244 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    123a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    123e:	2200      	movs	r2, #0
    1240:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    1244:	b149      	cbz	r1, 125a <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    1246:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    124a:	2100      	movs	r1, #0
    124c:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1250:	4628      	mov	r0, r5
    1252:	f7ff fee9 	bl	1028 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    1256:	2301      	movs	r3, #1
    1258:	6163      	str	r3, [r4, #20]
	if (ctto) {
    125a:	b176      	cbz	r6, 127a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    125c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1260:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1262:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    1264:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1268:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    126a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    126e:	f7ff ff17 	bl	10a0 <_m16src_start>
		if (!err) {
    1272:	b910      	cbnz	r0, 127a <_power_clock_isr+0x96>
    1274:	4b01      	ldr	r3, [pc, #4]	; (127c <_power_clock_isr+0x98>)
    1276:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    127c:	e000e100 	.word	0xe000e100

00001280 <rtc_compare_set>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)
{
    p_rtc->CC[ch] = cc_val;
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <rtc_compare_set+0x24>)
    1282:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)
{
     return p_rtc->COUNTER;
    1286:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    128a:	1ac0      	subs	r0, r0, r3
    128c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1290:	4b05      	ldr	r3, [pc, #20]	; (12a8 <rtc_compare_set+0x28>)
    1292:	3802      	subs	r0, #2
    1294:	4298      	cmp	r0, r3
    1296:	bf82      	ittt	hi
    1298:	4b04      	ldrhi	r3, [pc, #16]	; (12ac <rtc_compare_set+0x2c>)
    129a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    129e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    12a2:	4770      	bx	lr
    12a4:	40011000 	.word	0x40011000
    12a8:	007ffffd 	.word	0x007ffffd
    12ac:	e000e100 	.word	0xe000e100

000012b0 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    12b0:	b538      	push	{r3, r4, r5, lr}
    12b2:	4b11      	ldr	r3, [pc, #68]	; (12f8 <rtc_announce_set_next+0x48>)
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    12b4:	4c11      	ldr	r4, [pc, #68]	; (12fc <rtc_announce_set_next+0x4c>)
    12b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    12ba:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    12bc:	4d10      	ldr	r5, [pc, #64]	; (1300 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    12be:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    12c0:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    12c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    12c6:	4283      	cmp	r3, r0
    12c8:	d80f      	bhi.n	12ea <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    12ca:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    12ce:	490d      	ldr	r1, [pc, #52]	; (1304 <rtc_announce_set_next+0x54>)
    12d0:	6809      	ldr	r1, [r1, #0]
    12d2:	4288      	cmp	r0, r1
    12d4:	bf28      	it	cs
    12d6:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    12d8:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    12dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    12e0:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    12e2:	4b09      	ldr	r3, [pc, #36]	; (1308 <rtc_announce_set_next+0x58>)
    12e4:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    12e6:	f001 f99d 	bl	2624 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    12ea:	6820      	ldr	r0, [r4, #0]
    12ec:	682b      	ldr	r3, [r5, #0]
    12ee:	4418      	add	r0, r3
}
    12f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    12f4:	f7ff bfc4 	b.w	1280 <rtc_compare_set>
    12f8:	40011000 	.word	0x40011000
    12fc:	20000418 	.word	0x20000418
    1300:	20001388 	.word	0x20001388
    1304:	20000414 	.word	0x20000414
    1308:	20001384 	.word	0x20001384

0000130c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    130c:	4b02      	ldr	r3, [pc, #8]	; (1318 <rtc1_nrf5_isr+0xc>)
    130e:	2200      	movs	r2, #0
    1310:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	/* _sys_clock_tick_announce() could cause new programming */
	if (!expected_sys_ticks && _sys_clock_always_on) {
		program_max_cycles();
	}
#else
	rtc_announce_set_next();
    1314:	f7ff bfcc 	b.w	12b0 <rtc_announce_set_next>
    1318:	40011000 	.word	0x40011000

0000131c <_timer_idle_enter>:
{
    131c:	4b08      	ldr	r3, [pc, #32]	; (1340 <_timer_idle_enter+0x24>)
	if ((sys_ticks < 0) ||
    131e:	2800      	cmp	r0, #0
    1320:	681a      	ldr	r2, [r3, #0]
    1322:	4b08      	ldr	r3, [pc, #32]	; (1344 <_timer_idle_enter+0x28>)
    1324:	fb93 f3f2 	sdiv	r3, r3, r2
    1328:	db02      	blt.n	1330 <_timer_idle_enter+0x14>
    132a:	4283      	cmp	r3, r0
    132c:	bfa8      	it	ge
    132e:	4603      	movge	r3, r0
	expected_sys_ticks = sys_ticks;
    1330:	4905      	ldr	r1, [pc, #20]	; (1348 <_timer_idle_enter+0x2c>)
    1332:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    1334:	4905      	ldr	r1, [pc, #20]	; (134c <_timer_idle_enter+0x30>)
    1336:	6808      	ldr	r0, [r1, #0]
    1338:	fb02 0003 	mla	r0, r2, r3, r0
    133c:	f7ff bfa0 	b.w	1280 <rtc_compare_set>
    1340:	20001388 	.word	0x20001388
    1344:	007fffff 	.word	0x007fffff
    1348:	20000414 	.word	0x20000414
    134c:	20000418 	.word	0x20000418

00001350 <_timer_idle_exit>:
{
    1350:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1352:	4b07      	ldr	r3, [pc, #28]	; (1370 <_timer_idle_exit+0x20>)
    1354:	2200      	movs	r2, #0
    1356:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    135a:	4b06      	ldr	r3, [pc, #24]	; (1374 <_timer_idle_exit+0x24>)
    135c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1360:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1364:	f7ff ffa4 	bl	12b0 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1368:	4b03      	ldr	r3, [pc, #12]	; (1378 <_timer_idle_exit+0x28>)
    136a:	2201      	movs	r2, #1
    136c:	601a      	str	r2, [r3, #0]
}
    136e:	bd08      	pop	{r3, pc}
    1370:	40011000 	.word	0x40011000
    1374:	e000e100 	.word	0xe000e100
    1378:	20000414 	.word	0x20000414

0000137c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    137c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    137e:	4819      	ldr	r0, [pc, #100]	; (13e4 <_sys_clock_driver_init+0x68>)
    1380:	f000 fe74 	bl	206c <device_get_binding>
	if (!clock) {
    1384:	b350      	cbz	r0, 13dc <_sys_clock_driver_init+0x60>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1386:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1388:	4d17      	ldr	r5, [pc, #92]	; (13e8 <_sys_clock_driver_init+0x6c>)
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	2101      	movs	r1, #1
    138e:	4798      	blx	r3
	rtc_past = 0;
    1390:	4b16      	ldr	r3, [pc, #88]	; (13ec <_sys_clock_driver_init+0x70>)
    1392:	2400      	movs	r4, #0
    1394:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1396:	4b16      	ldr	r3, [pc, #88]	; (13f0 <_sys_clock_driver_init+0x74>)
    1398:	2601      	movs	r6, #1
    139a:	601e      	str	r6, [r3, #0]
	nrf_rtc_cc_set(SYS_CLOCK_RTC, RTC_CC_IDX, sys_clock_hw_cycles_per_tick);
    139c:	4b15      	ldr	r3, [pc, #84]	; (13f4 <_sys_clock_driver_init+0x78>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    139e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	nrf_rtc_cc_set(SYS_CLOCK_RTC, RTC_CC_IDX, sys_clock_hw_cycles_per_tick);
    13a2:	681b      	ldr	r3, [r3, #0]
    p_rtc->CC[ch] = cc_val;
    13a4:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENSET = mask;
    13a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    13ac:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_rtc->INTENSET = mask;
    13b0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    13b4:	4b10      	ldr	r3, [pc, #64]	; (13f8 <_sys_clock_driver_init+0x7c>)
	nrf_rtc_event_enable(SYS_CLOCK_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(SYS_CLOCK_RTC, RTC_INTENSET_COMPARE0_Msk);

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    13b6:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    13ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    13c2:	4631      	mov	r1, r6
    13c4:	4622      	mov	r2, r4
    13c6:	2011      	movs	r0, #17
    13c8:	f000 f9ea 	bl	17a0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    13cc:	2011      	movs	r0, #17
    13ce:	f000 f9c3 	bl	1758 <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    13d2:	4b0a      	ldr	r3, [pc, #40]	; (13fc <_sys_clock_driver_init+0x80>)

	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_START);

	return 0;
    13d4:	4620      	mov	r0, r4
    13d6:	601e      	str	r6, [r3, #0]
    13d8:	602e      	str	r6, [r5, #0]
}
    13da:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    13dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13e0:	e7fb      	b.n	13da <_sys_clock_driver_init+0x5e>
    13e2:	bf00      	nop
    13e4:	00002b7c 	.word	0x00002b7c
    13e8:	40011000 	.word	0x40011000
    13ec:	20000418 	.word	0x20000418
    13f0:	20000414 	.word	0x20000414
    13f4:	20001388 	.word	0x20001388
    13f8:	e000e100 	.word	0xe000e100
    13fc:	40011008 	.word	0x40011008

00001400 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1400:	4807      	ldr	r0, [pc, #28]	; (1420 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1402:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    1404:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    1406:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1408:	d008      	beq.n	141c <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    140a:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    140c:	f001 f892 	bl	2534 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    1410:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1414:	4903      	ldr	r1, [pc, #12]	; (1424 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    1416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    141a:	600a      	str	r2, [r1, #0]

0000141c <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    141c:	4770      	bx	lr
    141e:	0000      	.short	0x0000
    ldr r0, =_kernel
    1420:	200005d4 	.word	0x200005d4
    ldr r1, =_SCS_ICSR
    1424:	e000ed04 	.word	0xe000ed04

00001428 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1428:	4804      	ldr	r0, [pc, #16]	; (143c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    142a:	2300      	movs	r3, #0
    142c:	2120      	movs	r1, #32
    142e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1430:	3301      	adds	r3, #1
    1432:	2b27      	cmp	r3, #39	; 0x27
    1434:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1438:	d1f9      	bne.n	142e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    143a:	4770      	bx	lr
    143c:	e000e100 	.word	0xe000e100

00001440 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1440:	4a08      	ldr	r2, [pc, #32]	; (1464 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1442:	4909      	ldr	r1, [pc, #36]	; (1468 <__swap+0x28>)
	_current->arch.basepri = key;
    1444:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1446:	6809      	ldr	r1, [r1, #0]
    1448:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    144a:	4908      	ldr	r1, [pc, #32]	; (146c <__swap+0x2c>)
	_current->arch.basepri = key;
    144c:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    144e:	684b      	ldr	r3, [r1, #4]
    1450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1454:	604b      	str	r3, [r1, #4]
    1456:	2300      	movs	r3, #0
    1458:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    145c:	6893      	ldr	r3, [r2, #8]
}
    145e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1460:	4770      	bx	lr
    1462:	bf00      	nop
    1464:	200005d4 	.word	0x200005d4
    1468:	000030e4 	.word	0x000030e4
    146c:	e000ed00 	.word	0xe000ed00

00001470 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1470:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1472:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1476:	490d      	ldr	r1, [pc, #52]	; (14ac <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1478:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    147a:	f04f 002c 	mov.w	r0, #44	; 0x2c
    add r0, r2
    147e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1480:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1484:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1488:	4f09      	ldr	r7, [pc, #36]	; (14b0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    148a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    148e:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1490:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1492:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1494:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1496:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1498:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    149a:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    149e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    14a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    14a6:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    14aa:	4770      	bx	lr
    ldr r1, =_kernel
    14ac:	200005d4 	.word	0x200005d4
    ldr v4, =_SCS_ICSR
    14b0:	e000ed04 	.word	0xe000ed04

000014b4 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    14b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    14b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    14ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    14be:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    14c2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    14c4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    14c8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    14cc:	2902      	cmp	r1, #2
    beq _oops
    14ce:	d0ff      	beq.n	14d0 <_oops>

000014d0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    14d0:	b500      	push	{lr}
    blx _do_kernel_oops
    14d2:	f000 f9f9 	bl	18c8 <_do_kernel_oops>
    pop {pc}
    14d6:	bd00      	pop	{pc}

000014d8 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    14d8:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    14da:	4c19      	ldr	r4, [pc, #100]	; (1540 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    14dc:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    14de:	4819      	ldr	r0, [pc, #100]	; (1544 <_MpuFault.isra.2+0x6c>)
    14e0:	f7ff fb40 	bl	b64 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    14e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14e6:	06d9      	lsls	r1, r3, #27
    14e8:	d502      	bpl.n	14f0 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    14ea:	4817      	ldr	r0, [pc, #92]	; (1548 <_MpuFault.isra.2+0x70>)
    14ec:	f7ff fb3a 	bl	b64 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    14f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14f2:	071a      	lsls	r2, r3, #28
    14f4:	d502      	bpl.n	14fc <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    14f6:	4815      	ldr	r0, [pc, #84]	; (154c <_MpuFault.isra.2+0x74>)
    14f8:	f7ff fb34 	bl	b64 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    14fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14fe:	079b      	lsls	r3, r3, #30
    1500:	d50e      	bpl.n	1520 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    1502:	4813      	ldr	r0, [pc, #76]	; (1550 <_MpuFault.isra.2+0x78>)
    1504:	f7ff fb2e 	bl	b64 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    1508:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    150a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    150c:	0618      	lsls	r0, r3, #24
    150e:	d507      	bpl.n	1520 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    1510:	4810      	ldr	r0, [pc, #64]	; (1554 <_MpuFault.isra.2+0x7c>)
    1512:	f7ff fb27 	bl	b64 <printk>
			if (fromHardFault) {
    1516:	b11d      	cbz	r5, 1520 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    151a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    151e:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1520:	4c07      	ldr	r4, [pc, #28]	; (1540 <_MpuFault.isra.2+0x68>)
    1522:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1524:	07d2      	lsls	r2, r2, #31
    1526:	d502      	bpl.n	152e <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    1528:	480b      	ldr	r0, [pc, #44]	; (1558 <_MpuFault.isra.2+0x80>)
    152a:	f7ff fb1b 	bl	b64 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    152e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1530:	069b      	lsls	r3, r3, #26
    1532:	d502      	bpl.n	153a <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    1534:	4809      	ldr	r0, [pc, #36]	; (155c <_MpuFault.isra.2+0x84>)
    1536:	f7ff fb15 	bl	b64 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    153a:	2000      	movs	r0, #0
    153c:	bd38      	pop	{r3, r4, r5, pc}
    153e:	bf00      	nop
    1540:	e000ed00 	.word	0xe000ed00
    1544:	00002ceb 	.word	0x00002ceb
    1548:	00002d02 	.word	0x00002d02
    154c:	00002d14 	.word	0x00002d14
    1550:	00002d28 	.word	0x00002d28
    1554:	00002d41 	.word	0x00002d41
    1558:	00002d58 	.word	0x00002d58
    155c:	00002d78 	.word	0x00002d78

00001560 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1560:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1562:	4c1b      	ldr	r4, [pc, #108]	; (15d0 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1564:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    1566:	481b      	ldr	r0, [pc, #108]	; (15d4 <_BusFault.isra.3+0x74>)
    1568:	f7ff fafc 	bl	b64 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    156c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    156e:	04d8      	lsls	r0, r3, #19
    1570:	d504      	bpl.n	157c <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    1572:	4819      	ldr	r0, [pc, #100]	; (15d8 <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1574:	f7ff faf6 	bl	b64 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    1578:	2000      	movs	r0, #0
    157a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    157c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    157e:	0519      	lsls	r1, r3, #20
    1580:	d501      	bpl.n	1586 <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    1582:	4816      	ldr	r0, [pc, #88]	; (15dc <_BusFault.isra.3+0x7c>)
    1584:	e7f6      	b.n	1574 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1586:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1588:	059a      	lsls	r2, r3, #22
    158a:	d514      	bpl.n	15b6 <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    158c:	4814      	ldr	r0, [pc, #80]	; (15e0 <_BusFault.isra.3+0x80>)
    158e:	f7ff fae9 	bl	b64 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1592:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1596:	041b      	lsls	r3, r3, #16
    1598:	d507      	bpl.n	15aa <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    159a:	4812      	ldr	r0, [pc, #72]	; (15e4 <_BusFault.isra.3+0x84>)
    159c:	f7ff fae2 	bl	b64 <printk>
			if (fromHardFault) {
    15a0:	b11d      	cbz	r5, 15aa <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    15a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    15a8:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    15aa:	4b09      	ldr	r3, [pc, #36]	; (15d0 <_BusFault.isra.3+0x70>)
    15ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15ae:	0558      	lsls	r0, r3, #21
    15b0:	d5e2      	bpl.n	1578 <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    15b2:	480d      	ldr	r0, [pc, #52]	; (15e8 <_BusFault.isra.3+0x88>)
    15b4:	e7de      	b.n	1574 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    15b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15b8:	0559      	lsls	r1, r3, #21
    15ba:	d4fa      	bmi.n	15b2 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    15bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15be:	05da      	lsls	r2, r3, #23
    15c0:	d501      	bpl.n	15c6 <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    15c2:	480a      	ldr	r0, [pc, #40]	; (15ec <_BusFault.isra.3+0x8c>)
    15c4:	e7d6      	b.n	1574 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    15c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15c8:	049b      	lsls	r3, r3, #18
    15ca:	d5d5      	bpl.n	1578 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    15cc:	4808      	ldr	r0, [pc, #32]	; (15f0 <_BusFault.isra.3+0x90>)
    15ce:	e7d1      	b.n	1574 <_BusFault.isra.3+0x14>
    15d0:	e000ed00 	.word	0xe000ed00
    15d4:	00002b9c 	.word	0x00002b9c
    15d8:	00002d02 	.word	0x00002d02
    15dc:	00002d14 	.word	0x00002d14
    15e0:	00002bb3 	.word	0x00002bb3
    15e4:	00002bcd 	.word	0x00002bcd
    15e8:	00002be3 	.word	0x00002be3
    15ec:	00002bff 	.word	0x00002bff
    15f0:	00002d78 	.word	0x00002d78

000015f4 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    15f4:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    15f6:	4c19      	ldr	r4, [pc, #100]	; (165c <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    15f8:	4819      	ldr	r0, [pc, #100]	; (1660 <_UsageFault.isra.5+0x6c>)
    15fa:	f7ff fab3 	bl	b64 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    15fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1600:	019a      	lsls	r2, r3, #6
    1602:	d502      	bpl.n	160a <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    1604:	4817      	ldr	r0, [pc, #92]	; (1664 <_UsageFault.isra.5+0x70>)
    1606:	f7ff faad 	bl	b64 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    160a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    160c:	01db      	lsls	r3, r3, #7
    160e:	d502      	bpl.n	1616 <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    1610:	4815      	ldr	r0, [pc, #84]	; (1668 <_UsageFault.isra.5+0x74>)
    1612:	f7ff faa7 	bl	b64 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1616:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1618:	0318      	lsls	r0, r3, #12
    161a:	d502      	bpl.n	1622 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    161c:	4813      	ldr	r0, [pc, #76]	; (166c <_UsageFault.isra.5+0x78>)
    161e:	f7ff faa1 	bl	b64 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1622:	4c0e      	ldr	r4, [pc, #56]	; (165c <_UsageFault.isra.5+0x68>)
    1624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1626:	0359      	lsls	r1, r3, #13
    1628:	d502      	bpl.n	1630 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    162a:	4811      	ldr	r0, [pc, #68]	; (1670 <_UsageFault.isra.5+0x7c>)
    162c:	f7ff fa9a 	bl	b64 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1632:	039a      	lsls	r2, r3, #14
    1634:	d502      	bpl.n	163c <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    1636:	480f      	ldr	r0, [pc, #60]	; (1674 <_UsageFault.isra.5+0x80>)
    1638:	f7ff fa94 	bl	b64 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    163c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    163e:	03db      	lsls	r3, r3, #15
    1640:	d502      	bpl.n	1648 <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    1642:	480d      	ldr	r0, [pc, #52]	; (1678 <_UsageFault.isra.5+0x84>)
    1644:	f7ff fa8e 	bl	b64 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1648:	4a04      	ldr	r2, [pc, #16]	; (165c <_UsageFault.isra.5+0x68>)
    164a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    164c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1650:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1654:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1656:	2000      	movs	r0, #0
    1658:	bd10      	pop	{r4, pc}
    165a:	bf00      	nop
    165c:	e000ed00 	.word	0xe000ed00
    1660:	00002da8 	.word	0x00002da8
    1664:	00002dc1 	.word	0x00002dc1
    1668:	00002dd5 	.word	0x00002dd5
    166c:	00002df0 	.word	0x00002df0
    1670:	00002e0f 	.word	0x00002e0f
    1674:	00002e35 	.word	0x00002e35
    1678:	00002e50 	.word	0x00002e50

0000167c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    167c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    167e:	4c27      	ldr	r4, [pc, #156]	; (171c <_Fault+0xa0>)
    1680:	6863      	ldr	r3, [r4, #4]
    1682:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1686:	1eda      	subs	r2, r3, #3
{
    1688:	4605      	mov	r5, r0
	switch (fault) {
    168a:	2a09      	cmp	r2, #9
    168c:	d83a      	bhi.n	1704 <_Fault+0x88>
    168e:	e8df f002 	tbb	[pc, r2]
    1692:	3305      	.short	0x3305
    1694:	39393035 	.word	0x39393035
    1698:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    169c:	4820      	ldr	r0, [pc, #128]	; (1720 <_Fault+0xa4>)
    169e:	f7ff fa61 	bl	b64 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    16a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    16a4:	079a      	lsls	r2, r3, #30
    16a6:	d503      	bpl.n	16b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    16a8:	481e      	ldr	r0, [pc, #120]	; (1724 <_Fault+0xa8>)
	PR_FAULT_INFO(
    16aa:	f7ff fa5b 	bl	b64 <printk>
    16ae:	e002      	b.n	16b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    16b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    16b2:	005b      	lsls	r3, r3, #1
    16b4:	d405      	bmi.n	16c2 <_Fault+0x46>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    16b6:	2000      	movs	r0, #0
	}

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
#endif
	_NanoFatalErrorHandler(reason, esf);
    16b8:	4629      	mov	r1, r5
}
    16ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_NanoFatalErrorHandler(reason, esf);
    16be:	f000 b8d1 	b.w	1864 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    16c2:	4819      	ldr	r0, [pc, #100]	; (1728 <_Fault+0xac>)
    16c4:	f7ff fa4e 	bl	b64 <printk>
		if (SCB_MMFSR) {
    16c8:	4b18      	ldr	r3, [pc, #96]	; (172c <_Fault+0xb0>)
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	b12b      	cbz	r3, 16da <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
    16ce:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    16d0:	f7ff ff02 	bl	14d8 <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    16d4:	2806      	cmp	r0, #6
    16d6:	d1ef      	bne.n	16b8 <_Fault+0x3c>
}
    16d8:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR) {
    16da:	4b15      	ldr	r3, [pc, #84]	; (1730 <_Fault+0xb4>)
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	b11b      	cbz	r3, 16e8 <_Fault+0x6c>
			reason = _BusFault(esf, 1);
    16e0:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    16e2:	f7ff ff3d 	bl	1560 <_BusFault.isra.3>
    16e6:	e7f5      	b.n	16d4 <_Fault+0x58>
		} else if (SCB_UFSR) {
    16e8:	4b12      	ldr	r3, [pc, #72]	; (1734 <_Fault+0xb8>)
    16ea:	881b      	ldrh	r3, [r3, #0]
    16ec:	b29b      	uxth	r3, r3
    16ee:	2b00      	cmp	r3, #0
    16f0:	d0e1      	beq.n	16b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    16f2:	f7ff ff7f 	bl	15f4 <_UsageFault.isra.5>
    16f6:	e7ed      	b.n	16d4 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
    16f8:	2000      	movs	r0, #0
    16fa:	e7e9      	b.n	16d0 <_Fault+0x54>
		reason = _BusFault(esf, 0);
    16fc:	2000      	movs	r0, #0
    16fe:	e7f0      	b.n	16e2 <_Fault+0x66>
	PR_FAULT_INFO(
    1700:	480d      	ldr	r0, [pc, #52]	; (1738 <_Fault+0xbc>)
    1702:	e7d2      	b.n	16aa <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
    1704:	480d      	ldr	r0, [pc, #52]	; (173c <_Fault+0xc0>)
    1706:	490e      	ldr	r1, [pc, #56]	; (1740 <_Fault+0xc4>)
    1708:	f1a3 0210 	sub.w	r2, r3, #16
    170c:	2b0f      	cmp	r3, #15
    170e:	bfd8      	it	le
    1710:	4601      	movle	r1, r0
    1712:	480c      	ldr	r0, [pc, #48]	; (1744 <_Fault+0xc8>)
    1714:	f7ff fa26 	bl	b64 <printk>
    1718:	e7cd      	b.n	16b6 <_Fault+0x3a>
    171a:	bf00      	nop
    171c:	e000ed00 	.word	0xe000ed00
    1720:	00002c46 	.word	0x00002c46
    1724:	00002c5e 	.word	0x00002c5e
    1728:	00002c80 	.word	0x00002c80
    172c:	e000ed28 	.word	0xe000ed28
    1730:	e000ed29 	.word	0xe000ed29
    1734:	e000ed2a 	.word	0xe000ed2a
    1738:	00002ca0 	.word	0x00002ca0
    173c:	00002c18 	.word	0x00002c18
    1740:	00002c2d 	.word	0x00002c2d
    1744:	00002cd7 	.word	0x00002cd7

00001748 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1748:	4a02      	ldr	r2, [pc, #8]	; (1754 <_FaultInit+0xc>)
    174a:	6953      	ldr	r3, [r2, #20]
    174c:	f043 0310 	orr.w	r3, r3, #16
    1750:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1752:	4770      	bx	lr
    1754:	e000ed00 	.word	0xe000ed00

00001758 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1758:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    175a:	2b00      	cmp	r3, #0
    175c:	db08      	blt.n	1770 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    175e:	2201      	movs	r2, #1
    1760:	f000 001f 	and.w	r0, r0, #31
    1764:	fa02 f000 	lsl.w	r0, r2, r0
    1768:	095b      	lsrs	r3, r3, #5
    176a:	4a02      	ldr	r2, [pc, #8]	; (1774 <_arch_irq_enable+0x1c>)
    176c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1770:	4770      	bx	lr
    1772:	bf00      	nop
    1774:	e000e100 	.word	0xe000e100

00001778 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1778:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    177a:	2b00      	cmp	r3, #0
    177c:	db0d      	blt.n	179a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    177e:	2201      	movs	r2, #1
    1780:	095b      	lsrs	r3, r3, #5
    1782:	f000 001f 	and.w	r0, r0, #31
    1786:	fa02 f000 	lsl.w	r0, r2, r0
    178a:	3320      	adds	r3, #32
    178c:	4a03      	ldr	r2, [pc, #12]	; (179c <_arch_irq_disable+0x24>)
    178e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1792:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1796:	f3bf 8f6f 	isb	sy
}
    179a:	4770      	bx	lr
    179c:	e000e100 	.word	0xe000e100

000017a0 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    17a0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    17a2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17a4:	bfa8      	it	ge
    17a6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    17aa:	f101 0101 	add.w	r1, r1, #1
    17ae:	ea4f 1141 	mov.w	r1, r1, lsl #5
    17b2:	bfae      	itee	ge
    17b4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17b8:	f000 000f 	andlt.w	r0, r0, #15
    17bc:	4b03      	ldrlt	r3, [pc, #12]	; (17cc <_irq_priority_set+0x2c>)
    17be:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17c0:	bfac      	ite	ge
    17c2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17c6:	5419      	strblt	r1, [r3, r0]
}
    17c8:	4770      	bx	lr
    17ca:	bf00      	nop
    17cc:	e000ed14 	.word	0xe000ed14

000017d0 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    17d0:	f000 b834 	b.w	183c <__bus_fault>

000017d4 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    17d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17d6:	460c      	mov	r4, r1
    17d8:	4616      	mov	r6, r2
    17da:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    17dc:	2204      	movs	r2, #4
    17de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    17e2:	4605      	mov	r5, r0
    17e4:	f001 f93a 	bl	2a5c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    17e8:	f1a6 0120 	sub.w	r1, r6, #32
    17ec:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    17ee:	4a0c      	ldr	r2, [pc, #48]	; (1820 <_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    17f0:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    17f4:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    17f6:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    17fa:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    17fe:	e9c5 4617 	strd	r4, r6, [r5, #92]	; 0x5c
    1802:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1804:	9a06      	ldr	r2, [sp, #24]
    1806:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1808:	9a07      	ldr	r2, [sp, #28]
    180a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    180c:	9a08      	ldr	r2, [sp, #32]
    180e:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    1810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    1814:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1816:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1818:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    181a:	66ab      	str	r3, [r5, #104]	; 0x68

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    181e:	bf00      	nop
    1820:	0000080d 	.word	0x0000080d

00001824 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1824:	4901      	ldr	r1, [pc, #4]	; (182c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1826:	2210      	movs	r2, #16
	str r2, [r1]
    1828:	600a      	str	r2, [r1, #0]
	bx lr
    182a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    182c:	e000ed10 	.word	0xe000ed10

00001830 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1830:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1832:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1836:	bf30      	wfi

	bx lr
    1838:	4770      	bx	lr
    183a:	bf00      	nop

0000183c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    183c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    183e:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1842:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1860 <__bus_fault+0x24>
	ldr ip, [ip]
    1846:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    184a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    184e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1850:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1854:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1858:	b500      	push	{lr}
	bl _Fault
    185a:	f7ff ff0f 	bl	167c <_Fault>

	pop {pc}
    185e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1860:	e000ed04 	.word	0xe000ed04

00001864 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    1864:	b538      	push	{r3, r4, r5, lr}
    1866:	4604      	mov	r4, r0
    1868:	460d      	mov	r5, r1
	switch (reason) {
    186a:	2805      	cmp	r0, #5
    186c:	d81a      	bhi.n	18a4 <_NanoFatalErrorHandler+0x40>
    186e:	e8df f000 	tbb	[pc, r0]
    1872:	1903      	.short	0x1903
    1874:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    1878:	480d      	ldr	r0, [pc, #52]	; (18b0 <_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    187a:	f7ff f973 	bl	b64 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    187e:	f000 fecb 	bl	2618 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1882:	69aa      	ldr	r2, [r5, #24]
    1884:	4601      	mov	r1, r0
    1886:	480b      	ldr	r0, [pc, #44]	; (18b4 <_NanoFatalErrorHandler+0x50>)
    1888:	f7ff f96c 	bl	b64 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    188c:	4629      	mov	r1, r5
    188e:	4620      	mov	r0, r4
}
    1890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1894:	f000 b81c 	b.w	18d0 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    1898:	4807      	ldr	r0, [pc, #28]	; (18b8 <_NanoFatalErrorHandler+0x54>)
    189a:	e7ee      	b.n	187a <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    189c:	4807      	ldr	r0, [pc, #28]	; (18bc <_NanoFatalErrorHandler+0x58>)
    189e:	e7ec      	b.n	187a <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    18a0:	4807      	ldr	r0, [pc, #28]	; (18c0 <_NanoFatalErrorHandler+0x5c>)
    18a2:	e7ea      	b.n	187a <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    18a4:	4601      	mov	r1, r0
    18a6:	4807      	ldr	r0, [pc, #28]	; (18c4 <_NanoFatalErrorHandler+0x60>)
    18a8:	f7ff f95c 	bl	b64 <printk>
		break;
    18ac:	e7e7      	b.n	187e <_NanoFatalErrorHandler+0x1a>
    18ae:	bf00      	nop
    18b0:	00002e7c 	.word	0x00002e7c
    18b4:	00002f1a 	.word	0x00002f1a
    18b8:	00002e9c 	.word	0x00002e9c
    18bc:	00002ec2 	.word	0x00002ec2
    18c0:	00002edc 	.word	0x00002edc
    18c4:	00002ef7 	.word	0x00002ef7

000018c8 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    18c8:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    18ca:	6800      	ldr	r0, [r0, #0]
    18cc:	f7ff bfca 	b.w	1864 <_NanoFatalErrorHandler>

000018d0 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    18d0:	2805      	cmp	r0, #5
{
    18d2:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    18d4:	d00c      	beq.n	18f0 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    18d6:	f001 f80d 	bl	28f4 <k_is_in_isr>
    18da:	b160      	cbz	r0, 18f6 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    18dc:	f001 f80a 	bl	28f4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    18e0:	490c      	ldr	r1, [pc, #48]	; (1914 <_SysFatalErrorHandler+0x44>)
    18e2:	4b0d      	ldr	r3, [pc, #52]	; (1918 <_SysFatalErrorHandler+0x48>)
    18e4:	2800      	cmp	r0, #0
    18e6:	bf08      	it	eq
    18e8:	4619      	moveq	r1, r3
    18ea:	480c      	ldr	r0, [pc, #48]	; (191c <_SysFatalErrorHandler+0x4c>)
    18ec:	f7ff f93a 	bl	b64 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    18f0:	f7ff ff9e 	bl	1830 <k_cpu_idle>
    18f4:	e7fc      	b.n	18f0 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    18f6:	f001 f80d 	bl	2914 <_is_thread_essential>
    18fa:	2800      	cmp	r0, #0
    18fc:	d1ee      	bne.n	18dc <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    18fe:	4c08      	ldr	r4, [pc, #32]	; (1920 <_SysFatalErrorHandler+0x50>)
    1900:	4808      	ldr	r0, [pc, #32]	; (1924 <_SysFatalErrorHandler+0x54>)
    1902:	68a1      	ldr	r1, [r4, #8]
    1904:	f7ff f92e 	bl	b64 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1908:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    190a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    190e:	f000 b80b 	b.w	1928 <_impl_k_thread_abort>
    1912:	bf00      	nop
    1914:	00002f56 	.word	0x00002f56
    1918:	00002f5a 	.word	0x00002f5a
    191c:	00002f6b 	.word	0x00002f6b
    1920:	200005d4 	.word	0x200005d4
    1924:	00002f8b 	.word	0x00002f8b

00001928 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1928:	b538      	push	{r3, r4, r5, lr}
    192a:	4605      	mov	r5, r0
	__asm__ volatile(
    192c:	f04f 0320 	mov.w	r3, #32
    1930:	f3ef 8411 	mrs	r4, BASEPRI
    1934:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1938:	f001 f826 	bl	2988 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    193c:	4b0b      	ldr	r3, [pc, #44]	; (196c <_impl_k_thread_abort+0x44>)
    193e:	689b      	ldr	r3, [r3, #8]
    1940:	42ab      	cmp	r3, r5
    1942:	d10d      	bne.n	1960 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1944:	4b0a      	ldr	r3, [pc, #40]	; (1970 <_impl_k_thread_abort+0x48>)
    1946:	685a      	ldr	r2, [r3, #4]
    1948:	f3c2 0208 	ubfx	r2, r2, #0, #9
    194c:	b922      	cbnz	r2, 1958 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    194e:	f000 fdf1 	bl	2534 <_update_time_slice_before_swap>

	return __swap(key);
    1952:	4620      	mov	r0, r4
    1954:	f7ff fd74 	bl	1440 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1958:	685a      	ldr	r2, [r3, #4]
    195a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    195e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1960:	4620      	mov	r0, r4
}
    1962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1966:	f000 bcd9 	b.w	231c <_reschedule>
    196a:	bf00      	nop
    196c:	200005d4 	.word	0x200005d4
    1970:	e000ed00 	.word	0xe000ed00

00001974 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1974:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1976:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1978:	4a0b      	ldr	r2, [pc, #44]	; (19a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    197a:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    197c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    197e:	bf1e      	ittt	ne
	movne	r1, #0
    1980:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1982:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1984:	f000 fb98 	blne	20b8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1988:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    198a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    198e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1992:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1996:	4905      	ldr	r1, [pc, #20]	; (19ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1998:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    199a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    199c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    199e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    19a2:	f7ff bd2d 	b.w	1400 <_ExcExit>
    19a6:	0000      	.short	0x0000
	ldr r2, =_kernel
    19a8:	200005d4 	.word	0x200005d4
	ldr r1, =_sw_isr_table
    19ac:	000000dc 	.word	0x000000dc

000019b0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    19b0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    19b2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    19b6:	4806      	ldr	r0, [pc, #24]	; (19d0 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    19b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    19bc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    19be:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    19c2:	2002      	movs	r0, #2
    msr CONTROL, r0
    19c4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    19c8:	f3bf 8f6f 	isb	sy

    b _PrepC
    19cc:	f000 b806 	b.w	19dc <_PrepC>
    ldr r0, =_interrupt_stack
    19d0:	20000b50 	.word	0x20000b50

000019d4 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    19d4:	bf30      	wfi
    b _SysNmiOnReset
    19d6:	f7ff bffd 	b.w	19d4 <_SysNmiOnReset>
    19da:	bf00      	nop

000019dc <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    19dc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19de:	4b07      	ldr	r3, [pc, #28]	; (19fc <_PrepC+0x20>)
    19e0:	4a07      	ldr	r2, [pc, #28]	; (1a00 <_PrepC+0x24>)
    19e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    19e6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    19e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ec:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    19f0:	f000 fb92 	bl	2118 <_bss_zero>
	_data_copy();
    19f4:	f000 fb9a 	bl	212c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    19f8:	f000 fbbc 	bl	2174 <_Cstart>
    19fc:	00000000 	.word	0x00000000
    1a00:	e000ed00 	.word	0xe000ed00

00001a04 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1a04:	b508      	push	{r3, lr}
	handler();
    1a06:	f7ff ffe5 	bl	19d4 <_SysNmiOnReset>
	_ExcExit();
}
    1a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1a0e:	f7ff bcf7 	b.w	1400 <_ExcExit>
	...

00001a14 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1a14:	4b03      	ldr	r3, [pc, #12]	; (1a24 <arm_core_mpu_enable+0x10>)
    1a16:	2205      	movs	r2, #5
    1a18:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a1e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1a22:	4770      	bx	lr
    1a24:	e000ed90 	.word	0xe000ed90

00001a28 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1a28:	4a11      	ldr	r2, [pc, #68]	; (1a70 <arm_mpu_init+0x48>)
{
    1a2a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1a2c:	6814      	ldr	r4, [r2, #0]
    1a2e:	2c08      	cmp	r4, #8
    1a30:	d81b      	bhi.n	1a6a <arm_mpu_init+0x42>
	MPU->CTRL = 0;
    1a32:	4910      	ldr	r1, [pc, #64]	; (1a74 <arm_mpu_init+0x4c>)
    1a34:	6850      	ldr	r0, [r2, #4]
    1a36:	2300      	movs	r3, #0
    1a38:	604b      	str	r3, [r1, #4]
	SYS_LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1a3a:	429c      	cmp	r4, r3
    1a3c:	f100 000c 	add.w	r0, r0, #12
    1a40:	d103      	bne.n	1a4a <arm_mpu_init+0x22>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    1a42:	f7ff ffe7 	bl	1a14 <arm_core_mpu_enable>
    1a46:	2000      	movs	r0, #0
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1a48:	bd10      	pop	{r4, pc}
	MPU->RNR = index;
    1a4a:	608b      	str	r3, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a4c:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    1a50:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    1a54:	f042 0210 	orr.w	r2, r2, #16
    1a58:	431a      	orrs	r2, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a5a:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr | MPU_RASR_ENABLE_Msk;
    1a5c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    1a60:	f042 0201 	orr.w	r2, r2, #1
    1a64:	610a      	str	r2, [r1, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1a66:	3301      	adds	r3, #1
    1a68:	e7e7      	b.n	1a3a <arm_mpu_init+0x12>
		return -1;
    1a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a6e:	e7eb      	b.n	1a48 <arm_mpu_init+0x20>
    1a70:	20001350 	.word	0x20001350
    1a74:	e000ed90 	.word	0xe000ed90

00001a78 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1a78:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1a7a:	4603      	mov	r3, r0
    1a7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1a80:	b90a      	cbnz	r2, 1a86 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1a82:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1a84:	4770      	bx	lr
		*d = *s;
    1a86:	f803 2b01 	strb.w	r2, [r3], #1
    1a8a:	e7f7      	b.n	1a7c <strcpy+0x4>

00001a8c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1a8c:	3801      	subs	r0, #1
    1a8e:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1a90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1a94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1a98:	4293      	cmp	r3, r2
    1a9a:	d102      	bne.n	1aa2 <strcmp+0x16>
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d1f7      	bne.n	1a90 <strcmp+0x4>
    1aa0:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1aa2:	1a98      	subs	r0, r3, r2
    1aa4:	4770      	bx	lr

00001aa6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    1aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1aa8:	ea81 0400 	eor.w	r4, r1, r0
    1aac:	07a5      	lsls	r5, r4, #30
    1aae:	4603      	mov	r3, r0
    1ab0:	d00b      	beq.n	1aca <memcpy+0x24>
    1ab2:	3b01      	subs	r3, #1
    1ab4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1ab6:	4291      	cmp	r1, r2
    1ab8:	d11d      	bne.n	1af6 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    1abc:	2a00      	cmp	r2, #0
    1abe:	d0fc      	beq.n	1aba <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    1ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
    1ac4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1ac8:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1aca:	079c      	lsls	r4, r3, #30
    1acc:	d1f6      	bne.n	1abc <memcpy+0x16>
    1ace:	1f1d      	subs	r5, r3, #4
    1ad0:	460c      	mov	r4, r1
    1ad2:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    1ad4:	1b3e      	subs	r6, r7, r4
    1ad6:	2e03      	cmp	r6, #3
    1ad8:	d808      	bhi.n	1aec <memcpy+0x46>
    1ada:	0894      	lsrs	r4, r2, #2
    1adc:	f06f 0503 	mvn.w	r5, #3
    1ae0:	fb05 2204 	mla	r2, r5, r4, r2
    1ae4:	00a4      	lsls	r4, r4, #2
    1ae6:	4423      	add	r3, r4
    1ae8:	4421      	add	r1, r4
    1aea:	e7e2      	b.n	1ab2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    1aec:	f854 6b04 	ldr.w	r6, [r4], #4
    1af0:	f845 6f04 	str.w	r6, [r5, #4]!
    1af4:	e7ee      	b.n	1ad4 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1af6:	f811 4b01 	ldrb.w	r4, [r1], #1
    1afa:	f803 4f01 	strb.w	r4, [r3, #1]!
    1afe:	e7da      	b.n	1ab6 <memcpy+0x10>

00001b00 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1b00:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1b02:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1b04:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1b06:	079c      	lsls	r4, r3, #30
    1b08:	d10f      	bne.n	1b2a <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1b0a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1b0e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1b12:	461d      	mov	r5, r3
    1b14:	189f      	adds	r7, r3, r2
    1b16:	1b7e      	subs	r6, r7, r5
    1b18:	2e03      	cmp	r6, #3
    1b1a:	d80c      	bhi.n	1b36 <memset+0x36>
    1b1c:	0894      	lsrs	r4, r2, #2
    1b1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b22:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1b24:	429c      	cmp	r4, r3
    1b26:	d109      	bne.n	1b3c <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    1b2a:	2a00      	cmp	r2, #0
    1b2c:	d0fc      	beq.n	1b28 <memset+0x28>
		*(d_byte++) = c_byte;
    1b2e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1b32:	3a01      	subs	r2, #1
    1b34:	e7e7      	b.n	1b06 <memset+0x6>
		*(d_word++) = c_word;
    1b36:	f845 4b04 	str.w	r4, [r5], #4
    1b3a:	e7ec      	b.n	1b16 <memset+0x16>
		*(d_byte++) = c_byte;
    1b3c:	f804 1b01 	strb.w	r1, [r4], #1
    1b40:	e7f0      	b.n	1b24 <memset+0x24>

00001b42 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    1b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b46:	4770      	bx	lr

00001b48 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1b48:	4b01      	ldr	r3, [pc, #4]	; (1b50 <__stdout_hook_install+0x8>)
    1b4a:	6018      	str	r0, [r3, #0]
}
    1b4c:	4770      	bx	lr
    1b4e:	bf00      	nop
    1b50:	20001378 	.word	0x20001378

00001b54 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    1b54:	6800      	ldr	r0, [r0, #0]
    1b56:	6880      	ldr	r0, [r0, #8]
    1b58:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1b5a:	b941      	cbnz	r1, 1b6e <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    1b5c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1b60:	fa21 f202 	lsr.w	r2, r1, r2
    1b64:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    1b68:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1b6a:	2000      	movs	r0, #0
    1b6c:	4770      	bx	lr
		*value = gpio->IN;
    1b6e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1b72:	e7f9      	b.n	1b68 <gpio_nrf5_read+0x14>

00001b74 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    1b74:	6800      	ldr	r0, [r0, #0]
    1b76:	6880      	ldr	r0, [r0, #8]
    1b78:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1b7a:	b951      	cbnz	r1, 1b92 <gpio_nrf5_write+0x1e>
    1b7c:	2101      	movs	r1, #1
    1b7e:	fa01 f202 	lsl.w	r2, r1, r2
		if (value) { /* 1 */
    1b82:	b11b      	cbz	r3, 1b8c <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
    1b84:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    1b88:	2000      	movs	r0, #0
    1b8a:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    1b8c:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    1b90:	e7fa      	b.n	1b88 <gpio_nrf5_write+0x14>
		gpio->OUT = value;
    1b92:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    1b96:	e7f7      	b.n	1b88 <gpio_nrf5_write+0x14>

00001b98 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1b98:	6883      	ldr	r3, [r0, #8]
    1b9a:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1b9c:	b172      	cbz	r2, 1bbc <gpio_nrf5_manage_callback+0x24>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    1b9e:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode);
    1ba0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1ba2:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    1ba4:	b902      	cbnz	r2, 1ba8 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
    1ba6:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1ba8:	2000      	movs	r0, #0
    1baa:	4770      	bx	lr
	parent->next = child;
    1bac:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode);
    1bae:	6858      	ldr	r0, [r3, #4]
    1bb0:	4281      	cmp	r1, r0
	list->tail = node;
    1bb2:	bf08      	it	eq
    1bb4:	605a      	streq	r2, [r3, #4]
    1bb6:	e00d      	b.n	1bd4 <gpio_nrf5_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    1bb8:	4602      	mov	r2, r0
    1bba:	6800      	ldr	r0, [r0, #0]
    1bbc:	2800      	cmp	r0, #0
    1bbe:	d0f3      	beq.n	1ba8 <gpio_nrf5_manage_callback+0x10>
    1bc0:	4288      	cmp	r0, r1
    1bc2:	d1f9      	bne.n	1bb8 <gpio_nrf5_manage_callback+0x20>
    1bc4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    1bc6:	2a00      	cmp	r2, #0
    1bc8:	d1f0      	bne.n	1bac <gpio_nrf5_manage_callback+0x14>
    1bca:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1bcc:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
    1bce:	4291      	cmp	r1, r2
    1bd0:	d100      	bne.n	1bd4 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
    1bd2:	6058      	str	r0, [r3, #4]
	parent->next = child;
    1bd4:	2300      	movs	r3, #0
    1bd6:	600b      	str	r3, [r1, #0]
    1bd8:	e7e6      	b.n	1ba8 <gpio_nrf5_manage_callback+0x10>
	...

00001bdc <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
    1bdc:	4b0c      	ldr	r3, [pc, #48]	; (1c10 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
    1bde:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    1be0:	4d0c      	ldr	r5, [pc, #48]	; (1c14 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
    1be2:	681c      	ldr	r4, [r3, #0]
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    1be4:	2303      	movs	r3, #3
		if ((gpiote_chan_mask & BIT(i)) &&
    1be6:	fa24 f203 	lsr.w	r2, r4, r3
    1bea:	07d2      	lsls	r2, r2, #31
    1bec:	d508      	bpl.n	1c00 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    1bee:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    1bf2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    1bf6:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
    1bfa:	4282      	cmp	r2, r0
    1bfc:	d100      	bne.n	1c00 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    1bfe:	b121      	cbz	r1, 1c0a <gpiote_find_channel.isra.4+0x2e>
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    1c00:	3301      	adds	r3, #1
    1c02:	2b08      	cmp	r3, #8
    1c04:	d1ef      	bne.n	1be6 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
    1c06:	f06f 0312 	mvn.w	r3, #18
}
    1c0a:	4618      	mov	r0, r3
    1c0c:	bd30      	pop	{r4, r5, pc}
    1c0e:	bf00      	nop
    1c10:	2000137c 	.word	0x2000137c
    1c14:	40006000 	.word	0x40006000

00001c18 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1c18:	b570      	push	{r4, r5, r6, lr}
    1c1a:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1c1c:	460d      	mov	r5, r1
    1c1e:	b9c9      	cbnz	r1, 1c54 <gpio_nrf5_enable_callback+0x3c>
		volatile NRF_GPIOTE_Type *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
    1c20:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1c22:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
    1c24:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
    1c26:	4610      	mov	r0, r2
    1c28:	7919      	ldrb	r1, [r3, #4]
    1c2a:	f7ff ffd7 	bl	1bdc <gpiote_find_channel.isra.4>
		if (i < 0) {
    1c2e:	2800      	cmp	r0, #0
    1c30:	db0f      	blt.n	1c52 <gpio_nrf5_enable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1c32:	68b2      	ldr	r2, [r6, #8]
    1c34:	2301      	movs	r3, #1
    1c36:	fa03 f404 	lsl.w	r4, r3, r4
    1c3a:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1c3c:	f100 0140 	add.w	r1, r0, #64	; 0x40
    1c40:	4a06      	ldr	r2, [pc, #24]	; (1c5c <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
    1c42:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1c44:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
    1c48:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
    1c4c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    1c50:	4628      	mov	r0, r5
}
    1c52:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    1c54:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1c58:	e7fb      	b.n	1c52 <gpio_nrf5_enable_callback+0x3a>
    1c5a:	bf00      	nop
    1c5c:	40006000 	.word	0x40006000

00001c60 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1c60:	b570      	push	{r4, r5, r6, lr}
    1c62:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1c64:	460d      	mov	r5, r1
    1c66:	b9b1      	cbnz	r1, 1c96 <gpio_nrf5_disable_callback+0x36>
		volatile NRF_GPIOTE_Type *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
    1c68:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1c6a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
    1c6c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
    1c6e:	4610      	mov	r0, r2
    1c70:	7919      	ldrb	r1, [r3, #4]
    1c72:	f7ff ffb3 	bl	1bdc <gpiote_find_channel.isra.4>
		if (i < 0) {
    1c76:	2800      	cmp	r0, #0
    1c78:	db0c      	blt.n	1c94 <gpio_nrf5_disable_callback+0x34>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    1c7a:	2301      	movs	r3, #1
    1c7c:	68b2      	ldr	r2, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    1c7e:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    1c82:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
    1c86:	4b05      	ldr	r3, [pc, #20]	; (1c9c <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
    1c88:	ea22 0404 	bic.w	r4, r2, r4
    1c8c:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    1c8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    1c92:	4628      	mov	r0, r5
}
    1c94:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    1c96:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1c9a:	e7fb      	b.n	1c94 <gpio_nrf5_disable_callback+0x34>
    1c9c:	40006000 	.word	0x40006000

00001ca0 <gpio_nrf5_config>:
{
    1ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    1ca2:	6806      	ldr	r6, [r0, #0]
{
    1ca4:	461d      	mov	r5, r3
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    1ca6:	68b3      	ldr	r3, [r6, #8]
{
    1ca8:	4614      	mov	r4, r2
	volatile NRF_GPIO_Type *gpio = GPIO_STRUCT(dev);
    1caa:	6818      	ldr	r0, [r3, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1cac:	b111      	cbz	r1, 1cb4 <gpio_nrf5_config+0x14>
		return -ENOTSUP;
    1cae:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1cb4:	f405 7240 	and.w	r2, r5, #768	; 0x300
    1cb8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1cbc:	f3c5 3701 	ubfx	r7, r5, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1cc0:	f3c5 3381 	ubfx	r3, r5, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1cc4:	f405 3140 	and.w	r1, r5, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1cc8:	d054      	beq.n	1d74 <gpio_nrf5_config+0xd4>
		u8_t pull = GPIO_PULL_DISABLE;
    1cca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1cce:	bf0c      	ite	eq
    1cd0:	2204      	moveq	r2, #4
    1cd2:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    1cd4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    1cd8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    1cdc:	4f2e      	ldr	r7, [pc, #184]	; (1d98 <gpio_nrf5_config+0xf8>)
    1cde:	bf08      	it	eq
    1ce0:	2100      	moveq	r1, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1ce2:	f015 0f01 	tst.w	r5, #1
    1ce6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    1cea:	f504 77e0 	add.w	r7, r4, #448	; 0x1c0
    1cee:	d04a      	beq.n	1d86 <gpio_nrf5_config+0xe6>
			if (pull == GPIO_PULL_UP) {
    1cf0:	2a0c      	cmp	r2, #12
    1cf2:	d141      	bne.n	1d78 <gpio_nrf5_config+0xd8>
				gpio->OUTSET = BIT(pin);
    1cf4:	2101      	movs	r1, #1
    1cf6:	40a1      	lsls	r1, r4
    1cf8:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
					      GPIO_INPUT_DISCONNECT |
    1cfc:	f043 0303 	orr.w	r3, r3, #3
    1d00:	4313      	orrs	r3, r2
			gpio->PIN_CNF[pin] = (sense |
    1d02:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
	if (flags & GPIO_INT) {
    1d06:	f015 0002 	ands.w	r0, r5, #2
    1d0a:	d0d2      	beq.n	1cb2 <gpio_nrf5_config+0x12>
		u32_t port = GPIO_PORT(dev);
    1d0c:	68b3      	ldr	r3, [r6, #8]
		int i = gpiote_find_channel(dev, pin, port);
    1d0e:	4620      	mov	r0, r4
    1d10:	7919      	ldrb	r1, [r3, #4]
    1d12:	f7ff ff63 	bl	1bdc <gpiote_find_channel.isra.4>
		if (i < 0) {
    1d16:	2800      	cmp	r0, #0
    1d18:	da14      	bge.n	1d44 <gpio_nrf5_config+0xa4>
			if (popcount(gpiote_chan_mask) == GPIOTE_CH_NUM) {
    1d1a:	4f20      	ldr	r7, [pc, #128]	; (1d9c <gpio_nrf5_config+0xfc>)
    1d1c:	683e      	ldr	r6, [r7, #0]
    1d1e:	4630      	mov	r0, r6
    1d20:	f7fe fae0 	bl	2e4 <__popcountsi2>
    1d24:	2808      	cmp	r0, #8
    1d26:	d034      	beq.n	1d92 <gpio_nrf5_config+0xf2>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
    1d28:	43f3      	mvns	r3, r6
	return __builtin_ffs(op);
    1d2a:	fa93 f0a3 	rbit	r0, r3
    1d2e:	2b00      	cmp	r3, #0
    1d30:	fab0 f080 	clz	r0, r0
			gpiote_chan_mask |= BIT(i);
    1d34:	f04f 0301 	mov.w	r3, #1
    1d38:	bf08      	it	eq
    1d3a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
    1d3e:	4083      	lsls	r3, r0
    1d40:	4333      	orrs	r3, r6
    1d42:	603b      	str	r3, [r7, #0]
		if (flags & GPIO_INT_EDGE) {
    1d44:	06a9      	lsls	r1, r5, #26
    1d46:	d5b2      	bpl.n	1cae <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1d48:	066a      	lsls	r2, r5, #25
    1d4a:	d41f      	bmi.n	1d8c <gpio_nrf5_config+0xec>
				config |= GPIOTE_CFG_POL_L2H;
    1d4c:	f015 0f04 	tst.w	r5, #4
    1d50:	bf0c      	ite	eq
    1d52:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
    1d56:	f44f 3380 	movne.w	r3, #65536	; 0x10000
		config |= GPIOTE_CFG_PIN(pin);
    1d5a:	0224      	lsls	r4, r4, #8
    1d5c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    1d60:	f044 0401 	orr.w	r4, r4, #1
    1d64:	431c      	orrs	r4, r3
		gpiote->CONFIG[i] = config;
    1d66:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    1d6a:	4b0d      	ldr	r3, [pc, #52]	; (1da0 <gpio_nrf5_config+0x100>)
    1d6c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
    1d70:	2000      	movs	r0, #0
    1d72:	e79e      	b.n	1cb2 <gpio_nrf5_config+0x12>
			pull = GPIO_PULL_UP;
    1d74:	220c      	movs	r2, #12
    1d76:	e7ad      	b.n	1cd4 <gpio_nrf5_config+0x34>
			} else if (pull == GPIO_PULL_DOWN) {
    1d78:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    1d7a:	bf02      	ittt	eq
    1d7c:	2101      	moveq	r1, #1
    1d7e:	40a1      	lsleq	r1, r4
    1d80:	f8c0 150c 	streq.w	r1, [r0, #1292]	; 0x50c
    1d84:	e7ba      	b.n	1cfc <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
    1d86:	4313      	orrs	r3, r2
    1d88:	430b      	orrs	r3, r1
    1d8a:	e7ba      	b.n	1d02 <gpio_nrf5_config+0x62>
				config |= GPIOTE_CFG_POL_TOGG;
    1d8c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1d90:	e7e3      	b.n	1d5a <gpio_nrf5_config+0xba>
				return -EIO;
    1d92:	f06f 0004 	mvn.w	r0, #4
    1d96:	e78c      	b.n	1cb2 <gpio_nrf5_config+0x12>
    1d98:	00002fb0 	.word	0x00002fb0
    1d9c:	2000137c 	.word	0x2000137c
    1da0:	40006000 	.word	0x40006000

00001da4 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
    1da4:	b508      	push	{r3, lr}
	IRQ_CONNECT(CONFIG_GPIOTE_NRF5_IRQ, CONFIG_GPIOTE_NRF5_IRQ_PRI,
    1da6:	2200      	movs	r2, #0
    1da8:	2105      	movs	r1, #5
    1daa:	2006      	movs	r0, #6
    1dac:	f7ff fcf8 	bl	17a0 <_irq_priority_set>
	irq_enable(CONFIG_GPIOTE_NRF5_IRQ);
    1db0:	2006      	movs	r0, #6
    1db2:	f7ff fcd1 	bl	1758 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
    1db6:	2000      	movs	r0, #0
    1db8:	bd08      	pop	{r3, pc}
	...

00001dbc <gpio_nrf5_port_isr>:
	u32_t int_status_p0 = 0;
    1dbc:	2300      	movs	r3, #0
{
    1dbe:	b570      	push	{r4, r5, r6, lr}
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    1dc0:	2003      	movs	r0, #3
			gpiote->EVENTS_IN[i] = 0;
    1dc2:	461c      	mov	r4, r3
				int_status_p0 |= BIT(pin);
    1dc4:	2501      	movs	r5, #1
    1dc6:	0082      	lsls	r2, r0, #2
    1dc8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1dcc:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
    1dd0:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    1dd4:	b141      	cbz	r1, 1de8 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
    1dd6:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
    1dda:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
    1dde:	f3c1 2204 	ubfx	r2, r1, #8, #5
				int_status_p0 |= BIT(pin);
    1de2:	fa05 f202 	lsl.w	r2, r5, r2
    1de6:	4313      	orrs	r3, r2
	for (i = GPIOTE_CH_BASE; i < GPIOTE_CH_NUM; i++) {
    1de8:	3001      	adds	r0, #1
    1dea:	2808      	cmp	r0, #8
    1dec:	d1eb      	bne.n	1dc6 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
    1dee:	4e09      	ldr	r6, [pc, #36]	; (1e14 <gpio_nrf5_port_isr+0x58>)
    1df0:	68b2      	ldr	r2, [r6, #8]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1df2:	6814      	ldr	r4, [r2, #0]
    1df4:	b164      	cbz	r4, 1e10 <gpio_nrf5_port_isr+0x54>
	enabled_int = int_status_p0 & data->pin_callback_enables;
    1df6:	6895      	ldr	r5, [r2, #8]
    1df8:	401d      	ands	r5, r3
		if (cb->pin_mask & pins) {
    1dfa:	68a3      	ldr	r3, [r4, #8]
    1dfc:	421d      	tst	r5, r3
    1dfe:	d004      	beq.n	1e0a <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1e00:	6863      	ldr	r3, [r4, #4]
    1e02:	462a      	mov	r2, r5
    1e04:	4621      	mov	r1, r4
    1e06:	4630      	mov	r0, r6
    1e08:	4798      	blx	r3
	return node->next;
    1e0a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1e0c:	2c00      	cmp	r4, #0
    1e0e:	d1f4      	bne.n	1dfa <gpio_nrf5_port_isr+0x3e>
}
    1e10:	bd70      	pop	{r4, r5, r6, pc}
    1e12:	bf00      	nop
    1e14:	200013d4 	.word	0x200013d4

00001e18 <pwm_nrf5_sw_get_cycles_per_sec>:
static int pwm_nrf5_sw_get_cycles_per_sec(struct device *dev, u32_t pwm,
					  u64_t *cycles)
{
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;
    1e18:	6803      	ldr	r3, [r0, #0]

	/* HF timer frequency is derived from 16MHz source with a prescaler */
	*cycles = 16000000UL / BIT(config->prescaler);
    1e1a:	689b      	ldr	r3, [r3, #8]
    1e1c:	79d9      	ldrb	r1, [r3, #7]
    1e1e:	4b03      	ldr	r3, [pc, #12]	; (1e2c <pwm_nrf5_sw_get_cycles_per_sec+0x14>)
    1e20:	2000      	movs	r0, #0
    1e22:	40cb      	lsrs	r3, r1
    1e24:	e9c2 3000 	strd	r3, r0, [r2]

	return 0;
}
    1e28:	4770      	bx	lr
    1e2a:	bf00      	nop
    1e2c:	00f42400 	.word	0x00f42400

00001e30 <pwm_nrf5_sw_init>:
};

static int pwm_nrf5_sw_init(struct device *dev)
{
	return 0;
}
    1e30:	2000      	movs	r0, #0
    1e32:	4770      	bx	lr

00001e34 <pwm_nrf5_sw_pin_set>:
{
    1e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e38:	4691      	mov	r9, r2
	config = (struct pwm_config *)dev->config->config_info;
    1e3a:	6802      	ldr	r2, [r0, #0]
	data = dev->driver_data;
    1e3c:	6885      	ldr	r5, [r0, #8]
	config = (struct pwm_config *)dev->config->config_info;
    1e3e:	f8d2 8008 	ldr.w	r8, [r2, #8]
{
    1e42:	b08b      	sub	sp, #44	; 0x2c
    1e44:	468a      	mov	sl, r1
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
    1e46:	f898 2006 	ldrb.w	r2, [r8, #6]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    1e4a:	461f      	mov	r7, r3
    1e4c:	b133      	cbz	r3, 1e5c <pwm_nrf5_sw_pin_set+0x28>
    1e4e:	4599      	cmp	r9, r3
    1e50:	d004      	beq.n	1e5c <pwm_nrf5_sw_pin_set+0x28>
    1e52:	462b      	mov	r3, r5
    1e54:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
	for (i = 0; i < map_size; i++) {
    1e58:	4299      	cmp	r1, r3
    1e5a:	d115      	bne.n	1e88 <pwm_nrf5_sw_pin_set+0x54>
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    1e5c:	2300      	movs	r3, #0
    1e5e:	b2dc      	uxtb	r4, r3
	for (i = 0; i < map_size; i++) {
    1e60:	42a2      	cmp	r2, r4
    1e62:	d81c      	bhi.n	1e9e <pwm_nrf5_sw_pin_set+0x6a>
    1e64:	1e54      	subs	r4, r2, #1
    1e66:	b2e4      	uxtb	r4, r4
	while (i--) {
    1e68:	2cff      	cmp	r4, #255	; 0xff
    1e6a:	d163      	bne.n	1f34 <pwm_nrf5_sw_pin_set+0x100>
		SYS_LOG_ERR("No more channels available");
    1e6c:	4b6b      	ldr	r3, [pc, #428]	; (201c <pwm_nrf5_sw_pin_set+0x1e8>)
    1e6e:	4a6c      	ldr	r2, [pc, #432]	; (2020 <pwm_nrf5_sw_pin_set+0x1ec>)
    1e70:	496c      	ldr	r1, [pc, #432]	; (2024 <pwm_nrf5_sw_pin_set+0x1f0>)
    1e72:	486d      	ldr	r0, [pc, #436]	; (2028 <pwm_nrf5_sw_pin_set+0x1f4>)
    1e74:	e9cd 3300 	strd	r3, r3, [sp]
    1e78:	4b6c      	ldr	r3, [pc, #432]	; (202c <pwm_nrf5_sw_pin_set+0x1f8>)
    1e7a:	f7fe fe73 	bl	b64 <printk>
		return -ENOMEM;
    1e7e:	f06f 000b 	mvn.w	r0, #11
}
    1e82:	b00b      	add	sp, #44	; 0x2c
    1e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((data->map[i].pwm != pwm) &&
    1e88:	6858      	ldr	r0, [r3, #4]
    1e8a:	4582      	cmp	sl, r0
    1e8c:	d005      	beq.n	1e9a <pwm_nrf5_sw_pin_set+0x66>
    1e8e:	6898      	ldr	r0, [r3, #8]
    1e90:	b118      	cbz	r0, 1e9a <pwm_nrf5_sw_pin_set+0x66>
		    (data->map[i].pulse_cycles != 0) &&
    1e92:	6828      	ldr	r0, [r5, #0]
    1e94:	4581      	cmp	r9, r0
    1e96:	f040 80b4 	bne.w	2002 <pwm_nrf5_sw_pin_set+0x1ce>
    1e9a:	3308      	adds	r3, #8
    1e9c:	e7dc      	b.n	1e58 <pwm_nrf5_sw_pin_set+0x24>
    1e9e:	3301      	adds	r3, #1
		if (pwm == data->map[i].pwm) {
    1ea0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    1ea4:	f851 1c04 	ldr.w	r1, [r1, #-4]
    1ea8:	458a      	cmp	sl, r1
    1eaa:	d1d8      	bne.n	1e5e <pwm_nrf5_sw_pin_set+0x2a>
	SYS_LOG_DBG("PWM %d, period %u, pulse %u", pwm,
    1eac:	4b5b      	ldr	r3, [pc, #364]	; (201c <pwm_nrf5_sw_pin_set+0x1e8>)
	timer = config->timer;
    1eae:	f8d8 6000 	ldr.w	r6, [r8]
	SYS_LOG_DBG("PWM %d, period %u, pulse %u", pwm,
    1eb2:	4a5f      	ldr	r2, [pc, #380]	; (2030 <pwm_nrf5_sw_pin_set+0x1fc>)
    1eb4:	9300      	str	r3, [sp, #0]
    1eb6:	e9cd 7303 	strd	r7, r3, [sp, #12]
    1eba:	495a      	ldr	r1, [pc, #360]	; (2024 <pwm_nrf5_sw_pin_set+0x1f0>)
    1ebc:	4b5b      	ldr	r3, [pc, #364]	; (202c <pwm_nrf5_sw_pin_set+0x1f8>)
    1ebe:	485d      	ldr	r0, [pc, #372]	; (2034 <pwm_nrf5_sw_pin_set+0x200>)
    1ec0:	e9cd a901 	strd	sl, r9, [sp, #4]
    1ec4:	f7fe fe4e 	bl	b64 <printk>
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    1ec8:	f898 3004 	ldrb.w	r3, [r8, #4]
    1ecc:	4423      	add	r3, r4
    1ece:	009b      	lsls	r3, r3, #2
    1ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1ed4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1ed8:	2000      	movs	r0, #0
    1eda:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	ppi_index = config->ppi_base + (channel << 1);
    1ede:	f898 2005 	ldrb.w	r2, [r8, #5]
    1ee2:	9307      	str	r3, [sp, #28]
    1ee4:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    1ee8:	fa5f fb82 	uxtb.w	fp, r2
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    1eec:	2101      	movs	r1, #1
    1eee:	f10b 0201 	add.w	r2, fp, #1
    1ef2:	fa01 f202 	lsl.w	r2, r1, r2
    1ef6:	fa01 fc0b 	lsl.w	ip, r1, fp
    1efa:	ea42 020c 	orr.w	r2, r2, ip
    1efe:	9208      	str	r2, [sp, #32]
    1f00:	4a4d      	ldr	r2, [pc, #308]	; (2038 <pwm_nrf5_sw_pin_set+0x204>)
    1f02:	9b08      	ldr	r3, [sp, #32]
    1f04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_GPIO->DIRSET = BIT(pwm);
    1f08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1f0c:	fa01 fe0a 	lsl.w	lr, r1, sl
    1f10:	f8c2 e518 	str.w	lr, [r2, #1304]	; 0x518
	if (pulse_cycles == 0) {
    1f14:	b9cf      	cbnz	r7, 1f4a <pwm_nrf5_sw_pin_set+0x116>
		NRF_GPIO->OUTCLR = BIT(pwm);
    1f16:	f8c2 e50c 	str.w	lr, [r2, #1292]	; 0x50c
	data->map[channel].pulse_cycles = 0;
    1f1a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    1f1e:	2300      	movs	r3, #0
    1f20:	60a3      	str	r3, [r4, #8]
    1f22:	f898 3006 	ldrb.w	r3, [r8, #6]
    1f26:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	for (channel = 0; channel < config->map_size; channel++) {
    1f2a:	429d      	cmp	r5, r3
    1f2c:	d163      	bne.n	1ff6 <pwm_nrf5_sw_pin_set+0x1c2>
		timer->TASKS_STOP = 1;
    1f2e:	2301      	movs	r3, #1
    1f30:	6073      	str	r3, [r6, #4]
    1f32:	e064      	b.n	1ffe <pwm_nrf5_sw_pin_set+0x1ca>
		if (data->map[i].pulse_cycles == 0) {
    1f34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
    1f38:	1e63      	subs	r3, r4, #1
    1f3a:	6889      	ldr	r1, [r1, #8]
    1f3c:	b2db      	uxtb	r3, r3
    1f3e:	b109      	cbz	r1, 1f44 <pwm_nrf5_sw_pin_set+0x110>
    1f40:	461c      	mov	r4, r3
    1f42:	e791      	b.n	1e68 <pwm_nrf5_sw_pin_set+0x34>
	if (channel >= config->map_size) {
    1f44:	42a2      	cmp	r2, r4
    1f46:	d8b1      	bhi.n	1eac <pwm_nrf5_sw_pin_set+0x78>
    1f48:	e790      	b.n	1e6c <pwm_nrf5_sw_pin_set+0x38>
	} else if (pulse_cycles == period_cycles) {
    1f4a:	45b9      	cmp	r9, r7
    1f4c:	d102      	bne.n	1f54 <pwm_nrf5_sw_pin_set+0x120>
		NRF_GPIO->OUTSET = BIT(pwm);
    1f4e:	f8c2 e508 	str.w	lr, [r2, #1288]	; 0x508
		goto pin_set_pwm_off;
    1f52:	e7e2      	b.n	1f1a <pwm_nrf5_sw_pin_set+0xe6>
    1f54:	f898 c006 	ldrb.w	ip, [r8, #6]
		NRF_GPIO->OUTCLR = BIT(pwm);
    1f58:	f8c2 e50c 	str.w	lr, [r2, #1292]	; 0x50c
	timer->MODE = TIMER_MODE_MODE_Timer;
    1f5c:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
	timer->PRESCALER = config->prescaler;
    1f60:	f898 2007 	ldrb.w	r2, [r8, #7]
    1f64:	f8c6 2510 	str.w	r2, [r6, #1296]	; 0x510
    1f68:	b223      	sxth	r3, r4
    1f6a:	009a      	lsls	r2, r3, #2
    1f6c:	eb06 0802 	add.w	r8, r6, r2
    1f70:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    1f74:	f04f 0e08 	mov.w	lr, #8
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    1f78:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
	timer->EVENTS_COMPARE[channel] = 0;
    1f7c:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
	timer->EVENTS_COMPARE[config->map_size] = 0;
    1f80:	f8cc 0140 	str.w	r0, [ip, #320]	; 0x140
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    1f84:	f8c6 e200 	str.w	lr, [r6, #512]	; 0x200
	div = period_cycles >> 16;
    1f88:	ea4f 4e19 	mov.w	lr, r9, lsr #16
    1f8c:	9309      	str	r3, [sp, #36]	; 0x24
	timer->CC[channel] = pulse_cycles >> div;
    1f8e:	fa27 f30e 	lsr.w	r3, r7, lr
	timer->CC[config->map_size] = period_cycles >> div;
    1f92:	fa29 fe0e 	lsr.w	lr, r9, lr
	timer->CC[channel] = pulse_cycles >> div;
    1f96:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
	timer->CC[config->map_size] = period_cycles >> div;
    1f9a:	f8cc e540 	str.w	lr, [ip, #1344]	; 0x540
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1f9e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 2040 <pwm_nrf5_sw_pin_set+0x20c>
    1fa2:	9b07      	ldr	r3, [sp, #28]
	timer->TASKS_CLEAR = 1;
    1fa4:	60f1      	str	r1, [r6, #12]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1fa6:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
    1faa:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    1fae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
    1fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1fb6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
				     &(timer->EVENTS_COMPARE[channel]);
    1fba:	3450      	adds	r4, #80	; 0x50
    1fbc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    1fc0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    1fc4:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    1fc8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
					 &(timer->EVENTS_COMPARE[3]);
    1fcc:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    1fd0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    1fd4:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
    1fd8:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    1fdc:	4b16      	ldr	r3, [pc, #88]	; (2038 <pwm_nrf5_sw_pin_set+0x204>)
    1fde:	9a08      	ldr	r2, [sp, #32]
    1fe0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    1fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	timer->TASKS_START = 1;
    1fe6:	6031      	str	r1, [r6, #0]
	data->period_cycles = period_cycles;
    1fe8:	f8c5 9000 	str.w	r9, [r5]
    1fec:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
	data->map[channel].pulse_cycles = pulse_cycles;
    1ff0:	e9c5 a701 	strd	sl, r7, [r5, #4]
	return 0;
    1ff4:	e745      	b.n	1e82 <pwm_nrf5_sw_pin_set+0x4e>
		if (data->map[channel].pulse_cycles) {
    1ff6:	f855 2f08 	ldr.w	r2, [r5, #8]!
    1ffa:	2a00      	cmp	r2, #0
    1ffc:	d095      	beq.n	1f2a <pwm_nrf5_sw_pin_set+0xf6>
	return 0;
    1ffe:	2000      	movs	r0, #0
    2000:	e73f      	b.n	1e82 <pwm_nrf5_sw_pin_set+0x4e>
		SYS_LOG_ERR("Incompatible period");
    2002:	4b06      	ldr	r3, [pc, #24]	; (201c <pwm_nrf5_sw_pin_set+0x1e8>)
    2004:	4a06      	ldr	r2, [pc, #24]	; (2020 <pwm_nrf5_sw_pin_set+0x1ec>)
    2006:	4907      	ldr	r1, [pc, #28]	; (2024 <pwm_nrf5_sw_pin_set+0x1f0>)
    2008:	480c      	ldr	r0, [pc, #48]	; (203c <pwm_nrf5_sw_pin_set+0x208>)
    200a:	e9cd 3300 	strd	r3, r3, [sp]
    200e:	4b07      	ldr	r3, [pc, #28]	; (202c <pwm_nrf5_sw_pin_set+0x1f8>)
    2010:	f7fe fda8 	bl	b64 <printk>
		return ret;
    2014:	f06f 0015 	mvn.w	r0, #21
    2018:	e733      	b.n	1e82 <pwm_nrf5_sw_pin_set+0x4e>
    201a:	bf00      	nop
    201c:	00002b14 	.word	0x00002b14
    2020:	00003038 	.word	0x00003038
    2024:	0000303f 	.word	0x0000303f
    2028:	0000304b 	.word	0x0000304b
    202c:	00003014 	.word	0x00003014
    2030:	00003076 	.word	0x00003076
    2034:	0000307d 	.word	0x0000307d
    2038:	4001f000 	.word	0x4001f000
    203c:	000030a9 	.word	0x000030a9
    2040:	00130003 	.word	0x00130003

00002044 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    2044:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    2046:	4b08      	ldr	r3, [pc, #32]	; (2068 <_sys_device_do_config_level+0x24>)
    2048:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    204c:	3001      	adds	r0, #1
    204e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    2052:	4620      	mov	r0, r4
    2054:	4285      	cmp	r5, r0
    2056:	f104 040c 	add.w	r4, r4, #12
    205a:	d800      	bhi.n	205e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    205c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    205e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    2062:	685b      	ldr	r3, [r3, #4]
    2064:	4798      	blx	r3
    2066:	e7f4      	b.n	2052 <_sys_device_do_config_level+0xe>
    2068:	000030d0 	.word	0x000030d0

0000206c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    206c:	4b10      	ldr	r3, [pc, #64]	; (20b0 <device_get_binding+0x44>)
{
    206e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    2070:	4c10      	ldr	r4, [pc, #64]	; (20b4 <device_get_binding+0x48>)
{
    2072:	4605      	mov	r5, r0
    2074:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    2076:	429c      	cmp	r4, r3
    2078:	d104      	bne.n	2084 <device_get_binding+0x18>
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    207a:	4c0e      	ldr	r4, [pc, #56]	; (20b4 <device_get_binding+0x48>)
    207c:	42b4      	cmp	r4, r6
    207e:	d109      	bne.n	2094 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    2080:	2400      	movs	r4, #0
    2082:	e012      	b.n	20aa <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    2084:	6862      	ldr	r2, [r4, #4]
    2086:	b11a      	cbz	r2, 2090 <device_get_binding+0x24>
    2088:	6822      	ldr	r2, [r4, #0]
    208a:	6812      	ldr	r2, [r2, #0]
    208c:	42aa      	cmp	r2, r5
    208e:	d00c      	beq.n	20aa <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    2090:	340c      	adds	r4, #12
    2092:	e7f0      	b.n	2076 <device_get_binding+0xa>
		if (!info->driver_api) {
    2094:	6863      	ldr	r3, [r4, #4]
    2096:	b90b      	cbnz	r3, 209c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    2098:	340c      	adds	r4, #12
    209a:	e7ef      	b.n	207c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    209c:	6823      	ldr	r3, [r4, #0]
    209e:	4628      	mov	r0, r5
    20a0:	6819      	ldr	r1, [r3, #0]
    20a2:	f7ff fcf3 	bl	1a8c <strcmp>
    20a6:	2800      	cmp	r0, #0
    20a8:	d1f6      	bne.n	2098 <device_get_binding+0x2c>
}
    20aa:	4620      	mov	r0, r4
    20ac:	bd70      	pop	{r4, r5, r6, pc}
    20ae:	bf00      	nop
    20b0:	200013ec 	.word	0x200013ec
    20b4:	2000138c 	.word	0x2000138c

000020b8 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    20b8:	1c43      	adds	r3, r0, #1
    20ba:	d003      	beq.n	20c4 <_sys_power_save_idle_exit+0xc>
    20bc:	4b03      	ldr	r3, [pc, #12]	; (20cc <_sys_power_save_idle_exit+0x14>)
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	4283      	cmp	r3, r0
    20c2:	dc01      	bgt.n	20c8 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    20c4:	f7ff b944 	b.w	1350 <_timer_idle_exit>
	}
}
    20c8:	4770      	bx	lr
    20ca:	bf00      	nop
    20cc:	20001380 	.word	0x20001380

000020d0 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    20d0:	4d0f      	ldr	r5, [pc, #60]	; (2110 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    20d2:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    20d4:	4f0f      	ldr	r7, [pc, #60]	; (2114 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20d6:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
    20da:	f04f 0220 	mov.w	r2, #32
    20de:	f3ef 8311 	mrs	r3, BASEPRI
    20e2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    20e6:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20e8:	42b3      	cmp	r3, r6
    20ea:	d00a      	beq.n	2102 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    20ec:	b14b      	cbz	r3, 2102 <idle+0x32>
    20ee:	691c      	ldr	r4, [r3, #16]
    20f0:	1c63      	adds	r3, r4, #1
    20f2:	d008      	beq.n	2106 <idle+0x36>
    20f4:	683b      	ldr	r3, [r7, #0]
    20f6:	42a3      	cmp	r3, r4
    20f8:	dd05      	ble.n	2106 <idle+0x36>
	_kernel.idle = ticks;
    20fa:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
    20fc:	f7ff fb98 	bl	1830 <k_cpu_idle>
    2100:	e7eb      	b.n	20da <idle+0xa>
    2102:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    2106:	4620      	mov	r0, r4
    2108:	f7ff f908 	bl	131c <_timer_idle_enter>
    210c:	e7f5      	b.n	20fa <idle+0x2a>
    210e:	bf00      	nop
    2110:	200005d4 	.word	0x200005d4
    2114:	20001380 	.word	0x20001380

00002118 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    2118:	4802      	ldr	r0, [pc, #8]	; (2124 <_bss_zero+0xc>)
    211a:	4a03      	ldr	r2, [pc, #12]	; (2128 <_bss_zero+0x10>)
    211c:	2100      	movs	r1, #0
    211e:	1a12      	subs	r2, r2, r0
    2120:	f7ff bcee 	b.w	1b00 <memset>
    2124:	20000000 	.word	0x20000000
    2128:	20000610 	.word	0x20000610

0000212c <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    212c:	4802      	ldr	r0, [pc, #8]	; (2138 <_data_copy+0xc>)
    212e:	4a03      	ldr	r2, [pc, #12]	; (213c <_data_copy+0x10>)
    2130:	4903      	ldr	r1, [pc, #12]	; (2140 <_data_copy+0x14>)
    2132:	1a12      	subs	r2, r2, r0
    2134:	f7ff bcb7 	b.w	1aa6 <memcpy>
    2138:	20001350 	.word	0x20001350
    213c:	200013ec 	.word	0x200013ec
    2140:	00003114 	.word	0x00003114

00002144 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2144:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2146:	2002      	movs	r0, #2
    2148:	f7ff ff7c 	bl	2044 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    214c:	4807      	ldr	r0, [pc, #28]	; (216c <bg_thread_main+0x28>)
    214e:	f7fe fd09 	bl	b64 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    2152:	2003      	movs	r0, #3
    2154:	f7ff ff76 	bl	2044 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    2158:	f000 fc36 	bl	29c8 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    215c:	f7fe faca 	bl	6f4 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    2160:	4a03      	ldr	r2, [pc, #12]	; (2170 <bg_thread_main+0x2c>)
    2162:	7a13      	ldrb	r3, [r2, #8]
    2164:	f023 0301 	bic.w	r3, r3, #1
    2168:	7213      	strb	r3, [r2, #8]
}
    216a:	bd08      	pop	{r3, pc}
    216c:	000030ec 	.word	0x000030ec
    2170:	200004b4 	.word	0x200004b4

00002174 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    2174:	b580      	push	{r7, lr}
    2176:	b086      	sub	sp, #24
    2178:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    217a:	f7ff f955 	bl	1428 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    217e:	4b2e      	ldr	r3, [pc, #184]	; (2238 <_Cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2180:	f383 8808 	msr	MSP, r3
    2184:	4b2d      	ldr	r3, [pc, #180]	; (223c <_Cstart+0xc8>)
	_ready_q.cache = _main_thread;
    2186:	4d2e      	ldr	r5, [pc, #184]	; (2240 <_Cstart+0xcc>)
    2188:	4e2e      	ldr	r6, [pc, #184]	; (2244 <_Cstart+0xd0>)
    218a:	2400      	movs	r4, #0
    218c:	22e0      	movs	r2, #224	; 0xe0
    218e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    2192:	77dc      	strb	r4, [r3, #31]
    2194:	761c      	strb	r4, [r3, #24]
    2196:	765c      	strb	r4, [r3, #25]
    2198:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    219a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    219c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    21a0:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    21a2:	f7ff fad1 	bl	1748 <_FaultInit>
	_CpuIdleInit();
    21a6:	f7ff fb3d 	bl	1824 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    21aa:	4620      	mov	r0, r4
    21ac:	f7ff ff4a 	bl	2044 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    21b0:	2001      	movs	r0, #1
    21b2:	f7ff ff47 	bl	2044 <_sys_device_do_config_level>
	_sched_init();
    21b6:	f000 f9c3 	bl	2540 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    21ba:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
    21bc:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
    21be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    21c2:	e9cd 4303 	strd	r4, r3, [sp, #12]
    21c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    21ca:	9400      	str	r4, [sp, #0]
    21cc:	4b1e      	ldr	r3, [pc, #120]	; (2248 <_Cstart+0xd4>)
    21ce:	491f      	ldr	r1, [pc, #124]	; (224c <_Cstart+0xd8>)
    21d0:	4628      	mov	r0, r5
    21d2:	f000 fbbf 	bl	2954 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    21d6:	7a6b      	ldrb	r3, [r5, #9]
    21d8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    21dc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    21e0:	726a      	strb	r2, [r5, #9]
    21e2:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
    21e4:	d105      	bne.n	21f2 <_Cstart+0x7e>
    21e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    21e8:	3301      	adds	r3, #1
    21ea:	d102      	bne.n	21f2 <_Cstart+0x7e>
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    21ec:	4628      	mov	r0, r5
    21ee:	f000 f8ed 	bl	23cc <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    21f2:	4e17      	ldr	r6, [pc, #92]	; (2250 <_Cstart+0xdc>)
    21f4:	4917      	ldr	r1, [pc, #92]	; (2254 <_Cstart+0xe0>)
    21f6:	230f      	movs	r3, #15
    21f8:	2201      	movs	r2, #1
    21fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
    21fe:	2300      	movs	r3, #0
    2200:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2204:	9300      	str	r3, [sp, #0]
    2206:	f44f 72a0 	mov.w	r2, #320	; 0x140
    220a:	4b13      	ldr	r3, [pc, #76]	; (2258 <_Cstart+0xe4>)
    220c:	4630      	mov	r0, r6
    220e:	f000 fba1 	bl	2954 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2212:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
    2214:	60e6      	str	r6, [r4, #12]
    2216:	f023 0304 	bic.w	r3, r3, #4
    221a:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
    221c:	4b0f      	ldr	r3, [pc, #60]	; (225c <_Cstart+0xe8>)
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    221e:	60a5      	str	r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
    2220:	e9c4 3305 	strd	r3, r3, [r4, #20]
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    2224:	4a08      	ldr	r2, [pc, #32]	; (2248 <_Cstart+0xd4>)
    2226:	4b0e      	ldr	r3, [pc, #56]	; (2260 <_Cstart+0xec>)
    2228:	4c0e      	ldr	r4, [pc, #56]	; (2264 <_Cstart+0xf0>)
    222a:	f383 8809 	msr	PSP, r3
    222e:	2100      	movs	r1, #0
    2230:	f381 8811 	msr	BASEPRI, r1
    2234:	4610      	mov	r0, r2
    2236:	4720      	bx	r4
    2238:	20001350 	.word	0x20001350
    223c:	e000ed00 	.word	0xe000ed00
    2240:	200004b4 	.word	0x200004b4
    2244:	200005d4 	.word	0x200005d4
    2248:	00002145 	.word	0x00002145
    224c:	20000610 	.word	0x20000610
    2250:	20000444 	.word	0x20000444
    2254:	20000a10 	.word	0x20000a10
    2258:	000020d1 	.word	0x000020d1
    225c:	200005e8 	.word	0x200005e8
    2260:	20000a10 	.word	0x20000a10
    2264:	0000080d 	.word	0x0000080d

00002268 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2268:	e9d0 2300 	ldrd	r2, r3, [r0]
    226c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    226e:	6802      	ldr	r2, [r0, #0]
    2270:	6053      	str	r3, [r2, #4]
}
    2272:	4770      	bx	lr

00002274 <k_spin_lock.isra.11>:
    2274:	f04f 0320 	mov.w	r3, #32
    2278:	f3ef 8011 	mrs	r0, BASEPRI
    227c:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    2280:	4770      	bx	lr
	...

00002284 <update_cache>:
	return list->head == list;
    2284:	4b0d      	ldr	r3, [pc, #52]	; (22bc <update_cache+0x38>)
    2286:	461a      	mov	r2, r3
    2288:	f852 1f24 	ldr.w	r1, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    228c:	4291      	cmp	r1, r2
    228e:	d000      	beq.n	2292 <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
    2290:	b901      	cbnz	r1, 2294 <update_cache+0x10>
    2292:	68d9      	ldr	r1, [r3, #12]
	if (preempt_ok) {
    2294:	b970      	cbnz	r0, 22b4 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
    2296:	689a      	ldr	r2, [r3, #8]
    2298:	b162      	cbz	r2, 22b4 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
    229a:	7a50      	ldrb	r0, [r2, #9]
    229c:	06c0      	lsls	r0, r0, #27
    229e:	d109      	bne.n	22b4 <update_cache+0x30>
    22a0:	6a50      	ldr	r0, [r2, #36]	; 0x24
    22a2:	3001      	adds	r0, #1
    22a4:	d106      	bne.n	22b4 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
    22a6:	8950      	ldrh	r0, [r2, #10]
    22a8:	287f      	cmp	r0, #127	; 0x7f
    22aa:	d903      	bls.n	22b4 <update_cache+0x30>
	return thread == _idle_thread;
    22ac:	4804      	ldr	r0, [pc, #16]	; (22c0 <update_cache+0x3c>)
	if (_is_idle(_current)) {
    22ae:	6800      	ldr	r0, [r0, #0]
    22b0:	4282      	cmp	r2, r0
    22b2:	d101      	bne.n	22b8 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
    22b4:	6219      	str	r1, [r3, #32]
    22b6:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
    22b8:	621a      	str	r2, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    22ba:	4770      	bx	lr
    22bc:	200005d4 	.word	0x200005d4
    22c0:	000030e8 	.word	0x000030e8

000022c4 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    22c4:	b510      	push	{r4, lr}
    22c6:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    22c8:	f7ff ffd4 	bl	2274 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
    22cc:	7a4b      	ldrb	r3, [r1, #9]
    22ce:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
    22d0:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    22d2:	d50d      	bpl.n	22f0 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    22d4:	4608      	mov	r0, r1
    22d6:	f7ff ffc7 	bl	2268 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    22da:	7a4b      	ldrb	r3, [r1, #9]
    22dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    22e0:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
    22e2:	4b05      	ldr	r3, [pc, #20]	; (22f8 <_remove_thread_from_ready_q+0x34>)
    22e4:	6898      	ldr	r0, [r3, #8]
    22e6:	1a43      	subs	r3, r0, r1
    22e8:	4258      	negs	r0, r3
    22ea:	4158      	adcs	r0, r3
    22ec:	f7ff ffca 	bl	2284 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    22f0:	f384 8811 	msr	BASEPRI, r4
}
    22f4:	bd10      	pop	{r4, pc}
    22f6:	bf00      	nop
    22f8:	200005d4 	.word	0x200005d4

000022fc <_unpend_thread_no_timeout>:
{
    22fc:	b510      	push	{r4, lr}
    22fe:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    2300:	f7ff ffb8 	bl	2274 <k_spin_lock.isra.11>
    2304:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    2306:	4608      	mov	r0, r1
    2308:	f7ff ffae 	bl	2268 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    230c:	7a4b      	ldrb	r3, [r1, #9]
    230e:	f023 0302 	bic.w	r3, r3, #2
    2312:	724b      	strb	r3, [r1, #9]
    2314:	f384 8811 	msr	BASEPRI, r4
}
    2318:	bd10      	pop	{r4, pc}
	...

0000231c <_reschedule>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    231c:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    2320:	2b0d      	cmp	r3, #13
    2322:	d80e      	bhi.n	2342 <_reschedule+0x26>
    2324:	b11b      	cbz	r3, 232e <_reschedule+0x12>
    2326:	4b09      	ldr	r3, [pc, #36]	; (234c <_reschedule+0x30>)
    2328:	685b      	ldr	r3, [r3, #4]
    232a:	051b      	lsls	r3, r3, #20
    232c:	d509      	bpl.n	2342 <_reschedule+0x26>
	if (_get_next_ready_thread() != _current) {
    232e:	4b08      	ldr	r3, [pc, #32]	; (2350 <_reschedule+0x34>)
    2330:	689a      	ldr	r2, [r3, #8]
    2332:	6a1b      	ldr	r3, [r3, #32]
    2334:	429a      	cmp	r2, r3
    2336:	d004      	beq.n	2342 <_reschedule+0x26>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    2338:	4b06      	ldr	r3, [pc, #24]	; (2354 <_reschedule+0x38>)
    233a:	2200      	movs	r2, #0
    233c:	601a      	str	r2, [r3, #0]
    233e:	f7ff b87f 	b.w	1440 <__swap>
    2342:	f380 8811 	msr	BASEPRI, r0
}
    2346:	2000      	movs	r0, #0
    2348:	4770      	bx	lr
    234a:	bf00      	nop
    234c:	e000ed00 	.word	0xe000ed00
    2350:	200005d4 	.word	0x200005d4
    2354:	20000604 	.word	0x20000604

00002358 <k_sched_unlock>:
{
    2358:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
    235a:	f7ff ff8b 	bl	2274 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
    235e:	4b0a      	ldr	r3, [pc, #40]	; (2388 <k_sched_unlock+0x30>)
    2360:	689a      	ldr	r2, [r3, #8]
    2362:	7ad3      	ldrb	r3, [r2, #11]
    2364:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    2366:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    2368:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
    236a:	2001      	movs	r0, #1
    236c:	f7ff ff8a 	bl	2284 <update_cache>
    2370:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    2374:	f04f 0320 	mov.w	r3, #32
    2378:	f3ef 8011 	mrs	r0, BASEPRI
    237c:	f383 8811 	msr	BASEPRI, r3
}
    2380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    2384:	f7ff bfca 	b.w	231c <_reschedule>
    2388:	200005d4 	.word	0x200005d4

0000238c <_priq_dumb_add>:
	return list->head == list;
    238c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    238e:	4298      	cmp	r0, r3
{
    2390:	b510      	push	{r4, lr}
    2392:	d013      	beq.n	23bc <_priq_dumb_add+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2394:	b193      	cbz	r3, 23bc <_priq_dumb_add+0x30>
	if (t1->base.prio < t2->base.prio) {
    2396:	f991 200a 	ldrsb.w	r2, [r1, #10]
    239a:	f993 400a 	ldrsb.w	r4, [r3, #10]
    239e:	4294      	cmp	r4, r2
    23a0:	dd06      	ble.n	23b0 <_priq_dumb_add+0x24>
		node->prev = insert_point->prev;
    23a2:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    23a4:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    23a8:	685a      	ldr	r2, [r3, #4]
    23aa:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    23ac:	6059      	str	r1, [r3, #4]
}
    23ae:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
    23b0:	6844      	ldr	r4, [r0, #4]
    23b2:	42a3      	cmp	r3, r4
    23b4:	d002      	beq.n	23bc <_priq_dumb_add+0x30>
    23b6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23b8:	2b00      	cmp	r3, #0
    23ba:	d1ee      	bne.n	239a <_priq_dumb_add+0xe>
	node->prev = list->tail;
    23bc:	6843      	ldr	r3, [r0, #4]
    23be:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    23c0:	6843      	ldr	r3, [r0, #4]
	node->next = list;
    23c2:	6008      	str	r0, [r1, #0]
	list->tail->next = node;
    23c4:	6019      	str	r1, [r3, #0]
	list->tail = node;
    23c6:	6041      	str	r1, [r0, #4]
    23c8:	e7f1      	b.n	23ae <_priq_dumb_add+0x22>
	...

000023cc <_add_thread_to_ready_q>:
{
    23cc:	b538      	push	{r3, r4, r5, lr}
    23ce:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    23d0:	f7ff ff50 	bl	2274 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    23d4:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    23d6:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    23d8:	4806      	ldr	r0, [pc, #24]	; (23f4 <_add_thread_to_ready_q+0x28>)
    23da:	f7ff ffd7 	bl	238c <_priq_dumb_add>
	thread->base.thread_state |= states;
    23de:	7a63      	ldrb	r3, [r4, #9]
    23e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23e4:	7263      	strb	r3, [r4, #9]
		update_cache(0);
    23e6:	2000      	movs	r0, #0
    23e8:	f7ff ff4c 	bl	2284 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    23ec:	f385 8811 	msr	BASEPRI, r5
}
    23f0:	bd38      	pop	{r3, r4, r5, pc}
    23f2:	bf00      	nop
    23f4:	200005f8 	.word	0x200005f8

000023f8 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
    23f8:	7a42      	ldrb	r2, [r0, #9]
    23fa:	06d2      	lsls	r2, r2, #27
    23fc:	d104      	bne.n	2408 <_ready_thread+0x10>
    23fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2400:	3301      	adds	r3, #1
    2402:	d101      	bne.n	2408 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    2404:	f7ff bfe2 	b.w	23cc <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
    2408:	4770      	bx	lr
	...

0000240c <_add_timeout>:
{
    240c:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    240e:	610b      	str	r3, [r1, #16]
{
    2410:	4604      	mov	r4, r0
    2412:	461d      	mov	r5, r3
	timeout->wait_q = (sys_dlist_t *)wait_q;
    2414:	e9c1 0202 	strd	r0, r2, [r1, #8]
	if (!timeout_in_ticks) {
    2418:	bb0b      	cbnz	r3, 245e <_add_timeout+0x52>
	__asm__ volatile(
    241a:	f04f 0320 	mov.w	r3, #32
    241e:	f3ef 8611 	mrs	r6, BASEPRI
    2422:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
    2426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    242a:	610b      	str	r3, [r1, #16]
	if (thread) {
    242c:	b170      	cbz	r0, 244c <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    242e:	68cb      	ldr	r3, [r1, #12]
    2430:	b113      	cbz	r3, 2438 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
    2432:	f7ff ff63 	bl	22fc <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    2436:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2438:	7a63      	ldrb	r3, [r4, #9]
    243a:	f023 0304 	bic.w	r3, r3, #4
    243e:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
    2440:	4620      	mov	r0, r4
    2442:	f7ff ffd9 	bl	23f8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2446:	f386 8811 	msr	BASEPRI, r6
}
    244a:	bd70      	pop	{r4, r5, r6, pc}
    244c:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
    2450:	694b      	ldr	r3, [r1, #20]
    2452:	2b00      	cmp	r3, #0
    2454:	d0f9      	beq.n	244a <_add_timeout+0x3e>
			timeout->func(timeout);
    2456:	4608      	mov	r0, r1
}
    2458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    245c:	4718      	bx	r3
	return list->head == list;
    245e:	4a11      	ldr	r2, [pc, #68]	; (24a4 <_add_timeout+0x98>)
    2460:	e9d2 3605 	ldrd	r3, r6, [r2, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2464:	f102 0014 	add.w	r0, r2, #20
    2468:	4283      	cmp	r3, r0
    246a:	4605      	mov	r5, r0
    246c:	d013      	beq.n	2496 <_add_timeout+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    246e:	b193      	cbz	r3, 2496 <_add_timeout+0x8a>
		if (*delta <= in_q->delta_ticks_from_prev) {
    2470:	6908      	ldr	r0, [r1, #16]
    2472:	691c      	ldr	r4, [r3, #16]
    2474:	42a0      	cmp	r0, r4
    2476:	dc08      	bgt.n	248a <_add_timeout+0x7e>
		node->prev = insert_point->prev;
    2478:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    247a:	1a20      	subs	r0, r4, r0
    247c:	6118      	str	r0, [r3, #16]
		node->next = insert_point;
    247e:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    2482:	685a      	ldr	r2, [r3, #4]
    2484:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    2486:	6059      	str	r1, [r3, #4]
    2488:	e7df      	b.n	244a <_add_timeout+0x3e>
		*delta -= in_q->delta_ticks_from_prev;
    248a:	1b00      	subs	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
    248c:	42b3      	cmp	r3, r6
    248e:	6108      	str	r0, [r1, #16]
    2490:	d001      	beq.n	2496 <_add_timeout+0x8a>
    2492:	681b      	ldr	r3, [r3, #0]
    2494:	e7eb      	b.n	246e <_add_timeout+0x62>
	node->prev = list->tail;
    2496:	e9c1 5600 	strd	r5, r6, [r1]
	list->tail->next = node;
    249a:	6993      	ldr	r3, [r2, #24]
    249c:	6019      	str	r1, [r3, #0]
	list->tail = node;
    249e:	6191      	str	r1, [r2, #24]
    24a0:	e7d3      	b.n	244a <_add_timeout+0x3e>
    24a2:	bf00      	nop
    24a4:	200005d4 	.word	0x200005d4

000024a8 <_move_thread_to_end_of_prio_q>:
{
    24a8:	b538      	push	{r3, r4, r5, lr}
    24aa:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    24ac:	f7ff fee2 	bl	2274 <k_spin_lock.isra.11>
    24b0:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    24b2:	4620      	mov	r0, r4
    24b4:	f7ff fed8 	bl	2268 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    24b8:	4621      	mov	r1, r4
    24ba:	4806      	ldr	r0, [pc, #24]	; (24d4 <_move_thread_to_end_of_prio_q+0x2c>)
    24bc:	f7ff ff66 	bl	238c <_priq_dumb_add>
	thread->base.thread_state |= states;
    24c0:	7a63      	ldrb	r3, [r4, #9]
    24c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24c6:	7263      	strb	r3, [r4, #9]
		update_cache(0);
    24c8:	2000      	movs	r0, #0
    24ca:	f7ff fedb 	bl	2284 <update_cache>
    24ce:	f385 8811 	msr	BASEPRI, r5
}
    24d2:	bd38      	pop	{r3, r4, r5, pc}
    24d4:	200005f8 	.word	0x200005f8

000024d8 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    24d8:	4b13      	ldr	r3, [pc, #76]	; (2528 <_is_thread_time_slicing+0x50>)
    24da:	681b      	ldr	r3, [r3, #0]
    24dc:	2b00      	cmp	r3, #0
{
    24de:	b510      	push	{r4, lr}
    24e0:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    24e2:	dd1f      	ble.n	2524 <_is_thread_time_slicing+0x4c>
    24e4:	8943      	ldrh	r3, [r0, #10]
    24e6:	2b7f      	cmp	r3, #127	; 0x7f
    24e8:	d81c      	bhi.n	2524 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    24ea:	4b10      	ldr	r3, [pc, #64]	; (252c <_is_thread_time_slicing+0x54>)
    24ec:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    24f0:	681b      	ldr	r3, [r3, #0]
    24f2:	4299      	cmp	r1, r3
    24f4:	db16      	blt.n	2524 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
    24f6:	f7ff febd 	bl	2274 <k_spin_lock.isra.11>
	return list->head == list;
    24fa:	490d      	ldr	r1, [pc, #52]	; (2530 <_is_thread_time_slicing+0x58>)
    24fc:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2500:	428b      	cmp	r3, r1
    2502:	4604      	mov	r4, r0
    2504:	d00a      	beq.n	251c <_is_thread_time_slicing+0x44>
		if (next) {
    2506:	b15b      	cbz	r3, 2520 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
    2508:	f992 000a 	ldrsb.w	r0, [r2, #10]
    250c:	f993 300a 	ldrsb.w	r3, [r3, #10]
    2510:	1ac3      	subs	r3, r0, r3
    2512:	4258      	negs	r0, r3
    2514:	4158      	adcs	r0, r3
    2516:	f384 8811 	msr	BASEPRI, r4
}
    251a:	bd10      	pop	{r4, pc}
	int ret = 0;
    251c:	2000      	movs	r0, #0
    251e:	e7fa      	b.n	2516 <_is_thread_time_slicing+0x3e>
    2520:	4618      	mov	r0, r3
    2522:	e7f8      	b.n	2516 <_is_thread_time_slicing+0x3e>
		return 0;
    2524:	2000      	movs	r0, #0
    2526:	e7f8      	b.n	251a <_is_thread_time_slicing+0x42>
    2528:	20000524 	.word	0x20000524
    252c:	20000528 	.word	0x20000528
    2530:	200005d4 	.word	0x200005d4

00002534 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    2534:	4b01      	ldr	r3, [pc, #4]	; (253c <_update_time_slice_before_swap+0x8>)
    2536:	2200      	movs	r2, #0
    2538:	601a      	str	r2, [r3, #0]
}
    253a:	4770      	bx	lr
    253c:	20000604 	.word	0x20000604

00002540 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    2540:	4b02      	ldr	r3, [pc, #8]	; (254c <_sched_init+0xc>)
    2542:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
    2546:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
#ifdef CONFIG_SCHED_MULTIQ
	for (int i = 0; i < ARRAY_SIZE(_kernel.ready_q.runq.queues); i++) {
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif
}
    254a:	4770      	bx	lr
    254c:	200005d4 	.word	0x200005d4

00002550 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    2550:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    2552:	4c14      	ldr	r4, [pc, #80]	; (25a4 <_impl_k_yield+0x54>)
    2554:	4b14      	ldr	r3, [pc, #80]	; (25a8 <_impl_k_yield+0x58>)
    2556:	68a2      	ldr	r2, [r4, #8]
    2558:	681b      	ldr	r3, [r3, #0]
    255a:	429a      	cmp	r2, r3
    255c:	d00f      	beq.n	257e <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
    255e:	f7ff fe89 	bl	2274 <k_spin_lock.isra.11>
    2562:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    2564:	68a0      	ldr	r0, [r4, #8]
    2566:	f7ff fe7f 	bl	2268 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
    256a:	68a1      	ldr	r1, [r4, #8]
    256c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2570:	f7ff ff0c 	bl	238c <_priq_dumb_add>
			update_cache(1);
    2574:	2001      	movs	r0, #1
    2576:	f7ff fe85 	bl	2284 <update_cache>
    257a:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    257e:	68a2      	ldr	r2, [r4, #8]
    2580:	6a23      	ldr	r3, [r4, #32]
    2582:	429a      	cmp	r2, r3
    2584:	d00c      	beq.n	25a0 <_impl_k_yield+0x50>
	__asm__ volatile(
    2586:	f04f 0320 	mov.w	r3, #32
    258a:	f3ef 8011 	mrs	r0, BASEPRI
    258e:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
    2592:	4b06      	ldr	r3, [pc, #24]	; (25ac <_impl_k_yield+0x5c>)
    2594:	2200      	movs	r2, #0
    2596:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
    2598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    259c:	f7fe bf50 	b.w	1440 <__swap>
    25a0:	bd38      	pop	{r3, r4, r5, pc}
    25a2:	bf00      	nop
    25a4:	200005d4 	.word	0x200005d4
    25a8:	000030e8 	.word	0x000030e8
    25ac:	20000604 	.word	0x20000604

000025b0 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

void _impl_k_sleep(s32_t duration)
{
    25b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    25b2:	b920      	cbnz	r0, 25be <_impl_k_sleep+0xe>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
    25b4:	b003      	add	sp, #12
    25b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    25ba:	f7ff bfc9 	b.w	2550 <_impl_k_yield>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	s64_t ms_ticks_per_sec = (s64_t)ms * sys_clock_ticks_per_sec;

	return (s32_t)ceiling_fraction(ms_ticks_per_sec, MSEC_PER_SEC);
    25be:	2164      	movs	r1, #100	; 0x64
    25c0:	f240 34e7 	movw	r4, #999	; 0x3e7
    25c4:	2500      	movs	r5, #0
    25c6:	fbc1 4500 	smlal	r4, r5, r1, r0
    25ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    25ce:	2300      	movs	r3, #0
    25d0:	4620      	mov	r0, r4
    25d2:	4629      	mov	r1, r5
    25d4:	f7fd fe1e 	bl	214 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    25d8:	3001      	adds	r0, #1
    25da:	9001      	str	r0, [sp, #4]
    25dc:	f04f 0320 	mov.w	r3, #32
    25e0:	f3ef 8511 	mrs	r5, BASEPRI
    25e4:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    25e8:	4c09      	ldr	r4, [pc, #36]	; (2610 <_impl_k_sleep+0x60>)
    25ea:	68a0      	ldr	r0, [r4, #8]
    25ec:	f7ff fe6a 	bl	22c4 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    25f0:	68a0      	ldr	r0, [r4, #8]
    25f2:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    25f4:	f100 0114 	add.w	r1, r0, #20
    25f8:	2200      	movs	r2, #0
    25fa:	f7ff ff07 	bl	240c <_add_timeout>
	_time_slice_elapsed = 0;
    25fe:	4b05      	ldr	r3, [pc, #20]	; (2614 <_impl_k_sleep+0x64>)
    2600:	2200      	movs	r2, #0
    2602:	4628      	mov	r0, r5
    2604:	601a      	str	r2, [r3, #0]
}
    2606:	b003      	add	sp, #12
    2608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    260c:	f7fe bf18 	b.w	1440 <__swap>
    2610:	200005d4 	.word	0x200005d4
    2614:	20000604 	.word	0x20000604

00002618 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    2618:	4b01      	ldr	r3, [pc, #4]	; (2620 <_impl_k_current_get+0x8>)
    261a:	6898      	ldr	r0, [r3, #8]
    261c:	4770      	bx	lr
    261e:	bf00      	nop
    2620:	200005d4 	.word	0x200005d4

00002624 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    2624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2628:	b085      	sub	sp, #20
    262a:	f04f 0320 	mov.w	r3, #32
    262e:	f3ef 8411 	mrs	r4, BASEPRI
    2632:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    2636:	496a      	ldr	r1, [pc, #424]	; (27e0 <_nano_sys_clock_tick_announce+0x1bc>)
    2638:	e9d1 8900 	ldrd	r8, r9, [r1]
    263c:	17c7      	asrs	r7, r0, #31
    263e:	eb18 0200 	adds.w	r2, r8, r0
    2642:	eb49 0307 	adc.w	r3, r9, r7
    2646:	4606      	mov	r6, r0
    2648:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    264c:	f384 8811 	msr	BASEPRI, r4
	list->head = (sys_dnode_t *)list;
    2650:	f10d 0c08 	add.w	ip, sp, #8
	list->tail = (sys_dnode_t *)list;
    2654:	e9cd cc02 	strd	ip, ip, [sp, #8]
	__asm__ volatile(
    2658:	f04f 0320 	mov.w	r3, #32
    265c:	f3ef 8511 	mrs	r5, BASEPRI
    2660:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    2664:	4c5f      	ldr	r4, [pc, #380]	; (27e4 <_nano_sys_clock_tick_announce+0x1c0>)
    2666:	4621      	mov	r1, r4
    2668:	462a      	mov	r2, r5
    266a:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    266e:	428b      	cmp	r3, r1
    2670:	d000      	beq.n	2674 <_nano_sys_clock_tick_announce+0x50>
	if (!next) {
    2672:	bb6b      	cbnz	r3, 26d0 <_nano_sys_clock_tick_announce+0xac>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2674:	f385 8811 	msr	BASEPRI, r5
	if (!_is_thread_time_slicing(_current)) {
    2678:	68a0      	ldr	r0, [r4, #8]
    267a:	f7ff ff2d 	bl	24d8 <_is_thread_time_slicing>
    267e:	b320      	cbz	r0, 26ca <_nano_sys_clock_tick_announce+0xa6>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * sys_clock_hw_cycles_per_tick * MSEC_PER_SEC /
    2680:	4b59      	ldr	r3, [pc, #356]	; (27e8 <_nano_sys_clock_tick_announce+0x1c4>)
    2682:	681a      	ldr	r2, [r3, #0]
    2684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2688:	fb82 8903 	smull	r8, r9, r2, r3
    268c:	fb08 f107 	mul.w	r1, r8, r7
	_time_slice_elapsed += __ticks_to_ms(ticks);
    2690:	4a56      	ldr	r2, [pc, #344]	; (27ec <_nano_sys_clock_tick_announce+0x1c8>)
    2692:	fb06 1309 	mla	r3, r6, r9, r1
    2696:	fba8 6706 	umull	r6, r7, r8, r6
    269a:	441f      	add	r7, r3
    269c:	0bf1      	lsrs	r1, r6, #15
    269e:	6813      	ldr	r3, [r2, #0]
    26a0:	ea41 4147 	orr.w	r1, r1, r7, lsl #17
    26a4:	440b      	add	r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    26a6:	4952      	ldr	r1, [pc, #328]	; (27f0 <_nano_sys_clock_tick_announce+0x1cc>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    26a8:	6013      	str	r3, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    26aa:	6809      	ldr	r1, [r1, #0]
    26ac:	428b      	cmp	r3, r1
    26ae:	db0c      	blt.n	26ca <_nano_sys_clock_tick_announce+0xa6>
		_time_slice_elapsed = 0;
    26b0:	2300      	movs	r3, #0
    26b2:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    26b4:	f04f 0320 	mov.w	r3, #32
    26b8:	f3ef 8511 	mrs	r5, BASEPRI
    26bc:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    26c0:	68a0      	ldr	r0, [r4, #8]
    26c2:	f7ff fef1 	bl	24a8 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    26c6:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    26ca:	b005      	add	sp, #20
    26cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    26d0:	4d48      	ldr	r5, [pc, #288]	; (27f4 <_nano_sys_clock_tick_announce+0x1d0>)
    26d2:	9500      	str	r5, [sp, #0]
    26d4:	2101      	movs	r1, #1
    26d6:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
    26d8:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    26dc:	f06f 0801 	mvn.w	r8, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    26e0:	6919      	ldr	r1, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    26e2:	4281      	cmp	r1, r0
			timeout->delta_ticks_from_prev -= ticks;
    26e4:	bfaa      	itet	ge
    26e6:	eba1 0900 	subge.w	r9, r1, r0
			timeout->delta_ticks_from_prev = 0;
    26ea:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    26ee:	f8c3 9010 	strge.w	r9, [r3, #16]
		ticks -= tmp;
    26f2:	1a40      	subs	r0, r0, r1
	return (node == list->tail) ? NULL : node->next;
    26f4:	69a1      	ldr	r1, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
    26f6:	691d      	ldr	r5, [r3, #16]
    26f8:	4299      	cmp	r1, r3
    26fa:	bf14      	ite	ne
    26fc:	6819      	ldrne	r1, [r3, #0]
    26fe:	2100      	moveq	r1, #0
    2700:	b9d5      	cbnz	r5, 2738 <_nano_sys_clock_tick_announce+0x114>
	node->prev->next = node->next;
    2702:	e9d3 5a00 	ldrd	r5, sl, [r3]
    2706:	f8ca 5000 	str.w	r5, [sl]
	node->next->prev = node->prev;
    270a:	681d      	ldr	r5, [r3, #0]
    270c:	f8c5 a004 	str.w	sl, [r5, #4]
	node->next = list->head;
    2710:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
    2712:	e9c3 5c00 	strd	r5, ip, [r3]
	list->head->prev = node;
    2716:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
    2718:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
    271a:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    271c:	f8c3 8010 	str.w	r8, [r3, #16]
    2720:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    2724:	f04f 0320 	mov.w	r3, #32
    2728:	f3ef 8211 	mrs	r2, BASEPRI
    272c:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    2730:	460b      	mov	r3, r1
    2732:	2900      	cmp	r1, #0
    2734:	d1d4      	bne.n	26e0 <_nano_sys_clock_tick_announce+0xbc>
    2736:	e001      	b.n	273c <_nano_sys_clock_tick_announce+0x118>
		} else if (ticks <= 0) {
    2738:	2800      	cmp	r0, #0
    273a:	dcf1      	bgt.n	2720 <_nano_sys_clock_tick_announce+0xfc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    273c:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    2740:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2742:	4560      	cmp	r0, ip
    2744:	d103      	bne.n	274e <_nano_sys_clock_tick_announce+0x12a>
	_handling_timeouts = 0;
    2746:	9a00      	ldr	r2, [sp, #0]
    2748:	2300      	movs	r3, #0
    274a:	6013      	str	r3, [r2, #0]
    274c:	e794      	b.n	2678 <_nano_sys_clock_tick_announce+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    274e:	2800      	cmp	r0, #0
    2750:	d0f9      	beq.n	2746 <_nano_sys_clock_tick_announce+0x122>
    2752:	f8d0 b000 	ldr.w	fp, [r0]
    2756:	9b03      	ldr	r3, [sp, #12]
	timeout->delta_ticks_from_prev = _INACTIVE;
    2758:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    275c:	4298      	cmp	r0, r3
    275e:	bf08      	it	eq
    2760:	f04f 0b00 	moveq.w	fp, #0
		thread->base.timeout.wait_q = NULL;
    2764:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
    2768:	e9d0 2300 	ldrd	r2, r3, [r0]
    276c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    276e:	6802      	ldr	r2, [r0, #0]
    2770:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    2772:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    2774:	f04f 0220 	mov.w	r2, #32
    2778:	f3ef 8811 	mrs	r8, BASEPRI
    277c:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    2780:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
    2784:	b1fb      	cbz	r3, 27c6 <_nano_sys_clock_tick_announce+0x1a2>
	if (timeout_obj->wait_q) {
    2786:	68c2      	ldr	r2, [r0, #12]
    2788:	b132      	cbz	r2, 2798 <_nano_sys_clock_tick_announce+0x174>
		_unpend_thread_no_timeout(thread);
    278a:	4618      	mov	r0, r3
    278c:	9301      	str	r3, [sp, #4]
    278e:	f7ff fdb5 	bl	22fc <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	f8c3 a020 	str.w	sl, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2798:	7a5a      	ldrb	r2, [r3, #9]
    279a:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    279e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    27a2:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    27a4:	d105      	bne.n	27b2 <_nano_sys_clock_tick_announce+0x18e>
    27a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    27a8:	3201      	adds	r2, #1
    27aa:	d102      	bne.n	27b2 <_nano_sys_clock_tick_announce+0x18e>
		_add_thread_to_ready_q(thread);
    27ac:	4618      	mov	r0, r3
    27ae:	f7ff fe0d 	bl	23cc <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    27b2:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    27b6:	f1bb 0f00 	cmp.w	fp, #0
    27ba:	d0c4      	beq.n	2746 <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
    27bc:	9b03      	ldr	r3, [sp, #12]
    27be:	455b      	cmp	r3, fp
    27c0:	d108      	bne.n	27d4 <_nano_sys_clock_tick_announce+0x1b0>
    27c2:	2300      	movs	r3, #0
    27c4:	e008      	b.n	27d8 <_nano_sys_clock_tick_announce+0x1b4>
    27c6:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
    27ca:	6943      	ldr	r3, [r0, #20]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d0f2      	beq.n	27b6 <_nano_sys_clock_tick_announce+0x192>
			timeout->func(timeout);
    27d0:	4798      	blx	r3
    27d2:	e7f0      	b.n	27b6 <_nano_sys_clock_tick_announce+0x192>
    27d4:	f8db 3000 	ldr.w	r3, [fp]
    27d8:	4658      	mov	r0, fp
    27da:	469b      	mov	fp, r3
    27dc:	e7c4      	b.n	2768 <_nano_sys_clock_tick_announce+0x144>
    27de:	bf00      	nop
    27e0:	20000608 	.word	0x20000608
    27e4:	200005d4 	.word	0x200005d4
    27e8:	20001388 	.word	0x20001388
    27ec:	20000604 	.word	0x20000604
    27f0:	20000524 	.word	0x20000524
    27f4:	20000600 	.word	0x20000600

000027f8 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    27f8:	6903      	ldr	r3, [r0, #16]
    27fa:	1c5a      	adds	r2, r3, #1
    27fc:	d010      	beq.n	2820 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    27fe:	4909      	ldr	r1, [pc, #36]	; (2824 <_abort_timeout+0x2c>)
    2800:	6802      	ldr	r2, [r0, #0]
    2802:	6989      	ldr	r1, [r1, #24]
    2804:	4288      	cmp	r0, r1
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    2806:	bf1e      	ittt	ne
    2808:	6911      	ldrne	r1, [r2, #16]
    280a:	185b      	addne	r3, r3, r1
    280c:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    280e:	6843      	ldr	r3, [r0, #4]
    2810:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    2812:	6802      	ldr	r2, [r0, #0]
    2814:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    2816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    281a:	6103      	str	r3, [r0, #16]
	return 0;
    281c:	2000      	movs	r0, #0
    281e:	4770      	bx	lr
		return _INACTIVE;
    2820:	4618      	mov	r0, r3
}
    2822:	4770      	bx	lr
    2824:	200005d4 	.word	0x200005d4

00002828 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
    2828:	7a42      	ldrb	r2, [r0, #9]
    282a:	06d2      	lsls	r2, r2, #27
    282c:	d104      	bne.n	2838 <_ready_thread+0x10>
    282e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2830:	3301      	adds	r3, #1
    2832:	d101      	bne.n	2838 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    2834:	f7ff bdca 	b.w	23cc <_add_thread_to_ready_q>
}
    2838:	4770      	bx	lr
	...

0000283c <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    283e:	4604      	mov	r4, r0
	return (s32_t)ceiling_fraction(ms_ticks_per_sec, MSEC_PER_SEC);
    2840:	f240 36e7 	movw	r6, #999	; 0x3e7
    2844:	2064      	movs	r0, #100	; 0x64
    2846:	2700      	movs	r7, #0
    2848:	fbc0 6701 	smlal	r6, r7, r0, r1
    284c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2850:	2300      	movs	r3, #0
    2852:	4630      	mov	r0, r6
    2854:	4639      	mov	r1, r7
    2856:	f7fd fcdd 	bl	214 <__aeabi_ldivmod>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    285a:	1c46      	adds	r6, r0, #1
	__asm__ volatile(
    285c:	f04f 0320 	mov.w	r3, #32
    2860:	f3ef 8511 	mrs	r5, BASEPRI
    2864:	f383 8811 	msr	BASEPRI, r3
	timeout->wait_q = (sys_dlist_t *)wait_q;
    2868:	2300      	movs	r3, #0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    286a:	6266      	str	r6, [r4, #36]	; 0x24
	timeout->thread = thread;
    286c:	61e4      	str	r4, [r4, #28]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    286e:	6223      	str	r3, [r4, #32]
	if (!timeout_in_ticks) {
    2870:	b9d6      	cbnz	r6, 28a8 <schedule_new_thread.part.11+0x6c>
    2872:	f04f 0320 	mov.w	r3, #32
    2876:	f3ef 8711 	mrs	r7, BASEPRI
    287a:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
    287e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2882:	6263      	str	r3, [r4, #36]	; 0x24
	if (timeout_obj->wait_q) {
    2884:	6a23      	ldr	r3, [r4, #32]
    2886:	b11b      	cbz	r3, 2890 <schedule_new_thread.part.11+0x54>
		_unpend_thread_no_timeout(thread);
    2888:	4620      	mov	r0, r4
    288a:	f7ff fd37 	bl	22fc <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    288e:	6226      	str	r6, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2890:	7a63      	ldrb	r3, [r4, #9]
    2892:	f023 0304 	bic.w	r3, r3, #4
    2896:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
    2898:	4620      	mov	r0, r4
    289a:	f7ff ffc5 	bl	2828 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    289e:	f387 8811 	msr	BASEPRI, r7
    28a2:	f385 8811 	msr	BASEPRI, r5
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    28a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head == list;
    28a8:	4a11      	ldr	r2, [pc, #68]	; (28f0 <schedule_new_thread.part.11+0xb4>)
    28aa:	e9d2 3c05 	ldrd	r3, ip, [r2, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    28ae:	f102 0114 	add.w	r1, r2, #20
    28b2:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    28b4:	f104 0614 	add.w	r6, r4, #20
    28b8:	460f      	mov	r7, r1
    28ba:	d013      	beq.n	28e4 <schedule_new_thread.part.11+0xa8>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    28bc:	b193      	cbz	r3, 28e4 <schedule_new_thread.part.11+0xa8>
		if (*delta <= in_q->delta_ticks_from_prev) {
    28be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    28c0:	6918      	ldr	r0, [r3, #16]
    28c2:	4281      	cmp	r1, r0
    28c4:	dc08      	bgt.n	28d8 <schedule_new_thread.part.11+0x9c>
		node->prev = insert_point->prev;
    28c6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    28c8:	1a41      	subs	r1, r0, r1
    28ca:	6119      	str	r1, [r3, #16]
		node->next = insert_point;
    28cc:	e9c4 3205 	strd	r3, r2, [r4, #20]
		insert_point->prev->next = node;
    28d0:	685a      	ldr	r2, [r3, #4]
    28d2:	6016      	str	r6, [r2, #0]
		insert_point->prev = node;
    28d4:	605e      	str	r6, [r3, #4]
    28d6:	e7e4      	b.n	28a2 <schedule_new_thread.part.11+0x66>
		*delta -= in_q->delta_ticks_from_prev;
    28d8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    28da:	459c      	cmp	ip, r3
    28dc:	6261      	str	r1, [r4, #36]	; 0x24
    28de:	d001      	beq.n	28e4 <schedule_new_thread.part.11+0xa8>
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	e7eb      	b.n	28bc <schedule_new_thread.part.11+0x80>
	node->prev = list->tail;
    28e4:	e9c4 7c05 	strd	r7, ip, [r4, #20]
	list->tail->next = node;
    28e8:	6993      	ldr	r3, [r2, #24]
    28ea:	601e      	str	r6, [r3, #0]
	list->tail = node;
    28ec:	6196      	str	r6, [r2, #24]
    28ee:	e7d8      	b.n	28a2 <schedule_new_thread.part.11+0x66>
    28f0:	200005d4 	.word	0x200005d4

000028f4 <k_is_in_isr>:
    28f4:	f3ef 8005 	mrs	r0, IPSR
    28f8:	280d      	cmp	r0, #13
    28fa:	d807      	bhi.n	290c <k_is_in_isr+0x18>
    28fc:	b138      	cbz	r0, 290e <k_is_in_isr+0x1a>
    28fe:	4b04      	ldr	r3, [pc, #16]	; (2910 <k_is_in_isr+0x1c>)
    2900:	6858      	ldr	r0, [r3, #4]
    2902:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    2906:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    290a:	4770      	bx	lr
    290c:	2001      	movs	r0, #1
}
    290e:	4770      	bx	lr
    2910:	e000ed00 	.word	0xe000ed00

00002914 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    2914:	4b02      	ldr	r3, [pc, #8]	; (2920 <_is_thread_essential+0xc>)
    2916:	689b      	ldr	r3, [r3, #8]
    2918:	7a18      	ldrb	r0, [r3, #8]
}
    291a:	f000 0001 	and.w	r0, r0, #1
    291e:	4770      	bx	lr
    2920:	200005d4 	.word	0x200005d4

00002924 <_impl_k_thread_start>:
{
    2924:	b510      	push	{r4, lr}
	__asm__ volatile(
    2926:	f04f 0320 	mov.w	r3, #32
    292a:	f3ef 8411 	mrs	r4, BASEPRI
    292e:	f383 8811 	msr	BASEPRI, r3
	if (_has_thread_started(thread)) {
    2932:	7a43      	ldrb	r3, [r0, #9]
    2934:	0759      	lsls	r1, r3, #29
    2936:	d402      	bmi.n	293e <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2938:	f384 8811 	msr	BASEPRI, r4
}
    293c:	bd10      	pop	{r4, pc}
    293e:	f023 0304 	bic.w	r3, r3, #4
    2942:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
    2944:	f7ff ff70 	bl	2828 <_ready_thread>
	_reschedule(key);
    2948:	4620      	mov	r0, r4
}
    294a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    294e:	f7ff bce5 	b.w	231c <_reschedule>
	...

00002954 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    2954:	b530      	push	{r4, r5, lr}
    2956:	b087      	sub	sp, #28
    2958:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    295a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    295c:	9504      	str	r5, [sp, #16]
    295e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    2960:	9503      	str	r5, [sp, #12]
    2962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    2964:	9502      	str	r5, [sp, #8]
    2966:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2968:	9501      	str	r5, [sp, #4]
    296a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    296c:	9500      	str	r5, [sp, #0]
    296e:	f7fe ff31 	bl	17d4 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    2972:	4b04      	ldr	r3, [pc, #16]	; (2984 <_setup_new_thread+0x30>)
    2974:	689b      	ldr	r3, [r3, #8]
    2976:	b913      	cbnz	r3, 297e <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2978:	6663      	str	r3, [r4, #100]	; 0x64
}
    297a:	b007      	add	sp, #28
    297c:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    297e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2980:	e7fa      	b.n	2978 <_setup_new_thread+0x24>
    2982:	bf00      	nop
    2984:	200005d4 	.word	0x200005d4

00002988 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    2988:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
    298a:	b510      	push	{r4, lr}
    298c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    298e:	b103      	cbz	r3, 2992 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    2990:	4798      	blx	r3
	return !(_is_thread_prevented_from_running(thread) ||
    2992:	7a63      	ldrb	r3, [r4, #9]
    2994:	06da      	lsls	r2, r3, #27
    2996:	d10a      	bne.n	29ae <_k_thread_single_abort+0x26>
    2998:	6a62      	ldr	r2, [r4, #36]	; 0x24
    299a:	3201      	adds	r2, #1
    299c:	d107      	bne.n	29ae <_k_thread_single_abort+0x26>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    299e:	4620      	mov	r0, r4
    29a0:	f7ff fc90 	bl	22c4 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    29a4:	7a63      	ldrb	r3, [r4, #9]
    29a6:	f043 0308 	orr.w	r3, r3, #8
    29aa:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    29ac:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    29ae:	079b      	lsls	r3, r3, #30
    29b0:	d502      	bpl.n	29b8 <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
    29b2:	4620      	mov	r0, r4
    29b4:	f7ff fca2 	bl	22fc <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
    29b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    29ba:	3301      	adds	r3, #1
    29bc:	d0f2      	beq.n	29a4 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    29be:	f104 0014 	add.w	r0, r4, #20
    29c2:	f7ff ff19 	bl	27f8 <_abort_timeout>
    29c6:	e7ed      	b.n	29a4 <_k_thread_single_abort+0x1c>

000029c8 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    29ca:	4f21      	ldr	r7, [pc, #132]	; (2a50 <_init_static_threads+0x88>)
    29cc:	4d21      	ldr	r5, [pc, #132]	; (2a54 <_init_static_threads+0x8c>)
{
    29ce:	b087      	sub	sp, #28
    29d0:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    29d2:	42bd      	cmp	r5, r7
    29d4:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    29d8:	d314      	bcc.n	2a04 <_init_static_threads+0x3c>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    29da:	4b1f      	ldr	r3, [pc, #124]	; (2a58 <_init_static_threads+0x90>)
    29dc:	689a      	ldr	r2, [r3, #8]
    29de:	7ad3      	ldrb	r3, [r2, #11]
    29e0:	3b01      	subs	r3, #1
    29e2:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    29e4:	f04f 0320 	mov.w	r3, #32
    29e8:	f3ef 8511 	mrs	r5, BASEPRI
    29ec:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    29f0:	4c18      	ldr	r4, [pc, #96]	; (2a54 <_init_static_threads+0x8c>)
    29f2:	42b4      	cmp	r4, r6
    29f4:	d320      	bcc.n	2a38 <_init_static_threads+0x70>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29f6:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    29fa:	b007      	add	sp, #28
    29fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    2a00:	f7ff bcaa 	b.w	2358 <k_sched_unlock>
		_setup_new_thread(
    2a04:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    2a08:	9304      	str	r3, [sp, #16]
    2a0a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2a0e:	9303      	str	r3, [sp, #12]
    2a10:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2a14:	9302      	str	r3, [sp, #8]
    2a16:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2a1a:	9301      	str	r3, [sp, #4]
    2a1c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2a20:	9300      	str	r3, [sp, #0]
    2a22:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    2a26:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    2a2a:	f7ff ff93 	bl	2954 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2a2e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    2a32:	651d      	str	r5, [r3, #80]	; 0x50
    2a34:	4625      	mov	r5, r4
    2a36:	e7cc      	b.n	29d2 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    2a38:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2a3a:	1c4b      	adds	r3, r1, #1
    2a3c:	d003      	beq.n	2a46 <_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    2a3e:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    2a40:	b919      	cbnz	r1, 2a4a <_init_static_threads+0x82>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    2a42:	f7ff ff6f 	bl	2924 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2a46:	342c      	adds	r4, #44	; 0x2c
    2a48:	e7d3      	b.n	29f2 <_init_static_threads+0x2a>
    2a4a:	f7ff fef7 	bl	283c <schedule_new_thread.part.11>
    2a4e:	e7fa      	b.n	2a46 <_init_static_threads+0x7e>
    2a50:	200013ec 	.word	0x200013ec
    2a54:	200013ec 	.word	0x200013ec
    2a58:	200005d4 	.word	0x200005d4

00002a5c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    2a5c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    2a5e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    2a60:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    2a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    2a66:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    2a68:	72c3      	strb	r3, [r0, #11]
	t->wait_q = NULL;
    2a6a:	e9c0 3208 	strd	r3, r2, [r0, #32]
	t->thread = NULL;
    2a6e:	61c3      	str	r3, [r0, #28]
	t->func = func;
    2a70:	6283      	str	r3, [r0, #40]	; 0x28

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    2a72:	4770      	bx	lr

00002a74 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    2a74:	4770      	bx	lr
