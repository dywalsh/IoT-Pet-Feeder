
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

int __weak z_clock_device_ctrl(struct device *device,
				 u32_t ctrl_command, void *context)
{
	return 0;
}
       0:	20001340 	.word	0x20001340
Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *_impl_z_errno(void)
{
	return &_current->errno_var;
}
       4:	000026d1 	.word	0x000026d1
       8:	00002725 	.word	0x00002725
       c:	0000255d 	.word	0x0000255d
      10:	0000255d 	.word	0x0000255d
      14:	0000255d 	.word	0x0000255d
      18:	0000255d 	.word	0x0000255d
      1c:	0000255d 	.word	0x0000255d
      20:	0000255d 	.word	0x0000255d
      24:	0000255d 	.word	0x0000255d
      28:	0000255d 	.word	0x0000255d
      2c:	000021d1 	.word	0x000021d1
      30:	0000255d 	.word	0x0000255d
      34:	0000255d 	.word	0x0000255d
      38:	0000218d 	.word	0x0000218d
      3c:	0000255d 	.word	0x0000255d

00000040 <_irq_vector_table>:
      40:	00002695 00002695 00002695 00002695     .&...&...&...&..
      50:	00002695 00002695 00002695 00002695     .&...&...&...&..
      60:	00002695 00002695 00002695 00002695     .&...&...&...&..
      70:	00002695 00002695 00002695 00002695     .&...&...&...&..
      80:	00002695 00002695 00002695 00002695     .&...&...&...&..
      90:	00002695 00002695 00002695 00002695     .&...&...&...&..
      a0:	00002695 00002695 00002695 00002695     .&...&...&...&..
      b0:	00002695 00002695 00002695 00002695     .&...&...&...&..
      c0:	00002695 00002695 00002695 00002695     .&...&...&...&..
      d0:	00002695 00002695 00002695              .&...&...&..

000000dc <_sw_isr_table>:
      dc:	00000000 00001f09 00000000 000024f1     .............$..
      ec:	00000000 000024f1 00000000 000024f1     .....$.......$..
      fc:	00000000 000024f1 00000000 000024f1     .....$.......$..
     10c:	00000000 0000385d 20001da0 00003679     ....]8..... y6..
     11c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     12c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     13c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     14c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     15c:	00000000 000024f1 00000000 00002045     .....$......E ..
     16c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     17c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     18c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     19c:	00000000 000024f1 00000000 000024f1     .....$.......$..
     1ac:	00000000 000024f1 00000000 000024f1     .....$.......$..
     1bc:	00000000 000024f1 00000000 000024f1     .....$.......$..
     1cc:	00000000 000024f1 00000000 000024f1     .....$.......$..
     1dc:	00000000 000024f1 00000000 000024f1     .....$.......$..
     1ec:	00000000 000024f1 00000000 000024f1     .....$.......$..
     1fc:	00000000 000024f1 00000000 000024f1     .....$.......$..
     20c:	00000000 000024f1                       .....$..

00000214 <__aeabi_ldivmod>:
     214:	b97b      	cbnz	r3, 236 <__aeabi_ldivmod+0x22>
     216:	b972      	cbnz	r2, 236 <__aeabi_ldivmod+0x22>
     218:	2900      	cmp	r1, #0
     21a:	bfbe      	ittt	lt
     21c:	2000      	movlt	r0, #0
     21e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     222:	e006      	blt.n	232 <__aeabi_ldivmod+0x1e>
     224:	bf08      	it	eq
     226:	2800      	cmpeq	r0, #0
     228:	bf1c      	itt	ne
     22a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     22e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     232:	f000 b9bd 	b.w	5b0 <__aeabi_idiv0>
     236:	f1ad 0c08 	sub.w	ip, sp, #8
     23a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     23e:	2900      	cmp	r1, #0
     240:	db09      	blt.n	256 <__aeabi_ldivmod+0x42>
     242:	2b00      	cmp	r3, #0
     244:	db1a      	blt.n	27c <__aeabi_ldivmod+0x68>
     246:	f000 f84d 	bl	2e4 <__udivmoddi4>
     24a:	f8dd e004 	ldr.w	lr, [sp, #4]
     24e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     252:	b004      	add	sp, #16
     254:	4770      	bx	lr
     256:	4240      	negs	r0, r0
     258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     25c:	2b00      	cmp	r3, #0
     25e:	db1b      	blt.n	298 <__aeabi_ldivmod+0x84>
     260:	f000 f840 	bl	2e4 <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	4252      	negs	r2, r2
     276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     27a:	4770      	bx	lr
     27c:	4252      	negs	r2, r2
     27e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     282:	f000 f82f 	bl	2e4 <__udivmoddi4>
     286:	f8dd e004 	ldr.w	lr, [sp, #4]
     28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     28e:	b004      	add	sp, #16
     290:	4240      	negs	r0, r0
     292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     296:	4770      	bx	lr
     298:	4252      	negs	r2, r2
     29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29e:	f000 f821 	bl	2e4 <__udivmoddi4>
     2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2aa:	b004      	add	sp, #16
     2ac:	4252      	negs	r2, r2
     2ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b2:	4770      	bx	lr

000002b4 <__aeabi_uldivmod>:
     2b4:	b953      	cbnz	r3, 2cc <__aeabi_uldivmod+0x18>
     2b6:	b94a      	cbnz	r2, 2cc <__aeabi_uldivmod+0x18>
     2b8:	2900      	cmp	r1, #0
     2ba:	bf08      	it	eq
     2bc:	2800      	cmpeq	r0, #0
     2be:	bf1c      	itt	ne
     2c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2c8:	f000 b972 	b.w	5b0 <__aeabi_idiv0>
     2cc:	f1ad 0c08 	sub.w	ip, sp, #8
     2d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2d4:	f000 f806 	bl	2e4 <__udivmoddi4>
     2d8:	f8dd e004 	ldr.w	lr, [sp, #4]
     2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2e0:	b004      	add	sp, #16
     2e2:	4770      	bx	lr

000002e4 <__udivmoddi4>:
     2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2e8:	9e08      	ldr	r6, [sp, #32]
     2ea:	4604      	mov	r4, r0
     2ec:	4688      	mov	r8, r1
     2ee:	2b00      	cmp	r3, #0
     2f0:	d14b      	bne.n	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     2f2:	428a      	cmp	r2, r1
     2f4:	4615      	mov	r5, r2
     2f6:	d967      	bls.n	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
     2f8:	fab2 f282 	clz	r2, r2
     2fc:	b14a      	cbz	r2, 312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     2fe:	f1c2 0720 	rsb	r7, r2, #32
     302:	fa01 f302 	lsl.w	r3, r1, r2
     306:	fa20 f707 	lsr.w	r7, r0, r7
     30a:	4095      	lsls	r5, r2
     30c:	ea47 0803 	orr.w	r8, r7, r3
     310:	4094      	lsls	r4, r2
     312:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     316:	0c23      	lsrs	r3, r4, #16
     318:	fbb8 f7fe 	udiv	r7, r8, lr
     31c:	fa1f fc85 	uxth.w	ip, r5
     320:	fb0e 8817 	mls	r8, lr, r7, r8
     324:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     328:	fb07 f10c 	mul.w	r1, r7, ip
     32c:	4299      	cmp	r1, r3
     32e:	d909      	bls.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     330:	18eb      	adds	r3, r5, r3
     332:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     336:	f080 811b 	bcs.w	570 <CONFIG_LOG_BUFFER_SIZE+0x170>
     33a:	4299      	cmp	r1, r3
     33c:	f240 8118 	bls.w	570 <CONFIG_LOG_BUFFER_SIZE+0x170>
     340:	3f02      	subs	r7, #2
     342:	442b      	add	r3, r5
     344:	1a5b      	subs	r3, r3, r1
     346:	b2a4      	uxth	r4, r4
     348:	fbb3 f0fe 	udiv	r0, r3, lr
     34c:	fb0e 3310 	mls	r3, lr, r0, r3
     350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     354:	fb00 fc0c 	mul.w	ip, r0, ip
     358:	45a4      	cmp	ip, r4
     35a:	d909      	bls.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     35c:	192c      	adds	r4, r5, r4
     35e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     362:	f080 8107 	bcs.w	574 <CONFIG_LOG_BUFFER_SIZE+0x174>
     366:	45a4      	cmp	ip, r4
     368:	f240 8104 	bls.w	574 <CONFIG_LOG_BUFFER_SIZE+0x174>
     36c:	3802      	subs	r0, #2
     36e:	442c      	add	r4, r5
     370:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     374:	eba4 040c 	sub.w	r4, r4, ip
     378:	2700      	movs	r7, #0
     37a:	b11e      	cbz	r6, 384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     37c:	40d4      	lsrs	r4, r2
     37e:	2300      	movs	r3, #0
     380:	e9c6 4300 	strd	r4, r3, [r6]
     384:	4639      	mov	r1, r7
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	428b      	cmp	r3, r1
     38c:	d909      	bls.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     38e:	2e00      	cmp	r6, #0
     390:	f000 80eb 	beq.w	56a <CONFIG_LOG_BUFFER_SIZE+0x16a>
     394:	2700      	movs	r7, #0
     396:	e9c6 0100 	strd	r0, r1, [r6]
     39a:	4638      	mov	r0, r7
     39c:	4639      	mov	r1, r7
     39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3a2:	fab3 f783 	clz	r7, r3
     3a6:	2f00      	cmp	r7, #0
     3a8:	d147      	bne.n	43a <CONFIG_LOG_BUFFER_SIZE+0x3a>
     3aa:	428b      	cmp	r3, r1
     3ac:	d302      	bcc.n	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     3ae:	4282      	cmp	r2, r0
     3b0:	f200 80fa 	bhi.w	5a8 <CONFIG_LOG_BUFFER_SIZE+0x1a8>
     3b4:	1a84      	subs	r4, r0, r2
     3b6:	eb61 0303 	sbc.w	r3, r1, r3
     3ba:	2001      	movs	r0, #1
     3bc:	4698      	mov	r8, r3
     3be:	2e00      	cmp	r6, #0
     3c0:	d0e0      	beq.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c2:	e9c6 4800 	strd	r4, r8, [r6]
     3c6:	e7dd      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     3c8:	b902      	cbnz	r2, 3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     3ca:	deff      	udf	#255	; 0xff
     3cc:	fab2 f282 	clz	r2, r2
     3d0:	2a00      	cmp	r2, #0
     3d2:	f040 808f 	bne.w	4f4 <CONFIG_LOG_BUFFER_SIZE+0xf4>
     3d6:	1b49      	subs	r1, r1, r5
     3d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3dc:	fa1f f885 	uxth.w	r8, r5
     3e0:	2701      	movs	r7, #1
     3e2:	fbb1 fcfe 	udiv	ip, r1, lr
     3e6:	0c23      	lsrs	r3, r4, #16
     3e8:	fb0e 111c 	mls	r1, lr, ip, r1
     3ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3f0:	fb08 f10c 	mul.w	r1, r8, ip
     3f4:	4299      	cmp	r1, r3
     3f6:	d907      	bls.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
     3f8:	18eb      	adds	r3, r5, r3
     3fa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     3fe:	d202      	bcs.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     400:	4299      	cmp	r1, r3
     402:	f200 80cd 	bhi.w	5a0 <CONFIG_LOG_BUFFER_SIZE+0x1a0>
     406:	4684      	mov	ip, r0
     408:	1a59      	subs	r1, r3, r1
     40a:	b2a3      	uxth	r3, r4
     40c:	fbb1 f0fe 	udiv	r0, r1, lr
     410:	fb0e 1410 	mls	r4, lr, r0, r1
     414:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     418:	fb08 f800 	mul.w	r8, r8, r0
     41c:	45a0      	cmp	r8, r4
     41e:	d907      	bls.n	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
     420:	192c      	adds	r4, r5, r4
     422:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     426:	d202      	bcs.n	42e <CONFIG_LOG_BUFFER_SIZE+0x2e>
     428:	45a0      	cmp	r8, r4
     42a:	f200 80b6 	bhi.w	59a <CONFIG_LOG_BUFFER_SIZE+0x19a>
     42e:	4618      	mov	r0, r3
     430:	eba4 0408 	sub.w	r4, r4, r8
     434:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     438:	e79f      	b.n	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     43a:	f1c7 0c20 	rsb	ip, r7, #32
     43e:	40bb      	lsls	r3, r7
     440:	fa22 fe0c 	lsr.w	lr, r2, ip
     444:	ea4e 0e03 	orr.w	lr, lr, r3
     448:	fa01 f407 	lsl.w	r4, r1, r7
     44c:	fa20 f50c 	lsr.w	r5, r0, ip
     450:	fa21 f30c 	lsr.w	r3, r1, ip
     454:	ea4f 481e 	mov.w	r8, lr, lsr #16
     458:	4325      	orrs	r5, r4
     45a:	fbb3 f9f8 	udiv	r9, r3, r8
     45e:	0c2c      	lsrs	r4, r5, #16
     460:	fb08 3319 	mls	r3, r8, r9, r3
     464:	fa1f fa8e 	uxth.w	sl, lr
     468:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     46c:	fb09 f40a 	mul.w	r4, r9, sl
     470:	429c      	cmp	r4, r3
     472:	fa02 f207 	lsl.w	r2, r2, r7
     476:	fa00 f107 	lsl.w	r1, r0, r7
     47a:	d90b      	bls.n	494 <CONFIG_LOG_BUFFER_SIZE+0x94>
     47c:	eb1e 0303 	adds.w	r3, lr, r3
     480:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     484:	f080 8087 	bcs.w	596 <CONFIG_LOG_BUFFER_SIZE+0x196>
     488:	429c      	cmp	r4, r3
     48a:	f240 8084 	bls.w	596 <CONFIG_LOG_BUFFER_SIZE+0x196>
     48e:	f1a9 0902 	sub.w	r9, r9, #2
     492:	4473      	add	r3, lr
     494:	1b1b      	subs	r3, r3, r4
     496:	b2ad      	uxth	r5, r5
     498:	fbb3 f0f8 	udiv	r0, r3, r8
     49c:	fb08 3310 	mls	r3, r8, r0, r3
     4a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     4a4:	fb00 fa0a 	mul.w	sl, r0, sl
     4a8:	45a2      	cmp	sl, r4
     4aa:	d908      	bls.n	4be <CONFIG_LOG_BUFFER_SIZE+0xbe>
     4ac:	eb1e 0404 	adds.w	r4, lr, r4
     4b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     4b4:	d26b      	bcs.n	58e <CONFIG_LOG_BUFFER_SIZE+0x18e>
     4b6:	45a2      	cmp	sl, r4
     4b8:	d969      	bls.n	58e <CONFIG_LOG_BUFFER_SIZE+0x18e>
     4ba:	3802      	subs	r0, #2
     4bc:	4474      	add	r4, lr
     4be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4c2:	fba0 8902 	umull	r8, r9, r0, r2
     4c6:	eba4 040a 	sub.w	r4, r4, sl
     4ca:	454c      	cmp	r4, r9
     4cc:	46c2      	mov	sl, r8
     4ce:	464b      	mov	r3, r9
     4d0:	d354      	bcc.n	57c <CONFIG_LOG_BUFFER_SIZE+0x17c>
     4d2:	d051      	beq.n	578 <CONFIG_LOG_BUFFER_SIZE+0x178>
     4d4:	2e00      	cmp	r6, #0
     4d6:	d069      	beq.n	5ac <CONFIG_LOG_BUFFER_SIZE+0x1ac>
     4d8:	ebb1 050a 	subs.w	r5, r1, sl
     4dc:	eb64 0403 	sbc.w	r4, r4, r3
     4e0:	fa04 fc0c 	lsl.w	ip, r4, ip
     4e4:	40fd      	lsrs	r5, r7
     4e6:	40fc      	lsrs	r4, r7
     4e8:	ea4c 0505 	orr.w	r5, ip, r5
     4ec:	e9c6 5400 	strd	r5, r4, [r6]
     4f0:	2700      	movs	r7, #0
     4f2:	e747      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     4f4:	f1c2 0320 	rsb	r3, r2, #32
     4f8:	fa20 f703 	lsr.w	r7, r0, r3
     4fc:	4095      	lsls	r5, r2
     4fe:	fa01 f002 	lsl.w	r0, r1, r2
     502:	fa21 f303 	lsr.w	r3, r1, r3
     506:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     50a:	4338      	orrs	r0, r7
     50c:	0c01      	lsrs	r1, r0, #16
     50e:	fbb3 f7fe 	udiv	r7, r3, lr
     512:	fa1f f885 	uxth.w	r8, r5
     516:	fb0e 3317 	mls	r3, lr, r7, r3
     51a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     51e:	fb07 f308 	mul.w	r3, r7, r8
     522:	428b      	cmp	r3, r1
     524:	fa04 f402 	lsl.w	r4, r4, r2
     528:	d907      	bls.n	53a <CONFIG_LOG_BUFFER_SIZE+0x13a>
     52a:	1869      	adds	r1, r5, r1
     52c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     530:	d22f      	bcs.n	592 <CONFIG_LOG_BUFFER_SIZE+0x192>
     532:	428b      	cmp	r3, r1
     534:	d92d      	bls.n	592 <CONFIG_LOG_BUFFER_SIZE+0x192>
     536:	3f02      	subs	r7, #2
     538:	4429      	add	r1, r5
     53a:	1acb      	subs	r3, r1, r3
     53c:	b281      	uxth	r1, r0
     53e:	fbb3 f0fe 	udiv	r0, r3, lr
     542:	fb0e 3310 	mls	r3, lr, r0, r3
     546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     54a:	fb00 f308 	mul.w	r3, r0, r8
     54e:	428b      	cmp	r3, r1
     550:	d907      	bls.n	562 <CONFIG_LOG_BUFFER_SIZE+0x162>
     552:	1869      	adds	r1, r5, r1
     554:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     558:	d217      	bcs.n	58a <CONFIG_LOG_BUFFER_SIZE+0x18a>
     55a:	428b      	cmp	r3, r1
     55c:	d915      	bls.n	58a <CONFIG_LOG_BUFFER_SIZE+0x18a>
     55e:	3802      	subs	r0, #2
     560:	4429      	add	r1, r5
     562:	1ac9      	subs	r1, r1, r3
     564:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     568:	e73b      	b.n	3e2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe2>
     56a:	4637      	mov	r7, r6
     56c:	4630      	mov	r0, r6
     56e:	e709      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     570:	4607      	mov	r7, r0
     572:	e6e7      	b.n	344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>
     574:	4618      	mov	r0, r3
     576:	e6fb      	b.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     578:	4541      	cmp	r1, r8
     57a:	d2ab      	bcs.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     57c:	ebb8 0a02 	subs.w	sl, r8, r2
     580:	eb69 020e 	sbc.w	r2, r9, lr
     584:	3801      	subs	r0, #1
     586:	4613      	mov	r3, r2
     588:	e7a4      	b.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     58a:	4660      	mov	r0, ip
     58c:	e7e9      	b.n	562 <CONFIG_LOG_BUFFER_SIZE+0x162>
     58e:	4618      	mov	r0, r3
     590:	e795      	b.n	4be <CONFIG_LOG_BUFFER_SIZE+0xbe>
     592:	4667      	mov	r7, ip
     594:	e7d1      	b.n	53a <CONFIG_LOG_BUFFER_SIZE+0x13a>
     596:	4681      	mov	r9, r0
     598:	e77c      	b.n	494 <CONFIG_LOG_BUFFER_SIZE+0x94>
     59a:	3802      	subs	r0, #2
     59c:	442c      	add	r4, r5
     59e:	e747      	b.n	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
     5a0:	f1ac 0c02 	sub.w	ip, ip, #2
     5a4:	442b      	add	r3, r5
     5a6:	e72f      	b.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
     5a8:	4638      	mov	r0, r7
     5aa:	e708      	b.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     5ac:	4637      	mov	r7, r6
     5ae:	e6e9      	b.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>

000005b0 <__aeabi_idiv0>:
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop

000005b4 <sample_sensor>:
	return adc_dev;
}


int sample_sensor (int channel_id)
{
     5b4:	b530      	push	{r4, r5, lr}
     5b6:	b087      	sub	sp, #28
     5b8:	4604      	mov	r4, r0
	int ret;

	const struct adc_sequence sequence = {
     5ba:	2214      	movs	r2, #20
     5bc:	2100      	movs	r1, #0
     5be:	a801      	add	r0, sp, #4
     5c0:	f002 f953 	bl	286a <memset>
		.channels    = BIT(channel_id),
     5c4:	2001      	movs	r0, #1
     5c6:	40a0      	lsls	r0, r4
	const struct adc_sequence sequence = {
     5c8:	230c      	movs	r3, #12
     5ca:	9002      	str	r0, [sp, #8]
     5cc:	9304      	str	r3, [sp, #16]
     5ce:	4d1a      	ldr	r5, [pc, #104]	; (638 <sample_sensor+0x84>)
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     5d0:	481a      	ldr	r0, [pc, #104]	; (63c <sample_sensor+0x88>)
	const struct adc_sequence sequence = {
     5d2:	9503      	str	r5, [sp, #12]
     5d4:	230a      	movs	r3, #10
     5d6:	f88d 3014 	strb.w	r3, [sp, #20]
	struct device *adc_dev = device_get_binding(ADC_DEVICE_NAME);
     5da:	f003 fb2b 	bl	3c34 <device_get_binding>
	if (!adc_dev) {
     5de:	4604      	mov	r4, r0
     5e0:	b980      	cbnz	r0, 604 <sample_sensor+0x50>
		printf("Cannot get ADC device");
     5e2:	4817      	ldr	r0, [pc, #92]	; (640 <sample_sensor+0x8c>)
     5e4:	f002 fde6 	bl	31b4 <printf>
static inline int adc_read(struct device *dev,
			   const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api = dev->driver_api;

	return api->read(dev, sequence);
     5e8:	6863      	ldr	r3, [r4, #4]
     5ea:	a901      	add	r1, sp, #4
     5ec:	685b      	ldr	r3, [r3, #4]
     5ee:	4620      	mov	r0, r4
     5f0:	4798      	blx	r3
		return -1;
	}

	ret = adc_read(adc_dev, &sequence);

	if (ret) {
     5f2:	4601      	mov	r1, r0
     5f4:	b110      	cbz	r0, 5fc <sample_sensor+0x48>
		printf("Failed to read ADC with code %d", ret);
     5f6:	4813      	ldr	r0, [pc, #76]	; (644 <sample_sensor+0x90>)
     5f8:	f002 fddc 	bl	31b4 <printf>
	}

	return m_sample_buffer[0];
     5fc:	f9b5 0000 	ldrsh.w	r0, [r5]
}
     600:	b007      	add	sp, #28
     602:	bd30      	pop	{r4, r5, pc}
	return api->channel_setup(dev, channel_cfg);
     604:	6843      	ldr	r3, [r0, #4]
     606:	4910      	ldr	r1, [pc, #64]	; (648 <sample_sensor+0x94>)
     608:	681b      	ldr	r3, [r3, #0]
     60a:	4798      	blx	r3
	if (ret) {
     60c:	4601      	mov	r1, r0
     60e:	b110      	cbz	r0, 616 <sample_sensor+0x62>
		printf("Setting up of the first channel failed with code %d", ret);
     610:	480e      	ldr	r0, [pc, #56]	; (64c <sample_sensor+0x98>)
     612:	f002 fdcf 	bl	31b4 <printf>
     616:	6863      	ldr	r3, [r4, #4]
     618:	490d      	ldr	r1, [pc, #52]	; (650 <sample_sensor+0x9c>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	4620      	mov	r0, r4
     61e:	4798      	blx	r3
	if (ret) {
     620:	4601      	mov	r1, r0
     622:	b110      	cbz	r0, 62a <sample_sensor+0x76>
		printf("Setting up of the second channel failed with code %d", ret);
     624:	480b      	ldr	r0, [pc, #44]	; (654 <sample_sensor+0xa0>)
     626:	f002 fdc5 	bl	31b4 <printf>
	(void)memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
     62a:	220c      	movs	r2, #12
     62c:	2100      	movs	r1, #0
     62e:	4802      	ldr	r0, [pc, #8]	; (638 <sample_sensor+0x84>)
     630:	f002 f91b 	bl	286a <memset>
     634:	e7d8      	b.n	5e8 <sample_sensor+0x34>
     636:	bf00      	nop
     638:	20000000 	.word	0x20000000
     63c:	00004d00 	.word	0x00004d00
     640:	00004d06 	.word	0x00004d06
     644:	00004d85 	.word	0x00004d85
     648:	00004c70 	.word	0x00004c70
     64c:	00004d1c 	.word	0x00004d1c
     650:	00004c78 	.word	0x00004c78
     654:	00004d50 	.word	0x00004d50

00000658 <main>:


void main(void)
{
     658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int sample;
	bool onOff = false;

	printf("Preparing ADC\n");
     65a:	481c      	ldr	r0, [pc, #112]	; (6cc <main+0x74>)

	while (true) {

		// delay between samples
		k_sleep(500);
		printk("\nSampling ... ");
     65c:	4d1c      	ldr	r5, [pc, #112]	; (6d0 <main+0x78>)
		} else if(sample > 370 && sample <= 500){
			printf("Bowl is 1/2 fullish");
		} else if(sample > 500 && sample <= 580){
			printf("Bowl is 3/4 fullish");
		} else{
			printf("Bowl is fullish");
     65e:	4e1d      	ldr	r6, [pc, #116]	; (6d4 <main+0x7c>)
			printf("Bowl is 3/4 fullish");
     660:	4f1d      	ldr	r7, [pc, #116]	; (6d8 <main+0x80>)
	printf("Preparing ADC\n");
     662:	f002 fda7 	bl	31b4 <printf>
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
     666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     66a:	2203      	movs	r2, #3
     66c:	f8c3 2770 	str.w	r2, [r3, #1904]	; 0x770
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
     670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     674:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     678:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     67c:	f003 fef8 	bl	4470 <_impl_k_sleep>
		printk("\nSampling ... ");
     680:	4628      	mov	r0, r5
     682:	f000 f9df 	bl	a44 <printk>
		sample = sample_sensor(ADC_1ST_CHANNEL_ID);
     686:	2000      	movs	r0, #0
     688:	f7ff ff94 	bl	5b4 <sample_sensor>
		if(sample < 200){
     68c:	28c7      	cmp	r0, #199	; 0xc7
		sample = sample_sensor(ADC_1ST_CHANNEL_ID);
     68e:	4604      	mov	r4, r0
		if(sample < 200){
     690:	dc07      	bgt.n	6a2 <main+0x4a>
			printf("Bowl is emptyish");
     692:	4812      	ldr	r0, [pc, #72]	; (6dc <main+0x84>)
			printf("Bowl is fullish");
     694:	f002 fd8e 	bl	31b4 <printf>
			} else{
				nrf_gpio_cfg_output(PIN);
				nrf_gpio_pin_clear(PIN);
			}
		}*/
		printk("%d \n", sample);
     698:	4621      	mov	r1, r4
     69a:	4811      	ldr	r0, [pc, #68]	; (6e0 <main+0x88>)
     69c:	f000 f9d2 	bl	a44 <printk>
		k_sleep(500);
     6a0:	e7ea      	b.n	678 <main+0x20>
		} else if(sample >= 200 && sample <= 370){
     6a2:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
     6a6:	2baa      	cmp	r3, #170	; 0xaa
     6a8:	d801      	bhi.n	6ae <main+0x56>
			printf("Bowl is 1/4 fullish");
     6aa:	480e      	ldr	r0, [pc, #56]	; (6e4 <main+0x8c>)
     6ac:	e7f2      	b.n	694 <main+0x3c>
		} else if(sample > 370 && sample <= 500){
     6ae:	f46f 72b9 	mvn.w	r2, #370	; 0x172
     6b2:	1883      	adds	r3, r0, r2
     6b4:	2b81      	cmp	r3, #129	; 0x81
     6b6:	d801      	bhi.n	6bc <main+0x64>
			printf("Bowl is 1/2 fullish");
     6b8:	480b      	ldr	r0, [pc, #44]	; (6e8 <main+0x90>)
     6ba:	e7eb      	b.n	694 <main+0x3c>
		} else if(sample > 500 && sample <= 580){
     6bc:	f46f 73fa 	mvn.w	r3, #500	; 0x1f4
     6c0:	18c3      	adds	r3, r0, r3
     6c2:	2b4f      	cmp	r3, #79	; 0x4f
			printf("Bowl is 3/4 fullish");
     6c4:	bf94      	ite	ls
     6c6:	4638      	movls	r0, r7
			printf("Bowl is fullish");
     6c8:	4630      	movhi	r0, r6
     6ca:	e7e3      	b.n	694 <main+0x3c>
     6cc:	00004c80 	.word	0x00004c80
     6d0:	00004c8f 	.word	0x00004c8f
     6d4:	00004ceb 	.word	0x00004ceb
     6d8:	00004cd7 	.word	0x00004cd7
     6dc:	00004c9e 	.word	0x00004c9e
     6e0:	00004cfb 	.word	0x00004cfb
     6e4:	00004caf 	.word	0x00004caf
     6e8:	00004cc3 	.word	0x00004cc3

000006ec <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     6ec:	b508      	push	{r3, lr}
     6ee:	4604      	mov	r4, r0
     6f0:	4608      	mov	r0, r1
     6f2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     6f4:	461a      	mov	r2, r3
     6f6:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     6f8:	f003 ff20 	bl	453c <_impl_k_current_get>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     6fc:	f001 ffa6 	bl	264c <_impl_k_thread_abort>

00000700 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     700:	2000      	movs	r0, #0
     702:	4770      	bx	lr

00000704 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     704:	680b      	ldr	r3, [r1, #0]
     706:	3301      	adds	r3, #1
     708:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     70a:	4b01      	ldr	r3, [pc, #4]	; (710 <char_out+0xc>)
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	4718      	bx	r3
     710:	20001c80 	.word	0x20001c80

00000714 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     718:	b085      	sub	sp, #20
     71a:	469b      	mov	fp, r3
     71c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     71e:	f8df a090 	ldr.w	sl, [pc, #144]	; 7b0 <_printk_dec_ulong+0x9c>
     722:	2c01      	cmp	r4, #1
     724:	bfb8      	it	lt
     726:	2401      	movlt	r4, #1
     728:	2b01      	cmp	r3, #1
     72a:	bf0c      	ite	eq
     72c:	2330      	moveq	r3, #48	; 0x30
     72e:	2320      	movne	r3, #32
     730:	4615      	mov	r5, r2
     732:	4680      	mov	r8, r0
     734:	4689      	mov	r9, r1
     736:	9401      	str	r4, [sp, #4]
     738:	9302      	str	r3, [sp, #8]
     73a:	2601      	movs	r6, #1
     73c:	270a      	movs	r7, #10
     73e:	2200      	movs	r2, #0
     740:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     744:	b90a      	cbnz	r2, 74a <_printk_dec_ulong+0x36>
     746:	45aa      	cmp	sl, r5
     748:	d21f      	bcs.n	78a <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     74a:	fbb5 f0f4 	udiv	r0, r5, r4
     74e:	4649      	mov	r1, r9
     750:	3030      	adds	r0, #48	; 0x30
     752:	47c0      	blx	r8
			digits++;
     754:	3601      	adds	r6, #1
			found_largest_digit = 1;
     756:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     758:	3f01      	subs	r7, #1
	while (pos >= 9) {
     75a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     75c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     760:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     764:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     768:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     76c:	d1e8      	bne.n	740 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     76e:	4649      	mov	r1, r9
     770:	f105 0030 	add.w	r0, r5, #48	; 0x30
     774:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     776:	f1bb 0f03 	cmp.w	fp, #3
     77a:	d103      	bne.n	784 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     77c:	9b01      	ldr	r3, [sp, #4]
     77e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     780:	2c00      	cmp	r4, #0
     782:	dc0f      	bgt.n	7a4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     784:	b005      	add	sp, #20
     786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     78a:	9b01      	ldr	r3, [sp, #4]
     78c:	42bb      	cmp	r3, r7
     78e:	dbe3      	blt.n	758 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     790:	f1bb 0f02 	cmp.w	fp, #2
     794:	d8e0      	bhi.n	758 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     796:	4649      	mov	r1, r9
     798:	9802      	ldr	r0, [sp, #8]
     79a:	9203      	str	r2, [sp, #12]
			digits++;
     79c:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     79e:	47c0      	blx	r8
			digits++;
     7a0:	9a03      	ldr	r2, [sp, #12]
     7a2:	e7d9      	b.n	758 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     7a4:	4649      	mov	r1, r9
     7a6:	2020      	movs	r0, #32
     7a8:	47c0      	blx	r8
     7aa:	3c01      	subs	r4, #1
     7ac:	e7e8      	b.n	780 <_printk_dec_ulong+0x6c>
     7ae:	bf00      	nop
     7b0:	3b9ac9ff 	.word	0x3b9ac9ff

000007b4 <__printk_hook_install>:
	_char_out = fn;
     7b4:	4b01      	ldr	r3, [pc, #4]	; (7bc <__printk_hook_install+0x8>)
     7b6:	6018      	str	r0, [r3, #0]
}
     7b8:	4770      	bx	lr
     7ba:	bf00      	nop
     7bc:	20001c80 	.word	0x20001c80

000007c0 <_vprintk>:
{
     7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7c4:	b089      	sub	sp, #36	; 0x24
     7c6:	461c      	mov	r4, r3
	int long_ctr = 0;
     7c8:	f04f 0a00 	mov.w	sl, #0
     7cc:	1e53      	subs	r3, r2, #1
{
     7ce:	4606      	mov	r6, r0
     7d0:	460f      	mov	r7, r1
     7d2:	9304      	str	r3, [sp, #16]
	int min_width = -1;
     7d4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     7d8:	46d0      	mov	r8, sl
			might_format = 0;
     7da:	2500      	movs	r5, #0
				break;
     7dc:	e005      	b.n	7ea <_vprintk+0x2a>
		if (!might_format) {
     7de:	b96d      	cbnz	r5, 7fc <_vprintk+0x3c>
			if (*fmt != '%') {
     7e0:	2825      	cmp	r0, #37	; 0x25
     7e2:	f000 8112 	beq.w	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
				out((int)*fmt, ctx);
     7e6:	4639      	mov	r1, r7
     7e8:	47b0      	blx	r6
	while (*fmt) {
     7ea:	9b04      	ldr	r3, [sp, #16]
     7ec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     7f0:	9304      	str	r3, [sp, #16]
     7f2:	2800      	cmp	r0, #0
     7f4:	d1f3      	bne.n	7de <_vprintk+0x1e>
}
     7f6:	b009      	add	sp, #36	; 0x24
     7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     7fc:	2864      	cmp	r0, #100	; 0x64
     7fe:	d061      	beq.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     800:	d819      	bhi.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     802:	2839      	cmp	r0, #57	; 0x39
     804:	d80a      	bhi.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
     806:	2831      	cmp	r0, #49	; 0x31
     808:	d250      	bcs.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
     80a:	282d      	cmp	r0, #45	; 0x2d
     80c:	d03c      	beq.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
     80e:	2830      	cmp	r0, #48	; 0x30
     810:	d03d      	beq.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     812:	2825      	cmp	r0, #37	; 0x25
     814:	d108      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
				out((int)'%', ctx);
     816:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     818:	47b0      	blx	r6
     81a:	e7de      	b.n	7da <_vprintk+0x1a>
			switch (*fmt) {
     81c:	2858      	cmp	r0, #88	; 0x58
     81e:	f000 8088 	beq.w	932 <CONFIG_ISR_STACK_SIZE+0x132>
     822:	2863      	cmp	r0, #99	; 0x63
     824:	f000 80eb 	beq.w	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
				out((int)'%', ctx);
     828:	4639      	mov	r1, r7
     82a:	2025      	movs	r0, #37	; 0x25
     82c:	47b0      	blx	r6
				out((int)*fmt, ctx);
     82e:	9b04      	ldr	r3, [sp, #16]
     830:	4639      	mov	r1, r7
     832:	7818      	ldrb	r0, [r3, #0]
     834:	e7f0      	b.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			switch (*fmt) {
     836:	2870      	cmp	r0, #112	; 0x70
     838:	d071      	beq.n	91e <CONFIG_ISR_STACK_SIZE+0x11e>
     83a:	d806      	bhi.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
     83c:	2869      	cmp	r0, #105	; 0x69
     83e:	d041      	beq.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     840:	286c      	cmp	r0, #108	; 0x6c
     842:	d03c      	beq.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
     844:	2868      	cmp	r0, #104	; 0x68
     846:	d0d0      	beq.n	7ea <_vprintk+0x2a>
     848:	e7ee      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
     84a:	2875      	cmp	r0, #117	; 0x75
     84c:	d057      	beq.n	8fe <CONFIG_ISR_STACK_SIZE+0xfe>
     84e:	d817      	bhi.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     850:	2873      	cmp	r0, #115	; 0x73
     852:	d1e9      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
				char *s = va_arg(ap, char *);
     854:	6823      	ldr	r3, [r4, #0]
     856:	f104 0b04 	add.w	fp, r4, #4
     85a:	461c      	mov	r4, r3
				while (*s)
     85c:	4625      	mov	r5, r4
     85e:	f815 0b01 	ldrb.w	r0, [r5], #1
     862:	2800      	cmp	r0, #0
     864:	f040 80c0 	bne.w	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
				if (padding == PAD_SPACE_AFTER) {
     868:	f1b8 0f03 	cmp.w	r8, #3
     86c:	f040 80d6 	bne.w	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
					int remaining = min_width - (s - start);
     870:	1ae4      	subs	r4, r4, r3
     872:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     876:	2c00      	cmp	r4, #0
     878:	f300 80bc 	bgt.w	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
				char *s = va_arg(ap, char *);
     87c:	465c      	mov	r4, fp
     87e:	e7ac      	b.n	7da <_vprintk+0x1a>
			switch (*fmt) {
     880:	2878      	cmp	r0, #120	; 0x78
     882:	d056      	beq.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
     884:	287a      	cmp	r0, #122	; 0x7a
     886:	e7de      	b.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
				padding = PAD_SPACE_AFTER;
     888:	f04f 0803 	mov.w	r8, #3
     88c:	e7ad      	b.n	7ea <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
     88e:	f1b9 0f00 	cmp.w	r9, #0
     892:	da0e      	bge.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
     894:	f1b8 0f00 	cmp.w	r8, #0
     898:	f000 80bd 	beq.w	a16 <CONFIG_ISR_STACK_SIZE+0x216>
					min_width = *fmt - '0';
     89c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     8a0:	f1b8 0f00 	cmp.w	r8, #0
     8a4:	bf08      	it	eq
     8a6:	f04f 0802 	moveq.w	r8, #2
     8aa:	e79e      	b.n	7ea <_vprintk+0x2a>
				if (min_width < 0) {
     8ac:	f1b9 0f00 	cmp.w	r9, #0
     8b0:	dbf4      	blt.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
					min_width = 10 * min_width + *fmt - '0';
     8b2:	230a      	movs	r3, #10
     8b4:	fb03 0909 	mla	r9, r3, r9, r0
     8b8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     8bc:	e7f0      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
				long_ctr++;
     8be:	f10a 0a01 	add.w	sl, sl, #1
     8c2:	e792      	b.n	7ea <_vprintk+0x2a>
				if (long_ctr < 2) {
     8c4:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     8c8:	bfc5      	ittet	gt
     8ca:	3407      	addgt	r4, #7
     8cc:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     8d0:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     8d2:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     8d4:	bfd4      	ite	le
     8d6:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     8d8:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     8dc:	2d00      	cmp	r5, #0
     8de:	da05      	bge.n	8ec <CONFIG_ISR_STACK_SIZE+0xec>
					out((int)'-', ctx);
     8e0:	4639      	mov	r1, r7
     8e2:	202d      	movs	r0, #45	; 0x2d
     8e4:	47b0      	blx	r6
					d = -d;
     8e6:	426d      	negs	r5, r5
					min_width--;
     8e8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     8ec:	f8cd 9000 	str.w	r9, [sp]
     8f0:	4643      	mov	r3, r8
     8f2:	462a      	mov	r2, r5
     8f4:	4639      	mov	r1, r7
     8f6:	4630      	mov	r0, r6
     8f8:	f7ff ff0c 	bl	714 <_printk_dec_ulong>
     8fc:	e76d      	b.n	7da <_vprintk+0x1a>
				if (long_ctr < 2) {
     8fe:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     902:	bfc5      	ittet	gt
     904:	3407      	addgt	r4, #7
     906:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     90a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     90c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     90e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     912:	bfcc      	ite	gt
     914:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     918:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     91a:	4643      	mov	r3, r8
     91c:	e7ea      	b.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
				  out('0', ctx);
     91e:	4639      	mov	r1, r7
     920:	2030      	movs	r0, #48	; 0x30
     922:	47b0      	blx	r6
				  out('x', ctx);
     924:	4639      	mov	r1, r7
     926:	2078      	movs	r0, #120	; 0x78
     928:	47b0      	blx	r6
				  min_width = 8;
     92a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     92e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     932:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     936:	bfc7      	ittee	gt
     938:	3407      	addgt	r4, #7
     93a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     93e:	6823      	ldrle	r3, [r4, #0]
     940:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     942:	bfc2      	ittt	gt
     944:	f103 0408 	addgt.w	r4, r3, #8
     948:	681b      	ldrgt	r3, [r3, #0]
     94a:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     94c:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     950:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     954:	bfd8      	it	le
     956:	3404      	addle	r4, #4
	int digits = 0;
     958:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     95a:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     95c:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     95e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     962:	9b05      	ldr	r3, [sp, #20]
     964:	ea4f 008b 	mov.w	r0, fp, lsl #2
     968:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     96c:	f010 000f 	ands.w	r0, r0, #15
     970:	d109      	bne.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
     972:	9b07      	ldr	r3, [sp, #28]
     974:	b913      	cbnz	r3, 97c <CONFIG_ISR_STACK_SIZE+0x17c>
     976:	f1bb 0f00 	cmp.w	fp, #0
     97a:	d124      	bne.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
			nibble += nibble > 9 ? 87 : 48;
     97c:	f04f 0c30 	mov.w	ip, #48	; 0x30
     980:	e007      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
	for (; size; size--) {
     982:	9a06      	ldr	r2, [sp, #24]
     984:	e7eb      	b.n	95e <CONFIG_ISR_STACK_SIZE+0x15e>
			nibble += nibble > 9 ? 87 : 48;
     986:	2809      	cmp	r0, #9
     988:	bf8c      	ite	hi
     98a:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     98e:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
     992:	4639      	mov	r1, r7
     994:	4460      	add	r0, ip
     996:	9206      	str	r2, [sp, #24]
     998:	47b0      	blx	r6
			digits++;
     99a:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     99c:	9507      	str	r5, [sp, #28]
			digits++;
     99e:	3301      	adds	r3, #1
     9a0:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     9a2:	f1bb 0f00 	cmp.w	fp, #0
     9a6:	d1ec      	bne.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
	if (padding == PAD_SPACE_AFTER) {
     9a8:	f1b8 0f03 	cmp.w	r8, #3
     9ac:	f47f af15 	bne.w	7da <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
     9b0:	9b03      	ldr	r3, [sp, #12]
     9b2:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     9b6:	2d00      	cmp	r5, #0
     9b8:	f77f af0f 	ble.w	7da <_vprintk+0x1a>
			out(' ', ctx);
     9bc:	4639      	mov	r1, r7
     9be:	2020      	movs	r0, #32
     9c0:	47b0      	blx	r6
     9c2:	3d01      	subs	r5, #1
     9c4:	e7f7      	b.n	9b6 <CONFIG_ISR_STACK_SIZE+0x1b6>
		if (remaining-- <= min_width) {
     9c6:	1e53      	subs	r3, r2, #1
     9c8:	4591      	cmp	r9, r2
     9ca:	9306      	str	r3, [sp, #24]
     9cc:	dbe9      	blt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
			if (padding == PAD_ZERO_BEFORE) {
     9ce:	f1b8 0f01 	cmp.w	r8, #1
     9d2:	d103      	bne.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
				out('0', ctx);
     9d4:	4639      	mov	r1, r7
     9d6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     9d8:	47b0      	blx	r6
     9da:	e7e2      	b.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
			} else if (padding == PAD_SPACE_BEFORE) {
     9dc:	f1b8 0f02 	cmp.w	r8, #2
     9e0:	d1df      	bne.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
				out(' ', ctx);
     9e2:	4639      	mov	r1, r7
     9e4:	2020      	movs	r0, #32
     9e6:	e7f7      	b.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
					out((int)(*s++), ctx);
     9e8:	4639      	mov	r1, r7
     9ea:	9303      	str	r3, [sp, #12]
     9ec:	462c      	mov	r4, r5
     9ee:	47b0      	blx	r6
     9f0:	9b03      	ldr	r3, [sp, #12]
     9f2:	e733      	b.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
						out(' ', ctx);
     9f4:	4639      	mov	r1, r7
     9f6:	2020      	movs	r0, #32
     9f8:	47b0      	blx	r6
     9fa:	3c01      	subs	r4, #1
     9fc:	e73b      	b.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
				out(c, ctx);
     9fe:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     a00:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     a02:	4639      	mov	r1, r7
     a04:	47b0      	blx	r6
				int c = va_arg(ap, int);
     a06:	462c      	mov	r4, r5
     a08:	e6e7      	b.n	7da <_vprintk+0x1a>
				long_ctr = 0;
     a0a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     a0c:	46a8      	mov	r8, r5
				min_width = -1;
     a0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     a12:	2501      	movs	r5, #1
     a14:	e6e9      	b.n	7ea <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
     a16:	f04f 0801 	mov.w	r8, #1
     a1a:	e6e6      	b.n	7ea <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
     a1c:	465c      	mov	r4, fp
			might_format = 0;
     a1e:	4605      	mov	r5, r0
     a20:	e6e3      	b.n	7ea <_vprintk+0x2a>
	...

00000a24 <vprintk>:
{
     a24:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     a26:	ac02      	add	r4, sp, #8
     a28:	2300      	movs	r3, #0
     a2a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     a2e:	4602      	mov	r2, r0
     a30:	460b      	mov	r3, r1
     a32:	4803      	ldr	r0, [pc, #12]	; (a40 <vprintk+0x1c>)
     a34:	4621      	mov	r1, r4
     a36:	f7ff fec3 	bl	7c0 <_vprintk>
}
     a3a:	b002      	add	sp, #8
     a3c:	bd10      	pop	{r4, pc}
     a3e:	bf00      	nop
     a40:	00000705 	.word	0x00000705

00000a44 <printk>:
{
     a44:	b40f      	push	{r0, r1, r2, r3}
     a46:	b507      	push	{r0, r1, r2, lr}
     a48:	a904      	add	r1, sp, #16
     a4a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     a4e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
     a50:	f7ff ffe8 	bl	a24 <vprintk>
}
     a54:	b003      	add	sp, #12
     a56:	f85d eb04 	ldr.w	lr, [sp], #4
     a5a:	b004      	add	sp, #16
     a5c:	4770      	bx	lr

00000a5e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE_NO_BLOCK_SKIP, 1);
GEN_ABSOLUTE_SYM(CONFIG_SEGGER_RTT_MODE, 0);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_LINKER_ORPHAN_SECTION_WARN, 1);

GEN_ABS_SYM_END
     a5e:	4770      	bx	lr

00000a60 <nordicsemi_nrf52_init>:
#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
#include <logging/log.h>
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf52_init(struct device *arg)
{
     a60:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     a62:	f04f 0320 	mov.w	r3, #32
     a66:	f3ef 8411 	mrs	r4, BASEPRI
     a6a:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     a6e:	f000 f84f 	bl	b10 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     a72:	4a08      	ldr	r2, [pc, #32]	; (a94 <nordicsemi_nrf52_init+0x34>)
     a74:	2301      	movs	r3, #1
     a76:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
}
#endif

__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a7e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     a82:	4b05      	ldr	r3, [pc, #20]	; (a98 <nordicsemi_nrf52_init+0x38>)
     a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     a88:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     a8c:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     a90:	2000      	movs	r0, #0
     a92:	bd10      	pop	{r4, pc}
     a94:	4001e000 	.word	0x4001e000
     a98:	e000ed00 	.word	0xe000ed00

00000a9c <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     a9c:	4b0c      	ldr	r3, [pc, #48]	; (ad0 <errata_108+0x34>)
     a9e:	781b      	ldrb	r3, [r3, #0]
     aa0:	2b06      	cmp	r3, #6
     aa2:	d110      	bne.n	ac6 <errata_108+0x2a>
     aa4:	4b0b      	ldr	r3, [pc, #44]	; (ad4 <errata_108+0x38>)
     aa6:	681b      	ldr	r3, [r3, #0]
     aa8:	071a      	lsls	r2, r3, #28
     aaa:	d10c      	bne.n	ac6 <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     aac:	4b0a      	ldr	r3, [pc, #40]	; (ad8 <errata_108+0x3c>)
     aae:	6818      	ldr	r0, [r3, #0]
     ab0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     ab4:	2b30      	cmp	r3, #48	; 0x30
     ab6:	d008      	beq.n	aca <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     ab8:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     abc:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     ac0:	4258      	negs	r0, r3
     ac2:	4158      	adcs	r0, r3
     ac4:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     ac6:	2000      	movs	r0, #0
     ac8:	4770      	bx	lr
            return true;
     aca:	2001      	movs	r0, #1
}
     acc:	4770      	bx	lr
     ace:	bf00      	nop
     ad0:	f0000fe0 	.word	0xf0000fe0
     ad4:	f0000fe4 	.word	0xf0000fe4
     ad8:	f0000fe8 	.word	0xf0000fe8

00000adc <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     adc:	4b09      	ldr	r3, [pc, #36]	; (b04 <errata_16+0x28>)
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	2b06      	cmp	r3, #6
     ae2:	d10c      	bne.n	afe <errata_16+0x22>
     ae4:	4b08      	ldr	r3, [pc, #32]	; (b08 <errata_16+0x2c>)
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	071a      	lsls	r2, r3, #28
     aea:	d108      	bne.n	afe <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <errata_16+0x30>)
     aee:	6818      	ldr	r0, [r3, #0]
     af0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     af4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     af8:	4258      	negs	r0, r3
     afa:	4158      	adcs	r0, r3
     afc:	4770      	bx	lr
            return true;
        }
    }

    return false;
     afe:	2000      	movs	r0, #0
}
     b00:	4770      	bx	lr
     b02:	bf00      	nop
     b04:	f0000fe0 	.word	0xf0000fe0
     b08:	f0000fe4 	.word	0xf0000fe4
     b0c:	f0000fe8 	.word	0xf0000fe8

00000b10 <SystemInit>:
{
     b10:	b508      	push	{r3, lr}
    if (errata_12()){
     b12:	f7ff ffc3 	bl	a9c <errata_108>
     b16:	b128      	cbz	r0, b24 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
     b18:	4b78      	ldr	r3, [pc, #480]	; (cfc <SystemInit+0x1ec>)
     b1a:	4a79      	ldr	r2, [pc, #484]	; (d00 <SystemInit+0x1f0>)
     b1c:	681b      	ldr	r3, [r3, #0]
     b1e:	f3c3 2304 	ubfx	r3, r3, #8, #5
     b22:	6013      	str	r3, [r2, #0]
    if (errata_16()){
     b24:	f7ff ffda 	bl	adc <errata_16>
     b28:	b110      	cbz	r0, b30 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     b2a:	4b76      	ldr	r3, [pc, #472]	; (d04 <SystemInit+0x1f4>)
     b2c:	4a76      	ldr	r2, [pc, #472]	; (d08 <SystemInit+0x1f8>)
     b2e:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     b30:	f7ff ffb4 	bl	a9c <errata_108>
     b34:	b128      	cbz	r0, b42 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     b36:	4b75      	ldr	r3, [pc, #468]	; (d0c <SystemInit+0x1fc>)
     b38:	4a75      	ldr	r2, [pc, #468]	; (d10 <SystemInit+0x200>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	f3c3 3342 	ubfx	r3, r3, #13, #3
     b40:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     b42:	f7ff ffcb 	bl	adc <errata_16>
     b46:	b120      	cbz	r0, b52 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     b48:	4a72      	ldr	r2, [pc, #456]	; (d14 <SystemInit+0x204>)
     b4a:	68d3      	ldr	r3, [r2, #12]
     b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     b50:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     b52:	f7ff ffa3 	bl	a9c <errata_108>
     b56:	b140      	cbz	r0, b6a <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
     b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     b5c:	2200      	movs	r2, #0
     b5e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     b62:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     b66:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     b6a:	f7ff ffb7 	bl	adc <errata_16>
     b6e:	b110      	cbz	r0, b76 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     b70:	4b69      	ldr	r3, [pc, #420]	; (d18 <SystemInit+0x208>)
     b72:	2203      	movs	r2, #3
     b74:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     b76:	f7ff ffb1 	bl	adc <errata_16>
     b7a:	b140      	cbz	r0, b8e <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     b7c:	4b67      	ldr	r3, [pc, #412]	; (d1c <SystemInit+0x20c>)
     b7e:	2205      	movs	r2, #5
     b80:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     b82:	2201      	movs	r2, #1
     b84:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     b86:	2200      	movs	r2, #0
     b88:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     b8a:	223f      	movs	r2, #63	; 0x3f
     b8c:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     b8e:	4b64      	ldr	r3, [pc, #400]	; (d20 <SystemInit+0x210>)
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	2b06      	cmp	r3, #6
     b94:	d150      	bne.n	c38 <SystemInit+0x128>
     b96:	4b63      	ldr	r3, [pc, #396]	; (d24 <SystemInit+0x214>)
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	0719      	lsls	r1, r3, #28
     b9c:	d14c      	bne.n	c38 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     b9e:	4b62      	ldr	r3, [pc, #392]	; (d28 <SystemInit+0x218>)
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ba6:	2b50      	cmp	r3, #80	; 0x50
     ba8:	d146      	bne.n	c38 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     bae:	4b5f      	ldr	r3, [pc, #380]	; (d2c <SystemInit+0x21c>)
     bb0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     bb4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     bb8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     bbc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     bc0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     bc4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     bc8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     bcc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     bd0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     bd4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     bd8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     bdc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     be0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     be4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     be8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     bec:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     bf0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     bf4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     bf8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     bfc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     c00:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     c04:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     c08:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     c0c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     c10:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     c14:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     c18:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     c1c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     c20:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     c24:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     c28:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     c2c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     c30:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     c34:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     c38:	f7ff ff30 	bl	a9c <errata_108>
     c3c:	b128      	cbz	r0, c4a <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     c3e:	4b3c      	ldr	r3, [pc, #240]	; (d30 <SystemInit+0x220>)
     c40:	4a3c      	ldr	r2, [pc, #240]	; (d34 <SystemInit+0x224>)
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     c48:	6013      	str	r3, [r2, #0]
    if (errata_136()){
     c4a:	f7ff ff27 	bl	a9c <errata_108>
     c4e:	b148      	cbz	r0, c64 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
     c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     c58:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
     c5a:	bf44      	itt	mi
     c5c:	f06f 0201 	mvnmi.w	r2, #1
     c60:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
     c64:	4b34      	ldr	r3, [pc, #208]	; (d38 <SystemInit+0x228>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	2b06      	cmp	r3, #6
     c6a:	d108      	bne.n	c7e <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
     c6c:	4b33      	ldr	r3, [pc, #204]	; (d3c <SystemInit+0x22c>)
     c6e:	681b      	ldr	r3, [r3, #0]
     c70:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
     c72:	bf01      	itttt	eq
     c74:	4a32      	ldreq	r2, [pc, #200]	; (d40 <SystemInit+0x230>)
     c76:	6813      	ldreq	r3, [r2, #0]
     c78:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
     c7c:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     c7e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     c82:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     c86:	2a00      	cmp	r2, #0
     c88:	db03      	blt.n	c92 <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
     c8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     c8e:	2b00      	cmp	r3, #0
     c90:	da2f      	bge.n	cf2 <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     c92:	4b2c      	ldr	r3, [pc, #176]	; (d44 <SystemInit+0x234>)
     c94:	2201      	movs	r2, #1
     c96:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     c9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     c9e:	2a00      	cmp	r2, #0
     ca0:	d0fb      	beq.n	c9a <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
     ca2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     ca6:	2115      	movs	r1, #21
     ca8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     cac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     cb0:	2a00      	cmp	r2, #0
     cb2:	d0fb      	beq.n	cac <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
     cb4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     cb8:	2215      	movs	r2, #21
     cba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     cbe:	4b21      	ldr	r3, [pc, #132]	; (d44 <SystemInit+0x234>)
     cc0:	461a      	mov	r2, r3
     cc2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     cc6:	2900      	cmp	r1, #0
     cc8:	d0fb      	beq.n	cc2 <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     cca:	2100      	movs	r1, #0
     ccc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     cd0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     cd4:	2b00      	cmp	r3, #0
     cd6:	d0fb      	beq.n	cd0 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     cd8:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     cdc:	491a      	ldr	r1, [pc, #104]	; (d48 <SystemInit+0x238>)
     cde:	4b1b      	ldr	r3, [pc, #108]	; (d4c <SystemInit+0x23c>)
     ce0:	68ca      	ldr	r2, [r1, #12]
     ce2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     ce6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     ce8:	60cb      	str	r3, [r1, #12]
     cea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     cee:	bf00      	nop
     cf0:	e7fd      	b.n	cee <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     cf2:	4b17      	ldr	r3, [pc, #92]	; (d50 <SystemInit+0x240>)
     cf4:	4a17      	ldr	r2, [pc, #92]	; (d54 <SystemInit+0x244>)
     cf6:	601a      	str	r2, [r3, #0]
}
     cf8:	bd08      	pop	{r3, pc}
     cfa:	bf00      	nop
     cfc:	10000324 	.word	0x10000324
     d00:	40013540 	.word	0x40013540
     d04:	4007c074 	.word	0x4007c074
     d08:	baadf00d 	.word	0xbaadf00d
     d0c:	10000244 	.word	0x10000244
     d10:	4000053c 	.word	0x4000053c
     d14:	e000edf0 	.word	0xe000edf0
     d18:	400005a0 	.word	0x400005a0
     d1c:	40005610 	.word	0x40005610
     d20:	f0000fe0 	.word	0xf0000fe0
     d24:	f0000fe4 	.word	0xf0000fe4
     d28:	f0000fe8 	.word	0xf0000fe8
     d2c:	4000c000 	.word	0x4000c000
     d30:	10000258 	.word	0x10000258
     d34:	40000ee4 	.word	0x40000ee4
     d38:	10000130 	.word	0x10000130
     d3c:	10000134 	.word	0x10000134
     d40:	4000173c 	.word	0x4000173c
     d44:	4001e000 	.word	0x4001e000
     d48:	e000ed00 	.word	0xe000ed00
     d4c:	05fa0004 	.word	0x05fa0004
     d50:	20001ca4 	.word	0x20001ca4
     d54:	03d09000 	.word	0x03d09000

00000d58 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     d58:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
     d5a:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
     d5c:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     d5e:	bf9d      	ittte	ls
     d60:	6882      	ldrls	r2, [r0, #8]
     d62:	18d2      	addls	r2, r2, r3
     d64:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
     d68:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     d6c:	bf94      	ite	ls
     d6e:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
     d70:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
     d72:	4770      	bx	lr

00000d74 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
     d78:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d7c:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
     d7e:	1bf6      	subs	r6, r6, r7
     d80:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
     d82:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d84:	4688      	mov	r8, r1
     d86:	4615      	mov	r5, r2
     d88:	4438      	add	r0, r7
  if (Rem > NumBytes) {
     d8a:	d905      	bls.n	d98 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     d8c:	f001 fd40 	bl	2810 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
     d90:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
     d92:	60e5      	str	r5, [r4, #12]
}
     d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     d98:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
     d9a:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     d9c:	f001 fd38 	bl	2810 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
     da0:	462a      	mov	r2, r5
     da2:	eb08 0106 	add.w	r1, r8, r6
     da6:	6860      	ldr	r0, [r4, #4]
     da8:	f001 fd32 	bl	2810 <memcpy>
     dac:	e7f1      	b.n	d92 <_WriteNoCheck+0x1e>

00000dae <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     dae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
     db2:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     db4:	4606      	mov	r6, r0
     db6:	4689      	mov	r9, r1
     db8:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
     dba:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     dbe:	6934      	ldr	r4, [r6, #16]
     dc0:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     dc2:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
     dc4:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     dc6:	bf28      	it	cs
     dc8:	18e4      	addcs	r4, r4, r3
     dca:	3c01      	subs	r4, #1
     dcc:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     dce:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     dd0:	42bc      	cmp	r4, r7
     dd2:	bf28      	it	cs
     dd4:	463c      	movcs	r4, r7
     dd6:	4294      	cmp	r4, r2
     dd8:	bf28      	it	cs
     dda:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     ddc:	4649      	mov	r1, r9
     dde:	4428      	add	r0, r5
     de0:	4622      	mov	r2, r4
     de2:	f001 fd15 	bl	2810 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
     de6:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
     de8:	4425      	add	r5, r4
      WrOff = 0u;
     dea:	42ab      	cmp	r3, r5
     dec:	bf08      	it	eq
     dee:	2500      	moveq	r5, #0
  } while (NumBytes);
     df0:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
     df2:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
     df4:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
     df6:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
     df8:	d1e1      	bne.n	dbe <_WriteBlocking+0x10>
}
     dfa:	4640      	mov	r0, r8
     dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000e00 <_DoInit>:
static void _DoInit(void) {
     e00:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     e02:	4c11      	ldr	r4, [pc, #68]	; (e48 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
     e04:	4a11      	ldr	r2, [pc, #68]	; (e4c <_DoInit+0x4c>)
     e06:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     e08:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     e0a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
     e0e:	4b10      	ldr	r3, [pc, #64]	; (e50 <_DoInit+0x50>)
     e10:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
     e12:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
     e18:	4a0e      	ldr	r2, [pc, #56]	; (e54 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     e1a:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
     e1c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
     e1e:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     e20:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
     e22:	490d      	ldr	r1, [pc, #52]	; (e58 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
     e24:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
     e26:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
     e28:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
     e2c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     e2e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     e30:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     e32:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
     e34:	f001 fcb0 	bl	2798 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
     e38:	4908      	ldr	r1, [pc, #32]	; (e5c <_DoInit+0x5c>)
     e3a:	4620      	mov	r0, r4
     e3c:	f001 fcac 	bl	2798 <strcpy>
  p->acID[6] = ' ';
     e40:	2320      	movs	r3, #32
     e42:	71a3      	strb	r3, [r4, #6]
}
     e44:	bd10      	pop	{r4, pc}
     e46:	bf00      	nop
     e48:	20000620 	.word	0x20000620
     e4c:	00004db8 	.word	0x00004db8
     e50:	2000001c 	.word	0x2000001c
     e54:	2000000c 	.word	0x2000000c
     e58:	00004dc1 	.word	0x00004dc1
     e5c:	00004dc5 	.word	0x00004dc5

00000e60 <SEGGER_RTT_WriteSkipNoLock>:
  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
     e60:	f8df c088 	ldr.w	ip, [pc, #136]	; eec <SEGGER_RTT_WriteSkipNoLock+0x8c>
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  RdOff = pRing->RdOff;
     e68:	f04f 0a18 	mov.w	sl, #24
     e6c:	fb0a c700 	mla	r7, sl, r0, ip
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e70:	4689      	mov	r9, r1
  RdOff = pRing->RdOff;
     e72:	6abe      	ldr	r6, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
     e74:	6a7d      	ldr	r5, [r7, #36]	; 0x24
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
     e76:	42ae      	cmp	r6, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e78:	4614      	mov	r4, r2
  if (RdOff <= WrOff) {
     e7a:	d82b      	bhi.n	ed4 <SEGGER_RTT_WriteSkipNoLock+0x74>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
     e7c:	6a3b      	ldr	r3, [r7, #32]
     e7e:	eba3 0805 	sub.w	r8, r3, r5
     e82:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {
     e86:	4572      	cmp	r2, lr
     e88:	d806      	bhi.n	e98 <SEGGER_RTT_WriteSkipNoLock+0x38>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     e8a:	fb00 a30a 	mla	r3, r0, sl, sl
     e8e:	449c      	add	ip, r3
     e90:	f8dc 0004 	ldr.w	r0, [ip, #4]
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     e94:	4428      	add	r0, r5
     e96:	e00a      	b.n	eae <SEGGER_RTT_WriteSkipNoLock+0x4e>
    Avail += RdOff;
     e98:	4476      	add	r6, lr
    if (Avail >= NumBytes) {
     e9a:	42b2      	cmp	r2, r6
     e9c:	d823      	bhi.n	ee6 <SEGGER_RTT_WriteSkipNoLock+0x86>
     e9e:	fb00 a30a 	mla	r3, r0, sl, sl
     ea2:	eb0c 0603 	add.w	r6, ip, r3
      if (Rem > NumBytes) {
     ea6:	4590      	cmp	r8, r2
     ea8:	6870      	ldr	r0, [r6, #4]
     eaa:	4428      	add	r0, r5
     eac:	d903      	bls.n	eb6 <SEGGER_RTT_WriteSkipNoLock+0x56>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     eae:	f001 fcaf 	bl	2810 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
     eb2:	442c      	add	r4, r5
     eb4:	e00a      	b.n	ecc <SEGGER_RTT_WriteSkipNoLock+0x6c>
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
     eb6:	4642      	mov	r2, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
     eb8:	eba4 0408 	sub.w	r4, r4, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
     ebc:	f001 fca8 	bl	2810 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
     ec0:	4622      	mov	r2, r4
     ec2:	eb09 0108 	add.w	r1, r9, r8
     ec6:	6870      	ldr	r0, [r6, #4]
     ec8:	f001 fca2 	bl	2810 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
     ecc:	627c      	str	r4, [r7, #36]	; 0x24
#endif
      return 1;
     ece:	2001      	movs	r0, #1
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
}
     ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Avail = RdOff - WrOff - 1u;
     ed4:	3e01      	subs	r6, #1
     ed6:	1b76      	subs	r6, r6, r5
    if (Avail >= NumBytes) {
     ed8:	4296      	cmp	r6, r2
     eda:	d304      	bcc.n	ee6 <SEGGER_RTT_WriteSkipNoLock+0x86>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     edc:	fb00 a30a 	mla	r3, r0, sl, sl
     ee0:	4463      	add	r3, ip
     ee2:	6858      	ldr	r0, [r3, #4]
     ee4:	e7d6      	b.n	e94 <SEGGER_RTT_WriteSkipNoLock+0x34>
  return 0;
     ee6:	2000      	movs	r0, #0
     ee8:	e7f2      	b.n	ed0 <SEGGER_RTT_WriteSkipNoLock+0x70>
     eea:	bf00      	nop
     eec:	20000620 	.word	0x20000620

00000ef0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     ef2:	4c18      	ldr	r4, [pc, #96]	; (f54 <SEGGER_RTT_WriteNoLock+0x64>)
     ef4:	2318      	movs	r3, #24
     ef6:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     efa:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     efe:	4425      	add	r5, r4
  switch (pRing->Flags) {
     f00:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     f02:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f04:	460f      	mov	r7, r1
     f06:	4616      	mov	r6, r2
  switch (pRing->Flags) {
     f08:	d011      	beq.n	f2e <SEGGER_RTT_WriteNoLock+0x3e>
     f0a:	d303      	bcc.n	f14 <SEGGER_RTT_WriteNoLock+0x24>
     f0c:	2c02      	cmp	r4, #2
     f0e:	d01b      	beq.n	f48 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
     f10:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
     f12:	e00a      	b.n	f2a <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
     f14:	4628      	mov	r0, r5
     f16:	f7ff ff1f 	bl	d58 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
     f1a:	4286      	cmp	r6, r0
     f1c:	d805      	bhi.n	f2a <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
     f1e:	4632      	mov	r2, r6
     f20:	4639      	mov	r1, r7
     f22:	4628      	mov	r0, r5
     f24:	f7ff ff26 	bl	d74 <_WriteNoCheck>
     f28:	4634      	mov	r4, r6
}
     f2a:	4620      	mov	r0, r4
     f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
     f2e:	4628      	mov	r0, r5
     f30:	f7ff ff12 	bl	d58 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
     f34:	4286      	cmp	r6, r0
     f36:	4634      	mov	r4, r6
     f38:	bf28      	it	cs
     f3a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
     f3c:	4622      	mov	r2, r4
     f3e:	4639      	mov	r1, r7
     f40:	4628      	mov	r0, r5
     f42:	f7ff ff17 	bl	d74 <_WriteNoCheck>
    break;
     f46:	e7f0      	b.n	f2a <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
     f48:	4628      	mov	r0, r5
}
     f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
     f4e:	f7ff bf2e 	b.w	dae <_WriteBlocking>
     f52:	bf00      	nop
     f54:	20000620 	.word	0x20000620

00000f58 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
     f58:	4a03      	ldr	r2, [pc, #12]	; (f68 <SEGGER_RTT_HasDataUp+0x10>)
     f5a:	2318      	movs	r3, #24
     f5c:	fb03 2300 	mla	r3, r3, r0, r2
     f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
     f62:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
     f64:	1a80      	subs	r0, r0, r2
     f66:	4770      	bx	lr
     f68:	20000620 	.word	0x20000620

00000f6c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
     f6c:	f7ff bf48 	b.w	e00 <_DoInit>

00000f70 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
     f70:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
     f72:	f7ff fffb 	bl	f6c <SEGGER_RTT_Init>
}
     f76:	bd08      	pop	{r3, pc}

00000f78 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
     f78:	2300      	movs	r3, #0
	list->head = NULL;
     f7a:	e9c0 3300 	strd	r3, r3, [r0]
}
     f7e:	4770      	bx	lr

00000f80 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
     f80:	6803      	ldr	r3, [r0, #0]
     f82:	b923      	cbnz	r3, f8e <log_list_add_tail+0xe>
		list->head = msg;
     f84:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
     f86:	2300      	movs	r3, #0
	list->tail = msg;
     f88:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
     f8a:	600b      	str	r3, [r1, #0]
}
     f8c:	4770      	bx	lr
		list->tail->next = msg;
     f8e:	6843      	ldr	r3, [r0, #4]
     f90:	6019      	str	r1, [r3, #0]
     f92:	e7f8      	b.n	f86 <log_list_add_tail+0x6>

00000f94 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
     f94:	6800      	ldr	r0, [r0, #0]
     f96:	4770      	bx	lr

00000f98 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
     f98:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
     f9a:	b10b      	cbz	r3, fa0 <log_list_head_get+0x8>
		list->head = list->head->next;
     f9c:	681a      	ldr	r2, [r3, #0]
     f9e:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
     fa0:	4618      	mov	r0, r3
     fa2:	4770      	bx	lr

00000fa4 <dummy_timestamp>:
static timestamp_get_t timestamp_func = dummy_timestamp;

static u32_t dummy_timestamp(void)
{
	return 0;
}
     fa4:	2000      	movs	r0, #0
     fa6:	4770      	bx	lr

00000fa8 <_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *_log_msg_std_alloc(void)
{
     fa8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
     faa:	a902      	add	r1, sp, #8
     fac:	2200      	movs	r2, #0
     fae:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
     fb2:	4808      	ldr	r0, [pc, #32]	; (fd4 <_log_msg_std_alloc+0x2c>)
     fb4:	f002 ff60 	bl	3e78 <k_mem_slab_alloc>
	if (err != 0) {
     fb8:	b110      	cbz	r0, fc0 <_log_msg_std_alloc+0x18>
		msg = log_msg_no_space_handle();
     fba:	f000 fa1b 	bl	13f4 <log_msg_no_space_handle>
     fbe:	9001      	str	r0, [sp, #4]
	return msg;
     fc0:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
     fc2:	b118      	cbz	r0, fcc <_log_msg_std_alloc+0x24>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
     fc4:	2301      	movs	r3, #1
     fc6:	6043      	str	r3, [r0, #4]
     fc8:	2300      	movs	r3, #0
     fca:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
     fcc:	b003      	add	sp, #12
     fce:	f85d fb04 	ldr.w	pc, [sp], #4
     fd2:	bf00      	nop
     fd4:	20000750 	.word	0x20000750

00000fd8 <timestamp_get>:
	log_n(fmt, args, nargs, src_level);
}

static u32_t timestamp_get(void)
{
	return k_cycle_get_32();
     fd8:	f001 b896 	b.w	2108 <_timer_cycle_get_32>

00000fdc <log_core_init>:
}

void log_core_init(void)
{
     fdc:	b508      	push	{r3, lr}
	log_msg_pool_init();
     fde:	f000 f9f1 	bl	13c4 <log_msg_pool_init>
	log_list_init(&list);
     fe2:	4802      	ldr	r0, [pc, #8]	; (fec <log_core_init+0x10>)
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
     fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_list_init(&list);
     fe8:	f7ff bfc6 	b.w	f78 <log_list_init>
     fec:	20000428 	.word	0x20000428

00000ff0 <log_init>:
		}
	}
}

void log_init(void)
{
     ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     ff4:	4b1c      	ldr	r3, [pc, #112]	; (1068 <log_init+0x78>)
     ff6:	f3bf 8f5b 	dmb	ish
     ffa:	e853 4f00 	ldrex	r4, [r3]
     ffe:	1c62      	adds	r2, r4, #1
    1000:	e843 2100 	strex	r1, r2, [r3]
    1004:	2900      	cmp	r1, #0
    1006:	d1f8      	bne.n	ffa <log_init+0xa>
    1008:	f3bf 8f5b 	dmb	ish
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
	int i;

	if (atomic_inc(&initialized)) {
    100c:	b9bc      	cbnz	r4, 103e <log_init+0x4e>
		return;
	}

	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    100e:	2304      	movs	r3, #4
    1010:	2228      	movs	r2, #40	; 0x28
    1012:	4916      	ldr	r1, [pc, #88]	; (106c <log_init+0x7c>)
    1014:	4816      	ldr	r0, [pc, #88]	; (1070 <log_init+0x80>)
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    1016:	4d17      	ldr	r5, [pc, #92]	; (1074 <log_init+0x84>)
			if (backend->api->init) {
				backend->api->init();
			}

			log_backend_activate(backend, NULL);
			backend_attached = true;
    1018:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1084 <log_init+0x94>
	k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    101c:	f002 ff1a 	bl	3e54 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    1020:	4b15      	ldr	r3, [pc, #84]	; (1078 <log_init+0x88>)
    1022:	4a16      	ldr	r2, [pc, #88]	; (107c <log_init+0x8c>)
    1024:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
    1026:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    102a:	f000 fd7b 	bl	1b24 <log_output_timestamp_freq_set>
    102e:	4b14      	ldr	r3, [pc, #80]	; (1080 <log_init+0x90>)
    1030:	1b5b      	subs	r3, r3, r5
    1032:	091f      	lsrs	r7, r3, #4
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	assert(backend);
	backend->cb->ctx = ctx;
    1034:	46a0      	mov	r8, r4
	for (i = 0; i < log_backend_count_get(); i++) {
    1036:	4623      	mov	r3, r4
	backend->cb->active = true;
    1038:	2601      	movs	r6, #1
    103a:	42bb      	cmp	r3, r7
    103c:	db01      	blt.n	1042 <log_init+0x52>
		}
	}
}
    103e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		log_backend_id_set(backend,
    1042:	686a      	ldr	r2, [r5, #4]
	backend->cb->id = id;
    1044:	1c5c      	adds	r4, r3, #1
    1046:	7114      	strb	r4, [r2, #4]
		if (backend->autostart) {
    1048:	7b2b      	ldrb	r3, [r5, #12]
    104a:	b14b      	cbz	r3, 1060 <log_init+0x70>
			if (backend->api->init) {
    104c:	682b      	ldr	r3, [r5, #0]
    104e:	689a      	ldr	r2, [r3, #8]
    1050:	b102      	cbz	r2, 1054 <log_init+0x64>
				backend->api->init();
    1052:	4790      	blx	r2
			log_backend_activate(backend, NULL);
    1054:	686a      	ldr	r2, [r5, #4]
			backend_attached = true;
    1056:	f889 6000 	strb.w	r6, [r9]
	backend->cb->ctx = ctx;
    105a:	f8c2 8000 	str.w	r8, [r2]
	backend->cb->active = true;
    105e:	7156      	strb	r6, [r2, #5]
	for (i = 0; i < log_backend_count_get(); i++) {
    1060:	4623      	mov	r3, r4
    1062:	3510      	adds	r5, #16
    1064:	e7e9      	b.n	103a <log_init+0x4a>
    1066:	bf00      	nop
    1068:	20000424 	.word	0x20000424
    106c:	200007a0 	.word	0x200007a0
    1070:	20000734 	.word	0x20000734
    1074:	00004c60 	.word	0x00004c60
    1078:	20001ca8 	.word	0x20001ca8
    107c:	00000fd9 	.word	0x00000fd9
    1080:	00004c70 	.word	0x00004c70
    1084:	2000041c 	.word	0x2000041c

00001088 <log_process>:

bool log_process(bool bypass)
{
	struct log_msg *msg;

	if (!backend_attached) {
    1088:	4b23      	ldr	r3, [pc, #140]	; (1118 <log_process+0x90>)
{
    108a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    108e:	4605      	mov	r5, r0
	if (!backend_attached) {
    1090:	7818      	ldrb	r0, [r3, #0]
    1092:	b310      	cbz	r0, 10da <log_process+0x52>
	__asm__ volatile(
    1094:	f04f 0320 	mov.w	r3, #32
    1098:	f3ef 8411 	mrs	r4, BASEPRI
    109c:	f383 8811 	msr	BASEPRI, r3
		return false;
	}
	unsigned int key = irq_lock();

	msg = log_list_head_get(&list);
    10a0:	481e      	ldr	r0, [pc, #120]	; (111c <log_process+0x94>)
    10a2:	f7ff ff79 	bl	f98 <log_list_head_get>
    10a6:	4606      	mov	r6, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10a8:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);

	if (msg != NULL) {
    10ac:	b178      	cbz	r0, 10ce <log_process+0x46>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    10ae:	f3bf 8f5b 	dmb	ish
    10b2:	4b1b      	ldr	r3, [pc, #108]	; (1120 <log_process+0x98>)
    10b4:	e853 2f00 	ldrex	r2, [r3]
    10b8:	3a01      	subs	r2, #1
    10ba:	e843 2100 	strex	r1, r2, [r3]
    10be:	2900      	cmp	r1, #0
    10c0:	d1f8      	bne.n	10b4 <log_process+0x2c>
    10c2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    10c6:	b155      	cbz	r5, 10de <log_process+0x56>
	log_msg_put(msg);
    10c8:	4630      	mov	r0, r6
    10ca:	f000 f9ff 	bl	14cc <log_msg_put>
		atomic_dec(&buffered_cnt);
		msg_process(msg, bypass);
	}

	return (log_list_head_peek(&list) != NULL);
    10ce:	4813      	ldr	r0, [pc, #76]	; (111c <log_process+0x94>)
    10d0:	f7ff ff60 	bl	f94 <log_list_head_peek>
    10d4:	3000      	adds	r0, #0
    10d6:	bf18      	it	ne
    10d8:	2001      	movne	r0, #1
}
    10da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    10de:	4c11      	ldr	r4, [pc, #68]	; (1124 <log_process+0x9c>)
    10e0:	4b11      	ldr	r3, [pc, #68]	; (1128 <log_process+0xa0>)
 * @param source_id Source ID.
 * @return Level.
 */
static inline u8_t log_compiled_level_get(u32_t source_id)
{
	return __log_const_start[source_id].level;
    10e2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 112c <log_process+0xa4>
    10e6:	1b1b      	subs	r3, r3, r4
    10e8:	091f      	lsrs	r7, r3, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    10ea:	42bd      	cmp	r5, r7
    10ec:	daec      	bge.n	10c8 <log_process+0x40>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	assert(backend);
	return backend->cb->active;
    10ee:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    10f0:	795b      	ldrb	r3, [r3, #5]
    10f2:	b173      	cbz	r3, 1112 <log_process+0x8a>
	return msg->hdr.ids.source_id;
    10f4:	8973      	ldrh	r3, [r6, #10]
	return msg->hdr.ids.level;
    10f6:	7ab2      	ldrb	r2, [r6, #10]
	return msg->hdr.ids.source_id;
    10f8:	099b      	lsrs	r3, r3, #6
    10fa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    10fe:	7919      	ldrb	r1, [r3, #4]
    1100:	f002 0307 	and.w	r3, r2, #7
    1104:	4299      	cmp	r1, r3
    1106:	d304      	bcc.n	1112 <log_process+0x8a>
	backend->api->put(backend, msg);
    1108:	6823      	ldr	r3, [r4, #0]
    110a:	4631      	mov	r1, r6
    110c:	681b      	ldr	r3, [r3, #0]
    110e:	4620      	mov	r0, r4
    1110:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1112:	3501      	adds	r5, #1
    1114:	3410      	adds	r4, #16
    1116:	e7e8      	b.n	10ea <log_process+0x62>
    1118:	2000041c 	.word	0x2000041c
    111c:	20000428 	.word	0x20000428
    1120:	20000420 	.word	0x20000420
    1124:	00004c60 	.word	0x00004c60
    1128:	00004c70 	.word	0x00004c70
    112c:	00004c40 	.word	0x00004c40

00001130 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    1130:	4b18      	ldr	r3, [pc, #96]	; (1194 <msg_finalize+0x64>)
{
    1132:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    1134:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    1136:	8141      	strh	r1, [r0, #10]
{
    1138:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    113a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    113c:	4c16      	ldr	r4, [pc, #88]	; (1198 <msg_finalize+0x68>)
    113e:	60e8      	str	r0, [r5, #12]
    1140:	f3bf 8f5b 	dmb	ish
    1144:	e854 3f00 	ldrex	r3, [r4]
    1148:	3301      	adds	r3, #1
    114a:	e844 3200 	strex	r2, r3, [r4]
    114e:	2a00      	cmp	r2, #0
    1150:	d1f8      	bne.n	1144 <msg_finalize+0x14>
    1152:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    1156:	f04f 0320 	mov.w	r3, #32
    115a:	f3ef 8611 	mrs	r6, BASEPRI
    115e:	f383 8811 	msr	BASEPRI, r3
	log_list_add_tail(&list, msg);
    1162:	480e      	ldr	r0, [pc, #56]	; (119c <msg_finalize+0x6c>)
    1164:	4629      	mov	r1, r5
    1166:	f7ff ff0b 	bl	f80 <log_list_add_tail>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    116a:	f386 8811 	msr	BASEPRI, r6
	if (IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) || panic_mode) {
    116e:	4b0c      	ldr	r3, [pc, #48]	; (11a0 <msg_finalize+0x70>)
    1170:	781b      	ldrb	r3, [r3, #0]
    1172:	b123      	cbz	r3, 117e <msg_finalize+0x4e>
		(void)log_process(false);
    1174:	2000      	movs	r0, #0
}
    1176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)log_process(false);
    117a:	f7ff bf85 	b.w	1088 <log_process>
		if (buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    117e:	6823      	ldr	r3, [r4, #0]
    1180:	2b0a      	cmp	r3, #10
    1182:	d106      	bne.n	1192 <msg_finalize+0x62>
    1184:	4b07      	ldr	r3, [pc, #28]	; (11a4 <msg_finalize+0x74>)
    1186:	6818      	ldr	r0, [r3, #0]
    1188:	b118      	cbz	r0, 1192 <msg_finalize+0x62>
}
    118a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    118e:	f003 b9af 	b.w	44f0 <_impl_k_wakeup>
    1192:	bd70      	pop	{r4, r5, r6, pc}
    1194:	20001ca8 	.word	0x20001ca8
    1198:	20000420 	.word	0x20000420
    119c:	20000428 	.word	0x20000428
    11a0:	20000430 	.word	0x20000430
    11a4:	20000434 	.word	0x20000434

000011a8 <log_1>:
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	4604      	mov	r4, r0
    11ac:	460e      	mov	r6, r1
    11ae:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    11b0:	f7ff fefa 	bl	fa8 <_log_msg_std_alloc>

	if (msg != NULL) {
    11b4:	b158      	cbz	r0, 11ce <log_1+0x26>
		msg->str = str;
    11b6:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1;
    11b8:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    11ba:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1;
    11bc:	2201      	movs	r2, #1
    11be:	f362 1407 	bfi	r4, r2, #4, #4
    11c2:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
    11c4:	4629      	mov	r1, r5
}
    11c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
    11ca:	f7ff bfb1 	b.w	1130 <msg_finalize>
}
    11ce:	bd70      	pop	{r4, r5, r6, pc}

000011d0 <log_2>:
{
    11d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11d4:	4605      	mov	r5, r0
    11d6:	4688      	mov	r8, r1
    11d8:	4617      	mov	r7, r2
    11da:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    11dc:	f7ff fee4 	bl	fa8 <_log_msg_std_alloc>

	if (msg != NULL) {
    11e0:	b160      	cbz	r0, 11fc <log_2+0x2c>
		msg->str = str;
    11e2:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2;
    11e4:	7a45      	ldrb	r5, [r0, #9]
    11e6:	2302      	movs	r3, #2
    11e8:	f363 1507 	bfi	r5, r3, #4, #4
    11ec:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    11ee:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
    11f2:	4631      	mov	r1, r6
}
    11f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
    11f8:	f7ff bf9a 	b.w	1130 <msg_finalize>
}
    11fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001200 <log_3>:
{
    1200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1204:	4605      	mov	r5, r0
    1206:	4689      	mov	r9, r1
    1208:	4690      	mov	r8, r2
    120a:	461f      	mov	r7, r3
    120c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       u32_t arg1,
					       u32_t arg2,
					       u32_t arg3)
{
	struct  log_msg *msg = _log_msg_std_alloc();
    1210:	f7ff feca 	bl	fa8 <_log_msg_std_alloc>

	if (msg != NULL) {
    1214:	b168      	cbz	r0, 1232 <log_3+0x32>
		msg->str = str;
    1216:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3;
    1218:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    121a:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3;
    121c:	2303      	movs	r3, #3
    121e:	f363 1507 	bfi	r5, r3, #4, #4
    1222:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    1224:	e9c0 9805 	strd	r9, r8, [r0, #20]
	msg_finalize(msg, src_level);
    1228:	4631      	mov	r1, r6
}
    122a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
    122e:	f7ff bf7f 	b.w	1130 <msg_finalize>
}
    1232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00001238 <log_panic>:
{
    1238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    123a:	4f0d      	ldr	r7, [pc, #52]	; (1270 <log_panic+0x38>)
    123c:	783d      	ldrb	r5, [r7, #0]
    123e:	b965      	cbnz	r5, 125a <log_panic+0x22>
	return ((u8_t *)__log_backends_end - (u8_t *)__log_backends_start) /
    1240:	4c0c      	ldr	r4, [pc, #48]	; (1274 <log_panic+0x3c>)
    1242:	4e0d      	ldr	r6, [pc, #52]	; (1278 <log_panic+0x40>)
    1244:	1b36      	subs	r6, r6, r4
    1246:	0936      	lsrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1248:	42b5      	cmp	r5, r6
    124a:	db07      	blt.n	125c <log_panic+0x24>
	panic_mode = true;
    124c:	2301      	movs	r3, #1
    124e:	703b      	strb	r3, [r7, #0]
	while (log_process(false) == true) {
    1250:	2000      	movs	r0, #0
    1252:	f7ff ff19 	bl	1088 <log_process>
    1256:	2800      	cmp	r0, #0
    1258:	d1fa      	bne.n	1250 <log_panic+0x18>
}
    125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    125c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    125e:	795b      	ldrb	r3, [r3, #5]
    1260:	b11b      	cbz	r3, 126a <log_panic+0x32>
	backend->api->panic(backend);
    1262:	6823      	ldr	r3, [r4, #0]
    1264:	4620      	mov	r0, r4
    1266:	685b      	ldr	r3, [r3, #4]
    1268:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    126a:	3501      	adds	r5, #1
    126c:	3410      	adds	r4, #16
    126e:	e7eb      	b.n	1248 <log_panic+0x10>
    1270:	20000430 	.word	0x20000430
    1274:	00004c60 	.word	0x00004c60
    1278:	00004c70 	.word	0x00004c70

0000127c <log_process_thread_func>:
	}
}

#ifdef CONFIG_LOG_PROCESS_THREAD
static void log_process_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
    127c:	b508      	push	{r3, lr}
	log_init();
    127e:	f7ff feb7 	bl	ff0 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    1282:	f003 f95b 	bl	453c <_impl_k_current_get>
	proc_tid = process_tid;
    1286:	4a09      	ldr	r2, [pc, #36]	; (12ac <log_process_thread_func+0x30>)
    1288:	6010      	str	r0, [r2, #0]
	if (!IS_ENABLED(CONFIG_LOG_INPLACE_PROCESS) &&
    128a:	b128      	cbz	r0, 1298 <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    128c:	4b08      	ldr	r3, [pc, #32]	; (12b0 <log_process_thread_func+0x34>)
	    process_tid &&
    128e:	681b      	ldr	r3, [r3, #0]
    1290:	2b09      	cmp	r3, #9
    1292:	dd01      	ble.n	1298 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    1294:	f003 f92c 	bl	44f0 <_impl_k_wakeup>
	thread_set(k_current_get());

	while (1) {
		if (log_process(false) == false) {
    1298:	2000      	movs	r0, #0
    129a:	f7ff fef5 	bl	1088 <log_process>
    129e:	2800      	cmp	r0, #0
    12a0:	d1fa      	bne.n	1298 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    12a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    12a6:	f003 f8e3 	bl	4470 <_impl_k_sleep>
    12aa:	e7f5      	b.n	1298 <log_process_thread_func+0x1c>
    12ac:	20000434 	.word	0x20000434
    12b0:	20000420 	.word	0x20000420

000012b4 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    12b4:	4a04      	ldr	r2, [pc, #16]	; (12c8 <log_source_name_get+0x14>)
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <log_source_name_get+0x18>)
    12b8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    12ba:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    12be:	bf34      	ite	cc
    12c0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    12c4:	2000      	movcs	r0, #0
}
    12c6:	4770      	bx	lr
    12c8:	00004c40 	.word	0x00004c40
    12cc:	00004c60 	.word	0x00004c60

000012d0 <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    12d0:	4b05      	ldr	r3, [pc, #20]	; (12e8 <log_is_strdup+0x18>)
    12d2:	4298      	cmp	r0, r3
    12d4:	d305      	bcc.n	12e2 <log_is_strdup+0x12>
    12d6:	3378      	adds	r3, #120	; 0x78
    12d8:	4298      	cmp	r0, r3
    12da:	bf8c      	ite	hi
    12dc:	2000      	movhi	r0, #0
    12de:	2001      	movls	r0, #1
    12e0:	4770      	bx	lr
    12e2:	2000      	movs	r0, #0
}
    12e4:	4770      	bx	lr
    12e6:	bf00      	nop
    12e8:	200007a4 	.word	0x200007a4

000012ec <log_free>:
{
    12ec:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    12ee:	3804      	subs	r0, #4
    12f0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    12f2:	f3bf 8f5b 	dmb	ish
    12f6:	e850 3f00 	ldrex	r3, [r0]
    12fa:	1e5a      	subs	r2, r3, #1
    12fc:	e840 2100 	strex	r1, r2, [r0]
    1300:	2900      	cmp	r1, #0
    1302:	d1f8      	bne.n	12f6 <log_free+0xa>
    1304:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    1308:	2b01      	cmp	r3, #1
    130a:	d103      	bne.n	1314 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    130c:	a901      	add	r1, sp, #4
    130e:	4803      	ldr	r0, [pc, #12]	; (131c <log_free+0x30>)
    1310:	f002 fdda 	bl	3ec8 <k_mem_slab_free>
}
    1314:	b003      	add	sp, #12
    1316:	f85d fb04 	ldr.w	pc, [sp], #4
    131a:	bf00      	nop
    131c:	20000734 	.word	0x20000734

00001320 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    1320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1324:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    1326:	8903      	ldrh	r3, [r0, #8]
{
    1328:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    132c:	08db      	lsrs	r3, r3, #3
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    132e:	42a3      	cmp	r3, r4
{
    1330:	460e      	mov	r6, r1
	if (offset >= available_len) {
    1332:	d803      	bhi.n	133c <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    1334:	2300      	movs	r3, #0
    1336:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    1338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    133c:	6811      	ldr	r1, [r2, #0]
    133e:	4421      	add	r1, r4
    1340:	4299      	cmp	r1, r3
		*length = available_len - offset;
    1342:	bf84      	itt	hi
    1344:	1b19      	subhi	r1, r3, r4
    1346:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    1348:	2b0c      	cmp	r3, #12
	req_len = *length;
    134a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    134e:	d928      	bls.n	13a2 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    1350:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    1352:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    1356:	d82b      	bhi.n	13b0 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
    1358:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    135a:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    135c:	454b      	cmp	r3, r9
    135e:	bf28      	it	cs
    1360:	464b      	movcs	r3, r9
    1362:	461d      	mov	r5, r3
    1364:	4420      	add	r0, r4
			memcpy(&head_data[offset], data, cpy_len);
    1366:	461a      	mov	r2, r3
		if (put_op) {
    1368:	b1ff      	cbz	r7, 13aa <log_msg_hexdump_data_op+0x8a>
			memcpy(&head_data[offset], data, cpy_len);
    136a:	4631      	mov	r1, r6
			memcpy(data, &head_data[offset], cpy_len);
    136c:	f001 fa50 	bl	2810 <memcpy>
		req_len -= cpy_len;
    1370:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    1374:	442e      	add	r6, r5
	while (req_len > 0) {
    1376:	f1b9 0f00 	cmp.w	r9, #0
    137a:	d0dd      	beq.n	1338 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    137c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    1380:	454d      	cmp	r5, r9
    1382:	bf28      	it	cs
    1384:	464d      	movcs	r5, r9
    1386:	1d20      	adds	r0, r4, #4
    1388:	4440      	add	r0, r8
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    138a:	462a      	mov	r2, r5
		if (put_op) {
    138c:	b1bf      	cbz	r7, 13be <log_msg_hexdump_data_op+0x9e>
			memcpy(&cont->payload.bytes[offset], data, cpy_len);
    138e:	4631      	mov	r1, r6
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    1390:	f001 fa3e 	bl	2810 <memcpy>
		req_len -= cpy_len;
    1394:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    1398:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    139c:	442e      	add	r6, r5
		offset = 0;
    139e:	2400      	movs	r4, #0
    13a0:	e7e9      	b.n	1376 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    13a2:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    13a4:	f04f 0800 	mov.w	r8, #0
    13a8:	e7d8      	b.n	135c <log_msg_hexdump_data_op+0x3c>
			memcpy(data, &head_data[offset], cpy_len);
    13aa:	4601      	mov	r1, r0
    13ac:	4630      	mov	r0, r6
    13ae:	e7dd      	b.n	136c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    13b0:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    13b2:	2c1b      	cmp	r4, #27
    13b4:	d9df      	bls.n	1376 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    13b6:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    13ba:	3c1c      	subs	r4, #28
    13bc:	e7f9      	b.n	13b2 <log_msg_hexdump_data_op+0x92>
			memcpy(data, &cont->payload.bytes[offset], cpy_len);
    13be:	4601      	mov	r1, r0
    13c0:	4630      	mov	r0, r6
    13c2:	e7e5      	b.n	1390 <log_msg_hexdump_data_op+0x70>

000013c4 <log_msg_pool_init>:
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    13c4:	2320      	movs	r3, #32
    13c6:	461a      	mov	r2, r3
    13c8:	4901      	ldr	r1, [pc, #4]	; (13d0 <log_msg_pool_init+0xc>)
    13ca:	4802      	ldr	r0, [pc, #8]	; (13d4 <log_msg_pool_init+0x10>)
    13cc:	f002 bd42 	b.w	3e54 <k_mem_slab_init>
    13d0:	20000b40 	.word	0x20000b40
    13d4:	20000750 	.word	0x20000750

000013d8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    13d8:	3004      	adds	r0, #4
    13da:	f3bf 8f5b 	dmb	ish
    13de:	e850 3f00 	ldrex	r3, [r0]
    13e2:	3301      	adds	r3, #1
    13e4:	e840 3200 	strex	r2, r3, [r0]
    13e8:	2a00      	cmp	r2, #0
    13ea:	d1f8      	bne.n	13de <log_msg_get+0x6>
    13ec:	f3bf 8f5b 	dmb	ish
}
    13f0:	4770      	bx	lr
	...

000013f4 <log_msg_no_space_handle>:
{
    13f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	union log_msg_chunk *msg = NULL;
    13f6:	ac02      	add	r4, sp, #8
    13f8:	2300      	movs	r3, #0
    13fa:	f844 3d04 	str.w	r3, [r4, #-4]!
			err = k_mem_slab_alloc(&log_msg_pool,
    13fe:	4e08      	ldr	r6, [pc, #32]	; (1420 <log_msg_no_space_handle+0x2c>)
			more = log_process(true);
    1400:	2001      	movs	r0, #1
    1402:	f7ff fe41 	bl	1088 <log_process>
			err = k_mem_slab_alloc(&log_msg_pool,
    1406:	2200      	movs	r2, #0
			more = log_process(true);
    1408:	4605      	mov	r5, r0
			err = k_mem_slab_alloc(&log_msg_pool,
    140a:	4621      	mov	r1, r4
    140c:	4630      	mov	r0, r6
    140e:	f002 fd33 	bl	3e78 <k_mem_slab_alloc>
		} while ((err != 0) && more);
    1412:	b108      	cbz	r0, 1418 <log_msg_no_space_handle+0x24>
    1414:	2d00      	cmp	r5, #0
    1416:	d1f3      	bne.n	1400 <log_msg_no_space_handle+0xc>
}
    1418:	9801      	ldr	r0, [sp, #4]
    141a:	b002      	add	sp, #8
    141c:	bd70      	pop	{r4, r5, r6, pc}
    141e:	bf00      	nop
    1420:	20000750 	.word	0x20000750

00001424 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    1424:	7a40      	ldrb	r0, [r0, #9]
}
    1426:	0900      	lsrs	r0, r0, #4
    1428:	4770      	bx	lr

0000142a <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    142a:	7a43      	ldrb	r3, [r0, #9]
    142c:	091b      	lsrs	r3, r3, #4
    142e:	428b      	cmp	r3, r1
    1430:	d916      	bls.n	1460 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    1432:	2b03      	cmp	r3, #3
    1434:	d803      	bhi.n	143e <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    1436:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    143a:	6948      	ldr	r0, [r1, #20]
    143c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    143e:	2901      	cmp	r1, #1
    1440:	d803      	bhi.n	144a <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    1442:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    1446:	6988      	ldr	r0, [r1, #24]
    1448:	4770      	bx	lr
	cont = msg->payload.ext.next;
    144a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    144c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    144e:	2906      	cmp	r1, #6
    1450:	d803      	bhi.n	145a <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    1452:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1456:	6848      	ldr	r0, [r1, #4]
    1458:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    145a:	3907      	subs	r1, #7
		cont = cont->next;
    145c:	681b      	ldr	r3, [r3, #0]
    145e:	e7f6      	b.n	144e <log_msg_arg_get+0x24>
		return 0;
    1460:	2000      	movs	r0, #0
}
    1462:	4770      	bx	lr

00001464 <msg_free>:
{
    1464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1466:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    1468:	7a45      	ldrb	r5, [r0, #9]
{
    146a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    146c:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    1470:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    1474:	d010      	beq.n	1498 <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    1476:	9b01      	ldr	r3, [sp, #4]
    1478:	7a1a      	ldrb	r2, [r3, #8]
    147a:	0792      	lsls	r2, r2, #30
    147c:	d506      	bpl.n	148c <msg_free+0x28>
    147e:	ac04      	add	r4, sp, #16
    1480:	695b      	ldr	r3, [r3, #20]
    1482:	f844 3d04 	str.w	r3, [r4, #-4]!
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1486:	4d10      	ldr	r5, [pc, #64]	; (14c8 <msg_free+0x64>)
	while (cont != NULL) {
    1488:	9b03      	ldr	r3, [sp, #12]
    148a:	b9b3      	cbnz	r3, 14ba <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    148c:	a901      	add	r1, sp, #4
    148e:	480e      	ldr	r0, [pc, #56]	; (14c8 <msg_free+0x64>)
    1490:	f002 fd1a 	bl	3ec8 <k_mem_slab_free>
}
    1494:	b004      	add	sp, #16
    1496:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    1498:	2d00      	cmp	r5, #0
    149a:	d0ec      	beq.n	1476 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    149c:	42ac      	cmp	r4, r5
    149e:	9801      	ldr	r0, [sp, #4]
    14a0:	d2e9      	bcs.n	1476 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    14a2:	4621      	mov	r1, r4
    14a4:	f7ff ffc1 	bl	142a <log_msg_arg_get>
    14a8:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    14aa:	f7ff ff11 	bl	12d0 <log_is_strdup>
    14ae:	b110      	cbz	r0, 14b6 <msg_free+0x52>
				log_free(buf);
    14b0:	4630      	mov	r0, r6
    14b2:	f7ff ff1b 	bl	12ec <log_free>
		for (i = 0; i < nargs; i++) {
    14b6:	3401      	adds	r4, #1
    14b8:	e7f0      	b.n	149c <msg_free+0x38>
		next = cont->next;
    14ba:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    14bc:	4621      	mov	r1, r4
    14be:	4628      	mov	r0, r5
    14c0:	f002 fd02 	bl	3ec8 <k_mem_slab_free>
		cont = next;
    14c4:	9603      	str	r6, [sp, #12]
    14c6:	e7df      	b.n	1488 <msg_free+0x24>
    14c8:	20000750 	.word	0x20000750

000014cc <log_msg_put>:
{
    14cc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    14ce:	1d02      	adds	r2, r0, #4
    14d0:	f3bf 8f5b 	dmb	ish
    14d4:	e852 1f00 	ldrex	r1, [r2]
    14d8:	3901      	subs	r1, #1
    14da:	e842 1c00 	strex	ip, r1, [r2]
    14de:	f1bc 0f00 	cmp.w	ip, #0
    14e2:	d1f7      	bne.n	14d4 <log_msg_put+0x8>
    14e4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    14e8:	685b      	ldr	r3, [r3, #4]
    14ea:	b90b      	cbnz	r3, 14f0 <log_msg_put+0x24>
		msg_free(msg);
    14ec:	f7ff bfba 	b.w	1464 <msg_free>
}
    14f0:	4770      	bx	lr

000014f2 <log_msg_str_get>:
}
    14f2:	6900      	ldr	r0, [r0, #16]
    14f4:	4770      	bx	lr

000014f6 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    14f6:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    14f8:	2400      	movs	r4, #0
    14fa:	9400      	str	r4, [sp, #0]
    14fc:	f7ff ff10 	bl	1320 <log_msg_hexdump_data_op>
}
    1500:	b002      	add	sp, #8
    1502:	bd10      	pop	{r4, pc}

00001504 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1504:	b40e      	push	{r1, r2, r3}
    1506:	b503      	push	{r0, r1, lr}
    1508:	ab03      	add	r3, sp, #12
	va_list args;
	int length = 0;

	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    150a:	4601      	mov	r1, r0
{
    150c:	f853 2b04 	ldr.w	r2, [r3], #4
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    1510:	4804      	ldr	r0, [pc, #16]	; (1524 <print_formatted+0x20>)
	va_start(args, fmt);
    1512:	9301      	str	r3, [sp, #4]
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
    1514:	f001 fa52 	bl	29bc <_prf>
	_vprintk(out_func, (void *)log_output, fmt, args);
#endif
	va_end(args);

	return length;
}
    1518:	b002      	add	sp, #8
    151a:	f85d eb04 	ldr.w	lr, [sp], #4
    151e:	b003      	add	sp, #12
    1520:	4770      	bx	lr
    1522:	bf00      	nop
    1524:	0000154d 	.word	0x0000154d

00001528 <log_output_flush>:

void log_output_flush(const struct log_output *log_output)
{
	int offset = 0;
	int len = log_output->control_block->offset;
    1528:	6843      	ldr	r3, [r0, #4]
{
    152a:	b570      	push	{r4, r5, r6, lr}
	int len = log_output->control_block->offset;
    152c:	681c      	ldr	r4, [r3, #0]
{
    152e:	4605      	mov	r5, r0
	int offset = 0;
    1530:	2600      	movs	r6, #0
	int processed;

	do {
		processed = log_output->func(&log_output->buf[offset], len,
    1532:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
    1536:	4621      	mov	r1, r4
    1538:	4430      	add	r0, r6
    153a:	682b      	ldr	r3, [r5, #0]
    153c:	6852      	ldr	r2, [r2, #4]
    153e:	4798      	blx	r3
					     log_output->control_block->ctx);
		len -= processed;
		offset += processed;
	} while (len);
    1540:	1a24      	subs	r4, r4, r0
		offset += processed;
    1542:	4406      	add	r6, r0
	} while (len);
    1544:	d1f5      	bne.n	1532 <log_output_flush+0xa>

	log_output->control_block->offset = 0;
    1546:	686b      	ldr	r3, [r5, #4]
    1548:	601c      	str	r4, [r3, #0]
}
    154a:	bd70      	pop	{r4, r5, r6, pc}

0000154c <out_func>:
{
    154c:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    154e:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    1556:	684a      	ldr	r2, [r1, #4]
    1558:	6813      	ldr	r3, [r2, #0]
    155a:	3301      	adds	r3, #1
    155c:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    155e:	68ca      	ldr	r2, [r1, #12]
    1560:	4293      	cmp	r3, r2
    1562:	d102      	bne.n	156a <out_func+0x1e>
		log_output_flush(out_ctx);
    1564:	4608      	mov	r0, r1
    1566:	f7ff ffdf 	bl	1528 <log_output_flush>
}
    156a:	2000      	movs	r0, #0
    156c:	bd08      	pop	{r3, pc}
	...

00001570 <log_output_msg_process>:
}

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    1570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    1574:	7a0b      	ldrb	r3, [r1, #8]
    1576:	b093      	sub	sp, #76	; 0x4c
	if (!log_msg_is_raw_string(msg)) {
    1578:	f003 0305 	and.w	r3, r3, #5
    157c:	2b05      	cmp	r3, #5
{
    157e:	4605      	mov	r5, r0
    1580:	460c      	mov	r4, r1
    1582:	9209      	str	r2, [sp, #36]	; 0x24
	if (!log_msg_is_raw_string(msg)) {
    1584:	d07e      	beq.n	1684 <log_output_msg_process+0x114>
		if (stamp) {
    1586:	f012 0602 	ands.w	r6, r2, #2
		bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    158a:	4613      	mov	r3, r2
    158c:	f002 0801 	and.w	r8, r2, #1
		bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1590:	f002 0708 	and.w	r7, r2, #8
		if (stamp) {
    1594:	d006      	beq.n	15a4 <log_output_msg_process+0x34>
	if (!format) {
    1596:	075e      	lsls	r6, r3, #29
	u32_t timestamp = log_msg_timestamp_get(msg);
    1598:	68ca      	ldr	r2, [r1, #12]
	if (!format) {
    159a:	d448      	bmi.n	162e <log_output_msg_process+0xbe>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    159c:	49cc      	ldr	r1, [pc, #816]	; (18d0 <log_output_msg_process+0x360>)
    159e:	f7ff ffb1 	bl	1504 <print_formatted>
		length = print_formatted(log_output,
    15a2:	4606      	mov	r6, r0
	if (color) {
    15a4:	f1b8 0f00 	cmp.w	r8, #0
    15a8:	d00a      	beq.n	15c0 <log_output_msg_process+0x50>
		if (colors[level] != NULL) {
    15aa:	7aa3      	ldrb	r3, [r4, #10]
    15ac:	4ac9      	ldr	r2, [pc, #804]	; (18d4 <log_output_msg_process+0x364>)
    15ae:	f003 0307 	and.w	r3, r3, #7
    15b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    15b6:	b11a      	cbz	r2, 15c0 <log_output_msg_process+0x50>
			print_formatted(log_output, "%s", color);
    15b8:	49c7      	ldr	r1, [pc, #796]	; (18d8 <log_output_msg_process+0x368>)
    15ba:	4628      	mov	r0, r5
    15bc:	f7ff ffa2 	bl	1504 <print_formatted>
	return msg->hdr.ids.domain_id;
    15c0:	7aa3      	ldrb	r3, [r4, #10]
	return msg->hdr.ids.source_id;
    15c2:	f8b4 800a 	ldrh.w	r8, [r4, #10]
	return msg->hdr.ids.domain_id;
    15c6:	f3c3 09c2 	ubfx	r9, r3, #3, #3
	return msg->hdr.ids.source_id;
    15ca:	ea4f 1898 	mov.w	r8, r8, lsr #6
	if (level_on) {
    15ce:	b14f      	cbz	r7, 15e4 <log_output_msg_process+0x74>
	return msg->hdr.ids.level;
    15d0:	f003 0307 	and.w	r3, r3, #7
		total += print_formatted(log_output, "<%s> ", severity[level]);
    15d4:	4ac1      	ldr	r2, [pc, #772]	; (18dc <log_output_msg_process+0x36c>)
    15d6:	49c2      	ldr	r1, [pc, #776]	; (18e0 <log_output_msg_process+0x370>)
    15d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    15dc:	4628      	mov	r0, r5
    15de:	f7ff ff91 	bl	1504 <print_formatted>
    15e2:	4607      	mov	r7, r0
	total += print_formatted(log_output,
    15e4:	4641      	mov	r1, r8
    15e6:	4648      	mov	r0, r9
    15e8:	f7ff fe64 	bl	12b4 <log_source_name_get>
    15ec:	49bd      	ldr	r1, [pc, #756]	; (18e4 <log_output_msg_process+0x374>)
    15ee:	4602      	mov	r2, r0
    15f0:	4628      	mov	r0, r5
    15f2:	f7ff ff87 	bl	1504 <print_formatted>
    15f6:	4407      	add	r7, r0
		length += ids_print(msg, log_output, level_on);
    15f8:	443e      	add	r6, r7
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    15fa:	7a23      	ldrb	r3, [r4, #8]
	int prefix_offset = prefix_print(msg, log_output, flags);

	if (log_msg_is_std(msg)) {
    15fc:	07d9      	lsls	r1, r3, #31
    15fe:	f100 81fc 	bmi.w	19fa <log_output_msg_process+0x48a>
	const char *str = log_msg_str_get(msg);
    1602:	4620      	mov	r0, r4
    1604:	f7ff ff75 	bl	14f2 <log_msg_str_get>
    1608:	4606      	mov	r6, r0
	switch (log_msg_nargs_get(msg)) {
    160a:	4620      	mov	r0, r4
    160c:	f7ff ff0a 	bl	1424 <log_msg_nargs_get>
    1610:	280a      	cmp	r0, #10
    1612:	d847      	bhi.n	16a4 <log_output_msg_process+0x134>
    1614:	e8df f010 	tbh	[pc, r0, lsl #1]
    1618:	003d0038 	.word	0x003d0038
    161c:	007a006a 	.word	0x007a006a
    1620:	00ac0090 	.word	0x00ac0090
    1624:	00f700cf 	.word	0x00f700cf
    1628:	01740126 	.word	0x01740126
    162c:	01af      	.short	0x01af
	} else if (freq) {
    162e:	4bae      	ldr	r3, [pc, #696]	; (18e8 <log_output_msg_process+0x378>)
    1630:	681e      	ldr	r6, [r3, #0]
    1632:	2e00      	cmp	r6, #0
    1634:	d0b6      	beq.n	15a4 <log_output_msg_process+0x34>
		timestamp /= timestamp_div;
    1636:	4bad      	ldr	r3, [pc, #692]	; (18ec <log_output_msg_process+0x37c>)
    1638:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    163c:	6819      	ldr	r1, [r3, #0]
    163e:	fbb2 f1f1 	udiv	r1, r2, r1
		ms = (remainder * 1000) / freq;
    1642:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    1646:	fbb1 f3f6 	udiv	r3, r1, r6
    164a:	fbb3 f2fe 	udiv	r2, r3, lr
    164e:	fb0e 3e12 	mls	lr, lr, r2, r3
		remainder = timestamp % freq;
    1652:	fb06 1313 	mls	r3, r6, r3, r1
		ms = (remainder * 1000) / freq;
    1656:	fb0c f103 	mul.w	r1, ip, r3
		mins = seconds / 60;
    165a:	f04f 093c 	mov.w	r9, #60	; 0x3c
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    165e:	fbb1 faf6 	udiv	sl, r1, r6
    1662:	fb06 111a 	mls	r1, r6, sl, r1
    1666:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    166a:	fbbe f3f9 	udiv	r3, lr, r9
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    166e:	fbb1 f6f6 	udiv	r6, r1, r6
		length = print_formatted(log_output,
    1672:	fb09 e113 	mls	r1, r9, r3, lr
    1676:	9100      	str	r1, [sp, #0]
    1678:	e9cd a601 	strd	sl, r6, [sp, #4]
    167c:	499c      	ldr	r1, [pc, #624]	; (18f0 <log_output_msg_process+0x380>)
    167e:	f7ff ff41 	bl	1504 <print_formatted>
    1682:	e78e      	b.n	15a2 <log_output_msg_process+0x32>
	int length = 0;
    1684:	2600      	movs	r6, #0
    1686:	e7b8      	b.n	15fa <log_output_msg_process+0x8a>
		print_formatted(log_output, str);
    1688:	4631      	mov	r1, r6
	print_formatted(log_output, "\r");
    168a:	4628      	mov	r0, r5
    168c:	f7ff ff3a 	bl	1504 <print_formatted>
    1690:	e008      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str, log_msg_arg_get(msg, 0));
    1692:	2100      	movs	r1, #0
    1694:	4620      	mov	r0, r4
    1696:	f7ff fec8 	bl	142a <log_msg_arg_get>
    169a:	4631      	mov	r1, r6
    169c:	4602      	mov	r2, r0
    169e:	4628      	mov	r0, r5
    16a0:	f7ff ff30 	bl	1504 <print_formatted>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    16a4:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_raw_string(msg)) {
    16a6:	f003 0305 	and.w	r3, r3, #5
    16aa:	2b05      	cmp	r3, #5
    16ac:	d018      	beq.n	16e0 <log_output_msg_process+0x170>
	if (color) {
    16ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16b0:	07d9      	lsls	r1, r3, #31
    16b2:	d50b      	bpl.n	16cc <log_output_msg_process+0x15c>
	return msg->hdr.ids.level;
    16b4:	7aa3      	ldrb	r3, [r4, #10]
		if (colors[level] != NULL) {
    16b6:	4a87      	ldr	r2, [pc, #540]	; (18d4 <log_output_msg_process+0x364>)
    16b8:	f003 0307 	and.w	r3, r3, #7
    16bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    16c0:	b123      	cbz	r3, 16cc <log_output_msg_process+0x15c>
			print_formatted(log_output, "%s", color);
    16c2:	4a8c      	ldr	r2, [pc, #560]	; (18f4 <log_output_msg_process+0x384>)
    16c4:	4984      	ldr	r1, [pc, #528]	; (18d8 <log_output_msg_process+0x368>)
    16c6:	4628      	mov	r0, r5
    16c8:	f7ff ff1c 	bl	1504 <print_formatted>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    16cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16ce:	06da      	lsls	r2, r3, #27
    16d0:	d406      	bmi.n	16e0 <log_output_msg_process+0x170>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    16d2:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    16d4:	bf4c      	ite	mi
    16d6:	4988      	ldrmi	r1, [pc, #544]	; (18f8 <log_output_msg_process+0x388>)
		print_formatted(ctx, "\r\n");
    16d8:	4988      	ldrpl	r1, [pc, #544]	; (18fc <log_output_msg_process+0x38c>)
    16da:	4628      	mov	r0, r5
    16dc:	f7ff ff12 	bl	1504 <print_formatted>
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	postfix_print(msg, log_output, flags);

	log_output_flush(log_output);
    16e0:	4628      	mov	r0, r5
    16e2:	f7ff ff21 	bl	1528 <log_output_flush>
}
    16e6:	b013      	add	sp, #76	; 0x4c
    16e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		print_formatted(log_output, str,
    16ec:	2100      	movs	r1, #0
    16ee:	4620      	mov	r0, r4
    16f0:	f7ff fe9b 	bl	142a <log_msg_arg_get>
    16f4:	2101      	movs	r1, #1
    16f6:	4607      	mov	r7, r0
    16f8:	4620      	mov	r0, r4
    16fa:	f7ff fe96 	bl	142a <log_msg_arg_get>
    16fe:	463a      	mov	r2, r7
    1700:	4603      	mov	r3, r0
    1702:	4631      	mov	r1, r6
    1704:	4628      	mov	r0, r5
    1706:	f7ff fefd 	bl	1504 <print_formatted>
    170a:	e7cb      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    170c:	2100      	movs	r1, #0
    170e:	4620      	mov	r0, r4
    1710:	f7ff fe8b 	bl	142a <log_msg_arg_get>
    1714:	2101      	movs	r1, #1
    1716:	4607      	mov	r7, r0
    1718:	4620      	mov	r0, r4
    171a:	f7ff fe86 	bl	142a <log_msg_arg_get>
    171e:	2102      	movs	r1, #2
    1720:	4680      	mov	r8, r0
    1722:	4620      	mov	r0, r4
    1724:	f7ff fe81 	bl	142a <log_msg_arg_get>
    1728:	4643      	mov	r3, r8
    172a:	9000      	str	r0, [sp, #0]
    172c:	463a      	mov	r2, r7
    172e:	4631      	mov	r1, r6
    1730:	4628      	mov	r0, r5
    1732:	f7ff fee7 	bl	1504 <print_formatted>
    1736:	e7b5      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1738:	2100      	movs	r1, #0
    173a:	4620      	mov	r0, r4
    173c:	f7ff fe75 	bl	142a <log_msg_arg_get>
    1740:	2101      	movs	r1, #1
    1742:	4607      	mov	r7, r0
    1744:	4620      	mov	r0, r4
    1746:	f7ff fe70 	bl	142a <log_msg_arg_get>
    174a:	2102      	movs	r1, #2
    174c:	4680      	mov	r8, r0
    174e:	4620      	mov	r0, r4
    1750:	f7ff fe6b 	bl	142a <log_msg_arg_get>
    1754:	2103      	movs	r1, #3
    1756:	4681      	mov	r9, r0
    1758:	4620      	mov	r0, r4
    175a:	f7ff fe66 	bl	142a <log_msg_arg_get>
    175e:	4643      	mov	r3, r8
    1760:	e9cd 9000 	strd	r9, r0, [sp]
    1764:	463a      	mov	r2, r7
    1766:	4631      	mov	r1, r6
    1768:	4628      	mov	r0, r5
    176a:	f7ff fecb 	bl	1504 <print_formatted>
    176e:	e799      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1770:	2100      	movs	r1, #0
    1772:	4620      	mov	r0, r4
    1774:	f7ff fe59 	bl	142a <log_msg_arg_get>
    1778:	2101      	movs	r1, #1
    177a:	4607      	mov	r7, r0
    177c:	4620      	mov	r0, r4
    177e:	f7ff fe54 	bl	142a <log_msg_arg_get>
    1782:	2102      	movs	r1, #2
    1784:	4680      	mov	r8, r0
    1786:	4620      	mov	r0, r4
    1788:	f7ff fe4f 	bl	142a <log_msg_arg_get>
    178c:	2103      	movs	r1, #3
    178e:	4681      	mov	r9, r0
    1790:	4620      	mov	r0, r4
    1792:	f7ff fe4a 	bl	142a <log_msg_arg_get>
    1796:	2104      	movs	r1, #4
    1798:	4682      	mov	sl, r0
    179a:	4620      	mov	r0, r4
    179c:	f7ff fe45 	bl	142a <log_msg_arg_get>
    17a0:	f8cd 9000 	str.w	r9, [sp]
    17a4:	e9cd a001 	strd	sl, r0, [sp, #4]
    17a8:	4643      	mov	r3, r8
    17aa:	463a      	mov	r2, r7
    17ac:	4631      	mov	r1, r6
    17ae:	4628      	mov	r0, r5
    17b0:	f7ff fea8 	bl	1504 <print_formatted>
    17b4:	e776      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    17b6:	2100      	movs	r1, #0
    17b8:	4620      	mov	r0, r4
    17ba:	f7ff fe36 	bl	142a <log_msg_arg_get>
    17be:	2101      	movs	r1, #1
    17c0:	4607      	mov	r7, r0
    17c2:	4620      	mov	r0, r4
    17c4:	f7ff fe31 	bl	142a <log_msg_arg_get>
    17c8:	2102      	movs	r1, #2
    17ca:	4680      	mov	r8, r0
    17cc:	4620      	mov	r0, r4
    17ce:	f7ff fe2c 	bl	142a <log_msg_arg_get>
    17d2:	2103      	movs	r1, #3
    17d4:	4681      	mov	r9, r0
    17d6:	4620      	mov	r0, r4
    17d8:	f7ff fe27 	bl	142a <log_msg_arg_get>
    17dc:	2104      	movs	r1, #4
    17de:	4682      	mov	sl, r0
    17e0:	4620      	mov	r0, r4
    17e2:	f7ff fe22 	bl	142a <log_msg_arg_get>
    17e6:	2105      	movs	r1, #5
    17e8:	4683      	mov	fp, r0
    17ea:	4620      	mov	r0, r4
    17ec:	f7ff fe1d 	bl	142a <log_msg_arg_get>
    17f0:	e9cd 9a00 	strd	r9, sl, [sp]
    17f4:	e9cd b002 	strd	fp, r0, [sp, #8]
    17f8:	4643      	mov	r3, r8
    17fa:	463a      	mov	r2, r7
    17fc:	4631      	mov	r1, r6
    17fe:	4628      	mov	r0, r5
    1800:	f7ff fe80 	bl	1504 <print_formatted>
    1804:	e74e      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1806:	2100      	movs	r1, #0
    1808:	4620      	mov	r0, r4
    180a:	f7ff fe0e 	bl	142a <log_msg_arg_get>
    180e:	2101      	movs	r1, #1
    1810:	4607      	mov	r7, r0
    1812:	4620      	mov	r0, r4
    1814:	f7ff fe09 	bl	142a <log_msg_arg_get>
    1818:	2102      	movs	r1, #2
    181a:	4680      	mov	r8, r0
    181c:	4620      	mov	r0, r4
    181e:	f7ff fe04 	bl	142a <log_msg_arg_get>
    1822:	2103      	movs	r1, #3
    1824:	4681      	mov	r9, r0
    1826:	4620      	mov	r0, r4
    1828:	f7ff fdff 	bl	142a <log_msg_arg_get>
    182c:	2104      	movs	r1, #4
    182e:	4682      	mov	sl, r0
    1830:	4620      	mov	r0, r4
    1832:	f7ff fdfa 	bl	142a <log_msg_arg_get>
    1836:	2105      	movs	r1, #5
    1838:	4683      	mov	fp, r0
    183a:	4620      	mov	r0, r4
    183c:	f7ff fdf5 	bl	142a <log_msg_arg_get>
    1840:	2106      	movs	r1, #6
    1842:	900a      	str	r0, [sp, #40]	; 0x28
    1844:	4620      	mov	r0, r4
    1846:	f7ff fdf0 	bl	142a <log_msg_arg_get>
    184a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    184c:	9004      	str	r0, [sp, #16]
    184e:	e9cd b302 	strd	fp, r3, [sp, #8]
    1852:	e9cd 9a00 	strd	r9, sl, [sp]
    1856:	4643      	mov	r3, r8
    1858:	463a      	mov	r2, r7
    185a:	4631      	mov	r1, r6
    185c:	4628      	mov	r0, r5
    185e:	f7ff fe51 	bl	1504 <print_formatted>
    1862:	e71f      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1864:	2100      	movs	r1, #0
    1866:	4620      	mov	r0, r4
    1868:	f7ff fddf 	bl	142a <log_msg_arg_get>
    186c:	2101      	movs	r1, #1
    186e:	4607      	mov	r7, r0
    1870:	4620      	mov	r0, r4
    1872:	f7ff fdda 	bl	142a <log_msg_arg_get>
    1876:	2102      	movs	r1, #2
    1878:	4680      	mov	r8, r0
    187a:	4620      	mov	r0, r4
    187c:	f7ff fdd5 	bl	142a <log_msg_arg_get>
    1880:	2103      	movs	r1, #3
    1882:	4681      	mov	r9, r0
    1884:	4620      	mov	r0, r4
    1886:	f7ff fdd0 	bl	142a <log_msg_arg_get>
    188a:	2104      	movs	r1, #4
    188c:	4682      	mov	sl, r0
    188e:	4620      	mov	r0, r4
    1890:	f7ff fdcb 	bl	142a <log_msg_arg_get>
    1894:	2105      	movs	r1, #5
    1896:	4683      	mov	fp, r0
    1898:	4620      	mov	r0, r4
    189a:	f7ff fdc6 	bl	142a <log_msg_arg_get>
    189e:	2106      	movs	r1, #6
    18a0:	900b      	str	r0, [sp, #44]	; 0x2c
    18a2:	4620      	mov	r0, r4
    18a4:	f7ff fdc1 	bl	142a <log_msg_arg_get>
    18a8:	2107      	movs	r1, #7
    18aa:	900a      	str	r0, [sp, #40]	; 0x28
    18ac:	4620      	mov	r0, r4
    18ae:	f7ff fdbc 	bl	142a <log_msg_arg_get>
    18b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18b6:	9005      	str	r0, [sp, #20]
    18b8:	9204      	str	r2, [sp, #16]
    18ba:	e9cd b302 	strd	fp, r3, [sp, #8]
    18be:	e9cd 9a00 	strd	r9, sl, [sp]
    18c2:	4643      	mov	r3, r8
    18c4:	463a      	mov	r2, r7
    18c6:	4631      	mov	r1, r6
    18c8:	4628      	mov	r0, r5
    18ca:	f7ff fe1b 	bl	1504 <print_formatted>
    18ce:	e6e9      	b.n	16a4 <log_output_msg_process+0x134>
    18d0:	00004de8 	.word	0x00004de8
    18d4:	00004dd4 	.word	0x00004dd4
    18d8:	00004e0d 	.word	0x00004e0d
    18dc:	00004e34 	.word	0x00004e34
    18e0:	00004e10 	.word	0x00004e10
    18e4:	00004e16 	.word	0x00004e16
    18e8:	20000438 	.word	0x20000438
    18ec:	2000043c 	.word	0x2000043c
    18f0:	00004df1 	.word	0x00004df1
    18f4:	00004e2c 	.word	0x00004e2c
    18f8:	00004e1b 	.word	0x00004e1b
    18fc:	00004e1a 	.word	0x00004e1a
		print_formatted(log_output, str,
    1900:	2100      	movs	r1, #0
    1902:	4620      	mov	r0, r4
    1904:	f7ff fd91 	bl	142a <log_msg_arg_get>
    1908:	2101      	movs	r1, #1
    190a:	900c      	str	r0, [sp, #48]	; 0x30
    190c:	4620      	mov	r0, r4
    190e:	f7ff fd8c 	bl	142a <log_msg_arg_get>
    1912:	2102      	movs	r1, #2
    1914:	900b      	str	r0, [sp, #44]	; 0x2c
    1916:	4620      	mov	r0, r4
    1918:	f7ff fd87 	bl	142a <log_msg_arg_get>
    191c:	2103      	movs	r1, #3
    191e:	4607      	mov	r7, r0
    1920:	4620      	mov	r0, r4
    1922:	f7ff fd82 	bl	142a <log_msg_arg_get>
    1926:	2104      	movs	r1, #4
    1928:	4680      	mov	r8, r0
    192a:	4620      	mov	r0, r4
    192c:	f7ff fd7d 	bl	142a <log_msg_arg_get>
    1930:	2105      	movs	r1, #5
    1932:	4681      	mov	r9, r0
    1934:	4620      	mov	r0, r4
    1936:	f7ff fd78 	bl	142a <log_msg_arg_get>
    193a:	2106      	movs	r1, #6
    193c:	4682      	mov	sl, r0
    193e:	4620      	mov	r0, r4
    1940:	f7ff fd73 	bl	142a <log_msg_arg_get>
    1944:	2107      	movs	r1, #7
    1946:	4683      	mov	fp, r0
    1948:	4620      	mov	r0, r4
    194a:	f7ff fd6e 	bl	142a <log_msg_arg_get>
    194e:	2108      	movs	r1, #8
    1950:	900a      	str	r0, [sp, #40]	; 0x28
    1952:	4620      	mov	r0, r4
    1954:	f7ff fd69 	bl	142a <log_msg_arg_get>
    1958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    195a:	9006      	str	r0, [sp, #24]
    195c:	e9cd b304 	strd	fp, r3, [sp, #16]
    1960:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    1964:	e9cd 7800 	strd	r7, r8, [sp]
    1968:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
    196c:	4631      	mov	r1, r6
    196e:	4628      	mov	r0, r5
    1970:	f7ff fdc8 	bl	1504 <print_formatted>
    1974:	e696      	b.n	16a4 <log_output_msg_process+0x134>
		print_formatted(log_output, str,
    1976:	2100      	movs	r1, #0
    1978:	4620      	mov	r0, r4
    197a:	f7ff fd56 	bl	142a <log_msg_arg_get>
    197e:	2101      	movs	r1, #1
    1980:	900d      	str	r0, [sp, #52]	; 0x34
    1982:	4620      	mov	r0, r4
    1984:	f7ff fd51 	bl	142a <log_msg_arg_get>
    1988:	2102      	movs	r1, #2
    198a:	900c      	str	r0, [sp, #48]	; 0x30
    198c:	4620      	mov	r0, r4
    198e:	f7ff fd4c 	bl	142a <log_msg_arg_get>
    1992:	2103      	movs	r1, #3
    1994:	900a      	str	r0, [sp, #40]	; 0x28
    1996:	4620      	mov	r0, r4
    1998:	f7ff fd47 	bl	142a <log_msg_arg_get>
    199c:	2104      	movs	r1, #4
    199e:	4607      	mov	r7, r0
    19a0:	4620      	mov	r0, r4
    19a2:	f7ff fd42 	bl	142a <log_msg_arg_get>
    19a6:	2105      	movs	r1, #5
    19a8:	4680      	mov	r8, r0
    19aa:	4620      	mov	r0, r4
    19ac:	f7ff fd3d 	bl	142a <log_msg_arg_get>
    19b0:	2106      	movs	r1, #6
    19b2:	4681      	mov	r9, r0
    19b4:	4620      	mov	r0, r4
    19b6:	f7ff fd38 	bl	142a <log_msg_arg_get>
    19ba:	2107      	movs	r1, #7
    19bc:	4682      	mov	sl, r0
    19be:	4620      	mov	r0, r4
    19c0:	f7ff fd33 	bl	142a <log_msg_arg_get>
    19c4:	2108      	movs	r1, #8
    19c6:	4683      	mov	fp, r0
    19c8:	4620      	mov	r0, r4
    19ca:	f7ff fd2e 	bl	142a <log_msg_arg_get>
    19ce:	2109      	movs	r1, #9
    19d0:	900b      	str	r0, [sp, #44]	; 0x2c
    19d2:	4620      	mov	r0, r4
    19d4:	f7ff fd29 	bl	142a <log_msg_arg_get>
    19d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19da:	9007      	str	r0, [sp, #28]
    19dc:	e9cd b305 	strd	fp, r3, [sp, #20]
    19e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19e2:	9300      	str	r3, [sp, #0]
    19e4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
    19e8:	e9cd 7801 	strd	r7, r8, [sp, #4]
    19ec:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    19f0:	4631      	mov	r1, r6
    19f2:	4628      	mov	r0, r5
    19f4:	f7ff fd86 	bl	1504 <print_formatted>
    19f8:	e654      	b.n	16a4 <log_output_msg_process+0x134>
	return (msg->hdr.params.generic.type == LOG_MSG_TYPE_HEXDUMP) &&
    19fa:	7a23      	ldrb	r3, [r4, #8]
	} else if (log_msg_is_raw_string(msg)) {
    19fc:	f003 0305 	and.w	r3, r3, #5
    1a00:	2b05      	cmp	r3, #5
    1a02:	af10      	add	r7, sp, #64	; 0x40
    1a04:	d114      	bne.n	1a30 <log_output_msg_process+0x4c0>
	size_t offset = 0;
    1a06:	2600      	movs	r6, #0
		length = log_output->size;
    1a08:	68eb      	ldr	r3, [r5, #12]
    1a0a:	9310      	str	r3, [sp, #64]	; 0x40
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1a0c:	463a      	mov	r2, r7
    1a0e:	4633      	mov	r3, r6
    1a10:	68a9      	ldr	r1, [r5, #8]
    1a12:	4620      	mov	r0, r4
    1a14:	f7ff fd6f 	bl	14f6 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    1a18:	686b      	ldr	r3, [r5, #4]
    1a1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a1c:	601a      	str	r2, [r3, #0]
		log_output_flush(log_output);
    1a1e:	4628      	mov	r0, r5
    1a20:	f7ff fd82 	bl	1528 <log_output_flush>
		offset += length;
    1a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1a26:	441e      	add	r6, r3
	} while (length > 0);
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d1ed      	bne.n	1a08 <log_output_msg_process+0x498>
	print_formatted(log_output, "\r");
    1a2c:	4934      	ldr	r1, [pc, #208]	; (1b00 <log_output_msg_process+0x590>)
    1a2e:	e62c      	b.n	168a <log_output_msg_process+0x11a>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1a30:	4620      	mov	r0, r4
    1a32:	f7ff fd5e 	bl	14f2 <log_msg_str_get>
    1a36:	4933      	ldr	r1, [pc, #204]	; (1b04 <log_output_msg_process+0x594>)
			print_formatted(log_output, " ");
    1a38:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1b1c <log_output_msg_process+0x5ac>
				print_formatted(log_output, "%02x ", buf[i]);
    1a3c:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1b20 <log_output_msg_process+0x5b0>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1a40:	4602      	mov	r2, r0
    1a42:	4628      	mov	r0, r5
    1a44:	f7ff fd5e 	bl	1504 <print_formatted>
	u32_t offset = 0;
    1a48:	f04f 0800 	mov.w	r8, #0
	size_t length = sizeof(buf);
    1a4c:	aa12      	add	r2, sp, #72	; 0x48
    1a4e:	2308      	movs	r3, #8
    1a50:	f842 3d0c 	str.w	r3, [r2, #-12]!
	log_msg_hexdump_data_get(msg, buf, &length, offset);
    1a54:	4639      	mov	r1, r7
    1a56:	4643      	mov	r3, r8
    1a58:	4620      	mov	r0, r4
    1a5a:	f7ff fd4c 	bl	14f6 <log_msg_hexdump_data_get>
	if (length > 0) {
    1a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a60:	2b00      	cmp	r3, #0
    1a62:	d036      	beq.n	1ad2 <log_output_msg_process+0x562>
	if (flags & LOG_OUTPUT_FLAG_CRLF_NONE) {
    1a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a66:	06da      	lsls	r2, r3, #27
    1a68:	d406      	bmi.n	1a78 <log_output_msg_process+0x508>
	if (flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) {
    1a6a:	0698      	lsls	r0, r3, #26
		print_formatted(ctx, "\n");
    1a6c:	bf4c      	ite	mi
    1a6e:	4926      	ldrmi	r1, [pc, #152]	; (1b08 <log_output_msg_process+0x598>)
		print_formatted(ctx, "\r\n");
    1a70:	4926      	ldrpl	r1, [pc, #152]	; (1b0c <log_output_msg_process+0x59c>)
    1a72:	4628      	mov	r0, r5
    1a74:	f7ff fd46 	bl	1504 <print_formatted>
	u32_t offset = 0;
    1a78:	f04f 0a00 	mov.w	sl, #0
		for (int i = 0; i < prefix_offset; i++) {
    1a7c:	4556      	cmp	r6, sl
    1a7e:	dc2e      	bgt.n	1ade <log_output_msg_process+0x56e>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a80:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    1a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a86:	459a      	cmp	sl, r3
    1a88:	d230      	bcs.n	1aec <log_output_msg_process+0x57c>
				print_formatted(log_output, "%02x ", buf[i]);
    1a8a:	f817 200a 	ldrb.w	r2, [r7, sl]
    1a8e:	4659      	mov	r1, fp
    1a90:	4628      	mov	r0, r5
    1a92:	f7ff fd37 	bl	1504 <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a96:	f10a 0a01 	add.w	sl, sl, #1
    1a9a:	f1ba 0f08 	cmp.w	sl, #8
    1a9e:	d1f1      	bne.n	1a84 <log_output_msg_process+0x514>
		print_formatted(log_output, "|");
    1aa0:	491b      	ldr	r1, [pc, #108]	; (1b10 <log_output_msg_process+0x5a0>)
    1aa2:	4628      	mov	r0, r5
    1aa4:	f7ff fd2e 	bl	1504 <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1aa8:	f04f 0a00 	mov.w	sl, #0
			if (i < length) {
    1aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1aae:	4592      	cmp	sl, r2
    1ab0:	d221      	bcs.n	1af6 <log_output_msg_process+0x586>
				char c = (char)buf[i];
    1ab2:	f817 200a 	ldrb.w	r2, [r7, sl]
	return ((((unsigned)c) > ' ') && (((unsigned)c) <= '~'));
}

static inline int isprint(int c)
{
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    1ab6:	f1a2 0120 	sub.w	r1, r2, #32
				print_formatted(log_output, "%c",
    1aba:	295f      	cmp	r1, #95	; 0x5f
    1abc:	bf28      	it	cs
    1abe:	222e      	movcs	r2, #46	; 0x2e
    1ac0:	4914      	ldr	r1, [pc, #80]	; (1b14 <log_output_msg_process+0x5a4>)
    1ac2:	4628      	mov	r0, r5
    1ac4:	f7ff fd1e 	bl	1504 <print_formatted>
		for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1ac8:	f10a 0a01 	add.w	sl, sl, #1
    1acc:	f1ba 0f08 	cmp.w	sl, #8
    1ad0:	d1ec      	bne.n	1aac <log_output_msg_process+0x53c>
	return length;
    1ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if (length < HEXDUMP_BYTES_IN_LINE) {
    1ad4:	2b07      	cmp	r3, #7
    1ad6:	f67f ade5 	bls.w	16a4 <log_output_msg_process+0x134>
		offset += length;
    1ada:	4498      	add	r8, r3
    1adc:	e7b6      	b.n	1a4c <log_output_msg_process+0x4dc>
			print_formatted(log_output, " ");
    1ade:	4649      	mov	r1, r9
    1ae0:	4628      	mov	r0, r5
    1ae2:	f7ff fd0f 	bl	1504 <print_formatted>
		for (int i = 0; i < prefix_offset; i++) {
    1ae6:	f10a 0a01 	add.w	sl, sl, #1
    1aea:	e7c7      	b.n	1a7c <log_output_msg_process+0x50c>
				print_formatted(log_output, "   ");
    1aec:	490a      	ldr	r1, [pc, #40]	; (1b18 <log_output_msg_process+0x5a8>)
    1aee:	4628      	mov	r0, r5
    1af0:	f7ff fd08 	bl	1504 <print_formatted>
    1af4:	e7cf      	b.n	1a96 <log_output_msg_process+0x526>
				print_formatted(log_output, " ");
    1af6:	4649      	mov	r1, r9
    1af8:	4628      	mov	r0, r5
    1afa:	f7ff fd03 	bl	1504 <print_formatted>
    1afe:	e7e3      	b.n	1ac8 <log_output_msg_process+0x558>
    1b00:	00004e9a 	.word	0x00004e9a
    1b04:	00004e0d 	.word	0x00004e0d
    1b08:	00004e1b 	.word	0x00004e1b
    1b0c:	00004e1a 	.word	0x00004e1a
    1b10:	00004e27 	.word	0x00004e27
    1b14:	00004e29 	.word	0x00004e29
    1b18:	00004e23 	.word	0x00004e23
    1b1c:	00004e25 	.word	0x00004e25
    1b20:	00004e1d 	.word	0x00004e1d

00001b24 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1;
    1b24:	4a08      	ldr	r2, [pc, #32]	; (1b48 <log_output_timestamp_freq_set+0x24>)
{
    1b26:	b510      	push	{r4, lr}
	timestamp_div = 1;
    1b28:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1b2a:	4c08      	ldr	r4, [pc, #32]	; (1b4c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1;
    1b2c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1b2e:	2100      	movs	r1, #0
    1b30:	42a0      	cmp	r0, r4
    1b32:	d804      	bhi.n	1b3e <log_output_timestamp_freq_set+0x1a>
    1b34:	b101      	cbz	r1, 1b38 <log_output_timestamp_freq_set+0x14>
    1b36:	6013      	str	r3, [r2, #0]
		frequency /= 2;
		timestamp_div *= 2;
	}

	freq = frequency;
    1b38:	4b05      	ldr	r3, [pc, #20]	; (1b50 <log_output_timestamp_freq_set+0x2c>)
    1b3a:	6018      	str	r0, [r3, #0]
}
    1b3c:	bd10      	pop	{r4, pc}
		frequency /= 2;
    1b3e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2;
    1b40:	005b      	lsls	r3, r3, #1
    1b42:	2101      	movs	r1, #1
    1b44:	e7f4      	b.n	1b30 <log_output_timestamp_freq_set+0xc>
    1b46:	bf00      	nop
    1b48:	2000043c 	.word	0x2000043c
    1b4c:	000f4240 	.word	0x000f4240
    1b50:	20000438 	.word	0x20000438

00001b54 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	panic_mode = 0;
    1b54:	4b03      	ldr	r3, [pc, #12]	; (1b64 <log_backend_rtt_init+0x10>)
    1b56:	2200      	movs	r2, #0
    1b58:	601a      	str	r2, [r3, #0]
	line_pos = line_buf;
    1b5a:	4b03      	ldr	r3, [pc, #12]	; (1b68 <log_backend_rtt_init+0x14>)
    1b5c:	4a03      	ldr	r2, [pc, #12]	; (1b6c <log_backend_rtt_init+0x18>)
    1b5e:	601a      	str	r2, [r3, #0]
}
    1b60:	4770      	bx	lr
    1b62:	bf00      	nop
    1b64:	200004f8 	.word	0x200004f8
    1b68:	200004ec 	.word	0x200004ec
    1b6c:	20000454 	.word	0x20000454

00001b70 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = 1;
    1b70:	4b01      	ldr	r3, [pc, #4]	; (1b78 <panic+0x8>)
    1b72:	2201      	movs	r2, #1
    1b74:	601a      	str	r2, [r3, #0]
}
    1b76:	4770      	bx	lr
    1b78:	200004f8 	.word	0x200004f8

00001b7c <put>:
{
    1b7c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    1b7e:	4608      	mov	r0, r1
{
    1b80:	460c      	mov	r4, r1
	log_msg_get(msg);
    1b82:	f7ff fc29 	bl	13d8 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    1b86:	4621      	mov	r1, r4
    1b88:	4804      	ldr	r0, [pc, #16]	; (1b9c <put+0x20>)
    1b8a:	220f      	movs	r2, #15
    1b8c:	f7ff fcf0 	bl	1570 <log_output_msg_process>
	log_msg_put(msg);
    1b90:	4620      	mov	r0, r4
}
    1b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    1b96:	f7ff bc99 	b.w	14cc <log_msg_put>
    1b9a:	bf00      	nop
    1b9c:	00004e74 	.word	0x00004e74

00001ba0 <msg_out>:
{
    1ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (panic_mode) {
    1ba4:	4b41      	ldr	r3, [pc, #260]	; (1cac <msg_out+0x10c>)
    1ba6:	681b      	ldr	r3, [r3, #0]
{
    1ba8:	4680      	mov	r8, r0
    1baa:	4689      	mov	r9, r1
	if (panic_mode) {
    1bac:	b953      	cbnz	r3, 1bc4 <msg_out+0x24>
    1bae:	4e40      	ldr	r6, [pc, #256]	; (1cb0 <msg_out+0x110>)
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    1bb0:	f8df a110 	ldr.w	sl, [pc, #272]	; 1cc4 <msg_out+0x124>
    1bb4:	4605      	mov	r5, r0
	for (pos = data; pos < data + length; pos++) {
    1bb6:	eb08 0309 	add.w	r3, r8, r9
    1bba:	429d      	cmp	r5, r3
    1bbc:	d310      	bcc.n	1be0 <msg_out+0x40>
	return (int) (pos - data);
    1bbe:	eba5 0008 	sub.w	r0, r5, r8
    1bc2:	e00b      	b.n	1bdc <msg_out+0x3c>
	written = SEGGER_RTT_WriteNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER, data,
    1bc4:	460a      	mov	r2, r1
    1bc6:	4601      	mov	r1, r0
    1bc8:	2000      	movs	r0, #0
    1bca:	f7ff f991 	bl	ef0 <SEGGER_RTT_WriteNoLock>
    1bce:	4605      	mov	r5, r0

static void log_backend_rtt_flush(void)
{
	while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER)) {
    1bd0:	2000      	movs	r0, #0
    1bd2:	f7ff f9c1 	bl	f58 <SEGGER_RTT_HasDataUp>
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d1fa      	bne.n	1bd0 <msg_out+0x30>
	return written;
    1bda:	4628      	mov	r0, r5
}
    1bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (line_out(*pos)) {
    1be0:	f815 3b01 	ldrb.w	r3, [r5], #1
    1be4:	6832      	ldr	r2, [r6, #0]
	if (data == '\r') {
    1be6:	2b0d      	cmp	r3, #13
    1be8:	d15a      	bne.n	1ca0 <msg_out+0x100>
	if (drop_cnt > 0 && !drop_warn) {
    1bea:	4f32      	ldr	r7, [pc, #200]	; (1cb4 <msg_out+0x114>)
	*line_pos = '\r';
    1bec:	7013      	strb	r3, [r2, #0]
	if (drop_cnt > 0 && !drop_warn) {
    1bee:	683b      	ldr	r3, [r7, #0]
    1bf0:	4c31      	ldr	r4, [pc, #196]	; (1cb8 <msg_out+0x118>)
    1bf2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1cc8 <msg_out+0x128>
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	dd13      	ble.n	1c22 <msg_out+0x82>
    1bfa:	f8db 3000 	ldr.w	r3, [fp]
    1bfe:	b983      	cbnz	r3, 1c22 <msg_out+0x82>
		memmove(line_buf + DROP_MSG_LEN, line_buf,
    1c00:	1b12      	subs	r2, r2, r4
    1c02:	4621      	mov	r1, r4
    1c04:	f104 0017 	add.w	r0, r4, #23
    1c08:	f000 fdeb 	bl	27e2 <memmove>
		memcpy(line_buf, drop_msg, DROP_MSG_LEN);
    1c0c:	2217      	movs	r2, #23
    1c0e:	492b      	ldr	r1, [pc, #172]	; (1cbc <msg_out+0x11c>)
    1c10:	4620      	mov	r0, r4
    1c12:	f000 fdfd 	bl	2810 <memcpy>
		line_pos += DROP_MSG_LEN;
    1c16:	6833      	ldr	r3, [r6, #0]
    1c18:	3317      	adds	r3, #23
    1c1a:	6033      	str	r3, [r6, #0]
		drop_warn = 1;
    1c1c:	2301      	movs	r3, #1
    1c1e:	f8cb 3000 	str.w	r3, [fp]
	if (drop_warn) {
    1c22:	f8db 3000 	ldr.w	r3, [fp]
    1c26:	b163      	cbz	r3, 1c42 <msg_out+0xa2>
		int cnt = min(drop_cnt, DROP_MAX);
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	2b63      	cmp	r3, #99	; 0x63
    1c2c:	461a      	mov	r2, r3
    1c2e:	bfa8      	it	ge
    1c30:	2263      	movge	r2, #99	; 0x63
		if (cnt < 10) {
    1c32:	2b09      	cmp	r3, #9
    1c34:	dc23      	bgt.n	1c7e <msg_out+0xde>
			line_buf[DROP_MSG_LEN - 2] = ' ';
    1c36:	2120      	movs	r1, #32
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    1c38:	f102 0330 	add.w	r3, r2, #48	; 0x30
			line_buf[DROP_MSG_LEN - 2] = ' ';
    1c3c:	7561      	strb	r1, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt);
    1c3e:	7523      	strb	r3, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = ' ';
    1c40:	74e1      	strb	r1, [r4, #19]

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    1c42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1c46:	481e      	ldr	r0, [pc, #120]	; (1cc0 <msg_out+0x120>)
    1c48:	f002 f966 	bl	3f18 <_impl_k_mutex_lock>
					     line_buf, line_pos - line_buf + 1);
    1c4c:	6832      	ldr	r2, [r6, #0]
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1c4e:	491a      	ldr	r1, [pc, #104]	; (1cb8 <msg_out+0x118>)
					     line_buf, line_pos - line_buf + 1);
    1c50:	f1c4 0401 	rsb	r4, r4, #1
	int ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1c54:	4422      	add	r2, r4
    1c56:	2000      	movs	r0, #0
    1c58:	f7ff f902 	bl	e60 <SEGGER_RTT_WriteSkipNoLock>
    1c5c:	4604      	mov	r4, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    1c5e:	4818      	ldr	r0, [pc, #96]	; (1cc0 <msg_out+0x120>)
    1c60:	f002 f9bc 	bl	3fdc <_impl_k_mutex_unlock>
	if (!ret) {
    1c64:	b9bc      	cbnz	r4, 1c96 <msg_out+0xf6>
		drop_cnt++;
    1c66:	683b      	ldr	r3, [r7, #0]
    1c68:	3301      	adds	r3, #1
    1c6a:	603b      	str	r3, [r7, #0]
		line_pos = drop_cnt > 0 ? line_buf + DROP_MSG_LEN : line_buf;
    1c6c:	4b12      	ldr	r3, [pc, #72]	; (1cb8 <msg_out+0x118>)
    1c6e:	6839      	ldr	r1, [r7, #0]
    1c70:	f103 0217 	add.w	r2, r3, #23
    1c74:	2900      	cmp	r1, #0
    1c76:	bfc8      	it	gt
    1c78:	4613      	movgt	r3, r2
    1c7a:	6033      	str	r3, [r6, #0]
    1c7c:	e79b      	b.n	1bb6 <msg_out+0x16>
			line_buf[DROP_MSG_LEN - 2] = (u8_t) ('0' + cnt % 10);
    1c7e:	230a      	movs	r3, #10
    1c80:	fb92 f1f3 	sdiv	r1, r2, r3
    1c84:	fb03 2311 	mls	r3, r3, r1, r2
    1c88:	3330      	adds	r3, #48	; 0x30
    1c8a:	7563      	strb	r3, [r4, #21]
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    1c8c:	3130      	adds	r1, #48	; 0x30
			line_buf[DROP_MSG_LEN - 4] = '>';
    1c8e:	233e      	movs	r3, #62	; 0x3e
			line_buf[DROP_MSG_LEN - 3] = (u8_t) ('0' + cnt / 10);
    1c90:	7521      	strb	r1, [r4, #20]
			line_buf[DROP_MSG_LEN - 4] = '>';
    1c92:	74e3      	strb	r3, [r4, #19]
    1c94:	e7d5      	b.n	1c42 <msg_out+0xa2>
	drop_cnt = 0;
    1c96:	2300      	movs	r3, #0
    1c98:	603b      	str	r3, [r7, #0]
	drop_warn = 0;
    1c9a:	f8cb 3000 	str.w	r3, [fp]
    1c9e:	e7e5      	b.n	1c6c <msg_out+0xcc>
	if (line_pos < line_buf + sizeof(line_buf) - 1) {
    1ca0:	4552      	cmp	r2, sl
		*line_pos++ = data;
    1ca2:	bf3e      	ittt	cc
    1ca4:	1c51      	addcc	r1, r2, #1
    1ca6:	6031      	strcc	r1, [r6, #0]
    1ca8:	7013      	strbcc	r3, [r2, #0]
    1caa:	e784      	b.n	1bb6 <msg_out+0x16>
    1cac:	200004f8 	.word	0x200004f8
    1cb0:	200004ec 	.word	0x200004ec
    1cb4:	2000044c 	.word	0x2000044c
    1cb8:	20000454 	.word	0x20000454
    1cbc:	00004e84 	.word	0x00004e84
    1cc0:	20001ddc 	.word	0x20001ddc
    1cc4:	200004ea 	.word	0x200004ea
    1cc8:	20000450 	.word	0x20000450

00001ccc <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    1ccc:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    1cce:	4c04      	ldr	r4, [pc, #16]	; (1ce0 <rtt_console_init+0x14>)
    1cd0:	4620      	mov	r0, r4
    1cd2:	f7fe fd6f 	bl	7b4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    1cd6:	4620      	mov	r0, r4
    1cd8:	f001 fa5a 	bl	3190 <__stdout_hook_install>

	return 0;
}
    1cdc:	2000      	movs	r0, #0
    1cde:	bd10      	pop	{r4, pc}
    1ce0:	00001ce5 	.word	0x00001ce5

00001ce4 <rtt_console_out>:
{
    1ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    1ce8:	4f16      	ldr	r7, [pc, #88]	; (1d44 <rtt_console_out+0x60>)
    1cea:	4d17      	ldr	r5, [pc, #92]	; (1d48 <rtt_console_out+0x64>)
	char c = (char)character;
    1cec:	f88d 0007 	strb.w	r0, [sp, #7]
{
    1cf0:	4606      	mov	r6, r0
	char c = (char)character;
    1cf2:	2403      	movs	r4, #3
    1cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1cf8:	4638      	mov	r0, r7
    1cfa:	f002 f90d 	bl	3f18 <_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    1cfe:	2201      	movs	r2, #1
    1d00:	f10d 0107 	add.w	r1, sp, #7
    1d04:	2000      	movs	r0, #0
    1d06:	f7ff f8f3 	bl	ef0 <SEGGER_RTT_WriteNoLock>
    1d0a:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    1d0c:	4638      	mov	r0, r7
    1d0e:	f002 f965 	bl	3fdc <_impl_k_mutex_unlock>
		if (cnt) {
    1d12:	f1b8 0f00 	cmp.w	r8, #0
    1d16:	d005      	beq.n	1d24 <rtt_console_out+0x40>
			host_present = true;
    1d18:	2301      	movs	r3, #1
    1d1a:	702b      	strb	r3, [r5, #0]
}
    1d1c:	4630      	mov	r0, r6
    1d1e:	b002      	add	sp, #8
    1d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    1d24:	782b      	ldrb	r3, [r5, #0]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d0f8      	beq.n	1d1c <rtt_console_out+0x38>
			if (max_cnt) {
    1d2a:	3c01      	subs	r4, #1
    1d2c:	d007      	beq.n	1d3e <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    1d2e:	f002 fc7b 	bl	4628 <k_is_in_isr>
    1d32:	2800      	cmp	r0, #0
    1d34:	d1de      	bne.n	1cf4 <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    1d36:	2002      	movs	r0, #2
    1d38:	f002 fb9a 	bl	4470 <_impl_k_sleep>
		SEGGER_RTT_LOCK();
    1d3c:	e7da      	b.n	1cf4 <rtt_console_out+0x10>
				host_present = false;
    1d3e:	702c      	strb	r4, [r5, #0]
    1d40:	e7ec      	b.n	1d1c <rtt_console_out+0x38>
    1d42:	bf00      	nop
    1d44:	20001ddc 	.word	0x20001ddc
    1d48:	200004fc 	.word	0x200004fc

00001d4c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1d4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    1d4e:	f04f 0320 	mov.w	r3, #32
    1d52:	f3ef 8211 	mrs	r2, BASEPRI
    1d56:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1d5a:	4c11      	ldr	r4, [pc, #68]	; (1da0 <_m16src_stop+0x54>)
    1d5c:	7823      	ldrb	r3, [r4, #0]
    1d5e:	b923      	cbnz	r3, 1d6a <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1d60:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1d64:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    1d68:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    1d6a:	3b01      	subs	r3, #1
    1d6c:	b2db      	uxtb	r3, r3
    1d6e:	7023      	strb	r3, [r4, #0]
    1d70:	b123      	cbz	r3, 1d7c <_m16src_stop+0x30>
    1d72:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    1d76:	f06f 000f 	mvn.w	r0, #15
    1d7a:	e7f5      	b.n	1d68 <_m16src_stop+0x1c>
	if (m16src_grd) {
    1d7c:	4b09      	ldr	r3, [pc, #36]	; (1da4 <_m16src_stop+0x58>)
    1d7e:	7818      	ldrb	r0, [r3, #0]
    1d80:	2101      	movs	r1, #1
    1d82:	b128      	cbz	r0, 1d90 <_m16src_stop+0x44>
		m16src_ref++;
    1d84:	7021      	strb	r1, [r4, #0]
    1d86:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    1d8a:	f06f 000a 	mvn.w	r0, #10
    1d8e:	e7eb      	b.n	1d68 <_m16src_stop+0x1c>
	m16src_grd = 1;
    1d90:	7019      	strb	r1, [r3, #0]
    1d92:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1d96:	4a04      	ldr	r2, [pc, #16]	; (1da8 <_m16src_stop+0x5c>)
    1d98:	6011      	str	r1, [r2, #0]
	m16src_grd = 0;
    1d9a:	7018      	strb	r0, [r3, #0]
	return 0;
    1d9c:	e7e4      	b.n	1d68 <_m16src_stop+0x1c>
    1d9e:	bf00      	nop
    1da0:	200004ff 	.word	0x200004ff
    1da4:	200004fe 	.word	0x200004fe
    1da8:	40000004 	.word	0x40000004

00001dac <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    1dac:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1dae:	2200      	movs	r2, #0
    1db0:	4610      	mov	r0, r2
    1db2:	2101      	movs	r1, #1
    1db4:	f000 fb84 	bl	24c0 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1db8:	2000      	movs	r0, #0
    1dba:	f000 fb5d 	bl	2478 <_arch_irq_enable>

	return 0;
}
    1dbe:	2000      	movs	r0, #0
    1dc0:	bd08      	pop	{r3, pc}
	...

00001dc4 <_m16src_start>:
{
    1dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1dc6:	f04f 0220 	mov.w	r2, #32
    1dca:	f3ef 8311 	mrs	r3, BASEPRI
    1dce:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1dd2:	4a26      	ldr	r2, [pc, #152]	; (1e6c <_m16src_start+0xa8>)
    1dd4:	7810      	ldrb	r0, [r2, #0]
    1dd6:	1c44      	adds	r4, r0, #1
    1dd8:	7014      	strb	r4, [r2, #0]
    1dda:	b170      	cbz	r0, 1dfa <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1ddc:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    1de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1de4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    1de8:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    1dec:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    1df0:	bf0c      	ite	eq
    1df2:	2000      	moveq	r0, #0
    1df4:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    1df8:	e007      	b.n	1e0a <_m16src_start+0x46>
	if (m16src_grd) {
    1dfa:	4d1d      	ldr	r5, [pc, #116]	; (1e70 <_m16src_start+0xac>)
    1dfc:	782f      	ldrb	r7, [r5, #0]
    1dfe:	b12f      	cbz	r7, 1e0c <_m16src_start+0x48>
		m16src_ref--;
    1e00:	7010      	strb	r0, [r2, #0]
    1e02:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1e06:	f06f 000a 	mvn.w	r0, #10
}
    1e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1e0c:	2601      	movs	r6, #1
    1e0e:	702e      	strb	r6, [r5, #0]
    1e10:	f383 8811 	msr	BASEPRI, r3
    1e14:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1e18:	b319      	cbz	r1, 1e62 <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    1e1a:	4638      	mov	r0, r7
    1e1c:	f000 fb3c 	bl	2498 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1e20:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1e24:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    1e28:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1e2c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1e2e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1e32:	b192      	cbz	r2, 1e5a <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1e34:	2200      	movs	r2, #0
    1e36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e3a:	4a0e      	ldr	r2, [pc, #56]	; (1e74 <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1e3c:	f013 0f01 	tst.w	r3, #1
    1e40:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    1e44:	bf08      	it	eq
    1e46:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1e4a:	2000      	movs	r0, #0
    1e4c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1e50:	f000 fb12 	bl	2478 <_arch_irq_enable>
	m16src_grd = 0;
    1e54:	2300      	movs	r3, #0
    1e56:	702b      	strb	r3, [r5, #0]
    1e58:	e7c2      	b.n	1de0 <_m16src_start+0x1c>
			__WFE();
    1e5a:	bf20      	wfe
			__SEV();
    1e5c:	bf40      	sev
			__WFE();
    1e5e:	bf20      	wfe
    1e60:	e7e5      	b.n	1e2e <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1e62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1e66:	6026      	str	r6, [r4, #0]
    1e68:	e7f4      	b.n	1e54 <_m16src_start+0x90>
    1e6a:	bf00      	nop
    1e6c:	200004ff 	.word	0x200004ff
    1e70:	200004fe 	.word	0x200004fe
    1e74:	e000e100 	.word	0xe000e100

00001e78 <_k32src_start>:
{
    1e78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1e7a:	f04f 0220 	mov.w	r2, #32
    1e7e:	f3ef 8311 	mrs	r3, BASEPRI
    1e82:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1e86:	4d1d      	ldr	r5, [pc, #116]	; (1efc <_k32src_start+0x84>)
    1e88:	782a      	ldrb	r2, [r5, #0]
    1e8a:	b18a      	cbz	r2, 1eb0 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1e8c:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e94:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    1e98:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    1e9c:	f003 0303 	and.w	r3, r3, #3
    1ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    1ea4:	4393      	bics	r3, r2
}
    1ea6:	bf14      	ite	ne
    1ea8:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    1eac:	2000      	moveq	r0, #0
    1eae:	bd38      	pop	{r3, r4, r5, pc}
	k32src_initialized = 1;
    1eb0:	2401      	movs	r4, #1
    1eb2:	702c      	strb	r4, [r5, #0]
    1eb4:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ebc:	4d10      	ldr	r5, [pc, #64]	; (1f00 <_k32src_start+0x88>)
    1ebe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1ec2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    1ec6:	602c      	str	r4, [r5, #0]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1ec8:	f011 0103 	ands.w	r1, r1, #3
    NRF_CLOCK->INTENCLR = int_mask;
    1ecc:	f04f 0518 	mov.w	r5, #24
    1ed0:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1ed4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1ed8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1edc:	d1d8      	bne.n	1e90 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1ede:	2210      	movs	r2, #16
    1ee0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    1ee4:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    1ee8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1eec:	f7ff ff6a 	bl	1dc4 <_m16src_start>
		if (!err) {
    1ef0:	2800      	cmp	r0, #0
    1ef2:	d1cd      	bne.n	1e90 <_k32src_start+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <_k32src_start+0x8c>)
    1ef6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1efa:	e7c9      	b.n	1e90 <_k32src_start+0x18>
    1efc:	200004fd 	.word	0x200004fd
    1f00:	40000008 	.word	0x40000008
    1f04:	e000e100 	.word	0xe000e100

00001f08 <_power_clock_isr>:
{
    1f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1f0e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1f10:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1f14:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1f18:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1f1c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1f20:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1f24:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1f28:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1f2c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1f30:	f1bc 0f00 	cmp.w	ip, #0
    1f34:	d003      	beq.n	1f3e <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    1f36:	f04f 0c00 	mov.w	ip, #0
    1f3a:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    1f3e:	b127      	cbz	r7, 1f4a <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f44:	2700      	movs	r7, #0
    1f46:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    1f4a:	b152      	cbz	r2, 1f62 <_power_clock_isr+0x5a>
    1f4c:	03e3      	lsls	r3, r4, #15
    1f4e:	d508      	bpl.n	1f62 <_power_clock_isr+0x5a>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1f54:	4c15      	ldr	r4, [pc, #84]	; (1fac <_power_clock_isr+0xa4>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1f56:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1f58:	2702      	movs	r7, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1f5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1f5e:	6027      	str	r7, [r4, #0]
		NRF_CLOCK->TASKS_CAL = 1;
    1f60:	611a      	str	r2, [r3, #16]
	if (lf) {
    1f62:	b120      	cbz	r0, 1f6e <_power_clock_isr+0x66>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f68:	2200      	movs	r2, #0
    1f6a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    1f6e:	b159      	cbz	r1, 1f88 <_power_clock_isr+0x80>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    1f70:	4b0e      	ldr	r3, [pc, #56]	; (1fac <_power_clock_isr+0xa4>)
		NRF_CLOCK->EVENTS_DONE = 0;
    1f72:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    1f76:	2100      	movs	r1, #0
    1f78:	6019      	str	r1, [r3, #0]
		err = _m16src_stop(dev, NULL);
    1f7a:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    1f7c:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1f80:	f7ff fee4 	bl	1d4c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    1f84:	2301      	movs	r3, #1
    1f86:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1f88:	b176      	cbz	r6, 1fa8 <_power_clock_isr+0xa0>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f8e:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1f90:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    1f92:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1f96:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1f98:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1f9c:	f7ff ff12 	bl	1dc4 <_m16src_start>
		if (!err) {
    1fa0:	b910      	cbnz	r0, 1fa8 <_power_clock_isr+0xa0>
    1fa2:	4b03      	ldr	r3, [pc, #12]	; (1fb0 <_power_clock_isr+0xa8>)
    1fa4:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    1fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1faa:	bf00      	nop
    1fac:	40000c34 	.word	0x40000c34
    1fb0:	e000e100 	.word	0xe000e100

00001fb4 <rtc_compare_set>:

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_rtc, uint32_t ch, uint32_t cc_val)
{
    p_rtc->CC[ch] = cc_val;
    1fb4:	4b08      	ldr	r3, [pc, #32]	; (1fd8 <rtc_compare_set+0x24>)
    1fb6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_rtc)
{
     return p_rtc->COUNTER;
    1fba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1fbe:	1ac0      	subs	r0, r0, r3
    1fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fc4:	4b05      	ldr	r3, [pc, #20]	; (1fdc <rtc_compare_set+0x28>)
    1fc6:	3802      	subs	r0, #2
    1fc8:	4298      	cmp	r0, r3
    1fca:	bf82      	ittt	hi
    1fcc:	4b04      	ldrhi	r3, [pc, #16]	; (1fe0 <rtc_compare_set+0x2c>)
    1fce:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1fd2:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    1fd6:	4770      	bx	lr
    1fd8:	40011000 	.word	0x40011000
    1fdc:	007ffffd 	.word	0x007ffffd
    1fe0:	e000e100 	.word	0xe000e100

00001fe4 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1fe4:	b510      	push	{r4, lr}
    1fe6:	4b13      	ldr	r3, [pc, #76]	; (2034 <rtc_announce_set_next+0x50>)
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1fe8:	4c13      	ldr	r4, [pc, #76]	; (2038 <rtc_announce_set_next+0x54>)
    1fea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    1fee:	6822      	ldr	r2, [r4, #0]
    1ff0:	1a80      	subs	r0, r0, r2
    1ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick()) {
    1ff6:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1ffa:	d913      	bls.n	2024 <rtc_announce_set_next+0x40>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();

		if (sys_elapsed > expected_sys_ticks) {
    1ffc:	490f      	ldr	r1, [pc, #60]	; (203c <rtc_announce_set_next+0x58>)
    1ffe:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick();
    2000:	f240 1347 	movw	r3, #327	; 0x147
    2004:	fbb0 f0f3 	udiv	r0, r0, r3
    2008:	4288      	cmp	r0, r1
    200a:	bf28      	it	cs
    200c:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    200e:	fb03 2300 	mla	r3, r3, r0, r2
#endif
}

static void wrapped_announce(s32_t ticks)
{
	driver_uptime += ticks;
    2012:	4a0b      	ldr	r2, [pc, #44]	; (2040 <rtc_announce_set_next+0x5c>)
				(sys_elapsed * sys_clock_hw_cycles_per_tick())
			   ) & RTC_MASK;
    2014:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    2018:	6023      	str	r3, [r4, #0]
    201a:	6813      	ldr	r3, [r2, #0]
    201c:	4403      	add	r3, r0
    201e:	6013      	str	r3, [r2, #0]
	z_clock_announce(ticks);
    2020:	f002 fc62 	bl	48e8 <z_clock_announce>
		_sys_idle_elapsed_ticks = sys_elapsed;
		z_clock_announce(_sys_idle_elapsed_ticks);
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    2024:	6820      	ldr	r0, [r4, #0]
}
    2026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick());
    202a:	f200 1047 	addw	r0, r0, #327	; 0x147
    202e:	f7ff bfc1 	b.w	1fb4 <rtc_compare_set>
    2032:	bf00      	nop
    2034:	40011000 	.word	0x40011000
    2038:	20000508 	.word	0x20000508
    203c:	20000504 	.word	0x20000504
    2040:	20000500 	.word	0x20000500

00002044 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    2044:	4b02      	ldr	r3, [pc, #8]	; (2050 <rtc1_nrf5_isr+0xc>)
    2046:	2200      	movs	r2, #0
    2048:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	/* z_clock_announce() could cause new programming */
	if (!expected_sys_ticks && _sys_clock_always_on) {
		program_max_cycles();
	}
#else
	rtc_announce_set_next();
    204c:	f7ff bfca 	b.w	1fe4 <rtc_announce_set_next>
    2050:	40011000 	.word	0x40011000

00002054 <z_clock_set_timeout>:
}
    2054:	4770      	bx	lr

00002056 <z_clock_elapsed>:
}
    2056:	2000      	movs	r0, #0
    2058:	4770      	bx	lr
	...

0000205c <z_clock_idle_exit>:
{
    205c:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    205e:	4b07      	ldr	r3, [pc, #28]	; (207c <z_clock_idle_exit+0x20>)
    2060:	2200      	movs	r2, #0
    2062:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2066:	4b06      	ldr	r3, [pc, #24]	; (2080 <z_clock_idle_exit+0x24>)
    2068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    206c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    2070:	f7ff ffb8 	bl	1fe4 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2074:	4b03      	ldr	r3, [pc, #12]	; (2084 <z_clock_idle_exit+0x28>)
    2076:	2201      	movs	r2, #1
    2078:	601a      	str	r2, [r3, #0]
}
    207a:	bd08      	pop	{r3, pc}
    207c:	40011000 	.word	0x40011000
    2080:	e000e100 	.word	0xe000e100
    2084:	20000504 	.word	0x20000504

00002088 <z_clock_driver_init>:
	sys_trace_isr_exit();

}

int z_clock_driver_init(struct device *device)
{
    2088:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    208a:	4819      	ldr	r0, [pc, #100]	; (20f0 <z_clock_driver_init+0x68>)
    208c:	f001 fdd2 	bl	3c34 <device_get_binding>
	if (!clock) {
    2090:	b350      	cbz	r0, 20e8 <z_clock_driver_init+0x60>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    2092:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    2094:	4d17      	ldr	r5, [pc, #92]	; (20f4 <z_clock_driver_init+0x6c>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	2101      	movs	r1, #1
    209a:	4798      	blx	r3
	rtc_past = 0;
    209c:	4b16      	ldr	r3, [pc, #88]	; (20f8 <z_clock_driver_init+0x70>)
    209e:	2400      	movs	r4, #0
    20a0:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    20a2:	4b16      	ldr	r3, [pc, #88]	; (20fc <z_clock_driver_init+0x74>)
    20a4:	2601      	movs	r6, #1
    20a6:	601e      	str	r6, [r3, #0]
    p_rtc->CC[ch] = cc_val;
    20a8:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    20ac:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    20b0:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_rtc, uint32_t mask)
{
    p_rtc->EVTENSET = mask;
    20b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    20b8:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_rtc->INTENSET = mask;
    20bc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    20c0:	4b0f      	ldr	r3, [pc, #60]	; (2100 <z_clock_driver_init+0x78>)
		       sys_clock_hw_cycles_per_tick());
	nrf_rtc_event_enable(SYS_CLOCK_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(SYS_CLOCK_RTC, RTC_INTENSET_COMPARE0_Msk);

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    20c2:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    20c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    20ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    20ce:	4631      	mov	r1, r6
    20d0:	4622      	mov	r2, r4
    20d2:	2011      	movs	r0, #17
    20d4:	f000 f9f4 	bl	24c0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    20d8:	2011      	movs	r0, #17
    20da:	f000 f9cd 	bl	2478 <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_rtc + task) = 1;
    20de:	4b09      	ldr	r3, [pc, #36]	; (2104 <z_clock_driver_init+0x7c>)

	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(SYS_CLOCK_RTC, NRF_RTC_TASK_START);

	return 0;
    20e0:	4620      	mov	r0, r4
    20e2:	601e      	str	r6, [r3, #0]
    20e4:	602e      	str	r6, [r5, #0]
}
    20e6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    20e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    20ec:	e7fb      	b.n	20e6 <z_clock_driver_init+0x5e>
    20ee:	bf00      	nop
    20f0:	00004ec4 	.word	0x00004ec4
    20f4:	40011000 	.word	0x40011000
    20f8:	20000508 	.word	0x20000508
    20fc:	20000504 	.word	0x20000504
    2100:	e000e100 	.word	0xe000e100
    2104:	40011008 	.word	0x40011008

00002108 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2108:	b508      	push	{r3, lr}
	u32_t ticked_cycles;
	u32_t elapsed_cycles;

	/* Number of timer cycles announced as ticks so far. */
	ticked_cycles = z_tick_get() * sys_clock_hw_cycles_per_tick();
    210a:	f002 fc39 	bl	4980 <z_tick_get>
    210e:	f240 1347 	movw	r3, #327	; 0x147
    2112:	4358      	muls	r0, r3
     return p_rtc->COUNTER;
    2114:	4b03      	ldr	r3, [pc, #12]	; (2124 <_timer_cycle_get_32+0x1c>)
    2116:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * The value of RTC_COUNTER is not reset on tick, so it will
	 * compensate potentialy missed update of z_tick_get()
	 * which could have happen between the ticked_cycles calculation
	 * and the code below.
	 */
	elapsed_cycles = (RTC_COUNTER - ticked_cycles) & RTC_MASK;
    211a:	1a1b      	subs	r3, r3, r0
    211c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return ticked_cycles + elapsed_cycles;
}
    2120:	4418      	add	r0, r3
    2122:	bd08      	pop	{r3, pc}
    2124:	40011000 	.word	0x40011000

00002128 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    2128:	4804      	ldr	r0, [pc, #16]	; (213c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    212a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    212c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    212e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    2130:	d003      	beq.n	213a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    2132:	4903      	ldr	r1, [pc, #12]	; (2140 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    2134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    2138:	600a      	str	r2, [r1, #0]

0000213a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    213a:	4770      	bx	lr
    ldr r0, =_kernel
    213c:	2000076c 	.word	0x2000076c
    ldr r1, =_SCS_ICSR
    2140:	e000ed04 	.word	0xe000ed04

00002144 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2144:	4804      	ldr	r0, [pc, #16]	; (2158 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    2146:	2300      	movs	r3, #0
    2148:	2120      	movs	r1, #32
    214a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    214c:	3301      	adds	r3, #1
    214e:	2b27      	cmp	r3, #39	; 0x27
    2150:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2154:	d1f9      	bne.n	214a <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2156:	4770      	bx	lr
    2158:	e000e100 	.word	0xe000e100

0000215c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    215c:	4a08      	ldr	r2, [pc, #32]	; (2180 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    215e:	4909      	ldr	r1, [pc, #36]	; (2184 <__swap+0x28>)
	_current->arch.basepri = key;
    2160:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2162:	6809      	ldr	r1, [r1, #0]
    2164:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2166:	4908      	ldr	r1, [pc, #32]	; (2188 <__swap+0x2c>)
	_current->arch.basepri = key;
    2168:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    216a:	684b      	ldr	r3, [r1, #4]
    216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2170:	604b      	str	r3, [r1, #4]
    2172:	2300      	movs	r3, #0
    2174:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    2178:	6893      	ldr	r3, [r2, #8]
}
    217a:	6e98      	ldr	r0, [r3, #104]	; 0x68
    217c:	4770      	bx	lr
    217e:	bf00      	nop
    2180:	2000076c 	.word	0x2000076c
    2184:	00005524 	.word	0x00005524
    2188:	e000ed00 	.word	0xe000ed00

0000218c <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    218c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    218e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2192:	490d      	ldr	r1, [pc, #52]	; (21c8 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2194:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2196:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    219a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    219c:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    21a0:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    21a4:	4f09      	ldr	r7, [pc, #36]	; (21cc <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    21a6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    21aa:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    21ac:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    21ae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    21b0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    21b2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    21b4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    21b6:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    21ba:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    21be:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
    21c2:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    21c6:	4770      	bx	lr
    ldr r1, =_kernel
    21c8:	2000076c 	.word	0x2000076c
    ldr v4, =_SCS_ICSR
    21cc:	e000ed04 	.word	0xe000ed04

000021d0 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    21d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    21d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    21d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    21da:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    21de:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    21e0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    21e4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    21e8:	2902      	cmp	r1, #2
    beq _oops
    21ea:	d0ff      	beq.n	21ec <_oops>

000021ec <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    21ec:	b500      	push	{lr}
    blx _do_kernel_oops
    21ee:	f000 f9fd 	bl	25ec <_do_kernel_oops>
    pop {pc}
    21f2:	bd00      	pop	{pc}

000021f4 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    21f4:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    21f6:	4c19      	ldr	r4, [pc, #100]	; (225c <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    21f8:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    21fa:	4819      	ldr	r0, [pc, #100]	; (2260 <_MpuFault.isra.2+0x6c>)
    21fc:	f7fe fc22 	bl	a44 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2202:	06d9      	lsls	r1, r3, #27
    2204:	d502      	bpl.n	220c <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    2206:	4817      	ldr	r0, [pc, #92]	; (2264 <_MpuFault.isra.2+0x70>)
    2208:	f7fe fc1c 	bl	a44 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    220c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    220e:	071a      	lsls	r2, r3, #28
    2210:	d502      	bpl.n	2218 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    2212:	4815      	ldr	r0, [pc, #84]	; (2268 <_MpuFault.isra.2+0x74>)
    2214:	f7fe fc16 	bl	a44 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    2218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    221a:	079b      	lsls	r3, r3, #30
    221c:	d50e      	bpl.n	223c <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    221e:	4813      	ldr	r0, [pc, #76]	; (226c <_MpuFault.isra.2+0x78>)
    2220:	f7fe fc10 	bl	a44 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    2224:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    2226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2228:	0618      	lsls	r0, r3, #24
    222a:	d507      	bpl.n	223c <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    222c:	4810      	ldr	r0, [pc, #64]	; (2270 <_MpuFault.isra.2+0x7c>)
    222e:	f7fe fc09 	bl	a44 <printk>
			if (fromHardFault) {
    2232:	b11d      	cbz	r5, 223c <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2234:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    223a:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    223c:	4c07      	ldr	r4, [pc, #28]	; (225c <_MpuFault.isra.2+0x68>)
    223e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2240:	07d2      	lsls	r2, r2, #31
    2242:	d502      	bpl.n	224a <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    2244:	480b      	ldr	r0, [pc, #44]	; (2274 <_MpuFault.isra.2+0x80>)
    2246:	f7fe fbfd 	bl	a44 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    224a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    224c:	069b      	lsls	r3, r3, #26
    224e:	d502      	bpl.n	2256 <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    2250:	4809      	ldr	r0, [pc, #36]	; (2278 <_MpuFault.isra.2+0x84>)
    2252:	f7fe fbf7 	bl	a44 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    2256:	2000      	movs	r0, #0
    2258:	bd38      	pop	{r3, r4, r5, pc}
    225a:	bf00      	nop
    225c:	e000ed00 	.word	0xe000ed00
    2260:	00005033 	.word	0x00005033
    2264:	0000504a 	.word	0x0000504a
    2268:	0000505c 	.word	0x0000505c
    226c:	00005070 	.word	0x00005070
    2270:	00005089 	.word	0x00005089
    2274:	000050a0 	.word	0x000050a0
    2278:	000050c0 	.word	0x000050c0

0000227c <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    227c:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    227e:	4c1b      	ldr	r4, [pc, #108]	; (22ec <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    2280:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    2282:	481b      	ldr	r0, [pc, #108]	; (22f0 <_BusFault.isra.3+0x74>)
    2284:	f7fe fbde 	bl	a44 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    228a:	04d8      	lsls	r0, r3, #19
    228c:	d504      	bpl.n	2298 <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    228e:	4819      	ldr	r0, [pc, #100]	; (22f4 <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    2290:	f7fe fbd8 	bl	a44 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    2294:	2000      	movs	r0, #0
    2296:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    229a:	0519      	lsls	r1, r3, #20
    229c:	d501      	bpl.n	22a2 <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    229e:	4816      	ldr	r0, [pc, #88]	; (22f8 <_BusFault.isra.3+0x7c>)
    22a0:	e7f6      	b.n	2290 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    22a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22a4:	059a      	lsls	r2, r3, #22
    22a6:	d514      	bpl.n	22d2 <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    22a8:	4814      	ldr	r0, [pc, #80]	; (22fc <_BusFault.isra.3+0x80>)
    22aa:	f7fe fbcb 	bl	a44 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    22ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    22b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22b2:	041b      	lsls	r3, r3, #16
    22b4:	d507      	bpl.n	22c6 <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    22b6:	4812      	ldr	r0, [pc, #72]	; (2300 <_BusFault.isra.3+0x84>)
    22b8:	f7fe fbc4 	bl	a44 <printk>
			if (fromHardFault) {
    22bc:	b11d      	cbz	r5, 22c6 <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    22be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    22c4:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    22c6:	4b09      	ldr	r3, [pc, #36]	; (22ec <_BusFault.isra.3+0x70>)
    22c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22ca:	0558      	lsls	r0, r3, #21
    22cc:	d5e2      	bpl.n	2294 <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    22ce:	480d      	ldr	r0, [pc, #52]	; (2304 <_BusFault.isra.3+0x88>)
    22d0:	e7de      	b.n	2290 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    22d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22d4:	0559      	lsls	r1, r3, #21
    22d6:	d4fa      	bmi.n	22ce <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    22d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22da:	05da      	lsls	r2, r3, #23
    22dc:	d501      	bpl.n	22e2 <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    22de:	480a      	ldr	r0, [pc, #40]	; (2308 <_BusFault.isra.3+0x8c>)
    22e0:	e7d6      	b.n	2290 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    22e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22e4:	049b      	lsls	r3, r3, #18
    22e6:	d5d5      	bpl.n	2294 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    22e8:	4808      	ldr	r0, [pc, #32]	; (230c <_BusFault.isra.3+0x90>)
    22ea:	e7d1      	b.n	2290 <_BusFault.isra.3+0x14>
    22ec:	e000ed00 	.word	0xe000ed00
    22f0:	00004ee4 	.word	0x00004ee4
    22f4:	0000504a 	.word	0x0000504a
    22f8:	0000505c 	.word	0x0000505c
    22fc:	00004efb 	.word	0x00004efb
    2300:	00004f15 	.word	0x00004f15
    2304:	00004f2b 	.word	0x00004f2b
    2308:	00004f47 	.word	0x00004f47
    230c:	000050c0 	.word	0x000050c0

00002310 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    2310:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    2312:	4c19      	ldr	r4, [pc, #100]	; (2378 <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    2314:	4819      	ldr	r0, [pc, #100]	; (237c <_UsageFault.isra.5+0x6c>)
    2316:	f7fe fb95 	bl	a44 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    231a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    231c:	019a      	lsls	r2, r3, #6
    231e:	d502      	bpl.n	2326 <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    2320:	4817      	ldr	r0, [pc, #92]	; (2380 <_UsageFault.isra.5+0x70>)
    2322:	f7fe fb8f 	bl	a44 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    2326:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2328:	01db      	lsls	r3, r3, #7
    232a:	d502      	bpl.n	2332 <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    232c:	4815      	ldr	r0, [pc, #84]	; (2384 <_UsageFault.isra.5+0x74>)
    232e:	f7fe fb89 	bl	a44 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    2332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2334:	0318      	lsls	r0, r3, #12
    2336:	d502      	bpl.n	233e <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    2338:	4813      	ldr	r0, [pc, #76]	; (2388 <_UsageFault.isra.5+0x78>)
    233a:	f7fe fb83 	bl	a44 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    233e:	4c0e      	ldr	r4, [pc, #56]	; (2378 <_UsageFault.isra.5+0x68>)
    2340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2342:	0359      	lsls	r1, r3, #13
    2344:	d502      	bpl.n	234c <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    2346:	4811      	ldr	r0, [pc, #68]	; (238c <_UsageFault.isra.5+0x7c>)
    2348:	f7fe fb7c 	bl	a44 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    234c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    234e:	039a      	lsls	r2, r3, #14
    2350:	d502      	bpl.n	2358 <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    2352:	480f      	ldr	r0, [pc, #60]	; (2390 <_UsageFault.isra.5+0x80>)
    2354:	f7fe fb76 	bl	a44 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    2358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    235a:	03db      	lsls	r3, r3, #15
    235c:	d502      	bpl.n	2364 <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    235e:	480d      	ldr	r0, [pc, #52]	; (2394 <_UsageFault.isra.5+0x84>)
    2360:	f7fe fb70 	bl	a44 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2364:	4a04      	ldr	r2, [pc, #16]	; (2378 <_UsageFault.isra.5+0x68>)
    2366:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2368:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    236c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2370:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2372:	2000      	movs	r0, #0
    2374:	bd10      	pop	{r4, pc}
    2376:	bf00      	nop
    2378:	e000ed00 	.word	0xe000ed00
    237c:	000050f0 	.word	0x000050f0
    2380:	00005109 	.word	0x00005109
    2384:	0000511d 	.word	0x0000511d
    2388:	00005138 	.word	0x00005138
    238c:	00005157 	.word	0x00005157
    2390:	0000517d 	.word	0x0000517d
    2394:	00005198 	.word	0x00005198

00002398 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    2398:	b570      	push	{r4, r5, r6, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    239a:	4d28      	ldr	r5, [pc, #160]	; (243c <_Fault+0xa4>)
    239c:	686c      	ldr	r4, [r5, #4]
    239e:	f3c4 0408 	ubfx	r4, r4, #0, #9
{
    23a2:	4606      	mov	r6, r0

	LOG_PANIC();
    23a4:	f7fe ff48 	bl	1238 <log_panic>
	switch (fault) {
    23a8:	1ee3      	subs	r3, r4, #3
    23aa:	2b09      	cmp	r3, #9
    23ac:	d83a      	bhi.n	2424 <_Fault+0x8c>
    23ae:	e8df f003 	tbb	[pc, r3]
    23b2:	3305      	.short	0x3305
    23b4:	39393035 	.word	0x39393035
    23b8:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    23bc:	4820      	ldr	r0, [pc, #128]	; (2440 <_Fault+0xa8>)
    23be:	f7fe fb41 	bl	a44 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    23c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    23c4:	079a      	lsls	r2, r3, #30
    23c6:	d503      	bpl.n	23d0 <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
    23c8:	481e      	ldr	r0, [pc, #120]	; (2444 <_Fault+0xac>)
	PR_FAULT_INFO(
    23ca:	f7fe fb3b 	bl	a44 <printk>
    23ce:	e002      	b.n	23d6 <_Fault+0x3e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    23d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    23d2:	005b      	lsls	r3, r3, #1
    23d4:	d405      	bmi.n	23e2 <_Fault+0x4a>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    23d6:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
    23d8:	4631      	mov	r1, r6
}
    23da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_NanoFatalErrorHandler(reason, esf);
    23de:	f000 b8d1 	b.w	2584 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    23e2:	4819      	ldr	r0, [pc, #100]	; (2448 <_Fault+0xb0>)
    23e4:	f7fe fb2e 	bl	a44 <printk>
		if (SCB_MMFSR) {
    23e8:	4b18      	ldr	r3, [pc, #96]	; (244c <_Fault+0xb4>)
    23ea:	781b      	ldrb	r3, [r3, #0]
    23ec:	b12b      	cbz	r3, 23fa <_Fault+0x62>
			reason = _MpuFault(esf, 1);
    23ee:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    23f0:	f7ff ff00 	bl	21f4 <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    23f4:	2806      	cmp	r0, #6
    23f6:	d1ef      	bne.n	23d8 <_Fault+0x40>
}
    23f8:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR) {
    23fa:	4b15      	ldr	r3, [pc, #84]	; (2450 <_Fault+0xb8>)
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	b11b      	cbz	r3, 2408 <_Fault+0x70>
			reason = _BusFault(esf, 1);
    2400:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    2402:	f7ff ff3b 	bl	227c <_BusFault.isra.3>
    2406:	e7f5      	b.n	23f4 <_Fault+0x5c>
		} else if (SCB_UFSR) {
    2408:	4b12      	ldr	r3, [pc, #72]	; (2454 <_Fault+0xbc>)
    240a:	881b      	ldrh	r3, [r3, #0]
    240c:	b29b      	uxth	r3, r3
    240e:	2b00      	cmp	r3, #0
    2410:	d0e1      	beq.n	23d6 <_Fault+0x3e>
		reason = _UsageFault(esf);
    2412:	f7ff ff7d 	bl	2310 <_UsageFault.isra.5>
    2416:	e7ed      	b.n	23f4 <_Fault+0x5c>
		reason = _MpuFault(esf, 0);
    2418:	2000      	movs	r0, #0
    241a:	e7e9      	b.n	23f0 <_Fault+0x58>
		reason = _BusFault(esf, 0);
    241c:	2000      	movs	r0, #0
    241e:	e7f0      	b.n	2402 <_Fault+0x6a>
	PR_FAULT_INFO(
    2420:	480d      	ldr	r0, [pc, #52]	; (2458 <_Fault+0xc0>)
    2422:	e7d2      	b.n	23ca <_Fault+0x32>
	PR_FAULT_INFO("***** %s %d) *****\n",
    2424:	4b0d      	ldr	r3, [pc, #52]	; (245c <_Fault+0xc4>)
    2426:	490e      	ldr	r1, [pc, #56]	; (2460 <_Fault+0xc8>)
    2428:	480e      	ldr	r0, [pc, #56]	; (2464 <_Fault+0xcc>)
    242a:	f1a4 0210 	sub.w	r2, r4, #16
    242e:	2c0f      	cmp	r4, #15
    2430:	bfc8      	it	gt
    2432:	4619      	movgt	r1, r3
    2434:	f7fe fb06 	bl	a44 <printk>
    2438:	e7cd      	b.n	23d6 <_Fault+0x3e>
    243a:	bf00      	nop
    243c:	e000ed00 	.word	0xe000ed00
    2440:	00004f8e 	.word	0x00004f8e
    2444:	00004fa6 	.word	0x00004fa6
    2448:	00004fc8 	.word	0x00004fc8
    244c:	e000ed28 	.word	0xe000ed28
    2450:	e000ed29 	.word	0xe000ed29
    2454:	e000ed2a 	.word	0xe000ed2a
    2458:	00004fe8 	.word	0x00004fe8
    245c:	00004f75 	.word	0x00004f75
    2460:	00004f60 	.word	0x00004f60
    2464:	0000501f 	.word	0x0000501f

00002468 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2468:	4a02      	ldr	r2, [pc, #8]	; (2474 <_FaultInit+0xc>)
    246a:	6953      	ldr	r3, [r2, #20]
    246c:	f043 0310 	orr.w	r3, r3, #16
    2470:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2472:	4770      	bx	lr
    2474:	e000ed00 	.word	0xe000ed00

00002478 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2478:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    247a:	2b00      	cmp	r3, #0
    247c:	db08      	blt.n	2490 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    247e:	2201      	movs	r2, #1
    2480:	f000 001f 	and.w	r0, r0, #31
    2484:	fa02 f000 	lsl.w	r0, r2, r0
    2488:	095b      	lsrs	r3, r3, #5
    248a:	4a02      	ldr	r2, [pc, #8]	; (2494 <_arch_irq_enable+0x1c>)
    248c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2490:	4770      	bx	lr
    2492:	bf00      	nop
    2494:	e000e100 	.word	0xe000e100

00002498 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2498:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    249a:	2b00      	cmp	r3, #0
    249c:	db0d      	blt.n	24ba <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    249e:	2201      	movs	r2, #1
    24a0:	095b      	lsrs	r3, r3, #5
    24a2:	f000 001f 	and.w	r0, r0, #31
    24a6:	fa02 f000 	lsl.w	r0, r2, r0
    24aa:	3320      	adds	r3, #32
    24ac:	4a03      	ldr	r2, [pc, #12]	; (24bc <_arch_irq_disable+0x24>)
    24ae:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    24b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24b6:	f3bf 8f6f 	isb	sy
}
    24ba:	4770      	bx	lr
    24bc:	e000e100 	.word	0xe000e100

000024c0 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    24c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    24c2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    24c4:	bfa8      	it	ge
    24c6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    24ca:	f101 0101 	add.w	r1, r1, #1
    24ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
    24d2:	bfae      	itee	ge
    24d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    24d8:	f000 000f 	andlt.w	r0, r0, #15
    24dc:	4b03      	ldrlt	r3, [pc, #12]	; (24ec <_irq_priority_set+0x2c>)
    24de:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    24e0:	bfac      	ite	ge
    24e2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    24e6:	5419      	strblt	r1, [r3, r0]
}
    24e8:	4770      	bx	lr
    24ea:	bf00      	nop
    24ec:	e000ed14 	.word	0xe000ed14

000024f0 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    24f0:	f000 b834 	b.w	255c <__bus_fault>

000024f4 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    24f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24f6:	460c      	mov	r4, r1
    24f8:	4616      	mov	r6, r2
    24fa:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    24fc:	2204      	movs	r2, #4
    24fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2500:	9909      	ldr	r1, [sp, #36]	; 0x24
    2502:	4605      	mov	r5, r0
    2504:	f002 f948 	bl	4798 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2508:	f1a6 0120 	sub.w	r1, r6, #32
    250c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    250e:	4a0c      	ldr	r2, [pc, #48]	; (2540 <_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2510:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    2514:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    2516:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
    251a:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    251e:	e9c5 4616 	strd	r4, r6, [r5, #88]	; 0x58
    2522:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    2524:	9a06      	ldr	r2, [sp, #24]
    2526:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    2528:	9a07      	ldr	r2, [sp, #28]
    252a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    252c:	9a08      	ldr	r2, [sp, #32]
    252e:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    2530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    2534:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    2536:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    2538:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    253a:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    253e:	bf00      	nop
    2540:	000006ed 	.word	0x000006ed

00002544 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    2544:	4901      	ldr	r1, [pc, #4]	; (254c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    2546:	2210      	movs	r2, #16
	str r2, [r1]
    2548:	600a      	str	r2, [r1, #0]
	bx lr
    254a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    254c:	e000ed10 	.word	0xe000ed10

00002550 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    2550:	4040      	eors	r0, r0
	msr BASEPRI, r0
    2552:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    2556:	bf30      	wfi

	bx lr
    2558:	4770      	bx	lr
    255a:	bf00      	nop

0000255c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    255c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    255e:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    2562:	f8df c01c 	ldr.w	ip, [pc, #28]	; 2580 <__bus_fault+0x24>
	ldr ip, [ip]
    2566:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    256a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    256e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    2570:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    2574:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    2578:	b500      	push	{lr}
	bl _Fault
    257a:	f7ff ff0d 	bl	2398 <_Fault>

	pop {pc}
    257e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    2580:	e000ed04 	.word	0xe000ed04

00002584 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    2584:	b538      	push	{r3, r4, r5, lr}
    2586:	4604      	mov	r4, r0
    2588:	460d      	mov	r5, r1
	LOG_PANIC();
    258a:	f7fe fe55 	bl	1238 <log_panic>

	switch (reason) {
    258e:	2c05      	cmp	r4, #5
    2590:	d81a      	bhi.n	25c8 <_NanoFatalErrorHandler+0x44>
    2592:	e8df f004 	tbb	[pc, r4]
    2596:	1903      	.short	0x1903
    2598:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    259c:	480d      	ldr	r0, [pc, #52]	; (25d4 <_NanoFatalErrorHandler+0x50>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    259e:	f7fe fa51 	bl	a44 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    25a2:	f001 ffcb 	bl	453c <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    25a6:	69aa      	ldr	r2, [r5, #24]
    25a8:	4601      	mov	r1, r0
    25aa:	480b      	ldr	r0, [pc, #44]	; (25d8 <_NanoFatalErrorHandler+0x54>)
    25ac:	f7fe fa4a 	bl	a44 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    25b0:	4629      	mov	r1, r5
    25b2:	4620      	mov	r0, r4
}
    25b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    25b8:	f000 b81c 	b.w	25f4 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    25bc:	4807      	ldr	r0, [pc, #28]	; (25dc <_NanoFatalErrorHandler+0x58>)
    25be:	e7ee      	b.n	259e <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
    25c0:	4807      	ldr	r0, [pc, #28]	; (25e0 <_NanoFatalErrorHandler+0x5c>)
    25c2:	e7ec      	b.n	259e <_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
    25c4:	4807      	ldr	r0, [pc, #28]	; (25e4 <_NanoFatalErrorHandler+0x60>)
    25c6:	e7ea      	b.n	259e <_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    25c8:	4621      	mov	r1, r4
    25ca:	4807      	ldr	r0, [pc, #28]	; (25e8 <_NanoFatalErrorHandler+0x64>)
    25cc:	f7fe fa3a 	bl	a44 <printk>
		break;
    25d0:	e7e7      	b.n	25a2 <_NanoFatalErrorHandler+0x1e>
    25d2:	bf00      	nop
    25d4:	000051c4 	.word	0x000051c4
    25d8:	00005262 	.word	0x00005262
    25dc:	000051e4 	.word	0x000051e4
    25e0:	0000520a 	.word	0x0000520a
    25e4:	00005224 	.word	0x00005224
    25e8:	0000523f 	.word	0x0000523f

000025ec <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    25ec:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    25ee:	6800      	ldr	r0, [r0, #0]
    25f0:	f7ff bfc8 	b.w	2584 <_NanoFatalErrorHandler>

000025f4 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    25f4:	2805      	cmp	r0, #5
{
    25f6:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    25f8:	d00c      	beq.n	2614 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    25fa:	f002 f815 	bl	4628 <k_is_in_isr>
    25fe:	b160      	cbz	r0, 261a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    2600:	f002 f812 	bl	4628 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    2604:	490c      	ldr	r1, [pc, #48]	; (2638 <_SysFatalErrorHandler+0x44>)
    2606:	4b0d      	ldr	r3, [pc, #52]	; (263c <_SysFatalErrorHandler+0x48>)
    2608:	2800      	cmp	r0, #0
    260a:	bf08      	it	eq
    260c:	4619      	moveq	r1, r3
    260e:	480c      	ldr	r0, [pc, #48]	; (2640 <_SysFatalErrorHandler+0x4c>)
    2610:	f7fe fa18 	bl	a44 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    2614:	f7ff ff9c 	bl	2550 <k_cpu_idle>
    2618:	e7fc      	b.n	2614 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    261a:	f002 f815 	bl	4648 <_is_thread_essential>
    261e:	2800      	cmp	r0, #0
    2620:	d1ee      	bne.n	2600 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    2622:	4c08      	ldr	r4, [pc, #32]	; (2644 <_SysFatalErrorHandler+0x50>)
    2624:	4808      	ldr	r0, [pc, #32]	; (2648 <_SysFatalErrorHandler+0x54>)
    2626:	68a1      	ldr	r1, [r4, #8]
    2628:	f7fe fa0c 	bl	a44 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    262c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    262e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2632:	f000 b80b 	b.w	264c <_impl_k_thread_abort>
    2636:	bf00      	nop
    2638:	0000529e 	.word	0x0000529e
    263c:	000052a2 	.word	0x000052a2
    2640:	000052b3 	.word	0x000052b3
    2644:	2000076c 	.word	0x2000076c
    2648:	000052d3 	.word	0x000052d3

0000264c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    264c:	b538      	push	{r3, r4, r5, lr}
    264e:	4605      	mov	r5, r0
	__asm__ volatile(
    2650:	f04f 0320 	mov.w	r3, #32
    2654:	f3ef 8411 	mrs	r4, BASEPRI
    2658:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    265c:	f002 f82e 	bl	46bc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    2660:	4b0a      	ldr	r3, [pc, #40]	; (268c <_impl_k_thread_abort+0x40>)
    2662:	689b      	ldr	r3, [r3, #8]
    2664:	42ab      	cmp	r3, r5
    2666:	d10b      	bne.n	2680 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2668:	4b09      	ldr	r3, [pc, #36]	; (2690 <_impl_k_thread_abort+0x44>)
    266a:	685a      	ldr	r2, [r3, #4]
    266c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    2670:	b912      	cbnz	r2, 2678 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    2672:	4620      	mov	r0, r4
    2674:	f7ff fd72 	bl	215c <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2678:	685a      	ldr	r2, [r3, #4]
    267a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    267e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    2680:	4620      	mov	r0, r4
}
    2682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    2686:	f001 bd83 	b.w	4190 <_reschedule>
    268a:	bf00      	nop
    268c:	2000076c 	.word	0x2000076c
    2690:	e000ed00 	.word	0xe000ed00

00002694 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    2694:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    2696:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2698:	4a0b      	ldr	r2, [pc, #44]	; (26c8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    269a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    269c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    269e:	bf1e      	ittt	ne
	movne	r1, #0
    26a0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    26a2:	6211      	strne	r1, [r2, #32]
		blxne	_sys_power_save_idle_exit
    26a4:	f001 faec 	blne	3c80 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    26a8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    26aa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    26ae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    26b2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    26b6:	4905      	ldr	r1, [pc, #20]	; (26cc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    26b8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    26ba:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    26bc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    26be:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    26c2:	f7ff bd31 	b.w	2128 <_ExcExit>
    26c6:	0000      	.short	0x0000
	ldr r2, =_kernel
    26c8:	2000076c 	.word	0x2000076c
	ldr r1, =_sw_isr_table
    26cc:	000000dc 	.word	0x000000dc

000026d0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    26d0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    26d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    26d6:	4806      	ldr	r0, [pc, #24]	; (26f0 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    26d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    26dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    26de:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    26e2:	2002      	movs	r0, #2
    msr CONTROL, r0
    26e4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    26e8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    26ec:	f000 f806 	bl	26fc <_PrepC>
    ldr r0, =_interrupt_stack
    26f0:	20001480 	.word	0x20001480

000026f4 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    26f4:	bf30      	wfi
    b _SysNmiOnReset
    26f6:	f7ff bffd 	b.w	26f4 <_SysNmiOnReset>
    26fa:	bf00      	nop

000026fc <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    26fc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    26fe:	4b07      	ldr	r3, [pc, #28]	; (271c <_PrepC+0x20>)
    2700:	4a07      	ldr	r2, [pc, #28]	; (2720 <_PrepC+0x24>)
    2702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2706:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    270c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    2710:	f001 fad0 	bl	3cb4 <_bss_zero>
	_data_copy();
    2714:	f001 fad8 	bl	3cc8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    2718:	f001 fafa 	bl	3d10 <_Cstart>
    271c:	00000000 	.word	0x00000000
    2720:	e000ed00 	.word	0xe000ed00

00002724 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    2724:	b508      	push	{r3, lr}
	handler();
    2726:	f7ff ffe5 	bl	26f4 <_SysNmiOnReset>
	_ExcExit();
}
    272a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    272e:	f7ff bcfb 	b.w	2128 <_ExcExit>
	...

00002734 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2734:	4b03      	ldr	r3, [pc, #12]	; (2744 <arm_core_mpu_enable+0x10>)
    2736:	2205      	movs	r2, #5
    2738:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    273a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    273e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2742:	4770      	bx	lr
    2744:	e000ed90 	.word	0xe000ed90

00002748 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    2748:	4a11      	ldr	r2, [pc, #68]	; (2790 <arm_mpu_init+0x48>)
{
    274a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    274c:	6814      	ldr	r4, [r2, #0]
    274e:	2c08      	cmp	r4, #8
    2750:	d81b      	bhi.n	278a <arm_mpu_init+0x42>
	MPU->CTRL = 0;
    2752:	4910      	ldr	r1, [pc, #64]	; (2794 <arm_mpu_init+0x4c>)
    2754:	6850      	ldr	r0, [r2, #4]
    2756:	2300      	movs	r3, #0
    2758:	604b      	str	r3, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    275a:	429c      	cmp	r4, r3
    275c:	f100 000c 	add.w	r0, r0, #12
    2760:	d103      	bne.n	276a <arm_mpu_init+0x22>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    2762:	f7ff ffe7 	bl	2734 <arm_core_mpu_enable>
    2766:	2000      	movs	r0, #0
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    2768:	bd10      	pop	{r4, pc}
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    276a:	608b      	str	r3, [r1, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    276c:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    2770:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    2774:	f042 0210 	orr.w	r2, r2, #16
    2778:	431a      	orrs	r2, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    277a:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    277c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    2780:	f042 0201 	orr.w	r2, r2, #1
    2784:	610a      	str	r2, [r1, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    2786:	3301      	adds	r3, #1
    2788:	e7e7      	b.n	275a <arm_mpu_init+0x12>
		return -1;
    278a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    278e:	e7eb      	b.n	2768 <arm_mpu_init+0x20>
    2790:	20001c84 	.word	0x20001c84
    2794:	e000ed90 	.word	0xe000ed90

00002798 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    2798:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    279a:	4603      	mov	r3, r0
    279c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    27a0:	b90a      	cbnz	r2, 27a6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    27a2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    27a4:	4770      	bx	lr
		*d = *s;
    27a6:	f803 2b01 	strb.w	r2, [r3], #1
    27aa:	e7f7      	b.n	279c <strcpy+0x4>

000027ac <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    27ac:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    27ae:	7802      	ldrb	r2, [r0, #0]
    27b0:	428a      	cmp	r2, r1
    27b2:	4603      	mov	r3, r0
    27b4:	f100 0001 	add.w	r0, r0, #1
    27b8:	d004      	beq.n	27c4 <strchr+0x18>
    27ba:	2a00      	cmp	r2, #0
    27bc:	d1f7      	bne.n	27ae <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    27be:	2900      	cmp	r1, #0
    27c0:	bf18      	it	ne
    27c2:	2300      	movne	r3, #0
}
    27c4:	4618      	mov	r0, r3
    27c6:	4770      	bx	lr

000027c8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    27c8:	3801      	subs	r0, #1
    27ca:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    27cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    27d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    27d4:	4293      	cmp	r3, r2
    27d6:	d102      	bne.n	27de <strcmp+0x16>
    27d8:	2b00      	cmp	r3, #0
    27da:	d1f7      	bne.n	27cc <strcmp+0x4>
    27dc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    27de:	1a98      	subs	r0, r3, r2
    27e0:	4770      	bx	lr

000027e2 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    27e2:	1a43      	subs	r3, r0, r1
    27e4:	4293      	cmp	r3, r2
{
    27e6:	b510      	push	{r4, lr}
    27e8:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    27ec:	d308      	bcc.n	2800 <memmove+0x1e>
    27ee:	3901      	subs	r1, #1
	char *dest = d;
    27f0:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    27f2:	429a      	cmp	r2, r3
    27f4:	d00b      	beq.n	280e <memmove+0x2c>
			*dest = *src;
    27f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    27fa:	f802 4b01 	strb.w	r4, [r2], #1
    27fe:	e7f8      	b.n	27f2 <memmove+0x10>
    2800:	440a      	add	r2, r1
			dest[n] = src[n];
    2802:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    2806:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    280a:	428a      	cmp	r2, r1
    280c:	d1f9      	bne.n	2802 <memmove+0x20>
			n--;
		}
	}

	return d;
}
    280e:	bd10      	pop	{r4, pc}

00002810 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    2810:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    2812:	ea81 0400 	eor.w	r4, r1, r0
    2816:	07a5      	lsls	r5, r4, #30
    2818:	4603      	mov	r3, r0
    281a:	d00b      	beq.n	2834 <memcpy+0x24>
    281c:	3b01      	subs	r3, #1
    281e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2820:	4291      	cmp	r1, r2
    2822:	d11d      	bne.n	2860 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    2824:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    2826:	2a00      	cmp	r2, #0
    2828:	d0fc      	beq.n	2824 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    282a:	f811 4b01 	ldrb.w	r4, [r1], #1
    282e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    2832:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    2834:	079c      	lsls	r4, r3, #30
    2836:	d1f6      	bne.n	2826 <memcpy+0x16>
    2838:	1f1d      	subs	r5, r3, #4
    283a:	460c      	mov	r4, r1
    283c:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    283e:	1b3e      	subs	r6, r7, r4
    2840:	2e03      	cmp	r6, #3
    2842:	d808      	bhi.n	2856 <memcpy+0x46>
    2844:	0894      	lsrs	r4, r2, #2
    2846:	f06f 0503 	mvn.w	r5, #3
    284a:	fb05 2204 	mla	r2, r5, r4, r2
    284e:	00a4      	lsls	r4, r4, #2
    2850:	4423      	add	r3, r4
    2852:	4421      	add	r1, r4
    2854:	e7e2      	b.n	281c <memcpy+0xc>
			*(d_word++) = *(s_word++);
    2856:	f854 6b04 	ldr.w	r6, [r4], #4
    285a:	f845 6f04 	str.w	r6, [r5, #4]!
    285e:	e7ee      	b.n	283e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    2860:	f811 4b01 	ldrb.w	r4, [r1], #1
    2864:	f803 4f01 	strb.w	r4, [r3, #1]!
    2868:	e7da      	b.n	2820 <memcpy+0x10>

0000286a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    286a:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    286c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    286e:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    2870:	079c      	lsls	r4, r3, #30
    2872:	d10f      	bne.n	2894 <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    2874:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    2878:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    287c:	461d      	mov	r5, r3
    287e:	189f      	adds	r7, r3, r2
    2880:	1b7e      	subs	r6, r7, r5
    2882:	2e03      	cmp	r6, #3
    2884:	d80c      	bhi.n	28a0 <memset+0x36>
    2886:	0894      	lsrs	r4, r2, #2
    2888:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    288c:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    288e:	429c      	cmp	r4, r3
    2890:	d109      	bne.n	28a6 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    2892:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    2894:	2a00      	cmp	r2, #0
    2896:	d0fc      	beq.n	2892 <memset+0x28>
		*(d_byte++) = c_byte;
    2898:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    289c:	3a01      	subs	r2, #1
    289e:	e7e7      	b.n	2870 <memset+0x6>
		*(d_word++) = c_word;
    28a0:	f845 4b04 	str.w	r4, [r5], #4
    28a4:	e7ec      	b.n	2880 <memset+0x16>
		*(d_byte++) = c_byte;
    28a6:	f804 1b01 	strb.w	r1, [r4], #1
    28aa:	e7f0      	b.n	288e <memset+0x24>

000028ac <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    28ac:	b570      	push	{r4, r5, r6, lr}
    28ae:	4604      	mov	r4, r0
	char *buf0 = buf;

	do {
		int d = n % base;
    28b0:	fbb1 f6f2 	udiv	r6, r1, r2
    28b4:	fb02 1116 	mls	r1, r2, r6, r1

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    28b8:	b2cd      	uxtb	r5, r1
    28ba:	2909      	cmp	r1, #9
    28bc:	bf8c      	ite	hi
    28be:	2127      	movhi	r1, #39	; 0x27
    28c0:	2100      	movls	r1, #0
    28c2:	3530      	adds	r5, #48	; 0x30
    28c4:	4429      	add	r1, r5
    28c6:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
    28ca:	4631      	mov	r1, r6
    28cc:	2e00      	cmp	r6, #0
    28ce:	d1ef      	bne.n	28b0 <_to_x+0x4>
		*end++ = '0';
    28d0:	2130      	movs	r1, #48	; 0x30
    28d2:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
    28d4:	4293      	cmp	r3, r2
    28d6:	dc07      	bgt.n	28e8 <_to_x+0x3c>
	*end = 0;
    28d8:	4623      	mov	r3, r4
    28da:	2100      	movs	r1, #0
    28dc:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
    28e0:	4283      	cmp	r3, r0
    28e2:	d804      	bhi.n	28ee <_to_x+0x42>
	return _reverse_and_pad(buf0, buf, minlen);
}
    28e4:	4610      	mov	r0, r2
    28e6:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
    28e8:	f804 1b01 	strb.w	r1, [r4], #1
    28ec:	e7f1      	b.n	28d2 <_to_x+0x26>
		char tmp = *end;
    28ee:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
    28f0:	7804      	ldrb	r4, [r0, #0]
    28f2:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
    28f6:	f800 1b01 	strb.w	r1, [r0], #1
    28fa:	e7f1      	b.n	28e0 <_to_x+0x34>

000028fc <_rlrshift>:
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
    28fc:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    2900:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
    2904:	ea5f 0c53 	movs.w	ip, r3, lsr #1
    2908:	ea4f 0b32 	mov.w	fp, r2, rrx
    290c:	f002 0401 	and.w	r4, r2, #1
    2910:	eb1b 0204 	adds.w	r2, fp, r4
    2914:	f04f 0500 	mov.w	r5, #0
    2918:	eb4c 0305 	adc.w	r3, ip, r5
    291c:	e9c0 2300 	strd	r2, r3, [r0]
}
    2920:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00002924 <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
    2924:	e9d0 2300 	ldrd	r2, r3, [r0]
{
    2928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5) << shifts[i];
    292c:	2105      	movs	r1, #5
	rem += 2;
    292e:	f112 0802 	adds.w	r8, r2, #2
		rem -= q * 5;
    2932:	f04f 0600 	mov.w	r6, #0
	rem += 2;
    2936:	f143 0900 	adc.w	r9, r3, #0
		rem -= q * 5;
    293a:	ebb8 0806 	subs.w	r8, r8, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    293e:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5;
    2942:	fb01 f705 	mul.w	r7, r1, r5
    2946:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
    294a:	ea4f 06d8 	mov.w	r6, r8, lsr #3
    294e:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5) << shifts[i];
    2952:	2400      	movs	r4, #0
    2954:	fbb6 fcf1 	udiv	ip, r6, r1
    2958:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		quot += q;
    295c:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    295e:	ea4f 775c 	mov.w	r7, ip, lsr #29
		rem -= q * 5;
    2962:	46c2      	mov	sl, r8
		quot += q;
    2964:	eb45 0307 	adc.w	r3, r5, r7
    2968:	4614      	mov	r4, r2
		rem -= q * 5;
    296a:	fba6 8901 	umull	r8, r9, r6, r1
    296e:	ebba 0208 	subs.w	r2, sl, r8
		quot += q;
    2972:	461d      	mov	r5, r3
		q = (uint64_t)(hi / 5) << shifts[i];
    2974:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
    2978:	18a4      	adds	r4, r4, r2
    297a:	f145 0500 	adc.w	r5, r5, #0
	}

	*v = quot;
    297e:	e9c0 4500 	strd	r4, r5, [r0]
}
    2982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002986 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
    2986:	680b      	ldr	r3, [r1, #0]
    2988:	2b00      	cmp	r3, #0
{
    298a:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
    298e:	dd13      	ble.n	29b8 <_get_digit+0x32>
		*digit_count -= 1;
		*fr = *fr * 10;
    2990:	6802      	ldr	r2, [r0, #0]
    2992:	6844      	ldr	r4, [r0, #4]
		*digit_count -= 1;
    2994:	3b01      	subs	r3, #1
    2996:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
    2998:	210a      	movs	r1, #10
    299a:	fba2 bc01 	umull	fp, ip, r2, r1
    299e:	fb01 cc04 	mla	ip, r1, r4, ip
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    29a2:	465a      	mov	r2, fp
    29a4:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
    29a8:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    29ac:	ea4f 711c 	mov.w	r1, ip, lsr #28
    29b0:	3130      	adds	r1, #48	; 0x30
	} else
		rval = '0';
	return (char) (rval);
}
    29b2:	b2c8      	uxtb	r0, r1
    29b4:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
    29b8:	2130      	movs	r1, #48	; 0x30
    29ba:	e7fa      	b.n	29b2 <_get_digit+0x2c>

000029bc <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    29bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29c0:	b0c9      	sub	sp, #292	; 0x124
    29c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    29c6:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    29c8:	2300      	movs	r3, #0
{
    29ca:	4693      	mov	fp, r2
	count = 0;
    29cc:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
    29ce:	f89b 0000 	ldrb.w	r0, [fp]
    29d2:	f10b 0501 	add.w	r5, fp, #1
    29d6:	b148      	cbz	r0, 29ec <_prf+0x30>
		if (c != '%') {
    29d8:	2825      	cmp	r0, #37	; 0x25
    29da:	d07b      	beq.n	2ad4 <_prf+0x118>
			if ((*func) (c, dest) == EOF) {
    29dc:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    29e0:	4798      	blx	r3
    29e2:	3001      	adds	r0, #1
    29e4:	d106      	bne.n	29f4 <_prf+0x38>
				return EOF;
    29e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29ea:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    29ec:	9804      	ldr	r0, [sp, #16]
    29ee:	b049      	add	sp, #292	; 0x124
    29f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
    29f4:	9b04      	ldr	r3, [sp, #16]
    29f6:	3301      	adds	r3, #1
    29f8:	e9cd 3704 	strd	r3, r7, [sp, #16]
	while ((c = *format++)) {
    29fc:	46ab      	mov	fp, r5
			if (c >= MAXFLD + 1)
    29fe:	9f05      	ldr	r7, [sp, #20]
    2a00:	e7e5      	b.n	29ce <_prf+0x12>
				switch (c) {
    2a02:	2c23      	cmp	r4, #35	; 0x23
    2a04:	d05f      	beq.n	2ac6 <_prf+0x10a>
    2a06:	d854      	bhi.n	2ab2 <_prf+0xf6>
    2a08:	2c00      	cmp	r4, #0
    2a0a:	d0ef      	beq.n	29ec <_prf+0x30>
					fspace = true;
    2a0c:	2c20      	cmp	r4, #32
    2a0e:	bf08      	it	eq
    2a10:	f04f 0901 	moveq.w	r9, #1
					fplus = true;
    2a14:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    2a16:	46ab      	mov	fp, r5
    2a18:	48bf      	ldr	r0, [pc, #764]	; (2d18 <_prf+0x35c>)
    2a1a:	f81b 4b01 	ldrb.w	r4, [fp], #1
    2a1e:	4621      	mov	r1, r4
    2a20:	f7ff fec4 	bl	27ac <strchr>
    2a24:	2800      	cmp	r0, #0
    2a26:	d1ec      	bne.n	2a02 <_prf+0x46>
			if (c == '*') {
    2a28:	2c2a      	cmp	r4, #42	; 0x2a
    2a2a:	d15b      	bne.n	2ae4 <_prf+0x128>
				width = (int32_t) va_arg(vargs, int32_t);
    2a2c:	683a      	ldr	r2, [r7, #0]
    2a2e:	9203      	str	r2, [sp, #12]
				if (width < 0) {
    2a30:	2a00      	cmp	r2, #0
					width = -width;
    2a32:	bfb8      	it	lt
    2a34:	4252      	neglt	r2, r2
				width = (int32_t) va_arg(vargs, int32_t);
    2a36:	f107 0304 	add.w	r3, r7, #4
					width = -width;
    2a3a:	bfb8      	it	lt
    2a3c:	9203      	strlt	r2, [sp, #12]
				c = *format++;
    2a3e:	786c      	ldrb	r4, [r5, #1]
					fminus = true;
    2a40:	bfbc      	itt	lt
    2a42:	2201      	movlt	r2, #1
    2a44:	9206      	strlt	r2, [sp, #24]
				c = *format++;
    2a46:	f105 0b02 	add.w	fp, r5, #2
				width = (int32_t) va_arg(vargs, int32_t);
    2a4a:	461f      	mov	r7, r3
				width = MAXFLD;
    2a4c:	9b03      	ldr	r3, [sp, #12]
    2a4e:	2bc9      	cmp	r3, #201	; 0xc9
    2a50:	bf28      	it	cs
    2a52:	23c8      	movcs	r3, #200	; 0xc8
    2a54:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    2a56:	2c2e      	cmp	r4, #46	; 0x2e
    2a58:	d169      	bne.n	2b2e <_prf+0x172>
				if (c == '*') {
    2a5a:	f89b 3000 	ldrb.w	r3, [fp]
    2a5e:	2b2a      	cmp	r3, #42	; 0x2a
    2a60:	d162      	bne.n	2b28 <_prf+0x16c>
					precision = (int32_t)
    2a62:	683d      	ldr	r5, [r7, #0]
				c = *format++;
    2a64:	f10b 0b01 	add.w	fp, fp, #1
					precision = (int32_t)
    2a68:	3704      	adds	r7, #4
					precision = -1;
    2a6a:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    2a6c:	f89b 4000 	ldrb.w	r4, [fp]
					precision = -1;
    2a70:	bfa8      	it	ge
    2a72:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
				c = *format++;
    2a76:	f10b 0b01 	add.w	fp, fp, #1
			if (strchr("hlLz", c) != NULL) {
    2a7a:	4621      	mov	r1, r4
    2a7c:	48a7      	ldr	r0, [pc, #668]	; (2d1c <_prf+0x360>)
    2a7e:	f7ff fe95 	bl	27ac <strchr>
    2a82:	b118      	cbz	r0, 2a8c <_prf+0xd0>
				c = *format++;
    2a84:	f89b 4000 	ldrb.w	r4, [fp]
    2a88:	f10b 0b01 	add.w	fp, fp, #1
			switch (c) {
    2a8c:	2c67      	cmp	r4, #103	; 0x67
    2a8e:	dc7c      	bgt.n	2b8a <_prf+0x1ce>
    2a90:	2c65      	cmp	r4, #101	; 0x65
    2a92:	f280 80e0 	bge.w	2c56 <_prf+0x29a>
    2a96:	2c47      	cmp	r4, #71	; 0x47
    2a98:	dc4c      	bgt.n	2b34 <_prf+0x178>
    2a9a:	2c45      	cmp	r4, #69	; 0x45
    2a9c:	f280 80db 	bge.w	2c56 <_prf+0x29a>
    2aa0:	2c00      	cmp	r4, #0
    2aa2:	d0a3      	beq.n	29ec <_prf+0x30>
    2aa4:	2c25      	cmp	r4, #37	; 0x25
    2aa6:	f000 8335 	beq.w	3114 <_prf+0x758>
			if (c >= MAXFLD + 1)
    2aaa:	2cc8      	cmp	r4, #200	; 0xc8
    2aac:	f340 833c 	ble.w	3128 <_prf+0x76c>
    2ab0:	e799      	b.n	29e6 <_prf+0x2a>
				switch (c) {
    2ab2:	2c2d      	cmp	r4, #45	; 0x2d
    2ab4:	d00b      	beq.n	2ace <_prf+0x112>
    2ab6:	2c30      	cmp	r4, #48	; 0x30
    2ab8:	d007      	beq.n	2aca <_prf+0x10e>
					fplus = true;
    2aba:	2c2b      	cmp	r4, #43	; 0x2b
    2abc:	9b07      	ldr	r3, [sp, #28]
    2abe:	bf08      	it	eq
    2ac0:	2301      	moveq	r3, #1
    2ac2:	9307      	str	r3, [sp, #28]
    2ac4:	e7a6      	b.n	2a14 <_prf+0x58>
					falt = true;
    2ac6:	2601      	movs	r6, #1
					break;
    2ac8:	e7a4      	b.n	2a14 <_prf+0x58>
					pad = '0';
    2aca:	9402      	str	r4, [sp, #8]
					break;
    2acc:	e7a2      	b.n	2a14 <_prf+0x58>
					fminus = true;
    2ace:	2301      	movs	r3, #1
    2ad0:	9306      	str	r3, [sp, #24]
    2ad2:	e79f      	b.n	2a14 <_prf+0x58>
			fminus = fplus = fspace = falt = false;
    2ad4:	f04f 0900 	mov.w	r9, #0
			pad = ' ';		/* Default pad character    */
    2ad8:	2320      	movs	r3, #32
    2ada:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    2adc:	e9cd 9906 	strd	r9, r9, [sp, #24]
    2ae0:	464e      	mov	r6, r9
    2ae2:	e798      	b.n	2a16 <_prf+0x5a>
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    2ae4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c))
    2ae8:	2b09      	cmp	r3, #9
				width = 0;
    2aea:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c))
    2aec:	d8b3      	bhi.n	2a56 <_prf+0x9a>
		i = 10 * i + *p++ - '0';
    2aee:	220a      	movs	r2, #10
	while (isdigit(((int) *p)))
    2af0:	46ab      	mov	fp, r5
    2af2:	f81b 0b01 	ldrb.w	r0, [fp], #1
    2af6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2afa:	2b09      	cmp	r3, #9
    2afc:	4604      	mov	r4, r0
    2afe:	d8a5      	bhi.n	2a4c <_prf+0x90>
		i = 10 * i + *p++ - '0';
    2b00:	9b03      	ldr	r3, [sp, #12]
    2b02:	fb02 0003 	mla	r0, r2, r3, r0
    2b06:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2b0a:	9303      	str	r3, [sp, #12]
    2b0c:	465d      	mov	r5, fp
    2b0e:	e7ef      	b.n	2af0 <_prf+0x134>
    2b10:	fb00 3505 	mla	r5, r0, r5, r3
    2b14:	3d30      	subs	r5, #48	; 0x30
    2b16:	4693      	mov	fp, r2
	while (isdigit(((int) *p)))
    2b18:	465a      	mov	r2, fp
    2b1a:	f812 3b01 	ldrb.w	r3, [r2], #1
    2b1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    2b22:	2909      	cmp	r1, #9
    2b24:	d9f4      	bls.n	2b10 <_prf+0x154>
    2b26:	e7a0      	b.n	2a6a <_prf+0xae>
	i = 0;
    2b28:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    2b2a:	200a      	movs	r0, #10
    2b2c:	e7f4      	b.n	2b18 <_prf+0x15c>
			precision = -1;	/* No precision specified   */
    2b2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2b32:	e7a2      	b.n	2a7a <_prf+0xbe>
			switch (c) {
    2b34:	2c63      	cmp	r4, #99	; 0x63
    2b36:	d06f      	beq.n	2c18 <_prf+0x25c>
    2b38:	dc32      	bgt.n	2ba0 <_prf+0x1e4>
    2b3a:	2c58      	cmp	r4, #88	; 0x58
    2b3c:	d1b5      	bne.n	2aaa <_prf+0xee>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    2b3e:	1d3b      	adds	r3, r7, #4
    2b40:	9305      	str	r3, [sp, #20]
    2b42:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    2b44:	2e00      	cmp	r6, #0
    2b46:	f000 82dc 	beq.w	3102 <_prf+0x746>
		*buf++ = '0';
    2b4a:	f647 0330 	movw	r3, #30768	; 0x7830
    2b4e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
		*buf++ = 'x';
    2b52:	f10d 0756 	add.w	r7, sp, #86	; 0x56
	len = _to_x(buf, value, 16, precision);
    2b56:	462b      	mov	r3, r5
    2b58:	2210      	movs	r2, #16
    2b5a:	4638      	mov	r0, r7
    2b5c:	f7ff fea6 	bl	28ac <_to_x>
	if (prefix == 'X') {
    2b60:	2c58      	cmp	r4, #88	; 0x58
    2b62:	d106      	bne.n	2b72 <_prf+0x1b6>
    2b64:	f10d 0253 	add.w	r2, sp, #83	; 0x53
	for (/**/; *buf; buf++) {
    2b68:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	f040 82ca 	bne.w	3106 <_prf+0x74a>
	return len + (buf - buf0);
    2b72:	f10d 0854 	add.w	r8, sp, #84	; 0x54
			prefix = 0;
    2b76:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
    2b78:	eba7 0808 	sub.w	r8, r7, r8
    2b7c:	4440      	add	r0, r8
			prefix = 0;
    2b7e:	bf14      	ite	ne
    2b80:	f04f 0902 	movne.w	r9, #2
    2b84:	f04f 0900 	moveq.w	r9, #0
    2b88:	e029      	b.n	2bde <_prf+0x222>
			switch (c) {
    2b8a:	2c70      	cmp	r4, #112	; 0x70
    2b8c:	f000 8294 	beq.w	30b8 <_prf+0x6fc>
    2b90:	dc2b      	bgt.n	2bea <_prf+0x22e>
    2b92:	2c6e      	cmp	r4, #110	; 0x6e
    2b94:	f000 8253 	beq.w	303e <_prf+0x682>
    2b98:	f300 8257 	bgt.w	304a <_prf+0x68e>
    2b9c:	2c69      	cmp	r4, #105	; 0x69
    2b9e:	d184      	bne.n	2aaa <_prf+0xee>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    2ba0:	683c      	ldr	r4, [r7, #0]
    2ba2:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
    2ba4:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    2ba6:	9305      	str	r3, [sp, #20]
	if (value < 0) {
    2ba8:	da42      	bge.n	2c30 <_prf+0x274>
		*buf++ = '-';
    2baa:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000)
    2bac:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    2bb0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (value != 0x80000000)
    2bb4:	d041      	beq.n	2c3a <_prf+0x27e>
			value = -value;
    2bb6:	4261      	negs	r1, r4
		*buf++ = ' ';
    2bb8:	f10d 0855 	add.w	r8, sp, #85	; 0x55
	return _to_x(buf, value, 10, precision);
    2bbc:	462b      	mov	r3, r5
    2bbe:	4640      	mov	r0, r8
    2bc0:	220a      	movs	r2, #10
    2bc2:	f7ff fe73 	bl	28ac <_to_x>
				if (fplus || fspace || (int32_temp < 0))
    2bc6:	9b07      	ldr	r3, [sp, #28]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    2bc8:	4480      	add	r8, r0
    2bca:	a815      	add	r0, sp, #84	; 0x54
    2bcc:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (int32_temp < 0))
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d13d      	bne.n	2c50 <_prf+0x294>
    2bd4:	f1b9 0f00 	cmp.w	r9, #0
    2bd8:	d101      	bne.n	2bde <_prf+0x222>
    2bda:	ea4f 79d4 	mov.w	r9, r4, lsr #31
			prefix = 0;
    2bde:	3501      	adds	r5, #1
    2be0:	9b02      	ldr	r3, [sp, #8]
    2be2:	bf18      	it	ne
    2be4:	2320      	movne	r3, #32
    2be6:	9302      	str	r3, [sp, #8]
    2be8:	e080      	b.n	2cec <_prf+0x330>
			switch (c) {
    2bea:	2c75      	cmp	r4, #117	; 0x75
    2bec:	f000 8280 	beq.w	30f0 <_prf+0x734>
    2bf0:	2c78      	cmp	r4, #120	; 0x78
    2bf2:	d0a4      	beq.n	2b3e <_prf+0x182>
    2bf4:	2c73      	cmp	r4, #115	; 0x73
    2bf6:	f47f af58 	bne.w	2aaa <_prf+0xee>
				cptr_temp = (char *) va_arg(vargs, char *);
    2bfa:	1d3b      	adds	r3, r7, #4
    2bfc:	6839      	ldr	r1, [r7, #0]
    2bfe:	9305      	str	r3, [sp, #20]
				for (c = 0; c < MAXFLD; c++) {
    2c00:	2600      	movs	r6, #0
					if (cptr_temp[c] == '\0') {
    2c02:	5d8b      	ldrb	r3, [r1, r6]
    2c04:	2b00      	cmp	r3, #0
    2c06:	f000 8266 	beq.w	30d6 <_prf+0x71a>
				for (c = 0; c < MAXFLD; c++) {
    2c0a:	3601      	adds	r6, #1
    2c0c:	2ec8      	cmp	r6, #200	; 0xc8
    2c0e:	d1f8      	bne.n	2c02 <_prf+0x246>
				if ((precision >= 0) && (precision < c))
    2c10:	2d00      	cmp	r5, #0
    2c12:	f280 8262 	bge.w	30da <_prf+0x71e>
    2c16:	e266      	b.n	30e6 <_prf+0x72a>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    2c18:	1d3b      	adds	r3, r7, #4
    2c1a:	9305      	str	r3, [sp, #20]
    2c1c:	683b      	ldr	r3, [r7, #0]
    2c1e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				buf[1] = '\0';
    2c22:	2300      	movs	r3, #0
    2c24:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				c = 1;
    2c28:	2601      	movs	r6, #1
					prefix = 2;
    2c2a:	f04f 0900 	mov.w	r9, #0
    2c2e:	e21c      	b.n	306a <_prf+0x6ae>
	} else if (fplus)
    2c30:	9b07      	ldr	r3, [sp, #28]
    2c32:	b123      	cbz	r3, 2c3e <_prf+0x282>
		*buf++ = '+';
    2c34:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    2c36:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    2c3a:	4621      	mov	r1, r4
    2c3c:	e7bc      	b.n	2bb8 <_prf+0x1fc>
	else if (fspace)
    2c3e:	f1b9 0f00 	cmp.w	r9, #0
    2c42:	d001      	beq.n	2c48 <_prf+0x28c>
		*buf++ = ' ';
    2c44:	2320      	movs	r3, #32
    2c46:	e7f6      	b.n	2c36 <_prf+0x27a>
	else if (fspace)
    2c48:	4621      	mov	r1, r4
    2c4a:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    2c4e:	e7b5      	b.n	2bbc <_prf+0x200>
					prefix = 1;
    2c50:	f8dd 901c 	ldr.w	r9, [sp, #28]
    2c54:	e7c3      	b.n	2bde <_prf+0x222>
				u.d = (double) va_arg(vargs, double);
    2c56:	3707      	adds	r7, #7
    2c58:	f027 0707 	bic.w	r7, r7, #7
    2c5c:	f107 0308 	add.w	r3, r7, #8
				double_temp = u.i;
    2c60:	e9d7 c700 	ldrd	ip, r7, [r7]
				u.d = (double) va_arg(vargs, double);
    2c64:	9305      	str	r3, [sp, #20]
	fract = (double_temp << 11) & ~HIGHBIT64;
    2c66:	02fb      	lsls	r3, r7, #11
    2c68:	ea43 535c 	orr.w	r3, r3, ip, lsr #21
    2c6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    2c70:	ea4f 22cc 	mov.w	r2, ip, lsl #11
    2c74:	460b      	mov	r3, r1
	exp = double_temp >> 52 & 0x7ff;
    2c76:	f3c7 580a 	ubfx	r8, r7, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    2c7a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (exp == 0x7ff) {
    2c7e:	f240 73ff 	movw	r3, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
    2c82:	4610      	mov	r0, r2
	if (exp == 0x7ff) {
    2c84:	4598      	cmp	r8, r3
	fract = (double_temp << 11) & ~HIGHBIT64;
    2c86:	e9cd 0100 	strd	r0, r1, [sp]
	sign = !!(double_temp & HIGHBIT64);
    2c8a:	4660      	mov	r0, ip
	if (exp == 0x7ff) {
    2c8c:	d148      	bne.n	2d20 <_prf+0x364>
		if (sign) {
    2c8e:	2800      	cmp	r0, #0
		if (!fract) {
    2c90:	e9dd 1200 	ldrd	r1, r2, [sp]
		if (sign) {
    2c94:	f177 0300 	sbcs.w	r3, r7, #0
			*buf++ = '-';
    2c98:	bfb8      	it	lt
    2c9a:	232d      	movlt	r3, #45	; 0x2d
    2c9c:	a815      	add	r0, sp, #84	; 0x54
    2c9e:	bfb6      	itet	lt
    2ca0:	f88d 3054 	strblt.w	r3, [sp, #84]	; 0x54
		if (sign) {
    2ca4:	4603      	movge	r3, r0
			*buf++ = '-';
    2ca6:	f10d 0355 	addlt.w	r3, sp, #85	; 0x55
		if (!fract) {
    2caa:	430a      	orrs	r2, r1
    2cac:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    2cb0:	f103 0803 	add.w	r8, r3, #3
    2cb4:	d125      	bne.n	2d02 <_prf+0x346>
			if (isupper(c)) {
    2cb6:	2c19      	cmp	r4, #25
    2cb8:	d81d      	bhi.n	2cf6 <_prf+0x33a>
				*buf++ = 'I';
    2cba:	2249      	movs	r2, #73	; 0x49
    2cbc:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    2cbe:	224e      	movs	r2, #78	; 0x4e
    2cc0:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    2cc2:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    2cc4:	709a      	strb	r2, [r3, #2]
		*buf = 0;
    2cc6:	2200      	movs	r2, #0
    2cc8:	70da      	strb	r2, [r3, #3]
				if (fplus || fspace || (buf[0] == '-'))
    2cca:	9b07      	ldr	r3, [sp, #28]
	return buf - start;
    2ccc:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (buf[0] == '-'))
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	f040 8255 	bne.w	3180 <_prf+0x7c4>
    2cd6:	f1b9 0f00 	cmp.w	r9, #0
    2cda:	d107      	bne.n	2cec <_prf+0x330>
    2cdc:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    2ce0:	f1a1 032d 	sub.w	r3, r1, #45	; 0x2d
    2ce4:	f1d3 0900 	rsbs	r9, r3, #0
    2ce8:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1)
    2cec:	28c8      	cmp	r0, #200	; 0xc8
    2cee:	f73f ae7a 	bgt.w	29e6 <_prf+0x2a>
    2cf2:	4606      	mov	r6, r0
    2cf4:	e1b9      	b.n	306a <_prf+0x6ae>
				*buf++ = 'i';
    2cf6:	2269      	movs	r2, #105	; 0x69
    2cf8:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    2cfa:	226e      	movs	r2, #110	; 0x6e
    2cfc:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    2cfe:	2266      	movs	r2, #102	; 0x66
    2d00:	e7e0      	b.n	2cc4 <_prf+0x308>
			if (isupper(c)) {
    2d02:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    2d04:	bf99      	ittee	ls
    2d06:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    2d08:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    2d0a:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    2d0c:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    2d0e:	bf94      	ite	ls
    2d10:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    2d12:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    2d14:	7059      	strb	r1, [r3, #1]
    2d16:	e7d5      	b.n	2cc4 <_prf+0x308>
    2d18:	000052fc 	.word	0x000052fc
    2d1c:	00005302 	.word	0x00005302
	if ((exp | fract) != 0) {
    2d20:	e9dd 2300 	ldrd	r2, r3, [sp]
		c = 'f';
    2d24:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    2d26:	ea42 0208 	orr.w	r2, r2, r8
    2d2a:	ea43 73e8 	orr.w	r3, r3, r8, asr #31
		c = 'f';
    2d2e:	bf08      	it	eq
    2d30:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    2d32:	4313      	orrs	r3, r2
    2d34:	d043      	beq.n	2dbe <_prf+0x402>
		fract |= HIGHBIT64;
    2d36:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (decexp && sign) {
    2d3a:	2800      	cmp	r0, #0
		fract |= HIGHBIT64;
    2d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2d40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (decexp && sign) {
    2d44:	f177 0300 	sbcs.w	r3, r7, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2d48:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
	if (decexp && sign) {
    2d4c:	da39      	bge.n	2dc2 <_prf+0x406>
		*buf++ = '-';
    2d4e:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    2d50:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    2d54:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
	decexp = 0;
    2d58:	2300      	movs	r3, #0
    2d5a:	9300      	str	r3, [sp, #0]
	while (exp <= -3) {
    2d5c:	f118 0f02 	cmn.w	r8, #2
    2d60:	db3e      	blt.n	2de0 <_prf+0x424>
	while (exp > 0) {
    2d62:	f1b8 0f00 	cmp.w	r8, #0
    2d66:	dc79      	bgt.n	2e5c <_prf+0x4a0>
		_rlrshift(&fract);
    2d68:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    2d6a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    2d6e:	f7ff fdc5 	bl	28fc <_rlrshift>
	while (exp < (0 + 4)) {
    2d72:	f1b8 0f04 	cmp.w	r8, #4
    2d76:	d1f7      	bne.n	2d68 <_prf+0x3ac>
		precision = 6;		/* Default precision if none given */
    2d78:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    2d7a:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    2d7e:	bfb8      	it	lt
    2d80:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    2d82:	2b47      	cmp	r3, #71	; 0x47
    2d84:	f040 8097 	bne.w	2eb6 <_prf+0x4fa>
		if (!falt && (precision > 0))
    2d88:	2e00      	cmp	r6, #0
    2d8a:	f040 8092 	bne.w	2eb2 <_prf+0x4f6>
    2d8e:	1c2b      	adds	r3, r5, #0
    2d90:	bf18      	it	ne
    2d92:	2301      	movne	r3, #1
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2d94:	9308      	str	r3, [sp, #32]
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    2d96:	9b00      	ldr	r3, [sp, #0]
    2d98:	3303      	adds	r3, #3
    2d9a:	db04      	blt.n	2da6 <_prf+0x3ea>
    2d9c:	9a00      	ldr	r2, [sp, #0]
    2d9e:	1c6b      	adds	r3, r5, #1
    2da0:	429a      	cmp	r2, r3
    2da2:	f340 808d 	ble.w	2ec0 <_prf+0x504>
				c = 'E';
    2da6:	2c67      	cmp	r4, #103	; 0x67
    2da8:	bf0c      	ite	eq
    2daa:	2465      	moveq	r4, #101	; 0x65
    2dac:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    2dae:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    2db2:	2310      	movs	r3, #16
    2db4:	4598      	cmp	r8, r3
    2db6:	930f      	str	r3, [sp, #60]	; 0x3c
    2db8:	bfa8      	it	ge
    2dba:	4698      	movge	r8, r3
    2dbc:	e089      	b.n	2ed2 <_prf+0x516>
	if ((exp | fract) != 0) {
    2dbe:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    2dc2:	9b07      	ldr	r3, [sp, #28]
    2dc4:	b10b      	cbz	r3, 2dca <_prf+0x40e>
		*buf++ = '+';
    2dc6:	232b      	movs	r3, #43	; 0x2b
    2dc8:	e7c2      	b.n	2d50 <_prf+0x394>
	} else if (fspace) {
    2dca:	f1b9 0f00 	cmp.w	r9, #0
    2dce:	d001      	beq.n	2dd4 <_prf+0x418>
		*buf++ = ' ';
    2dd0:	2320      	movs	r3, #32
    2dd2:	e7bd      	b.n	2d50 <_prf+0x394>
	} else if (fspace) {
    2dd4:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
    2dd8:	e7be      	b.n	2d58 <_prf+0x39c>
			_rlrshift(&fract);
    2dda:	a810      	add	r0, sp, #64	; 0x40
    2ddc:	f7ff fd8e 	bl	28fc <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    2de0:	e9dd 7c10 	ldrd	r7, ip, [sp, #64]	; 0x40
    2de4:	2300      	movs	r3, #0
    2de6:	930b      	str	r3, [sp, #44]	; 0x2c
    2de8:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    2dec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2df0:	4aa8      	ldr	r2, [pc, #672]	; (3094 <_prf+0x6d8>)
    2df2:	2300      	movs	r3, #0
    2df4:	428b      	cmp	r3, r1
    2df6:	bf08      	it	eq
    2df8:	4282      	cmpeq	r2, r0
    2dfa:	f108 0801 	add.w	r8, r8, #1
    2dfe:	d3ec      	bcc.n	2dda <_prf+0x41e>
		fract *= 5;
    2e00:	2205      	movs	r2, #5
    2e02:	fba7 0102 	umull	r0, r1, r7, r2
    2e06:	e9cd 0108 	strd	r0, r1, [sp, #32]
    2e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e0c:	fb02 330c 	mla	r3, r2, ip, r3
    2e10:	9309      	str	r3, [sp, #36]	; 0x24
    2e12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2e16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		decexp--;
    2e1a:	9b00      	ldr	r3, [sp, #0]
    2e1c:	3b01      	subs	r3, #1
    2e1e:	9300      	str	r3, [sp, #0]
    2e20:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2e26:	2300      	movs	r3, #0
    2e28:	2100      	movs	r1, #0
    2e2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2e2e:	4299      	cmp	r1, r3
    2e30:	bf08      	it	eq
    2e32:	4290      	cmpeq	r0, r2
    2e34:	d207      	bcs.n	2e46 <_prf+0x48a>
    2e36:	f1bc 0f00 	cmp.w	ip, #0
    2e3a:	d08f      	beq.n	2d5c <_prf+0x3a0>
    2e3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2e44:	e78a      	b.n	2d5c <_prf+0x3a0>
			fract <<= 1;
    2e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2e4a:	1892      	adds	r2, r2, r2
    2e4c:	415b      	adcs	r3, r3
    2e4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    2e52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2e56:	f04f 0c01 	mov.w	ip, #1
    2e5a:	e7e3      	b.n	2e24 <_prf+0x468>
		_ldiv5(&fract);
    2e5c:	a810      	add	r0, sp, #64	; 0x40
    2e5e:	f7ff fd61 	bl	2924 <_ldiv5>
		decexp++;
    2e62:	9b00      	ldr	r3, [sp, #0]
    2e64:	3301      	adds	r3, #1
    2e66:	9300      	str	r3, [sp, #0]
    2e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2e6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
		exp--;
    2e70:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    2e74:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2e7a:	2300      	movs	r3, #0
    2e7c:	2100      	movs	r1, #0
    2e7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2e82:	4299      	cmp	r1, r3
    2e84:	bf08      	it	eq
    2e86:	4290      	cmpeq	r0, r2
    2e88:	d208      	bcs.n	2e9c <_prf+0x4e0>
    2e8a:	f1bc 0f00 	cmp.w	ip, #0
    2e8e:	f43f af68 	beq.w	2d62 <_prf+0x3a6>
    2e92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2e96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2e9a:	e762      	b.n	2d62 <_prf+0x3a6>
			fract <<= 1;
    2e9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2ea0:	1892      	adds	r2, r2, r2
    2ea2:	415b      	adcs	r3, r3
    2ea4:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
    2ea8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2eac:	f04f 0c01 	mov.w	ip, #1
    2eb0:	e7e2      	b.n	2e78 <_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2eb2:	2300      	movs	r3, #0
    2eb4:	e76e      	b.n	2d94 <_prf+0x3d8>
    2eb6:	2300      	movs	r3, #0
	if (c == 'f') {
    2eb8:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2eba:	9308      	str	r3, [sp, #32]
	if (c == 'f') {
    2ebc:	f47f af77 	bne.w	2dae <_prf+0x3f2>
		if (exp < 0)
    2ec0:	9b00      	ldr	r3, [sp, #0]
    2ec2:	eb13 0805 	adds.w	r8, r3, r5
    2ec6:	d54b      	bpl.n	2f60 <_prf+0x5a4>
	digit_count = 16;
    2ec8:	2310      	movs	r3, #16
    2eca:	930f      	str	r3, [sp, #60]	; 0x3c
    2ecc:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    2ece:	f04f 0800 	mov.w	r8, #0
	ltemp = 0x0800000000000000;
    2ed2:	a948      	add	r1, sp, #288	; 0x120
    2ed4:	2200      	movs	r2, #0
    2ed6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2eda:	e961 2336 	strd	r2, r3, [r1, #-216]!	; 0xd8
	while (exp--) {
    2ede:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    2ee2:	d23f      	bcs.n	2f64 <_prf+0x5a8>
	fract += ltemp;
    2ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2ee8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    2eec:	1817      	adds	r7, r2, r0
    2eee:	eb43 0801 	adc.w	r8, r3, r1
    2ef2:	463a      	mov	r2, r7
    2ef4:	4643      	mov	r3, r8
    2ef6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
    2efa:	f008 4270 	and.w	r2, r8, #4026531840	; 0xf0000000
    2efe:	2300      	movs	r3, #0
    2f00:	4313      	orrs	r3, r2
    2f02:	d008      	beq.n	2f16 <_prf+0x55a>
		_ldiv5(&fract);
    2f04:	a810      	add	r0, sp, #64	; 0x40
    2f06:	f7ff fd0d 	bl	2924 <_ldiv5>
		_rlrshift(&fract);
    2f0a:	a810      	add	r0, sp, #64	; 0x40
    2f0c:	f7ff fcf6 	bl	28fc <_rlrshift>
		decexp++;
    2f10:	9b00      	ldr	r3, [sp, #0]
    2f12:	3301      	adds	r3, #1
    2f14:	9300      	str	r3, [sp, #0]
	if (c == 'f') {
    2f16:	2c66      	cmp	r4, #102	; 0x66
    2f18:	f10a 0801 	add.w	r8, sl, #1
    2f1c:	d140      	bne.n	2fa0 <_prf+0x5e4>
		if (decexp > 0) {
    2f1e:	9b00      	ldr	r3, [sp, #0]
    2f20:	2b00      	cmp	r3, #0
    2f22:	dd29      	ble.n	2f78 <_prf+0x5bc>
    2f24:	4453      	add	r3, sl
    2f26:	4698      	mov	r8, r3
				*buf++ = _get_digit(&fract, &digit_count);
    2f28:	a90f      	add	r1, sp, #60	; 0x3c
    2f2a:	a810      	add	r0, sp, #64	; 0x40
    2f2c:	f7ff fd2b 	bl	2986 <_get_digit>
    2f30:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
    2f34:	45c2      	cmp	sl, r8
    2f36:	d1f7      	bne.n	2f28 <_prf+0x56c>
    2f38:	2300      	movs	r3, #0
    2f3a:	9300      	str	r3, [sp, #0]
		if (falt || (precision > 0))
    2f3c:	b906      	cbnz	r6, 2f40 <_prf+0x584>
    2f3e:	b15d      	cbz	r5, 2f58 <_prf+0x59c>
			*buf++ = '.';
    2f40:	232e      	movs	r3, #46	; 0x2e
    2f42:	f888 3000 	strb.w	r3, [r8]
    2f46:	4646      	mov	r6, r8
    2f48:	eb08 0305 	add.w	r3, r8, r5
				*buf++ = '0';
    2f4c:	f04f 0a30 	mov.w	sl, #48	; 0x30
		while (precision-- > 0) {
    2f50:	42b3      	cmp	r3, r6
    2f52:	d115      	bne.n	2f80 <_prf+0x5c4>
    2f54:	3501      	adds	r5, #1
    2f56:	44a8      	add	r8, r5
	if (prune_zero) {
    2f58:	9b08      	ldr	r3, [sp, #32]
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d139      	bne.n	2fd2 <_prf+0x616>
    2f5e:	e060      	b.n	3022 <_prf+0x666>
		if (exp < 0)
    2f60:	2466      	movs	r4, #102	; 0x66
    2f62:	e726      	b.n	2db2 <_prf+0x3f6>
		_ldiv5(&ltemp);
    2f64:	4608      	mov	r0, r1
    2f66:	910a      	str	r1, [sp, #40]	; 0x28
    2f68:	f7ff fcdc 	bl	2924 <_ldiv5>
		_rlrshift(&ltemp);
    2f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    2f6e:	4608      	mov	r0, r1
    2f70:	f7ff fcc4 	bl	28fc <_rlrshift>
    2f74:	990a      	ldr	r1, [sp, #40]	; 0x28
    2f76:	e7b2      	b.n	2ede <_prf+0x522>
			*buf++ = '0';
    2f78:	2330      	movs	r3, #48	; 0x30
    2f7a:	f88a 3000 	strb.w	r3, [sl]
    2f7e:	e7dd      	b.n	2f3c <_prf+0x580>
			if (decexp < 0) {
    2f80:	9a00      	ldr	r2, [sp, #0]
    2f82:	b12a      	cbz	r2, 2f90 <_prf+0x5d4>
				decexp++;
    2f84:	3201      	adds	r2, #1
				*buf++ = '0';
    2f86:	f886 a001 	strb.w	sl, [r6, #1]
				decexp++;
    2f8a:	9200      	str	r2, [sp, #0]
    2f8c:	3601      	adds	r6, #1
    2f8e:	e7df      	b.n	2f50 <_prf+0x594>
				*buf++ = _get_digit(&fract, &digit_count);
    2f90:	a90f      	add	r1, sp, #60	; 0x3c
    2f92:	a810      	add	r0, sp, #64	; 0x40
    2f94:	930a      	str	r3, [sp, #40]	; 0x28
    2f96:	f7ff fcf6 	bl	2986 <_get_digit>
    2f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f9c:	7070      	strb	r0, [r6, #1]
    2f9e:	e7f5      	b.n	2f8c <_prf+0x5d0>
		*buf = _get_digit(&fract, &digit_count);
    2fa0:	a90f      	add	r1, sp, #60	; 0x3c
    2fa2:	a810      	add	r0, sp, #64	; 0x40
    2fa4:	f7ff fcef 	bl	2986 <_get_digit>
		if (*buf++ != '0')
    2fa8:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2faa:	bf18      	it	ne
    2fac:	9b00      	ldrne	r3, [sp, #0]
		*buf = _get_digit(&fract, &digit_count);
    2fae:	f88a 0000 	strb.w	r0, [sl]
			decexp--;
    2fb2:	bf1c      	itt	ne
    2fb4:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    2fb8:	9300      	strne	r3, [sp, #0]
		if (falt || (precision > 0))
    2fba:	b906      	cbnz	r6, 2fbe <_prf+0x602>
    2fbc:	b13d      	cbz	r5, 2fce <_prf+0x612>
			*buf++ = '.';
    2fbe:	f10a 0802 	add.w	r8, sl, #2
    2fc2:	232e      	movs	r3, #46	; 0x2e
    2fc4:	f88a 3001 	strb.w	r3, [sl, #1]
    2fc8:	4445      	add	r5, r8
		while (precision-- > 0)
    2fca:	4545      	cmp	r5, r8
    2fcc:	d12e      	bne.n	302c <_prf+0x670>
	if (prune_zero) {
    2fce:	9b08      	ldr	r3, [sp, #32]
    2fd0:	b143      	cbz	r3, 2fe4 <_prf+0x628>
		while (*--buf == '0')
    2fd2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    2fd6:	2a30      	cmp	r2, #48	; 0x30
    2fd8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    2fdc:	d02d      	beq.n	303a <_prf+0x67e>
    2fde:	2a2e      	cmp	r2, #46	; 0x2e
    2fe0:	bf08      	it	eq
    2fe2:	4698      	moveq	r8, r3
	if ((c == 'e') || (c == 'E')) {
    2fe4:	f024 0320 	bic.w	r3, r4, #32
    2fe8:	2b45      	cmp	r3, #69	; 0x45
    2fea:	d11a      	bne.n	3022 <_prf+0x666>
		if (decexp < 0) {
    2fec:	9b00      	ldr	r3, [sp, #0]
		*buf++ = (char) c;
    2fee:	f888 4000 	strb.w	r4, [r8]
		if (decexp < 0) {
    2ff2:	2b00      	cmp	r3, #0
			decexp = -decexp;
    2ff4:	bfbb      	ittet	lt
    2ff6:	425b      	neglt	r3, r3
    2ff8:	9300      	strlt	r3, [sp, #0]
			*buf++ = '+';
    2ffa:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
    2ffc:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    2ffe:	f888 3001 	strb.w	r3, [r8, #1]
		*buf++ = (char) ((decexp / 10) + '0');
    3002:	220a      	movs	r2, #10
    3004:	9b00      	ldr	r3, [sp, #0]
    3006:	fb93 f3f2 	sdiv	r3, r3, r2
    300a:	f103 0130 	add.w	r1, r3, #48	; 0x30
    300e:	f888 1002 	strb.w	r1, [r8, #2]
		decexp %= 10;
    3012:	9900      	ldr	r1, [sp, #0]
    3014:	fb02 1713 	mls	r7, r2, r3, r1
		*buf++ = (char) (decexp + '0');
    3018:	3730      	adds	r7, #48	; 0x30
    301a:	f888 7003 	strb.w	r7, [r8, #3]
    301e:	f108 0804 	add.w	r8, r8, #4
	*buf = 0;
    3022:	2300      	movs	r3, #0
    3024:	f888 3000 	strb.w	r3, [r8]
	return buf - start;
    3028:	a815      	add	r0, sp, #84	; 0x54
    302a:	e64e      	b.n	2cca <_prf+0x30e>
			*buf++ = _get_digit(&fract, &digit_count);
    302c:	a90f      	add	r1, sp, #60	; 0x3c
    302e:	a810      	add	r0, sp, #64	; 0x40
    3030:	f7ff fca9 	bl	2986 <_get_digit>
    3034:	f808 0b01 	strb.w	r0, [r8], #1
    3038:	e7c7      	b.n	2fca <_prf+0x60e>
		while (*--buf == '0')
    303a:	4698      	mov	r8, r3
    303c:	e7c9      	b.n	2fd2 <_prf+0x616>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    303e:	1d3b      	adds	r3, r7, #4
    3040:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
    3042:	683b      	ldr	r3, [r7, #0]
    3044:	9a04      	ldr	r2, [sp, #16]
    3046:	601a      	str	r2, [r3, #0]
				break;
    3048:	e4d9      	b.n	29fe <_prf+0x42>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    304a:	1d3b      	adds	r3, r7, #4
    304c:	9305      	str	r3, [sp, #20]
    304e:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
    3050:	b316      	cbz	r6, 3098 <_prf+0x6dc>
		*buf++ = '0';
    3052:	2330      	movs	r3, #48	; 0x30
    3054:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
    3058:	bb59      	cbnz	r1, 30b2 <_prf+0x6f6>
			prefix = 0;
    305a:	3501      	adds	r5, #1
    305c:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    305e:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
    3062:	bf18      	it	ne
    3064:	2320      	movne	r3, #32
    3066:	4689      	mov	r9, r1
    3068:	9302      	str	r3, [sp, #8]
				if (c < width) {
    306a:	9b03      	ldr	r3, [sp, #12]
    306c:	42b3      	cmp	r3, r6
    306e:	f340 8085 	ble.w	317c <_prf+0x7c0>
					if (fminus)	{
    3072:	9b06      	ldr	r3, [sp, #24]
    3074:	ad15      	add	r5, sp, #84	; 0x54
    3076:	2b00      	cmp	r3, #0
    3078:	d058      	beq.n	312c <_prf+0x770>
							buf[i] = ' ';
    307a:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    307c:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    307e:	55ab      	strb	r3, [r5, r6]
						for (i = c; i < width; i++)
    3080:	3601      	adds	r6, #1
    3082:	42b2      	cmp	r2, r6
    3084:	d1fa      	bne.n	307c <_prf+0x6c0>
    3086:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
					if ((*func)(*cptr, dest) == EOF)
    308a:	ac15      	add	r4, sp, #84	; 0x54
    308c:	4413      	add	r3, r2
    308e:	461d      	mov	r5, r3
    3090:	1aa4      	subs	r4, r4, r2
    3092:	e06f      	b.n	3174 <_prf+0x7b8>
    3094:	33333332 	.word	0x33333332
	if (alt_form) {
    3098:	a815      	add	r0, sp, #84	; 0x54
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    309a:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    309e:	462b      	mov	r3, r5
    30a0:	2208      	movs	r2, #8
    30a2:	eba0 0808 	sub.w	r8, r0, r8
    30a6:	f7ff fc01 	bl	28ac <_to_x>
    30aa:	4440      	add	r0, r8
			prefix = 0;
    30ac:	f04f 0900 	mov.w	r9, #0
    30b0:	e595      	b.n	2bde <_prf+0x222>
		*buf++ = '0';
    30b2:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    30b6:	e7f0      	b.n	309a <_prf+0x6de>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    30b8:	1d3b      	adds	r3, r7, #4
    30ba:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
    30bc:	f647 0330 	movw	r3, #30768	; 0x7830
    30c0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    30c4:	6839      	ldr	r1, [r7, #0]
	len = _to_x(buf, value, 16, precision);
    30c6:	2308      	movs	r3, #8
    30c8:	2210      	movs	r2, #16
    30ca:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    30ce:	f7ff fbed 	bl	28ac <_to_x>
	return len + (buf - buf0);
    30d2:	3002      	adds	r0, #2
    30d4:	e7ea      	b.n	30ac <_prf+0x6f0>
				if ((precision >= 0) && (precision < c))
    30d6:	2d00      	cmp	r5, #0
    30d8:	db02      	blt.n	30e0 <_prf+0x724>
    30da:	42ae      	cmp	r6, r5
    30dc:	bfa8      	it	ge
    30de:	462e      	movge	r6, r5
				if (c > 0) {
    30e0:	2e00      	cmp	r6, #0
    30e2:	f43f ac8c 	beq.w	29fe <_prf+0x42>
					memcpy(buf, cptr_temp, (size_t) c);
    30e6:	4632      	mov	r2, r6
    30e8:	a815      	add	r0, sp, #84	; 0x54
    30ea:	f7ff fb91 	bl	2810 <memcpy>
    30ee:	e59c      	b.n	2c2a <_prf+0x26e>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    30f0:	1d3b      	adds	r3, r7, #4
    30f2:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
    30f4:	220a      	movs	r2, #10
    30f6:	462b      	mov	r3, r5
    30f8:	6839      	ldr	r1, [r7, #0]
    30fa:	a815      	add	r0, sp, #84	; 0x54
    30fc:	f7ff fbd6 	bl	28ac <_to_x>
    3100:	e7d4      	b.n	30ac <_prf+0x6f0>
	if (alt_form) {
    3102:	af15      	add	r7, sp, #84	; 0x54
    3104:	e527      	b.n	2b56 <_prf+0x19a>
		if (*buf >= 'a' && *buf <= 'z') {
    3106:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    310a:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    310c:	bf9c      	itt	ls
    310e:	3b20      	subls	r3, #32
    3110:	7013      	strbls	r3, [r2, #0]
    3112:	e529      	b.n	2b68 <_prf+0x1ac>
				if ((*func)('%', dest) == EOF) {
    3114:	990d      	ldr	r1, [sp, #52]	; 0x34
    3116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3118:	4620      	mov	r0, r4
    311a:	4798      	blx	r3
    311c:	3001      	adds	r0, #1
    311e:	f43f ac62 	beq.w	29e6 <_prf+0x2a>
				count++;
    3122:	9b04      	ldr	r3, [sp, #16]
    3124:	3301      	adds	r3, #1
    3126:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1)
    3128:	9705      	str	r7, [sp, #20]
    312a:	e468      	b.n	29fe <_prf+0x42>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    312c:	9b03      	ldr	r3, [sp, #12]
    312e:	1b9c      	subs	r4, r3, r6
    3130:	1c72      	adds	r2, r6, #1
    3132:	1928      	adds	r0, r5, r4
    3134:	4629      	mov	r1, r5
    3136:	f7ff fb54 	bl	27e2 <memmove>
						if (pad == ' ')
    313a:	9b06      	ldr	r3, [sp, #24]
    313c:	9a02      	ldr	r2, [sp, #8]
    313e:	2a20      	cmp	r2, #32
    3140:	bf18      	it	ne
    3142:	464b      	movne	r3, r9
    3144:	9306      	str	r3, [sp, #24]
						c = width - c + prefix;
    3146:	441c      	add	r4, r3
						for (i = prefix; i < c; i++)
    3148:	9b06      	ldr	r3, [sp, #24]
    314a:	42a3      	cmp	r3, r4
    314c:	da9b      	bge.n	3086 <_prf+0x6ca>
							buf[i] = pad;
    314e:	9b06      	ldr	r3, [sp, #24]
    3150:	461a      	mov	r2, r3
    3152:	9b02      	ldr	r3, [sp, #8]
    3154:	54ab      	strb	r3, [r5, r2]
						for (i = prefix; i < c; i++)
    3156:	4613      	mov	r3, r2
    3158:	3301      	adds	r3, #1
    315a:	9306      	str	r3, [sp, #24]
    315c:	e7f4      	b.n	3148 <_prf+0x78c>
					if ((*func)(*cptr, dest) == EOF)
    315e:	9b04      	ldr	r3, [sp, #16]
    3160:	990d      	ldr	r1, [sp, #52]	; 0x34
    3162:	5ce0      	ldrb	r0, [r4, r3]
    3164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3166:	4798      	blx	r3
    3168:	3001      	adds	r0, #1
    316a:	f43f ac3c 	beq.w	29e6 <_prf+0x2a>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    316e:	9b04      	ldr	r3, [sp, #16]
    3170:	3301      	adds	r3, #1
    3172:	9304      	str	r3, [sp, #16]
    3174:	9b04      	ldr	r3, [sp, #16]
    3176:	42ab      	cmp	r3, r5
    3178:	d1f1      	bne.n	315e <_prf+0x7a2>
    317a:	e440      	b.n	29fe <_prf+0x42>
    317c:	9603      	str	r6, [sp, #12]
    317e:	e782      	b.n	3086 <_prf+0x6ca>
					prefix = 1;
    3180:	f8dd 901c 	ldr.w	r9, [sp, #28]
    3184:	e5b2      	b.n	2cec <_prf+0x330>
    3186:	bf00      	nop

00003188 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    3188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    318c:	4770      	bx	lr
	...

00003190 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3190:	4b01      	ldr	r3, [pc, #4]	; (3198 <__stdout_hook_install+0x8>)
    3192:	6018      	str	r0, [r3, #0]
}
    3194:	4770      	bx	lr
    3196:	bf00      	nop
    3198:	20001cac 	.word	0x20001cac

0000319c <_impl__zephyr_fputc>:

int _impl__zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    319c:	2902      	cmp	r1, #2
    319e:	d102      	bne.n	31a6 <_impl__zephyr_fputc+0xa>
    31a0:	4b02      	ldr	r3, [pc, #8]	; (31ac <_impl__zephyr_fputc+0x10>)
    31a2:	681b      	ldr	r3, [r3, #0]
    31a4:	4718      	bx	r3
}
    31a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    31aa:	4770      	bx	lr
    31ac:	20001cac 	.word	0x20001cac

000031b0 <fputc>:

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_READ, _zephyr_read, int, char *, buf, int, nbytes)

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_WRITE, _zephyr_write, int, const void *, buf, int, nbytes)

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_FPUTC, _zephyr_fputc, int, int, c, FILE *, stream)
    31b0:	f7ff bff4 	b.w	319c <_impl__zephyr_fputc>

000031b4 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    31b4:	b40f      	push	{r0, r1, r2, r3}
    31b6:	b507      	push	{r0, r1, r2, lr}
    31b8:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
    31ba:	2102      	movs	r1, #2
{
    31bc:	f853 2b04 	ldr.w	r2, [r3], #4
	r = _prf(fputc, DESC(stdout), format, vargs);
    31c0:	4804      	ldr	r0, [pc, #16]	; (31d4 <printf+0x20>)
	va_start(vargs, format);
    31c2:	9301      	str	r3, [sp, #4]
	r = _prf(fputc, DESC(stdout), format, vargs);
    31c4:	f7ff fbfa 	bl	29bc <_prf>
	va_end(vargs);

	return r;
}
    31c8:	b003      	add	sp, #12
    31ca:	f85d eb04 	ldr.w	lr, [sp], #4
    31ce:	b004      	add	sp, #16
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop
    31d4:	000031b1 	.word	0x000031b1

000031d8 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	u8_t channel_id = channel_cfg->channel_id;
    31d8:	7908      	ldrb	r0, [r1, #4]
{
    31da:	b570      	push	{r4, r5, r6, lr}
	u8_t channel_id = channel_cfg->channel_id;
    31dc:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= NRF_SAADC_CHANNEL_COUNT) {
    31e0:	2c07      	cmp	r4, #7
    31e2:	d83a      	bhi.n	325a <adc_nrfx_channel_setup+0x82>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    31e4:	780b      	ldrb	r3, [r1, #0]
    31e6:	2b09      	cmp	r3, #9
    31e8:	d826      	bhi.n	3238 <adc_nrfx_channel_setup+0x60>
    31ea:	e8df f003 	tbb	[pc, r3]
    31ee:	3b39      	.short	0x3b39
    31f0:	251d1b05 	.word	0x251d1b05
    31f4:	2325211f 	.word	0x2325211f
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
		break;
	case ADC_GAIN_1_4:
		config.gain = NRF_SAADC_GAIN1_4;
    31f8:	2302      	movs	r3, #2
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    31fa:	784a      	ldrb	r2, [r1, #1]
    31fc:	2a03      	cmp	r2, #3
    31fe:	d060      	beq.n	32c2 <adc_nrfx_channel_setup+0xea>
    3200:	2a04      	cmp	r2, #4
    3202:	d031      	beq.n	3268 <adc_nrfx_channel_setup+0x90>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    3204:	2301      	movs	r3, #1
    3206:	f04f 0200 	mov.w	r2, #0
    320a:	f363 0202 	bfi	r2, r3, #0, #3
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    320e:	4941      	ldr	r1, [pc, #260]	; (3314 <adc_nrfx_channel_setup+0x13c>)
    3210:	4b41      	ldr	r3, [pc, #260]	; (3318 <adc_nrfx_channel_setup+0x140>)
    3212:	4842      	ldr	r0, [pc, #264]	; (331c <adc_nrfx_channel_setup+0x144>)
    3214:	1a5b      	subs	r3, r3, r1
    3216:	f36f 02c5 	bfc	r2, #3, #3
    321a:	08db      	lsrs	r3, r3, #3
    321c:	f363 128f 	bfi	r2, r3, #6, #10
    3220:	493f      	ldr	r1, [pc, #252]	; (3320 <adc_nrfx_channel_setup+0x148>)
    3222:	e018      	b.n	3256 <adc_nrfx_channel_setup+0x7e>
		config.gain = NRF_SAADC_GAIN1_3;
    3224:	2303      	movs	r3, #3
		break;
    3226:	e7e8      	b.n	31fa <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_2;
    3228:	2304      	movs	r3, #4
		break;
    322a:	e7e6      	b.n	31fa <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1;
    322c:	2305      	movs	r3, #5
		break;
    322e:	e7e4      	b.n	31fa <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN2;
    3230:	2306      	movs	r3, #6
		break;
    3232:	e7e2      	b.n	31fa <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3234:	2307      	movs	r3, #7
		break;
    3236:	e7e0      	b.n	31fa <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    3238:	2301      	movs	r3, #1
    323a:	f04f 0200 	mov.w	r2, #0
    323e:	f363 0202 	bfi	r2, r3, #0, #3
    3242:	4934      	ldr	r1, [pc, #208]	; (3314 <adc_nrfx_channel_setup+0x13c>)
    3244:	4b34      	ldr	r3, [pc, #208]	; (3318 <adc_nrfx_channel_setup+0x140>)
    3246:	4837      	ldr	r0, [pc, #220]	; (3324 <adc_nrfx_channel_setup+0x14c>)
    3248:	1a5b      	subs	r3, r3, r1
    324a:	f36f 02c5 	bfc	r2, #3, #3
    324e:	08db      	lsrs	r3, r3, #3
    3250:	4933      	ldr	r1, [pc, #204]	; (3320 <adc_nrfx_channel_setup+0x148>)
    3252:	f363 128f 	bfi	r2, r3, #6, #10
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    3256:	f7fd ffa7 	bl	11a8 <log_1>
		return -EINVAL;
    325a:	f06f 0015 	mvn.w	r0, #21
    325e:	e02f      	b.n	32c0 <adc_nrfx_channel_setup+0xe8>
	nrf_saadc_channel_config_t config = {
    3260:	2300      	movs	r3, #0
    3262:	e7ca      	b.n	31fa <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN1_5;
    3264:	2301      	movs	r3, #1
    3266:	e7c8      	b.n	31fa <adc_nrfx_channel_setup+0x22>
	nrf_saadc_channel_config_t config = {
    3268:	2600      	movs	r6, #0
	switch (channel_cfg->acquisition_time) {
    326a:	884a      	ldrh	r2, [r1, #2]
    326c:	f244 050a 	movw	r5, #16394	; 0x400a
    3270:	42aa      	cmp	r2, r5
    3272:	d009      	beq.n	3288 <adc_nrfx_channel_setup+0xb0>
    3274:	d827      	bhi.n	32c6 <adc_nrfx_channel_setup+0xee>
    3276:	f244 0503 	movw	r5, #16387	; 0x4003
    327a:	42aa      	cmp	r2, r5
    327c:	d045      	beq.n	330a <adc_nrfx_channel_setup+0x132>
    327e:	f244 0505 	movw	r5, #16389	; 0x4005
    3282:	42aa      	cmp	r2, r5
    3284:	d043      	beq.n	330e <adc_nrfx_channel_setup+0x136>
    3286:	bb82      	cbnz	r2, 32ea <adc_nrfx_channel_setup+0x112>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    3288:	2202      	movs	r2, #2
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    328a:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    328e:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3290:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    3294:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
    3298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    NRF_SAADC->CH[channel].CONFIG =
    329c:	0122      	lsls	r2, r4, #4
    329e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32a2:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */
	config.pin_p = NRF_SAADC_INPUT_DISABLED;
	config.pin_n = channel_cfg->input_negative;
    32a6:	798d      	ldrb	r5, [r1, #6]
    32a8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    32ac:	4b1e      	ldr	r3, [pc, #120]	; (3328 <adc_nrfx_channel_setup+0x150>)
    NRF_SAADC->CH[channel].PSELN = pseln;
    32ae:	f8c2 5514 	str.w	r5, [r2, #1300]	; 0x514
    NRF_SAADC->CH[channel].PSELP = pselp;
    32b2:	2000      	movs	r0, #0
    32b4:	441c      	add	r4, r3
    32b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    32ba:	794b      	ldrb	r3, [r1, #5]
    32bc:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

	return 0;
}
    32c0:	bd70      	pop	{r4, r5, r6, pc}
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    32c2:	2601      	movs	r6, #1
    32c4:	e7d1      	b.n	326a <adc_nrfx_channel_setup+0x92>
	switch (channel_cfg->acquisition_time) {
    32c6:	f244 0514 	movw	r5, #16404	; 0x4014
    32ca:	42aa      	cmp	r2, r5
    32cc:	d009      	beq.n	32e2 <adc_nrfx_channel_setup+0x10a>
    32ce:	f244 0528 	movw	r5, #16424	; 0x4028
    32d2:	42aa      	cmp	r2, r5
    32d4:	d007      	beq.n	32e6 <adc_nrfx_channel_setup+0x10e>
    32d6:	f244 050f 	movw	r5, #16399	; 0x400f
    32da:	42aa      	cmp	r2, r5
    32dc:	d105      	bne.n	32ea <adc_nrfx_channel_setup+0x112>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    32de:	2203      	movs	r2, #3
		break;
    32e0:	e7d3      	b.n	328a <adc_nrfx_channel_setup+0xb2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    32e2:	2204      	movs	r2, #4
		break;
    32e4:	e7d1      	b.n	328a <adc_nrfx_channel_setup+0xb2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    32e6:	2205      	movs	r2, #5
		break;
    32e8:	e7cf      	b.n	328a <adc_nrfx_channel_setup+0xb2>
		LOG_ERR("Selected ADC acquisition time is not valid");
    32ea:	2301      	movs	r3, #1
    32ec:	f04f 0200 	mov.w	r2, #0
    32f0:	f363 0202 	bfi	r2, r3, #0, #3
    32f4:	4907      	ldr	r1, [pc, #28]	; (3314 <adc_nrfx_channel_setup+0x13c>)
    32f6:	4b08      	ldr	r3, [pc, #32]	; (3318 <adc_nrfx_channel_setup+0x140>)
    32f8:	480c      	ldr	r0, [pc, #48]	; (332c <adc_nrfx_channel_setup+0x154>)
    32fa:	1a5b      	subs	r3, r3, r1
    32fc:	f36f 02c5 	bfc	r2, #3, #3
    3300:	08db      	lsrs	r3, r3, #3
    3302:	f363 128f 	bfi	r2, r3, #6, #10
    3306:	4906      	ldr	r1, [pc, #24]	; (3320 <adc_nrfx_channel_setup+0x148>)
    3308:	e7a5      	b.n	3256 <adc_nrfx_channel_setup+0x7e>
	nrf_saadc_channel_config_t config = {
    330a:	2200      	movs	r2, #0
    330c:	e7bd      	b.n	328a <adc_nrfx_channel_setup+0xb2>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    330e:	2201      	movs	r2, #1
    3310:	e7bb      	b.n	328a <adc_nrfx_channel_setup+0xb2>
    3312:	bf00      	nop
    3314:	00004c40 	.word	0x00004c40
    3318:	00004c40 	.word	0x00004c40
    331c:	0000537e 	.word	0x0000537e
    3320:	00005307 	.word	0x00005307
    3324:	0000535b 	.word	0x0000535b
    3328:	20001cb0 	.word	0x20001cb0
    332c:	000053a6 	.word	0x000053a6

00003330 <adc_context_start_sampling.isra.1>:
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3330:	4a03      	ldr	r2, [pc, #12]	; (3340 <adc_context_start_sampling.isra.1+0x10>)
    3332:	2301      	movs	r3, #1
    3334:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
    3338:	6013      	str	r3, [r2, #0]
    333a:	6053      	str	r3, [r2, #4]

	nrf_saadc_enable();

	nrf_saadc_task_trigger(NRF_SAADC_TASK_START);
	nrf_saadc_task_trigger(NRF_SAADC_TASK_SAMPLE);
}
    333c:	4770      	bx	lr
    333e:	bf00      	nop
    3340:	40007000 	.word	0x40007000

00003344 <init_saadc>:
}

DEVICE_DECLARE(adc_0);

static int init_saadc(struct device *dev)
{
    3344:	b513      	push	{r0, r1, r4, lr}
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
    3346:	4b0d      	ldr	r3, [pc, #52]	; (337c <init_saadc+0x38>)
    3348:	2400      	movs	r4, #0
    334a:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3350:	9b01      	ldr	r3, [sp, #4]
    NRF_SAADC->INTENSET = saadc_int_mask;
    3352:	4b0b      	ldr	r3, [pc, #44]	; (3380 <init_saadc+0x3c>)
    3354:	2202      	movs	r2, #2
    3356:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC_EVENT_END);
	nrf_saadc_int_enable(NRF_SAADC_INT_END);
	NRFX_IRQ_ENABLE(CONFIG_ADC_0_IRQ);
    335a:	2007      	movs	r0, #7
    335c:	f7ff f88c 	bl	2478 <_arch_irq_enable>

	IRQ_CONNECT(CONFIG_ADC_0_IRQ, CONFIG_ADC_0_IRQ_PRI,
    3360:	2007      	movs	r0, #7
    3362:	4622      	mov	r2, r4
    3364:	2101      	movs	r1, #1
    3366:	f7ff f8ab 	bl	24c0 <_irq_priority_set>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_RESET, k_sem_reset, struct k_sem *, sem)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
    336a:	4806      	ldr	r0, [pc, #24]	; (3384 <init_saadc+0x40>)
	k_sem_give(&ctx->lock);
}

static inline void adc_context_unlock_unconditionally(struct adc_context *ctx)
{
	if (!k_sem_count_get(&ctx->lock)) {
    336c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    336e:	b913      	cbnz	r3, 3376 <init_saadc+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3370:	3030      	adds	r0, #48	; 0x30
    3372:	f001 f8e9 	bl	4548 <_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3376:	2000      	movs	r0, #0
    3378:	b002      	add	sp, #8
    337a:	bd10      	pop	{r4, pc}
    337c:	40007104 	.word	0x40007104
    3380:	40007000 	.word	0x40007000
    3384:	20001cb0 	.word	0x20001cb0

00003388 <start_read.isra.5>:
static int start_read(struct device *dev, const struct adc_sequence *sequence)
    3388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t selected_channels = sequence->channels;
    338a:	6844      	ldr	r4, [r0, #4]
	if (!selected_channels ||
    338c:	b114      	cbz	r4, 3394 <start_read.isra.5+0xc>
    338e:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    3392:	d011      	beq.n	33b8 <start_read.isra.5+0x30>
		LOG_ERR("Invalid selection of channels");
    3394:	2301      	movs	r3, #1
    3396:	f04f 0200 	mov.w	r2, #0
    339a:	f363 0202 	bfi	r2, r3, #0, #3
    339e:	4987      	ldr	r1, [pc, #540]	; (35bc <start_read.isra.5+0x234>)
    33a0:	4b87      	ldr	r3, [pc, #540]	; (35c0 <start_read.isra.5+0x238>)
    33a2:	4888      	ldr	r0, [pc, #544]	; (35c4 <start_read.isra.5+0x23c>)
    33a4:	1a5b      	subs	r3, r3, r1
    33a6:	f36f 02c5 	bfc	r2, #3, #3
    33aa:	08db      	lsrs	r3, r3, #3
    33ac:	4986      	ldr	r1, [pc, #536]	; (35c8 <start_read.isra.5+0x240>)
    33ae:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR(
    33b2:	f7fd fef9 	bl	11a8 <log_1>
    33b6:	e01c      	b.n	33f2 <start_read.isra.5+0x6a>
    NRF_SAADC->CH[channel].PSELP = pselp;
    33b8:	4d84      	ldr	r5, [pc, #528]	; (35cc <start_read.isra.5+0x244>)
			if (m_data.positive_inputs[channel_id] == 0) {
    33ba:	4f85      	ldr	r7, [pc, #532]	; (35d0 <start_read.isra.5+0x248>)
	active_channels = 0;
    33bc:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    33be:	fa24 f302 	lsr.w	r3, r4, r2
    33c2:	f013 0301 	ands.w	r3, r3, #1
    33c6:	d03e      	beq.n	3446 <start_read.isra.5+0xbe>
			if (m_data.positive_inputs[channel_id] == 0) {
    33c8:	18bb      	adds	r3, r7, r2
    33ca:	f893 6074 	ldrb.w	r6, [r3, #116]	; 0x74
    33ce:	b9ae      	cbnz	r6, 33fc <start_read.isra.5+0x74>
				LOG_ERR("Channel %u not configured",
    33d0:	2101      	movs	r1, #1
    33d2:	f04f 0300 	mov.w	r3, #0
    33d6:	f361 0302 	bfi	r3, r1, #0, #3
    33da:	4878      	ldr	r0, [pc, #480]	; (35bc <start_read.isra.5+0x234>)
    33dc:	4978      	ldr	r1, [pc, #480]	; (35c0 <start_read.isra.5+0x238>)
    33de:	1a09      	subs	r1, r1, r0
    33e0:	08c9      	lsrs	r1, r1, #3
    33e2:	f366 03c5 	bfi	r3, r6, #3, #3
    33e6:	f361 138f 	bfi	r3, r1, #6, #10
    33ea:	487a      	ldr	r0, [pc, #488]	; (35d4 <start_read.isra.5+0x24c>)
    33ec:	4976      	ldr	r1, [pc, #472]	; (35c8 <start_read.isra.5+0x240>)
    33ee:	f7fd feef 	bl	11d0 <log_2>
				return -EINVAL;
    33f2:	f06f 0515 	mvn.w	r5, #21
}
    33f6:	4628      	mov	r0, r5
    33f8:	b003      	add	sp, #12
    33fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
__STATIC_INLINE void nrf_saadc_burst_set(uint8_t channel,
                                         nrf_saadc_burst_t burst)
{
    NRF_SAADC->CH[channel].CONFIG =
        (NRF_SAADC->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    33fc:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
			nrf_saadc_burst_set(channel_id,
    3400:	f890 c011 	ldrb.w	ip, [r0, #17]
    3404:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    3408:	f11c 0c00 	adds.w	ip, ip, #0
    340c:	bf18      	it	ne
    340e:	f04f 0c01 	movne.w	ip, #1
    3412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3416:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    NRF_SAADC->CH[channel].CONFIG =
    341a:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    NRF_SAADC->CH[channel].PSELP = pselp;
    341e:	f102 0351 	add.w	r3, r2, #81	; 0x51
    3422:	011b      	lsls	r3, r3, #4
			++active_channels;
    3424:	3101      	adds	r1, #1
    3426:	50ee      	str	r6, [r5, r3]
    3428:	b2c9      	uxtb	r1, r1
    342a:	3201      	adds	r2, #1
	} while (++channel_id < NRF_SAADC_CHANNEL_COUNT);
    342c:	2a08      	cmp	r2, #8
    342e:	d1c6      	bne.n	33be <start_read.isra.5+0x36>
	error = set_resolution(sequence);
    3430:	7c02      	ldrb	r2, [r0, #16]
	switch (sequence->resolution) {
    3432:	f1a2 0308 	sub.w	r3, r2, #8
    3436:	2b06      	cmp	r3, #6
    3438:	d824      	bhi.n	3484 <start_read.isra.5+0xfc>
    343a:	e8df f003 	tbb	[pc, r3]
    343e:	2333      	.short	0x2333
    3440:	23352309 	.word	0x23352309
    3444:	21          	.byte	0x21
    3445:	00          	.byte	0x00
    3446:	f102 0651 	add.w	r6, r2, #81	; 0x51
    344a:	0136      	lsls	r6, r6, #4
    344c:	51ab      	str	r3, [r5, r6]
    344e:	e7ec      	b.n	342a <start_read.isra.5+0xa2>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    3450:	2201      	movs	r2, #1
    NRF_SAADC->RESOLUTION = resolution;
    3452:	4b5e      	ldr	r3, [pc, #376]	; (35cc <start_read.isra.5+0x244>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3454:	2901      	cmp	r1, #1
    3456:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    345a:	7c42      	ldrb	r2, [r0, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    345c:	d926      	bls.n	34ac <start_read.isra.5+0x124>
    345e:	b37a      	cbz	r2, 34c0 <start_read.isra.5+0x138>
		LOG_ERR(
    3460:	2301      	movs	r3, #1
    3462:	f04f 0200 	mov.w	r2, #0
    3466:	f363 0202 	bfi	r2, r3, #0, #3
    346a:	4954      	ldr	r1, [pc, #336]	; (35bc <start_read.isra.5+0x234>)
    346c:	4b54      	ldr	r3, [pc, #336]	; (35c0 <start_read.isra.5+0x238>)
    346e:	485a      	ldr	r0, [pc, #360]	; (35d8 <start_read.isra.5+0x250>)
    3470:	1a5b      	subs	r3, r3, r1
    3472:	f36f 02c5 	bfc	r2, #3, #3
    3476:	08db      	lsrs	r3, r3, #3
    3478:	f363 128f 	bfi	r2, r3, #6, #10
    347c:	4957      	ldr	r1, [pc, #348]	; (35dc <start_read.isra.5+0x254>)
    347e:	e798      	b.n	33b2 <start_read.isra.5+0x2a>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3480:	2203      	movs	r2, #3
    3482:	e7e6      	b.n	3452 <start_read.isra.5+0xca>
		LOG_ERR("ADC resolution value %d is not valid",
    3484:	2101      	movs	r1, #1
    3486:	f04f 0300 	mov.w	r3, #0
    348a:	f361 0302 	bfi	r3, r1, #0, #3
    348e:	484b      	ldr	r0, [pc, #300]	; (35bc <start_read.isra.5+0x234>)
    3490:	494b      	ldr	r1, [pc, #300]	; (35c0 <start_read.isra.5+0x238>)
    3492:	1a09      	subs	r1, r1, r0
    3494:	08c9      	lsrs	r1, r1, #3
    3496:	f36f 03c5 	bfc	r3, #3, #3
    349a:	f361 138f 	bfi	r3, r1, #6, #10
    349e:	4850      	ldr	r0, [pc, #320]	; (35e0 <start_read.isra.5+0x258>)
    34a0:	4950      	ldr	r1, [pc, #320]	; (35e4 <start_read.isra.5+0x25c>)
    34a2:	e7a4      	b.n	33ee <start_read.isra.5+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    34a4:	2200      	movs	r2, #0
    34a6:	e7d4      	b.n	3452 <start_read.isra.5+0xca>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    34a8:	2202      	movs	r2, #2
    34aa:	e7d2      	b.n	3452 <start_read.isra.5+0xca>
	switch (sequence->oversampling) {
    34ac:	2a08      	cmp	r2, #8
    34ae:	d836      	bhi.n	351e <start_read.isra.5+0x196>
    34b0:	e8df f002 	tbb	[pc, r2]
    34b4:	29270545 	.word	0x29270545
    34b8:	312f2d2b 	.word	0x312f2d2b
    34bc:	33          	.byte	0x33
    34bd:	00          	.byte	0x00
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_2X;
    34be:	2201      	movs	r2, #1
	if (sequence->options) {
    34c0:	6805      	ldr	r5, [r0, #0]
    NRF_SAADC->OVERSAMPLE = oversample;
    34c2:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    34c6:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    34c8:	b115      	cbz	r5, 34d0 <start_read.isra.5+0x148>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    34ca:	892a      	ldrh	r2, [r5, #8]
    34cc:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    34d0:	68c2      	ldr	r2, [r0, #12]
    34d2:	429a      	cmp	r2, r3
    34d4:	d235      	bcs.n	3542 <start_read.isra.5+0x1ba>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    34d6:	2101      	movs	r1, #1
    34d8:	f04f 0000 	mov.w	r0, #0
    34dc:	f361 0002 	bfi	r0, r1, #0, #3
    34e0:	4c36      	ldr	r4, [pc, #216]	; (35bc <start_read.isra.5+0x234>)
    34e2:	4937      	ldr	r1, [pc, #220]	; (35c0 <start_read.isra.5+0x238>)
    34e4:	1b09      	subs	r1, r1, r4
    34e6:	08c9      	lsrs	r1, r1, #3
    34e8:	f36f 00c5 	bfc	r0, #3, #3
    34ec:	f361 108f 	bfi	r0, r1, #6, #10
    34f0:	f8ad 0000 	strh.w	r0, [sp]
    34f4:	493c      	ldr	r1, [pc, #240]	; (35e8 <start_read.isra.5+0x260>)
    34f6:	483d      	ldr	r0, [pc, #244]	; (35ec <start_read.isra.5+0x264>)
    34f8:	f7fd fe82 	bl	1200 <log_3>
		return -ENOMEM;
    34fc:	f06f 050b 	mvn.w	r5, #11
    3500:	e779      	b.n	33f6 <start_read.isra.5+0x6e>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_4X;
    3502:	2202      	movs	r2, #2
    3504:	e7dc      	b.n	34c0 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_8X;
    3506:	2203      	movs	r2, #3
    3508:	e7da      	b.n	34c0 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_16X;
    350a:	2204      	movs	r2, #4
    350c:	e7d8      	b.n	34c0 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_32X;
    350e:	2205      	movs	r2, #5
    3510:	e7d6      	b.n	34c0 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_64X;
    3512:	2206      	movs	r2, #6
    3514:	e7d4      	b.n	34c0 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_128X;
    3516:	2207      	movs	r2, #7
    3518:	e7d2      	b.n	34c0 <start_read.isra.5+0x138>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
    351a:	2208      	movs	r2, #8
    351c:	e7d0      	b.n	34c0 <start_read.isra.5+0x138>
		LOG_ERR("Oversampling value %d is not valid",
    351e:	2101      	movs	r1, #1
    3520:	f04f 0300 	mov.w	r3, #0
    3524:	f361 0302 	bfi	r3, r1, #0, #3
    3528:	4824      	ldr	r0, [pc, #144]	; (35bc <start_read.isra.5+0x234>)
    352a:	4925      	ldr	r1, [pc, #148]	; (35c0 <start_read.isra.5+0x238>)
    352c:	1a09      	subs	r1, r1, r0
    352e:	08c9      	lsrs	r1, r1, #3
    3530:	f36f 03c5 	bfc	r3, #3, #3
    3534:	f361 138f 	bfi	r3, r1, #6, #10
    3538:	482d      	ldr	r0, [pc, #180]	; (35f0 <start_read.isra.5+0x268>)
    353a:	4928      	ldr	r1, [pc, #160]	; (35dc <start_read.isra.5+0x254>)
    353c:	e757      	b.n	33ee <start_read.isra.5+0x66>
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_DISABLED;
    353e:	2200      	movs	r2, #0
    3540:	e7be      	b.n	34c0 <start_read.isra.5+0x138>
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
    3542:	4b22      	ldr	r3, [pc, #136]	; (35cc <start_read.isra.5+0x244>)
    3544:	6882      	ldr	r2, [r0, #8]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = sequence;
    3546:	4c22      	ldr	r4, [pc, #136]	; (35d0 <start_read.isra.5+0x248>)
    3548:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    NRF_SAADC->RESULT.MAXCNT = size;
    354c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
	ctx->status = 0;
    3550:	2100      	movs	r1, #0
	ctx->sequence = sequence;
    3552:	66e0      	str	r0, [r4, #108]	; 0x6c
	ctx->status = 0;
    3554:	6621      	str	r1, [r4, #96]	; 0x60

	if (ctx->sequence->options) {
    3556:	b365      	cbz	r5, 35b2 <start_read.isra.5+0x22a>
		ctx->sampling_index = 0;

		if (ctx->sequence->options->interval_us != 0) {
    3558:	682b      	ldr	r3, [r5, #0]
		ctx->sampling_index = 0;
    355a:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
		if (ctx->sequence->options->interval_us != 0) {
    355e:	b343      	cbz	r3, 35b2 <start_read.isra.5+0x22a>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3560:	f3bf 8f5b 	dmb	ish
    3564:	e854 3f00 	ldrex	r3, [r4]
    3568:	e844 1200 	strex	r2, r1, [r4]
    356c:	2a00      	cmp	r2, #0
    356e:	d1f9      	bne.n	3564 <start_read.isra.5+0x1dc>
    3570:	f3bf 8f5b 	dmb	ish
	u32_t interval_us = ctx->sequence->options->interval_us;
    3574:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    3576:	681b      	ldr	r3, [r3, #0]
	u32_t interval_ms = ceiling_fraction(interval_us, 1000UL);
    3578:	681b      	ldr	r3, [r3, #0]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    357a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    357e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
    3582:	1d20      	adds	r0, r4, #4
    3584:	fbb3 f2f2 	udiv	r2, r3, r2
    3588:	f001 fa50 	bl	4a2c <_impl_k_timer_start>
	if (ctx->asynchronous) {
    358c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    3590:	b993      	cbnz	r3, 35b8 <start_read.isra.5+0x230>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3592:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3596:	4817      	ldr	r0, [pc, #92]	; (35f4 <start_read.isra.5+0x26c>)
    3598:	f000 fffd 	bl	4596 <_impl_k_sem_take>
	return ctx->status;
    359c:	6e25      	ldr	r5, [r4, #96]	; 0x60
	if (ctx->asynchronous && (status == 0)) {
    359e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    35a2:	b113      	cbz	r3, 35aa <start_read.isra.5+0x222>
    35a4:	2d00      	cmp	r5, #0
    35a6:	f43f af26 	beq.w	33f6 <start_read.isra.5+0x6e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    35aa:	4813      	ldr	r0, [pc, #76]	; (35f8 <start_read.isra.5+0x270>)
    35ac:	f000 ffcc 	bl	4548 <_impl_k_sem_give>
    35b0:	e721      	b.n	33f6 <start_read.isra.5+0x6e>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    35b2:	f7ff febd 	bl	3330 <adc_context_start_sampling.isra.1>
    35b6:	e7e9      	b.n	358c <start_read.isra.5+0x204>
		return 0;
    35b8:	2500      	movs	r5, #0
    35ba:	e7f0      	b.n	359e <start_read.isra.5+0x216>
    35bc:	00004c40 	.word	0x00004c40
    35c0:	00004c40 	.word	0x00004c40
    35c4:	000053e4 	.word	0x000053e4
    35c8:	00005350 	.word	0x00005350
    35cc:	40007000 	.word	0x40007000
    35d0:	20001cb0 	.word	0x20001cb0
    35d4:	00005406 	.word	0x00005406
    35d8:	0000544d 	.word	0x0000544d
    35dc:	0000532d 	.word	0x0000532d
    35e0:	00005424 	.word	0x00005424
    35e4:	0000531e 	.word	0x0000531e
    35e8:	0000533e 	.word	0x0000533e
    35ec:	000054aa 	.word	0x000054aa
    35f0:	00005483 	.word	0x00005483
    35f4:	20001cf8 	.word	0x20001cf8
    35f8:	20001ce0 	.word	0x20001ce0

000035fc <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    35fc:	1f03      	subs	r3, r0, #4
    35fe:	f3bf 8f5b 	dmb	ish
    3602:	e853 2f00 	ldrex	r2, [r3]
    3606:	1c51      	adds	r1, r2, #1
    3608:	e843 1c00 	strex	ip, r1, [r3]
    360c:	f1bc 0f00 	cmp.w	ip, #0
    3610:	d1f7      	bne.n	3602 <adc_context_on_timer_expired+0x6>
    3612:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    3616:	b90a      	cbnz	r2, 361c <adc_context_on_timer_expired+0x20>
		adc_context_start_sampling(ctx);
    3618:	f7ff be8a 	b.w	3330 <adc_context_start_sampling.isra.1>
		ctx->status = -EIO;
    361c:	f06f 0304 	mvn.w	r3, #4
    3620:	65c3      	str	r3, [r0, #92]	; 0x5c
}
    3622:	4770      	bx	lr

00003624 <adc_nrfx_read>:
{
    3624:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3626:	4c08      	ldr	r4, [pc, #32]	; (3648 <adc_nrfx_read+0x24>)
    3628:	460d      	mov	r5, r1
    362a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    362e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3632:	f000 ffb0 	bl	4596 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3636:	2300      	movs	r3, #0
    3638:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
    363c:	6663      	str	r3, [r4, #100]	; 0x64
	return start_read(dev, sequence);
    363e:	4628      	mov	r0, r5
}
    3640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_read(dev, sequence);
    3644:	f7ff bea0 	b.w	3388 <start_read.isra.5>
    3648:	20001cb0 	.word	0x20001cb0

0000364c <adc_nrfx_read_async>:
{
    364c:	b570      	push	{r4, r5, r6, lr}
    364e:	4c09      	ldr	r4, [pc, #36]	; (3674 <adc_nrfx_read_async+0x28>)
    3650:	460d      	mov	r5, r1
    3652:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3656:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    365a:	4616      	mov	r6, r2
    365c:	f000 ff9b 	bl	4596 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3660:	2301      	movs	r3, #1
    3662:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ctx->signal = signal;
    3666:	6666      	str	r6, [r4, #100]	; 0x64
	return start_read(dev, sequence);
    3668:	4628      	mov	r0, r5
}
    366a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_read(dev, sequence);
    366e:	f7ff be8b 	b.w	3388 <start_read.isra.5>
    3672:	bf00      	nop
    3674:	20001cb0 	.word	0x20001cb0

00003678 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event);
    3678:	4b2f      	ldr	r3, [pc, #188]	; (3738 <saadc_irq_handler+0xc0>)
    367a:	681a      	ldr	r2, [r3, #0]
{
    367c:	b513      	push	{r0, r1, r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC_EVENT_END)) {
    367e:	2a00      	cmp	r2, #0
    3680:	d041      	beq.n	3706 <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event)) = 0x0UL;
    3682:	2200      	movs	r2, #0
    3684:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_event));
    3686:	681b      	ldr	r3, [r3, #0]
    3688:	9301      	str	r3, [sp, #4]
    (void)dummy;
    368a:	9b01      	ldr	r3, [sp, #4]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						struct device *dev)
{
	if (ctx->sequence->options) {
    368c:	4c2b      	ldr	r4, [pc, #172]	; (373c <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)NRF_SAADC + (uint32_t)saadc_task)) = 0x1UL;
    368e:	4b2c      	ldr	r3, [pc, #176]	; (3740 <saadc_irq_handler+0xc8>)
    3690:	2101      	movs	r1, #1
    3692:	6019      	str	r1, [r3, #0]
    3694:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    NRF_SAADC->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3696:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    369a:	680b      	ldr	r3, [r1, #0]
    369c:	2b00      	cmp	r3, #0
    369e:	d03b      	beq.n	3718 <saadc_irq_handler+0xa0>
		adc_sequence_callback callback =
    36a0:	685b      	ldr	r3, [r3, #4]
    36a2:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
			ctx->sequence->options->callback;
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    36a6:	b123      	cbz	r3, 36b2 <saadc_irq_handler+0x3a>
			action = callback(dev,
    36a8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    36aa:	2801      	cmp	r0, #1
    36ac:	d015      	beq.n	36da <saadc_irq_handler+0x62>
    36ae:	2802      	cmp	r0, #2
    36b0:	d02b      	beq.n	370a <saadc_irq_handler+0x92>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->sequence->options->extra_samplings) {
    36b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
			if (ctx->sampling_index <
    36b4:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
			    ctx->sequence->options->extra_samplings) {
    36b8:	6812      	ldr	r2, [r2, #0]
			if (ctx->sampling_index <
    36ba:	8912      	ldrh	r2, [r2, #8]
    36bc:	429a      	cmp	r2, r3
    36be:	d924      	bls.n	370a <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    36c0:	3301      	adds	r3, #1
    36c2:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    return (nrf_saadc_value_t *)NRF_SAADC->RESULT.PTR;
    36c6:	4b1f      	ldr	r3, [pc, #124]	; (3744 <saadc_irq_handler+0xcc>)
    36c8:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return NRF_SAADC->RESULT.AMOUNT;
    36cc:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get() +
    36d0:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    36d2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    NRF_SAADC->RESULT.PTR = (uint32_t)p_buffer;
    36d6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->sequence->options->interval_us == 0) {
    36da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	681b      	ldr	r3, [r3, #0]
    36e0:	b923      	cbnz	r3, 36ec <saadc_irq_handler+0x74>
}
    36e2:	b002      	add	sp, #8
    36e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				adc_context_start_sampling(ctx);
    36e8:	f7ff be22 	b.w	3330 <adc_context_start_sampling.isra.1>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    36ec:	f3bf 8f5b 	dmb	ish
    36f0:	e854 3f00 	ldrex	r3, [r4]
    36f4:	1e5a      	subs	r2, r3, #1
    36f6:	e844 2100 	strex	r1, r2, [r4]
    36fa:	2900      	cmp	r1, #0
    36fc:	d1f8      	bne.n	36f0 <saadc_irq_handler+0x78>
    36fe:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3702:	2b01      	cmp	r3, #1
    3704:	dced      	bgt.n	36e2 <saadc_irq_handler+0x6a>
    3706:	b002      	add	sp, #8
    3708:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->sequence->options->interval_us != 0) {
    370a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	681b      	ldr	r3, [r3, #0]
    3710:	b113      	cbz	r3, 3718 <saadc_irq_handler+0xa0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    3712:	480d      	ldr	r0, [pc, #52]	; (3748 <saadc_irq_handler+0xd0>)
    3714:	f001 f9c2 	bl	4a9c <_impl_k_timer_stop>
	if (ctx->asynchronous) {
    3718:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    371c:	b153      	cbz	r3, 3734 <saadc_irq_handler+0xbc>
		if (ctx->signal) {
    371e:	6e60      	ldr	r0, [r4, #100]	; 0x64
    3720:	b110      	cbz	r0, 3728 <saadc_irq_handler+0xb0>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result)
    3722:	2100      	movs	r1, #0
    3724:	f001 fa2b 	bl	4b7e <_impl_k_poll_signal>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    3728:	4808      	ldr	r0, [pc, #32]	; (374c <saadc_irq_handler+0xd4>)
    372a:	b002      	add	sp, #8
    372c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3730:	f000 bf0a 	b.w	4548 <_impl_k_sem_give>
    3734:	4806      	ldr	r0, [pc, #24]	; (3750 <saadc_irq_handler+0xd8>)
    3736:	e7f8      	b.n	372a <saadc_irq_handler+0xb2>
    3738:	40007104 	.word	0x40007104
    373c:	20001cb0 	.word	0x20001cb0
    3740:	40007008 	.word	0x40007008
    3744:	40007000 	.word	0x40007000
    3748:	20001cb4 	.word	0x20001cb4
    374c:	20001ce0 	.word	0x20001ce0
    3750:	20001cf8 	.word	0x20001cf8

00003754 <gpio_nrfx_write>:
	return 0;
}

static int gpio_nrfx_write(struct device *port, int access_op,
			   u32_t pin, u32_t value)
{
    3754:	b510      	push	{r4, lr}
	return port->config->config_info;
    3756:	6804      	ldr	r4, [r0, #0]
    3758:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    375a:	68a4      	ldr	r4, [r4, #8]
    375c:	69c0      	ldr	r0, [r0, #28]
    375e:	6824      	ldr	r4, [r4, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	if (access_op == GPIO_ACCESS_BY_PORT) {
    3760:	2901      	cmp	r1, #1
    3762:	d104      	bne.n	376e <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    3764:	4058      	eors	r0, r3
}


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
    3766:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	return 0;
}
    376a:	2000      	movs	r0, #0
    376c:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    376e:	3300      	adds	r3, #0
    3770:	fa20 f002 	lsr.w	r0, r0, r2
    3774:	f04f 0101 	mov.w	r1, #1
    3778:	bf18      	it	ne
    377a:	2301      	movne	r3, #1
    377c:	f000 0001 	and.w	r0, r0, #1
    3780:	4091      	lsls	r1, r2
    3782:	4283      	cmp	r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3784:	bf14      	ite	ne
    3786:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    378a:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    378e:	e7ec      	b.n	376a <gpio_nrfx_write+0x16>

00003790 <gpio_nrfx_read>:

static int gpio_nrfx_read(struct device *port, int access_op,
			  u32_t pin, u32_t *value)
{
    3790:	b510      	push	{r4, lr}
	return port->config->config_info;
    3792:	6804      	ldr	r4, [r0, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
	struct gpio_nrfx_data *data = get_port_data(port);

	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    3794:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3796:	68a4      	ldr	r4, [r4, #8]
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    3798:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    379a:	6824      	ldr	r4, [r4, #0]
    return p_reg->IN;
    379c:	f8d4 4510 	ldr.w	r4, [r4, #1296]	; 0x510

	if (access_op == GPIO_ACCESS_BY_PORT) {
    37a0:	2901      	cmp	r1, #1
	u32_t port_in = nrf_gpio_port_in_read(reg) ^ data->inverted;
    37a2:	ea80 0004 	eor.w	r0, r0, r4
		*value = port_in;
	} else {
		*value = (port_in & BIT(pin)) ? 1 : 0;
    37a6:	bf1c      	itt	ne
    37a8:	40d0      	lsrne	r0, r2
    37aa:	f000 0001 	andne.w	r0, r0, #1
    37ae:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
    37b0:	2000      	movs	r0, #0
    37b2:	bd10      	pop	{r4, pc}

000037b4 <gpio_nrfx_manage_callback>:

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
	_gpio_manage_callback(&get_port_data(port)->callbacks, callback, set);
    37b4:	6883      	ldr	r3, [r0, #8]
    37b6:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    37b8:	b172      	cbz	r2, 37d8 <gpio_nrfx_manage_callback+0x24>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    37ba:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
    37bc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    37be:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    37c0:	b902      	cbnz	r2, 37c4 <gpio_nrfx_manage_callback+0x10>
	list->tail = node;
    37c2:	6059      	str	r1, [r3, #4]
	return 0;
}
    37c4:	2000      	movs	r0, #0
    37c6:	4770      	bx	lr
	parent->next = child;
    37c8:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    37ca:	6858      	ldr	r0, [r3, #4]
    37cc:	4281      	cmp	r1, r0
	list->tail = node;
    37ce:	bf08      	it	eq
    37d0:	605a      	streq	r2, [r3, #4]
    37d2:	e00d      	b.n	37f0 <gpio_nrfx_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    37d4:	4602      	mov	r2, r0
    37d6:	6800      	ldr	r0, [r0, #0]
    37d8:	2800      	cmp	r0, #0
    37da:	d0f3      	beq.n	37c4 <gpio_nrfx_manage_callback+0x10>
    37dc:	4288      	cmp	r0, r1
    37de:	d1f9      	bne.n	37d4 <gpio_nrfx_manage_callback+0x20>
    37e0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    37e2:	2a00      	cmp	r2, #0
    37e4:	d1f0      	bne.n	37c8 <gpio_nrfx_manage_callback+0x14>
    37e6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    37e8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    37ea:	4291      	cmp	r1, r2
    37ec:	d100      	bne.n	37f0 <gpio_nrfx_manage_callback+0x3c>
	list->tail = node;
    37ee:	6058      	str	r0, [r3, #4]
	parent->next = child;
    37f0:	2300      	movs	r3, #0
    37f2:	600b      	str	r3, [r1, #0]
    37f4:	e7e6      	b.n	37c4 <gpio_nrfx_manage_callback+0x10>
	...

000037f8 <gpio_nrfx_init>:
		}
	}
}

static int gpio_nrfx_init(struct device *port)
{
    37f8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    37fa:	4b09      	ldr	r3, [pc, #36]	; (3820 <gpio_nrfx_init+0x28>)
    37fc:	781a      	ldrb	r2, [r3, #0]
    37fe:	b96a      	cbnz	r2, 381c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    3800:	2101      	movs	r1, #1
    3802:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(CONFIG_GPIOTE_IRQ, CONFIG_GPIOTE_IRQ_PRI,
    3804:	2006      	movs	r0, #6
    3806:	2105      	movs	r1, #5
    3808:	f7fe fe5a 	bl	24c0 <_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(CONFIG_GPIOTE_IRQ);
    380c:	2006      	movs	r0, #6
    380e:	f7fe fe33 	bl	2478 <_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    3812:	4b04      	ldr	r3, [pc, #16]	; (3824 <gpio_nrfx_init+0x2c>)
    3814:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3818:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    381c:	2000      	movs	r0, #0
    381e:	bd08      	pop	{r3, pc}
    3820:	2000050c 	.word	0x2000050c
    3824:	40006000 	.word	0x40006000

00003828 <check_level_trigger_pins.constprop.11>:
	struct gpio_nrfx_data *data = get_port_data(port);
    3828:	4a0b      	ldr	r2, [pc, #44]	; (3858 <check_level_trigger_pins.constprop.11+0x30>)
    382a:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    382c:	6812      	ldr	r2, [r2, #0]
	u32_t port_in = nrf_gpio_port_in_read(get_port_cfg(port)->port);
    382e:	6892      	ldr	r2, [r2, #8]
    3830:	6812      	ldr	r2, [r2, #0]
static u32_t check_level_trigger_pins(struct device *port)
    3832:	b510      	push	{r4, lr}
    3834:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	out &= ~data->trig_edge & ~data->double_edge;
    3838:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    383c:	4311      	orrs	r1, r2
    383e:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    3842:	4002      	ands	r2, r0
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    3844:	69d8      	ldr	r0, [r3, #28]
    3846:	691b      	ldr	r3, [r3, #16]
    3848:	4058      	eors	r0, r3
	out &= ~data->trig_edge & ~data->double_edge;
    384a:	ea22 0201 	bic.w	r2, r2, r1
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    384e:	4060      	eors	r0, r4
}
    3850:	ea22 0000 	bic.w	r0, r2, r0
    3854:	bd10      	pop	{r4, pc}
    3856:	bf00      	nop
    3858:	20001d94 	.word	0x20001d94

0000385c <gpiote_event_handler>:
{
    385c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    385e:	4d23      	ldr	r5, [pc, #140]	; (38ec <gpiote_event_handler+0x90>)
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
    3860:	682b      	ldr	r3, [r5, #0]
    3862:	2b01      	cmp	r3, #1
    3864:	d133      	bne.n	38ce <gpiote_event_handler+0x72>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    3866:	f7ff ffdf 	bl	3828 <check_level_trigger_pins.constprop.11>
    386a:	4606      	mov	r6, r0
	u32_t fired_triggers[GPIO_COUNT] = {0};
    386c:	2300      	movs	r3, #0
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    386e:	4c20      	ldr	r4, [pc, #128]	; (38f0 <gpiote_event_handler+0x94>)
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    3870:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3872:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    3874:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
    3878:	fa07 f103 	lsl.w	r1, r7, r3
    387c:	4211      	tst	r1, r2
    387e:	d014      	beq.n	38aa <gpiote_event_handler+0x4e>
    3880:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    3884:	f502 52c2 	add.w	r2, r2, #6208	; 0x1840
    3888:	0092      	lsls	r2, r2, #2
    388a:	6811      	ldr	r1, [r2, #0]
    388c:	2901      	cmp	r1, #1
    388e:	d10c      	bne.n	38aa <gpiote_event_handler+0x4e>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3890:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    3894:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    3898:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    389c:	6812      	ldr	r2, [r2, #0]
    389e:	9200      	str	r2, [sp, #0]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    38a0:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
    38a4:	4081      	lsls	r1, r0
    (void)dummy;
    38a6:	9a00      	ldr	r2, [sp, #0]
    38a8:	430e      	orrs	r6, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    38aa:	3301      	adds	r3, #1
    38ac:	2b08      	cmp	r3, #8
    38ae:	d1e1      	bne.n	3874 <gpiote_event_handler+0x18>
	if (fired_triggers[0]) {
    38b0:	b17e      	cbz	r6, 38d2 <gpiote_event_handler+0x76>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    38b2:	4f10      	ldr	r7, [pc, #64]	; (38f4 <gpiote_event_handler+0x98>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    38b4:	68bb      	ldr	r3, [r7, #8]
    38b6:	681c      	ldr	r4, [r3, #0]
    38b8:	b15c      	cbz	r4, 38d2 <gpiote_event_handler+0x76>
		if (cb->pin_mask & pins) {
    38ba:	68a3      	ldr	r3, [r4, #8]
    38bc:	421e      	tst	r6, r3
    38be:	d004      	beq.n	38ca <gpiote_event_handler+0x6e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    38c0:	6863      	ldr	r3, [r4, #4]
    38c2:	4632      	mov	r2, r6
    38c4:	4621      	mov	r1, r4
    38c6:	4638      	mov	r0, r7
    38c8:	4798      	blx	r3
	return node->next;
    38ca:	6824      	ldr	r4, [r4, #0]
    38cc:	e7f4      	b.n	38b8 <gpiote_event_handler+0x5c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    38ce:	2600      	movs	r6, #0
    38d0:	e7cc      	b.n	386c <gpiote_event_handler+0x10>
	if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT)) {
    38d2:	682b      	ldr	r3, [r5, #0]
    38d4:	2b01      	cmp	r3, #1
    38d6:	d106      	bne.n	38e6 <gpiote_event_handler+0x8a>
		u32_t active_level_triggers =
    38d8:	f7ff ffa6 	bl	3828 <check_level_trigger_pins.constprop.11>
		if (active_level_triggers == 0) {
    38dc:	b918      	cbnz	r0, 38e6 <gpiote_event_handler+0x8a>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    38de:	6028      	str	r0, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    38e0:	682b      	ldr	r3, [r5, #0]
    38e2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    38e4:	9b01      	ldr	r3, [sp, #4]
}
    38e6:	b003      	add	sp, #12
    38e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38ea:	bf00      	nop
    38ec:	4000617c 	.word	0x4000617c
    38f0:	40006000 	.word	0x40006000
    38f4:	20001d94 	.word	0x20001d94

000038f8 <gpiote_pin_int_cfg>:
{
    38f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
    38fa:	6803      	ldr	r3, [r0, #0]
    return (NRF_GPIOTE->INTENSET & mask);
    38fc:	4d58      	ldr	r5, [pc, #352]	; (3a60 <gpiote_pin_int_cfg+0x168>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    38fe:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    3900:	6884      	ldr	r4, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3902:	791a      	ldrb	r2, [r3, #4]
    3904:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3908:	f001 031f 	and.w	r3, r1, #31
    390c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    3910:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3912:	2200      	movs	r2, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3914:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    3918:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    391c:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    3920:	42b3      	cmp	r3, r6
    3922:	d175      	bne.n	3a10 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    3924:	fa20 f602 	lsr.w	r6, r0, r2
    3928:	07f6      	lsls	r6, r6, #31
    392a:	d571      	bpl.n	3a10 <gpiote_pin_int_cfg+0x118>
    392c:	0090      	lsls	r0, r2, #2
    392e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3932:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3936:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
    393a:	f026 0601 	bic.w	r6, r6, #1
    393e:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    3942:	2001      	movs	r0, #1
    3944:	fa00 f202 	lsl.w	r2, r0, r2
    NRF_GPIOTE->INTENCLR = mask;
    3948:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    394c:	009a      	lsls	r2, r3, #2
    394e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    3952:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    3956:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    395a:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    395e:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    3962:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    3966:	68a0      	ldr	r0, [r4, #8]
    3968:	40c8      	lsrs	r0, r1
    396a:	f010 0001 	ands.w	r0, r0, #1
    396e:	d04d      	beq.n	3a0c <gpiote_pin_int_cfg+0x114>
    3970:	68e0      	ldr	r0, [r4, #12]
    3972:	40c8      	lsrs	r0, r1
    3974:	f010 0001 	ands.w	r0, r0, #1
    3978:	d048      	beq.n	3a0c <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    397a:	6960      	ldr	r0, [r4, #20]
    397c:	40c8      	lsrs	r0, r1
    397e:	f010 0001 	ands.w	r0, r0, #1
    3982:	d052      	beq.n	3a2a <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    3984:	69a2      	ldr	r2, [r4, #24]
    3986:	40ca      	lsrs	r2, r1
    3988:	07d2      	lsls	r2, r2, #31
    398a:	d446      	bmi.n	3a1a <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0)
    398c:	6922      	ldr	r2, [r4, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    398e:	69e0      	ldr	r0, [r4, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
    3990:	40ca      	lsrs	r2, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    3992:	fa20 f101 	lsr.w	r1, r0, r1
			} else if (((data->active_level & BIT(pin)) != 0)
    3996:	f002 0201 	and.w	r2, r2, #1
    399a:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    399e:	428a      	cmp	r2, r1
    39a0:	bf0c      	ite	eq
    39a2:	2102      	moveq	r1, #2
    39a4:	2101      	movne	r1, #1
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    39a6:	4f2e      	ldr	r7, [pc, #184]	; (3a60 <gpiote_pin_int_cfg+0x168>)
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    39a8:	2500      	movs	r5, #0
    39aa:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    39ae:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    39b2:	f010 0003 	ands.w	r0, r0, #3
    39b6:	d132      	bne.n	3a1e <gpiote_pin_int_cfg+0x126>
			nrf_gpiote_events_t evt =
    39b8:	00ac      	lsls	r4, r5, #2
    39ba:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    39be:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39c2:	021b      	lsls	r3, r3, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    39c4:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    39c8:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    39cc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    39d0:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39d4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    39d8:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    39dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    return ((uint32_t)NRF_GPIOTE + event);
    39e0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    39e4:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39e8:	4331      	orrs	r1, r6
    39ea:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    39ee:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    39f0:	681b      	ldr	r3, [r3, #0]
    39f2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    39f4:	9b01      	ldr	r3, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    39f6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    39fa:	f043 0301 	orr.w	r3, r3, #1
    39fe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    3a02:	2301      	movs	r3, #1
    3a04:	fa03 f505 	lsl.w	r5, r3, r5
    NRF_GPIOTE->INTENSET = mask;
    3a08:	f8c7 5304 	str.w	r5, [r7, #772]	; 0x304
}
    3a0c:	b003      	add	sp, #12
    3a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3a10:	3201      	adds	r2, #1
    3a12:	2a08      	cmp	r2, #8
    3a14:	f47f af7e 	bne.w	3914 <gpiote_pin_int_cfg+0x1c>
    3a18:	e798      	b.n	394c <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3a1a:	2103      	movs	r1, #3
    3a1c:	e7c3      	b.n	39a6 <gpiote_pin_int_cfg+0xae>
    3a1e:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3a20:	2d08      	cmp	r5, #8
    3a22:	d1c2      	bne.n	39aa <gpiote_pin_int_cfg+0xb2>
	return -ENODEV;
    3a24:	f06f 0012 	mvn.w	r0, #18
    3a28:	e7f0      	b.n	3a0c <gpiote_pin_int_cfg+0x114>
			if (((data->active_level & BIT(pin)) != 0)
    3a2a:	6923      	ldr	r3, [r4, #16]
			    ^ ((BIT(pin) & data->inverted) != 0)) {
    3a2c:	69e4      	ldr	r4, [r4, #28]
			if (((data->active_level & BIT(pin)) != 0)
    3a2e:	40cb      	lsrs	r3, r1
			    ^ ((BIT(pin) & data->inverted) != 0)) {
    3a30:	fa24 f101 	lsr.w	r1, r4, r1
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    3a34:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
    3a38:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    3a3c:	f8c2 4700 	str.w	r4, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3a40:	f8d2 4700 	ldr.w	r4, [r2, #1792]	; 0x700
			if (((data->active_level & BIT(pin)) != 0)
    3a44:	f003 0301 	and.w	r3, r3, #1
    3a48:	f001 0101 	and.w	r1, r1, #1
    3a4c:	428b      	cmp	r3, r1
    3a4e:	bf0c      	ite	eq
    3a50:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    3a54:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    3a58:	4323      	orrs	r3, r4
    3a5a:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
    3a5e:	e7d5      	b.n	3a0c <gpiote_pin_int_cfg+0x114>
    3a60:	40006000 	.word	0x40006000

00003a64 <gpio_nrfx_config>:
{
    3a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a68:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    3a6a:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3a6c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    3a70:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    3a74:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3a76:	d04a      	beq.n	3b0e <gpio_nrfx_config+0xaa>
    3a78:	dc2d      	bgt.n	3ad6 <gpio_nrfx_config+0x72>
    3a7a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    3a7e:	d03e      	beq.n	3afe <gpio_nrfx_config+0x9a>
    3a80:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    3a84:	d03f      	beq.n	3b06 <gpio_nrfx_config+0xa2>
    3a86:	bb68      	cbnz	r0, 3ae4 <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3a88:	f406 7740 	and.w	r7, r6, #768	; 0x300
    3a8c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    3a90:	d03f      	beq.n	3b12 <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
    3a92:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    3a96:	4263      	negs	r3, r4
    3a98:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    3a9a:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    3a9e:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3aa2:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3aa4:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    3aa8:	bf18      	it	ne
    3aaa:	b2d4      	uxtbne	r4, r2
    3aac:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    3ab0:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    3ab4:	bf12      	itee	ne
    3ab6:	46a1      	movne	r9, r4
		to_pin   = 31;
    3ab8:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0;
    3abc:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3abe:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    3ac2:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3ac6:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3aca:	45a1      	cmp	r9, r4
    3acc:	d223      	bcs.n	3b16 <gpio_nrfx_config+0xb2>
	return 0;
    3ace:	2000      	movs	r0, #0
}
    3ad0:	b003      	add	sp, #12
    3ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3ad6:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    3ada:	d016      	beq.n	3b0a <gpio_nrfx_config+0xa6>
    3adc:	dc05      	bgt.n	3aea <gpio_nrfx_config+0x86>
    3ade:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    3ae2:	d00e      	beq.n	3b02 <gpio_nrfx_config+0x9e>
		return -EINVAL;
    3ae4:	f06f 0015 	mvn.w	r0, #21
    3ae8:	e7f2      	b.n	3ad0 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    3aea:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    3aee:	d004      	beq.n	3afa <gpio_nrfx_config+0x96>
    3af0:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    3af4:	d1f6      	bne.n	3ae4 <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
    3af6:	2007      	movs	r0, #7
		break;
    3af8:	e7c6      	b.n	3a88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    3afa:	2006      	movs	r0, #6
		break;
    3afc:	e7c4      	b.n	3a88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    3afe:	2001      	movs	r0, #1
		break;
    3b00:	e7c2      	b.n	3a88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    3b02:	2003      	movs	r0, #3
		break;
    3b04:	e7c0      	b.n	3a88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    3b06:	2004      	movs	r0, #4
		break;
    3b08:	e7be      	b.n	3a88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    3b0a:	2005      	movs	r0, #5
		break;
    3b0c:	e7bc      	b.n	3a88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    3b0e:	2002      	movs	r0, #2
    3b10:	e7ba      	b.n	3a88 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    3b12:	2303      	movs	r3, #3
    3b14:	e7c1      	b.n	3a9a <gpio_nrfx_config+0x36>
	return port->config->config_info;
    3b16:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    3b1a:	6892      	ldr	r2, [r2, #8]
    3b1c:	7911      	ldrb	r1, [r2, #4]
    3b1e:	f004 021f 	and.w	r2, r4, #31
    3b22:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    3b26:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3b2a:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
    3b2e:	fa0b f204 	lsl.w	r2, fp, r4
    3b32:	68a9      	ldr	r1, [r5, #8]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3b34:	2b00      	cmp	r3, #0
    3b36:	d025      	beq.n	3b84 <gpio_nrfx_config+0x120>
    3b38:	4311      	orrs	r1, r2
    3b3a:	60a9      	str	r1, [r5, #8]
    3b3c:	6969      	ldr	r1, [r5, #20]
    3b3e:	9301      	str	r3, [sp, #4]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    3b40:	06b0      	lsls	r0, r6, #26
    3b42:	bf4c      	ite	mi
    3b44:	4311      	orrmi	r1, r2
    3b46:	4391      	bicpl	r1, r2
    3b48:	6169      	str	r1, [r5, #20]
    3b4a:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    3b4c:	0670      	lsls	r0, r6, #25
    3b4e:	bf4c      	ite	mi
    3b50:	4311      	orrmi	r1, r2
    3b52:	4391      	bicpl	r1, r2
    3b54:	61a9      	str	r1, [r5, #24]
    3b56:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
    3b58:	0770      	lsls	r0, r6, #29
    3b5a:	bf4c      	ite	mi
    3b5c:	4311      	orrmi	r1, r2
    3b5e:	4391      	bicpl	r1, r2
    3b60:	6129      	str	r1, [r5, #16]
    3b62:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    3b64:	0630      	lsls	r0, r6, #24
    3b66:	bf4c      	ite	mi
    3b68:	430a      	orrmi	r2, r1
    3b6a:	ea21 0202 	bicpl.w	r2, r1, r2
    3b6e:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3b70:	4621      	mov	r1, r4
    3b72:	4640      	mov	r0, r8
    3b74:	f7ff fec0 	bl	38f8 <gpiote_pin_int_cfg>
		if (res != 0) {
    3b78:	2800      	cmp	r0, #0
    3b7a:	d1a9      	bne.n	3ad0 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3b7c:	3401      	adds	r4, #1
    3b7e:	b2e4      	uxtb	r4, r4
    3b80:	9b01      	ldr	r3, [sp, #4]
    3b82:	e7a2      	b.n	3aca <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    3b84:	ea21 0102 	bic.w	r1, r1, r2
    3b88:	e7d7      	b.n	3b3a <gpio_nrfx_config+0xd6>

00003b8a <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3b8a:	2901      	cmp	r1, #1
{
    3b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    3b90:	bf18      	it	ne
    3b92:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    3b94:	6887      	ldr	r7, [r0, #8]
{
    3b96:	4606      	mov	r6, r0
		to_pin   = pin;
    3b98:	bf12      	itee	ne
    3b9a:	4625      	movne	r5, r4
		to_pin   = 31;
    3b9c:	251f      	moveq	r5, #31
		from_pin = 0;
    3b9e:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    3ba0:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3ba4:	42ac      	cmp	r4, r5
    3ba6:	d902      	bls.n	3bae <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    3ba8:	2000      	movs	r0, #0
}
    3baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    3bae:	68fb      	ldr	r3, [r7, #12]
    3bb0:	fa08 f204 	lsl.w	r2, r8, r4
    3bb4:	ea23 0302 	bic.w	r3, r3, r2
    3bb8:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3bba:	4621      	mov	r1, r4
    3bbc:	4630      	mov	r0, r6
    3bbe:	f7ff fe9b 	bl	38f8 <gpiote_pin_int_cfg>
		if (res != 0) {
    3bc2:	2800      	cmp	r0, #0
    3bc4:	d1f1      	bne.n	3baa <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3bc6:	3401      	adds	r4, #1
    3bc8:	b2e4      	uxtb	r4, r4
    3bca:	e7eb      	b.n	3ba4 <gpio_nrfx_pin_disable_callback+0x1a>

00003bcc <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    3bcc:	2901      	cmp	r1, #1
{
    3bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    3bd2:	bf18      	it	ne
    3bd4:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    3bd6:	6887      	ldr	r7, [r0, #8]
{
    3bd8:	4606      	mov	r6, r0
		to_pin   = pin;
    3bda:	bf12      	itee	ne
    3bdc:	4625      	movne	r5, r4
		to_pin   = 31;
    3bde:	251f      	moveq	r5, #31
		from_pin = 0;
    3be0:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    3be2:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3be6:	42ac      	cmp	r4, r5
    3be8:	d902      	bls.n	3bf0 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    3bea:	2000      	movs	r0, #0
}
    3bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    3bf0:	68fb      	ldr	r3, [r7, #12]
    3bf2:	fa08 f204 	lsl.w	r2, r8, r4
    3bf6:	4313      	orrs	r3, r2
    3bf8:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    3bfa:	4621      	mov	r1, r4
    3bfc:	4630      	mov	r0, r6
    3bfe:	f7ff fe7b 	bl	38f8 <gpiote_pin_int_cfg>
		if (res != 0) {
    3c02:	2800      	cmp	r0, #0
    3c04:	d1f2      	bne.n	3bec <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    3c06:	3401      	adds	r4, #1
    3c08:	b2e4      	uxtb	r4, r4
    3c0a:	e7ec      	b.n	3be6 <gpio_nrfx_pin_enable_callback+0x1a>

00003c0c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(s32_t level)
{
    3c0c:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    3c0e:	4b08      	ldr	r3, [pc, #32]	; (3c30 <_sys_device_do_config_level+0x24>)
    3c10:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3c14:	3001      	adds	r0, #1
    3c16:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    3c1a:	4620      	mov	r0, r4
    3c1c:	4285      	cmp	r5, r0
    3c1e:	f104 040c 	add.w	r4, r4, #12
    3c22:	d800      	bhi.n	3c26 <_sys_device_do_config_level+0x1a>
		struct device_config *device_conf = info->config;

		(void)device_conf->init(info);
		_k_object_init(info);
	}
}
    3c24:	bd38      	pop	{r3, r4, r5, pc}
		(void)device_conf->init(info);
    3c26:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    3c2a:	685b      	ldr	r3, [r3, #4]
    3c2c:	4798      	blx	r3
    3c2e:	e7f4      	b.n	3c1a <_sys_device_do_config_level+0xe>
    3c30:	00005510 	.word	0x00005510

00003c34 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    3c34:	4b10      	ldr	r3, [pc, #64]	; (3c78 <device_get_binding+0x44>)
{
    3c36:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    3c38:	4c10      	ldr	r4, [pc, #64]	; (3c7c <device_get_binding+0x48>)
{
    3c3a:	4605      	mov	r5, r0
    3c3c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    3c3e:	429c      	cmp	r4, r3
    3c40:	d104      	bne.n	3c4c <device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    3c42:	4c0e      	ldr	r4, [pc, #56]	; (3c7c <device_get_binding+0x48>)
    3c44:	42b4      	cmp	r4, r6
    3c46:	d109      	bne.n	3c5c <device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    3c48:	2400      	movs	r4, #0
    3c4a:	e012      	b.n	3c72 <device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    3c4c:	6862      	ldr	r2, [r4, #4]
    3c4e:	b11a      	cbz	r2, 3c58 <device_get_binding+0x24>
		    (info->config->name == name)) {
    3c50:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    3c52:	6812      	ldr	r2, [r2, #0]
    3c54:	42aa      	cmp	r2, r5
    3c56:	d00c      	beq.n	3c72 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3c58:	340c      	adds	r4, #12
    3c5a:	e7f0      	b.n	3c3e <device_get_binding+0xa>
		if (info->driver_api == NULL) {
    3c5c:	6863      	ldr	r3, [r4, #4]
    3c5e:	b90b      	cbnz	r3, 3c64 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3c60:	340c      	adds	r4, #12
    3c62:	e7ef      	b.n	3c44 <device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    3c64:	6823      	ldr	r3, [r4, #0]
    3c66:	4628      	mov	r0, r5
    3c68:	6819      	ldr	r1, [r3, #0]
    3c6a:	f7fe fdad 	bl	27c8 <strcmp>
    3c6e:	2800      	cmp	r0, #0
    3c70:	d1f6      	bne.n	3c60 <device_get_binding+0x2c>
}
    3c72:	4620      	mov	r0, r4
    3c74:	bd70      	pop	{r4, r5, r6, pc}
    3c76:	bf00      	nop
    3c78:	20001dac 	.word	0x20001dac
    3c7c:	20001d34 	.word	0x20001d34

00003c80 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	z_clock_idle_exit();
    3c80:	f7fe b9ec 	b.w	205c <z_clock_idle_exit>

00003c84 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    3c84:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    3c86:	4d0a      	ldr	r5, [pc, #40]	; (3cb0 <idle+0x2c>)
    3c88:	f04f 0220 	mov.w	r2, #32
    3c8c:	f3ef 8311 	mrs	r3, BASEPRI
    3c90:	f382 8811 	msr	BASEPRI, r2
		k_yield();
	}
#else
	for (;;) {
		(void)irq_lock();
		sys_power_save_idle(_get_next_timeout_expiry());
    3c94:	f000 fdc2 	bl	481c <_get_next_timeout_expiry>
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
    3c98:	2101      	movs	r1, #1
    3c9a:	2802      	cmp	r0, #2
		sys_power_save_idle(_get_next_timeout_expiry());
    3c9c:	4604      	mov	r4, r0
	z_clock_set_timeout(ticks < IDLE_THRESH ? 1 : ticks, true);
    3c9e:	bfd8      	it	le
    3ca0:	4608      	movle	r0, r1
    3ca2:	f7fe f9d7 	bl	2054 <z_clock_set_timeout>
	_kernel.idle = ticks;
    3ca6:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    3ca8:	f7fe fc52 	bl	2550 <k_cpu_idle>
    3cac:	e7ec      	b.n	3c88 <idle+0x4>
    3cae:	bf00      	nop
    3cb0:	2000076c 	.word	0x2000076c

00003cb4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    3cb4:	4802      	ldr	r0, [pc, #8]	; (3cc0 <_bss_zero+0xc>)
    3cb6:	4a03      	ldr	r2, [pc, #12]	; (3cc4 <_bss_zero+0x10>)
    3cb8:	2100      	movs	r1, #0
    3cba:	1a12      	subs	r2, r2, r0
    3cbc:	f7fe bdd5 	b.w	286a <memset>
    3cc0:	20000000 	.word	0x20000000
    3cc4:	2000079c 	.word	0x2000079c

00003cc8 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3cc8:	4802      	ldr	r0, [pc, #8]	; (3cd4 <_data_copy+0xc>)
    3cca:	4a03      	ldr	r2, [pc, #12]	; (3cd8 <_data_copy+0x10>)
    3ccc:	4903      	ldr	r1, [pc, #12]	; (3cdc <_data_copy+0x14>)
    3cce:	1a12      	subs	r2, r2, r0
    3cd0:	f7fe bd9e 	b.w	2810 <memcpy>
    3cd4:	20001c80 	.word	0x20001c80
    3cd8:	20001df0 	.word	0x20001df0
    3cdc:	00005568 	.word	0x00005568

00003ce0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3ce0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3ce2:	2002      	movs	r0, #2
    3ce4:	f7ff ff92 	bl	3c0c <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    3ce8:	4807      	ldr	r0, [pc, #28]	; (3d08 <bg_thread_main+0x28>)
    3cea:	f7fc feab 	bl	a44 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    3cee:	2003      	movs	r0, #3
    3cf0:	f7ff ff8c 	bl	3c0c <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    3cf4:	f000 fd02 	bl	46fc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3cf8:	f7fc fcae 	bl	658 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    3cfc:	4a03      	ldr	r2, [pc, #12]	; (3d0c <bg_thread_main+0x2c>)
    3cfe:	7b13      	ldrb	r3, [r2, #12]
    3d00:	f023 0301 	bic.w	r3, r3, #1
    3d04:	7313      	strb	r3, [r2, #12]
}
    3d06:	bd08      	pop	{r3, pc}
    3d08:	00005538 	.word	0x00005538
    3d0c:	2000059c 	.word	0x2000059c

00003d10 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b086      	sub	sp, #24
    3d14:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    3d16:	f7fe fa15 	bl	2144 <_IntLibInit>

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
    3d1a:	f7fd f95f 	bl	fdc <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    3d1e:	4b31      	ldr	r3, [pc, #196]	; (3de4 <_Cstart+0xd4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3d20:	f383 8808 	msr	MSP, r3
    3d24:	4b30      	ldr	r3, [pc, #192]	; (3de8 <_Cstart+0xd8>)
	_kernel.ready_q.cache = _main_thread;
    3d26:	4e31      	ldr	r6, [pc, #196]	; (3dec <_Cstart+0xdc>)
    3d28:	4d31      	ldr	r5, [pc, #196]	; (3df0 <_Cstart+0xe0>)
    3d2a:	2400      	movs	r4, #0
    3d2c:	22e0      	movs	r2, #224	; 0xe0
    3d2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    3d32:	77dc      	strb	r4, [r3, #31]
    3d34:	761c      	strb	r4, [r3, #24]
    3d36:	765c      	strb	r4, [r3, #25]
    3d38:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3d3c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3d40:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    3d42:	f7fe fb91 	bl	2468 <_FaultInit>
	_CpuIdleInit();
    3d46:	f7fe fbfd 	bl	2544 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3d4a:	4620      	mov	r0, r4
    3d4c:	f7ff ff5e 	bl	3c0c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3d50:	2001      	movs	r0, #1
    3d52:	f7ff ff5b 	bl	3c0c <_sys_device_do_config_level>
	_sched_init();
    3d56:	f000 fb4f 	bl	43f8 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    3d5a:	4b26      	ldr	r3, [pc, #152]	; (3df4 <_Cstart+0xe4>)
	_kernel.ready_q.cache = _main_thread;
    3d5c:	6275      	str	r5, [r6, #36]	; 0x24
	_setup_new_thread(_main_thread, _main_stack,
    3d5e:	9305      	str	r3, [sp, #20]
    3d60:	2301      	movs	r3, #1
    3d62:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3d66:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3d6a:	9400      	str	r4, [sp, #0]
    3d6c:	4b22      	ldr	r3, [pc, #136]	; (3df8 <_Cstart+0xe8>)
    3d6e:	4923      	ldr	r1, [pc, #140]	; (3dfc <_Cstart+0xec>)
    3d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3d74:	4628      	mov	r0, r5
    3d76:	f000 fc87 	bl	4688 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d7a:	7b6b      	ldrb	r3, [r5, #13]
    3d7c:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    3d80:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d84:	736a      	strb	r2, [r5, #13]
    3d86:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    3d88:	d105      	bne.n	3d96 <_Cstart+0x86>
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
    3d8a:	6a2b      	ldr	r3, [r5, #32]
    3d8c:	3301      	adds	r3, #1
    3d8e:	d102      	bne.n	3d96 <_Cstart+0x86>
		_add_thread_to_ready_q(thread);
    3d90:	4628      	mov	r0, r5
    3d92:	f000 fa4f 	bl	4234 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    3d96:	4b1a      	ldr	r3, [pc, #104]	; (3e00 <_Cstart+0xf0>)
    3d98:	4e1a      	ldr	r6, [pc, #104]	; (3e04 <_Cstart+0xf4>)
    3d9a:	9305      	str	r3, [sp, #20]
    3d9c:	2201      	movs	r2, #1
    3d9e:	230f      	movs	r3, #15
    3da0:	e9cd 3203 	strd	r3, r2, [sp, #12]
    3da4:	2300      	movs	r3, #0
    3da6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3daa:	9300      	str	r3, [sp, #0]
    3dac:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3db0:	4b15      	ldr	r3, [pc, #84]	; (3e08 <_Cstart+0xf8>)
    3db2:	4916      	ldr	r1, [pc, #88]	; (3e0c <_Cstart+0xfc>)
    3db4:	4630      	mov	r0, r6
    3db6:	f000 fc67 	bl	4688 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3dba:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    3dbc:	60e6      	str	r6, [r4, #12]
    3dbe:	f023 0304 	bic.w	r3, r3, #4
    3dc2:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3dc4:	4b12      	ldr	r3, [pc, #72]	; (3e10 <_Cstart+0x100>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
    3dc6:	60a5      	str	r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
    3dc8:	e9c4 3306 	strd	r3, r3, [r4, #24]
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    3dcc:	4a0a      	ldr	r2, [pc, #40]	; (3df8 <_Cstart+0xe8>)
    3dce:	4b11      	ldr	r3, [pc, #68]	; (3e14 <_Cstart+0x104>)
    3dd0:	4c11      	ldr	r4, [pc, #68]	; (3e18 <_Cstart+0x108>)
    3dd2:	f383 8809 	msr	PSP, r3
    3dd6:	b663      	cpsie	if
    3dd8:	2100      	movs	r1, #0
    3dda:	f381 8811 	msr	BASEPRI, r1
    3dde:	4610      	mov	r0, r2
    3de0:	4720      	bx	r4
    3de2:	bf00      	nop
    3de4:	20001c80 	.word	0x20001c80
    3de8:	e000ed00 	.word	0xe000ed00
    3dec:	2000076c 	.word	0x2000076c
    3df0:	2000059c 	.word	0x2000059c
    3df4:	00005528 	.word	0x00005528
    3df8:	00003ce1 	.word	0x00003ce1
    3dfc:	20000f40 	.word	0x20000f40
    3e00:	0000552d 	.word	0x0000552d
    3e04:	20000530 	.word	0x20000530
    3e08:	00003c85 	.word	0x00003c85
    3e0c:	20001340 	.word	0x20001340
    3e10:	20000784 	.word	0x20000784
    3e14:	20001340 	.word	0x20001340
    3e18:	000006ed 	.word	0x000006ed

00003e1c <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
    3e1c:	4b0b      	ldr	r3, [pc, #44]	; (3e4c <init_mem_slab_module+0x30>)
    3e1e:	480c      	ldr	r0, [pc, #48]	; (3e50 <init_mem_slab_module+0x34>)
{
    3e20:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    3e22:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
    3e24:	4283      	cmp	r3, r0
    3e26:	d301      	bcc.n	3e2c <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
    3e28:	2000      	movs	r0, #0
    3e2a:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    3e2c:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
    3e2e:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    3e30:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
    3e32:	2100      	movs	r1, #0
    3e34:	42a9      	cmp	r1, r5
    3e36:	d101      	bne.n	3e3c <init_mem_slab_module+0x20>
	     slab++) {
    3e38:	331c      	adds	r3, #28
    3e3a:	e7f3      	b.n	3e24 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    3e3c:	695e      	ldr	r6, [r3, #20]
    3e3e:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    3e40:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    3e42:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
    3e44:	3101      	adds	r1, #1
		p += slab->block_size;
    3e46:	4432      	add	r2, r6
    3e48:	e7f4      	b.n	3e34 <init_mem_slab_module+0x18>
    3e4a:	bf00      	nop
    3e4c:	20001ddc 	.word	0x20001ddc
    3e50:	20001ddc 	.word	0x20001ddc

00003e54 <k_mem_slab_init>:
SYS_INIT(init_mem_slab_module, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, u32_t num_blocks)
{
    3e54:	b530      	push	{r4, r5, lr}
	slab->num_blocks = num_blocks;
	slab->block_size = block_size;
	slab->buffer = buffer;
	slab->num_used = 0;
    3e56:	2400      	movs	r4, #0
	slab->block_size = block_size;
    3e58:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    3e5c:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    3e60:	6101      	str	r1, [r0, #16]
	for (j = 0; j < slab->num_blocks; j++) {
    3e62:	42a3      	cmp	r3, r4
    3e64:	d102      	bne.n	3e6c <k_mem_slab_init+0x18>
    3e66:	e9c0 0000 	strd	r0, r0, [r0]
	create_free_list(slab);
	_waitq_init(&slab->wait_q);
	SYS_TRACING_OBJ_INIT(k_mem_slab, slab);

	_k_object_init(slab);
}
    3e6a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    3e6c:	6945      	ldr	r5, [r0, #20]
    3e6e:	600d      	str	r5, [r1, #0]
	for (j = 0; j < slab->num_blocks; j++) {
    3e70:	3401      	adds	r4, #1
		slab->free_list = p;
    3e72:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    3e74:	4411      	add	r1, r2
    3e76:	e7f4      	b.n	3e62 <k_mem_slab_init+0xe>

00003e78 <k_mem_slab_alloc>:

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    3e78:	b538      	push	{r3, r4, r5, lr}
    3e7a:	4603      	mov	r3, r0
    3e7c:	460c      	mov	r4, r1
    3e7e:	f04f 0020 	mov.w	r0, #32
    3e82:	f3ef 8511 	mrs	r5, BASEPRI
    3e86:	f380 8811 	msr	BASEPRI, r0
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
    3e8a:	6958      	ldr	r0, [r3, #20]
    3e8c:	b150      	cbz	r0, 3ea4 <k_mem_slab_alloc+0x2c>
		/* take a free block */
		*mem = slab->free_list;
    3e8e:	6020      	str	r0, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3e90:	695a      	ldr	r2, [r3, #20]
    3e92:	6812      	ldr	r2, [r2, #0]
    3e94:	615a      	str	r2, [r3, #20]
		slab->num_used++;
    3e96:	699a      	ldr	r2, [r3, #24]
    3e98:	3201      	adds	r2, #1
    3e9a:	619a      	str	r2, [r3, #24]
		result = 0;
    3e9c:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3e9e:	f385 8811 	msr	BASEPRI, r5
		return result;
	}

	irq_unlock(key);

	return result;
    3ea2:	e00d      	b.n	3ec0 <k_mem_slab_alloc+0x48>
	} else if (timeout == K_NO_WAIT) {
    3ea4:	b91a      	cbnz	r2, 3eae <k_mem_slab_alloc+0x36>
		*mem = NULL;
    3ea6:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
    3ea8:	f06f 000b 	mvn.w	r0, #11
    3eac:	e7f7      	b.n	3e9e <k_mem_slab_alloc+0x26>
		result = _pend_current_thread(key, &slab->wait_q, timeout);
    3eae:	4619      	mov	r1, r3
    3eb0:	4628      	mov	r0, r5
    3eb2:	f000 fa67 	bl	4384 <_pend_current_thread>
		if (result == 0) {
    3eb6:	b918      	cbnz	r0, 3ec0 <k_mem_slab_alloc+0x48>
			*mem = _current->base.swap_data;
    3eb8:	4b02      	ldr	r3, [pc, #8]	; (3ec4 <k_mem_slab_alloc+0x4c>)
    3eba:	689b      	ldr	r3, [r3, #8]
    3ebc:	695b      	ldr	r3, [r3, #20]
    3ebe:	6023      	str	r3, [r4, #0]
}
    3ec0:	bd38      	pop	{r3, r4, r5, pc}
    3ec2:	bf00      	nop
    3ec4:	2000076c 	.word	0x2000076c

00003ec8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3ec8:	b570      	push	{r4, r5, r6, lr}
    3eca:	4604      	mov	r4, r0
    3ecc:	460d      	mov	r5, r1
	__asm__ volatile(
    3ece:	f04f 0320 	mov.w	r3, #32
    3ed2:	f3ef 8611 	mrs	r6, BASEPRI
    3ed6:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);
    3eda:	f000 f940 	bl	415e <_unpend_first_thread>

	if (pending_thread != NULL) {
    3ede:	b180      	cbz	r0, 3f02 <k_mem_slab_free+0x3a>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
    3ee0:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
    3ee2:	6142      	str	r2, [r0, #20]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    3ee4:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3ee6:	2100      	movs	r1, #0
    3ee8:	06d2      	lsls	r2, r2, #27
    3eea:	6681      	str	r1, [r0, #104]	; 0x68
    3eec:	d104      	bne.n	3ef8 <k_mem_slab_free+0x30>
	if (_is_thread_ready(thread)) {
    3eee:	6a03      	ldr	r3, [r0, #32]
    3ef0:	3301      	adds	r3, #1
    3ef2:	d101      	bne.n	3ef8 <k_mem_slab_free+0x30>
		_add_thread_to_ready_q(thread);
    3ef4:	f000 f99e 	bl	4234 <_add_thread_to_ready_q>
		_ready_thread(pending_thread);
		_reschedule(key);
    3ef8:	4630      	mov	r0, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		irq_unlock(key);
	}
}
    3efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
    3efe:	f000 b947 	b.w	4190 <_reschedule>
		**(char ***)mem = slab->free_list;
    3f02:	682b      	ldr	r3, [r5, #0]
    3f04:	6962      	ldr	r2, [r4, #20]
    3f06:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    3f08:	682b      	ldr	r3, [r5, #0]
    3f0a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    3f0c:	69a3      	ldr	r3, [r4, #24]
    3f0e:	3b01      	subs	r3, #1
    3f10:	61a3      	str	r3, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3f12:	f386 8811 	msr	BASEPRI, r6
}
    3f16:	bd70      	pop	{r4, r5, r6, pc}

00003f18 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    3f18:	b570      	push	{r4, r5, r6, lr}
    3f1a:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3f1c:	492e      	ldr	r1, [pc, #184]	; (3fd8 <_impl_k_mutex_lock+0xc0>)
    3f1e:	688a      	ldr	r2, [r1, #8]
    3f20:	7bd3      	ldrb	r3, [r2, #15]
    3f22:	3b01      	subs	r3, #1
    3f24:	4604      	mov	r4, r0
    3f26:	73d3      	strb	r3, [r2, #15]
	u32_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3f28:	68c3      	ldr	r3, [r0, #12]
    3f2a:	4608      	mov	r0, r1
    3f2c:	b14b      	cbz	r3, 3f42 <_impl_k_mutex_lock+0x2a>
    3f2e:	68a2      	ldr	r2, [r4, #8]
    3f30:	6889      	ldr	r1, [r1, #8]
    3f32:	428a      	cmp	r2, r1
    3f34:	d011      	beq.n	3f5a <_impl_k_mutex_lock+0x42>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    3f36:	b995      	cbnz	r5, 3f5e <_impl_k_mutex_lock+0x46>
		k_sched_unlock();
    3f38:	f000 f942 	bl	41c0 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    3f3c:	f06f 000f 	mvn.w	r0, #15
    3f40:	e00a      	b.n	3f58 <_impl_k_mutex_lock+0x40>
					_current->base.prio :
    3f42:	688a      	ldr	r2, [r1, #8]
    3f44:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3f48:	6122      	str	r2, [r4, #16]
		mutex->lock_count++;
    3f4a:	3301      	adds	r3, #1
    3f4c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3f4e:	6883      	ldr	r3, [r0, #8]
    3f50:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    3f52:	f000 f935 	bl	41c0 <k_sched_unlock>
		return 0;
    3f56:	2000      	movs	r0, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    3f58:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    3f5a:	6922      	ldr	r2, [r4, #16]
    3f5c:	e7f4      	b.n	3f48 <_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3f5e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3f62:	f992 300e 	ldrsb.w	r3, [r2, #14]
    3f66:	4299      	cmp	r1, r3
    3f68:	bfa8      	it	ge
    3f6a:	4619      	movge	r1, r3
    3f6c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
    3f70:	f04f 0320 	mov.w	r3, #32
    3f74:	f3ef 8611 	mrs	r6, BASEPRI
    3f78:	f383 8811 	msr	BASEPRI, r3
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3f7c:	68a0      	ldr	r0, [r4, #8]
    3f7e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3f82:	4299      	cmp	r1, r3
    3f84:	da01      	bge.n	3f8a <_impl_k_mutex_lock+0x72>
		_thread_priority_set(mutex->owner, new_prio);
    3f86:	f000 fa0b 	bl	43a0 <_thread_priority_set>
	s32_t got_mutex = _pend_current_thread(key, &mutex->wait_q, timeout);
    3f8a:	462a      	mov	r2, r5
    3f8c:	4621      	mov	r1, r4
    3f8e:	4630      	mov	r0, r6
    3f90:	f000 f9f8 	bl	4384 <_pend_current_thread>
	if (got_mutex == 0) {
    3f94:	2800      	cmp	r0, #0
    3f96:	d0dc      	beq.n	3f52 <_impl_k_mutex_lock+0x3a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3f98:	6823      	ldr	r3, [r4, #0]
    3f9a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f9c:	429c      	cmp	r4, r3
    3f9e:	d007      	beq.n	3fb0 <_impl_k_mutex_lock+0x98>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    3fa0:	b133      	cbz	r3, 3fb0 <_impl_k_mutex_lock+0x98>
    3fa2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3fa6:	4299      	cmp	r1, r3
    3fa8:	bfa8      	it	ge
    3faa:	4619      	movge	r1, r3
    3fac:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    3fb0:	f04f 0320 	mov.w	r3, #32
    3fb4:	f3ef 8511 	mrs	r5, BASEPRI
    3fb8:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
    3fbc:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    3fbe:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3fc2:	4299      	cmp	r1, r3
    3fc4:	d001      	beq.n	3fca <_impl_k_mutex_lock+0xb2>
		_thread_priority_set(mutex->owner, new_prio);
    3fc6:	f000 f9eb 	bl	43a0 <_thread_priority_set>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3fca:	f385 8811 	msr	BASEPRI, r5
	k_sched_unlock();
    3fce:	f000 f8f7 	bl	41c0 <k_sched_unlock>
	return -EAGAIN;
    3fd2:	f06f 000a 	mvn.w	r0, #10
    3fd6:	e7bf      	b.n	3f58 <_impl_k_mutex_lock+0x40>
    3fd8:	2000076c 	.word	0x2000076c

00003fdc <_impl_k_mutex_unlock>:
    3fdc:	4b1b      	ldr	r3, [pc, #108]	; (404c <_impl_k_mutex_unlock+0x70>)
    3fde:	689a      	ldr	r2, [r3, #8]
    3fe0:	7bd3      	ldrb	r3, [r2, #15]
    3fe2:	3b01      	subs	r3, #1
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3fe4:	b570      	push	{r4, r5, r6, lr}
    3fe6:	4604      	mov	r4, r0
    3fe8:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    3fea:	68c3      	ldr	r3, [r0, #12]
    3fec:	3b01      	subs	r3, #1
    3fee:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0U) {
    3ff0:	bb3b      	cbnz	r3, 4042 <_impl_k_mutex_unlock+0x66>
	__asm__ volatile(
    3ff2:	f04f 0320 	mov.w	r3, #32
    3ff6:	f3ef 8611 	mrs	r6, BASEPRI
    3ffa:	f383 8811 	msr	BASEPRI, r3
		goto k_mutex_unlock_return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3ffe:	6901      	ldr	r1, [r0, #16]
    4000:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    4002:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4006:	4299      	cmp	r1, r3
    4008:	d001      	beq.n	400e <_impl_k_mutex_unlock+0x32>
		_thread_priority_set(mutex->owner, new_prio);
    400a:	f000 f9c9 	bl	43a0 <_thread_priority_set>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
    400e:	4620      	mov	r0, r4
    4010:	f000 f8a5 	bl	415e <_unpend_first_thread>
    4014:	4605      	mov	r5, r0

	mutex->owner = new_owner;
    4016:	60a0      	str	r0, [r4, #8]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
    4018:	b188      	cbz	r0, 403e <_impl_k_mutex_unlock+0x62>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    401a:	7b43      	ldrb	r3, [r0, #13]
    401c:	06db      	lsls	r3, r3, #27
    401e:	d104      	bne.n	402a <_impl_k_mutex_unlock+0x4e>
	if (_is_thread_ready(thread)) {
    4020:	6a03      	ldr	r3, [r0, #32]
    4022:	3301      	adds	r3, #1
    4024:	d101      	bne.n	402a <_impl_k_mutex_unlock+0x4e>
		_add_thread_to_ready_q(thread);
    4026:	f000 f905 	bl	4234 <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    402a:	f386 8811 	msr	BASEPRI, r6
    402e:	2300      	movs	r3, #0
    4030:	66ab      	str	r3, [r5, #104]	; 0x68
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->lock_count++;
    4032:	68e3      	ldr	r3, [r4, #12]
    4034:	3301      	adds	r3, #1
    4036:	60e3      	str	r3, [r4, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    4038:	f995 300e 	ldrsb.w	r3, [r5, #14]
    403c:	6123      	str	r3, [r4, #16]
    403e:	f386 8811 	msr	BASEPRI, r6

	irq_unlock(key);

k_mutex_unlock_return:
	k_sched_unlock();
}
    4042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    4046:	f000 b8bb 	b.w	41c0 <k_sched_unlock>
    404a:	bf00      	nop
    404c:	2000076c 	.word	0x2000076c

00004050 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4050:	e9d0 2300 	ldrd	r2, r3, [r0]
    4054:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    4056:	6802      	ldr	r2, [r0, #0]
    4058:	6053      	str	r3, [r2, #4]
}
    405a:	4770      	bx	lr

0000405c <reset_time_slice>:

static int slice_time;
static int slice_max_prio;

static void reset_time_slice(void)
{
    405c:	b510      	push	{r4, lr}
	int to = _get_next_timeout_expiry();
    405e:	f000 fbdd 	bl	481c <_get_next_timeout_expiry>
    4062:	4604      	mov	r4, r0

	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    4064:	f7fd fff7 	bl	2056 <z_clock_elapsed>
    4068:	4b07      	ldr	r3, [pc, #28]	; (4088 <reset_time_slice+0x2c>)
    406a:	4a08      	ldr	r2, [pc, #32]	; (408c <reset_time_slice+0x30>)
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	4418      	add	r0, r3
    4070:	6110      	str	r0, [r2, #16]

	if (to == K_FOREVER || slice_time < to) {
    4072:	1c62      	adds	r2, r4, #1
    4074:	d001      	beq.n	407a <reset_time_slice+0x1e>
    4076:	42a3      	cmp	r3, r4
    4078:	da05      	bge.n	4086 <reset_time_slice+0x2a>
		z_clock_set_timeout(slice_time, false);
    407a:	2100      	movs	r1, #0
    407c:	4618      	mov	r0, r3
	}
}
    407e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_clock_set_timeout(slice_time, false);
    4082:	f7fd bfe7 	b.w	2054 <z_clock_set_timeout>
}
    4086:	bd10      	pop	{r4, pc}
    4088:	2000060c 	.word	0x2000060c
    408c:	2000076c 	.word	0x2000076c

00004090 <k_spin_lock.isra.10>:
	__asm__ volatile(
    4090:	f04f 0320 	mov.w	r3, #32
    4094:	f3ef 8011 	mrs	r0, BASEPRI
    4098:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    409c:	4770      	bx	lr
	...

000040a0 <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
    40a0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    40a2:	4c10      	ldr	r4, [pc, #64]	; (40e4 <update_cache+0x44>)
    40a4:	4623      	mov	r3, r4
    40a6:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40aa:	429d      	cmp	r5, r3
    40ac:	d000      	beq.n	40b0 <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
    40ae:	b905      	cbnz	r5, 40b2 <update_cache+0x12>
    40b0:	68e5      	ldr	r5, [r4, #12]
    40b2:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok) {
    40b4:	b978      	cbnz	r0, 40d6 <update_cache+0x36>
	if (!_current || !_is_thread_ready(_current)) {
    40b6:	b173      	cbz	r3, 40d6 <update_cache+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    40b8:	7b5a      	ldrb	r2, [r3, #13]
    40ba:	06d2      	lsls	r2, r2, #27
    40bc:	d10b      	bne.n	40d6 <update_cache+0x36>
    40be:	6a1a      	ldr	r2, [r3, #32]
    40c0:	3201      	adds	r2, #1
    40c2:	d108      	bne.n	40d6 <update_cache+0x36>
	if (_is_preempt(_current) || is_metairq(th)) {
    40c4:	89da      	ldrh	r2, [r3, #14]
    40c6:	2a7f      	cmp	r2, #127	; 0x7f
    40c8:	d905      	bls.n	40d6 <update_cache+0x36>
	return thread == _idle_thread;
    40ca:	4a07      	ldr	r2, [pc, #28]	; (40e8 <update_cache+0x48>)
	if (_is_idle(_current)) {
    40cc:	6812      	ldr	r2, [r2, #0]
    40ce:	4293      	cmp	r3, r2
    40d0:	d001      	beq.n	40d6 <update_cache+0x36>
		if (th != _current) {
			reset_time_slice();
		}
		_kernel.ready_q.cache = th;
	} else {
		_kernel.ready_q.cache = _current;
    40d2:	6263      	str	r3, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    40d4:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    40d6:	42ab      	cmp	r3, r5
    40d8:	d001      	beq.n	40de <update_cache+0x3e>
			reset_time_slice();
    40da:	f7ff ffbf 	bl	405c <reset_time_slice>
		_kernel.ready_q.cache = th;
    40de:	6265      	str	r5, [r4, #36]	; 0x24
}
    40e0:	e7f8      	b.n	40d4 <update_cache+0x34>
    40e2:	bf00      	nop
    40e4:	2000076c 	.word	0x2000076c
    40e8:	00005534 	.word	0x00005534

000040ec <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    40ec:	b510      	push	{r4, lr}
    40ee:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    40f0:	f7ff ffce 	bl	4090 <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
    40f4:	7b4b      	ldrb	r3, [r1, #13]
    40f6:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
    40f8:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    40fa:	d50d      	bpl.n	4118 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    40fc:	4608      	mov	r0, r1
    40fe:	f7ff ffa7 	bl	4050 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    4102:	7b4b      	ldrb	r3, [r1, #13]
    4104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4108:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
    410a:	4b05      	ldr	r3, [pc, #20]	; (4120 <_remove_thread_from_ready_q+0x34>)
    410c:	6898      	ldr	r0, [r3, #8]
    410e:	1a43      	subs	r3, r0, r1
    4110:	4258      	negs	r0, r3
    4112:	4158      	adcs	r0, r3
    4114:	f7ff ffc4 	bl	40a0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4118:	f384 8811 	msr	BASEPRI, r4
}
    411c:	bd10      	pop	{r4, pc}
    411e:	bf00      	nop
    4120:	2000076c 	.word	0x2000076c

00004124 <_find_first_thread_to_unpend>:
{
    4124:	b508      	push	{r3, lr}
    4126:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    4128:	f7ff ffb2 	bl	4090 <k_spin_lock.isra.10>
	return list->head == list;
    412c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    412e:	429a      	cmp	r2, r3
    4130:	bf08      	it	eq
    4132:	2300      	moveq	r3, #0
    4134:	f380 8811 	msr	BASEPRI, r0
}
    4138:	4618      	mov	r0, r3
    413a:	bd08      	pop	{r3, pc}

0000413c <_unpend_thread_no_timeout>:
{
    413c:	b510      	push	{r4, lr}
    413e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    4140:	f7ff ffa6 	bl	4090 <k_spin_lock.isra.10>
    4144:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    4146:	4608      	mov	r0, r1
    4148:	f7ff ff82 	bl	4050 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    414c:	7b4b      	ldrb	r3, [r1, #13]
    414e:	f023 0302 	bic.w	r3, r3, #2
    4152:	734b      	strb	r3, [r1, #13]
    4154:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
    4158:	2300      	movs	r3, #0
    415a:	608b      	str	r3, [r1, #8]
}
    415c:	bd10      	pop	{r4, pc}

0000415e <_unpend_first_thread>:
{
    415e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    4160:	2100      	movs	r1, #0
    4162:	f7ff ffdf 	bl	4124 <_find_first_thread_to_unpend>

	if (thread != NULL) {
    4166:	4604      	mov	r4, r0
    4168:	b128      	cbz	r0, 4176 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
    416a:	f7ff ffe7 	bl	413c <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    416e:	f104 0018 	add.w	r0, r4, #24
    4172:	f000 fb43 	bl	47fc <_abort_timeout>
}
    4176:	4620      	mov	r0, r4
    4178:	bd10      	pop	{r4, pc}

0000417a <_unpend_thread>:
{
    417a:	b510      	push	{r4, lr}
    417c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
    417e:	f7ff ffdd 	bl	413c <_unpend_thread_no_timeout>
    4182:	f104 0018 	add.w	r0, r4, #24
}
    4186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    418a:	f000 bb37 	b.w	47fc <_abort_timeout>
	...

00004190 <_reschedule>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4190:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    4194:	2b0d      	cmp	r3, #13
    4196:	d80b      	bhi.n	41b0 <_reschedule+0x20>
    4198:	b11b      	cbz	r3, 41a2 <_reschedule+0x12>
    419a:	4b07      	ldr	r3, [pc, #28]	; (41b8 <_reschedule+0x28>)
    419c:	685b      	ldr	r3, [r3, #4]
    419e:	051b      	lsls	r3, r3, #20
    41a0:	d506      	bpl.n	41b0 <_reschedule+0x20>
	if (_get_next_ready_thread() != _current) {
    41a2:	4b06      	ldr	r3, [pc, #24]	; (41bc <_reschedule+0x2c>)
    41a4:	689a      	ldr	r2, [r3, #8]
    41a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41a8:	429a      	cmp	r2, r3
    41aa:	d001      	beq.n	41b0 <_reschedule+0x20>
    41ac:	f7fd bfd6 	b.w	215c <__swap>
    41b0:	f380 8811 	msr	BASEPRI, r0
}
    41b4:	4770      	bx	lr
    41b6:	bf00      	nop
    41b8:	e000ed00 	.word	0xe000ed00
    41bc:	2000076c 	.word	0x2000076c

000041c0 <k_sched_unlock>:
{
    41c0:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
    41c2:	f7ff ff65 	bl	4090 <k_spin_lock.isra.10>
		++_current->base.sched_locked;
    41c6:	4b0a      	ldr	r3, [pc, #40]	; (41f0 <k_sched_unlock+0x30>)
    41c8:	689a      	ldr	r2, [r3, #8]
    41ca:	7bd3      	ldrb	r3, [r2, #15]
    41cc:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    41ce:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    41d0:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    41d2:	2001      	movs	r0, #1
    41d4:	f7ff ff64 	bl	40a0 <update_cache>
    41d8:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    41dc:	f04f 0320 	mov.w	r3, #32
    41e0:	f3ef 8011 	mrs	r0, BASEPRI
    41e4:	f383 8811 	msr	BASEPRI, r3
}
    41e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    41ec:	f7ff bfd0 	b.w	4190 <_reschedule>
    41f0:	2000076c 	.word	0x2000076c

000041f4 <_priq_dumb_add>:
	return list->head == list;
    41f4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41f6:	4298      	cmp	r0, r3
{
    41f8:	b510      	push	{r4, lr}
    41fa:	d013      	beq.n	4224 <_priq_dumb_add+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    41fc:	b193      	cbz	r3, 4224 <_priq_dumb_add+0x30>
	if (t1->base.prio < t2->base.prio) {
    41fe:	f991 200e 	ldrsb.w	r2, [r1, #14]
    4202:	f993 400e 	ldrsb.w	r4, [r3, #14]
    4206:	4294      	cmp	r4, r2
    4208:	dd06      	ble.n	4218 <_priq_dumb_add+0x24>
		node->prev = insert_point->prev;
    420a:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    420c:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    4210:	685a      	ldr	r2, [r3, #4]
    4212:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    4214:	6059      	str	r1, [r3, #4]
}
    4216:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
    4218:	6844      	ldr	r4, [r0, #4]
    421a:	42a3      	cmp	r3, r4
    421c:	d002      	beq.n	4224 <_priq_dumb_add+0x30>
    421e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4220:	2b00      	cmp	r3, #0
    4222:	d1ee      	bne.n	4202 <_priq_dumb_add+0xe>
	node->prev = list->tail;
    4224:	6843      	ldr	r3, [r0, #4]
    4226:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    4228:	6843      	ldr	r3, [r0, #4]
	node->next = list;
    422a:	6008      	str	r0, [r1, #0]
	list->tail->next = node;
    422c:	6019      	str	r1, [r3, #0]
	list->tail = node;
    422e:	6041      	str	r1, [r0, #4]
    4230:	e7f1      	b.n	4216 <_priq_dumb_add+0x22>
	...

00004234 <_add_thread_to_ready_q>:
{
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    4238:	f7ff ff2a 	bl	4090 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    423c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    423e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    4240:	4806      	ldr	r0, [pc, #24]	; (425c <_add_thread_to_ready_q+0x28>)
    4242:	f7ff ffd7 	bl	41f4 <_priq_dumb_add>
	thread->base.thread_state |= states;
    4246:	7b63      	ldrb	r3, [r4, #13]
    4248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    424c:	7363      	strb	r3, [r4, #13]
		update_cache(0);
    424e:	2000      	movs	r0, #0
    4250:	f7ff ff26 	bl	40a0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4254:	f385 8811 	msr	BASEPRI, r5
}
    4258:	bd38      	pop	{r3, r4, r5, pc}
    425a:	bf00      	nop
    425c:	20000794 	.word	0x20000794

00004260 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4260:	7b42      	ldrb	r2, [r0, #13]
    4262:	06d2      	lsls	r2, r2, #27
    4264:	d104      	bne.n	4270 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    4266:	6a03      	ldr	r3, [r0, #32]
    4268:	3301      	adds	r3, #1
    426a:	d101      	bne.n	4270 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    426c:	f7ff bfe2 	b.w	4234 <_add_thread_to_ready_q>
}
    4270:	4770      	bx	lr

00004272 <z_thread_timeout>:
{
    4272:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
    4274:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    4278:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    427a:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    427e:	b113      	cbz	r3, 4286 <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
    4280:	4628      	mov	r0, r5
    4282:	f7ff ff5b 	bl	413c <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4286:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    428a:	f023 0304 	bic.w	r3, r3, #4
    428e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
    4292:	4628      	mov	r0, r5
}
    4294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
    4298:	f7ff bfe2 	b.w	4260 <_ready_thread>

0000429c <_move_thread_to_end_of_prio_q>:
{
    429c:	b570      	push	{r4, r5, r6, lr}
    429e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    42a0:	f7ff fef6 	bl	4090 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    42a4:	4d0b      	ldr	r5, [pc, #44]	; (42d4 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
    42a6:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    42a8:	4620      	mov	r0, r4
    42aa:	f7ff fed1 	bl	4050 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    42ae:	4621      	mov	r1, r4
    42b0:	4628      	mov	r0, r5
    42b2:	f7ff ff9f 	bl	41f4 <_priq_dumb_add>
	thread->base.thread_state |= states;
    42b6:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    42b8:	f855 0c20 	ldr.w	r0, [r5, #-32]
    42bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    42c0:	7363      	strb	r3, [r4, #13]
    42c2:	1b03      	subs	r3, r0, r4
    42c4:	4258      	negs	r0, r3
    42c6:	4158      	adcs	r0, r3
    42c8:	f7ff feea 	bl	40a0 <update_cache>
    42cc:	f386 8811 	msr	BASEPRI, r6
}
    42d0:	bd70      	pop	{r4, r5, r6, pc}
    42d2:	bf00      	nop
    42d4:	20000794 	.word	0x20000794

000042d8 <z_time_slice>:
	if (slice_time && sliceable(_current)) {
    42d8:	4b11      	ldr	r3, [pc, #68]	; (4320 <z_time_slice+0x48>)
    42da:	681b      	ldr	r3, [r3, #0]
{
    42dc:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
    42de:	b1eb      	cbz	r3, 431c <z_time_slice+0x44>
    42e0:	4910      	ldr	r1, [pc, #64]	; (4324 <z_time_slice+0x4c>)
    42e2:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
    42e4:	89da      	ldrh	r2, [r3, #14]
    42e6:	2a7f      	cmp	r2, #127	; 0x7f
    42e8:	d818      	bhi.n	431c <z_time_slice+0x44>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
    42ea:	4a0f      	ldr	r2, [pc, #60]	; (4328 <z_time_slice+0x50>)
    42ec:	f993 400e 	ldrsb.w	r4, [r3, #14]
    42f0:	6812      	ldr	r2, [r2, #0]
    42f2:	4294      	cmp	r4, r2
    42f4:	db12      	blt.n	431c <z_time_slice+0x44>
	return thread == _idle_thread;
    42f6:	4a0d      	ldr	r2, [pc, #52]	; (432c <z_time_slice+0x54>)
		&& !_is_idle(t)
    42f8:	6812      	ldr	r2, [r2, #0]
    42fa:	4293      	cmp	r3, r2
    42fc:	d00e      	beq.n	431c <z_time_slice+0x44>
		&& !_is_thread_timeout_active(t);
    42fe:	6a1a      	ldr	r2, [r3, #32]
    4300:	3201      	adds	r2, #1
    4302:	d10b      	bne.n	431c <z_time_slice+0x44>
		if (ticks >= _current_cpu->slice_ticks) {
    4304:	690a      	ldr	r2, [r1, #16]
    4306:	4282      	cmp	r2, r0
    4308:	dc06      	bgt.n	4318 <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
    430a:	4618      	mov	r0, r3
    430c:	f7ff ffc6 	bl	429c <_move_thread_to_end_of_prio_q>
}
    4310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    4314:	f7ff bea2 	b.w	405c <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
    4318:	1a12      	subs	r2, r2, r0
    431a:	610a      	str	r2, [r1, #16]
}
    431c:	bd10      	pop	{r4, pc}
    431e:	bf00      	nop
    4320:	2000060c 	.word	0x2000060c
    4324:	2000076c 	.word	0x2000076c
    4328:	20000608 	.word	0x20000608
    432c:	00005534 	.word	0x00005534

00004330 <pend>:
{
    4330:	b570      	push	{r4, r5, r6, lr}
    4332:	4604      	mov	r4, r0
    4334:	460d      	mov	r5, r1
    4336:	4616      	mov	r6, r2
	_remove_thread_from_ready_q(thread);
    4338:	f7ff fed8 	bl	40ec <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    433c:	7b63      	ldrb	r3, [r4, #13]
    433e:	f043 0302 	orr.w	r3, r3, #2
    4342:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4344:	b125      	cbz	r5, 4350 <pend+0x20>
		thread->base.pended_on = wait_q;
    4346:	60a5      	str	r5, [r4, #8]
		_priq_wait_add(&wait_q->waitq, thread);
    4348:	4621      	mov	r1, r4
    434a:	4628      	mov	r0, r5
    434c:	f7ff ff52 	bl	41f4 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
    4350:	1c73      	adds	r3, r6, #1
    4352:	d012      	beq.n	437a <pend+0x4a>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    4354:	4809      	ldr	r0, [pc, #36]	; (437c <pend+0x4c>)
    4356:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    435a:	2100      	movs	r1, #0
    435c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4360:	fbc5 0106 	smlal	r0, r1, r5, r6
    4364:	2300      	movs	r3, #0
    4366:	f7fb ff55 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    436a:	4905      	ldr	r1, [pc, #20]	; (4380 <pend+0x50>)
    436c:	1c42      	adds	r2, r0, #1
    436e:	f104 0018 	add.w	r0, r4, #24
}
    4372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4376:	f000 ba7f 	b.w	4878 <_add_timeout>
    437a:	bd70      	pop	{r4, r5, r6, pc}
    437c:	0004ffff 	.word	0x0004ffff
    4380:	00004273 	.word	0x00004273

00004384 <_pend_current_thread>:
{
    4384:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
    4386:	4b05      	ldr	r3, [pc, #20]	; (439c <_pend_current_thread+0x18>)
{
    4388:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
    438a:	6898      	ldr	r0, [r3, #8]
    438c:	f7ff ffd0 	bl	4330 <pend>
    4390:	4620      	mov	r0, r4
}
    4392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4396:	f7fd bee1 	b.w	215c <__swap>
    439a:	bf00      	nop
    439c:	2000076c 	.word	0x2000076c

000043a0 <_thread_priority_set>:
{
    43a0:	b538      	push	{r3, r4, r5, lr}
    43a2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    43a4:	f7ff fe74 	bl	4090 <k_spin_lock.isra.10>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    43a8:	7b63      	ldrb	r3, [r4, #13]
    43aa:	06db      	lsls	r3, r3, #27
    43ac:	4605      	mov	r5, r0
    43ae:	b249      	sxtb	r1, r1
    43b0:	d11b      	bne.n	43ea <_thread_priority_set+0x4a>
		if (need_sched) {
    43b2:	6a23      	ldr	r3, [r4, #32]
    43b4:	3301      	adds	r3, #1
    43b6:	d118      	bne.n	43ea <_thread_priority_set+0x4a>
	sys_dlist_remove(&thread->base.qnode_dlist);
    43b8:	4620      	mov	r0, r4
    43ba:	f7ff fe49 	bl	4050 <sys_dlist_remove>
			_priq_run_add(&_kernel.ready_q.runq, thread);
    43be:	480d      	ldr	r0, [pc, #52]	; (43f4 <_thread_priority_set+0x54>)
			thread->base.prio = prio;
    43c0:	73a1      	strb	r1, [r4, #14]
			_priq_run_add(&_kernel.ready_q.runq, thread);
    43c2:	4621      	mov	r1, r4
    43c4:	f7ff ff16 	bl	41f4 <_priq_dumb_add>
			update_cache(1);
    43c8:	2001      	movs	r0, #1
    43ca:	f7ff fe69 	bl	40a0 <update_cache>
    43ce:	2301      	movs	r3, #1
    43d0:	f385 8811 	msr	BASEPRI, r5
	if (need_sched) {
    43d4:	b163      	cbz	r3, 43f0 <_thread_priority_set+0x50>
	__asm__ volatile(
    43d6:	f04f 0320 	mov.w	r3, #32
    43da:	f3ef 8011 	mrs	r0, BASEPRI
    43de:	f383 8811 	msr	BASEPRI, r3
}
    43e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(irq_lock());
    43e6:	f7ff bed3 	b.w	4190 <_reschedule>
			thread->base.prio = prio;
    43ea:	73a1      	strb	r1, [r4, #14]
    43ec:	2300      	movs	r3, #0
    43ee:	e7ef      	b.n	43d0 <_thread_priority_set+0x30>
}
    43f0:	bd38      	pop	{r3, r4, r5, pc}
    43f2:	bf00      	nop
    43f4:	20000794 	.word	0x20000794

000043f8 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    43f8:	4b05      	ldr	r3, [pc, #20]	; (4410 <_sched_init+0x18>)
    43fa:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    43fe:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
	slice_time = _ms_to_ticks(duration_in_ms);
    4402:	4a04      	ldr	r2, [pc, #16]	; (4414 <_sched_init+0x1c>)
    4404:	2300      	movs	r3, #0
    4406:	6013      	str	r3, [r2, #0]
	slice_max_prio = prio;
    4408:	4a03      	ldr	r2, [pc, #12]	; (4418 <_sched_init+0x20>)
    440a:	6013      	str	r3, [r2, #0]
	reset_time_slice();
    440c:	f7ff be26 	b.w	405c <reset_time_slice>
    4410:	2000076c 	.word	0x2000076c
    4414:	2000060c 	.word	0x2000060c
    4418:	20000608 	.word	0x20000608

0000441c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    441c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    441e:	4c12      	ldr	r4, [pc, #72]	; (4468 <_impl_k_yield+0x4c>)
    4420:	4b12      	ldr	r3, [pc, #72]	; (446c <_impl_k_yield+0x50>)
    4422:	68a2      	ldr	r2, [r4, #8]
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	429a      	cmp	r2, r3
    4428:	d00f      	beq.n	444a <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
    442a:	f7ff fe31 	bl	4090 <k_spin_lock.isra.10>
    442e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    4430:	68a0      	ldr	r0, [r4, #8]
    4432:	f7ff fe0d 	bl	4050 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
    4436:	68a1      	ldr	r1, [r4, #8]
    4438:	f104 0028 	add.w	r0, r4, #40	; 0x28
    443c:	f7ff feda 	bl	41f4 <_priq_dumb_add>
			update_cache(1);
    4440:	2001      	movs	r0, #1
    4442:	f7ff fe2d 	bl	40a0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4446:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    444a:	68a2      	ldr	r2, [r4, #8]
    444c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    444e:	429a      	cmp	r2, r3
    4450:	d009      	beq.n	4466 <_impl_k_yield+0x4a>
	__asm__ volatile(
    4452:	f04f 0320 	mov.w	r3, #32
    4456:	f3ef 8011 	mrs	r0, BASEPRI
    445a:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
    445e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4462:	f7fd be7b 	b.w	215c <__swap>
    4466:	bd38      	pop	{r3, r4, r5, pc}
    4468:	2000076c 	.word	0x2000076c
    446c:	00005534 	.word	0x00005534

00004470 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
    4470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    4472:	4604      	mov	r4, r0
    4474:	b918      	cbnz	r0, 447e <_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    4476:	f7ff ffd1 	bl	441c <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
    447a:	4620      	mov	r0, r4
    447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    447e:	4819      	ldr	r0, [pc, #100]	; (44e4 <_impl_k_sleep+0x74>)
    4480:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    4484:	2100      	movs	r1, #0
    4486:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    448a:	2300      	movs	r3, #0
    448c:	fbc5 0104 	smlal	r0, r1, r5, r4
    4490:	f7fb fec0 	bl	214 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    4494:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    4496:	f000 fa89 	bl	49ac <z_tick_get_32>
    449a:	182c      	adds	r4, r5, r0
    449c:	f04f 0320 	mov.w	r3, #32
    44a0:	f3ef 8711 	mrs	r7, BASEPRI
    44a4:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    44a8:	4e0f      	ldr	r6, [pc, #60]	; (44e8 <_impl_k_sleep+0x78>)
    44aa:	68b0      	ldr	r0, [r6, #8]
    44ac:	f7ff fe1e 	bl	40ec <_remove_thread_from_ready_q>
    44b0:	68b0      	ldr	r0, [r6, #8]
    44b2:	490e      	ldr	r1, [pc, #56]	; (44ec <_impl_k_sleep+0x7c>)
    44b4:	462a      	mov	r2, r5
    44b6:	3018      	adds	r0, #24
    44b8:	f000 f9de 	bl	4878 <_add_timeout>
    44bc:	4638      	mov	r0, r7
    44be:	f7fd fe4d 	bl	215c <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
    44c2:	f000 fa73 	bl	49ac <z_tick_get_32>
    44c6:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    44c8:	2800      	cmp	r0, #0
    44ca:	dd09      	ble.n	44e0 <_impl_k_sleep+0x70>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    44cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    44d0:	2264      	movs	r2, #100	; 0x64
    44d2:	2300      	movs	r3, #0
    44d4:	fb80 0101 	smull	r0, r1, r0, r1
    44d8:	f7fb feec 	bl	2b4 <__aeabi_uldivmod>
    44dc:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
    44de:	e7cc      	b.n	447a <_impl_k_sleep+0xa>
	return 0;
    44e0:	2400      	movs	r4, #0
    44e2:	e7ca      	b.n	447a <_impl_k_sleep+0xa>
    44e4:	0004ffff 	.word	0x0004ffff
    44e8:	2000076c 	.word	0x2000076c
    44ec:	00004273 	.word	0x00004273

000044f0 <_impl_k_wakeup>:
	return _impl_k_sleep(duration);
}
#endif

void _impl_k_wakeup(k_tid_t thread)
{
    44f0:	b538      	push	{r3, r4, r5, lr}
    44f2:	4605      	mov	r5, r0
    44f4:	f04f 0320 	mov.w	r3, #32
    44f8:	f3ef 8411 	mrs	r4, BASEPRI
    44fc:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();

	/* verify first if thread is not waiting on an object */
	if (_is_thread_pending(thread)) {
    4500:	7b43      	ldrb	r3, [r0, #13]
    4502:	079a      	lsls	r2, r3, #30
    4504:	d502      	bpl.n	450c <_impl_k_wakeup+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4506:	f384 8811 	msr	BASEPRI, r4
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
	}
}
    450a:	bd38      	pop	{r3, r4, r5, pc}
	return _abort_timeout(&thread->base.timeout);
    450c:	3018      	adds	r0, #24
    450e:	f000 f975 	bl	47fc <_abort_timeout>
	if (_abort_thread_timeout(thread) == _INACTIVE) {
    4512:	3001      	adds	r0, #1
    4514:	d0f7      	beq.n	4506 <_impl_k_wakeup+0x16>
	_ready_thread(thread);
    4516:	4628      	mov	r0, r5
    4518:	f7ff fea2 	bl	4260 <_ready_thread>
    451c:	f3ef 8305 	mrs	r3, IPSR
    4520:	2b0d      	cmp	r3, #13
    4522:	d8f0      	bhi.n	4506 <_impl_k_wakeup+0x16>
    4524:	b11b      	cbz	r3, 452e <_impl_k_wakeup+0x3e>
    4526:	4b04      	ldr	r3, [pc, #16]	; (4538 <_impl_k_wakeup+0x48>)
    4528:	685b      	ldr	r3, [r3, #4]
    452a:	051b      	lsls	r3, r3, #20
    452c:	d5eb      	bpl.n	4506 <_impl_k_wakeup+0x16>
		_reschedule(key);
    452e:	4620      	mov	r0, r4
}
    4530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
    4534:	f7ff be2c 	b.w	4190 <_reschedule>
    4538:	e000ed00 	.word	0xe000ed00

0000453c <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    453c:	4b01      	ldr	r3, [pc, #4]	; (4544 <_impl_k_current_get+0x8>)
    453e:	6898      	ldr	r0, [r3, #8]
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	2000076c 	.word	0x2000076c

00004548 <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
    4548:	b570      	push	{r4, r5, r6, lr}
    454a:	4604      	mov	r4, r0
	__asm__ volatile(
    454c:	f04f 0320 	mov.w	r3, #32
    4550:	f3ef 8611 	mrs	r6, BASEPRI
    4554:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    4558:	f7ff fe01 	bl	415e <_unpend_first_thread>
	if (thread != NULL) {
    455c:	4605      	mov	r5, r0
    455e:	b170      	cbz	r0, 457e <_impl_k_sem_give+0x36>
    4560:	7b43      	ldrb	r3, [r0, #13]
    4562:	06db      	lsls	r3, r3, #27
    4564:	d104      	bne.n	4570 <_impl_k_sem_give+0x28>
	if (_is_thread_ready(thread)) {
    4566:	6a03      	ldr	r3, [r0, #32]
    4568:	3301      	adds	r3, #1
    456a:	d101      	bne.n	4570 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
    456c:	f7ff fe62 	bl	4234 <_add_thread_to_ready_q>
    4570:	2300      	movs	r3, #0
    4572:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
    4574:	4630      	mov	r0, r6
}
    4576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
    457a:	f7ff be09 	b.w	4190 <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    457e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4582:	429a      	cmp	r2, r3
    4584:	bf18      	it	ne
    4586:	3301      	addne	r3, #1
    4588:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    458a:	2102      	movs	r1, #2
    458c:	f104 0010 	add.w	r0, r4, #16
    4590:	f000 fae9 	bl	4b66 <_handle_obj_poll_events>
    4594:	e7ee      	b.n	4574 <_impl_k_sem_give+0x2c>

00004596 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    4596:	b410      	push	{r4}
    4598:	460a      	mov	r2, r1
    459a:	4604      	mov	r4, r0
    459c:	f04f 0320 	mov.w	r3, #32
    45a0:	f3ef 8011 	mrs	r0, BASEPRI
    45a4:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
    45a8:	68a3      	ldr	r3, [r4, #8]
    45aa:	b133      	cbz	r3, 45ba <_impl_k_sem_take+0x24>
		sem->count--;
    45ac:	3b01      	subs	r3, #1
    45ae:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    45b0:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    45b4:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
    45b6:	bc10      	pop	{r4}
    45b8:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    45ba:	b921      	cbnz	r1, 45c6 <_impl_k_sem_take+0x30>
    45bc:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
    45c0:	f06f 000f 	mvn.w	r0, #15
    45c4:	e7f7      	b.n	45b6 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
    45c6:	4621      	mov	r1, r4
}
    45c8:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
    45ca:	f7ff bedb 	b.w	4384 <_pend_current_thread>
	...

000045d0 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    45d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d2:	4605      	mov	r5, r0
    45d4:	460f      	mov	r7, r1
	__asm__ volatile(
    45d6:	f04f 0320 	mov.w	r3, #32
    45da:	f3ef 8411 	mrs	r4, BASEPRI
    45de:	f383 8811 	msr	BASEPRI, r3
	return (s32_t)ceiling_fraction(
    45e2:	480a      	ldr	r0, [pc, #40]	; (460c <schedule_new_thread.part.8+0x3c>)
    45e4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    45e8:	2100      	movs	r1, #0
    45ea:	2300      	movs	r3, #0
    45ec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    45f0:	fbc6 0107 	smlal	r0, r1, r6, r7
    45f4:	f7fb fe0e 	bl	214 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    45f8:	4905      	ldr	r1, [pc, #20]	; (4610 <schedule_new_thread.part.8+0x40>)
    45fa:	1c42      	adds	r2, r0, #1
    45fc:	f105 0018 	add.w	r0, r5, #24
    4600:	f000 f93a 	bl	4878 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4604:	f384 8811 	msr	BASEPRI, r4
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    4608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    460a:	bf00      	nop
    460c:	0004ffff 	.word	0x0004ffff
    4610:	00004273 	.word	0x00004273

00004614 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4614:	7b42      	ldrb	r2, [r0, #13]
    4616:	06d2      	lsls	r2, r2, #27
    4618:	d104      	bne.n	4624 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    461a:	6a03      	ldr	r3, [r0, #32]
    461c:	3301      	adds	r3, #1
    461e:	d101      	bne.n	4624 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    4620:	f7ff be08 	b.w	4234 <_add_thread_to_ready_q>
}
    4624:	4770      	bx	lr
	...

00004628 <k_is_in_isr>:
    4628:	f3ef 8005 	mrs	r0, IPSR
    462c:	280d      	cmp	r0, #13
    462e:	d807      	bhi.n	4640 <k_is_in_isr+0x18>
    4630:	b138      	cbz	r0, 4642 <k_is_in_isr+0x1a>
    4632:	4b04      	ldr	r3, [pc, #16]	; (4644 <k_is_in_isr+0x1c>)
    4634:	6858      	ldr	r0, [r3, #4]
    4636:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    463a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    463e:	4770      	bx	lr
    4640:	2001      	movs	r0, #1
}
    4642:	4770      	bx	lr
    4644:	e000ed00 	.word	0xe000ed00

00004648 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    4648:	4b02      	ldr	r3, [pc, #8]	; (4654 <_is_thread_essential+0xc>)
    464a:	689b      	ldr	r3, [r3, #8]
    464c:	7b18      	ldrb	r0, [r3, #12]
}
    464e:	f000 0001 	and.w	r0, r0, #1
    4652:	4770      	bx	lr
    4654:	2000076c 	.word	0x2000076c

00004658 <_impl_k_thread_start>:
{
    4658:	b510      	push	{r4, lr}
	__asm__ volatile(
    465a:	f04f 0320 	mov.w	r3, #32
    465e:	f3ef 8411 	mrs	r4, BASEPRI
    4662:	f383 8811 	msr	BASEPRI, r3
	if (_has_thread_started(thread)) {
    4666:	7b43      	ldrb	r3, [r0, #13]
    4668:	0759      	lsls	r1, r3, #29
    466a:	d402      	bmi.n	4672 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    466c:	f384 8811 	msr	BASEPRI, r4
}
    4670:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4672:	f023 0304 	bic.w	r3, r3, #4
    4676:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
    4678:	f7ff ffcc 	bl	4614 <_ready_thread>
	_reschedule(key);
    467c:	4620      	mov	r0, r4
}
    467e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    4682:	f7ff bd85 	b.w	4190 <_reschedule>
	...

00004688 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    4688:	b530      	push	{r4, r5, lr}
    468a:	b087      	sub	sp, #28
    468c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    468e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4690:	9504      	str	r5, [sp, #16]
    4692:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4694:	9503      	str	r5, [sp, #12]
    4696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4698:	9502      	str	r5, [sp, #8]
    469a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    469c:	9501      	str	r5, [sp, #4]
    469e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    46a0:	9500      	str	r5, [sp, #0]
    46a2:	f7fd ff27 	bl	24f4 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    46a6:	4b04      	ldr	r3, [pc, #16]	; (46b8 <_setup_new_thread+0x30>)
    46a8:	689b      	ldr	r3, [r3, #8]
    46aa:	b913      	cbnz	r3, 46b2 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    46ac:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    46ae:	b007      	add	sp, #28
    46b0:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    46b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    46b4:	e7fa      	b.n	46ac <_setup_new_thread+0x24>
    46b6:	bf00      	nop
    46b8:	2000076c 	.word	0x2000076c

000046bc <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    46bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    46be:	b510      	push	{r4, lr}
    46c0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    46c2:	b103      	cbz	r3, 46c6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    46c4:	4798      	blx	r3
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    46c6:	7b63      	ldrb	r3, [r4, #13]
    46c8:	06da      	lsls	r2, r3, #27
    46ca:	d10a      	bne.n	46e2 <_k_thread_single_abort+0x26>
	}

	if (_is_thread_ready(thread)) {
    46cc:	6a22      	ldr	r2, [r4, #32]
    46ce:	3201      	adds	r2, #1
    46d0:	d107      	bne.n	46e2 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    46d2:	4620      	mov	r0, r4
    46d4:	f7ff fd0a 	bl	40ec <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    46d8:	7b63      	ldrb	r3, [r4, #13]
    46da:	f043 0308 	orr.w	r3, r3, #8
    46de:	7363      	strb	r3, [r4, #13]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    46e0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    46e2:	079b      	lsls	r3, r3, #30
    46e4:	d502      	bpl.n	46ec <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
    46e6:	4620      	mov	r0, r4
    46e8:	f7ff fd28 	bl	413c <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
    46ec:	6a23      	ldr	r3, [r4, #32]
    46ee:	3301      	adds	r3, #1
    46f0:	d0f2      	beq.n	46d8 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    46f2:	f104 0018 	add.w	r0, r4, #24
    46f6:	f000 f881 	bl	47fc <_abort_timeout>
    46fa:	e7ed      	b.n	46d8 <_k_thread_single_abort+0x1c>

000046fc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    46fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    46fe:	4f23      	ldr	r7, [pc, #140]	; (478c <_init_static_threads+0x90>)
    4700:	4d23      	ldr	r5, [pc, #140]	; (4790 <_init_static_threads+0x94>)
{
    4702:	b087      	sub	sp, #28
    4704:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    4706:	42bd      	cmp	r5, r7
    4708:	f105 0430 	add.w	r4, r5, #48	; 0x30
    470c:	d314      	bcc.n	4738 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    470e:	4b21      	ldr	r3, [pc, #132]	; (4794 <_init_static_threads+0x98>)
    4710:	689a      	ldr	r2, [r3, #8]
    4712:	7bd3      	ldrb	r3, [r2, #15]
    4714:	3b01      	subs	r3, #1
    4716:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4718:	f04f 0320 	mov.w	r3, #32
    471c:	f3ef 8511 	mrs	r5, BASEPRI
    4720:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    4724:	4c1a      	ldr	r4, [pc, #104]	; (4790 <_init_static_threads+0x94>)
    4726:	42b4      	cmp	r4, r6
    4728:	d323      	bcc.n	4772 <_init_static_threads+0x76>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    472a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    472e:	b007      	add	sp, #28
    4730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    4734:	f7ff bd44 	b.w	41c0 <k_sched_unlock>
		_setup_new_thread(
    4738:	f854 3c04 	ldr.w	r3, [r4, #-4]
    473c:	9305      	str	r3, [sp, #20]
    473e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4742:	9304      	str	r3, [sp, #16]
    4744:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4748:	9303      	str	r3, [sp, #12]
    474a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    474e:	9302      	str	r3, [sp, #8]
    4750:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4754:	9301      	str	r3, [sp, #4]
    4756:	f854 3c20 	ldr.w	r3, [r4, #-32]
    475a:	9300      	str	r3, [sp, #0]
    475c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4760:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4764:	f7ff ff90 	bl	4688 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4768:	f854 3c30 	ldr.w	r3, [r4, #-48]
    476c:	64dd      	str	r5, [r3, #76]	; 0x4c
    476e:	4625      	mov	r5, r4
    4770:	e7c9      	b.n	4706 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    4772:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4774:	1c4b      	adds	r3, r1, #1
    4776:	d003      	beq.n	4780 <_init_static_threads+0x84>
			schedule_new_thread(thread_data->init_thread,
    4778:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    477a:	b919      	cbnz	r1, 4784 <_init_static_threads+0x88>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    477c:	f7ff ff6c 	bl	4658 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4780:	3430      	adds	r4, #48	; 0x30
    4782:	e7d0      	b.n	4726 <_init_static_threads+0x2a>
    4784:	f7ff ff24 	bl	45d0 <schedule_new_thread.part.8>
    4788:	e7fa      	b.n	4780 <_init_static_threads+0x84>
    478a:	bf00      	nop
    478c:	20001ddc 	.word	0x20001ddc
    4790:	20001dac 	.word	0x20001dac
    4794:	2000076c 	.word	0x2000076c

00004798 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    4798:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    479a:	2300      	movs	r3, #0
    479c:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
    479e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
    47a2:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    47a4:	7381      	strb	r1, [r0, #14]
    47a6:	6203      	str	r3, [r0, #32]

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    47a8:	4770      	bx	lr
	...

000047ac <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    47ac:	4b03      	ldr	r3, [pc, #12]	; (47bc <elapsed+0x10>)
    47ae:	681b      	ldr	r3, [r3, #0]
    47b0:	b90b      	cbnz	r3, 47b6 <elapsed+0xa>
    47b2:	f7fd bc50 	b.w	2056 <z_clock_elapsed>
}
    47b6:	2000      	movs	r0, #0
    47b8:	4770      	bx	lr
    47ba:	bf00      	nop
    47bc:	20000610 	.word	0x20000610

000047c0 <k_spin_lock.isra.1>:
	__asm__ volatile(
    47c0:	f04f 0320 	mov.w	r3, #32
    47c4:	f3ef 8011 	mrs	r0, BASEPRI
    47c8:	f383 8811 	msr	BASEPRI, r3
    47cc:	4770      	bx	lr
	...

000047d0 <remove_timeout>:
{
    47d0:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    47d2:	b140      	cbz	r0, 47e6 <remove_timeout+0x16>
    47d4:	4a08      	ldr	r2, [pc, #32]	; (47f8 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    47d6:	6852      	ldr	r2, [r2, #4]
    47d8:	4290      	cmp	r0, r2
    47da:	d004      	beq.n	47e6 <remove_timeout+0x16>
	if (next(t) != NULL) {
    47dc:	b11b      	cbz	r3, 47e6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    47de:	689a      	ldr	r2, [r3, #8]
    47e0:	6881      	ldr	r1, [r0, #8]
    47e2:	440a      	add	r2, r1
    47e4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    47e6:	6842      	ldr	r2, [r0, #4]
    47e8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    47ea:	6803      	ldr	r3, [r0, #0]
    47ec:	605a      	str	r2, [r3, #4]
	t->dticks = _INACTIVE;
    47ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47f2:	6083      	str	r3, [r0, #8]
}
    47f4:	4770      	bx	lr
    47f6:	bf00      	nop
    47f8:	20001d2c 	.word	0x20001d2c

000047fc <_abort_timeout>:

	z_clock_set_timeout(_get_next_timeout_expiry(), false);
}

int _abort_timeout(struct _timeout *to)
{
    47fc:	b510      	push	{r4, lr}
    47fe:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
    4800:	f7ff ffde 	bl	47c0 <k_spin_lock.isra.1>
    4804:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
    4806:	6890      	ldr	r0, [r2, #8]
    4808:	1c43      	adds	r3, r0, #1
    480a:	d003      	beq.n	4814 <_abort_timeout+0x18>
			remove_timeout(to);
    480c:	4610      	mov	r0, r2
    480e:	f7ff ffdf 	bl	47d0 <remove_timeout>
			ret = 0;
    4812:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4814:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
    4818:	bd10      	pop	{r4, pc}
	...

0000481c <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    481c:	4b13      	ldr	r3, [pc, #76]	; (486c <_get_next_timeout_expiry+0x50>)
    481e:	781b      	ldrb	r3, [r3, #0]
{
    4820:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    4822:	2b00      	cmp	r3, #0
    4824:	bf14      	ite	ne
    4826:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    482a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
    482e:	f7ff ffc7 	bl	47c0 <k_spin_lock.isra.1>
	return list->head == list;
    4832:	4b0f      	ldr	r3, [pc, #60]	; (4870 <_get_next_timeout_expiry+0x54>)
    4834:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4836:	429c      	cmp	r4, r3
    4838:	4606      	mov	r6, r0
    483a:	d00a      	beq.n	4852 <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    483c:	b14c      	cbz	r4, 4852 <_get_next_timeout_expiry+0x36>
    483e:	68a5      	ldr	r5, [r4, #8]
    4840:	f7ff ffb4 	bl	47ac <elapsed>
    4844:	1a28      	subs	r0, r5, r0
    4846:	2800      	cmp	r0, #0
    4848:	db0d      	blt.n	4866 <_get_next_timeout_expiry+0x4a>
    484a:	68a4      	ldr	r4, [r4, #8]
    484c:	f7ff ffae 	bl	47ac <elapsed>
    4850:	1a22      	subs	r2, r4, r0
    4852:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4856:	4b07      	ldr	r3, [pc, #28]	; (4874 <_get_next_timeout_expiry+0x58>)
    4858:	691b      	ldr	r3, [r3, #16]
    485a:	b113      	cbz	r3, 4862 <_get_next_timeout_expiry+0x46>
    485c:	429a      	cmp	r2, r3
    485e:	bfa8      	it	ge
    4860:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4862:	4610      	mov	r0, r2
    4864:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    4866:	2200      	movs	r2, #0
    4868:	e7f3      	b.n	4852 <_get_next_timeout_expiry+0x36>
    486a:	bf00      	nop
    486c:	20000614 	.word	0x20000614
    4870:	20001d2c 	.word	0x20001d2c
    4874:	2000076c 	.word	0x2000076c

00004878 <_add_timeout>:
{
    4878:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
    487a:	60c1      	str	r1, [r0, #12]
{
    487c:	4615      	mov	r5, r2
    487e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    4880:	f7ff ff9e 	bl	47c0 <k_spin_lock.isra.1>
    4884:	4606      	mov	r6, r0
		to->dticks = ticks + elapsed();
    4886:	f7ff ff91 	bl	47ac <elapsed>
	return list->head == list;
    488a:	4a16      	ldr	r2, [pc, #88]	; (48e4 <_add_timeout+0x6c>)
    488c:	6813      	ldr	r3, [r2, #0]
    488e:	2d01      	cmp	r5, #1
    4890:	bfac      	ite	ge
    4892:	1940      	addge	r0, r0, r5
    4894:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4896:	4293      	cmp	r3, r2
    4898:	60a0      	str	r0, [r4, #8]
    489a:	d001      	beq.n	48a0 <_add_timeout+0x28>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    489c:	6855      	ldr	r5, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    489e:	b933      	cbnz	r3, 48ae <_add_timeout+0x36>
	node->prev = list->tail;
    48a0:	6853      	ldr	r3, [r2, #4]
    48a2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    48a4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
    48a6:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
    48a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    48aa:	6054      	str	r4, [r2, #4]
    48ac:	e00b      	b.n	48c6 <_add_timeout+0x4e>
			if (t->dticks > to->dticks) {
    48ae:	6898      	ldr	r0, [r3, #8]
    48b0:	68a1      	ldr	r1, [r4, #8]
    48b2:	4288      	cmp	r0, r1
    48b4:	dd10      	ble.n	48d8 <_add_timeout+0x60>
		node->prev = insert_point->prev;
    48b6:	685a      	ldr	r2, [r3, #4]
				t->dticks -= to->dticks;
    48b8:	1a41      	subs	r1, r0, r1
    48ba:	6099      	str	r1, [r3, #8]
		node->next = insert_point;
    48bc:	e9c4 3200 	strd	r3, r2, [r4]
		insert_point->prev->next = node;
    48c0:	685a      	ldr	r2, [r3, #4]
    48c2:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
    48c4:	605c      	str	r4, [r3, #4]
    48c6:	f386 8811 	msr	BASEPRI, r6
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    48ca:	f7ff ffa7 	bl	481c <_get_next_timeout_expiry>
    48ce:	2100      	movs	r1, #0
}
    48d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    48d4:	f7fd bbbe 	b.w	2054 <z_clock_set_timeout>
			to->dticks -= t->dticks;
    48d8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    48da:	429d      	cmp	r5, r3
    48dc:	60a1      	str	r1, [r4, #8]
    48de:	d0df      	beq.n	48a0 <_add_timeout+0x28>
    48e0:	681b      	ldr	r3, [r3, #0]
    48e2:	e7dc      	b.n	489e <_add_timeout+0x26>
    48e4:	20001d2c 	.word	0x20001d2c

000048e8 <z_clock_announce>:
{
    48e8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	announce_remaining = ticks;
    48ec:	4d21      	ldr	r5, [pc, #132]	; (4974 <z_clock_announce+0x8c>)
	return list->head == list;
    48ee:	4e22      	ldr	r6, [pc, #136]	; (4978 <z_clock_announce+0x90>)
					curr_tick += t->dticks;
    48f0:	4f22      	ldr	r7, [pc, #136]	; (497c <z_clock_announce+0x94>)
{
    48f2:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48f4:	f04f 0800 	mov.w	r8, #0
	z_time_slice(ticks);
    48f8:	f7ff fcee 	bl	42d8 <z_time_slice>
	announce_remaining = ticks;
    48fc:	602c      	str	r4, [r5, #0]
		LOCKED(&timeout_lock) {
    48fe:	f7ff ff5f 	bl	47c0 <k_spin_lock.isra.1>
	return list->head == list;
    4902:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4904:	42b4      	cmp	r4, r6
    4906:	4681      	mov	r9, r0
    4908:	d01c      	beq.n	4944 <z_clock_announce+0x5c>
			if (t != NULL) {
    490a:	b194      	cbz	r4, 4932 <z_clock_announce+0x4a>
				if (t->dticks <= announce_remaining) {
    490c:	68a1      	ldr	r1, [r4, #8]
    490e:	682b      	ldr	r3, [r5, #0]
    4910:	4299      	cmp	r1, r3
    4912:	dc15      	bgt.n	4940 <z_clock_announce+0x58>
					announce_remaining -= t->dticks;
    4914:	1a5b      	subs	r3, r3, r1
    4916:	602b      	str	r3, [r5, #0]
					curr_tick += t->dticks;
    4918:	e9d7 2300 	ldrd	r2, r3, [r7]
    491c:	eb12 0b01 	adds.w	fp, r2, r1
    4920:	eb43 7ce1 	adc.w	ip, r3, r1, asr #31
					t->dticks = 0;
    4924:	f8c4 8008 	str.w	r8, [r4, #8]
					remove_timeout(t);
    4928:	4620      	mov	r0, r4
					curr_tick += t->dticks;
    492a:	e9c7 bc00 	strd	fp, ip, [r7]
					remove_timeout(t);
    492e:	f7ff ff4f 	bl	47d0 <remove_timeout>
    4932:	f389 8811 	msr	BASEPRI, r9
		if (t == NULL) {
    4936:	b13c      	cbz	r4, 4948 <z_clock_announce+0x60>
		t->fn(t);
    4938:	68e3      	ldr	r3, [r4, #12]
    493a:	4620      	mov	r0, r4
    493c:	4798      	blx	r3
		LOCKED(&timeout_lock) {
    493e:	e7de      	b.n	48fe <z_clock_announce+0x16>
					t->dticks -= announce_remaining;
    4940:	1ac9      	subs	r1, r1, r3
    4942:	60a1      	str	r1, [r4, #8]
    4944:	2400      	movs	r4, #0
    4946:	e7f4      	b.n	4932 <z_clock_announce+0x4a>
		curr_tick += announce_remaining;
    4948:	4e0c      	ldr	r6, [pc, #48]	; (497c <z_clock_announce+0x94>)
	LOCKED(&timeout_lock) {
    494a:	f7ff ff39 	bl	47c0 <k_spin_lock.isra.1>
		curr_tick += announce_remaining;
    494e:	e9d6 2300 	ldrd	r2, r3, [r6]
    4952:	6829      	ldr	r1, [r5, #0]
		announce_remaining = 0;
    4954:	602c      	str	r4, [r5, #0]
		curr_tick += announce_remaining;
    4956:	1857      	adds	r7, r2, r1
    4958:	eb43 78e1 	adc.w	r8, r3, r1, asr #31
    495c:	e9c6 7800 	strd	r7, r8, [r6]
    4960:	f380 8811 	msr	BASEPRI, r0
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    4964:	f7ff ff5a 	bl	481c <_get_next_timeout_expiry>
    4968:	4621      	mov	r1, r4
}
    496a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    496e:	f7fd bb71 	b.w	2054 <z_clock_set_timeout>
    4972:	bf00      	nop
    4974:	20000610 	.word	0x20000610
    4978:	20001d2c 	.word	0x20001d2c
    497c:	20000618 	.word	0x20000618

00004980 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    4980:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0;

	LOCKED(&timeout_lock) {
    4984:	f7ff ff1c 	bl	47c0 <k_spin_lock.isra.1>
    4988:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
    498a:	f7fd fb64 	bl	2056 <z_clock_elapsed>
    498e:	4b06      	ldr	r3, [pc, #24]	; (49a8 <z_tick_get+0x28>)
    4990:	e9d3 2300 	ldrd	r2, r3, [r3]
    4994:	eb12 0b00 	adds.w	fp, r2, r0
    4998:	f143 0c00 	adc.w	ip, r3, #0
    499c:	4658      	mov	r0, fp
    499e:	4661      	mov	r1, ip
    49a0:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
    49a4:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    49a8:	20000618 	.word	0x20000618

000049ac <z_tick_get_32>:
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
#else
	return (u32_t)curr_tick;
#endif
}
    49ac:	4b01      	ldr	r3, [pc, #4]	; (49b4 <z_tick_get_32+0x8>)
    49ae:	6818      	ldr	r0, [r3, #0]
    49b0:	4770      	bx	lr
    49b2:	bf00      	nop
    49b4:	20000618 	.word	0x20000618

000049b8 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    49b8:	7b42      	ldrb	r2, [r0, #13]
    49ba:	06d2      	lsls	r2, r2, #27
    49bc:	d104      	bne.n	49c8 <_ready_thread+0x10>
	if (_is_thread_ready(thread)) {
    49be:	6a03      	ldr	r3, [r0, #32]
    49c0:	3301      	adds	r3, #1
    49c2:	d101      	bne.n	49c8 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    49c4:	f7ff bc36 	b.w	4234 <_add_thread_to_ready_q>
}
    49c8:	4770      	bx	lr
	...

000049cc <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
    49cc:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    49ce:	6a03      	ldr	r3, [r0, #32]
    49d0:	2b00      	cmp	r3, #0
{
    49d2:	4604      	mov	r4, r0
	if (timer->period > 0) {
    49d4:	dd0b      	ble.n	49ee <_timer_expiration_handler+0x22>
	__asm__ volatile(
    49d6:	f04f 0320 	mov.w	r3, #32
    49da:	f3ef 8511 	mrs	r5, BASEPRI
    49de:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(&timer->timeout, _timer_expiration_handler,
    49e2:	4911      	ldr	r1, [pc, #68]	; (4a28 <_timer_expiration_handler+0x5c>)
    49e4:	6a02      	ldr	r2, [r0, #32]
    49e6:	f7ff ff47 	bl	4878 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    49ea:	f385 8811 	msr	BASEPRI, r5
			     timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    49ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49f0:	3301      	adds	r3, #1
    49f2:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    49f4:	69a3      	ldr	r3, [r4, #24]
    49f6:	b10b      	cbz	r3, 49fc <_timer_expiration_handler+0x30>
		timer->expiry_fn(timer);
    49f8:	4620      	mov	r0, r4
    49fa:	4798      	blx	r3
	return list->head == list;
    49fc:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a00:	42a5      	cmp	r5, r4
    4a02:	d010      	beq.n	4a26 <_timer_expiration_handler+0x5a>
	}

	thread = _waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4a04:	b17d      	cbz	r5, 4a26 <_timer_expiration_handler+0x5a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	_unpend_thread_no_timeout(thread);
    4a06:	4628      	mov	r0, r5
    4a08:	f7ff fb98 	bl	413c <_unpend_thread_no_timeout>
	__asm__ volatile(
    4a0c:	f04f 0320 	mov.w	r3, #32
    4a10:	f3ef 8411 	mrs	r4, BASEPRI
    4a14:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    4a18:	4628      	mov	r0, r5
    4a1a:	f7ff ffcd 	bl	49b8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4a1e:	f384 8811 	msr	BASEPRI, r4
    4a22:	2300      	movs	r3, #0
    4a24:	66ab      	str	r3, [r5, #104]	; 0x68
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
    4a26:	bd38      	pop	{r3, r4, r5, pc}
    4a28:	000049cd 	.word	0x000049cd

00004a2c <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    4a2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4a30:	4e18      	ldr	r6, [pc, #96]	; (4a94 <_impl_k_timer_start+0x68>)
    4a32:	2700      	movs	r7, #0
    4a34:	4688      	mov	r8, r1
    4a36:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    4a3a:	4604      	mov	r4, r0
    4a3c:	4639      	mov	r1, r7
    4a3e:	4630      	mov	r0, r6
    4a40:	fbc5 0102 	smlal	r0, r1, r5, r2
    4a44:	2300      	movs	r3, #0
    4a46:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4a4a:	f7fb fbe3 	bl	214 <__aeabi_ldivmod>
    4a4e:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
    4a50:	9000      	str	r0, [sp, #0]
    4a52:	4630      	mov	r0, r6
    4a54:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4a58:	2300      	movs	r3, #0
    4a5a:	fbc5 0108 	smlal	r0, r1, r5, r8
    4a5e:	f7fb fbd9 	bl	214 <__aeabi_ldivmod>
	duration_in_ticks = _ms_to_ticks(duration);
    4a62:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    4a64:	f04f 0320 	mov.w	r3, #32
    4a68:	f3ef 8511 	mrs	r5, BASEPRI
    4a6c:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	(void)_abort_timeout(&timer->timeout);
    4a70:	4620      	mov	r0, r4
    4a72:	f7ff fec3 	bl	47fc <_abort_timeout>
	timer->period = period_in_ticks;
    4a76:	9b00      	ldr	r3, [sp, #0]
    4a78:	6223      	str	r3, [r4, #32]
	timer->status = 0;
    4a7a:	2300      	movs	r3, #0
    4a7c:	6263      	str	r3, [r4, #36]	; 0x24
	_add_timeout(&timer->timeout, _timer_expiration_handler,
    4a7e:	9a01      	ldr	r2, [sp, #4]
    4a80:	4905      	ldr	r1, [pc, #20]	; (4a98 <_impl_k_timer_start+0x6c>)
    4a82:	4620      	mov	r0, r4
    4a84:	f7ff fef8 	bl	4878 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4a88:	f385 8811 	msr	BASEPRI, r5
		     duration_in_ticks);
	irq_unlock(key);
}
    4a8c:	b002      	add	sp, #8
    4a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a92:	bf00      	nop
    4a94:	0004ffff 	.word	0x0004ffff
    4a98:	000049cd 	.word	0x000049cd

00004a9c <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
    4a9c:	b538      	push	{r3, r4, r5, lr}
    4a9e:	4604      	mov	r4, r0
	__asm__ volatile(
    4aa0:	f04f 0320 	mov.w	r3, #32
    4aa4:	f3ef 8511 	mrs	r5, BASEPRI
    4aa8:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
    4aac:	f7ff fea6 	bl	47fc <_abort_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4ab0:	f385 8811 	msr	BASEPRI, r5

	irq_unlock(key);

	if (inactive) {
    4ab4:	3001      	adds	r0, #1
    4ab6:	d025      	beq.n	4b04 <_impl_k_timer_stop+0x68>
		return;
	}

	if (timer->stop_fn) {
    4ab8:	69e3      	ldr	r3, [r4, #28]
    4aba:	b10b      	cbz	r3, 4ac0 <_impl_k_timer_stop+0x24>
		timer->stop_fn(timer);
    4abc:	4620      	mov	r0, r4
    4abe:	4798      	blx	r3
	__asm__ volatile(
    4ac0:	f04f 0320 	mov.w	r3, #32
    4ac4:	f3ef 8511 	mrs	r5, BASEPRI
    4ac8:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    4acc:	2100      	movs	r1, #0
    4ace:	f104 0010 	add.w	r0, r4, #16
    4ad2:	f7ff fb27 	bl	4124 <_find_first_thread_to_unpend>
	if (thread != NULL) {
    4ad6:	4604      	mov	r4, r0
    4ad8:	b120      	cbz	r0, 4ae4 <_impl_k_timer_stop+0x48>
		_unpend_thread_no_timeout(thread);
    4ada:	f7ff fb2f 	bl	413c <_unpend_thread_no_timeout>

	key = irq_lock();
	struct k_thread *pending_thread = _unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		_ready_thread(pending_thread);
    4ade:	4620      	mov	r0, r4
    4ae0:	f7ff ff6a 	bl	49b8 <_ready_thread>
    4ae4:	f3ef 8305 	mrs	r3, IPSR
    4ae8:	2b0d      	cmp	r3, #13
    4aea:	d809      	bhi.n	4b00 <_impl_k_timer_stop+0x64>
    4aec:	b11b      	cbz	r3, 4af6 <_impl_k_timer_stop+0x5a>
    4aee:	4b06      	ldr	r3, [pc, #24]	; (4b08 <_impl_k_timer_stop+0x6c>)
    4af0:	685b      	ldr	r3, [r3, #4]
    4af2:	051b      	lsls	r3, r3, #20
    4af4:	d504      	bpl.n	4b00 <_impl_k_timer_stop+0x64>
	}

	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule(key);
    4af6:	4628      	mov	r0, r5
	}
}
    4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_reschedule(key);
    4afc:	f7ff bb48 	b.w	4190 <_reschedule>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4b00:	f385 8811 	msr	BASEPRI, r5
}
    4b04:	bd38      	pop	{r3, r4, r5, pc}
    4b06:	bf00      	nop
    4b08:	e000ed00 	.word	0xe000ed00

00004b0c <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
    4b0c:	6883      	ldr	r3, [r0, #8]
{
    4b0e:	b570      	push	{r4, r5, r6, lr}
    4b10:	4605      	mov	r5, r0
    4b12:	460e      	mov	r6, r1
	if (!event->poller) {
    4b14:	b1d3      	cbz	r3, 4b4c <signal_poll_event+0x40>
	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread != NULL,
		 "poller should have a thread\n");

	event->poller->is_polling = 0;
    4b16:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    4b18:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
    4b1a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
    4b1c:	7b63      	ldrb	r3, [r4, #13]
    4b1e:	079a      	lsls	r2, r3, #30
    4b20:	d514      	bpl.n	4b4c <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    4b22:	6a23      	ldr	r3, [r4, #32]
    4b24:	3302      	adds	r3, #2
    4b26:	d01b      	beq.n	4b60 <signal_poll_event+0x54>
		return -EAGAIN;
	}

	_unpend_thread(thread);
    4b28:	4620      	mov	r0, r4
    4b2a:	f7ff fb26 	bl	417a <_unpend_thread>
	_set_thread_return_value(thread,
    4b2e:	2e08      	cmp	r6, #8
    4b30:	bf0c      	ite	eq
    4b32:	f06f 0303 	mvneq.w	r3, #3
    4b36:	2300      	movne	r3, #0
    4b38:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    4b3a:	7b63      	ldrb	r3, [r4, #13]
    4b3c:	06db      	lsls	r3, r3, #27
    4b3e:	d105      	bne.n	4b4c <signal_poll_event+0x40>
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
    4b40:	6a23      	ldr	r3, [r4, #32]
    4b42:	3301      	adds	r3, #1
    4b44:	d102      	bne.n	4b4c <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
    4b46:	4620      	mov	r0, r4
    4b48:	f7ff fb74 	bl	4234 <_add_thread_to_ready_q>
	event->state |= state;
    4b4c:	68eb      	ldr	r3, [r5, #12]
    4b4e:	f3c3 3204 	ubfx	r2, r3, #12, #5
    4b52:	4316      	orrs	r6, r2
	event->poller = NULL;
    4b54:	2000      	movs	r0, #0
	event->state |= state;
    4b56:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
    4b5a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    4b5c:	60eb      	str	r3, [r5, #12]
	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
}
    4b5e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    4b60:	f06f 000a 	mvn.w	r0, #10
    4b64:	e7fb      	b.n	4b5e <signal_poll_event+0x52>

00004b66 <_handle_obj_poll_events>:
	return list->head == list;
    4b66:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    4b68:	4298      	cmp	r0, r3
    4b6a:	d007      	beq.n	4b7c <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
    4b6c:	e9d3 0200 	ldrd	r0, r2, [r3]
    4b70:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    4b72:	6818      	ldr	r0, [r3, #0]
    4b74:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
    4b76:	4618      	mov	r0, r3
    4b78:	f7ff bfc8 	b.w	4b0c <signal_poll_event>
	}
}
    4b7c:	4770      	bx	lr

00004b7e <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
    4b7e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4b80:	f04f 0320 	mov.w	r3, #32
    4b84:	f3ef 8511 	mrs	r5, BASEPRI
    4b88:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    4b8c:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
    4b8e:	60c1      	str	r1, [r0, #12]
	if (!sys_dlist_is_empty(list)) {
    4b90:	4298      	cmp	r0, r3
	signal->signaled = 1;
    4b92:	f04f 0101 	mov.w	r1, #1
    4b96:	6081      	str	r1, [r0, #8]
    4b98:	d104      	bne.n	4ba4 <_impl_k_poll_signal+0x26>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4b9a:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		irq_unlock(key);
		return 0;
    4b9e:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	_reschedule(key);
	return rc;
}
    4ba0:	4620      	mov	r0, r4
    4ba2:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
    4ba4:	e9d3 0200 	ldrd	r0, r2, [r3]
    4ba8:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    4baa:	6818      	ldr	r0, [r3, #0]
    4bac:	6042      	str	r2, [r0, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    4bae:	4618      	mov	r0, r3
    4bb0:	f7ff ffac 	bl	4b0c <signal_poll_event>
    4bb4:	4604      	mov	r4, r0
	_reschedule(key);
    4bb6:	4628      	mov	r0, r5
    4bb8:	f7ff faea 	bl	4190 <_reschedule>
	return rc;
    4bbc:	e7f0      	b.n	4ba0 <_impl_k_poll_signal+0x22>

00004bbe <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    4bbe:	4770      	bx	lr
